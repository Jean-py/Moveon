#!/usr/bin/env node


/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('moveon:server');
let config = require('../src/config/configServer');
let http = require('http');
let babel = require('babel-core/register');

var fse = require('fs-extra');
var klaw = require('klaw');
var watch = require('watch');
var path = require('path');
var pkg = require('../package.json');
var util = require('util');

var javascripts = require('./javascripts');
var server = require('./server');
var logger = require('../src/server/ServerLogger');


var cwd = process.cwd();

/**
 * Get port from environment and store in Express.
 */
var port = config.portServer;


//var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
  console.log('listening on *:' +port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event controller for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event controller for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * Options for babel transpiling.
 */
var babelrc = fse.readFileSync(path.join(cwd, '.babelrc'));
var babelOptions = JSON.parse(babelrc.toString());

/**
 * Options for watch.
 */
var watchOptions = {
  ignoreDotFiles: true,
  ignoreUnreadableDir: true,
  ignoreNotPermitted: true,
  interval: 2, // watch internally use `fs.watchFile`
};

/**
 * Options for browserify.
 */
var browserifyOptions = {
  debug: true,
  fullPaths: false,
  standalone: pkg.standalone,
};

/**
 * Watched directories
 */
var srcDirectory = path.join(cwd, 'src');
var distDirectory = path.join(cwd, 'dist');
var clientEntryPoint = path.join(distDirectory, 'client/js/sensorScript.js');
var bundlePath = path.join(cwd, 'public/bundle.js');

// http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex
function escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

/**
 * Define which file should be ignored by every command.
 */
var allowedExtentions = /\.js$/;
var excludeFiles = /^\./; // exclude hidden files
var clientFile = new RegExp('^' + escapeRegExp(srcDirectory + path.sep + 'client'));




/**
 * Test the given filename, to ensure it can be processed by any command / tranpsiler
 * @param {String} filename - The filename to be checked.
 * @param {Boolean} [ensureFile=true] - If set to false, don't test if the file exists.
 */
function isAllowed(filename, ensureFile) {
  ensureFile = ensureFile === undefined ? true : ensureFile;
  
  var basename = path.basename(filename);
  var isFile = true;
  
  if (ensureFile) {
    try {
      isFile = fse.lstatSync(filename).isFile() && !fse.lstatSync(filename).isSymbolicLink();
    } catch(e) {
      console.log(e.message);
      isFile = false;
    }
  }
  
  var hasAllowedExt = allowedExtentions.test(basename);
  var notExcludeFile = !excludeFiles.test(basename);
  
  return isFile && hasAllowedExt && notExcludeFile;
}

/**
 * Returns a list of the file in a given folder recursively.
 */
function _getFileList(folder, callback) {
  var files = [];
  
  klaw(folder)
    .on('data', function(item) {
      if (item.stats.isFile() && isAllowed(item.path))
        files.push(item.path);
    })
    .on('end', function() {
      callback(files);
    });
}

/**
 * Watch javascript source files.
 */
function watchFiles(srcDirectory, distDirectory) {
  var transpiler = javascripts.getTranspiler(srcDirectory, distDirectory, isAllowed, babelOptions, browserifyOptions);
  
  function processFile(filename, stats) {
    if (!isAllowed(filename)) return;
    
    var isClientFile = clientFile.test(filename);
    var callback;
    
    if (isClientFile) {
      callback = function() {};
    } else {
      server.stop();
      callback = server.start;
    }
    
    transpiler.transpile(filename, [], callback);
  }
  
  watch.createMonitor(srcDirectory, Object.assign({}, watchOptions), function(monitor) {
    monitor.on('created', processFile);
    monitor.on('changed', processFile);
    monitor.on('removed', (filename, stats) => {
      if (clientFile.test(filename)) {
        transpiler.delete(filename);
        transpiler.bundle(clientEntryPoint, bundlePath);
      } else {
        server.stop();
        transpiler.delete(filename, server.start);
      }
    });
  });
  
  // start server
  
}


function transpile(srcDirectory, distDirectory, callback) {
  _getFileList(srcDirectory, function(files) {
    var transpiler = javascripts.getTranspiler(srcDirectory, distDirectory, isAllowed, babelOptions);
    transpiler.transpile(undefined, files, callback);
  });
}

function bundle(distDirectory, callback) {
  
  var transpiler = javascripts.getTranspiler(srcDirectory, distDirectory, isAllowed, babelOptions, browserifyOptions);
  
  transpile(srcDirectory, distDirectory, function() {
    transpiler.bundle(clientEntryPoint, bundlePath, callback);
  });
}

module.exports.getTranspiler = function() {
  return javascripts.getTranspiler(srcDirectory, distDirectory, isAllowed, babelOptions, browserifyOptions);
}

/* --------------------------------------------------------------------------
 * Process and execute the given command.
 * -------------------------------------------------------------------------- */

var command = process.argv[2];
var args = process.argv.slice(3);
var argv = {};
for (var i = 0; i < args.length; i += 2)
  argv[args[i]] = args[i + 1];

switch (command) {
  /**
   * Watch the file system and transpile from es6 to es5.
   */
  case '--watch':
    watchFiles(srcDirectory, distDirectory);
    break;
  
  /**
   * Transpile all files in `src` from es6 to es5.
   */
  case '--transpile':
    transpile(srcDirectory, distDirectory);
    break;
  
  /**
   * Transpile all files in `src` from es6 to es5 and browserify all the things.
   */
  case '--bundle':
    bundle(distDirectory);
    break;
}

/* --------------------------------------------------------------------------
Create the web socket enabling communication with clients
 * -------------------------------------------------------------------------- */

/**
 * Create a logger for the application
 * @type {ServerLogger}
 */

const ServerLogger = require('../src/server/ServerLogger');

// Instantiate User:
var serverLogger = new ServerLogger();

const io = require('socket.io')(server);
io.on("connection",  (socket)=> {
  console.log('New user connected : '+ socket.id);
  socket.username = socket.id;
  
  
  socket.on("socket_username", (data) =>{
    console.log("**** socket name changed **** ");
  
    socket.username = data.username;
    console.log("Socket changing username to : " + socket.username)
  });
  
  socket.on("log_command", function (command){
    //socket.command = data.username;
    serverLogger.log(socket.username,command);
  });
  
  socket.on("saveSH", function (SH){
    //socket.command = data.username;
    serverLogger.saveSH(socket.username,SH);
  });
  
 
});

