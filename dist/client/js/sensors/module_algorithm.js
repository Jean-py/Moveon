"use strict";

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var time = 0;
var dt = 0.01;

/*Method sliding window computation, require less computation than the naive one*/
var ansX = [];
var ansY = [];
var ansZ = [];
var computedSpeedRate = 0;
var sumLastElem = 0;
var sumFirstElem = 0;
function computeSpeedRateAdaptativeWindow(windowLength, newX, newY, newZ) {
  if (ansX.length >= windowLength) {
    var firstElementX = ansX.shift();
    var firstElementY = ansY.shift();
    var firstElementZ = ansZ.shift();
    sumFirstElem = firstElementX + firstElementY + firstElementZ;
  }
  var x = Math.abs(newX / g);
  // let x = (newX/g);
  ansX.push(x);
  var y = Math.abs(newY / g);
  // let y = (newY/g);
  ansY.push(y);
  var z = Math.abs(newZ / g);
  //let z = (newZ/g);
  ansZ.push(z);

  sumLastElem = x + y + z;
  computedSpeedRate = computedSpeedRate - sumFirstElem + sumLastElem;

  return computedSpeedRate;
}

//Algorithm de calcul naif de la vitesse selon une fenetre: retourne le meme resultat que l'algorithme evolué
var ansXNaif = [];
var ansYNaif = [];
var ansZNaif = [];
function computeSpeedRateAdaptativeWindowNaif(windowLength, x, y, z) {
  console.log("The function computeSpeedRateAdaptativeWindowNaif is deprecated, use computeSpeedRateAdaptativeWindow instead.");
  if (ansXNaif.length >= windowLength) {
    ansXNaif.shift();
    ansYNaif.shift();
    ansZNaif.shift();
  }
  ansXNaif.push(x / g);
  ansYNaif.push(y / g);
  ansZNaif.push(z / g);

  var speedRate = 0;
  for (var i = 0; i < windowLength; i++) {
    speedRate += ansXNaif[i] + ansYNaif[i] + ansZNaif[i];
    //speedRate += Math.abs(ansX[i]/g)+ Math.abs(ansY[i]/g) +  Math.abs(ansZ[i]/g);
    // speedRate +=Math.sqrt(Math.pow( Math.abs(ansX[i]/g) ,2)+ Math.pow(  Math.abs(ansY[i]/g),2) + Math.pow( Math.abs(ansZ[i]/g),2));
  }
  return speedRate;
}

function displayAcceleroWindowSpeed(windowLength, data) {
  time += dt;
  var speedRate = computeSpeedRateAdaptativeWindow(windowLength, data.accelerometer.x, data.accelerometer.y, data.accelerometer.z);
  var frameAccelero = {
    time: time,
    data: [data.accelerometer.x * speedRate, data.accelerometer.y * speedRate, data.accelerometer.z * speedRate],
    metadata: true
  };
  eventInAccelero.processFrame(frameAccelero);
}

//For the sliding window of kinestetic awareness replication
var slidingWindow = [];
function displayEMGWindow(windowLength, data) {
  timeEMG += dtEMG;
  //Slinding window of EMG
  if (slidingWindow.length > windowLength) {
    slidingWindow.shift();
  }
  slidingWindow.push(Math.max.apply(Math, _toConsumableArray(data)));
  var maxSliding = Math.max.apply(Math, slidingWindow);
  var frameEMGSliding = {
    time: timeEMG,
    data: slidingWindow[slidingWindow.length - 1] / maxSliding
  };

  var frameEMG = {
    time: timeEMG,
    data: data
  };
  eventInEMGSliding.processFrame(frameEMGSliding);
  eventInEMG.processFrame(frameEMG);
}

//variables for the savitzky-golay filter
var arrayFilteringX = [];
var arrayFilteringY = [];
var arrayFilteringZ = [];
var ansx = [];
var ansy = [];
var ansz = [];
var options = { derivative: 1, windowSize: SGWindowLength - 1 };
var optionsGolayLowPass = { derivative: 0 };
function displaySmoothness(windowLengthSG, data) {
  //Calculing smoothness
  arrayFilteringX.push(data.accelerometer.x);
  arrayFilteringY.push(data.accelerometer.y);
  arrayFilteringZ.push(data.accelerometer.z);

  //taille de la fenetre de calcule de l'algorithme
  if (arrayFilteringZ.length >= windowLengthSG) {
    arrayFilteringX.shift();
    arrayFilteringY.shift();
    arrayFilteringZ.shift();

    //apllication de savitzky-golay filter
    ansx = SG(arrayFilteringX, 1, options);
    ansy = SG(arrayFilteringY, 1, options);
    ansz = SG(arrayFilteringZ, 1, options);

    //normalising data
    var normaliseData = Math.sqrt(Math.pow(ansx[ansx.length - 1], 2) + Math.pow(ansy[ansy.length - 1], 2) + Math.pow(ansz[ansz.length - 1], 2));
    var amplitudeData = computeAmplitudeWindow(amplitudeWindowLength, normaliseData);
    var speedRate = computeSpeedRateAdaptativeWindow(speedRateWindowLength, data.accelerometer.x, data.accelerometer.y, data.accelerometer.z);
    // console.log("speedRate : " + speedRate);

    if (recording) {
      arrayRecorded.push(normaliseData);
      console.log("arrayRecorded : " + arrayRecorded.length);
    }

    var frameSmoothness = {
      time: time,
      data: amplitudeData,
      //data: normaliseData,
      metadata: null
    };
    eventInSmoothness.processFrame(frameSmoothness);
  }
}

//version naive de l'algorithme, le for peut etre remplacé comme dans la fonction: computeSpeedRateAdaptativeWindow
//Moyenne des données du jerk normalisé
var arrayAmplitude = [];
function computeAmplitudeWindow(windowLength, data) {
  var amplitudeRate = 0;
  if (arrayAmplitude.length > windowLength) {
    arrayAmplitude.shift();
  }
  arrayAmplitude.push(data);
  for (var i = 0; i < windowLength; i++) {
    amplitudeRate += arrayAmplitude[i];
  }
  amplitudeRate /= windowLength;
  // console.log("amplitudeRate : " + amplitudeRate );
  return amplitudeRate;
}

window.setSGWindowLength = function (newValue) {
  //console.log("new value SG : " + newValue);
  SGWindowLength = newValue;
  options = { derivative: 1, windowSize: SGWindowLength - 1 };

  arrayFilteringX = [];
  arrayFilteringY = [];
  arrayFilteringZ = [];
  ansX = [];
  ansY = [];
  ansZ = [];
};

window.setAmplitudeWindowLength = function (newValue) {
  amplitudeWindowLength = newValue;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,