"use strict";var _createClass4=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _typeof4=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}function _classCallCheck4(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a;}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r);},p,p.exports,r,e,n,t);}return n[i].exports;}for(var u="function"==typeof require&&require,i=0;i<t.length;i++){o(t[i]);}return o;}return r;})()({1:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var min=Math.min;var max=Math.max;function clip(value){var lower=arguments.length>1&&arguments[1]!==undefined?arguments[1]:-Infinity;var upper=arguments.length>2&&arguments[2]!==undefined?arguments[2]:+Infinity;return max(lower,min(upper,value));}/**
 * Dictionnary of the available types. Each key correspond to the type of the
 * implemented param while the corresponding object value should the
 * {@link `paramDefinition`} of the defined type.
 *
 * typedef {Object} paramTemplates
 * @type {Object<String, paramTemplate>}
 *//**
 * Definition of a parameter. The definition should at least contain the entries
 * `type` and `default`. Every parameter can also accept optionnal configuration
 * entries `constant` and `metas`.
 * Available definitions are:
 * - {@link booleanDefinition}
 * - {@link integerDefinition}
 * - {@link floatDefinition}
 * - {@link stringDefinition}
 * - {@link enumDefinition}
 *
 * typedef {Object} paramDefinition
 * @property {String} type - Type of the parameter.
 * @property {Mixed} default - Default value of the parameter if no
 *  initialization value is provided.
 * @property {Boolean} [constant=false] - Define if the parameter can be change
 *  after its initialization.
 * @property {Object} [metas=null] - Any user defined data associated to the
 *  parameter that couls be usefull in the application.
 */exports.default={/**
   * @typedef {Object} booleanDefinition
   * @property {String} [type='boolean'] - Define a boolean parameter.
   * @property {Boolean} default - Default value of the parameter.
   * @property {Boolean} [constant=false] - Define if the parameter is constant.
   * @property {Boolean} [nullable=false] - Define if the parameter is nullable.
   * @property {Object} [metas={}] - Optionnal metadata of the parameter.
   */boolean:{definitionTemplate:['default'],typeCheckFunction:function typeCheckFunction(value,definition,name){if(typeof value!=='boolean')throw new Error('Invalid value for boolean param "'+name+'": '+value);return value;}},/**
   * @typedef {Object} integerDefinition
   * @property {String} [type='integer'] - Define a boolean parameter.
   * @property {Mixed} default - Default value of the parameter.
   * @property {Number} [min=-Infinity] - Minimum value of the parameter.
   * @property {Number} [max=+Infinity] - Maximum value of the parameter.
   * @property {Boolean} [constant=false] - Define if the parameter is constant.
   * @property {Boolean} [nullable=false] - Define if the parameter is nullable.
   * @property {Object} [metas={}] - Optionnal metadata of the parameter.
   */integer:{definitionTemplate:['default'],typeCheckFunction:function typeCheckFunction(value,definition,name){if(!(typeof value==='number'&&Math.floor(value)===value))throw new Error('Invalid value for integer param "'+name+'": '+value);return clip(value,definition.min,definition.max);}},/**
   * @typedef {Object} floatDefinition
   * @property {String} [type='float'] - Define a boolean parameter.
   * @property {Mixed} default - Default value of the parameter.
   * @property {Number} [min=-Infinity] - Minimum value of the parameter.
   * @property {Number} [max=+Infinity] - Maximum value of the parameter.
   * @property {Boolean} [constant=false] - Define if the parameter is constant.
   * @property {Boolean} [nullable=false] - Define if the parameter is nullable.
   * @property {Object} [metas={}] - Optionnal metadata of the parameter.
   */float:{definitionTemplate:['default'],typeCheckFunction:function typeCheckFunction(value,definition,name){if(typeof value!=='number'||value!==value)// reject NaN
throw new Error('Invalid value for float param "'+name+'": '+value);return clip(value,definition.min,definition.max);}},/**
   * @typedef {Object} stringDefinition
   * @property {String} [type='string'] - Define a boolean parameter.
   * @property {Mixed} default - Default value of the parameter.
   * @property {Boolean} [constant=false] - Define if the parameter is constant.
   * @property {Boolean} [nullable=false] - Define if the parameter is nullable.
   * @property {Object} [metas={}] - Optionnal metadata of the parameter.
   */string:{definitionTemplate:['default'],typeCheckFunction:function typeCheckFunction(value,definition,name){if(typeof value!=='string')throw new Error('Invalid value for string param "'+name+'": '+value);return value;}},/**
   * @typedef {Object} enumDefinition
   * @property {String} [type='enum'] - Define a boolean parameter.
   * @property {Mixed} default - Default value of the parameter.
   * @property {Array} list - Possible values of the parameter.
   * @property {Boolean} [constant=false] - Define if the parameter is constant.
   * @property {Boolean} [nullable=false] - Define if the parameter is nullable.
   * @property {Object} [metas={}] - Optionnal metadata of the parameter.
   */enum:{definitionTemplate:['default','list'],typeCheckFunction:function typeCheckFunction(value,definition,name){if(definition.list.indexOf(value)===-1)throw new Error('Invalid value for enum param "'+name+'": '+value);return value;}},/**
   * @typedef {Object} anyDefinition
   * @property {String} [type='enum'] - Define a parameter of any type.
   * @property {Mixed} default - Default value of the parameter.
   * @property {Boolean} [constant=false] - Define if the parameter is constant.
   * @property {Boolean} [nullable=false] - Define if the parameter is nullable.
   * @property {Object} [metas={}] - Optionnal metadata of the parameter.
   */any:{definitionTemplate:['default'],typeCheckFunction:function typeCheckFunction(value,definition,name){// no check as it can have any type...
return value;}}};},{}],2:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _paramTemplates=require('./paramTemplates');var _paramTemplates2=_interopRequireDefault(_paramTemplates);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}/**
 * Generic class for typed parameters.
 *
 * @param {String} name - Name of the parameter.
 * @param {Array} definitionTemplate - List of mandatory keys in the param
 *  definition.
 * @param {Function} typeCheckFunction - Function to be used in order to check
 *  the value against the param definition.
 * @param {Object} definition - Definition of the parameter.
 * @param {Mixed} value - Value of the parameter.
 * @private
 */var Param=function(){function Param(name,definitionTemplate,typeCheckFunction,definition,value){_classCallCheck(this,Param);definitionTemplate.forEach(function(key){if(definition.hasOwnProperty(key)===false)throw new Error('Invalid definition for param "'+name+'", '+key+' is not defined');});this.name=name;this.type=definition.type;this.definition=definition;if(this.definition.nullable===true&&value===null)this.value=null;else this.value=typeCheckFunction(value,definition,name);this._typeCheckFunction=typeCheckFunction;}/**
   * Returns the current value.
   * @return {Mixed}
   */_createClass(Param,[{key:'getValue',value:function getValue(){return this.value;}/**
     * Update the current value.
     * @param {Mixed} value - New value of the parameter.
     * @return {Boolean} - `true` if the param has been updated, false otherwise
     *  (e.g. if the parameter already had this value).
     */},{key:'setValue',value:function setValue(value){if(this.definition.constant===true)throw new Error('Invalid assignement to constant param "'+this.name+'"');if(!(this.definition.nullable===true&&value===null))value=this._typeCheckFunction(value,this.definition,this.name);if(this.value!==value){this.value=value;return true;}return false;}}]);return Param;}();/**
 * Bag of parameters. Main interface of the library
 */var ParameterBag=function(){function ParameterBag(params,definitions){_classCallCheck(this,ParameterBag);/**
     * List of parameters.
     *
     * @type {Object<String, Param>}
     * @name _params
     * @memberof ParameterBag
     * @instance
     * @private
     */this._params=params;/**
     * List of definitions with init values.
     *
     * @type {Object<String, paramDefinition>}
     * @name _definitions
     * @memberof ParameterBag
     * @instance
     * @private
     */this._definitions=definitions;/**
     * List of global listeners.
     *
     * @type {Set}
     * @name _globalListeners
     * @memberof ParameterBag
     * @instance
     * @private
     */this._globalListeners=new Set();/**
     * List of params listeners.
     *
     * @type {Object<String, Set>}
     * @name _paramsListeners
     * @memberof ParameterBag
     * @instance
     * @private
     */this._paramsListeners={};// initialize empty Set for each param
for(var name in params){this._paramsListeners[name]=new Set();}}/**
   * Return the given definitions along with the initialization values.
   *
   * @return {Object}
   */_createClass(ParameterBag,[{key:'getDefinitions',value:function getDefinitions(){var name=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(name!==null)return this._definitions[name];else return this._definitions;}/**
     * Return the value of the given parameter.
     *
     * @param {String} name - Name of the parameter.
     * @return {Mixed} - Value of the parameter.
     */},{key:'get',value:function get(name){if(!this._params[name])throw new Error('Cannot read property value of undefined parameter "'+name+'"');return this._params[name].value;}/**
     * Set the value of a parameter. If the value of the parameter is updated
     * (aka if previous value is different from new value) all registered
     * callbacks are registered.
     *
     * @param {String} name - Name of the parameter.
     * @param {Mixed} value - Value of the parameter.
     * @return {Mixed} - New value of the parameter.
     */},{key:'set',value:function set(name,value){var param=this._params[name];var updated=param.setValue(value);value=param.getValue();if(updated){var metas=param.definition.metas;// trigger global listeners
var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=this._globalListeners[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var listener=_step.value;listener(name,value,metas);}// trigger param listeners
}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=this._paramsListeners[name][Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var _listener=_step2.value;_listener(value,metas);}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}}return value;}/**
     * Define if the `name` parameter exists or not.
     *
     * @param {String} name - Name of the parameter.
     * @return {Boolean}
     */},{key:'has',value:function has(name){return this._params[name]?true:false;}/**
     * Reset a parameter to its init value. Reset all parameters if no argument.
     *
     * @param {String} [name=null] - Name of the parameter to reset.
     */},{key:'reset',value:function reset(){var _this=this;var name=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(name!==null)this.set(name,param.definition.initValue);else Object.keys(this._params).forEach(function(name){return _this.reset(name);});}/**
     * @callback ParameterBag~listenerCallback
     * @param {String} name - Parameter name.
     * @param {Mixed} value - Updated value of the parameter.
     * @param {Object} [meta=] - Given meta data of the parameter.
     *//**
     * Add controller to all param updates.
     *
     * @param {ParameterBag~listenerCallack} callback - Listener to register.
     */},{key:'addListener',value:function addListener(callback){this._globalListeners.add(callback);}/**
     * Remove controller from all param changes.
     *
     * @param {ParameterBag~listenerCallack} callback - Listener to remove. If
     *  `null` remove all listeners.
     */},{key:'removeListener',value:function removeListener(){var callback=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(callback===null)this._globalListeners.clear();else this._globalListeners.delete(callback);}/**
     * @callback ParameterBag~paramListenerCallack
     * @param {Mixed} value - Updated value of the parameter.
     * @param {Object} [meta=] - Given meta data of the parameter.
     *//**
     * Add controller to a given param updates.
     *
     * @param {String} name - Parameter name.
     * @param {ParameterBag~paramListenerCallack} callback - Function to apply
     *  when the value of the parameter changes.
     * @param {Boolean} [trigger=false] - Execute the callback immediately with
     *  current parameter value.
     */},{key:'addParamListener',value:function addParamListener(name,callback){var trigger=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;this._paramsListeners[name].add(callback);if(trigger){var _param=this._params[name];var value=_param.getValue();var metas=_param.definition.metas;callback(value,metas);}}/**
     * Remove controller from a given param updates.
     *
     * @param {String} name - Parameter name.
     * @param {ParameterBag~paramListenerCallack} callback - Listener to remove.
     *  If `null` remove all listeners.
     */},{key:'removeParamListener',value:function removeParamListener(name){var callback=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(callback===null)this._paramsListeners[name].clear();else this._paramsListeners[name].delete(callback);}}]);return ParameterBag;}();/**
 * Factory for the `ParameterBag` class.
 *
 * @param {Object<String, paramDefinition>} definitions - Object describing the
 *  parameters.
 * @param {Object<String, Mixed>} values - Initialization values for the
 *  parameters.
 * @return {ParameterBag}
 */function parameters(definitions){var values=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var params={};for(var name in values){if(definitions.hasOwnProperty(name)===false)throw new Error('Unknown param "'+name+'"');}for(var _name in definitions){if(params.hasOwnProperty(_name)===true)throw new Error('Parameter "'+_name+'" already defined');var definition=definitions[_name];if(!_paramTemplates2.default[definition.type])throw new Error('Unknown param type "'+definition.type+'"');var _paramTemplates$defin=_paramTemplates2.default[definition.type],definitionTemplate=_paramTemplates$defin.definitionTemplate,typeCheckFunction=_paramTemplates$defin.typeCheckFunction;var value=void 0;if(values.hasOwnProperty(_name)===true)value=values[_name];else value=definition.default;// store init value in definition
definition.initValue=value;if(!typeCheckFunction||!definitionTemplate)throw new Error('Invalid param type definition "'+definition.type+'"');params[_name]=new Param(_name,definitionTemplate,typeCheckFunction,definition,value);}return new ParameterBag(params,definitions);}/**
 * Register a new type for the `parameters` factory.
 * @param {String} typeName - Value that will be available as the `type` of a
 *  param definition.
 * @param {parameterDefinition} parameterDefinition - Object describing the
 *  parameter.
 */parameters.defineType=function(typeName,parameterDefinition){_paramTemplates2.default[typeName]=parameterDefinition;};exports.default=parameters;},{"./paramTemplates":1}],3:[function(require,module,exports){module.exports={"default":require("core-js/library/fn/json/stringify"),__esModule:true};},{"core-js/library/fn/json/stringify":22}],4:[function(require,module,exports){module.exports={"default":require("core-js/library/fn/math/log10"),__esModule:true};},{"core-js/library/fn/math/log10":23}],5:[function(require,module,exports){module.exports={"default":require("core-js/library/fn/number/is-finite"),__esModule:true};},{"core-js/library/fn/number/is-finite":24}],6:[function(require,module,exports){module.exports={"default":require("core-js/library/fn/object/assign"),__esModule:true};},{"core-js/library/fn/object/assign":25}],7:[function(require,module,exports){module.exports={"default":require("core-js/library/fn/object/create"),__esModule:true};},{"core-js/library/fn/object/create":26}],8:[function(require,module,exports){module.exports={"default":require("core-js/library/fn/object/define-property"),__esModule:true};},{"core-js/library/fn/object/define-property":27}],9:[function(require,module,exports){module.exports={"default":require("core-js/library/fn/object/get-own-property-descriptor"),__esModule:true};},{"core-js/library/fn/object/get-own-property-descriptor":28}],10:[function(require,module,exports){module.exports={"default":require("core-js/library/fn/object/get-prototype-of"),__esModule:true};},{"core-js/library/fn/object/get-prototype-of":29}],11:[function(require,module,exports){module.exports={"default":require("core-js/library/fn/object/set-prototype-of"),__esModule:true};},{"core-js/library/fn/object/set-prototype-of":30}],12:[function(require,module,exports){module.exports={"default":require("core-js/library/fn/promise"),__esModule:true};},{"core-js/library/fn/promise":31}],13:[function(require,module,exports){module.exports={"default":require("core-js/library/fn/symbol"),__esModule:true};},{"core-js/library/fn/symbol":32}],14:[function(require,module,exports){module.exports={"default":require("core-js/library/fn/symbol/iterator"),__esModule:true};},{"core-js/library/fn/symbol/iterator":33}],15:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=function(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}};},{}],16:[function(require,module,exports){"use strict";exports.__esModule=true;var _defineProperty=require("../core-js/object/define-property");var _defineProperty2=_interopRequireDefault(_defineProperty);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;(0,_defineProperty2.default)(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();},{"../core-js/object/define-property":8}],17:[function(require,module,exports){"use strict";exports.__esModule=true;var _defineProperty=require("../core-js/object/define-property");var _defineProperty2=_interopRequireDefault(_defineProperty);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default=function(obj,key,value){if(key in obj){(0,_defineProperty2.default)(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;};},{"../core-js/object/define-property":8}],18:[function(require,module,exports){"use strict";exports.__esModule=true;var _getPrototypeOf=require("../core-js/object/get-prototype-of");var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _getOwnPropertyDescriptor=require("../core-js/object/get-own-property-descriptor");var _getOwnPropertyDescriptor2=_interopRequireDefault(_getOwnPropertyDescriptor);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=(0,_getOwnPropertyDescriptor2.default)(object,property);if(desc===undefined){var parent=(0,_getPrototypeOf2.default)(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};},{"../core-js/object/get-own-property-descriptor":9,"../core-js/object/get-prototype-of":10}],19:[function(require,module,exports){"use strict";exports.__esModule=true;var _setPrototypeOf=require("../core-js/object/set-prototype-of");var _setPrototypeOf2=_interopRequireDefault(_setPrototypeOf);var _create=require("../core-js/object/create");var _create2=_interopRequireDefault(_create);var _typeof2=require("../helpers/typeof");var _typeof3=_interopRequireDefault(_typeof2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default=function(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==="undefined"?"undefined":(0,_typeof3.default)(superClass)));}subClass.prototype=(0,_create2.default)(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)_setPrototypeOf2.default?(0,_setPrototypeOf2.default)(subClass,superClass):subClass.__proto__=superClass;};},{"../core-js/object/create":7,"../core-js/object/set-prototype-of":11,"../helpers/typeof":21}],20:[function(require,module,exports){"use strict";exports.__esModule=true;var _typeof2=require("../helpers/typeof");var _typeof3=_interopRequireDefault(_typeof2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default=function(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==="undefined"?"undefined":(0,_typeof3.default)(call))==="object"||typeof call==="function")?call:self;};},{"../helpers/typeof":21}],21:[function(require,module,exports){"use strict";exports.__esModule=true;var _iterator=require("../core-js/symbol/iterator");var _iterator2=_interopRequireDefault(_iterator);var _symbol=require("../core-js/symbol");var _symbol2=_interopRequireDefault(_symbol);var _typeof=typeof _symbol2.default==="function"&&_typeof4(_iterator2.default)==="symbol"?function(obj){return typeof obj==="undefined"?"undefined":_typeof4(obj);}:function(obj){return obj&&typeof _symbol2.default==="function"&&obj.constructor===_symbol2.default&&obj!==_symbol2.default.prototype?"symbol":typeof obj==="undefined"?"undefined":_typeof4(obj);};function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default=typeof _symbol2.default==="function"&&_typeof(_iterator2.default)==="symbol"?function(obj){return typeof obj==="undefined"?"undefined":_typeof(obj);}:function(obj){return obj&&typeof _symbol2.default==="function"&&obj.constructor===_symbol2.default&&obj!==_symbol2.default.prototype?"symbol":typeof obj==="undefined"?"undefined":_typeof(obj);};},{"../core-js/symbol":13,"../core-js/symbol/iterator":14}],22:[function(require,module,exports){var core=require('../../modules/_core');var $JSON=core.JSON||(core.JSON={stringify:JSON.stringify});module.exports=function stringify(it){// eslint-disable-line no-unused-vars
return $JSON.stringify.apply($JSON,arguments);};},{"../../modules/_core":41}],23:[function(require,module,exports){require('../../modules/es6.math.log10');module.exports=require('../../modules/_core').Math.log10;},{"../../modules/_core":41,"../../modules/es6.math.log10":109}],24:[function(require,module,exports){require('../../modules/es6.number.is-finite');module.exports=require('../../modules/_core').Number.isFinite;},{"../../modules/_core":41,"../../modules/es6.number.is-finite":110}],25:[function(require,module,exports){require('../../modules/es6.object.assign');module.exports=require('../../modules/_core').Object.assign;},{"../../modules/_core":41,"../../modules/es6.object.assign":111}],26:[function(require,module,exports){require('../../modules/es6.object.create');var $Object=require('../../modules/_core').Object;module.exports=function create(P,D){return $Object.create(P,D);};},{"../../modules/_core":41,"../../modules/es6.object.create":112}],27:[function(require,module,exports){require('../../modules/es6.object.define-property');var $Object=require('../../modules/_core').Object;module.exports=function defineProperty(it,key,desc){return $Object.defineProperty(it,key,desc);};},{"../../modules/_core":41,"../../modules/es6.object.define-property":113}],28:[function(require,module,exports){require('../../modules/es6.object.get-own-property-descriptor');var $Object=require('../../modules/_core').Object;module.exports=function getOwnPropertyDescriptor(it,key){return $Object.getOwnPropertyDescriptor(it,key);};},{"../../modules/_core":41,"../../modules/es6.object.get-own-property-descriptor":114}],29:[function(require,module,exports){require('../../modules/es6.object.get-prototype-of');module.exports=require('../../modules/_core').Object.getPrototypeOf;},{"../../modules/_core":41,"../../modules/es6.object.get-prototype-of":115}],30:[function(require,module,exports){require('../../modules/es6.object.set-prototype-of');module.exports=require('../../modules/_core').Object.setPrototypeOf;},{"../../modules/_core":41,"../../modules/es6.object.set-prototype-of":116}],31:[function(require,module,exports){require('../modules/es6.object.to-string');require('../modules/es6.string.iterator');require('../modules/web.dom.iterable');require('../modules/es6.promise');require('../modules/es7.promise.finally');require('../modules/es7.promise.try');module.exports=require('../modules/_core').Promise;},{"../modules/_core":41,"../modules/es6.object.to-string":117,"../modules/es6.promise":118,"../modules/es6.string.iterator":119,"../modules/es7.promise.finally":121,"../modules/es7.promise.try":122,"../modules/web.dom.iterable":125}],32:[function(require,module,exports){require('../../modules/es6.symbol');require('../../modules/es6.object.to-string');require('../../modules/es7.symbol.async-iterator');require('../../modules/es7.symbol.observable');module.exports=require('../../modules/_core').Symbol;},{"../../modules/_core":41,"../../modules/es6.object.to-string":117,"../../modules/es6.symbol":120,"../../modules/es7.symbol.async-iterator":123,"../../modules/es7.symbol.observable":124}],33:[function(require,module,exports){require('../../modules/es6.string.iterator');require('../../modules/web.dom.iterable');module.exports=require('../../modules/_wks-ext').f('iterator');},{"../../modules/_wks-ext":105,"../../modules/es6.string.iterator":119,"../../modules/web.dom.iterable":125}],34:[function(require,module,exports){module.exports=function(it){if(typeof it!='function')throw TypeError(it+' is not a function!');return it;};},{}],35:[function(require,module,exports){module.exports=function(){/* empty */};},{}],36:[function(require,module,exports){module.exports=function(it,Constructor,name,forbiddenField){if(!(it instanceof Constructor)||forbiddenField!==undefined&&forbiddenField in it){throw TypeError(name+': incorrect invocation!');}return it;};},{}],37:[function(require,module,exports){var isObject=require('./_is-object');module.exports=function(it){if(!isObject(it))throw TypeError(it+' is not an object!');return it;};},{"./_is-object":60}],38:[function(require,module,exports){// false -> Array#indexOf
// true  -> Array#includes
var toIObject=require('./_to-iobject');var toLength=require('./_to-length');var toAbsoluteIndex=require('./_to-absolute-index');module.exports=function(IS_INCLUDES){return function($this,el,fromIndex){var O=toIObject($this);var length=toLength(O.length);var index=toAbsoluteIndex(fromIndex,length);var value;// Array#includes uses SameValueZero equality algorithm
// eslint-disable-next-line no-self-compare
if(IS_INCLUDES&&el!=el)while(length>index){value=O[index++];// eslint-disable-next-line no-self-compare
if(value!=value)return true;// Array#indexOf ignores holes, Array#includes - not
}else for(;length>index;index++){if(IS_INCLUDES||index in O){if(O[index]===el)return IS_INCLUDES||index||0;}}return!IS_INCLUDES&&-1;};};},{"./_to-absolute-index":97,"./_to-iobject":99,"./_to-length":100}],39:[function(require,module,exports){// getting tag from 19.1.3.6 Object.prototype.toString()
var cof=require('./_cof');var TAG=require('./_wks')('toStringTag');// ES3 wrong here
var ARG=cof(function(){return arguments;}())=='Arguments';// fallback for IE11 Script Access Denied error
var tryGet=function tryGet(it,key){try{return it[key];}catch(e){/* empty */}};module.exports=function(it){var O,T,B;return it===undefined?'Undefined':it===null?'Null'// @@toStringTag case
:typeof(T=tryGet(O=Object(it),TAG))=='string'?T// builtinTag case
:ARG?cof(O)// ES3 arguments fallback
:(B=cof(O))=='Object'&&typeof O.callee=='function'?'Arguments':B;};},{"./_cof":40,"./_wks":106}],40:[function(require,module,exports){var toString={}.toString;module.exports=function(it){return toString.call(it).slice(8,-1);};},{}],41:[function(require,module,exports){var core=module.exports={version:'2.5.5'};if(typeof __e=='number')__e=core;// eslint-disable-line no-undef
},{}],42:[function(require,module,exports){// optional / simple context binding
var aFunction=require('./_a-function');module.exports=function(fn,that,length){aFunction(fn);if(that===undefined)return fn;switch(length){case 1:return function(a){return fn.call(that,a);};case 2:return function(a,b){return fn.call(that,a,b);};case 3:return function(a,b,c){return fn.call(that,a,b,c);};}return function()/* ...args */{return fn.apply(that,arguments);};};},{"./_a-function":34}],43:[function(require,module,exports){// 7.2.1 RequireObjectCoercible(argument)
module.exports=function(it){if(it==undefined)throw TypeError("Can't call method on  "+it);return it;};},{}],44:[function(require,module,exports){// Thank's IE8 for his funny defineProperty
module.exports=!require('./_fails')(function(){return Object.defineProperty({},'a',{get:function get(){return 7;}}).a!=7;});},{"./_fails":49}],45:[function(require,module,exports){var isObject=require('./_is-object');var document=require('./_global').document;// typeof document.createElement is 'object' in old IE
var is=isObject(document)&&isObject(document.createElement);module.exports=function(it){return is?document.createElement(it):{};};},{"./_global":51,"./_is-object":60}],46:[function(require,module,exports){// IE 8- don't enum bug keys
module.exports='constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');},{}],47:[function(require,module,exports){// all enumerable object keys, includes symbols
var getKeys=require('./_object-keys');var gOPS=require('./_object-gops');var pIE=require('./_object-pie');module.exports=function(it){var result=getKeys(it);var getSymbols=gOPS.f;if(getSymbols){var symbols=getSymbols(it);var isEnum=pIE.f;var i=0;var key;while(symbols.length>i){if(isEnum.call(it,key=symbols[i++]))result.push(key);}}return result;};},{"./_object-gops":78,"./_object-keys":81,"./_object-pie":82}],48:[function(require,module,exports){var global=require('./_global');var core=require('./_core');var ctx=require('./_ctx');var hide=require('./_hide');var has=require('./_has');var PROTOTYPE='prototype';var $export=function $export(type,name,source){var IS_FORCED=type&$export.F;var IS_GLOBAL=type&$export.G;var IS_STATIC=type&$export.S;var IS_PROTO=type&$export.P;var IS_BIND=type&$export.B;var IS_WRAP=type&$export.W;var exports=IS_GLOBAL?core:core[name]||(core[name]={});var expProto=exports[PROTOTYPE];var target=IS_GLOBAL?global:IS_STATIC?global[name]:(global[name]||{})[PROTOTYPE];var key,own,out;if(IS_GLOBAL)source=name;for(key in source){// contains in native
own=!IS_FORCED&&target&&target[key]!==undefined;if(own&&has(exports,key))continue;// export native or passed
out=own?target[key]:source[key];// prevent global pollution for namespaces
exports[key]=IS_GLOBAL&&typeof target[key]!='function'?source[key]// bind timers to global for call from export context
:IS_BIND&&own?ctx(out,global)// wrap global constructors for prevent change them in library
:IS_WRAP&&target[key]==out?function(C){var F=function F(a,b,c){if(this instanceof C){switch(arguments.length){case 0:return new C();case 1:return new C(a);case 2:return new C(a,b);}return new C(a,b,c);}return C.apply(this,arguments);};F[PROTOTYPE]=C[PROTOTYPE];return F;// make static versions for prototype methods
}(out):IS_PROTO&&typeof out=='function'?ctx(Function.call,out):out;// export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
if(IS_PROTO){(exports.virtual||(exports.virtual={}))[key]=out;// export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
if(type&$export.R&&expProto&&!expProto[key])hide(expProto,key,out);}}};// type bitmap
$export.F=1;// forced
$export.G=2;// global
$export.S=4;// static
$export.P=8;// proto
$export.B=16;// bind
$export.W=32;// wrap
$export.U=64;// safe
$export.R=128;// real proto method for `library`
module.exports=$export;},{"./_core":41,"./_ctx":42,"./_global":51,"./_has":52,"./_hide":53}],49:[function(require,module,exports){module.exports=function(exec){try{return!!exec();}catch(e){return true;}};},{}],50:[function(require,module,exports){var ctx=require('./_ctx');var call=require('./_iter-call');var isArrayIter=require('./_is-array-iter');var anObject=require('./_an-object');var toLength=require('./_to-length');var getIterFn=require('./core.get-iterator-method');var BREAK={};var RETURN={};var exports=module.exports=function(iterable,entries,fn,that,ITERATOR){var iterFn=ITERATOR?function(){return iterable;}:getIterFn(iterable);var f=ctx(fn,that,entries?2:1);var index=0;var length,step,iterator,result;if(typeof iterFn!='function')throw TypeError(iterable+' is not iterable!');// fast case for arrays with default iterator
if(isArrayIter(iterFn))for(length=toLength(iterable.length);length>index;index++){result=entries?f(anObject(step=iterable[index])[0],step[1]):f(iterable[index]);if(result===BREAK||result===RETURN)return result;}else for(iterator=iterFn.call(iterable);!(step=iterator.next()).done;){result=call(iterator,f,step.value,entries);if(result===BREAK||result===RETURN)return result;}};exports.BREAK=BREAK;exports.RETURN=RETURN;},{"./_an-object":37,"./_ctx":42,"./_is-array-iter":58,"./_iter-call":61,"./_to-length":100,"./core.get-iterator-method":107}],51:[function(require,module,exports){// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global=module.exports=typeof window!='undefined'&&window.Math==Math?window:typeof self!='undefined'&&self.Math==Math?self// eslint-disable-next-line no-new-func
:Function('return this')();if(typeof __g=='number')__g=global;// eslint-disable-line no-undef
},{}],52:[function(require,module,exports){var hasOwnProperty={}.hasOwnProperty;module.exports=function(it,key){return hasOwnProperty.call(it,key);};},{}],53:[function(require,module,exports){var dP=require('./_object-dp');var createDesc=require('./_property-desc');module.exports=require('./_descriptors')?function(object,key,value){return dP.f(object,key,createDesc(1,value));}:function(object,key,value){object[key]=value;return object;};},{"./_descriptors":44,"./_object-dp":73,"./_property-desc":86}],54:[function(require,module,exports){var document=require('./_global').document;module.exports=document&&document.documentElement;},{"./_global":51}],55:[function(require,module,exports){module.exports=!require('./_descriptors')&&!require('./_fails')(function(){return Object.defineProperty(require('./_dom-create')('div'),'a',{get:function get(){return 7;}}).a!=7;});},{"./_descriptors":44,"./_dom-create":45,"./_fails":49}],56:[function(require,module,exports){// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports=function(fn,args,that){var un=that===undefined;switch(args.length){case 0:return un?fn():fn.call(that);case 1:return un?fn(args[0]):fn.call(that,args[0]);case 2:return un?fn(args[0],args[1]):fn.call(that,args[0],args[1]);case 3:return un?fn(args[0],args[1],args[2]):fn.call(that,args[0],args[1],args[2]);case 4:return un?fn(args[0],args[1],args[2],args[3]):fn.call(that,args[0],args[1],args[2],args[3]);}return fn.apply(that,args);};},{}],57:[function(require,module,exports){// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof=require('./_cof');// eslint-disable-next-line no-prototype-builtins
module.exports=Object('z').propertyIsEnumerable(0)?Object:function(it){return cof(it)=='String'?it.split(''):Object(it);};},{"./_cof":40}],58:[function(require,module,exports){// check on default Array iterator
var Iterators=require('./_iterators');var ITERATOR=require('./_wks')('iterator');var ArrayProto=Array.prototype;module.exports=function(it){return it!==undefined&&(Iterators.Array===it||ArrayProto[ITERATOR]===it);};},{"./_iterators":66,"./_wks":106}],59:[function(require,module,exports){// 7.2.2 IsArray(argument)
var cof=require('./_cof');module.exports=Array.isArray||function isArray(arg){return cof(arg)=='Array';};},{"./_cof":40}],60:[function(require,module,exports){module.exports=function(it){return(typeof it==="undefined"?"undefined":_typeof4(it))==='object'?it!==null:typeof it==='function';};},{}],61:[function(require,module,exports){// call something on iterator step with safe closing on error
var anObject=require('./_an-object');module.exports=function(iterator,fn,value,entries){try{return entries?fn(anObject(value)[0],value[1]):fn(value);// 7.4.6 IteratorClose(iterator, completion)
}catch(e){var ret=iterator['return'];if(ret!==undefined)anObject(ret.call(iterator));throw e;}};},{"./_an-object":37}],62:[function(require,module,exports){'use strict';var create=require('./_object-create');var descriptor=require('./_property-desc');var setToStringTag=require('./_set-to-string-tag');var IteratorPrototype={};// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype,require('./_wks')('iterator'),function(){return this;});module.exports=function(Constructor,NAME,next){Constructor.prototype=create(IteratorPrototype,{next:descriptor(1,next)});setToStringTag(Constructor,NAME+' Iterator');};},{"./_hide":53,"./_object-create":72,"./_property-desc":86,"./_set-to-string-tag":91,"./_wks":106}],63:[function(require,module,exports){'use strict';var LIBRARY=require('./_library');var $export=require('./_export');var redefine=require('./_redefine');var hide=require('./_hide');var Iterators=require('./_iterators');var $iterCreate=require('./_iter-create');var setToStringTag=require('./_set-to-string-tag');var getPrototypeOf=require('./_object-gpo');var ITERATOR=require('./_wks')('iterator');var BUGGY=!([].keys&&'next'in[].keys());// Safari has buggy iterators w/o `next`
var FF_ITERATOR='@@iterator';var KEYS='keys';var VALUES='values';var returnThis=function returnThis(){return this;};module.exports=function(Base,NAME,Constructor,next,DEFAULT,IS_SET,FORCED){$iterCreate(Constructor,NAME,next);var getMethod=function getMethod(kind){if(!BUGGY&&kind in proto)return proto[kind];switch(kind){case KEYS:return function keys(){return new Constructor(this,kind);};case VALUES:return function values(){return new Constructor(this,kind);};}return function entries(){return new Constructor(this,kind);};};var TAG=NAME+' Iterator';var DEF_VALUES=DEFAULT==VALUES;var VALUES_BUG=false;var proto=Base.prototype;var $native=proto[ITERATOR]||proto[FF_ITERATOR]||DEFAULT&&proto[DEFAULT];var $default=$native||getMethod(DEFAULT);var $entries=DEFAULT?!DEF_VALUES?$default:getMethod('entries'):undefined;var $anyNative=NAME=='Array'?proto.entries||$native:$native;var methods,key,IteratorPrototype;// Fix native
if($anyNative){IteratorPrototype=getPrototypeOf($anyNative.call(new Base()));if(IteratorPrototype!==Object.prototype&&IteratorPrototype.next){// Set @@toStringTag to native iterators
setToStringTag(IteratorPrototype,TAG,true);// fix for some old engines
if(!LIBRARY&&typeof IteratorPrototype[ITERATOR]!='function')hide(IteratorPrototype,ITERATOR,returnThis);}}// fix Array#{values, @@iterator}.name in V8 / FF
if(DEF_VALUES&&$native&&$native.name!==VALUES){VALUES_BUG=true;$default=function values(){return $native.call(this);};}// Define iterator
if((!LIBRARY||FORCED)&&(BUGGY||VALUES_BUG||!proto[ITERATOR])){hide(proto,ITERATOR,$default);}// Plug for library
Iterators[NAME]=$default;Iterators[TAG]=returnThis;if(DEFAULT){methods={values:DEF_VALUES?$default:getMethod(VALUES),keys:IS_SET?$default:getMethod(KEYS),entries:$entries};if(FORCED)for(key in methods){if(!(key in proto))redefine(proto,key,methods[key]);}else $export($export.P+$export.F*(BUGGY||VALUES_BUG),NAME,methods);}return methods;};},{"./_export":48,"./_hide":53,"./_iter-create":62,"./_iterators":66,"./_library":67,"./_object-gpo":79,"./_redefine":88,"./_set-to-string-tag":91,"./_wks":106}],64:[function(require,module,exports){var ITERATOR=require('./_wks')('iterator');var SAFE_CLOSING=false;try{var riter=[7][ITERATOR]();riter['return']=function(){SAFE_CLOSING=true;};// eslint-disable-next-line no-throw-literal
Array.from(riter,function(){throw 2;});}catch(e){/* empty */}module.exports=function(exec,skipClosing){if(!skipClosing&&!SAFE_CLOSING)return false;var safe=false;try{var arr=[7];var iter=arr[ITERATOR]();iter.next=function(){return{done:safe=true};};arr[ITERATOR]=function(){return iter;};exec(arr);}catch(e){/* empty */}return safe;};},{"./_wks":106}],65:[function(require,module,exports){module.exports=function(done,value){return{value:value,done:!!done};};},{}],66:[function(require,module,exports){module.exports={};},{}],67:[function(require,module,exports){module.exports=true;},{}],68:[function(require,module,exports){var META=require('./_uid')('meta');var isObject=require('./_is-object');var has=require('./_has');var setDesc=require('./_object-dp').f;var id=0;var isExtensible=Object.isExtensible||function(){return true;};var FREEZE=!require('./_fails')(function(){return isExtensible(Object.preventExtensions({}));});var setMeta=function setMeta(it){setDesc(it,META,{value:{i:'O'+ ++id,// object ID
w:{}// weak collections IDs
}});};var fastKey=function fastKey(it,create){// return primitive with prefix
if(!isObject(it))return(typeof it==="undefined"?"undefined":_typeof4(it))=='symbol'?it:(typeof it=='string'?'S':'P')+it;if(!has(it,META)){// can't set metadata to uncaught frozen object
if(!isExtensible(it))return'F';// not necessary to add metadata
if(!create)return'E';// add missing metadata
setMeta(it);// return object ID
}return it[META].i;};var getWeak=function getWeak(it,create){if(!has(it,META)){// can't set metadata to uncaught frozen object
if(!isExtensible(it))return true;// not necessary to add metadata
if(!create)return false;// add missing metadata
setMeta(it);// return hash weak collections IDs
}return it[META].w;};// add metadata on freeze-family methods calling
var onFreeze=function onFreeze(it){if(FREEZE&&meta.NEED&&isExtensible(it)&&!has(it,META))setMeta(it);return it;};var meta=module.exports={KEY:META,NEED:false,fastKey:fastKey,getWeak:getWeak,onFreeze:onFreeze};},{"./_fails":49,"./_has":52,"./_is-object":60,"./_object-dp":73,"./_uid":103}],69:[function(require,module,exports){var global=require('./_global');var macrotask=require('./_task').set;var Observer=global.MutationObserver||global.WebKitMutationObserver;var process=global.process;var Promise=global.Promise;var isNode=require('./_cof')(process)=='process';module.exports=function(){var head,last,notify;var flush=function flush(){var parent,fn;if(isNode&&(parent=process.domain))parent.exit();while(head){fn=head.fn;head=head.next;try{fn();}catch(e){if(head)notify();else last=undefined;throw e;}}last=undefined;if(parent)parent.enter();};// Node.js
if(isNode){notify=function notify(){process.nextTick(flush);};// browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
}else if(Observer&&!(global.navigator&&global.navigator.standalone)){var toggle=true;var node=document.createTextNode('');new Observer(flush).observe(node,{characterData:true});// eslint-disable-line no-new
notify=function notify(){node.data=toggle=!toggle;};// environments with maybe non-completely correct, but existent Promise
}else if(Promise&&Promise.resolve){var promise=Promise.resolve();notify=function notify(){promise.then(flush);};// for other environments - macrotask based on:
// - setImmediate
// - MessageChannel
// - window.postMessag
// - onreadystatechange
// - setTimeout
}else{notify=function notify(){// strange IE + webpack dev server bug - use .call(global)
macrotask.call(global,flush);};}return function(fn){var task={fn:fn,next:undefined};if(last)last.next=task;if(!head){head=task;notify();}last=task;};};},{"./_cof":40,"./_global":51,"./_task":96}],70:[function(require,module,exports){'use strict';// 25.4.1.5 NewPromiseCapability(C)
var aFunction=require('./_a-function');function PromiseCapability(C){var resolve,reject;this.promise=new C(function($$resolve,$$reject){if(resolve!==undefined||reject!==undefined)throw TypeError('Bad Promise constructor');resolve=$$resolve;reject=$$reject;});this.resolve=aFunction(resolve);this.reject=aFunction(reject);}module.exports.f=function(C){return new PromiseCapability(C);};},{"./_a-function":34}],71:[function(require,module,exports){'use strict';// 19.1.2.1 Object.assign(target, source, ...)
var getKeys=require('./_object-keys');var gOPS=require('./_object-gops');var pIE=require('./_object-pie');var toObject=require('./_to-object');var IObject=require('./_iobject');var $assign=Object.assign;// should work with symbols and should have deterministic property order (V8 bug)
module.exports=!$assign||require('./_fails')(function(){var A={};var B={};// eslint-disable-next-line no-undef
var S=Symbol();var K='abcdefghijklmnopqrst';A[S]=7;K.split('').forEach(function(k){B[k]=k;});return $assign({},A)[S]!=7||Object.keys($assign({},B)).join('')!=K;})?function assign(target,source){// eslint-disable-line no-unused-vars
var T=toObject(target);var aLen=arguments.length;var index=1;var getSymbols=gOPS.f;var isEnum=pIE.f;while(aLen>index){var S=IObject(arguments[index++]);var keys=getSymbols?getKeys(S).concat(getSymbols(S)):getKeys(S);var length=keys.length;var j=0;var key;while(length>j){if(isEnum.call(S,key=keys[j++]))T[key]=S[key];}}return T;}:$assign;},{"./_fails":49,"./_iobject":57,"./_object-gops":78,"./_object-keys":81,"./_object-pie":82,"./_to-object":101}],72:[function(require,module,exports){// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject=require('./_an-object');var dPs=require('./_object-dps');var enumBugKeys=require('./_enum-bug-keys');var IE_PROTO=require('./_shared-key')('IE_PROTO');var Empty=function Empty(){/* empty */};var PROTOTYPE='prototype';// Create object with fake `null` prototype: use iframe Object with cleared prototype
var _createDict=function createDict(){// Thrash, waste and sodomy: IE GC bug
var iframe=require('./_dom-create')('iframe');var i=enumBugKeys.length;var lt='<';var gt='>';var iframeDocument;iframe.style.display='none';require('./_html').appendChild(iframe);iframe.src='javascript:';// eslint-disable-line no-script-url
// createDict = iframe.contentWindow.Object;
// html.removeChild(iframe);
iframeDocument=iframe.contentWindow.document;iframeDocument.open();iframeDocument.write(lt+'script'+gt+'document.F=Object'+lt+'/script'+gt);iframeDocument.close();_createDict=iframeDocument.F;while(i--){delete _createDict[PROTOTYPE][enumBugKeys[i]];}return _createDict();};module.exports=Object.create||function create(O,Properties){var result;if(O!==null){Empty[PROTOTYPE]=anObject(O);result=new Empty();Empty[PROTOTYPE]=null;// add "__proto__" for Object.getPrototypeOf polyfill
result[IE_PROTO]=O;}else result=_createDict();return Properties===undefined?result:dPs(result,Properties);};},{"./_an-object":37,"./_dom-create":45,"./_enum-bug-keys":46,"./_html":54,"./_object-dps":74,"./_shared-key":92}],73:[function(require,module,exports){var anObject=require('./_an-object');var IE8_DOM_DEFINE=require('./_ie8-dom-define');var toPrimitive=require('./_to-primitive');var dP=Object.defineProperty;exports.f=require('./_descriptors')?Object.defineProperty:function defineProperty(O,P,Attributes){anObject(O);P=toPrimitive(P,true);anObject(Attributes);if(IE8_DOM_DEFINE)try{return dP(O,P,Attributes);}catch(e){/* empty */}if('get'in Attributes||'set'in Attributes)throw TypeError('Accessors not supported!');if('value'in Attributes)O[P]=Attributes.value;return O;};},{"./_an-object":37,"./_descriptors":44,"./_ie8-dom-define":55,"./_to-primitive":102}],74:[function(require,module,exports){var dP=require('./_object-dp');var anObject=require('./_an-object');var getKeys=require('./_object-keys');module.exports=require('./_descriptors')?Object.defineProperties:function defineProperties(O,Properties){anObject(O);var keys=getKeys(Properties);var length=keys.length;var i=0;var P;while(length>i){dP.f(O,P=keys[i++],Properties[P]);}return O;};},{"./_an-object":37,"./_descriptors":44,"./_object-dp":73,"./_object-keys":81}],75:[function(require,module,exports){var pIE=require('./_object-pie');var createDesc=require('./_property-desc');var toIObject=require('./_to-iobject');var toPrimitive=require('./_to-primitive');var has=require('./_has');var IE8_DOM_DEFINE=require('./_ie8-dom-define');var gOPD=Object.getOwnPropertyDescriptor;exports.f=require('./_descriptors')?gOPD:function getOwnPropertyDescriptor(O,P){O=toIObject(O);P=toPrimitive(P,true);if(IE8_DOM_DEFINE)try{return gOPD(O,P);}catch(e){/* empty */}if(has(O,P))return createDesc(!pIE.f.call(O,P),O[P]);};},{"./_descriptors":44,"./_has":52,"./_ie8-dom-define":55,"./_object-pie":82,"./_property-desc":86,"./_to-iobject":99,"./_to-primitive":102}],76:[function(require,module,exports){// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject=require('./_to-iobject');var gOPN=require('./_object-gopn').f;var toString={}.toString;var windowNames=(typeof window==="undefined"?"undefined":_typeof4(window))=='object'&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];var getWindowNames=function getWindowNames(it){try{return gOPN(it);}catch(e){return windowNames.slice();}};module.exports.f=function getOwnPropertyNames(it){return windowNames&&toString.call(it)=='[object Window]'?getWindowNames(it):gOPN(toIObject(it));};},{"./_object-gopn":77,"./_to-iobject":99}],77:[function(require,module,exports){// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys=require('./_object-keys-internal');var hiddenKeys=require('./_enum-bug-keys').concat('length','prototype');exports.f=Object.getOwnPropertyNames||function getOwnPropertyNames(O){return $keys(O,hiddenKeys);};},{"./_enum-bug-keys":46,"./_object-keys-internal":80}],78:[function(require,module,exports){exports.f=Object.getOwnPropertySymbols;},{}],79:[function(require,module,exports){// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has=require('./_has');var toObject=require('./_to-object');var IE_PROTO=require('./_shared-key')('IE_PROTO');var ObjectProto=Object.prototype;module.exports=Object.getPrototypeOf||function(O){O=toObject(O);if(has(O,IE_PROTO))return O[IE_PROTO];if(typeof O.constructor=='function'&&O instanceof O.constructor){return O.constructor.prototype;}return O instanceof Object?ObjectProto:null;};},{"./_has":52,"./_shared-key":92,"./_to-object":101}],80:[function(require,module,exports){var has=require('./_has');var toIObject=require('./_to-iobject');var arrayIndexOf=require('./_array-includes')(false);var IE_PROTO=require('./_shared-key')('IE_PROTO');module.exports=function(object,names){var O=toIObject(object);var i=0;var result=[];var key;for(key in O){if(key!=IE_PROTO)has(O,key)&&result.push(key);}// Don't enum bug & hidden keys
while(names.length>i){if(has(O,key=names[i++])){~arrayIndexOf(result,key)||result.push(key);}}return result;};},{"./_array-includes":38,"./_has":52,"./_shared-key":92,"./_to-iobject":99}],81:[function(require,module,exports){// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys=require('./_object-keys-internal');var enumBugKeys=require('./_enum-bug-keys');module.exports=Object.keys||function keys(O){return $keys(O,enumBugKeys);};},{"./_enum-bug-keys":46,"./_object-keys-internal":80}],82:[function(require,module,exports){exports.f={}.propertyIsEnumerable;},{}],83:[function(require,module,exports){// most Object methods by ES6 should accept primitives
var $export=require('./_export');var core=require('./_core');var fails=require('./_fails');module.exports=function(KEY,exec){var fn=(core.Object||{})[KEY]||Object[KEY];var exp={};exp[KEY]=exec(fn);$export($export.S+$export.F*fails(function(){fn(1);}),'Object',exp);};},{"./_core":41,"./_export":48,"./_fails":49}],84:[function(require,module,exports){module.exports=function(exec){try{return{e:false,v:exec()};}catch(e){return{e:true,v:e};}};},{}],85:[function(require,module,exports){var anObject=require('./_an-object');var isObject=require('./_is-object');var newPromiseCapability=require('./_new-promise-capability');module.exports=function(C,x){anObject(C);if(isObject(x)&&x.constructor===C)return x;var promiseCapability=newPromiseCapability.f(C);var resolve=promiseCapability.resolve;resolve(x);return promiseCapability.promise;};},{"./_an-object":37,"./_is-object":60,"./_new-promise-capability":70}],86:[function(require,module,exports){module.exports=function(bitmap,value){return{enumerable:!(bitmap&1),configurable:!(bitmap&2),writable:!(bitmap&4),value:value};};},{}],87:[function(require,module,exports){var hide=require('./_hide');module.exports=function(target,src,safe){for(var key in src){if(safe&&target[key])target[key]=src[key];else hide(target,key,src[key]);}return target;};},{"./_hide":53}],88:[function(require,module,exports){module.exports=require('./_hide');},{"./_hide":53}],89:[function(require,module,exports){// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */var isObject=require('./_is-object');var anObject=require('./_an-object');var check=function check(O,proto){anObject(O);if(!isObject(proto)&&proto!==null)throw TypeError(proto+": can't set as prototype!");};module.exports={set:Object.setPrototypeOf||('__proto__'in{}?// eslint-disable-line
function(test,buggy,set){try{set=require('./_ctx')(Function.call,require('./_object-gopd').f(Object.prototype,'__proto__').set,2);set(test,[]);buggy=!(test instanceof Array);}catch(e){buggy=true;}return function setPrototypeOf(O,proto){check(O,proto);if(buggy)O.__proto__=proto;else set(O,proto);return O;};}({},false):undefined),check:check};},{"./_an-object":37,"./_ctx":42,"./_is-object":60,"./_object-gopd":75}],90:[function(require,module,exports){'use strict';var global=require('./_global');var core=require('./_core');var dP=require('./_object-dp');var DESCRIPTORS=require('./_descriptors');var SPECIES=require('./_wks')('species');module.exports=function(KEY){var C=typeof core[KEY]=='function'?core[KEY]:global[KEY];if(DESCRIPTORS&&C&&!C[SPECIES])dP.f(C,SPECIES,{configurable:true,get:function get(){return this;}});};},{"./_core":41,"./_descriptors":44,"./_global":51,"./_object-dp":73,"./_wks":106}],91:[function(require,module,exports){var def=require('./_object-dp').f;var has=require('./_has');var TAG=require('./_wks')('toStringTag');module.exports=function(it,tag,stat){if(it&&!has(it=stat?it:it.prototype,TAG))def(it,TAG,{configurable:true,value:tag});};},{"./_has":52,"./_object-dp":73,"./_wks":106}],92:[function(require,module,exports){var shared=require('./_shared')('keys');var uid=require('./_uid');module.exports=function(key){return shared[key]||(shared[key]=uid(key));};},{"./_shared":93,"./_uid":103}],93:[function(require,module,exports){var global=require('./_global');var SHARED='__core-js_shared__';var store=global[SHARED]||(global[SHARED]={});module.exports=function(key){return store[key]||(store[key]={});};},{"./_global":51}],94:[function(require,module,exports){// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject=require('./_an-object');var aFunction=require('./_a-function');var SPECIES=require('./_wks')('species');module.exports=function(O,D){var C=anObject(O).constructor;var S;return C===undefined||(S=anObject(C)[SPECIES])==undefined?D:aFunction(S);};},{"./_a-function":34,"./_an-object":37,"./_wks":106}],95:[function(require,module,exports){var toInteger=require('./_to-integer');var defined=require('./_defined');// true  -> String#at
// false -> String#codePointAt
module.exports=function(TO_STRING){return function(that,pos){var s=String(defined(that));var i=toInteger(pos);var l=s.length;var a,b;if(i<0||i>=l)return TO_STRING?'':undefined;a=s.charCodeAt(i);return a<0xd800||a>0xdbff||i+1===l||(b=s.charCodeAt(i+1))<0xdc00||b>0xdfff?TO_STRING?s.charAt(i):a:TO_STRING?s.slice(i,i+2):(a-0xd800<<10)+(b-0xdc00)+0x10000;};};},{"./_defined":43,"./_to-integer":98}],96:[function(require,module,exports){var ctx=require('./_ctx');var invoke=require('./_invoke');var html=require('./_html');var cel=require('./_dom-create');var global=require('./_global');var process=global.process;var setTask=global.setImmediate;var clearTask=global.clearImmediate;var MessageChannel=global.MessageChannel;var Dispatch=global.Dispatch;var counter=0;var queue={};var ONREADYSTATECHANGE='onreadystatechange';var defer,channel,port;var run=function run(){var id=+this;// eslint-disable-next-line no-prototype-builtins
if(queue.hasOwnProperty(id)){var fn=queue[id];delete queue[id];fn();}};var listener=function listener(event){run.call(event.data);};// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask||!clearTask){setTask=function setImmediate(fn){var args=[];var i=1;while(arguments.length>i){args.push(arguments[i++]);}queue[++counter]=function(){// eslint-disable-next-line no-new-func
invoke(typeof fn=='function'?fn:Function(fn),args);};defer(counter);return counter;};clearTask=function clearImmediate(id){delete queue[id];};// Node.js 0.8-
if(require('./_cof')(process)=='process'){defer=function defer(id){process.nextTick(ctx(run,id,1));};// Sphere (JS game engine) Dispatch API
}else if(Dispatch&&Dispatch.now){defer=function defer(id){Dispatch.now(ctx(run,id,1));};// Browsers with MessageChannel, includes WebWorkers
}else if(MessageChannel){channel=new MessageChannel();port=channel.port2;channel.port1.onmessage=listener;defer=ctx(port.postMessage,port,1);// Browsers with postMessage, skip WebWorkers
// IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
}else if(global.addEventListener&&typeof postMessage=='function'&&!global.importScripts){defer=function defer(id){global.postMessage(id+'','*');};global.addEventListener('message',listener,false);// IE8-
}else if(ONREADYSTATECHANGE in cel('script')){defer=function defer(id){html.appendChild(cel('script'))[ONREADYSTATECHANGE]=function(){html.removeChild(this);run.call(id);};};// Rest old browsers
}else{defer=function defer(id){setTimeout(ctx(run,id,1),0);};}}module.exports={set:setTask,clear:clearTask};},{"./_cof":40,"./_ctx":42,"./_dom-create":45,"./_global":51,"./_html":54,"./_invoke":56}],97:[function(require,module,exports){var toInteger=require('./_to-integer');var max=Math.max;var min=Math.min;module.exports=function(index,length){index=toInteger(index);return index<0?max(index+length,0):min(index,length);};},{"./_to-integer":98}],98:[function(require,module,exports){// 7.1.4 ToInteger
var ceil=Math.ceil;var floor=Math.floor;module.exports=function(it){return isNaN(it=+it)?0:(it>0?floor:ceil)(it);};},{}],99:[function(require,module,exports){// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject=require('./_iobject');var defined=require('./_defined');module.exports=function(it){return IObject(defined(it));};},{"./_defined":43,"./_iobject":57}],100:[function(require,module,exports){// 7.1.15 ToLength
var toInteger=require('./_to-integer');var min=Math.min;module.exports=function(it){return it>0?min(toInteger(it),0x1fffffffffffff):0;// pow(2, 53) - 1 == 9007199254740991
};},{"./_to-integer":98}],101:[function(require,module,exports){// 7.1.13 ToObject(argument)
var defined=require('./_defined');module.exports=function(it){return Object(defined(it));};},{"./_defined":43}],102:[function(require,module,exports){// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject=require('./_is-object');// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports=function(it,S){if(!isObject(it))return it;var fn,val;if(S&&typeof(fn=it.toString)=='function'&&!isObject(val=fn.call(it)))return val;if(typeof(fn=it.valueOf)=='function'&&!isObject(val=fn.call(it)))return val;if(!S&&typeof(fn=it.toString)=='function'&&!isObject(val=fn.call(it)))return val;throw TypeError("Can't convert object to primitive value");};},{"./_is-object":60}],103:[function(require,module,exports){var id=0;var px=Math.random();module.exports=function(key){return'Symbol('.concat(key===undefined?'':key,')_',(++id+px).toString(36));};},{}],104:[function(require,module,exports){var global=require('./_global');var core=require('./_core');var LIBRARY=require('./_library');var wksExt=require('./_wks-ext');var defineProperty=require('./_object-dp').f;module.exports=function(name){var $Symbol=core.Symbol||(core.Symbol=LIBRARY?{}:global.Symbol||{});if(name.charAt(0)!='_'&&!(name in $Symbol))defineProperty($Symbol,name,{value:wksExt.f(name)});};},{"./_core":41,"./_global":51,"./_library":67,"./_object-dp":73,"./_wks-ext":105}],105:[function(require,module,exports){exports.f=require('./_wks');},{"./_wks":106}],106:[function(require,module,exports){var store=require('./_shared')('wks');var uid=require('./_uid');var _Symbol=require('./_global').Symbol;var USE_SYMBOL=typeof _Symbol=='function';var $exports=module.exports=function(name){return store[name]||(store[name]=USE_SYMBOL&&_Symbol[name]||(USE_SYMBOL?_Symbol:uid)('Symbol.'+name));};$exports.store=store;},{"./_global":51,"./_shared":93,"./_uid":103}],107:[function(require,module,exports){var classof=require('./_classof');var ITERATOR=require('./_wks')('iterator');var Iterators=require('./_iterators');module.exports=require('./_core').getIteratorMethod=function(it){if(it!=undefined)return it[ITERATOR]||it['@@iterator']||Iterators[classof(it)];};},{"./_classof":39,"./_core":41,"./_iterators":66,"./_wks":106}],108:[function(require,module,exports){'use strict';var addToUnscopables=require('./_add-to-unscopables');var step=require('./_iter-step');var Iterators=require('./_iterators');var toIObject=require('./_to-iobject');// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports=require('./_iter-define')(Array,'Array',function(iterated,kind){this._t=toIObject(iterated);// target
this._i=0;// next index
this._k=kind;// kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
},function(){var O=this._t;var kind=this._k;var index=this._i++;if(!O||index>=O.length){this._t=undefined;return step(1);}if(kind=='keys')return step(0,index);if(kind=='values')return step(0,O[index]);return step(0,[index,O[index]]);},'values');// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments=Iterators.Array;addToUnscopables('keys');addToUnscopables('values');addToUnscopables('entries');},{"./_add-to-unscopables":35,"./_iter-define":63,"./_iter-step":65,"./_iterators":66,"./_to-iobject":99}],109:[function(require,module,exports){// 20.2.2.21 Math.log10(x)
var $export=require('./_export');$export($export.S,'Math',{log10:function log10(x){return Math.log(x)*Math.LOG10E;}});},{"./_export":48}],110:[function(require,module,exports){// 20.1.2.2 Number.isFinite(number)
var $export=require('./_export');var _isFinite=require('./_global').isFinite;$export($export.S,'Number',{isFinite:function isFinite(it){return typeof it=='number'&&_isFinite(it);}});},{"./_export":48,"./_global":51}],111:[function(require,module,exports){// 19.1.3.1 Object.assign(target, source)
var $export=require('./_export');$export($export.S+$export.F,'Object',{assign:require('./_object-assign')});},{"./_export":48,"./_object-assign":71}],112:[function(require,module,exports){var $export=require('./_export');// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S,'Object',{create:require('./_object-create')});},{"./_export":48,"./_object-create":72}],113:[function(require,module,exports){var $export=require('./_export');// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S+$export.F*!require('./_descriptors'),'Object',{defineProperty:require('./_object-dp').f});},{"./_descriptors":44,"./_export":48,"./_object-dp":73}],114:[function(require,module,exports){// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject=require('./_to-iobject');var $getOwnPropertyDescriptor=require('./_object-gopd').f;require('./_object-sap')('getOwnPropertyDescriptor',function(){return function getOwnPropertyDescriptor(it,key){return $getOwnPropertyDescriptor(toIObject(it),key);};});},{"./_object-gopd":75,"./_object-sap":83,"./_to-iobject":99}],115:[function(require,module,exports){// 19.1.2.9 Object.getPrototypeOf(O)
var toObject=require('./_to-object');var $getPrototypeOf=require('./_object-gpo');require('./_object-sap')('getPrototypeOf',function(){return function getPrototypeOf(it){return $getPrototypeOf(toObject(it));};});},{"./_object-gpo":79,"./_object-sap":83,"./_to-object":101}],116:[function(require,module,exports){// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export=require('./_export');$export($export.S,'Object',{setPrototypeOf:require('./_set-proto').set});},{"./_export":48,"./_set-proto":89}],117:[function(require,module,exports){},{}],118:[function(require,module,exports){'use strict';var LIBRARY=require('./_library');var global=require('./_global');var ctx=require('./_ctx');var classof=require('./_classof');var $export=require('./_export');var isObject=require('./_is-object');var aFunction=require('./_a-function');var anInstance=require('./_an-instance');var forOf=require('./_for-of');var speciesConstructor=require('./_species-constructor');var task=require('./_task').set;var microtask=require('./_microtask')();var newPromiseCapabilityModule=require('./_new-promise-capability');var perform=require('./_perform');var promiseResolve=require('./_promise-resolve');var PROMISE='Promise';var TypeError=global.TypeError;var process=global.process;var $Promise=global[PROMISE];var isNode=classof(process)=='process';var empty=function empty(){/* empty */};var Internal,newGenericPromiseCapability,OwnPromiseCapability,Wrapper;var newPromiseCapability=newGenericPromiseCapability=newPromiseCapabilityModule.f;var USE_NATIVE=!!function(){try{// correct subclassing with @@species support
var promise=$Promise.resolve(1);var FakePromise=(promise.constructor={})[require('./_wks')('species')]=function(exec){exec(empty,empty);};// unhandled rejections tracking support, NodeJS Promise without it fails @@species test
return(isNode||typeof PromiseRejectionEvent=='function')&&promise.then(empty)instanceof FakePromise;}catch(e){/* empty */}}();// helpers
var isThenable=function isThenable(it){var then;return isObject(it)&&typeof(then=it.then)=='function'?then:false;};var notify=function notify(promise,isReject){if(promise._n)return;promise._n=true;var chain=promise._c;microtask(function(){var value=promise._v;var ok=promise._s==1;var i=0;var run=function run(reaction){var handler=ok?reaction.ok:reaction.fail;var resolve=reaction.resolve;var reject=reaction.reject;var domain=reaction.domain;var result,then,exited;try{if(handler){if(!ok){if(promise._h==2)onHandleUnhandled(promise);promise._h=1;}if(handler===true)result=value;else{if(domain)domain.enter();result=handler(value);// may throw
if(domain){domain.exit();exited=true;}}if(result===reaction.promise){reject(TypeError('Promise-chain cycle'));}else if(then=isThenable(result)){then.call(result,resolve,reject);}else resolve(result);}else reject(value);}catch(e){if(domain&&!exited)domain.exit();reject(e);}};while(chain.length>i){run(chain[i++]);}// variable length - can't use forEach
promise._c=[];promise._n=false;if(isReject&&!promise._h)onUnhandled(promise);});};var onUnhandled=function onUnhandled(promise){task.call(global,function(){var value=promise._v;var unhandled=isUnhandled(promise);var result,handler,console;if(unhandled){result=perform(function(){if(isNode){process.emit('unhandledRejection',value,promise);}else if(handler=global.onunhandledrejection){handler({promise:promise,reason:value});}else if((console=global.console)&&console.error){console.error('Unhandled promise rejection',value);}});// Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
promise._h=isNode||isUnhandled(promise)?2:1;}promise._a=undefined;if(unhandled&&result.e)throw result.v;});};var isUnhandled=function isUnhandled(promise){return promise._h!==1&&(promise._a||promise._c).length===0;};var onHandleUnhandled=function onHandleUnhandled(promise){task.call(global,function(){var handler;if(isNode){process.emit('rejectionHandled',promise);}else if(handler=global.onrejectionhandled){handler({promise:promise,reason:promise._v});}});};var $reject=function $reject(value){var promise=this;if(promise._d)return;promise._d=true;promise=promise._w||promise;// unwrap
promise._v=value;promise._s=2;if(!promise._a)promise._a=promise._c.slice();notify(promise,true);};var $resolve=function $resolve(value){var promise=this;var then;if(promise._d)return;promise._d=true;promise=promise._w||promise;// unwrap
try{if(promise===value)throw TypeError("Promise can't be resolved itself");if(then=isThenable(value)){microtask(function(){var wrapper={_w:promise,_d:false};// wrap
try{then.call(value,ctx($resolve,wrapper,1),ctx($reject,wrapper,1));}catch(e){$reject.call(wrapper,e);}});}else{promise._v=value;promise._s=1;notify(promise,false);}}catch(e){$reject.call({_w:promise,_d:false},e);// wrap
}};// constructor polyfill
if(!USE_NATIVE){// 25.4.3.1 Promise(executor)
$Promise=function Promise(executor){anInstance(this,$Promise,PROMISE,'_h');aFunction(executor);Internal.call(this);try{executor(ctx($resolve,this,1),ctx($reject,this,1));}catch(err){$reject.call(this,err);}};// eslint-disable-next-line no-unused-vars
Internal=function Promise(executor){this._c=[];// <- awaiting reactions
this._a=undefined;// <- checked in isUnhandled reactions
this._s=0;// <- state
this._d=false;// <- done
this._v=undefined;// <- value
this._h=0;// <- rejection state, 0 - default, 1 - handled, 2 - unhandled
this._n=false;// <- notify
};Internal.prototype=require('./_redefine-all')($Promise.prototype,{// 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
then:function then(onFulfilled,onRejected){var reaction=newPromiseCapability(speciesConstructor(this,$Promise));reaction.ok=typeof onFulfilled=='function'?onFulfilled:true;reaction.fail=typeof onRejected=='function'&&onRejected;reaction.domain=isNode?process.domain:undefined;this._c.push(reaction);if(this._a)this._a.push(reaction);if(this._s)notify(this,false);return reaction.promise;},// 25.4.5.1 Promise.prototype.catch(onRejected)
'catch':function _catch(onRejected){return this.then(undefined,onRejected);}});OwnPromiseCapability=function OwnPromiseCapability(){var promise=new Internal();this.promise=promise;this.resolve=ctx($resolve,promise,1);this.reject=ctx($reject,promise,1);};newPromiseCapabilityModule.f=newPromiseCapability=function newPromiseCapability(C){return C===$Promise||C===Wrapper?new OwnPromiseCapability(C):newGenericPromiseCapability(C);};}$export($export.G+$export.W+$export.F*!USE_NATIVE,{Promise:$Promise});require('./_set-to-string-tag')($Promise,PROMISE);require('./_set-species')(PROMISE);Wrapper=require('./_core')[PROMISE];// statics
$export($export.S+$export.F*!USE_NATIVE,PROMISE,{// 25.4.4.5 Promise.reject(r)
reject:function reject(r){var capability=newPromiseCapability(this);var $$reject=capability.reject;$$reject(r);return capability.promise;}});$export($export.S+$export.F*(LIBRARY||!USE_NATIVE),PROMISE,{// 25.4.4.6 Promise.resolve(x)
resolve:function resolve(x){return promiseResolve(LIBRARY&&this===Wrapper?$Promise:this,x);}});$export($export.S+$export.F*!(USE_NATIVE&&require('./_iter-detect')(function(iter){$Promise.all(iter)['catch'](empty);})),PROMISE,{// 25.4.4.1 Promise.all(iterable)
all:function all(iterable){var C=this;var capability=newPromiseCapability(C);var resolve=capability.resolve;var reject=capability.reject;var result=perform(function(){var values=[];var index=0;var remaining=1;forOf(iterable,false,function(promise){var $index=index++;var alreadyCalled=false;values.push(undefined);remaining++;C.resolve(promise).then(function(value){if(alreadyCalled)return;alreadyCalled=true;values[$index]=value;--remaining||resolve(values);},reject);});--remaining||resolve(values);});if(result.e)reject(result.v);return capability.promise;},// 25.4.4.4 Promise.race(iterable)
race:function race(iterable){var C=this;var capability=newPromiseCapability(C);var reject=capability.reject;var result=perform(function(){forOf(iterable,false,function(promise){C.resolve(promise).then(capability.resolve,reject);});});if(result.e)reject(result.v);return capability.promise;}});},{"./_a-function":34,"./_an-instance":36,"./_classof":39,"./_core":41,"./_ctx":42,"./_export":48,"./_for-of":50,"./_global":51,"./_is-object":60,"./_iter-detect":64,"./_library":67,"./_microtask":69,"./_new-promise-capability":70,"./_perform":84,"./_promise-resolve":85,"./_redefine-all":87,"./_set-species":90,"./_set-to-string-tag":91,"./_species-constructor":94,"./_task":96,"./_wks":106}],119:[function(require,module,exports){'use strict';var $at=require('./_string-at')(true);// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String,'String',function(iterated){this._t=String(iterated);// target
this._i=0;// next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
},function(){var O=this._t;var index=this._i;var point;if(index>=O.length)return{value:undefined,done:true};point=$at(O,index);this._i+=point.length;return{value:point,done:false};});},{"./_iter-define":63,"./_string-at":95}],120:[function(require,module,exports){'use strict';// ECMAScript 6 symbols shim
var global=require('./_global');var has=require('./_has');var DESCRIPTORS=require('./_descriptors');var $export=require('./_export');var redefine=require('./_redefine');var META=require('./_meta').KEY;var $fails=require('./_fails');var shared=require('./_shared');var setToStringTag=require('./_set-to-string-tag');var uid=require('./_uid');var wks=require('./_wks');var wksExt=require('./_wks-ext');var wksDefine=require('./_wks-define');var enumKeys=require('./_enum-keys');var isArray=require('./_is-array');var anObject=require('./_an-object');var isObject=require('./_is-object');var toIObject=require('./_to-iobject');var toPrimitive=require('./_to-primitive');var createDesc=require('./_property-desc');var _create=require('./_object-create');var gOPNExt=require('./_object-gopn-ext');var $GOPD=require('./_object-gopd');var $DP=require('./_object-dp');var $keys=require('./_object-keys');var gOPD=$GOPD.f;var dP=$DP.f;var gOPN=gOPNExt.f;var $Symbol=global.Symbol;var $JSON=global.JSON;var _stringify=$JSON&&$JSON.stringify;var PROTOTYPE='prototype';var HIDDEN=wks('_hidden');var TO_PRIMITIVE=wks('toPrimitive');var isEnum={}.propertyIsEnumerable;var SymbolRegistry=shared('symbol-registry');var AllSymbols=shared('symbols');var OPSymbols=shared('op-symbols');var ObjectProto=Object[PROTOTYPE];var USE_NATIVE=typeof $Symbol=='function';var QObject=global.QObject;// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter=!QObject||!QObject[PROTOTYPE]||!QObject[PROTOTYPE].findChild;// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc=DESCRIPTORS&&$fails(function(){return _create(dP({},'a',{get:function get(){return dP(this,'a',{value:7}).a;}})).a!=7;})?function(it,key,D){var protoDesc=gOPD(ObjectProto,key);if(protoDesc)delete ObjectProto[key];dP(it,key,D);if(protoDesc&&it!==ObjectProto)dP(ObjectProto,key,protoDesc);}:dP;var wrap=function wrap(tag){var sym=AllSymbols[tag]=_create($Symbol[PROTOTYPE]);sym._k=tag;return sym;};var isSymbol=USE_NATIVE&&_typeof4($Symbol.iterator)=='symbol'?function(it){return(typeof it==="undefined"?"undefined":_typeof4(it))=='symbol';}:function(it){return it instanceof $Symbol;};var $defineProperty=function defineProperty(it,key,D){if(it===ObjectProto)$defineProperty(OPSymbols,key,D);anObject(it);key=toPrimitive(key,true);anObject(D);if(has(AllSymbols,key)){if(!D.enumerable){if(!has(it,HIDDEN))dP(it,HIDDEN,createDesc(1,{}));it[HIDDEN][key]=true;}else{if(has(it,HIDDEN)&&it[HIDDEN][key])it[HIDDEN][key]=false;D=_create(D,{enumerable:createDesc(0,false)});}return setSymbolDesc(it,key,D);}return dP(it,key,D);};var $defineProperties=function defineProperties(it,P){anObject(it);var keys=enumKeys(P=toIObject(P));var i=0;var l=keys.length;var key;while(l>i){$defineProperty(it,key=keys[i++],P[key]);}return it;};var $create=function create(it,P){return P===undefined?_create(it):$defineProperties(_create(it),P);};var $propertyIsEnumerable=function propertyIsEnumerable(key){var E=isEnum.call(this,key=toPrimitive(key,true));if(this===ObjectProto&&has(AllSymbols,key)&&!has(OPSymbols,key))return false;return E||!has(this,key)||!has(AllSymbols,key)||has(this,HIDDEN)&&this[HIDDEN][key]?E:true;};var $getOwnPropertyDescriptor=function getOwnPropertyDescriptor(it,key){it=toIObject(it);key=toPrimitive(key,true);if(it===ObjectProto&&has(AllSymbols,key)&&!has(OPSymbols,key))return;var D=gOPD(it,key);if(D&&has(AllSymbols,key)&&!(has(it,HIDDEN)&&it[HIDDEN][key]))D.enumerable=true;return D;};var $getOwnPropertyNames=function getOwnPropertyNames(it){var names=gOPN(toIObject(it));var result=[];var i=0;var key;while(names.length>i){if(!has(AllSymbols,key=names[i++])&&key!=HIDDEN&&key!=META)result.push(key);}return result;};var $getOwnPropertySymbols=function getOwnPropertySymbols(it){var IS_OP=it===ObjectProto;var names=gOPN(IS_OP?OPSymbols:toIObject(it));var result=[];var i=0;var key;while(names.length>i){if(has(AllSymbols,key=names[i++])&&(IS_OP?has(ObjectProto,key):true))result.push(AllSymbols[key]);}return result;};// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){$Symbol=function _Symbol2(){if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');var tag=uid(arguments.length>0?arguments[0]:undefined);var $set=function $set(value){if(this===ObjectProto)$set.call(OPSymbols,value);if(has(this,HIDDEN)&&has(this[HIDDEN],tag))this[HIDDEN][tag]=false;setSymbolDesc(this,tag,createDesc(1,value));};if(DESCRIPTORS&&setter)setSymbolDesc(ObjectProto,tag,{configurable:true,set:$set});return wrap(tag);};redefine($Symbol[PROTOTYPE],'toString',function toString(){return this._k;});$GOPD.f=$getOwnPropertyDescriptor;$DP.f=$defineProperty;require('./_object-gopn').f=gOPNExt.f=$getOwnPropertyNames;require('./_object-pie').f=$propertyIsEnumerable;require('./_object-gops').f=$getOwnPropertySymbols;if(DESCRIPTORS&&!require('./_library')){redefine(ObjectProto,'propertyIsEnumerable',$propertyIsEnumerable,true);}wksExt.f=function(name){return wrap(wks(name));};}$export($export.G+$export.W+$export.F*!USE_NATIVE,{Symbol:$Symbol});for(var es6Symbols=// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','),j=0;es6Symbols.length>j;){wks(es6Symbols[j++]);}for(var wellKnownSymbols=$keys(wks.store),k=0;wellKnownSymbols.length>k;){wksDefine(wellKnownSymbols[k++]);}$export($export.S+$export.F*!USE_NATIVE,'Symbol',{// 19.4.2.1 Symbol.for(key)
'for':function _for(key){return has(SymbolRegistry,key+='')?SymbolRegistry[key]:SymbolRegistry[key]=$Symbol(key);},// 19.4.2.5 Symbol.keyFor(sym)
keyFor:function keyFor(sym){if(!isSymbol(sym))throw TypeError(sym+' is not a symbol!');for(var key in SymbolRegistry){if(SymbolRegistry[key]===sym)return key;}},useSetter:function useSetter(){setter=true;},useSimple:function useSimple(){setter=false;}});$export($export.S+$export.F*!USE_NATIVE,'Object',{// 19.1.2.2 Object.create(O [, Properties])
create:$create,// 19.1.2.4 Object.defineProperty(O, P, Attributes)
defineProperty:$defineProperty,// 19.1.2.3 Object.defineProperties(O, Properties)
defineProperties:$defineProperties,// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
getOwnPropertyDescriptor:$getOwnPropertyDescriptor,// 19.1.2.7 Object.getOwnPropertyNames(O)
getOwnPropertyNames:$getOwnPropertyNames,// 19.1.2.8 Object.getOwnPropertySymbols(O)
getOwnPropertySymbols:$getOwnPropertySymbols});// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON&&$export($export.S+$export.F*(!USE_NATIVE||$fails(function(){var S=$Symbol();// MS Edge converts symbol values to JSON as {}
// WebKit converts symbol values to JSON as null
// V8 throws on boxed symbols
return _stringify([S])!='[null]'||_stringify({a:S})!='{}'||_stringify(Object(S))!='{}';})),'JSON',{stringify:function stringify(it){var args=[it];var i=1;var replacer,$replacer;while(arguments.length>i){args.push(arguments[i++]);}$replacer=replacer=args[1];if(!isObject(replacer)&&it===undefined||isSymbol(it))return;// IE8 returns string on undefined
if(!isArray(replacer))replacer=function replacer(key,value){if(typeof $replacer=='function')value=$replacer.call(this,key,value);if(!isSymbol(value))return value;};args[1]=replacer;return _stringify.apply($JSON,args);}});// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE]||require('./_hide')($Symbol[PROTOTYPE],TO_PRIMITIVE,$Symbol[PROTOTYPE].valueOf);// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol,'Symbol');// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math,'Math',true);// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON,'JSON',true);},{"./_an-object":37,"./_descriptors":44,"./_enum-keys":47,"./_export":48,"./_fails":49,"./_global":51,"./_has":52,"./_hide":53,"./_is-array":59,"./_is-object":60,"./_library":67,"./_meta":68,"./_object-create":72,"./_object-dp":73,"./_object-gopd":75,"./_object-gopn":77,"./_object-gopn-ext":76,"./_object-gops":78,"./_object-keys":81,"./_object-pie":82,"./_property-desc":86,"./_redefine":88,"./_set-to-string-tag":91,"./_shared":93,"./_to-iobject":99,"./_to-primitive":102,"./_uid":103,"./_wks":106,"./_wks-define":104,"./_wks-ext":105}],121:[function(require,module,exports){// https://github.com/tc39/proposal-promise-finally
'use strict';var $export=require('./_export');var core=require('./_core');var global=require('./_global');var speciesConstructor=require('./_species-constructor');var promiseResolve=require('./_promise-resolve');$export($export.P+$export.R,'Promise',{'finally':function _finally(onFinally){var C=speciesConstructor(this,core.Promise||global.Promise);var isFunction=typeof onFinally=='function';return this.then(isFunction?function(x){return promiseResolve(C,onFinally()).then(function(){return x;});}:onFinally,isFunction?function(e){return promiseResolve(C,onFinally()).then(function(){throw e;});}:onFinally);}});},{"./_core":41,"./_export":48,"./_global":51,"./_promise-resolve":85,"./_species-constructor":94}],122:[function(require,module,exports){'use strict';// https://github.com/tc39/proposal-promise-try
var $export=require('./_export');var newPromiseCapability=require('./_new-promise-capability');var perform=require('./_perform');$export($export.S,'Promise',{'try':function _try(callbackfn){var promiseCapability=newPromiseCapability.f(this);var result=perform(callbackfn);(result.e?promiseCapability.reject:promiseCapability.resolve)(result.v);return promiseCapability.promise;}});},{"./_export":48,"./_new-promise-capability":70,"./_perform":84}],123:[function(require,module,exports){require('./_wks-define')('asyncIterator');},{"./_wks-define":104}],124:[function(require,module,exports){require('./_wks-define')('observable');},{"./_wks-define":104}],125:[function(require,module,exports){require('./es6.array.iterator');var global=require('./_global');var hide=require('./_hide');var Iterators=require('./_iterators');var TO_STRING_TAG=require('./_wks')('toStringTag');var DOMIterables=('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,'+'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,'+'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,'+'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,'+'TextTrackList,TouchList').split(',');for(var i=0;i<DOMIterables.length;i++){var NAME=DOMIterables[i];var Collection=global[NAME];var proto=Collection&&Collection.prototype;if(proto&&!proto[TO_STRING_TAG])hide(proto,TO_STRING_TAG,NAME);Iterators[NAME]=Iterators.Array;}},{"./_global":51,"./_hide":53,"./_iterators":66,"./_wks":106,"./es6.array.iterator":108}],126:[function(require,module,exports){'use strict';var hasOwn=Object.prototype.hasOwnProperty;var toStr=Object.prototype.toString;var isArray=function isArray(arr){if(typeof Array.isArray==='function'){return Array.isArray(arr);}return toStr.call(arr)==='[object Array]';};var isPlainObject=function isPlainObject(obj){if(!obj||toStr.call(obj)!=='[object Object]'){return false;}var hasOwnConstructor=hasOwn.call(obj,'constructor');var hasIsPrototypeOf=obj.constructor&&obj.constructor.prototype&&hasOwn.call(obj.constructor.prototype,'isPrototypeOf');// Not own constructor property must be Object
if(obj.constructor&&!hasOwnConstructor&&!hasIsPrototypeOf){return false;}// Own properties are enumerated firstly, so to speed up,
// if last one is own, then all properties are own.
var key;for(key in obj){/**/}return typeof key==='undefined'||hasOwn.call(obj,key);};module.exports=function extend(){var options,name,src,copy,copyIsArray,clone;var target=arguments[0];var i=1;var length=arguments.length;var deep=false;// Handle a deep copy situation
if(typeof target==='boolean'){deep=target;target=arguments[1]||{};// skip the boolean and the target
i=2;}if(target==null||(typeof target==="undefined"?"undefined":_typeof4(target))!=='object'&&typeof target!=='function'){target={};}for(;i<length;++i){options=arguments[i];// Only deal with non-null/undefined values
if(options!=null){// Extend the base object
for(name in options){src=target[name];copy=options[name];// Prevent never-ending loop
if(target!==copy){// Recurse if we're merging plain objects or arrays
if(deep&&copy&&(isPlainObject(copy)||(copyIsArray=isArray(copy)))){if(copyIsArray){copyIsArray=false;clone=src&&isArray(src)?src:[];}else{clone=src&&isPlainObject(src)?src:{};}// Never move original objects, clone them
target[name]=extend(deep,clone,copy);// Don't bring in undefined values
}else if(typeof copy!=='undefined'){target[name]=copy;}}}}}// Return the modified object
return target;};},{}],127:[function(require,module,exports){'use strict';/**
 * Computes the maximum of the given values
 * @param {Array<number>} input
 * @return {number}
 */function max(input){if(!Array.isArray(input)){throw new Error('input must be an array');}if(input.length===0){throw new Error('input must not be empty');}var max=input[0];for(var i=1;i<input.length;i++){if(input[i]>max)max=input[i];}return max;}module.exports=max;},{}],128:[function(require,module,exports){'use strict';/**
 * Computes the minimum of the given values
 * @param {Array<number>} input
 * @return {number}
 */function min(input){if(!Array.isArray(input)){throw new Error('input must be an array');}if(input.length===0){throw new Error('input must not be empty');}var min=input[0];for(var i=1;i<input.length;i++){if(input[i]<min)min=input[i];}return min;}module.exports=min;},{}],129:[function(require,module,exports){'use strict';function _interopDefault(ex){return ex&&(typeof ex==="undefined"?"undefined":_typeof4(ex))==='object'&&'default'in ex?ex['default']:ex;}var max=_interopDefault(require('ml-array-max'));var min=_interopDefault(require('ml-array-min'));function rescale(input){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!Array.isArray(input)){throw new TypeError('input must be an array');}else if(input.length===0){throw new TypeError('input must not be empty');}var output=void 0;if(options.output!==undefined){if(!Array.isArray(options.output)){throw new TypeError('output option must be an array if specified');}output=options.output;}else{output=new Array(input.length);}var currentMin=min(input);var currentMax=max(input);if(currentMin===currentMax){throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');}var _options$min=options.min,minValue=_options$min===undefined?options.autoMinMax?currentMin:0:_options$min,_options$max=options.max,maxValue=_options$max===undefined?options.autoMinMax?currentMax:1:_options$max;if(minValue>=maxValue){throw new RangeError('min option must be smaller than max option');}var factor=(maxValue-minValue)/(currentMax-currentMin);for(var i=0;i<input.length;i++){output[i]=(input[i]-currentMin)*factor+minValue;}return output;}module.exports=rescale;},{"ml-array-max":127,"ml-array-min":128}],130:[function(require,module,exports){'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopDefault(ex){return ex&&(typeof ex==="undefined"?"undefined":_typeof4(ex))==='object'&&'default'in ex?ex['default']:ex;}var rescale=_interopDefault(require('ml-array-rescale'));if(!Symbol.species){Symbol.species=Symbol.for('@@species');}/**
 * @class LuDecomposition
 * @link https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs
 * @param {Matrix} matrix
 */var LuDecomposition$$1=function(){function LuDecomposition$$1(matrix){_classCallCheck4(this,LuDecomposition$$1);matrix=WrapperMatrix2D.checkMatrix(matrix);var lu=matrix.clone();var rows=lu.rows;var columns=lu.columns;var pivotVector=new Array(rows);var pivotSign=1;var i,j,k,p,s,t,v;var LUcolj,kmax;for(i=0;i<rows;i++){pivotVector[i]=i;}LUcolj=new Array(rows);for(j=0;j<columns;j++){for(i=0;i<rows;i++){LUcolj[i]=lu.get(i,j);}for(i=0;i<rows;i++){kmax=Math.min(i,j);s=0;for(k=0;k<kmax;k++){s+=lu.get(i,k)*LUcolj[k];}LUcolj[i]-=s;lu.set(i,j,LUcolj[i]);}p=j;for(i=j+1;i<rows;i++){if(Math.abs(LUcolj[i])>Math.abs(LUcolj[p])){p=i;}}if(p!==j){for(k=0;k<columns;k++){t=lu.get(p,k);lu.set(p,k,lu.get(j,k));lu.set(j,k,t);}v=pivotVector[p];pivotVector[p]=pivotVector[j];pivotVector[j]=v;pivotSign=-pivotSign;}if(j<rows&&lu.get(j,j)!==0){for(i=j+1;i<rows;i++){lu.set(i,j,lu.get(i,j)/lu.get(j,j));}}}this.LU=lu;this.pivotVector=pivotVector;this.pivotSign=pivotSign;}/**
     *
     * @return {boolean}
     */_createClass4(LuDecomposition$$1,[{key:"isSingular",value:function isSingular(){var data=this.LU;var col=data.columns;for(var j=0;j<col;j++){if(data[j][j]===0){return true;}}return false;}/**
     *
     * @param {Matrix} value
     * @return {Matrix}
     */},{key:"solve",value:function solve(value){value=Matrix.checkMatrix(value);var lu=this.LU;var rows=lu.rows;if(rows!==value.rows){throw new Error('Invalid matrix dimensions');}if(this.isSingular()){throw new Error('LU matrix is singular');}var count=value.columns;var X=value.subMatrixRow(this.pivotVector,0,count-1);var columns=lu.columns;var i,j,k;for(k=0;k<columns;k++){for(i=k+1;i<columns;i++){for(j=0;j<count;j++){X[i][j]-=X[k][j]*lu[i][k];}}}for(k=columns-1;k>=0;k--){for(j=0;j<count;j++){X[k][j]/=lu[k][k];}for(i=0;i<k;i++){for(j=0;j<count;j++){X[i][j]-=X[k][j]*lu[i][k];}}}return X;}/**
     *
     * @return {number}
     */},{key:"determinant",get:function get(){var data=this.LU;if(!data.isSquare()){throw new Error('Matrix must be square');}var determinant=this.pivotSign;var col=data.columns;for(var j=0;j<col;j++){determinant*=data[j][j];}return determinant;}/**
     *
     * @return {Matrix}
     */},{key:"lowerTriangularMatrix",get:function get(){var data=this.LU;var rows=data.rows;var columns=data.columns;var X=new Matrix(rows,columns);for(var i=0;i<rows;i++){for(var j=0;j<columns;j++){if(i>j){X[i][j]=data[i][j];}else if(i===j){X[i][j]=1;}else{X[i][j]=0;}}}return X;}/**
     *
     * @return {Matrix}
     */},{key:"upperTriangularMatrix",get:function get(){var data=this.LU;var rows=data.rows;var columns=data.columns;var X=new Matrix(rows,columns);for(var i=0;i<rows;i++){for(var j=0;j<columns;j++){if(i<=j){X[i][j]=data[i][j];}else{X[i][j]=0;}}}return X;}/**
     *
     * @return {Array<number>}
     */},{key:"pivotPermutationVector",get:function get(){return this.pivotVector.slice();}}]);return LuDecomposition$$1;}();function hypotenuse(a,b){var r=0;if(Math.abs(a)>Math.abs(b)){r=b/a;return Math.abs(a)*Math.sqrt(1+r*r);}if(b!==0){r=a/b;return Math.abs(b)*Math.sqrt(1+r*r);}return 0;}function getFilled2DArray(rows,columns,value){var array=new Array(rows);for(var i=0;i<rows;i++){array[i]=new Array(columns);for(var j=0;j<columns;j++){array[i][j]=value;}}return array;}/**
 * @class SingularValueDecomposition
 * @link https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs
 * @param {Matrix} value
 * @param {object} [options]
 * @param {boolean} [options.computeLeftSingularVectors=true]
 * @param {boolean} [options.computeRightSingularVectors=true]
 * @param {boolean} [options.autoTranspose=false]
 */var SingularValueDecomposition$$1=function(){function SingularValueDecomposition$$1(value){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck4(this,SingularValueDecomposition$$1);value=WrapperMatrix2D.checkMatrix(value);var m=value.rows;var n=value.columns;var nu=Math.min(m,n);var _options$computeLeftS=options.computeLeftSingularVectors,computeLeftSingularVectors=_options$computeLeftS===undefined?true:_options$computeLeftS,_options$computeRight=options.computeRightSingularVectors,computeRightSingularVectors=_options$computeRight===undefined?true:_options$computeRight,_options$autoTranspos=options.autoTranspose,autoTranspose=_options$autoTranspos===undefined?false:_options$autoTranspos;var wantu=Boolean(computeLeftSingularVectors);var wantv=Boolean(computeRightSingularVectors);var swapped=false;var a;if(m<n){if(!autoTranspose){a=value.clone();// eslint-disable-next-line no-console
console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');}else{a=value.transpose();m=a.rows;n=a.columns;swapped=true;var aux=wantu;wantu=wantv;wantv=aux;}}else{a=value.clone();}var s=new Array(Math.min(m+1,n));var U=getFilled2DArray(m,nu,0);var V=getFilled2DArray(n,n,0);var e=new Array(n);var work=new Array(m);var nct=Math.min(m-1,n);var nrt=Math.max(0,Math.min(n-2,m));var i,j,k,p,t,ks,f,cs,sn,max,kase,scale,sp,spm1,epm1,sk,ek,b,c,shift,g;for(k=0,max=Math.max(nct,nrt);k<max;k++){if(k<nct){s[k]=0;for(i=k;i<m;i++){s[k]=hypotenuse(s[k],a[i][k]);}if(s[k]!==0){if(a[k][k]<0){s[k]=-s[k];}for(i=k;i<m;i++){a[i][k]/=s[k];}a[k][k]+=1;}s[k]=-s[k];}for(j=k+1;j<n;j++){if(k<nct&&s[k]!==0){t=0;for(i=k;i<m;i++){t+=a[i][k]*a[i][j];}t=-t/a[k][k];for(i=k;i<m;i++){a[i][j]+=t*a[i][k];}}e[j]=a[k][j];}if(wantu&&k<nct){for(i=k;i<m;i++){U[i][k]=a[i][k];}}if(k<nrt){e[k]=0;for(i=k+1;i<n;i++){e[k]=hypotenuse(e[k],e[i]);}if(e[k]!==0){if(e[k+1]<0){e[k]=0-e[k];}for(i=k+1;i<n;i++){e[i]/=e[k];}e[k+1]+=1;}e[k]=-e[k];if(k+1<m&&e[k]!==0){for(i=k+1;i<m;i++){work[i]=0;}for(j=k+1;j<n;j++){for(i=k+1;i<m;i++){work[i]+=e[j]*a[i][j];}}for(j=k+1;j<n;j++){t=-e[j]/e[k+1];for(i=k+1;i<m;i++){a[i][j]+=t*work[i];}}}if(wantv){for(i=k+1;i<n;i++){V[i][k]=e[i];}}}}p=Math.min(n,m+1);if(nct<n){s[nct]=a[nct][nct];}if(m<p){s[p-1]=0;}if(nrt+1<p){e[nrt]=a[nrt][p-1];}e[p-1]=0;if(wantu){for(j=nct;j<nu;j++){for(i=0;i<m;i++){U[i][j]=0;}U[j][j]=1;}for(k=nct-1;k>=0;k--){if(s[k]!==0){for(j=k+1;j<nu;j++){t=0;for(i=k;i<m;i++){t+=U[i][k]*U[i][j];}t=-t/U[k][k];for(i=k;i<m;i++){U[i][j]+=t*U[i][k];}}for(i=k;i<m;i++){U[i][k]=-U[i][k];}U[k][k]=1+U[k][k];for(i=0;i<k-1;i++){U[i][k]=0;}}else{for(i=0;i<m;i++){U[i][k]=0;}U[k][k]=1;}}}if(wantv){for(k=n-1;k>=0;k--){if(k<nrt&&e[k]!==0){for(j=k+1;j<n;j++){t=0;for(i=k+1;i<n;i++){t+=V[i][k]*V[i][j];}t=-t/V[k+1][k];for(i=k+1;i<n;i++){V[i][j]+=t*V[i][k];}}}for(i=0;i<n;i++){V[i][k]=0;}V[k][k]=1;}}var pp=p-1;var iter=0;var eps=Number.EPSILON;while(p>0){for(k=p-2;k>=-1;k--){if(k===-1){break;}if(Math.abs(e[k])<=eps*(Math.abs(s[k])+Math.abs(s[k+1]))){e[k]=0;break;}}if(k===p-2){kase=4;}else{for(ks=p-1;ks>=k;ks--){if(ks===k){break;}t=(ks!==p?Math.abs(e[ks]):0)+(ks!==k+1?Math.abs(e[ks-1]):0);if(Math.abs(s[ks])<=eps*t){s[ks]=0;break;}}if(ks===k){kase=3;}else if(ks===p-1){kase=1;}else{kase=2;k=ks;}}k++;switch(kase){case 1:{f=e[p-2];e[p-2]=0;for(j=p-2;j>=k;j--){t=hypotenuse(s[j],f);cs=s[j]/t;sn=f/t;s[j]=t;if(j!==k){f=-sn*e[j-1];e[j-1]=cs*e[j-1];}if(wantv){for(i=0;i<n;i++){t=cs*V[i][j]+sn*V[i][p-1];V[i][p-1]=-sn*V[i][j]+cs*V[i][p-1];V[i][j]=t;}}}break;}case 2:{f=e[k-1];e[k-1]=0;for(j=k;j<p;j++){t=hypotenuse(s[j],f);cs=s[j]/t;sn=f/t;s[j]=t;f=-sn*e[j];e[j]=cs*e[j];if(wantu){for(i=0;i<m;i++){t=cs*U[i][j]+sn*U[i][k-1];U[i][k-1]=-sn*U[i][j]+cs*U[i][k-1];U[i][j]=t;}}}break;}case 3:{scale=Math.max(Math.abs(s[p-1]),Math.abs(s[p-2]),Math.abs(e[p-2]),Math.abs(s[k]),Math.abs(e[k]));sp=s[p-1]/scale;spm1=s[p-2]/scale;epm1=e[p-2]/scale;sk=s[k]/scale;ek=e[k]/scale;b=((spm1+sp)*(spm1-sp)+epm1*epm1)/2;c=sp*epm1*(sp*epm1);shift=0;if(b!==0||c!==0){shift=Math.sqrt(b*b+c);if(b<0){shift=-shift;}shift=c/(b+shift);}f=(sk+sp)*(sk-sp)+shift;g=sk*ek;for(j=k;j<p-1;j++){t=hypotenuse(f,g);cs=f/t;sn=g/t;if(j!==k){e[j-1]=t;}f=cs*s[j]+sn*e[j];e[j]=cs*e[j]-sn*s[j];g=sn*s[j+1];s[j+1]=cs*s[j+1];if(wantv){for(i=0;i<n;i++){t=cs*V[i][j]+sn*V[i][j+1];V[i][j+1]=-sn*V[i][j]+cs*V[i][j+1];V[i][j]=t;}}t=hypotenuse(f,g);cs=f/t;sn=g/t;s[j]=t;f=cs*e[j]+sn*s[j+1];s[j+1]=-sn*e[j]+cs*s[j+1];g=sn*e[j+1];e[j+1]=cs*e[j+1];if(wantu&&j<m-1){for(i=0;i<m;i++){t=cs*U[i][j]+sn*U[i][j+1];U[i][j+1]=-sn*U[i][j]+cs*U[i][j+1];U[i][j]=t;}}}e[p-2]=f;iter=iter+1;break;}case 4:{if(s[k]<=0){s[k]=s[k]<0?-s[k]:0;if(wantv){for(i=0;i<=pp;i++){V[i][k]=-V[i][k];}}}while(k<pp){if(s[k]>=s[k+1]){break;}t=s[k];s[k]=s[k+1];s[k+1]=t;if(wantv&&k<n-1){for(i=0;i<n;i++){t=V[i][k+1];V[i][k+1]=V[i][k];V[i][k]=t;}}if(wantu&&k<m-1){for(i=0;i<m;i++){t=U[i][k+1];U[i][k+1]=U[i][k];U[i][k]=t;}}k++;}iter=0;p--;break;}// no default
}}if(swapped){var tmp=V;V=U;U=tmp;}this.m=m;this.n=n;this.s=s;this.U=U;this.V=V;}/**
     * Solve a problem of least square (Ax=b) by using the SVD. Useful when A is singular. When A is not singular, it would be better to use qr.solve(value).
     * Example : We search to approximate x, with A matrix shape m*n, x vector size n, b vector size m (m > n). We will use :
     * var svd = SingularValueDecomposition(A);
     * var x = svd.solve(b);
     * @param {Matrix} value - Matrix 1D which is the vector b (in the equation Ax = b)
     * @return {Matrix} - The vector x
     */_createClass4(SingularValueDecomposition$$1,[{key:"solve",value:function solve(value){var Y=value;var e=this.threshold;var scols=this.s.length;var Ls=Matrix.zeros(scols,scols);var i;for(i=0;i<scols;i++){if(Math.abs(this.s[i])<=e){Ls[i][i]=0;}else{Ls[i][i]=1/this.s[i];}}var U=this.U;var V=this.rightSingularVectors;var VL=V.mmul(Ls);var vrows=V.rows;var urows=U.length;var VLU=Matrix.zeros(vrows,urows);var j,k,sum;for(i=0;i<vrows;i++){for(j=0;j<urows;j++){sum=0;for(k=0;k<scols;k++){sum+=VL[i][k]*U[j][k];}VLU[i][j]=sum;}}return VLU.mmul(Y);}/**
     *
     * @param {Array<number>} value
     * @return {Matrix}
     */},{key:"solveForDiagonal",value:function solveForDiagonal(value){return this.solve(Matrix.diag(value));}/**
     * Get the inverse of the matrix. We compute the inverse of a matrix using SVD when this matrix is singular or ill-conditioned. Example :
     * var svd = SingularValueDecomposition(A);
     * var inverseA = svd.inverse();
     * @return {Matrix} - The approximation of the inverse of the matrix
     */},{key:"inverse",value:function inverse(){var V=this.V;var e=this.threshold;var vrows=V.length;var vcols=V[0].length;var X=new Matrix(vrows,this.s.length);var i,j;for(i=0;i<vrows;i++){for(j=0;j<vcols;j++){if(Math.abs(this.s[j])>e){X[i][j]=V[i][j]/this.s[j];}else{X[i][j]=0;}}}var U=this.U;var urows=U.length;var ucols=U[0].length;var Y=new Matrix(vrows,urows);var k,sum;for(i=0;i<vrows;i++){for(j=0;j<urows;j++){sum=0;for(k=0;k<ucols;k++){sum+=X[i][k]*U[j][k];}Y[i][j]=sum;}}return Y;}/**
     *
     * @return {number}
     */},{key:"condition",get:function get(){return this.s[0]/this.s[Math.min(this.m,this.n)-1];}/**
     *
     * @return {number}
     */},{key:"norm2",get:function get(){return this.s[0];}/**
     *
     * @return {number}
     */},{key:"rank",get:function get(){var tol=Math.max(this.m,this.n)*this.s[0]*Number.EPSILON;var r=0;var s=this.s;for(var i=0,ii=s.length;i<ii;i++){if(s[i]>tol){r++;}}return r;}/**
     *
     * @return {Array<number>}
     */},{key:"diagonal",get:function get(){return this.s;}/**
     *
     * @return {number}
     */},{key:"threshold",get:function get(){return Number.EPSILON/2*Math.max(this.m,this.n)*this.s[0];}/**
     *
     * @return {Matrix}
     */},{key:"leftSingularVectors",get:function get(){if(!Matrix.isMatrix(this.U)){this.U=new Matrix(this.U);}return this.U;}/**
     *
     * @return {Matrix}
     */},{key:"rightSingularVectors",get:function get(){if(!Matrix.isMatrix(this.V)){this.V=new Matrix(this.V);}return this.V;}/**
     *
     * @return {Matrix}
     */},{key:"diagonalMatrix",get:function get(){return Matrix.diag(this.s);}}]);return SingularValueDecomposition$$1;}();/**
 * @private
 * Check that a row index is not out of bounds
 * @param {Matrix} matrix
 * @param {number} index
 * @param {boolean} [outer]
 */function checkRowIndex(matrix,index,outer){var max=outer?matrix.rows:matrix.rows-1;if(index<0||index>max){throw new RangeError('Row index out of range');}}/**
 * @private
 * Check that a column index is not out of bounds
 * @param {Matrix} matrix
 * @param {number} index
 * @param {boolean} [outer]
 */function checkColumnIndex(matrix,index,outer){var max=outer?matrix.columns:matrix.columns-1;if(index<0||index>max){throw new RangeError('Column index out of range');}}/**
 * @private
 * Check that the provided vector is an array with the right length
 * @param {Matrix} matrix
 * @param {Array|Matrix} vector
 * @return {Array}
 * @throws {RangeError}
 */function checkRowVector(matrix,vector){if(vector.to1DArray){vector=vector.to1DArray();}if(vector.length!==matrix.columns){throw new RangeError('vector size must be the same as the number of columns');}return vector;}/**
 * @private
 * Check that the provided vector is an array with the right length
 * @param {Matrix} matrix
 * @param {Array|Matrix} vector
 * @return {Array}
 * @throws {RangeError}
 */function checkColumnVector(matrix,vector){if(vector.to1DArray){vector=vector.to1DArray();}if(vector.length!==matrix.rows){throw new RangeError('vector size must be the same as the number of rows');}return vector;}function checkIndices(matrix,rowIndices,columnIndices){return{row:checkRowIndices(matrix,rowIndices),column:checkColumnIndices(matrix,columnIndices)};}function checkRowIndices(matrix,rowIndices){if((typeof rowIndices==="undefined"?"undefined":_typeof4(rowIndices))!=='object'){throw new TypeError('unexpected type for row indices');}var rowOut=rowIndices.some(function(r){return r<0||r>=matrix.rows;});if(rowOut){throw new RangeError('row indices are out of range');}if(!Array.isArray(rowIndices))rowIndices=Array.from(rowIndices);return rowIndices;}function checkColumnIndices(matrix,columnIndices){if((typeof columnIndices==="undefined"?"undefined":_typeof4(columnIndices))!=='object'){throw new TypeError('unexpected type for column indices');}var columnOut=columnIndices.some(function(c){return c<0||c>=matrix.columns;});if(columnOut){throw new RangeError('column indices are out of range');}if(!Array.isArray(columnIndices))columnIndices=Array.from(columnIndices);return columnIndices;}function checkRange(matrix,startRow,endRow,startColumn,endColumn){if(arguments.length!==5)throw new TypeError('Invalid argument type');var notAllNumbers=Array.from(arguments).slice(1).some(function(arg){return typeof arg!=='number';});if(notAllNumbers)throw new TypeError('Invalid argument type');if(startRow>endRow||startColumn>endColumn||startRow<0||startRow>=matrix.rows||endRow<0||endRow>=matrix.rows||startColumn<0||startColumn>=matrix.columns||endColumn<0||endColumn>=matrix.columns){throw new RangeError('Submatrix indices are out of range');}}function sumByRow(matrix){var sum=Matrix.zeros(matrix.rows,1);for(var i=0;i<matrix.rows;++i){for(var j=0;j<matrix.columns;++j){sum.set(i,0,sum.get(i,0)+matrix.get(i,j));}}return sum;}function sumByColumn(matrix){var sum=Matrix.zeros(1,matrix.columns);for(var i=0;i<matrix.rows;++i){for(var j=0;j<matrix.columns;++j){sum.set(0,j,sum.get(0,j)+matrix.get(i,j));}}return sum;}function sumAll(matrix){var v=0;for(var i=0;i<matrix.rows;i++){for(var j=0;j<matrix.columns;j++){v+=matrix.get(i,j);}}return v;}var BaseView=function(_AbstractMatrix){_inherits(BaseView,_AbstractMatrix);function BaseView(matrix,rows,columns){_classCallCheck4(this,BaseView);var _this3=_possibleConstructorReturn(this,(BaseView.__proto__||Object.getPrototypeOf(BaseView)).call(this));_this3.matrix=matrix;_this3.rows=rows;_this3.columns=columns;return _this3;}_createClass4(BaseView,null,[{key:Symbol.species,get:function get(){return Matrix;}}]);return BaseView;}(AbstractMatrix());var MatrixTransposeView=function(_BaseView){_inherits(MatrixTransposeView,_BaseView);function MatrixTransposeView(matrix){_classCallCheck4(this,MatrixTransposeView);return _possibleConstructorReturn(this,(MatrixTransposeView.__proto__||Object.getPrototypeOf(MatrixTransposeView)).call(this,matrix,matrix.columns,matrix.rows));}_createClass4(MatrixTransposeView,[{key:"set",value:function set(rowIndex,columnIndex,value){this.matrix.set(columnIndex,rowIndex,value);return this;}},{key:"get",value:function get(rowIndex,columnIndex){return this.matrix.get(columnIndex,rowIndex);}}]);return MatrixTransposeView;}(BaseView);var MatrixRowView=function(_BaseView2){_inherits(MatrixRowView,_BaseView2);function MatrixRowView(matrix,row){_classCallCheck4(this,MatrixRowView);var _this5=_possibleConstructorReturn(this,(MatrixRowView.__proto__||Object.getPrototypeOf(MatrixRowView)).call(this,matrix,1,matrix.columns));_this5.row=row;return _this5;}_createClass4(MatrixRowView,[{key:"set",value:function set(rowIndex,columnIndex,value){this.matrix.set(this.row,columnIndex,value);return this;}},{key:"get",value:function get(rowIndex,columnIndex){return this.matrix.get(this.row,columnIndex);}}]);return MatrixRowView;}(BaseView);var MatrixSubView=function(_BaseView3){_inherits(MatrixSubView,_BaseView3);function MatrixSubView(matrix,startRow,endRow,startColumn,endColumn){_classCallCheck4(this,MatrixSubView);checkRange(matrix,startRow,endRow,startColumn,endColumn);var _this6=_possibleConstructorReturn(this,(MatrixSubView.__proto__||Object.getPrototypeOf(MatrixSubView)).call(this,matrix,endRow-startRow+1,endColumn-startColumn+1));_this6.startRow=startRow;_this6.startColumn=startColumn;return _this6;}_createClass4(MatrixSubView,[{key:"set",value:function set(rowIndex,columnIndex,value){this.matrix.set(this.startRow+rowIndex,this.startColumn+columnIndex,value);return this;}},{key:"get",value:function get(rowIndex,columnIndex){return this.matrix.get(this.startRow+rowIndex,this.startColumn+columnIndex);}}]);return MatrixSubView;}(BaseView);var MatrixSelectionView=function(_BaseView4){_inherits(MatrixSelectionView,_BaseView4);function MatrixSelectionView(matrix,rowIndices,columnIndices){_classCallCheck4(this,MatrixSelectionView);var indices=checkIndices(matrix,rowIndices,columnIndices);var _this7=_possibleConstructorReturn(this,(MatrixSelectionView.__proto__||Object.getPrototypeOf(MatrixSelectionView)).call(this,matrix,indices.row.length,indices.column.length));_this7.rowIndices=indices.row;_this7.columnIndices=indices.column;return _this7;}_createClass4(MatrixSelectionView,[{key:"set",value:function set(rowIndex,columnIndex,value){this.matrix.set(this.rowIndices[rowIndex],this.columnIndices[columnIndex],value);return this;}},{key:"get",value:function get(rowIndex,columnIndex){return this.matrix.get(this.rowIndices[rowIndex],this.columnIndices[columnIndex]);}}]);return MatrixSelectionView;}(BaseView);var MatrixRowSelectionView=function(_BaseView5){_inherits(MatrixRowSelectionView,_BaseView5);function MatrixRowSelectionView(matrix,rowIndices){_classCallCheck4(this,MatrixRowSelectionView);rowIndices=checkRowIndices(matrix,rowIndices);var _this8=_possibleConstructorReturn(this,(MatrixRowSelectionView.__proto__||Object.getPrototypeOf(MatrixRowSelectionView)).call(this,matrix,rowIndices.length,matrix.columns));_this8.rowIndices=rowIndices;return _this8;}_createClass4(MatrixRowSelectionView,[{key:"set",value:function set(rowIndex,columnIndex,value){this.matrix.set(this.rowIndices[rowIndex],columnIndex,value);return this;}},{key:"get",value:function get(rowIndex,columnIndex){return this.matrix.get(this.rowIndices[rowIndex],columnIndex);}}]);return MatrixRowSelectionView;}(BaseView);var MatrixColumnSelectionView=function(_BaseView6){_inherits(MatrixColumnSelectionView,_BaseView6);function MatrixColumnSelectionView(matrix,columnIndices){_classCallCheck4(this,MatrixColumnSelectionView);columnIndices=checkColumnIndices(matrix,columnIndices);var _this9=_possibleConstructorReturn(this,(MatrixColumnSelectionView.__proto__||Object.getPrototypeOf(MatrixColumnSelectionView)).call(this,matrix,matrix.rows,columnIndices.length));_this9.columnIndices=columnIndices;return _this9;}_createClass4(MatrixColumnSelectionView,[{key:"set",value:function set(rowIndex,columnIndex,value){this.matrix.set(rowIndex,this.columnIndices[columnIndex],value);return this;}},{key:"get",value:function get(rowIndex,columnIndex){return this.matrix.get(rowIndex,this.columnIndices[columnIndex]);}}]);return MatrixColumnSelectionView;}(BaseView);var MatrixColumnView=function(_BaseView7){_inherits(MatrixColumnView,_BaseView7);function MatrixColumnView(matrix,column){_classCallCheck4(this,MatrixColumnView);var _this10=_possibleConstructorReturn(this,(MatrixColumnView.__proto__||Object.getPrototypeOf(MatrixColumnView)).call(this,matrix,matrix.rows,1));_this10.column=column;return _this10;}_createClass4(MatrixColumnView,[{key:"set",value:function set(rowIndex,columnIndex,value){this.matrix.set(rowIndex,this.column,value);return this;}},{key:"get",value:function get(rowIndex){return this.matrix.get(rowIndex,this.column);}}]);return MatrixColumnView;}(BaseView);var MatrixFlipRowView=function(_BaseView8){_inherits(MatrixFlipRowView,_BaseView8);function MatrixFlipRowView(matrix){_classCallCheck4(this,MatrixFlipRowView);return _possibleConstructorReturn(this,(MatrixFlipRowView.__proto__||Object.getPrototypeOf(MatrixFlipRowView)).call(this,matrix,matrix.rows,matrix.columns));}_createClass4(MatrixFlipRowView,[{key:"set",value:function set(rowIndex,columnIndex,value){this.matrix.set(this.rows-rowIndex-1,columnIndex,value);return this;}},{key:"get",value:function get(rowIndex,columnIndex){return this.matrix.get(this.rows-rowIndex-1,columnIndex);}}]);return MatrixFlipRowView;}(BaseView);var MatrixFlipColumnView=function(_BaseView9){_inherits(MatrixFlipColumnView,_BaseView9);function MatrixFlipColumnView(matrix){_classCallCheck4(this,MatrixFlipColumnView);return _possibleConstructorReturn(this,(MatrixFlipColumnView.__proto__||Object.getPrototypeOf(MatrixFlipColumnView)).call(this,matrix,matrix.rows,matrix.columns));}_createClass4(MatrixFlipColumnView,[{key:"set",value:function set(rowIndex,columnIndex,value){this.matrix.set(rowIndex,this.columns-columnIndex-1,value);return this;}},{key:"get",value:function get(rowIndex,columnIndex){return this.matrix.get(rowIndex,this.columns-columnIndex-1);}}]);return MatrixFlipColumnView;}(BaseView);function AbstractMatrix(superCtor){if(superCtor===undefined)superCtor=Object;/**
     * Real matrix
     * @class Matrix
     * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,
     * 2D array containing the data or Matrix instance to clone
     * @param {number} [nColumns] - Number of columns of the new matrix
     */var Matrix=function(_superCtor){_inherits(Matrix,_superCtor);function Matrix(){_classCallCheck4(this,Matrix);return _possibleConstructorReturn(this,(Matrix.__proto__||Object.getPrototypeOf(Matrix)).apply(this,arguments));}_createClass4(Matrix,[{key:"apply",/**
         * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.
         * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)
         * @return {Matrix} this
         */value:function apply(callback){if(typeof callback!=='function'){throw new TypeError('callback must be a function');}var ii=this.rows;var jj=this.columns;for(var i=0;i<ii;i++){for(var j=0;j<jj;j++){callback.call(this,i,j);}}return this;}/**
         * Returns a new 1D array filled row by row with the matrix values
         * @return {Array}
         */},{key:"to1DArray",value:function to1DArray(){var array=new Array(this.size);for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){array[i*this.columns+j]=this.get(i,j);}}return array;}/**
         * Returns a 2D array containing a copy of the data
         * @return {Array}
         */},{key:"to2DArray",value:function to2DArray(){var copy=new Array(this.rows);for(var i=0;i<this.rows;i++){copy[i]=new Array(this.columns);for(var j=0;j<this.columns;j++){copy[i][j]=this.get(i,j);}}return copy;}/**
         * @return {boolean} true if the matrix has one row
         */},{key:"isRowVector",value:function isRowVector(){return this.rows===1;}/**
         * @return {boolean} true if the matrix has one column
         */},{key:"isColumnVector",value:function isColumnVector(){return this.columns===1;}/**
         * @return {boolean} true if the matrix has one row or one column
         */},{key:"isVector",value:function isVector(){return this.rows===1||this.columns===1;}/**
         * @return {boolean} true if the matrix has the same number of rows and columns
         */},{key:"isSquare",value:function isSquare(){return this.rows===this.columns;}/**
         * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal
         */},{key:"isSymmetric",value:function isSymmetric(){if(this.isSquare()){for(var i=0;i<this.rows;i++){for(var j=0;j<=i;j++){if(this.get(i,j)!==this.get(j,i)){return false;}}}return true;}return false;}/**
         * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1
         * @abstract
         * @param {number} rowIndex - Index of the row
         * @param {number} columnIndex - Index of the column
         * @param {number} value - The new value for the element
         * @return {Matrix} this
         */},{key:"set",value:function set(rowIndex,columnIndex,value){// eslint-disable-line no-unused-vars
throw new Error('set method is unimplemented');}/**
         * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]
         * @abstract
         * @param {number} rowIndex - Index of the row
         * @param {number} columnIndex - Index of the column
         * @return {number}
         */},{key:"get",value:function get(rowIndex,columnIndex){// eslint-disable-line no-unused-vars
throw new Error('get method is unimplemented');}/**
         * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of
         * rows of the matrix, and colRep times the number of columns of the matrix
         * @param {number} rowRep - Number of times the rows should be repeated
         * @param {number} colRep - Number of times the columns should be re
         * @return {Matrix}
         * @example
         * var matrix = new Matrix([[1,2]]);
         * matrix.repeat(2); // [[1,2],[1,2]]
         */},{key:"repeat",value:function repeat(rowRep,colRep){rowRep=rowRep||1;colRep=colRep||1;var matrix=new this.constructor[Symbol.species](this.rows*rowRep,this.columns*colRep);for(var i=0;i<rowRep;i++){for(var j=0;j<colRep;j++){matrix.setSubMatrix(this,this.rows*i,this.columns*j);}}return matrix;}/**
         * Fills the matrix with a given value. All elements will be set to this value.
         * @param {number} value - New value
         * @return {Matrix} this
         */},{key:"fill",value:function fill(value){for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){this.set(i,j,value);}}return this;}/**
         * Negates the matrix. All elements will be multiplied by (-1)
         * @return {Matrix} this
         */},{key:"neg",value:function neg(){return this.mulS(-1);}/**
         * Returns a new array from the given row index
         * @param {number} index - Row index
         * @return {Array}
         */},{key:"getRow",value:function getRow(index){checkRowIndex(this,index);var row=new Array(this.columns);for(var i=0;i<this.columns;i++){row[i]=this.get(index,i);}return row;}/**
         * Returns a new row vector from the given row index
         * @param {number} index - Row index
         * @return {Matrix}
         */},{key:"getRowVector",value:function getRowVector(index){return this.constructor.rowVector(this.getRow(index));}/**
         * Sets a row at the given index
         * @param {number} index - Row index
         * @param {Array|Matrix} array - Array or vector
         * @return {Matrix} this
         */},{key:"setRow",value:function setRow(index,array){checkRowIndex(this,index);array=checkRowVector(this,array);for(var i=0;i<this.columns;i++){this.set(index,i,array[i]);}return this;}/**
         * Swaps two rows
         * @param {number} row1 - First row index
         * @param {number} row2 - Second row index
         * @return {Matrix} this
         */},{key:"swapRows",value:function swapRows(row1,row2){checkRowIndex(this,row1);checkRowIndex(this,row2);for(var i=0;i<this.columns;i++){var temp=this.get(row1,i);this.set(row1,i,this.get(row2,i));this.set(row2,i,temp);}return this;}/**
         * Returns a new array from the given column index
         * @param {number} index - Column index
         * @return {Array}
         */},{key:"getColumn",value:function getColumn(index){checkColumnIndex(this,index);var column=new Array(this.rows);for(var i=0;i<this.rows;i++){column[i]=this.get(i,index);}return column;}/**
         * Returns a new column vector from the given column index
         * @param {number} index - Column index
         * @return {Matrix}
         */},{key:"getColumnVector",value:function getColumnVector(index){return this.constructor.columnVector(this.getColumn(index));}/**
         * Sets a column at the given index
         * @param {number} index - Column index
         * @param {Array|Matrix} array - Array or vector
         * @return {Matrix} this
         */},{key:"setColumn",value:function setColumn(index,array){checkColumnIndex(this,index);array=checkColumnVector(this,array);for(var i=0;i<this.rows;i++){this.set(i,index,array[i]);}return this;}/**
         * Swaps two columns
         * @param {number} column1 - First column index
         * @param {number} column2 - Second column index
         * @return {Matrix} this
         */},{key:"swapColumns",value:function swapColumns(column1,column2){checkColumnIndex(this,column1);checkColumnIndex(this,column2);for(var i=0;i<this.rows;i++){var temp=this.get(i,column1);this.set(i,column1,this.get(i,column2));this.set(i,column2,temp);}return this;}/**
         * Adds the values of a vector to each row
         * @param {Array|Matrix} vector - Array or vector
         * @return {Matrix} this
         */},{key:"addRowVector",value:function addRowVector(vector){vector=checkRowVector(this,vector);for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){this.set(i,j,this.get(i,j)+vector[j]);}}return this;}/**
         * Subtracts the values of a vector from each row
         * @param {Array|Matrix} vector - Array or vector
         * @return {Matrix} this
         */},{key:"subRowVector",value:function subRowVector(vector){vector=checkRowVector(this,vector);for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){this.set(i,j,this.get(i,j)-vector[j]);}}return this;}/**
         * Multiplies the values of a vector with each row
         * @param {Array|Matrix} vector - Array or vector
         * @return {Matrix} this
         */},{key:"mulRowVector",value:function mulRowVector(vector){vector=checkRowVector(this,vector);for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){this.set(i,j,this.get(i,j)*vector[j]);}}return this;}/**
         * Divides the values of each row by those of a vector
         * @param {Array|Matrix} vector - Array or vector
         * @return {Matrix} this
         */},{key:"divRowVector",value:function divRowVector(vector){vector=checkRowVector(this,vector);for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){this.set(i,j,this.get(i,j)/vector[j]);}}return this;}/**
         * Adds the values of a vector to each column
         * @param {Array|Matrix} vector - Array or vector
         * @return {Matrix} this
         */},{key:"addColumnVector",value:function addColumnVector(vector){vector=checkColumnVector(this,vector);for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){this.set(i,j,this.get(i,j)+vector[i]);}}return this;}/**
         * Subtracts the values of a vector from each column
         * @param {Array|Matrix} vector - Array or vector
         * @return {Matrix} this
         */},{key:"subColumnVector",value:function subColumnVector(vector){vector=checkColumnVector(this,vector);for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){this.set(i,j,this.get(i,j)-vector[i]);}}return this;}/**
         * Multiplies the values of a vector with each column
         * @param {Array|Matrix} vector - Array or vector
         * @return {Matrix} this
         */},{key:"mulColumnVector",value:function mulColumnVector(vector){vector=checkColumnVector(this,vector);for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){this.set(i,j,this.get(i,j)*vector[i]);}}return this;}/**
         * Divides the values of each column by those of a vector
         * @param {Array|Matrix} vector - Array or vector
         * @return {Matrix} this
         */},{key:"divColumnVector",value:function divColumnVector(vector){vector=checkColumnVector(this,vector);for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){this.set(i,j,this.get(i,j)/vector[i]);}}return this;}/**
         * Multiplies the values of a row with a scalar
         * @param {number} index - Row index
         * @param {number} value
         * @return {Matrix} this
         */},{key:"mulRow",value:function mulRow(index,value){checkRowIndex(this,index);for(var i=0;i<this.columns;i++){this.set(index,i,this.get(index,i)*value);}return this;}/**
         * Multiplies the values of a column with a scalar
         * @param {number} index - Column index
         * @param {number} value
         * @return {Matrix} this
         */},{key:"mulColumn",value:function mulColumn(index,value){checkColumnIndex(this,index);for(var i=0;i<this.rows;i++){this.set(i,index,this.get(i,index)*value);}return this;}/**
         * Returns the maximum value of the matrix
         * @return {number}
         */},{key:"max",value:function max(){var v=this.get(0,0);for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){if(this.get(i,j)>v){v=this.get(i,j);}}}return v;}/**
         * Returns the index of the maximum value
         * @return {Array}
         */},{key:"maxIndex",value:function maxIndex(){var v=this.get(0,0);var idx=[0,0];for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){if(this.get(i,j)>v){v=this.get(i,j);idx[0]=i;idx[1]=j;}}}return idx;}/**
         * Returns the minimum value of the matrix
         * @return {number}
         */},{key:"min",value:function min(){var v=this.get(0,0);for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){if(this.get(i,j)<v){v=this.get(i,j);}}}return v;}/**
         * Returns the index of the minimum value
         * @return {Array}
         */},{key:"minIndex",value:function minIndex(){var v=this.get(0,0);var idx=[0,0];for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){if(this.get(i,j)<v){v=this.get(i,j);idx[0]=i;idx[1]=j;}}}return idx;}/**
         * Returns the maximum value of one row
         * @param {number} row - Row index
         * @return {number}
         */},{key:"maxRow",value:function maxRow(row){checkRowIndex(this,row);var v=this.get(row,0);for(var i=1;i<this.columns;i++){if(this.get(row,i)>v){v=this.get(row,i);}}return v;}/**
         * Returns the index of the maximum value of one row
         * @param {number} row - Row index
         * @return {Array}
         */},{key:"maxRowIndex",value:function maxRowIndex(row){checkRowIndex(this,row);var v=this.get(row,0);var idx=[row,0];for(var i=1;i<this.columns;i++){if(this.get(row,i)>v){v=this.get(row,i);idx[1]=i;}}return idx;}/**
         * Returns the minimum value of one row
         * @param {number} row - Row index
         * @return {number}
         */},{key:"minRow",value:function minRow(row){checkRowIndex(this,row);var v=this.get(row,0);for(var i=1;i<this.columns;i++){if(this.get(row,i)<v){v=this.get(row,i);}}return v;}/**
         * Returns the index of the maximum value of one row
         * @param {number} row - Row index
         * @return {Array}
         */},{key:"minRowIndex",value:function minRowIndex(row){checkRowIndex(this,row);var v=this.get(row,0);var idx=[row,0];for(var i=1;i<this.columns;i++){if(this.get(row,i)<v){v=this.get(row,i);idx[1]=i;}}return idx;}/**
         * Returns the maximum value of one column
         * @param {number} column - Column index
         * @return {number}
         */},{key:"maxColumn",value:function maxColumn(column){checkColumnIndex(this,column);var v=this.get(0,column);for(var i=1;i<this.rows;i++){if(this.get(i,column)>v){v=this.get(i,column);}}return v;}/**
         * Returns the index of the maximum value of one column
         * @param {number} column - Column index
         * @return {Array}
         */},{key:"maxColumnIndex",value:function maxColumnIndex(column){checkColumnIndex(this,column);var v=this.get(0,column);var idx=[0,column];for(var i=1;i<this.rows;i++){if(this.get(i,column)>v){v=this.get(i,column);idx[0]=i;}}return idx;}/**
         * Returns the minimum value of one column
         * @param {number} column - Column index
         * @return {number}
         */},{key:"minColumn",value:function minColumn(column){checkColumnIndex(this,column);var v=this.get(0,column);for(var i=1;i<this.rows;i++){if(this.get(i,column)<v){v=this.get(i,column);}}return v;}/**
         * Returns the index of the minimum value of one column
         * @param {number} column - Column index
         * @return {Array}
         */},{key:"minColumnIndex",value:function minColumnIndex(column){checkColumnIndex(this,column);var v=this.get(0,column);var idx=[0,column];for(var i=1;i<this.rows;i++){if(this.get(i,column)<v){v=this.get(i,column);idx[0]=i;}}return idx;}/**
         * Returns an array containing the diagonal values of the matrix
         * @return {Array}
         */},{key:"diag",value:function diag(){var min=Math.min(this.rows,this.columns);var diag=new Array(min);for(var i=0;i<min;i++){diag[i]=this.get(i,i);}return diag;}/**
         * Returns the sum by the argument given, if no argument given,
         * it returns the sum of all elements of the matrix.
         * @param {string} by - sum by 'row' or 'column'.
         * @return {Matrix|number}
         */},{key:"sum",value:function sum(by){switch(by){case'row':return sumByRow(this);case'column':return sumByColumn(this);default:return sumAll(this);}}/**
         * Returns the mean of all elements of the matrix
         * @return {number}
         */},{key:"mean",value:function mean(){return this.sum()/this.size;}/**
         * Returns the product of all elements of the matrix
         * @return {number}
         */},{key:"prod",value:function prod(){var prod=1;for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){prod*=this.get(i,j);}}return prod;}/**
         * Returns the norm of a matrix.
         * @param {string} type - "frobenius" (default) or "max" return resp. the Frobenius norm and the max norm.
         * @return {number}
         */},{key:"norm",value:function norm(){var type=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'frobenius';var result=0;if(type==='max'){return this.max();}else if(type==='frobenius'){for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){result=result+this.get(i,j)*this.get(i,j);}}return Math.sqrt(result);}else{throw new RangeError("unknown norm type: "+type);}}/**
         * Computes the cumulative sum of the matrix elements (in place, row by row)
         * @return {Matrix} this
         */},{key:"cumulativeSum",value:function cumulativeSum(){var sum=0;for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){sum+=this.get(i,j);this.set(i,j,sum);}}return this;}/**
         * Computes the dot (scalar) product between the matrix and another
         * @param {Matrix} vector2 vector
         * @return {number}
         */},{key:"dot",value:function dot(vector2){if(Matrix.isMatrix(vector2))vector2=vector2.to1DArray();var vector1=this.to1DArray();if(vector1.length!==vector2.length){throw new RangeError('vectors do not have the same size');}var dot=0;for(var i=0;i<vector1.length;i++){dot+=vector1[i]*vector2[i];}return dot;}/**
         * Returns the matrix product between this and other
         * @param {Matrix} other
         * @return {Matrix}
         */},{key:"mmul",value:function mmul(other){other=this.constructor.checkMatrix(other);if(this.columns!==other.rows){// eslint-disable-next-line no-console
console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');}var m=this.rows;var n=this.columns;var p=other.columns;var result=new this.constructor[Symbol.species](m,p);var Bcolj=new Array(n);for(var j=0;j<p;j++){for(var k=0;k<n;k++){Bcolj[k]=other.get(k,j);}for(var i=0;i<m;i++){var s=0;for(k=0;k<n;k++){s+=this.get(i,k)*Bcolj[k];}result.set(i,j,s);}}return result;}},{key:"strassen2x2",value:function strassen2x2(other){var result=new this.constructor[Symbol.species](2,2);var a11=this.get(0,0);var b11=other.get(0,0);var a12=this.get(0,1);var b12=other.get(0,1);var a21=this.get(1,0);var b21=other.get(1,0);var a22=this.get(1,1);var b22=other.get(1,1);// Compute intermediate values.
var m1=(a11+a22)*(b11+b22);var m2=(a21+a22)*b11;var m3=a11*(b12-b22);var m4=a22*(b21-b11);var m5=(a11+a12)*b22;var m6=(a21-a11)*(b11+b12);var m7=(a12-a22)*(b21+b22);// Combine intermediate values into the output.
var c00=m1+m4-m5+m7;var c01=m3+m5;var c10=m2+m4;var c11=m1-m2+m3+m6;result.set(0,0,c00);result.set(0,1,c01);result.set(1,0,c10);result.set(1,1,c11);return result;}},{key:"strassen3x3",value:function strassen3x3(other){var result=new this.constructor[Symbol.species](3,3);var a00=this.get(0,0);var a01=this.get(0,1);var a02=this.get(0,2);var a10=this.get(1,0);var a11=this.get(1,1);var a12=this.get(1,2);var a20=this.get(2,0);var a21=this.get(2,1);var a22=this.get(2,2);var b00=other.get(0,0);var b01=other.get(0,1);var b02=other.get(0,2);var b10=other.get(1,0);var b11=other.get(1,1);var b12=other.get(1,2);var b20=other.get(2,0);var b21=other.get(2,1);var b22=other.get(2,2);var m1=(a00+a01+a02-a10-a11-a21-a22)*b11;var m2=(a00-a10)*(-b01+b11);var m3=a11*(-b00+b01+b10-b11-b12-b20+b22);var m4=(-a00+a10+a11)*(b00-b01+b11);var m5=(a10+a11)*(-b00+b01);var m6=a00*b00;var m7=(-a00+a20+a21)*(b00-b02+b12);var m8=(-a00+a20)*(b02-b12);var m9=(a20+a21)*(-b00+b02);var m10=(a00+a01+a02-a11-a12-a20-a21)*b12;var m11=a21*(-b00+b02+b10-b11-b12-b20+b21);var m12=(-a02+a21+a22)*(b11+b20-b21);var m13=(a02-a22)*(b11-b21);var m14=a02*b20;var m15=(a21+a22)*(-b20+b21);var m16=(-a02+a11+a12)*(b12+b20-b22);var m17=(a02-a12)*(b12-b22);var m18=(a11+a12)*(-b20+b22);var m19=a01*b10;var m20=a12*b21;var m21=a10*b02;var m22=a20*b01;var m23=a22*b22;var c00=m6+m14+m19;var c01=m1+m4+m5+m6+m12+m14+m15;var c02=m6+m7+m9+m10+m14+m16+m18;var c10=m2+m3+m4+m6+m14+m16+m17;var c11=m2+m4+m5+m6+m20;var c12=m14+m16+m17+m18+m21;var c20=m6+m7+m8+m11+m12+m13+m14;var c21=m12+m13+m14+m15+m22;var c22=m6+m7+m8+m9+m23;result.set(0,0,c00);result.set(0,1,c01);result.set(0,2,c02);result.set(1,0,c10);result.set(1,1,c11);result.set(1,2,c12);result.set(2,0,c20);result.set(2,1,c21);result.set(2,2,c22);return result;}/**
         * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.
         * @param {Matrix} y
         * @return {Matrix}
         */},{key:"mmulStrassen",value:function mmulStrassen(y){var x=this.clone();var r1=x.rows;var c1=x.columns;var r2=y.rows;var c2=y.columns;if(c1!==r2){// eslint-disable-next-line no-console
console.warn("Multiplying "+r1+" x "+c1+" and "+r2+" x "+c2+" matrix: dimensions do not match.");}// Put a matrix into the top left of a matrix of zeros.
// `rows` and `cols` are the dimensions of the output matrix.
function embed(mat,rows,cols){var r=mat.rows;var c=mat.columns;if(r===rows&&c===cols){return mat;}else{var resultat=Matrix.zeros(rows,cols);resultat=resultat.setSubMatrix(mat,0,0);return resultat;}}// Make sure both matrices are the same size.
// This is exclusively for simplicity:
// this algorithm can be implemented with matrices of different sizes.
var r=Math.max(r1,r2);var c=Math.max(c1,c2);x=embed(x,r,c);y=embed(y,r,c);// Our recursive multiplication function.
function blockMult(a,b,rows,cols){// For small matrices, resort to naive multiplication.
if(rows<=512||cols<=512){return a.mmul(b);// a is equivalent to this
}// Apply dynamic padding.
if(rows%2===1&&cols%2===1){a=embed(a,rows+1,cols+1);b=embed(b,rows+1,cols+1);}else if(rows%2===1){a=embed(a,rows+1,cols);b=embed(b,rows+1,cols);}else if(cols%2===1){a=embed(a,rows,cols+1);b=embed(b,rows,cols+1);}var halfRows=parseInt(a.rows/2);var halfCols=parseInt(a.columns/2);// Subdivide input matrices.
var a11=a.subMatrix(0,halfRows-1,0,halfCols-1);var b11=b.subMatrix(0,halfRows-1,0,halfCols-1);var a12=a.subMatrix(0,halfRows-1,halfCols,a.columns-1);var b12=b.subMatrix(0,halfRows-1,halfCols,b.columns-1);var a21=a.subMatrix(halfRows,a.rows-1,0,halfCols-1);var b21=b.subMatrix(halfRows,b.rows-1,0,halfCols-1);var a22=a.subMatrix(halfRows,a.rows-1,halfCols,a.columns-1);var b22=b.subMatrix(halfRows,b.rows-1,halfCols,b.columns-1);// Compute intermediate values.
var m1=blockMult(Matrix.add(a11,a22),Matrix.add(b11,b22),halfRows,halfCols);var m2=blockMult(Matrix.add(a21,a22),b11,halfRows,halfCols);var m3=blockMult(a11,Matrix.sub(b12,b22),halfRows,halfCols);var m4=blockMult(a22,Matrix.sub(b21,b11),halfRows,halfCols);var m5=blockMult(Matrix.add(a11,a12),b22,halfRows,halfCols);var m6=blockMult(Matrix.sub(a21,a11),Matrix.add(b11,b12),halfRows,halfCols);var m7=blockMult(Matrix.sub(a12,a22),Matrix.add(b21,b22),halfRows,halfCols);// Combine intermediate values into the output.
var c11=Matrix.add(m1,m4);c11.sub(m5);c11.add(m7);var c12=Matrix.add(m3,m5);var c21=Matrix.add(m2,m4);var c22=Matrix.sub(m1,m2);c22.add(m3);c22.add(m6);//Crop output to the desired size (undo dynamic padding).
var resultat=Matrix.zeros(2*c11.rows,2*c11.columns);resultat=resultat.setSubMatrix(c11,0,0);resultat=resultat.setSubMatrix(c12,c11.rows,0);resultat=resultat.setSubMatrix(c21,0,c11.columns);resultat=resultat.setSubMatrix(c22,c11.rows,c11.columns);return resultat.subMatrix(0,rows-1,0,cols-1);}return blockMult(x,y,r,c);}/**
         * Returns a row-by-row scaled matrix
         * @param {number} [min=0] - Minimum scaled value
         * @param {number} [max=1] - Maximum scaled value
         * @return {Matrix} - The scaled matrix
         */},{key:"scaleRows",value:function scaleRows(min,max){min=min===undefined?0:min;max=max===undefined?1:max;if(min>=max){throw new RangeError('min should be strictly smaller than max');}var newMatrix=this.constructor.empty(this.rows,this.columns);for(var i=0;i<this.rows;i++){var scaled=rescale(this.getRow(i),{min:min,max:max});newMatrix.setRow(i,scaled);}return newMatrix;}/**
         * Returns a new column-by-column scaled matrix
         * @param {number} [min=0] - Minimum scaled value
         * @param {number} [max=1] - Maximum scaled value
         * @return {Matrix} - The new scaled matrix
         * @example
         * var matrix = new Matrix([[1,2],[-1,0]]);
         * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]
         */},{key:"scaleColumns",value:function scaleColumns(min,max){min=min===undefined?0:min;max=max===undefined?1:max;if(min>=max){throw new RangeError('min should be strictly smaller than max');}var newMatrix=this.constructor.empty(this.rows,this.columns);for(var i=0;i<this.columns;i++){var scaled=rescale(this.getColumn(i),{min:min,max:max});newMatrix.setColumn(i,scaled);}return newMatrix;}/**
         * Returns the Kronecker product (also known as tensor product) between this and other
         * See https://en.wikipedia.org/wiki/Kronecker_product
         * @param {Matrix} other
         * @return {Matrix}
         */},{key:"kroneckerProduct",value:function kroneckerProduct(other){other=this.constructor.checkMatrix(other);var m=this.rows;var n=this.columns;var p=other.rows;var q=other.columns;var result=new this.constructor[Symbol.species](m*p,n*q);for(var i=0;i<m;i++){for(var j=0;j<n;j++){for(var k=0;k<p;k++){for(var l=0;l<q;l++){result[p*i+k][q*j+l]=this.get(i,j)*other.get(k,l);}}}}return result;}/**
         * Transposes the matrix and returns a new one containing the result
         * @return {Matrix}
         */},{key:"transpose",value:function transpose(){var result=new this.constructor[Symbol.species](this.columns,this.rows);for(var i=0;i<this.rows;i++){for(var j=0;j<this.columns;j++){result.set(j,i,this.get(i,j));}}return result;}/**
         * Sorts the rows (in place)
         * @param {function} compareFunction - usual Array.prototype.sort comparison function
         * @return {Matrix} this
         */},{key:"sortRows",value:function sortRows(compareFunction){if(compareFunction===undefined)compareFunction=compareNumbers;for(var i=0;i<this.rows;i++){this.setRow(i,this.getRow(i).sort(compareFunction));}return this;}/**
         * Sorts the columns (in place)
         * @param {function} compareFunction - usual Array.prototype.sort comparison function
         * @return {Matrix} this
         */},{key:"sortColumns",value:function sortColumns(compareFunction){if(compareFunction===undefined)compareFunction=compareNumbers;for(var i=0;i<this.columns;i++){this.setColumn(i,this.getColumn(i).sort(compareFunction));}return this;}/**
         * Returns a subset of the matrix
         * @param {number} startRow - First row index
         * @param {number} endRow - Last row index
         * @param {number} startColumn - First column index
         * @param {number} endColumn - Last column index
         * @return {Matrix}
         */},{key:"subMatrix",value:function subMatrix(startRow,endRow,startColumn,endColumn){checkRange(this,startRow,endRow,startColumn,endColumn);var newMatrix=new this.constructor[Symbol.species](endRow-startRow+1,endColumn-startColumn+1);for(var i=startRow;i<=endRow;i++){for(var j=startColumn;j<=endColumn;j++){newMatrix[i-startRow][j-startColumn]=this.get(i,j);}}return newMatrix;}/**
         * Returns a subset of the matrix based on an array of row indices
         * @param {Array} indices - Array containing the row indices
         * @param {number} [startColumn = 0] - First column index
         * @param {number} [endColumn = this.columns-1] - Last column index
         * @return {Matrix}
         */},{key:"subMatrixRow",value:function subMatrixRow(indices,startColumn,endColumn){if(startColumn===undefined)startColumn=0;if(endColumn===undefined)endColumn=this.columns-1;if(startColumn>endColumn||startColumn<0||startColumn>=this.columns||endColumn<0||endColumn>=this.columns){throw new RangeError('Argument out of range');}var newMatrix=new this.constructor[Symbol.species](indices.length,endColumn-startColumn+1);for(var i=0;i<indices.length;i++){for(var j=startColumn;j<=endColumn;j++){if(indices[i]<0||indices[i]>=this.rows){throw new RangeError('Row index out of range: '+indices[i]);}newMatrix.set(i,j-startColumn,this.get(indices[i],j));}}return newMatrix;}/**
         * Returns a subset of the matrix based on an array of column indices
         * @param {Array} indices - Array containing the column indices
         * @param {number} [startRow = 0] - First row index
         * @param {number} [endRow = this.rows-1] - Last row index
         * @return {Matrix}
         */},{key:"subMatrixColumn",value:function subMatrixColumn(indices,startRow,endRow){if(startRow===undefined)startRow=0;if(endRow===undefined)endRow=this.rows-1;if(startRow>endRow||startRow<0||startRow>=this.rows||endRow<0||endRow>=this.rows){throw new RangeError('Argument out of range');}var newMatrix=new this.constructor[Symbol.species](endRow-startRow+1,indices.length);for(var i=0;i<indices.length;i++){for(var j=startRow;j<=endRow;j++){if(indices[i]<0||indices[i]>=this.columns){throw new RangeError('Column index out of range: '+indices[i]);}newMatrix.set(j-startRow,i,this.get(j,indices[i]));}}return newMatrix;}/**
         * Set a part of the matrix to the given sub-matrix
         * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.
         * @param {number} startRow - The index of the first row to set
         * @param {number} startColumn - The index of the first column to set
         * @return {Matrix}
         */},{key:"setSubMatrix",value:function setSubMatrix(matrix,startRow,startColumn){matrix=this.constructor.checkMatrix(matrix);var endRow=startRow+matrix.rows-1;var endColumn=startColumn+matrix.columns-1;checkRange(this,startRow,endRow,startColumn,endColumn);for(var i=0;i<matrix.rows;i++){for(var j=0;j<matrix.columns;j++){this[startRow+i][startColumn+j]=matrix.get(i,j);}}return this;}/**
         * Return a new matrix based on a selection of rows and columns
         * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.
         * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.
         * @return {Matrix} The new matrix
         */},{key:"selection",value:function selection(rowIndices,columnIndices){var indices=checkIndices(this,rowIndices,columnIndices);var newMatrix=new this.constructor[Symbol.species](rowIndices.length,columnIndices.length);for(var i=0;i<indices.row.length;i++){var rowIndex=indices.row[i];for(var j=0;j<indices.column.length;j++){var columnIndex=indices.column[j];newMatrix[i][j]=this.get(rowIndex,columnIndex);}}return newMatrix;}/**
         * Returns the trace of the matrix (sum of the diagonal elements)
         * @return {number}
         */},{key:"trace",value:function trace(){var min=Math.min(this.rows,this.columns);var trace=0;for(var i=0;i<min;i++){trace+=this.get(i,i);}return trace;}/*
         Matrix views
         *//**
         * Returns a view of the transposition of the matrix
         * @return {MatrixTransposeView}
         */},{key:"transposeView",value:function transposeView(){return new MatrixTransposeView(this);}/**
         * Returns a view of the row vector with the given index
         * @param {number} row - row index of the vector
         * @return {MatrixRowView}
         */},{key:"rowView",value:function rowView(row){checkRowIndex(this,row);return new MatrixRowView(this,row);}/**
         * Returns a view of the column vector with the given index
         * @param {number} column - column index of the vector
         * @return {MatrixColumnView}
         */},{key:"columnView",value:function columnView(column){checkColumnIndex(this,column);return new MatrixColumnView(this,column);}/**
         * Returns a view of the matrix flipped in the row axis
         * @return {MatrixFlipRowView}
         */},{key:"flipRowView",value:function flipRowView(){return new MatrixFlipRowView(this);}/**
         * Returns a view of the matrix flipped in the column axis
         * @return {MatrixFlipColumnView}
         */},{key:"flipColumnView",value:function flipColumnView(){return new MatrixFlipColumnView(this);}/**
         * Returns a view of a submatrix giving the index boundaries
         * @param {number} startRow - first row index of the submatrix
         * @param {number} endRow - last row index of the submatrix
         * @param {number} startColumn - first column index of the submatrix
         * @param {number} endColumn - last column index of the submatrix
         * @return {MatrixSubView}
         */},{key:"subMatrixView",value:function subMatrixView(startRow,endRow,startColumn,endColumn){return new MatrixSubView(this,startRow,endRow,startColumn,endColumn);}/**
         * Returns a view of the cross of the row indices and the column indices
         * @example
         * // resulting vector is [[2], [2]]
         * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])
         * @param {Array<number>} rowIndices
         * @param {Array<number>} columnIndices
         * @return {MatrixSelectionView}
         */},{key:"selectionView",value:function selectionView(rowIndices,columnIndices){return new MatrixSelectionView(this,rowIndices,columnIndices);}/**
         * Returns a view of the row indices
         * @example
         * // resulting vector is [[1,2,3], [1,2,3]]
         * var matrix = new Matrix([[1,2,3], [4,5,6]]).rowSelectionView([0, 0])
         * @param {Array<number>} rowIndices
         * @return {MatrixRowSelectionView}
         */},{key:"rowSelectionView",value:function rowSelectionView(rowIndices){return new MatrixRowSelectionView(this,rowIndices);}/**
         * Returns a view of the column indices
         * @example
         * // resulting vector is [[2, 2], [5, 5]]
         * var matrix = new Matrix([[1,2,3], [4,5,6]]).columnSelectionView([1, 1])
         * @param {Array<number>} columnIndices
         * @return {MatrixColumnSelectionView}
         */},{key:"columnSelectionView",value:function columnSelectionView(columnIndices){return new MatrixColumnSelectionView(this,columnIndices);}/**
        * Calculates and returns the determinant of a matrix as a Number
        * @example
        *   new Matrix([[1,2,3], [4,5,6]]).det()
        * @return {number}
        */},{key:"det",value:function det(){if(this.isSquare()){var a,b,c,d;if(this.columns===2){// 2 x 2 matrix
a=this.get(0,0);b=this.get(0,1);c=this.get(1,0);d=this.get(1,1);return a*d-b*c;}else if(this.columns===3){// 3 x 3 matrix
var subMatrix0,subMatrix1,subMatrix2;subMatrix0=this.selectionView([1,2],[1,2]);subMatrix1=this.selectionView([1,2],[0,2]);subMatrix2=this.selectionView([1,2],[0,1]);a=this.get(0,0);b=this.get(0,1);c=this.get(0,2);return a*subMatrix0.det()-b*subMatrix1.det()+c*subMatrix2.det();}else{// general purpose determinant using the LU decomposition
return new LuDecomposition$$1(this).determinant;}}else{throw Error('Determinant can only be calculated for a square matrix.');}}/**
         * Returns inverse of a matrix if it exists or the pseudoinverse
         * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)
         * @return {Matrix} the (pseudo)inverted matrix.
         */},{key:"pseudoInverse",value:function pseudoInverse(threshold){if(threshold===undefined)threshold=Number.EPSILON;var svdSolution=new SingularValueDecomposition$$1(this,{autoTranspose:true});var U=svdSolution.leftSingularVectors;var V=svdSolution.rightSingularVectors;var s=svdSolution.diagonal;for(var i=0;i<s.length;i++){if(Math.abs(s[i])>threshold){s[i]=1.0/s[i];}else{s[i]=0.0;}}// convert list to diagonal
s=this.constructor[Symbol.species].diag(s);return V.mmul(s.mmul(U.transposeView()));}/**
         * Creates an exact and independent copy of the matrix
         * @return {Matrix}
         */},{key:"clone",value:function clone(){var newMatrix=new this.constructor[Symbol.species](this.rows,this.columns);for(var row=0;row<this.rows;row++){for(var column=0;column<this.columns;column++){newMatrix.set(row,column,this.get(row,column));}}return newMatrix;}},{key:"size",/**
         * @prop {number} size - The number of elements in the matrix.
         */get:function get(){return this.rows*this.columns;}}],[{key:"from1DArray",/**
         * Constructs a Matrix with the chosen dimensions from a 1D array
         * @param {number} newRows - Number of rows
         * @param {number} newColumns - Number of columns
         * @param {Array} newData - A 1D array containing data for the matrix
         * @return {Matrix} - The new matrix
         */value:function from1DArray(newRows,newColumns,newData){var length=newRows*newColumns;if(length!==newData.length){throw new RangeError('Data length does not match given dimensions');}var newMatrix=new this(newRows,newColumns);for(var row=0;row<newRows;row++){for(var column=0;column<newColumns;column++){newMatrix.set(row,column,newData[row*newColumns+column]);}}return newMatrix;}/**
         * Creates a row vector, a matrix with only one row.
         * @param {Array} newData - A 1D array containing data for the vector
         * @return {Matrix} - The new matrix
         */},{key:"rowVector",value:function rowVector(newData){var vector=new this(1,newData.length);for(var i=0;i<newData.length;i++){vector.set(0,i,newData[i]);}return vector;}/**
         * Creates a column vector, a matrix with only one column.
         * @param {Array} newData - A 1D array containing data for the vector
         * @return {Matrix} - The new matrix
         */},{key:"columnVector",value:function columnVector(newData){var vector=new this(newData.length,1);for(var i=0;i<newData.length;i++){vector.set(i,0,newData[i]);}return vector;}/**
         * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).
         * @param {number} rows - Number of rows
         * @param {number} columns - Number of columns
         * @return {Matrix} - The new matrix
         */},{key:"empty",value:function empty(rows,columns){return new this(rows,columns);}/**
         * Creates a matrix with the given dimensions. Values will be set to zero.
         * @param {number} rows - Number of rows
         * @param {number} columns - Number of columns
         * @return {Matrix} - The new matrix
         */},{key:"zeros",value:function zeros(rows,columns){return this.empty(rows,columns).fill(0);}/**
         * Creates a matrix with the given dimensions. Values will be set to one.
         * @param {number} rows - Number of rows
         * @param {number} columns - Number of columns
         * @return {Matrix} - The new matrix
         */},{key:"ones",value:function ones(rows,columns){return this.empty(rows,columns).fill(1);}/**
         * Creates a matrix with the given dimensions. Values will be randomly set.
         * @param {number} rows - Number of rows
         * @param {number} columns - Number of columns
         * @param {function} [rng=Math.random] - Random number generator
         * @return {Matrix} The new matrix
         */},{key:"rand",value:function rand(rows,columns,rng){if(rng===undefined)rng=Math.random;var matrix=this.empty(rows,columns);for(var i=0;i<rows;i++){for(var j=0;j<columns;j++){matrix.set(i,j,rng());}}return matrix;}/**
         * Creates a matrix with the given dimensions. Values will be random integers.
         * @param {number} rows - Number of rows
         * @param {number} columns - Number of columns
         * @param {number} [maxValue=1000] - Maximum value
         * @param {function} [rng=Math.random] - Random number generator
         * @return {Matrix} The new matrix
         */},{key:"randInt",value:function randInt(rows,columns,maxValue,rng){if(maxValue===undefined)maxValue=1000;if(rng===undefined)rng=Math.random;var matrix=this.empty(rows,columns);for(var i=0;i<rows;i++){for(var j=0;j<columns;j++){var value=Math.floor(rng()*maxValue);matrix.set(i,j,value);}}return matrix;}/**
         * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.
         * @param {number} rows - Number of rows
         * @param {number} [columns=rows] - Number of columns
         * @param {number} [value=1] - Value to fill the diagonal with
         * @return {Matrix} - The new identity matrix
         */},{key:"eye",value:function eye(rows,columns,value){if(columns===undefined)columns=rows;if(value===undefined)value=1;var min=Math.min(rows,columns);var matrix=this.zeros(rows,columns);for(var i=0;i<min;i++){matrix.set(i,i,value);}return matrix;}/**
         * Creates a diagonal matrix based on the given array.
         * @param {Array} data - Array containing the data for the diagonal
         * @param {number} [rows] - Number of rows (Default: data.length)
         * @param {number} [columns] - Number of columns (Default: rows)
         * @return {Matrix} - The new diagonal matrix
         */},{key:"diag",value:function diag(data,rows,columns){var l=data.length;if(rows===undefined)rows=l;if(columns===undefined)columns=rows;var min=Math.min(l,rows,columns);var matrix=this.zeros(rows,columns);for(var i=0;i<min;i++){matrix.set(i,i,data[i]);}return matrix;}/**
         * Returns a matrix whose elements are the minimum between matrix1 and matrix2
         * @param {Matrix} matrix1
         * @param {Matrix} matrix2
         * @return {Matrix}
         */},{key:"min",value:function min(matrix1,matrix2){matrix1=this.checkMatrix(matrix1);matrix2=this.checkMatrix(matrix2);var rows=matrix1.rows;var columns=matrix1.columns;var result=new this(rows,columns);for(var i=0;i<rows;i++){for(var j=0;j<columns;j++){result.set(i,j,Math.min(matrix1.get(i,j),matrix2.get(i,j)));}}return result;}/**
         * Returns a matrix whose elements are the maximum between matrix1 and matrix2
         * @param {Matrix} matrix1
         * @param {Matrix} matrix2
         * @return {Matrix}
         */},{key:"max",value:function max(matrix1,matrix2){matrix1=this.checkMatrix(matrix1);matrix2=this.checkMatrix(matrix2);var rows=matrix1.rows;var columns=matrix1.columns;var result=new this(rows,columns);for(var i=0;i<rows;i++){for(var j=0;j<columns;j++){result.set(i,j,Math.max(matrix1.get(i,j),matrix2.get(i,j)));}}return result;}/**
         * Check that the provided value is a Matrix and tries to instantiate one if not
         * @param {*} value - The value to check
         * @return {Matrix}
         */},{key:"checkMatrix",value:function checkMatrix(value){return Matrix.isMatrix(value)?value:new this(value);}/**
         * Returns true if the argument is a Matrix, false otherwise
         * @param {*} value - The value to check
         * @return {boolean}
         */},{key:"isMatrix",value:function isMatrix(value){return value!=null&&value.klass==='Matrix';}},{key:Symbol.species,get:function get(){return this;}}]);return Matrix;}(superCtor);Matrix.prototype.klass='Matrix';function compareNumbers(a,b){return a-b;}/*
     Synonyms
     */Matrix.random=Matrix.rand;Matrix.diagonal=Matrix.diag;Matrix.prototype.diagonal=Matrix.prototype.diag;Matrix.identity=Matrix.eye;Matrix.prototype.negate=Matrix.prototype.neg;Matrix.prototype.tensorProduct=Matrix.prototype.kroneckerProduct;Matrix.prototype.determinant=Matrix.prototype.det;/*
     Add dynamically instance and static methods for mathematical operations
     */var inplaceOperator="\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n";var inplaceOperatorScalar="\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n";var inplaceOperatorMatrix="\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n        this.columns !== matrix.columns) {\n        throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n";var staticOperator="\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n";var inplaceMethod="\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n";var staticMethod="\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n";var inplaceMethodWithArgs="\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n";var staticMethodWithArgs="\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n";var inplaceMethodWithOneArgScalar="\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n";var inplaceMethodWithOneArgMatrix="\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n        this.columns !== matrix.columns) {\n        throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n";var inplaceMethodWithOneArg="\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n";var staticMethodWithOneArg=staticMethodWithArgs;var operators=[// Arithmetic operators
['+','add'],['-','sub','subtract'],['*','mul','multiply'],['/','div','divide'],['%','mod','modulus'],// Bitwise operators
['&','and'],['|','or'],['^','xor'],['<<','leftShift'],['>>','signPropagatingRightShift'],['>>>','rightShift','zeroFillRightShift']];var i;var eval2=eval;var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=operators[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var operator=_step3.value;var inplaceOp=eval2(fillTemplateFunction(inplaceOperator,{name:operator[1],op:operator[0]}));var inplaceOpS=eval2(fillTemplateFunction(inplaceOperatorScalar,{name:operator[1]+'S',op:operator[0]}));var inplaceOpM=eval2(fillTemplateFunction(inplaceOperatorMatrix,{name:operator[1]+'M',op:operator[0]}));var staticOp=eval2(fillTemplateFunction(staticOperator,{name:operator[1]}));for(i=1;i<operator.length;i++){Matrix.prototype[operator[i]]=inplaceOp;Matrix.prototype[operator[i]+'S']=inplaceOpS;Matrix.prototype[operator[i]+'M']=inplaceOpM;Matrix[operator[i]]=staticOp;}}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3.return){_iterator3.return();}}finally{if(_didIteratorError3){throw _iteratorError3;}}}var methods=[['~','not']];['abs','acos','acosh','asin','asinh','atan','atanh','cbrt','ceil','clz32','cos','cosh','exp','expm1','floor','fround','log','log1p','log10','log2','round','sign','sin','sinh','sqrt','tan','tanh','trunc'].forEach(function(mathMethod){methods.push(['Math.'+mathMethod,mathMethod]);});var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=methods[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=true){var method=_step4.value;var inplaceMeth=eval2(fillTemplateFunction(inplaceMethod,{name:method[1],method:method[0]}));var staticMeth=eval2(fillTemplateFunction(staticMethod,{name:method[1]}));for(i=1;i<method.length;i++){Matrix.prototype[method[i]]=inplaceMeth;Matrix[method[i]]=staticMeth;}}}catch(err){_didIteratorError4=true;_iteratorError4=err;}finally{try{if(!_iteratorNormalCompletion4&&_iterator4.return){_iterator4.return();}}finally{if(_didIteratorError4){throw _iteratorError4;}}}var methodsWithArgs=[['Math.pow',1,'pow']];var _iteratorNormalCompletion5=true;var _didIteratorError5=false;var _iteratorError5=undefined;try{for(var _iterator5=methodsWithArgs[Symbol.iterator](),_step5;!(_iteratorNormalCompletion5=(_step5=_iterator5.next()).done);_iteratorNormalCompletion5=true){var methodWithArg=_step5.value;var args='arg0';for(i=1;i<methodWithArg[1];i++){args+=", arg"+i;}if(methodWithArg[1]!==1){var inplaceMethWithArgs=eval2(fillTemplateFunction(inplaceMethodWithArgs,{name:methodWithArg[2],method:methodWithArg[0],args:args}));var staticMethWithArgs=eval2(fillTemplateFunction(staticMethodWithArgs,{name:methodWithArg[2],args:args}));for(i=2;i<methodWithArg.length;i++){Matrix.prototype[methodWithArg[i]]=inplaceMethWithArgs;Matrix[methodWithArg[i]]=staticMethWithArgs;}}else{var tmplVar={name:methodWithArg[2],args:args,method:methodWithArg[0]};var inplaceMethod2=eval2(fillTemplateFunction(inplaceMethodWithOneArg,tmplVar));var inplaceMethodS=eval2(fillTemplateFunction(inplaceMethodWithOneArgScalar,tmplVar));var inplaceMethodM=eval2(fillTemplateFunction(inplaceMethodWithOneArgMatrix,tmplVar));var staticMethod2=eval2(fillTemplateFunction(staticMethodWithOneArg,tmplVar));for(i=2;i<methodWithArg.length;i++){Matrix.prototype[methodWithArg[i]]=inplaceMethod2;Matrix.prototype[methodWithArg[i]+'M']=inplaceMethodM;Matrix.prototype[methodWithArg[i]+'S']=inplaceMethodS;Matrix[methodWithArg[i]]=staticMethod2;}}}}catch(err){_didIteratorError5=true;_iteratorError5=err;}finally{try{if(!_iteratorNormalCompletion5&&_iterator5.return){_iterator5.return();}}finally{if(_didIteratorError5){throw _iteratorError5;}}}function fillTemplateFunction(template,values){for(var value in values){template=template.replace(new RegExp('%'+value+'%','g'),values[value]);}return template;}return Matrix;}var Matrix=function(_AbstractMatrix2){_inherits(Matrix,_AbstractMatrix2);function Matrix(nRows,nColumns){var _ret3;_classCallCheck4(this,Matrix);var i;if(arguments.length===1&&typeof nRows==='number'){var _ret;return _ret=new Array(nRows),_possibleConstructorReturn(_this14,_ret);}if(Matrix.isMatrix(nRows)){var _ret2;return _ret2=nRows.clone(),_possibleConstructorReturn(_this14,_ret2);}else if(Number.isInteger(nRows)&&nRows>0){var _this14=_possibleConstructorReturn(this,(Matrix.__proto__||Object.getPrototypeOf(Matrix)).call(this,nRows));// Create an empty matrix
if(Number.isInteger(nColumns)&&nColumns>0){for(i=0;i<nRows;i++){_this14[i]=new Array(nColumns);}}else{throw new TypeError('nColumns must be a positive integer');}}else if(Array.isArray(nRows)){// Copy the values from the 2D array
var matrix=nRows;nRows=matrix.length;nColumns=matrix[0].length;if(typeof nColumns!=='number'||nColumns===0){throw new TypeError('Data must be a 2D array with at least one element');}var _this14=_possibleConstructorReturn(this,(Matrix.__proto__||Object.getPrototypeOf(Matrix)).call(this,nRows));for(i=0;i<nRows;i++){if(matrix[i].length!==nColumns){throw new RangeError('Inconsistent array dimensions');}_this14[i]=[].concat(matrix[i]);}}else{throw new TypeError('First argument must be a positive number or an array');}_this14.rows=nRows;_this14.columns=nColumns;return _ret3=_this14,_possibleConstructorReturn(_this14,_ret3);}_createClass4(Matrix,[{key:"set",value:function set(rowIndex,columnIndex,value){this[rowIndex][columnIndex]=value;return this;}},{key:"get",value:function get(rowIndex,columnIndex){return this[rowIndex][columnIndex];}/**
     * Removes a row from the given index
     * @param {number} index - Row index
     * @return {Matrix} this
     */},{key:"removeRow",value:function removeRow(index){checkRowIndex(this,index);if(this.rows===1){throw new RangeError('A matrix cannot have less than one row');}this.splice(index,1);this.rows-=1;return this;}/**
     * Adds a row at the given index
     * @param {number} [index = this.rows] - Row index
     * @param {Array|Matrix} array - Array or vector
     * @return {Matrix} this
     */},{key:"addRow",value:function addRow(index,array){if(array===undefined){array=index;index=this.rows;}checkRowIndex(this,index,true);array=checkRowVector(this,array,true);this.splice(index,0,array);this.rows+=1;return this;}/**
     * Removes a column from the given index
     * @param {number} index - Column index
     * @return {Matrix} this
     */},{key:"removeColumn",value:function removeColumn(index){checkColumnIndex(this,index);if(this.columns===1){throw new RangeError('A matrix cannot have less than one column');}for(var i=0;i<this.rows;i++){this[i].splice(index,1);}this.columns-=1;return this;}/**
     * Adds a column at the given index
     * @param {number} [index = this.columns] - Column index
     * @param {Array|Matrix} array - Array or vector
     * @return {Matrix} this
     */},{key:"addColumn",value:function addColumn(index,array){if(typeof array==='undefined'){array=index;index=this.columns;}checkColumnIndex(this,index,true);array=checkColumnVector(this,array);for(var i=0;i<this.rows;i++){this[i].splice(index,0,array[i]);}this.columns+=1;return this;}}]);return Matrix;}(AbstractMatrix(Array));var WrapperMatrix1D=function(_AbstractMatrix3){_inherits(WrapperMatrix1D,_AbstractMatrix3);/**
     * @class WrapperMatrix1D
     * @param {Array<number>} data
     * @param {object} [options]
     * @param {object} [options.rows = 1]
     */function WrapperMatrix1D(data){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck4(this,WrapperMatrix1D);var _options$rows=options.rows,rows=_options$rows===undefined?1:_options$rows;if(data.length%rows!==0){throw new Error('the data length is not divisible by the number of rows');}var _this15=_possibleConstructorReturn(this,(WrapperMatrix1D.__proto__||Object.getPrototypeOf(WrapperMatrix1D)).call(this));_this15.rows=rows;_this15.columns=data.length/rows;_this15.data=data;return _this15;}_createClass4(WrapperMatrix1D,[{key:"set",value:function set(rowIndex,columnIndex,value){var index=this._calculateIndex(rowIndex,columnIndex);this.data[index]=value;return this;}},{key:"get",value:function get(rowIndex,columnIndex){var index=this._calculateIndex(rowIndex,columnIndex);return this.data[index];}},{key:"_calculateIndex",value:function _calculateIndex(row,column){return row*this.columns+column;}}],[{key:Symbol.species,get:function get(){return Matrix;}}]);return WrapperMatrix1D;}(AbstractMatrix());var WrapperMatrix2D=function(_AbstractMatrix4){_inherits(WrapperMatrix2D,_AbstractMatrix4);/**
     * @class WrapperMatrix2D
     * @param {Array<Array<number>>} data
     */function WrapperMatrix2D(data){_classCallCheck4(this,WrapperMatrix2D);var _this16=_possibleConstructorReturn(this,(WrapperMatrix2D.__proto__||Object.getPrototypeOf(WrapperMatrix2D)).call(this));_this16.data=data;_this16.rows=data.length;_this16.columns=data[0].length;return _this16;}_createClass4(WrapperMatrix2D,[{key:"set",value:function set(rowIndex,columnIndex,value){this.data[rowIndex][columnIndex]=value;return this;}},{key:"get",value:function get(rowIndex,columnIndex){return this.data[rowIndex][columnIndex];}}],[{key:Symbol.species,get:function get(){return Matrix;}}]);return WrapperMatrix2D;}(AbstractMatrix());/**
 * @param {Array<Array<number>>|Array<number>} array
 * @param {object} [options]
 * @param {object} [options.rows = 1]
 * @return {WrapperMatrix1D|WrapperMatrix2D}
 */function wrap(array,options){if(Array.isArray(array)){if(array[0]&&Array.isArray(array[0])){return new WrapperMatrix2D(array);}else{return new WrapperMatrix1D(array,options);}}else{throw new Error('the argument is not an array');}}/**
 * @class QrDecomposition
 * @link https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs
 * @param {Matrix} value
 */var QrDecomposition$$1=function(){function QrDecomposition$$1(value){_classCallCheck4(this,QrDecomposition$$1);value=WrapperMatrix2D.checkMatrix(value);var qr=value.clone();var m=value.rows;var n=value.columns;var rdiag=new Array(n);var i,j,k,s;for(k=0;k<n;k++){var nrm=0;for(i=k;i<m;i++){nrm=hypotenuse(nrm,qr.get(i,k));}if(nrm!==0){if(qr.get(k,k)<0){nrm=-nrm;}for(i=k;i<m;i++){qr.set(i,k,qr.get(i,k)/nrm);}qr.set(k,k,qr.get(k,k)+1);for(j=k+1;j<n;j++){s=0;for(i=k;i<m;i++){s+=qr.get(i,k)*qr.get(i,j);}s=-s/qr.get(k,k);for(i=k;i<m;i++){qr.set(i,j,qr.get(i,j)+s*qr.get(i,k));}}}rdiag[k]=-nrm;}this.QR=qr;this.Rdiag=rdiag;}/**
     * Solve a problem of least square (Ax=b) by using the QR decomposition. Useful when A is rectangular, but not working when A is singular.
     * Example : We search to approximate x, with A matrix shape m*n, x vector size n, b vector size m (m > n). We will use :
     * var qr = QrDecomposition(A);
     * var x = qr.solve(b);
     * @param {Matrix} value - Matrix 1D which is the vector b (in the equation Ax = b)
     * @return {Matrix} - The vector x
     */_createClass4(QrDecomposition$$1,[{key:"solve",value:function solve(value){value=Matrix.checkMatrix(value);var qr=this.QR;var m=qr.rows;if(value.rows!==m){throw new Error('Matrix row dimensions must agree');}if(!this.isFullRank()){throw new Error('Matrix is rank deficient');}var count=value.columns;var X=value.clone();var n=qr.columns;var i,j,k,s;for(k=0;k<n;k++){for(j=0;j<count;j++){s=0;for(i=k;i<m;i++){s+=qr[i][k]*X[i][j];}s=-s/qr[k][k];for(i=k;i<m;i++){X[i][j]+=s*qr[i][k];}}}for(k=n-1;k>=0;k--){for(j=0;j<count;j++){X[k][j]/=this.Rdiag[k];}for(i=0;i<k;i++){for(j=0;j<count;j++){X[i][j]-=X[k][j]*qr[i][k];}}}return X.subMatrix(0,n-1,0,count-1);}/**
     *
     * @return {boolean}
     */},{key:"isFullRank",value:function isFullRank(){var columns=this.QR.columns;for(var i=0;i<columns;i++){if(this.Rdiag[i]===0){return false;}}return true;}/**
     *
     * @return {Matrix}
     */},{key:"upperTriangularMatrix",get:function get(){var qr=this.QR;var n=qr.columns;var X=new Matrix(n,n);var i,j;for(i=0;i<n;i++){for(j=0;j<n;j++){if(i<j){X[i][j]=qr[i][j];}else if(i===j){X[i][j]=this.Rdiag[i];}else{X[i][j]=0;}}}return X;}/**
     *
     * @return {Matrix}
     */},{key:"orthogonalMatrix",get:function get(){var qr=this.QR;var rows=qr.rows;var columns=qr.columns;var X=new Matrix(rows,columns);var i,j,k,s;for(k=columns-1;k>=0;k--){for(i=0;i<rows;i++){X[i][k]=0;}X[k][k]=1;for(j=k;j<columns;j++){if(qr[k][k]!==0){s=0;for(i=k;i<rows;i++){s+=qr[i][k]*X[i][j];}s=-s/qr[k][k];for(i=k;i<rows;i++){X[i][j]+=s*qr[i][k];}}}}return X;}}]);return QrDecomposition$$1;}();/**
 * Computes the inverse of a Matrix
 * @param {Matrix} matrix
 * @param {boolean} [useSVD=false]
 * @return {Matrix}
 */function inverse$$1(matrix){var useSVD=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;matrix=WrapperMatrix2D.checkMatrix(matrix);if(useSVD){return new SingularValueDecomposition$$1(matrix).inverse();}else{return solve$$1(matrix,Matrix.eye(matrix.rows));}}/**
 *
 * @param {Matrix} leftHandSide
 * @param {Matrix} rightHandSide
 * @param {boolean} [useSVD = false]
 * @return {Matrix}
 */function solve$$1(leftHandSide,rightHandSide){var useSVD=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;leftHandSide=WrapperMatrix2D.checkMatrix(leftHandSide);rightHandSide=WrapperMatrix2D.checkMatrix(rightHandSide);if(useSVD){return new SingularValueDecomposition$$1(leftHandSide).solve(rightHandSide);}else{return leftHandSide.isSquare()?new LuDecomposition$$1(leftHandSide).solve(rightHandSide):new QrDecomposition$$1(leftHandSide).solve(rightHandSide);}}/**
 * @class EigenvalueDecomposition
 * @link https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs
 * @param {Matrix} matrix
 * @param {object} [options]
 * @param {boolean} [options.assumeSymmetric=false]
 */var EigenvalueDecomposition$$1=function(){function EigenvalueDecomposition$$1(matrix){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck4(this,EigenvalueDecomposition$$1);var _options$assumeSymmet=options.assumeSymmetric,assumeSymmetric=_options$assumeSymmet===undefined?false:_options$assumeSymmet;matrix=WrapperMatrix2D.checkMatrix(matrix);if(!matrix.isSquare()){throw new Error('Matrix is not a square matrix');}var n=matrix.columns;var V=getFilled2DArray(n,n,0);var d=new Array(n);var e=new Array(n);var value=matrix;var i,j;var isSymmetric=false;if(assumeSymmetric){isSymmetric=true;}else{isSymmetric=matrix.isSymmetric();}if(isSymmetric){for(i=0;i<n;i++){for(j=0;j<n;j++){V[i][j]=value.get(i,j);}}tred2(n,e,d,V);tql2(n,e,d,V);}else{var H=getFilled2DArray(n,n,0);var ort=new Array(n);for(j=0;j<n;j++){for(i=0;i<n;i++){H[i][j]=value.get(i,j);}}orthes(n,H,ort,V);hqr2(n,e,d,V,H);}this.n=n;this.e=e;this.d=d;this.V=V;}/**
     *
     * @return {Array<number>}
     */_createClass4(EigenvalueDecomposition$$1,[{key:"realEigenvalues",get:function get(){return this.d;}/**
     *
     * @return {Array<number>}
     */},{key:"imaginaryEigenvalues",get:function get(){return this.e;}/**
     *
     * @return {Matrix}
     */},{key:"eigenvectorMatrix",get:function get(){if(!Matrix.isMatrix(this.V)){this.V=new Matrix(this.V);}return this.V;}/**
     *
     * @return {Matrix}
     */},{key:"diagonalMatrix",get:function get(){var n=this.n;var e=this.e;var d=this.d;var X=new Matrix(n,n);var i,j;for(i=0;i<n;i++){for(j=0;j<n;j++){X[i][j]=0;}X[i][i]=d[i];if(e[i]>0){X[i][i+1]=e[i];}else if(e[i]<0){X[i][i-1]=e[i];}}return X;}}]);return EigenvalueDecomposition$$1;}();function tred2(n,e,d,V){var f,g,h,i,j,k,hh,scale;for(j=0;j<n;j++){d[j]=V[n-1][j];}for(i=n-1;i>0;i--){scale=0;h=0;for(k=0;k<i;k++){scale=scale+Math.abs(d[k]);}if(scale===0){e[i]=d[i-1];for(j=0;j<i;j++){d[j]=V[i-1][j];V[i][j]=0;V[j][i]=0;}}else{for(k=0;k<i;k++){d[k]/=scale;h+=d[k]*d[k];}f=d[i-1];g=Math.sqrt(h);if(f>0){g=-g;}e[i]=scale*g;h=h-f*g;d[i-1]=f-g;for(j=0;j<i;j++){e[j]=0;}for(j=0;j<i;j++){f=d[j];V[j][i]=f;g=e[j]+V[j][j]*f;for(k=j+1;k<=i-1;k++){g+=V[k][j]*d[k];e[k]+=V[k][j]*f;}e[j]=g;}f=0;for(j=0;j<i;j++){e[j]/=h;f+=e[j]*d[j];}hh=f/(h+h);for(j=0;j<i;j++){e[j]-=hh*d[j];}for(j=0;j<i;j++){f=d[j];g=e[j];for(k=j;k<=i-1;k++){V[k][j]-=f*e[k]+g*d[k];}d[j]=V[i-1][j];V[i][j]=0;}}d[i]=h;}for(i=0;i<n-1;i++){V[n-1][i]=V[i][i];V[i][i]=1;h=d[i+1];if(h!==0){for(k=0;k<=i;k++){d[k]=V[k][i+1]/h;}for(j=0;j<=i;j++){g=0;for(k=0;k<=i;k++){g+=V[k][i+1]*V[k][j];}for(k=0;k<=i;k++){V[k][j]-=g*d[k];}}}for(k=0;k<=i;k++){V[k][i+1]=0;}}for(j=0;j<n;j++){d[j]=V[n-1][j];V[n-1][j]=0;}V[n-1][n-1]=1;e[0]=0;}function tql2(n,e,d,V){var g,h,i,j,k,l,m,p,r,dl1,c,c2,c3,el1,s,s2,iter;for(i=1;i<n;i++){e[i-1]=e[i];}e[n-1]=0;var f=0;var tst1=0;var eps=Number.EPSILON;for(l=0;l<n;l++){tst1=Math.max(tst1,Math.abs(d[l])+Math.abs(e[l]));m=l;while(m<n){if(Math.abs(e[m])<=eps*tst1){break;}m++;}if(m>l){iter=0;do{iter=iter+1;g=d[l];p=(d[l+1]-g)/(2*e[l]);r=hypotenuse(p,1);if(p<0){r=-r;}d[l]=e[l]/(p+r);d[l+1]=e[l]*(p+r);dl1=d[l+1];h=g-d[l];for(i=l+2;i<n;i++){d[i]-=h;}f=f+h;p=d[m];c=1;c2=c;c3=c;el1=e[l+1];s=0;s2=0;for(i=m-1;i>=l;i--){c3=c2;c2=c;s2=s;g=c*e[i];h=c*p;r=hypotenuse(p,e[i]);e[i+1]=s*r;s=e[i]/r;c=p/r;p=c*d[i]-s*g;d[i+1]=h+s*(c*g+s*d[i]);for(k=0;k<n;k++){h=V[k][i+1];V[k][i+1]=s*V[k][i]+c*h;V[k][i]=c*V[k][i]-s*h;}}p=-s*s2*c3*el1*e[l]/dl1;e[l]=s*p;d[l]=c*p;}while(Math.abs(e[l])>eps*tst1);}d[l]=d[l]+f;e[l]=0;}for(i=0;i<n-1;i++){k=i;p=d[i];for(j=i+1;j<n;j++){if(d[j]<p){k=j;p=d[j];}}if(k!==i){d[k]=d[i];d[i]=p;for(j=0;j<n;j++){p=V[j][i];V[j][i]=V[j][k];V[j][k]=p;}}}}function orthes(n,H,ort,V){var low=0;var high=n-1;var f,g,h,i,j,m;var scale;for(m=low+1;m<=high-1;m++){scale=0;for(i=m;i<=high;i++){scale=scale+Math.abs(H[i][m-1]);}if(scale!==0){h=0;for(i=high;i>=m;i--){ort[i]=H[i][m-1]/scale;h+=ort[i]*ort[i];}g=Math.sqrt(h);if(ort[m]>0){g=-g;}h=h-ort[m]*g;ort[m]=ort[m]-g;for(j=m;j<n;j++){f=0;for(i=high;i>=m;i--){f+=ort[i]*H[i][j];}f=f/h;for(i=m;i<=high;i++){H[i][j]-=f*ort[i];}}for(i=0;i<=high;i++){f=0;for(j=high;j>=m;j--){f+=ort[j]*H[i][j];}f=f/h;for(j=m;j<=high;j++){H[i][j]-=f*ort[j];}}ort[m]=scale*ort[m];H[m][m-1]=scale*g;}}for(i=0;i<n;i++){for(j=0;j<n;j++){V[i][j]=i===j?1:0;}}for(m=high-1;m>=low+1;m--){if(H[m][m-1]!==0){for(i=m+1;i<=high;i++){ort[i]=H[i][m-1];}for(j=m;j<=high;j++){g=0;for(i=m;i<=high;i++){g+=ort[i]*V[i][j];}g=g/ort[m]/H[m][m-1];for(i=m;i<=high;i++){V[i][j]+=g*ort[i];}}}}}function hqr2(nn,e,d,V,H){var n=nn-1;var low=0;var high=nn-1;var eps=Number.EPSILON;var exshift=0;var norm=0;var p=0;var q=0;var r=0;var s=0;var z=0;var iter=0;var i,j,k,l,m,t,w,x,y;var ra,sa,vr,vi;var notlast,cdivres;for(i=0;i<nn;i++){if(i<low||i>high){d[i]=H[i][i];e[i]=0;}for(j=Math.max(i-1,0);j<nn;j++){norm=norm+Math.abs(H[i][j]);}}while(n>=low){l=n;while(l>low){s=Math.abs(H[l-1][l-1])+Math.abs(H[l][l]);if(s===0){s=norm;}if(Math.abs(H[l][l-1])<eps*s){break;}l--;}if(l===n){H[n][n]=H[n][n]+exshift;d[n]=H[n][n];e[n]=0;n--;iter=0;}else if(l===n-1){w=H[n][n-1]*H[n-1][n];p=(H[n-1][n-1]-H[n][n])/2;q=p*p+w;z=Math.sqrt(Math.abs(q));H[n][n]=H[n][n]+exshift;H[n-1][n-1]=H[n-1][n-1]+exshift;x=H[n][n];if(q>=0){z=p>=0?p+z:p-z;d[n-1]=x+z;d[n]=d[n-1];if(z!==0){d[n]=x-w/z;}e[n-1]=0;e[n]=0;x=H[n][n-1];s=Math.abs(x)+Math.abs(z);p=x/s;q=z/s;r=Math.sqrt(p*p+q*q);p=p/r;q=q/r;for(j=n-1;j<nn;j++){z=H[n-1][j];H[n-1][j]=q*z+p*H[n][j];H[n][j]=q*H[n][j]-p*z;}for(i=0;i<=n;i++){z=H[i][n-1];H[i][n-1]=q*z+p*H[i][n];H[i][n]=q*H[i][n]-p*z;}for(i=low;i<=high;i++){z=V[i][n-1];V[i][n-1]=q*z+p*V[i][n];V[i][n]=q*V[i][n]-p*z;}}else{d[n-1]=x+p;d[n]=x+p;e[n-1]=z;e[n]=-z;}n=n-2;iter=0;}else{x=H[n][n];y=0;w=0;if(l<n){y=H[n-1][n-1];w=H[n][n-1]*H[n-1][n];}if(iter===10){exshift+=x;for(i=low;i<=n;i++){H[i][i]-=x;}s=Math.abs(H[n][n-1])+Math.abs(H[n-1][n-2]);x=y=0.75*s;w=-0.4375*s*s;}if(iter===30){s=(y-x)/2;s=s*s+w;if(s>0){s=Math.sqrt(s);if(y<x){s=-s;}s=x-w/((y-x)/2+s);for(i=low;i<=n;i++){H[i][i]-=s;}exshift+=s;x=y=w=0.964;}}iter=iter+1;m=n-2;while(m>=l){z=H[m][m];r=x-z;s=y-z;p=(r*s-w)/H[m+1][m]+H[m][m+1];q=H[m+1][m+1]-z-r-s;r=H[m+2][m+1];s=Math.abs(p)+Math.abs(q)+Math.abs(r);p=p/s;q=q/s;r=r/s;if(m===l){break;}if(Math.abs(H[m][m-1])*(Math.abs(q)+Math.abs(r))<eps*(Math.abs(p)*(Math.abs(H[m-1][m-1])+Math.abs(z)+Math.abs(H[m+1][m+1])))){break;}m--;}for(i=m+2;i<=n;i++){H[i][i-2]=0;if(i>m+2){H[i][i-3]=0;}}for(k=m;k<=n-1;k++){notlast=k!==n-1;if(k!==m){p=H[k][k-1];q=H[k+1][k-1];r=notlast?H[k+2][k-1]:0;x=Math.abs(p)+Math.abs(q)+Math.abs(r);if(x!==0){p=p/x;q=q/x;r=r/x;}}if(x===0){break;}s=Math.sqrt(p*p+q*q+r*r);if(p<0){s=-s;}if(s!==0){if(k!==m){H[k][k-1]=-s*x;}else if(l!==m){H[k][k-1]=-H[k][k-1];}p=p+s;x=p/s;y=q/s;z=r/s;q=q/p;r=r/p;for(j=k;j<nn;j++){p=H[k][j]+q*H[k+1][j];if(notlast){p=p+r*H[k+2][j];H[k+2][j]=H[k+2][j]-p*z;}H[k][j]=H[k][j]-p*x;H[k+1][j]=H[k+1][j]-p*y;}for(i=0;i<=Math.min(n,k+3);i++){p=x*H[i][k]+y*H[i][k+1];if(notlast){p=p+z*H[i][k+2];H[i][k+2]=H[i][k+2]-p*r;}H[i][k]=H[i][k]-p;H[i][k+1]=H[i][k+1]-p*q;}for(i=low;i<=high;i++){p=x*V[i][k]+y*V[i][k+1];if(notlast){p=p+z*V[i][k+2];V[i][k+2]=V[i][k+2]-p*r;}V[i][k]=V[i][k]-p;V[i][k+1]=V[i][k+1]-p*q;}}}}}if(norm===0){return;}for(n=nn-1;n>=0;n--){p=d[n];q=e[n];if(q===0){l=n;H[n][n]=1;for(i=n-1;i>=0;i--){w=H[i][i]-p;r=0;for(j=l;j<=n;j++){r=r+H[i][j]*H[j][n];}if(e[i]<0){z=w;s=r;}else{l=i;if(e[i]===0){H[i][n]=w!==0?-r/w:-r/(eps*norm);}else{x=H[i][i+1];y=H[i+1][i];q=(d[i]-p)*(d[i]-p)+e[i]*e[i];t=(x*s-z*r)/q;H[i][n]=t;H[i+1][n]=Math.abs(x)>Math.abs(z)?(-r-w*t)/x:(-s-y*t)/z;}t=Math.abs(H[i][n]);if(eps*t*t>1){for(j=i;j<=n;j++){H[j][n]=H[j][n]/t;}}}}}else if(q<0){l=n-1;if(Math.abs(H[n][n-1])>Math.abs(H[n-1][n])){H[n-1][n-1]=q/H[n][n-1];H[n-1][n]=-(H[n][n]-p)/H[n][n-1];}else{cdivres=cdiv(0,-H[n-1][n],H[n-1][n-1]-p,q);H[n-1][n-1]=cdivres[0];H[n-1][n]=cdivres[1];}H[n][n-1]=0;H[n][n]=1;for(i=n-2;i>=0;i--){ra=0;sa=0;for(j=l;j<=n;j++){ra=ra+H[i][j]*H[j][n-1];sa=sa+H[i][j]*H[j][n];}w=H[i][i]-p;if(e[i]<0){z=w;r=ra;s=sa;}else{l=i;if(e[i]===0){cdivres=cdiv(-ra,-sa,w,q);H[i][n-1]=cdivres[0];H[i][n]=cdivres[1];}else{x=H[i][i+1];y=H[i+1][i];vr=(d[i]-p)*(d[i]-p)+e[i]*e[i]-q*q;vi=(d[i]-p)*2*q;if(vr===0&&vi===0){vr=eps*norm*(Math.abs(w)+Math.abs(q)+Math.abs(x)+Math.abs(y)+Math.abs(z));}cdivres=cdiv(x*r-z*ra+q*sa,x*s-z*sa-q*ra,vr,vi);H[i][n-1]=cdivres[0];H[i][n]=cdivres[1];if(Math.abs(x)>Math.abs(z)+Math.abs(q)){H[i+1][n-1]=(-ra-w*H[i][n-1]+q*H[i][n])/x;H[i+1][n]=(-sa-w*H[i][n]-q*H[i][n-1])/x;}else{cdivres=cdiv(-r-y*H[i][n-1],-s-y*H[i][n],z,q);H[i+1][n-1]=cdivres[0];H[i+1][n]=cdivres[1];}}t=Math.max(Math.abs(H[i][n-1]),Math.abs(H[i][n]));if(eps*t*t>1){for(j=i;j<=n;j++){H[j][n-1]=H[j][n-1]/t;H[j][n]=H[j][n]/t;}}}}}}for(i=0;i<nn;i++){if(i<low||i>high){for(j=i;j<nn;j++){V[i][j]=H[i][j];}}}for(j=nn-1;j>=low;j--){for(i=low;i<=high;i++){z=0;for(k=low;k<=Math.min(j,high);k++){z=z+V[i][k]*H[k][j];}V[i][j]=z;}}}function cdiv(xr,xi,yr,yi){var r,d;if(Math.abs(yr)>Math.abs(yi)){r=yi/yr;d=yr+r*yi;return[(xr+r*xi)/d,(xi-r*xr)/d];}else{r=yr/yi;d=yi+r*yr;return[(r*xr+xi)/d,(r*xi-xr)/d];}}/**
 * @class CholeskyDecomposition
 * @link https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs
 * @param {Matrix} value
 */var CholeskyDecomposition$$1=function(){function CholeskyDecomposition$$1(value){_classCallCheck4(this,CholeskyDecomposition$$1);value=WrapperMatrix2D.checkMatrix(value);if(!value.isSymmetric()){throw new Error('Matrix is not symmetric');}var a=value;var dimension=a.rows;var l=new Matrix(dimension,dimension);var positiveDefinite=true;var i,j,k;for(j=0;j<dimension;j++){var Lrowj=l[j];var d=0;for(k=0;k<j;k++){var Lrowk=l[k];var s=0;for(i=0;i<k;i++){s+=Lrowk[i]*Lrowj[i];}Lrowj[k]=s=(a.get(j,k)-s)/l[k][k];d=d+s*s;}d=a.get(j,j)-d;positiveDefinite&=d>0;l[j][j]=Math.sqrt(Math.max(d,0));for(k=j+1;k<dimension;k++){l[j][k]=0;}}if(!positiveDefinite){throw new Error('Matrix is not positive definite');}this.L=l;}/**
     *
     * @param {Matrix} value
     * @return {Matrix}
     */_createClass4(CholeskyDecomposition$$1,[{key:"solve",value:function solve(value){value=WrapperMatrix2D.checkMatrix(value);var l=this.L;var dimension=l.rows;if(value.rows!==dimension){throw new Error('Matrix dimensions do not match');}var count=value.columns;var B=value.clone();var i,j,k;for(k=0;k<dimension;k++){for(j=0;j<count;j++){for(i=0;i<k;i++){B[k][j]-=B[i][j]*l[k][i];}B[k][j]/=l[k][k];}}for(k=dimension-1;k>=0;k--){for(j=0;j<count;j++){for(i=k+1;i<dimension;i++){B[k][j]-=B[i][j]*l[i][k];}B[k][j]/=l[k][k];}}return B;}/**
     *
     * @return {Matrix}
     */},{key:"lowerTriangularMatrix",get:function get(){return this.L;}}]);return CholeskyDecomposition$$1;}();exports['default']=Matrix;exports.Matrix=Matrix;exports.abstractMatrix=AbstractMatrix;exports.wrap=wrap;exports.WrapperMatrix2D=WrapperMatrix2D;exports.WrapperMatrix1D=WrapperMatrix1D;exports.solve=solve$$1;exports.inverse=inverse$$1;exports.SingularValueDecomposition=SingularValueDecomposition$$1;exports.SVD=SingularValueDecomposition$$1;exports.EigenvalueDecomposition=EigenvalueDecomposition$$1;exports.EVD=EigenvalueDecomposition$$1;exports.CholeskyDecomposition=CholeskyDecomposition$$1;exports.CHO=CholeskyDecomposition$$1;exports.LuDecomposition=LuDecomposition$$1;exports.LU=LuDecomposition$$1;exports.QrDecomposition=QrDecomposition$$1;exports.QR=QrDecomposition$$1;},{"ml-array-rescale":129}],131:[function(require,module,exports){'use strict';var extend=require('extend');var defaultOptions={size:1,value:0};/**
 * Case when the entry is an array
 * @param data
 * @param options
 * @returns {Array}
 */function arrayCase(data,options){var len=data.length;if(typeof options.size==='number')options.size=[options.size,options.size];var cond=len+options.size[0]+options.size[1];var output;if(options.output){if(options.output.length!==cond)throw new RangeError('Wrong output size');output=options.output;}else output=new Array(cond);var i;// circular option
if(options.value==='circular'){for(i=0;i<cond;i++){if(i<options.size[0])output[i]=data[(len-options.size[0]%len+i)%len];else if(i<options.size[0]+len)output[i]=data[i-options.size[0]];else output[i]=data[(i-options.size[0])%len];}}// replicate option
else if(options.value==='replicate'){for(i=0;i<cond;i++){if(i<options.size[0])output[i]=data[0];else if(i<options.size[0]+len)output[i]=data[i-options.size[0]];else output[i]=data[len-1];}}// symmetric option
else if(options.value==='symmetric'){if(options.size[0]>len||options.size[1]>len)throw new RangeError('expanded value should not be bigger than the data length');for(i=0;i<cond;i++){if(i<options.size[0])output[i]=data[options.size[0]-1-i];else if(i<options.size[0]+len)output[i]=data[i-options.size[0]];else output[i]=data[2*len+options.size[0]-i-1];}}// default option
else{for(i=0;i<cond;i++){if(i<options.size[0])output[i]=options.value;else if(i<options.size[0]+len)output[i]=data[i-options.size[0]];else output[i]=options.value;}}return output;}/**
 * Case when the entry is a matrix
 * @param data
 * @param options
 * @returns {Array}
 */function matrixCase(data,options){var row=data.length;var col=data[0].length;if(options.size[0]===undefined)options.size=[options.size,options.size,options.size,options.size];throw new Error('matrix not supported yet, sorry');}/**
 * Pads and array
 * @param {Array <number>} data
 * @param {object} options
 */function padArray(data,options){options=extend({},defaultOptions,options);if(Array.isArray(data)){if(Array.isArray(data[0]))return matrixCase(data,options);else return arrayCase(data,options);}else throw new TypeError('data should be an array');}module.exports=padArray;},{"extend":126}],132:[function(require,module,exports){'use strict';var matrixLib=require('ml-matrix');var Matrix=matrixLib.Matrix;var inverse=matrixLib.inverse;var padArray=require('ml-pad-array');var extend=require('extend');var defaultOptions={windowSize:5,derivative:1,polynomial:2,pad:'none',padValue:'replicate'};/**
 * Savitzky-Golay filter
 * @param {Array <number>} data
 * @param {number} h
 * @param {Object} options
 * @returns {Array}
 */function SavitzkyGolay(data,h,options){options=extend({},defaultOptions,options);if(options.windowSize%2===0||options.windowSize<5||!Number.isInteger(options.windowSize))throw new RangeError('Invalid window size (should be odd and at least 5 integer number)');if(options.derivative<0||!Number.isInteger(options.derivative))throw new RangeError('Derivative should be a positive integer');if(options.polynomial<1||!Number.isInteger(options.polynomial))throw new RangeError('Polynomial should be a positive integer');var C,norm;var step=Math.floor(options.windowSize/2);if(options.pad==='pre'){data=padArray(data,{size:step,value:options.padValue});}var ans=new Array(data.length-2*step);if(options.windowSize===5&&options.polynomial===2&&(options.derivative===1||options.derivative===2)){if(options.derivative===1){C=[-2,-1,0,1,2];norm=10;}else{C=[2,-1,-2,-1,2];norm=7;}}else{var J=Matrix.ones(options.windowSize,options.polynomial+1);var inic=-(options.windowSize-1)/2;for(var i=0;i<J.length;i++){for(var j=0;j<J[i].length;j++){if(inic+1!==0||j!==0)J[i][j]=Math.pow(inic+i,j);}}var Jtranspose=J.transposeView();var Jinv=inverse(Jtranspose.mmul(J));C=Jinv.mmul(Jtranspose);C=C[options.derivative];norm=1;}var det=norm*Math.pow(h,options.derivative);for(var k=step;k<data.length-step;k++){var d=0;for(var l=0;l<C.length;l++){d+=C[l]*data[l+k-step]/det;}ans[k-step]=d;}if(options.pad==='post'){ans=padArray(ans,{size:step,value:options.padValue});}return ans;}module.exports=SavitzkyGolay;},{"extend":126,"ml-matrix":130,"ml-pad-array":131}],133:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.sink=exports.source=exports.utils=exports.operator=exports.core=exports.version=undefined;var _namespace=require('../common/operator/_namespace');Object.defineProperty(exports,'operator',{enumerable:true,get:function get(){return _interopRequireDefault(_namespace).default;}});var _namespace2=require('./utils/_namespace');Object.defineProperty(exports,'utils',{enumerable:true,get:function get(){return _interopRequireDefault(_namespace2).default;}});var _namespace3=require('./source/_namespace');Object.defineProperty(exports,'source',{enumerable:true,get:function get(){return _interopRequireDefault(_namespace3).default;}});var _namespace4=require('./sink/_namespace');Object.defineProperty(exports,'sink',{enumerable:true,get:function get(){return _interopRequireDefault(_namespace4).default;}});var _core2=require('../core');var _core=_interopRequireWildcard(_core2);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var version=exports.version='1.1.6';var core=exports.core=_core;},{"../common/operator/_namespace":174,"../core":184,"./sink/_namespace":144,"./source/_namespace":148,"./utils/_namespace":150}],134:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseDisplay2=require('./BaseDisplay');var _BaseDisplay3=_interopRequireDefault(_BaseDisplay2);var _Fft=require('../../common/operator/Fft');var _Fft2=_interopRequireDefault(_Fft);var _displayUtils=require('../utils/display-utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={scale:{type:'float',default:1,metas:{kind:'dynamic'}},colors:{type:'any',default:(0,_displayUtils.getColors)('bar-chart'),nullable:true,metas:{kind:'dynamic'}},min:{type:'float',default:0,metas:{kind:'dynamic'}},max:{type:'float',default:1,metas:{kind:'dynamic'}}};/**
 * Display a bar chart from an incomming `vector` input.
 *
 * @memberof module:client.sink
 *
 * @param {Object} options - Override default parameters.
 * @param {String} [options.colors=null] - Colors of the bars.
 * @param {Number} [options.min=-80] - Minimum displayed value.
 * @param {Number} [options.max=6] - Maximum displayed value.
 * @param {Number} [options.width=300] - Width of the canvas.
 *  _dynamic parameter_
 * @param {Number} [options.height=150] - Height of the canvas.
 *  _dynamic parameter_
 * @param {Element|CSSSelector} [options.container=null] - Container element
 *  in which to insert the canvas. _constant parameter_
 * @param {Element|CSSSelector} [options.canvas=null] - Canvas element
 *  in which to draw. _constant parameter_
 *
 * @example
 * import * as lfo from 'waves-lfo/client';
 * import * as lfo from 'waves-lfo/client';
 *
 * const frameSize = 5;
 * const dt = 0.02;
 *
 * const eventIn = new lfo.source.EventIn({
 *   frameSize: frameSize,
 *   frameRate: 1 / dt,
 *   frameType: 'vector',
 * });
 *
 * const barChart = new lfo.sink.BarChartDisplay({
 *   canvas: '#bar-chart',
 * });
 *
 * eventIn.connect(barChart);
 * eventIn.start();
 *
 * const data = [0, 0.2, 0.4, 0.6, 0.8];
 *
 * (function generateData() {
 *   for (let i = 0; i < frameSize; i++)
 *     data[i] = (data[i] + 0.001) % 1;
 *
 *   eventIn.process(null, data);
 *
 *   setTimeout(generateData, dt * 1000);
 * }());
 */var BarChartDisplay=function(_BaseDisplay){(0,_inherits3.default)(BarChartDisplay,_BaseDisplay);function BarChartDisplay(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,BarChartDisplay);return(0,_possibleConstructorReturn3.default)(this,(BarChartDisplay.__proto__||(0,_getPrototypeOf2.default)(BarChartDisplay)).call(this,definitions,options,false));}/** @private */(0,_createClass3.default)(BarChartDisplay,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);this.propagateStreamParams();}/** @private */},{key:'processVector',value:function processVector(frame){var frameSize=this.streamParams.frameSize;var width=this.canvasWidth;var height=this.canvasHeight;var colors=this.params.get('colors');var data=frame.data;var barWidth=width/frameSize;var ctx=this.ctx;// error handling needs review...
var error=0;for(var i=0;i<frameSize;i++){var x1Float=i*barWidth+error;var x1Int=Math.round(x1Float);var x2Float=x1Float+(barWidth-error);var x2Int=Math.round(x2Float);error=x2Int-x2Float;if(x1Int!==x2Int){var _width=x2Int-x1Int;var y=this.getYPosition(data[i]);ctx.fillStyle=colors[i%colors.length];ctx.fillRect(x1Int,y,_width,height-y);}else{error-=barWidth;}}}}]);return BarChartDisplay;}(_BaseDisplay3.default);exports.default=BarChartDisplay;},{"../../common/operator/Fft":156,"../utils/display-utils":151,"./BaseDisplay":135,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],135:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _assign=require('babel-runtime/core-js/object/assign');var _assign2=_interopRequireDefault(_assign);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _get2=require('babel-runtime/helpers/get');var _get3=_interopRequireDefault(_get2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var commonDefinitions={min:{type:'float',default:-1,metas:{kind:'dynamic'}},max:{type:'float',default:1,metas:{kind:'dynamic'}},width:{type:'integer',default:300,metas:{kind:'dynamic'}},height:{type:'integer',default:150,metas:{kind:'dynamic'}},container:{type:'any',default:null,constant:true},canvas:{type:'any',default:null,constant:true}};var hasDurationDefinitions={duration:{type:'float',min:0,max:+Infinity,default:1,metas:{kind:'dynamic'}},referenceTime:{type:'float',default:0,constant:true}};/**
 * Base class to extend in order to create graphic sinks.
 *
 * <span class="warning">_This class should be considered abstract and only
 * be used to be extended._</span>
 *
 * @todo - fix float rounding errors (produce decays in sync draws)
 *
 * @memberof module:client.sink
 *
 * @param {Object} options - Override default parameters.
 * @param {Number} [options.min=-1] - Minimum value represented in the canvas.
 *  _dynamic parameter_
 * @param {Number} [options.max=1] - Maximum value represented in the canvas.
 *  _dynamic parameter_
 * @param {Number} [options.width=300] - Width of the canvas.
 *  _dynamic parameter_
 * @param {Number} [options.height=150] - Height of the canvas.
 *  _dynamic parameter_
 * @param {Element|CSSSelector} [options.container=null] - Container element
 *  in which to insert the canvas. _constant parameter_
 * @param {Element|CSSSelector} [options.canvas=null] - Canvas element
 *  in which to draw. _constant parameter_
 * @param {Number} [options.duration=1] - Duration (in seconds) represented in
 *  the canvas. This parameter only exists for operators that display several
 *  consecutive frames on the canvas. _dynamic parameter_
 * @param {Number} [options.referenceTime=null] - Optionnal reference time the
 *  display should considerer as the origin. Is only usefull when synchronizing
 *  several display using the `DisplaySync` class. This parameter only exists
 *  for operators that display several consecutive frames on the canvas.
 */var BaseDisplay=function(_BaseLfo){(0,_inherits3.default)(BaseDisplay,_BaseLfo);function BaseDisplay(defs){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var hasDuration=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;(0,_classCallCheck3.default)(this,BaseDisplay);var commonDefs=void 0;if(hasDuration)commonDefs=(0,_assign2.default)({},commonDefinitions,hasDurationDefinitions);else commonDefs=commonDefinitions;var definitions=(0,_assign2.default)({},commonDefs,defs);var _this=(0,_possibleConstructorReturn3.default)(this,(BaseDisplay.__proto__||(0,_getPrototypeOf2.default)(BaseDisplay)).call(this,definitions,options));if(_this.params.get('canvas')===null&&_this.params.get('container')===null)throw new Error('Invalid parameter: `canvas` or `container` not defined');var canvasParam=_this.params.get('canvas');var containerParam=_this.params.get('container');// prepare canvas
if(canvasParam){if(typeof canvasParam==='string')_this.canvas=document.querySelector(canvasParam);else _this.canvas=canvasParam;}else if(containerParam){var container=void 0;if(typeof containerParam==='string')container=document.querySelector(containerParam);else container=containerParam;_this.canvas=document.createElement('canvas');container.appendChild(_this.canvas);}_this.ctx=_this.canvas.getContext('2d');_this.cachedCanvas=document.createElement('canvas');_this.cachedCtx=_this.cachedCanvas.getContext('2d');_this.hasDuration=hasDuration;_this.previousFrame=null;_this.currentTime=hasDuration?_this.params.get('referenceTime'):null;/**
     * Instance of the `DisplaySync` used to synchronize the different displays
     * @private
     */_this.displaySync=false;_this._stack=[];_this._rafId=null;_this.renderStack=_this.renderStack.bind(_this);_this.shiftError=0;// initialize canvas size and y scale transfert function
_this._resize();return _this;}/** @private */(0,_createClass3.default)(BaseDisplay,[{key:'_resize',value:function _resize(){var width=this.params.get('width');var height=this.params.get('height');var ctx=this.ctx;var cachedCtx=this.cachedCtx;var dPR=window.devicePixelRatio||1;var bPR=ctx.webkitBackingStorePixelRatio||ctx.mozBackingStorePixelRatio||ctx.msBackingStorePixelRatio||ctx.oBackingStorePixelRatio||ctx.backingStorePixelRatio||1;this.pixelRatio=dPR/bPR;var lastWidth=this.canvasWidth;var lastHeight=this.canvasHeight;this.canvasWidth=width*this.pixelRatio;this.canvasHeight=height*this.pixelRatio;cachedCtx.canvas.width=this.canvasWidth;cachedCtx.canvas.height=this.canvasHeight;// copy current image from ctx (resize)
if(lastWidth&&lastHeight){cachedCtx.drawImage(ctx.canvas,0,0,lastWidth,lastHeight,0,0,this.canvasWidth,this.canvasHeight);}ctx.canvas.width=this.canvasWidth;ctx.canvas.height=this.canvasHeight;ctx.canvas.style.width=width+'px';ctx.canvas.style.height=height+'px';// update scale
this._setYScale();}/**
     * Create the transfert function used to map values to pixel in the y axis
     * @private
     */},{key:'_setYScale',value:function _setYScale(){var min=this.params.get('min');var max=this.params.get('max');var height=this.canvasHeight;var a=(0-height)/(max-min);var b=height-a*min;this.getYPosition=function(x){return a*x+b;};}/**
     * Returns the width in pixel a `vector` frame needs to be drawn.
     * @private
     */},{key:'getMinimumFrameWidth',value:function getMinimumFrameWidth(){return 1;// need one pixel to draw the line
}/**
     * Callback function executed when a parameter is updated.
     *
     * @param {String} name - Parameter name.
     * @param {Mixed} value - Parameter value.
     * @param {Object} metas - Metadatas of the parameter.
     * @private
     */},{key:'onParamUpdate',value:function onParamUpdate(name,value,metas){(0,_get3.default)(BaseDisplay.prototype.__proto__||(0,_getPrototypeOf2.default)(BaseDisplay.prototype),'onParamUpdate',this).call(this,name,value,metas);switch(name){case'min':case'max':// @todo - make sure that min and max are different
this._setYScale();break;case'width':case'height':this._resize();}}/** @private */},{key:'propagateStreamParams',value:function propagateStreamParams(){(0,_get3.default)(BaseDisplay.prototype.__proto__||(0,_getPrototypeOf2.default)(BaseDisplay.prototype),'propagateStreamParams',this).call(this);}/** @private */},{key:'resetStream',value:function resetStream(){(0,_get3.default)(BaseDisplay.prototype.__proto__||(0,_getPrototypeOf2.default)(BaseDisplay.prototype),'resetStream',this).call(this);var width=this.canvasWidth;var height=this.canvasHeight;this.previousFrame=null;this.currentTime=this.hasDuration?this.params.get('referenceTime'):null;this.ctx.clearRect(0,0,width,height);this.cachedCtx.clearRect(0,0,width,height);}/** @private */},{key:'finalizeStream',value:function finalizeStream(endTime){this.currentTime=null;(0,_get3.default)(BaseDisplay.prototype.__proto__||(0,_getPrototypeOf2.default)(BaseDisplay.prototype),'finalizeStream',this).call(this,endTime);this._rafId=null;// clear the stack if not empty
if(this._stack.length>0)this.renderStack();}/**
     * Add the current frame to the frames to draw. Should not be overriden.
     * @private
     */},{key:'processFrame',value:function processFrame(frame){var frameSize=this.streamParams.frameSize;var copy=new Float32Array(frameSize);var data=frame.data;// copy values of the input frame as they might be updated
// in reference before being consumed in the draw function
for(var i=0;i<frameSize;i++){copy[i]=data[i];}this._stack.push({time:frame.time,data:copy,metadata:frame.metadata});if(this._rafId===null)this._rafId=window.requestAnimationFrame(this.renderStack);}/**
     * Render the accumulated frames. Method called in `requestAnimationFrame`.
     * @private
     */},{key:'renderStack',value:function renderStack(){if(this.params.has('duration')){// render all frame since last `renderStack` call
for(var i=0,l=this._stack.length;i<l;i++){this.scrollModeDraw(this._stack[i]);}}else{// only render last received frame if any
if(this._stack.length>0){var frame=this._stack[this._stack.length-1];this.ctx.clearRect(0,0,this.canvasWidth,this.canvasHeight);this.processFunction(frame);}}this._stack.length=0;// reinit stack for next call
this._rafId=null;}/**
     * Draw data from right to left with scrolling
     * @private
     * @todo - check possibility of maintaining all values from one place to
     *         minimize float error tracking.
     */},{key:'scrollModeDraw',value:function scrollModeDraw(frame){var frameType=this.streamParams.frameType;var frameRate=this.streamParams.frameRate;var frameSize=this.streamParams.frameSize;var sourceSampleRate=this.streamParams.sourceSampleRate;var canvasDuration=this.params.get('duration');var ctx=this.ctx;var canvasWidth=this.canvasWidth;var canvasHeight=this.canvasHeight;var previousFrame=this.previousFrame;// current time at the left of the canvas
var currentTime=this.currentTime!==null?this.currentTime:frame.time;var frameStartTime=frame.time;var lastFrameTime=previousFrame?previousFrame.time:0;var lastFrameDuration=this.lastFrameDuration?this.lastFrameDuration:0;var frameDuration=void 0;if(frameType==='scalar'||frameType==='vector'){var pixelDuration=canvasDuration/canvasWidth;frameDuration=this.getMinimumFrameWidth()*pixelDuration;}else if(this.streamParams.frameType==='signal'){frameDuration=frameSize/sourceSampleRate;}var frameEndTime=frameStartTime+frameDuration;// define if we need to shift the canvas
var shiftTime=frameEndTime-currentTime;// if the canvas is not synced, should never go to `else`
if(shiftTime>0){// shift the canvas of shiftTime in pixels
var fShift=shiftTime/canvasDuration*canvasWidth-this.shiftError;var iShift=Math.floor(fShift+0.5);this.shiftError=fShift-iShift;var _currentTime=frameStartTime+frameDuration;this.shiftCanvas(iShift,_currentTime);// if siblings, share the information
if(this.displaySync)this.displaySync.shiftSiblings(iShift,_currentTime,this);}// width of the frame in pixels
var floatFrameWidth=frameDuration/canvasDuration*canvasWidth;var frameWidth=Math.floor(floatFrameWidth+0.5);// define position of the head in the canvas
var canvasStartTime=this.currentTime-canvasDuration;var startTimeRatio=(frameStartTime-canvasStartTime)/canvasDuration;var startTimePosition=startTimeRatio*canvasWidth;// number of pixels since last frame
var pixelsSinceLastFrame=this.lastFrameWidth;if((frameType==='scalar'||frameType==='vector')&&previousFrame){var frameInterval=frame.time-previousFrame.time;pixelsSinceLastFrame=frameInterval/canvasDuration*canvasWidth;}// draw current frame
ctx.save();ctx.translate(startTimePosition,0);this.processFunction(frame,frameWidth,pixelsSinceLastFrame);ctx.restore();// save current canvas state into cached canvas
this.cachedCtx.clearRect(0,0,canvasWidth,canvasHeight);this.cachedCtx.drawImage(this.canvas,0,0,canvasWidth,canvasHeight);// update lastFrameDuration, lastFrameWidth
this.lastFrameDuration=frameDuration;this.lastFrameWidth=frameWidth;this.previousFrame=frame;}/**
     * Shift canvas, also called from `DisplaySync`
     * @private
     */},{key:'shiftCanvas',value:function shiftCanvas(iShift,time){var ctx=this.ctx;var cache=this.cachedCanvas;var cachedCtx=this.cachedCtx;var width=this.canvasWidth;var height=this.canvasHeight;var croppedWidth=width-iShift;this.currentTime=time;ctx.clearRect(0,0,width,height);ctx.drawImage(cache,iShift,0,croppedWidth,height,0,0,croppedWidth,height);// save current canvas state into cached canvas
cachedCtx.clearRect(0,0,width,height);cachedCtx.drawImage(this.canvas,0,0,width,height);}// @todo - Fix trigger mode
// allow to witch easily between the 2 modes
// setTrigger(bool) {
//   this.params.trigger = bool;
//   // clear canvas and cache
//   this.ctx.clearRect(0, 0, this.params.width, this.params.height);
//   this.cachedCtx.clearRect(0, 0, this.params.width, this.params.height);
//   // reset _currentXPosition
//   this._currentXPosition = 0;
//   this.lastShiftError = 0;
// }
// /**
//  * Alternative drawing mode.
//  * Draw from left to right, go back to left when > width
//  */
// triggerModeDraw(time, frame) {
//   const width  = this.params.width;
//   const height = this.params.height;
//   const duration = this.params.duration;
//   const ctx = this.ctx;
//   const dt = time - this.previousTime;
//   const fShift = (dt / duration) * width - this.lastShiftError; // px
//   const iShift = Math.round(fShift);
//   this.lastShiftError = iShift - fShift;
//   this.currentXPosition += iShift;
//   // draw the right part
//   ctx.save();
//   ctx.translate(this.currentXPosition, 0);
//   ctx.clearRect(-iShift, 0, iShift, height);
//   this.drawCurve(frame, iShift);
//   ctx.restore();
//   // go back to the left of the canvas and redraw the same thing
//   if (this.currentXPosition > width) {
//     // go back to start
//     this.currentXPosition -= width;
//     ctx.save();
//     ctx.translate(this.currentXPosition, 0);
//     ctx.clearRect(-iShift, 0, iShift, height);
//     this.drawCurve(frame, this.previousFrame, iShift);
//     ctx.restore();
//   }
// }
}]);return BaseDisplay;}(_BaseLfo3.default);exports.default=BaseDisplay;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/assign":6,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/get":18,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],136:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _get2=require('babel-runtime/helpers/get');var _get3=_interopRequireDefault(_get2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseDisplay2=require('./BaseDisplay');var _BaseDisplay3=_interopRequireDefault(_BaseDisplay2);var _displayUtils=require('../utils/display-utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={radius:{type:'float',min:0,default:0,metas:{kind:'dynamic'}},line:{type:'boolean',default:true,metas:{kind:'dynamic'}},colors:{type:'any',default:null/**
   * Breakpoint Function, display a stream of type `vector`.
   *
   * @memberof module:client.sink
   *
   * @param {Object} options - Override default parameters.
   * @param {String} [options.colors=null] - Array of colors for each index of the
   *  vector. _dynamic parameter_
   * @param {String} [options.radius=0] - Radius of the dot at each value.
   *  _dynamic parameter_
   * @param {String} [options.line=true] - Display a line between each consecutive
   *  values of the vector. _dynamic parameter_
   * @param {Number} [options.min=-1] - Minimum value represented in the canvas.
   *  _dynamic parameter_
   * @param {Number} [options.max=1] - Maximum value represented in the canvas.
   *  _dynamic parameter_
   * @param {Number} [options.width=300] - Width of the canvas.
   *  _dynamic parameter_
   * @param {Number} [options.height=150] - Height of the canvas.
   *  _dynamic parameter_
   * @param {Element|CSSSelector} [options.container=null] - Container element
   *  in which to insert the canvas. _constant parameter_
   * @param {Element|CSSSelector} [options.canvas=null] - Canvas element
   *  in which to draw. _constant parameter_
   * @param {Number} [options.duration=1] - Duration (in seconds) represented in
   *  the canvas. _dynamic parameter_
   * @param {Number} [options.referenceTime=null] - Optionnal reference time the
   *  display should considerer as the origin. Is only usefull when synchronizing
   *  several display using the `DisplaySync` class.
   *
   * @example
   * import * as lfo from 'waves-lfo/client';
   *
   * const eventIn = new lfo.source.EventIn({
   *   frameSize: 2,
   *   frameRate: 0.1,
   *   frameType: 'vector'
   * });
   *
   * const bpf = new lfo.sink.BpfDisplay({
   *   canvas: '#bpf',
   *   duration: 10,
   * });
   *
   * eventIn.connect(bpf);
   * eventIn.start();
   *
   * let time = 0;
   * const dt = 0.1;
   *
   * (function generateData() {
   *   eventIn.process(time, [Math.random() * 2 - 1, Math.random() * 2 - 1]);
   *   time += dt;
   *
   *   setTimeout(generateData, dt * 1000);
   * }());
   */}};var BpfDisplay=function(_BaseDisplay){(0,_inherits3.default)(BpfDisplay,_BaseDisplay);function BpfDisplay(options){(0,_classCallCheck3.default)(this,BpfDisplay);var _this=(0,_possibleConstructorReturn3.default)(this,(BpfDisplay.__proto__||(0,_getPrototypeOf2.default)(BpfDisplay)).call(this,definitions,options));_this.prevFrame=null;return _this;}/** @private */(0,_createClass3.default)(BpfDisplay,[{key:'getMinimumFrameWidth',value:function getMinimumFrameWidth(){return this.params.get('radius');}},{key:'resetStream',value:function resetStream(){(0,_get3.default)(BpfDisplay.prototype.__proto__||(0,_getPrototypeOf2.default)(BpfDisplay.prototype),'resetStream',this).call(this);this.prevFrame=null;}/** @private */},{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);if(this.params.get('colors')===null)this.params.set('colors',(0,_displayUtils.getColors)('bpf',this.streamParams.frameSize));this.propagateStreamParams();}/** @private */},{key:'processVector',value:function processVector(frame,frameWidth,pixelsSinceLastFrame){var colors=this.params.get('colors');var radius=this.params.get('radius');var drawLine=this.params.get('line');var frameSize=this.streamParams.frameSize;var ctx=this.ctx;var data=frame.data;var prevData=this.prevFrame?this.prevFrame.data:null;ctx.save();for(var i=0,l=frameSize;i<l;i++){var posY=this.getYPosition(data[i]);var color=colors[i];ctx.strokeStyle=color;ctx.fillStyle=color;if(prevData&&drawLine){var lastPosY=this.getYPosition(prevData[i]);ctx.beginPath();ctx.moveTo(-pixelsSinceLastFrame,lastPosY);ctx.lineTo(0,posY);ctx.stroke();ctx.closePath();}if(radius>0){ctx.beginPath();ctx.arc(0,posY,radius,0,Math.PI*2,false);ctx.fill();ctx.closePath();}}ctx.restore();this.prevFrame=frame;}}]);return BpfDisplay;}(_BaseDisplay3.default);exports.default=BpfDisplay;},{"../utils/display-utils":151,"./BaseDisplay":135,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/get":18,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],137:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseDisplay2=require('./BaseDisplay');var _BaseDisplay3=_interopRequireDefault(_BaseDisplay2);var _displayUtils=require('../utils/display-utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={threshold:{type:'float',default:null,nullable:true,metas:{kind:'dynamic'}},thresholdIndex:{type:'integer',default:0,metas:{kind:'dynamic'}},color:{type:'string',default:(0,_displayUtils.getColors)('marker'),nullable:true,metas:{kind:'dynamic'}}};/**
 * Display a marker according to a `vector` input frame.
 *
 * @memberof module:client.sink
 *
 * @param {Object} options - Override default parameters.
 * @param {String} options.color - Color of the marker.
 * @param {Number} [options.thresholdIndex=0] - Index of the incomming frame
 *  data to compare against the threshold. _Should be used in conjonction with
 *  `threshold`_.
 * @param {Number} [options.threshold=null] - Minimum value the incomming value
 *  must have to trigger the display of a marker. If null each incomming event
 *  triggers a marker. _Should be used in conjonction with `thresholdIndex`_.
 * @param {Number} [options.width=300] - Width of the canvas.
 *  _dynamic parameter_
 * @param {Number} [options.height=150] - Height of the canvas.
 *  _dynamic parameter_
 * @param {Element|CSSSelector} [options.container=null] - Container element
 *  in which to insert the canvas. _constant parameter_
 * @param {Element|CSSSelector} [options.canvas=null] - Canvas element
 *  in which to draw. _constant parameter_
 * @param {Number} [options.duration=1] - Duration (in seconds) represented in
 *  the canvas. This parameter only exists for operators that display several
 *  consecutive frames on the canvas. _dynamic parameter_
 * @param {Number} [options.referenceTime=null] - Optionnal reference time the
 *  display should considerer as the origin. Is only usefull when synchronizing
 *  several display using the `DisplaySync` class. This parameter only exists
 *  for operators that display several consecutive frames on the canvas.
 *
 * @example
 * import * as lfo from 'waves-lfo/client';
 *
 * const eventIn = new lfo.source.EventIn({
 *   frameType: 'scalar',
 * });
 *
 * const marker = new lfo.sink.MarkerDisplay({
 *   canvas: '#marker',
 *   threshold: 0.5,
 * });
 *
 * eventIn.connect(marker);
 * eventIn.start();
 *
 * let time = 0;
 * const period = 1;
 *
 * (function generateData() {
 *   eventIn.process(time, Math.random());
 *
 *   time += period;
 *   setTimeout(generateData, period * 1000);
 * }());
 */var MarkerDisplay=function(_BaseDisplay){(0,_inherits3.default)(MarkerDisplay,_BaseDisplay);function MarkerDisplay(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,MarkerDisplay);return(0,_possibleConstructorReturn3.default)(this,(MarkerDisplay.__proto__||(0,_getPrototypeOf2.default)(MarkerDisplay)).call(this,definitions,options));}/** @private */(0,_createClass3.default)(MarkerDisplay,[{key:'processVector',value:function processVector(frame,frameWidth,pixelsSinceLastFrame){var color=this.params.get('color');var threshold=this.params.get('threshold');var thresholdIndex=this.params.get('thresholdIndex');var ctx=this.ctx;var height=ctx.height;var value=frame.data[thresholdIndex];if(threshold===null||value>=threshold){var yMin=this.getYPosition(this.params.get('min'));var yMax=this.getYPosition(this.params.get('max'));if(yMin>yMax){var v=yMax;yMax=yMin;yMin=v;}ctx.save();ctx.fillStyle=color;ctx.fillRect(0,yMin,1,yMax);ctx.restore();}}}]);return MarkerDisplay;}(_BaseDisplay3.default);exports.default=MarkerDisplay;},{"../utils/display-utils":151,"./BaseDisplay":135,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],138:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseDisplay2=require('./BaseDisplay');var _BaseDisplay3=_interopRequireDefault(_BaseDisplay2);var _displayUtils=require('../utils/display-utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var floor=Math.floor;var ceil=Math.ceil;function downSample(data,targetLength){var length=data.length;var hop=length/targetLength;var target=new Float32Array(targetLength);var counter=0;for(var i=0;i<targetLength;i++){var index=floor(counter);var phase=counter-index;var prev=data[index];var next=data[index+1];target[i]=(next-prev)*phase+prev;counter+=hop;}return target;}var definitions={color:{type:'string',default:(0,_displayUtils.getColors)('signal'),nullable:true}};/**
 * Display a stream of type `signal` on a canvas.
 *
 * @param {Object} options - Override default parameters.
 * @param {String} [options.color='#00e600'] - Color of the signal.
 * @param {Number} [options.min=-1] - Minimum value represented in the canvas.
 *  _dynamic parameter_
 * @param {Number} [options.max=1] - Maximum value represented in the canvas.
 *  _dynamic parameter_
 * @param {Number} [options.width=300] - Width of the canvas.
 *  _dynamic parameter_
 * @param {Number} [options.height=150] - Height of the canvas.
 *  _dynamic parameter_
 * @param {Element|CSSSelector} [options.container=null] - Container element
 *  in which to insert the canvas. _constant parameter_
 * @param {Element|CSSSelector} [options.canvas=null] - Canvas element
 *  in which to draw. _constant parameter_
 * @param {Number} [options.duration=1] - Duration (in seconds) represented in
 *  the canvas. This parameter only exists for operators that display several
 *  consecutive frames on the canvas. _dynamic parameter_
 * @param {Number} [options.referenceTime=null] - Optionnal reference time the
 *  display should considerer as the origin. Is only usefull when synchronizing
 *  several display using the `DisplaySync` class. This parameter only exists
 *  for operators that display several consecutive frames on the canvas.
 *
 * @memberof module:client.sink
 *
 * @example
 * const eventIn = new lfo.source.EventIn({
 *   frameType: 'signal',
 *   sampleRate: 8,
 *   frameSize: 4,
 * });
 *
 * const signalDisplay = new lfo.sink.SignalDisplay({
 *   canvas: '#signal-canvas',
 * });
 *
 * eventIn.connect(signalDisplay);
 * eventIn.start();
 *
 * // push triangle signal in the graph
 * eventIn.process(0, [0, 0.5, 1, 0.5]);
 * eventIn.process(0.5, [0, -0.5, -1, -0.5]);
 * // ...
 */var SignalDisplay=function(_BaseDisplay){(0,_inherits3.default)(SignalDisplay,_BaseDisplay);function SignalDisplay(options){(0,_classCallCheck3.default)(this,SignalDisplay);var _this=(0,_possibleConstructorReturn3.default)(this,(SignalDisplay.__proto__||(0,_getPrototypeOf2.default)(SignalDisplay)).call(this,definitions,options,true));_this.lastPosY=null;return _this;}/** @private */(0,_createClass3.default)(SignalDisplay,[{key:'processSignal',value:function processSignal(frame,frameWidth,pixelsSinceLastFrame){var color=this.params.get('color');var frameSize=this.streamParams.frameSize;var ctx=this.ctx;var data=frame.data;if(frameWidth<frameSize)data=downSample(data,frameWidth);var length=data.length;var hopX=frameWidth/length;var posX=0;var lastY=this.lastPosY;ctx.strokeStyle=color;ctx.beginPath();for(var i=0;i<data.length;i++){var posY=this.getYPosition(data[i]);if(lastY===null){ctx.moveTo(posX,posY);}else{if(i===0)ctx.moveTo(-hopX,lastY);ctx.lineTo(posX,posY);}posX+=hopX;lastY=posY;}ctx.stroke();ctx.closePath();this.lastPosY=lastY;}}]);return SignalDisplay;}(_BaseDisplay3.default);exports.default=SignalDisplay;},{"../utils/display-utils":151,"./BaseDisplay":135,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],139:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _promise=require('babel-runtime/core-js/promise');var _promise2=_interopRequireDefault(_promise);var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _get2=require('babel-runtime/helpers/get');var _get3=_interopRequireDefault(_get2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);var _wsUtils=require('../../common/utils/wsUtils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var parameters={port:{type:'integer',default:8000,nullable:true,constant:true},url:{type:'string',default:null,nullable:true,constant:true/**
   * Send an lfo frame as a socket message to a `node.source.SocketReceive`
   * instance.
   *
   * <p class="warning">Experimental</p>
   *
   * @memberof module:client.sink
   *
   * @example
   * const eventIn = new lfo.source.EventIn({
   *   frameType: 'vector',
   *   frameSize: 2,
   *   frameRate: 1,
   * });
   *
   * const socketSend = new lfo.sink.SocketSend({
   *   port: 3000
   * });
   *
   * eventIn.connect(socketSend);
   *
   * eventIn.init().then(() => {
   *   eventIn.start();
   *
   *   let time = 0;
   *
   *   (function createFrame() {
   *     eventIn.process(time, [Math.random(), Math.random()], { test: true });
   *     time += 1;
   *
   *     setTimeout(createFrame, 1000);
   *   }());
   * });
   */}};var SocketSend=function(_BaseLfo){(0,_inherits3.default)(SocketSend,_BaseLfo);function SocketSend(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,SocketSend);var _this=(0,_possibleConstructorReturn3.default)(this,(SocketSend.__proto__||(0,_getPrototypeOf2.default)(SocketSend)).call(this,parameters,options));var protocol=window.location.protocol.replace(/^http/,'ws');var address=_this.params.get('url')||window.location.hostname;var port=_this.params.get('port')||'';// everything falsy becomes ''
var socketAddress=protocol+'//'+address+':'+port;_this.socket=new WebSocket(socketAddress);_this.socket.binaryType='arraybuffer';_this.openedPromise=new _promise2.default(function(resolve,reject){_this.socket.onopen=resolve;});_this.socket.onerror=function(err){return console.error(err.stack);};return _this;}(0,_createClass3.default)(SocketSend,[{key:'initModule',value:function initModule(){var _this2=this;// send a INIT_MODULE_REQ and wait for INIT_MODULE_ACK
// no need to get children promises as we are in a leef
return this.openedPromise.then(function(){return new _promise2.default(function(resolve,reject){_this2.socket.onmessage=function(e){var opcode=_wsUtils.decoders.opcode(e.data);if(opcode===_wsUtils.opcodes.INIT_MODULE_ACK)resolve();};var buffer=_wsUtils.encoders.initModuleReq();_this2.socket.send(buffer);});});}},{key:'processStreamParams',value:function processStreamParams(prevStreamParams){(0,_get3.default)(SocketSend.prototype.__proto__||(0,_getPrototypeOf2.default)(SocketSend.prototype),'processStreamParams',this).call(this,prevStreamParams);var buffer=_wsUtils.encoders.streamParams(this.streamParams);this.socket.send(buffer);}},{key:'resetStream',value:function resetStream(){(0,_get3.default)(SocketSend.prototype.__proto__||(0,_getPrototypeOf2.default)(SocketSend.prototype),'resetStream',this).call(this);var buffer=_wsUtils.encoders.resetStream();this.socket.send(buffer);}/** @private */},{key:'finalizeStream',value:function finalizeStream(endTime){(0,_get3.default)(SocketSend.prototype.__proto__||(0,_getPrototypeOf2.default)(SocketSend.prototype),'finalizeStream',this).call(this,endTime);var buffer=_wsUtils.encoders.finalizeStream(endTime);this.socket.send(buffer);}// process any type
/** @private */},{key:'processScalar',value:function processScalar(){}/** @private */},{key:'processVector',value:function processVector(){}/** @private */},{key:'processSignal',value:function processSignal(){}},{key:'processFrame',value:function processFrame(frame){var frameSize=this.streamParams.frameSize;this.frame.time=frame.time;this.frame.data.set(frame.data,0);this.frame.metadata=frame.metadata;var buffer=_wsUtils.encoders.processFrame(this.frame,frameSize);this.socket.send(buffer);}}]);return SocketSend;}(_BaseLfo3.default);exports.default=SocketSend;},{"../../common/utils/wsUtils":181,"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/core-js/promise":12,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/get":18,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],140:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _log=require('babel-runtime/core-js/math/log10');var _log2=_interopRequireDefault(_log);var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseDisplay2=require('./BaseDisplay');var _BaseDisplay3=_interopRequireDefault(_BaseDisplay2);var _Fft=require('../../common/operator/Fft');var _Fft2=_interopRequireDefault(_Fft);var _displayUtils=require('../utils/display-utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={scale:{type:'float',default:1,metas:{kind:'dynamic'}},color:{type:'string',default:(0,_displayUtils.getColors)('spectrum'),nullable:true,metas:{kind:'dynamic'}},min:{type:'float',default:-80,metas:{kind:'dynamic'}},max:{type:'float',default:6,metas:{kind:'dynamic'}}};/**
 * Display the spectrum of the incomming `signal` input.
 *
 * @memberof module:client.sink
 *
 * @param {Object} options - Override default parameters.
 * @param {Number} [options.scale=1] - Scale display of the spectrogram.
 * @param {String} [options.color=null] - Color of the spectrogram.
 * @param {Number} [options.min=-80] - Minimum displayed value (in dB).
 * @param {Number} [options.max=6] - Maximum displayed value (in dB).
 * @param {Number} [options.width=300] - Width of the canvas.
 *  _dynamic parameter_
 * @param {Number} [options.height=150] - Height of the canvas.
 *  _dynamic parameter_
 * @param {Element|CSSSelector} [options.container=null] - Container element
 *  in which to insert the canvas. _constant parameter_
 * @param {Element|CSSSelector} [options.canvas=null] - Canvas element
 *  in which to draw. _constant parameter_
 *
 * @todo - expose more `fft` config options
 *
 * @example
 * import * as lfo from 'waves-lfo/client';
 *
 * const audioContext = new AudioContext();
 *
 * navigator.mediaDevices
 *   .getUserMedia({ audio: true })
 *   .then(init)
 *   .catch((err) => console.error(err.stack));
 *
 * function init(stream) {
 *   const source = audioContext.createMediaStreamSource(stream);
 *
 *   const audioInNode = new lfo.source.AudioInNode({
 *     audioContext: audioContext,
 *     sourceNode: source,
 *   });
 *
 *   const spectrum = new lfo.sink.SpectrumDisplay({
 *     canvas: '#spectrum',
 *   });
 *
 *   audioInNode.connect(spectrum);
 *   audioInNode.start();
 * }
 */var SpectrumDisplay=function(_BaseDisplay){(0,_inherits3.default)(SpectrumDisplay,_BaseDisplay);function SpectrumDisplay(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,SpectrumDisplay);return(0,_possibleConstructorReturn3.default)(this,(SpectrumDisplay.__proto__||(0,_getPrototypeOf2.default)(SpectrumDisplay)).call(this,definitions,options,false));}/** @private */(0,_createClass3.default)(SpectrumDisplay,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);this.fft=new _Fft2.default({size:this.streamParams.frameSize,window:'hann',norm:'linear'});this.fft.initStream(this.streamParams);this.propagateStreamParams();}/** @private */},{key:'processSignal',value:function processSignal(frame){var bins=this.fft.inputSignal(frame.data);var nbrBins=bins.length;var width=this.canvasWidth;var height=this.canvasHeight;var scale=this.params.get('scale');var binWidth=width/nbrBins;var ctx=this.ctx;ctx.fillStyle=this.params.get('color');// error handling needs review...
var error=0;for(var i=0;i<nbrBins;i++){var x1Float=i*binWidth+error;var x1Int=Math.round(x1Float);var x2Float=x1Float+(binWidth-error);var x2Int=Math.round(x2Float);error=x2Int-x2Float;if(x1Int!==x2Int){var _width=x2Int-x1Int;var db=20*(0,_log2.default)(bins[i]);var y=this.getYPosition(db*scale);ctx.fillRect(x1Int,y,_width,height-y);}else{error-=binWidth;}}}}]);return SpectrumDisplay;}(_BaseDisplay3.default);exports.default=SpectrumDisplay;},{"../../common/operator/Fft":156,"../utils/display-utils":151,"./BaseDisplay":135,"babel-runtime/core-js/math/log10":4,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],141:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseDisplay2=require('./BaseDisplay');var _BaseDisplay3=_interopRequireDefault(_BaseDisplay2);var _displayUtils=require('../utils/display-utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={color:{type:'string',default:(0,_displayUtils.getColors)('trace'),metas:{kind:'dynamic'}},colorScheme:{type:'enum',default:'none',list:['none','hue','opacity']}};/**
 * Display a range value around a mean value (for example mean
 * and standart deviation).
 *
 * This sink can handle input of type `vector` of frameSize >= 2.
 *
 * @param {Object} options - Override default parameters.
 * @param {String} [options.color='orange'] - Color.
 * @param {String} [options.colorScheme='none'] - If a third value is available
 *  in the input, can be used to control the opacity or the hue. If input frame
 *  size is 2, this param is automatically set to `none`
 * @param {Number} [options.min=-1] - Minimum value represented in the canvas.
 *  _dynamic parameter_
 * @param {Number} [options.max=1] - Maximum value represented in the canvas.
 *  _dynamic parameter_
 * @param {Number} [options.width=300] - Width of the canvas.
 *  _dynamic parameter_
 * @param {Number} [options.height=150] - Height of the canvas.
 *  _dynamic parameter_
 * @param {Element|CSSSelector} [options.container=null] - Container element
 *  in which to insert the canvas. _constant parameter_
 * @param {Element|CSSSelector} [options.canvas=null] - Canvas element
 *  in which to draw. _constant parameter_
 * @param {Number} [options.duration=1] - Duration (in seconds) represented in
 *  the canvas. _dynamic parameter_
 * @param {Number} [options.referenceTime=null] - Optionnal reference time the
 *  display should considerer as the origin. Is only usefull when synchronizing
 *  several display using the `DisplaySync` class.
 *
 * @memberof module:client.sink
 *
 * @example
 * import * as lfo from 'waves-lfo/client';
 *
 * const AudioContext = (window.AudioContext || window.webkitAudioContext);
 * const audioContext = new AudioContext();
 *
 * navigator.mediaDevices
 *   .getUserMedia({ audio: true })
 *   .then(init)
 *   .catch((err) => console.error(err.stack));
 *
 * function init(stream) {
 *   const source = audioContext.createMediaStreamSource(stream);
 *
 *   const audioInNode = new lfo.source.AudioInNode({
 *     sourceNode: source,
 *     audioContext: audioContext,
 *   });
 *
 *   // not sure it make sens but...
 *   const meanStddev = new lfo.operator.MeanStddev();
 *
 *   const traceDisplay = new lfo.sink.TraceDisplay({
 *     canvas: '#trace',
 *   });
 *
 *   const logger = new lfo.sink.Logger({ data: true });
 *
 *   audioInNode.connect(meanStddev);
 *   meanStddev.connect(traceDisplay);
 *
 *   audioInNode.start();
 * }
 */var TraceDisplay=function(_BaseDisplay){(0,_inherits3.default)(TraceDisplay,_BaseDisplay);function TraceDisplay(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,TraceDisplay);var _this=(0,_possibleConstructorReturn3.default)(this,(TraceDisplay.__proto__||(0,_getPrototypeOf2.default)(TraceDisplay)).call(this,definitions,options));_this.prevFrame=null;return _this;}/** @private */(0,_createClass3.default)(TraceDisplay,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);if(this.streamParams.frameSize===2)this.params.set('colorScheme','none');this.propagateStreamParams();}/** @private */},{key:'processVector',value:function processVector(frame,frameWidth,pixelsSinceLastFrame){var colorScheme=this.params.get('colorScheme');var ctx=this.ctx;var prevData=this.prevFrame?this.prevFrame.data:null;var data=frame.data;var halfRange=data[1]/2;var mean=this.getYPosition(data[0]);var min=this.getYPosition(data[0]-halfRange);var max=this.getYPosition(data[0]+halfRange);var prevHalfRange=void 0;var prevMean=void 0;var prevMin=void 0;var prevMax=void 0;if(prevData!==null){prevHalfRange=prevData[1]/2;prevMean=this.getYPosition(prevData[0]);prevMin=this.getYPosition(prevData[0]-prevHalfRange);prevMax=this.getYPosition(prevData[0]+prevHalfRange);}var color=this.params.get('color');var gradient=void 0;var rgb=void 0;switch(colorScheme){case'none':rgb=(0,_displayUtils.hexToRGB)(color);ctx.fillStyle='rgba('+rgb.join(',')+', 0.7)';ctx.strokeStyle=color;break;case'hue':gradient=ctx.createLinearGradient(-pixelsSinceLastFrame,0,0,0);if(prevData)gradient.addColorStop(0,'hsl('+(0,_displayUtils.getHue)(prevData[2])+', 100%, 50%)');else gradient.addColorStop(0,'hsl('+(0,_displayUtils.getHue)(data[2])+', 100%, 50%)');gradient.addColorStop(1,'hsl('+(0,_displayUtils.getHue)(data[2])+', 100%, 50%)');ctx.fillStyle=gradient;break;case'opacity':rgb=(0,_displayUtils.hexToRGB)(this.params.get('color'));gradient=ctx.createLinearGradient(-pixelsSinceLastFrame,0,0,0);if(prevData)gradient.addColorStop(0,'rgba('+rgb.join(',')+', '+prevData[2]+')');else gradient.addColorStop(0,'rgba('+rgb.join(',')+', '+data[2]+')');gradient.addColorStop(1,'rgba('+rgb.join(',')+', '+data[2]+')');ctx.fillStyle=gradient;break;}ctx.save();// draw range
ctx.beginPath();ctx.moveTo(0,mean);ctx.lineTo(0,max);if(prevData!==null){ctx.lineTo(-pixelsSinceLastFrame,prevMax);ctx.lineTo(-pixelsSinceLastFrame,prevMin);}ctx.lineTo(0,min);ctx.closePath();ctx.fill();// draw mean
if(colorScheme==='none'&&prevMean){ctx.beginPath();ctx.moveTo(-pixelsSinceLastFrame,prevMean);ctx.lineTo(0,mean);ctx.closePath();ctx.stroke();}ctx.restore();this.prevFrame=frame;}}]);return TraceDisplay;}(_BaseDisplay3.default);;exports.default=TraceDisplay;},{"../utils/display-utils":151,"./BaseDisplay":135,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],142:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _log=require('babel-runtime/core-js/math/log10');var _log2=_interopRequireDefault(_log);var _BaseDisplay2=require('./BaseDisplay');var _BaseDisplay3=_interopRequireDefault(_BaseDisplay2);var _Rms=require('../../common/operator/Rms');var _Rms2=_interopRequireDefault(_Rms);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var log10=_log2.default;var definitions={offset:{type:'float',default:-14,metas:{kind:'dyanmic'}},min:{type:'float',default:-80,metas:{kind:'dynamic'}},max:{type:'float',default:6,metas:{kind:'dynamic'}},width:{type:'integer',default:6,metas:{kind:'dynamic'}/**
   * Simple VU-Meter to used on a `signal` stream.
   *
   * @memberof module:client.sink
   *
   * @param {Object} options - Override defaults parameters.
   * @param {Number} [options.offset=-14] - dB offset applied to the signal.
   * @param {Number} [options.min=-80] - Minimum displayed value (in dB).
   * @param {Number} [options.max=6] - Maximum displayed value (in dB).
   * @param {Number} [options.width=6] - Width of the display (in pixels).
   * @param {Number} [options.height=150] - Height of the canvas.
   * @param {Element|CSSSelector} [options.container=null] - Container element
   *  in which to insert the canvas.
   * @param {Element|CSSSelector} [options.canvas=null] - Canvas element
   *  in which to draw.
   *
   * @example
   * import * as lfo from 'waves-lfo/client';
   *
   * const audioContext = new window.AudioContext();
   *
   * navigator.mediaDevices
   *   .getUserMedia({ audio: true })
   *   .then(init)
   *   .catch((err) => console.error(err.stack));
   *
   * function init(stream) {
   *   const source = audioContext.createMediaStreamSource(stream);
   *
   *   const audioInNode = new lfo.source.AudioInNode({
   *     audioContext: audioContext,
   *     sourceNode: source,
   *   });
   *
   *   const vuMeter = new lfo.sink.VuMeterDisplay({
   *     canvas: '#vu-meter',
   *   });
   *
   *   audioInNode.connect(vuMeter);
   *   audioInNode.start();
   * }
   */}};var VuMeterDisplay=function(_BaseDisplay){(0,_inherits3.default)(VuMeterDisplay,_BaseDisplay);function VuMeterDisplay(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,VuMeterDisplay);var _this=(0,_possibleConstructorReturn3.default)(this,(VuMeterDisplay.__proto__||(0,_getPrototypeOf2.default)(VuMeterDisplay)).call(this,definitions,options,false));_this.rmsOperator=new _Rms2.default();_this.lastDB=0;_this.peak={value:0,time:0};_this.peakLifetime=1;// sec
return _this;}/** @private */(0,_createClass3.default)(VuMeterDisplay,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);this.rmsOperator.initStream(this.streamParams);this.propagateStreamParams();}/** @private */},{key:'processSignal',value:function processSignal(frame){var now=new Date().getTime()/1000;// sec
var offset=this.params.get('offset');// offset zero of the vu meter
var height=this.canvasHeight;var width=this.canvasWidth;var ctx=this.ctx;var lastDB=this.lastDB;var peak=this.peak;var red='#ff2121';var yellow='#ffff1f';var green='#00ff00';// handle current db value
var rms=this.rmsOperator.inputSignal(frame.data);var dB=20*log10(rms)-offset;// slow release (could probably be improved)
if(lastDB>dB)dB=lastDB-6;// handle peak
if(dB>peak.value||now-peak.time>this.peakLifetime){peak.value=dB;peak.time=now;}var y0=this.getYPosition(0);var y=this.getYPosition(dB);var yPeak=this.getYPosition(peak.value);ctx.save();ctx.fillStyle='#000000';ctx.fillRect(0,0,width,height);var gradient=ctx.createLinearGradient(0,height,0,0);gradient.addColorStop(0,green);gradient.addColorStop((height-y0)/height,yellow);gradient.addColorStop(1,red);// dB
ctx.fillStyle=gradient;ctx.fillRect(0,y,width,height-y);// 0 dB marker
ctx.fillStyle='#dcdcdc';ctx.fillRect(0,y0,width,2);// peak
ctx.fillStyle=gradient;ctx.fillRect(0,yPeak,width,2);ctx.restore();this.lastDB=dB;}}]);return VuMeterDisplay;}(_BaseDisplay3.default);exports.default=VuMeterDisplay;},{"../../common/operator/Rms":168,"./BaseDisplay":135,"babel-runtime/core-js/math/log10":4,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],143:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseDisplay2=require('./BaseDisplay');var _BaseDisplay3=_interopRequireDefault(_BaseDisplay2);var _MinMax=require('../../common/operator/MinMax');var _MinMax2=_interopRequireDefault(_MinMax);var _Rms=require('../../common/operator/Rms');var _Rms2=_interopRequireDefault(_Rms);var _displayUtils=require('../utils/display-utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={colors:{type:'any',default:(0,_displayUtils.getColors)('waveform'),metas:{kind:'dyanmic'}},rms:{type:'boolean',default:false,metas:{kind:'dyanmic'}}};/**
 * Display a waveform (along with optionnal Rms) of a given `signal` input in
 * a canvas.
 *
 * @param {Object} options - Override default parameters.
 * @param {Array<String>} [options.colors=['waveform', 'rms']] - Array
 *  containing the color codes for the waveform (index 0) and rms (index 1).
 *  _dynamic parameter_
 * @param {Boolean} [options.rms=false] - Set to `true` to display the rms.
 *  _dynamic parameter_
 * @param {Number} [options.duration=1] - Duration (in seconds) represented in
 *  the canvas. _dynamic parameter_
 * @param {Number} [options.min=-1] - Minimum value represented in the canvas.
 *  _dynamic parameter_
 * @param {Number} [options.max=1] - Maximum value represented in the canvas.
 *  _dynamic parameter_
 * @param {Number} [options.width=300] - Width of the canvas.
 *  _dynamic parameter_
 * @param {Number} [options.height=150] - Height of the canvas.
 *  _dynamic parameter_
 * @param {Element|CSSSelector} [options.container=null] - Container element
 *  in which to insert the canvas. _constant parameter_
 * @param {Element|CSSSelector} [options.canvas=null] - Canvas element
 *  in which to draw. _constant parameter_
 * @param {Number} [options.referenceTime=null] - Optionnal reference time the
 *  display should considerer as the origin. Is only usefull when synchronizing
 *  several display using the `DisplaySync` class.
 *
 * @memberof module:client.sink
 *
 * @example
 * import * as lfo from 'waves-lfo/client';
 *
 * const audioContext = new window.AudioContext();
 *
 * navigator.mediaDevices
 *   .getUserMedia({ audio: true })
 *   .then(init)
 *   .catch((err) => console.error(err.stack));
 *
 * function init(stream) {
 *   const audioIn = audioContext.createMediaStreamSource(stream);
 *
 *   const audioInNode = new lfo.source.AudioInNode({
 *     audioContext: audioContext,
 *     sourceNode: audioIn,
 *     frameSize: 512,
 *   });
 *
 *   const waveformDisplay = new lfo.sink.WaveformDisplay({
 *     canvas: '#waveform',
 *     duration: 3.5,
 *     rms: true,
 *   });
 *
 *   audioInNode.connect(waveformDisplay);
 *   audioInNode.start();
 * });
 */var WaveformDisplay=function(_BaseDisplay){(0,_inherits3.default)(WaveformDisplay,_BaseDisplay);function WaveformDisplay(options){(0,_classCallCheck3.default)(this,WaveformDisplay);var _this=(0,_possibleConstructorReturn3.default)(this,(WaveformDisplay.__proto__||(0,_getPrototypeOf2.default)(WaveformDisplay)).call(this,definitions,options,true));_this.minMaxOperator=new _MinMax2.default();_this.rmsOperator=new _Rms2.default();return _this;}/** @private */(0,_createClass3.default)(WaveformDisplay,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);this.minMaxOperator.initStream(this.streamParams);this.rmsOperator.initStream(this.streamParams);this.propagateStreamParams();}/** @private */},{key:'processSignal',value:function processSignal(frame,frameWidth,pixelsSinceLastFrame){// drop frames that cannot be displayed
if(frameWidth<1)return;var colors=this.params.get('colors');var showRms=this.params.get('rms');var ctx=this.ctx;var data=frame.data;var iSamplesPerPixels=Math.floor(data.length/frameWidth);for(var index=0;index<frameWidth;index++){var start=index*iSamplesPerPixels;var end=index===frameWidth-1?undefined:start+iSamplesPerPixels;var slice=data.subarray(start,end);var minMax=this.minMaxOperator.inputSignal(slice);var minY=this.getYPosition(minMax[0]);var maxY=this.getYPosition(minMax[1]);ctx.strokeStyle=colors[0];ctx.beginPath();ctx.moveTo(index,minY);ctx.lineTo(index,maxY);ctx.closePath();ctx.stroke();if(showRms){var rms=this.rmsOperator.inputSignal(slice);var rmsMaxY=this.getYPosition(rms);var rmsMinY=this.getYPosition(-rms);ctx.strokeStyle=colors[1];ctx.beginPath();ctx.moveTo(index,rmsMinY);ctx.lineTo(index,rmsMaxY);ctx.closePath();ctx.stroke();}}}}]);return WaveformDisplay;}(_BaseDisplay3.default);exports.default=WaveformDisplay;},{"../../common/operator/MinMax":162,"../../common/operator/Rms":168,"../utils/display-utils":151,"./BaseDisplay":135,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],144:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _Bridge=require('../../common/sink/Bridge');var _Bridge2=_interopRequireDefault(_Bridge);var _Logger=require('../../common/sink/Logger');var _Logger2=_interopRequireDefault(_Logger);var _DataRecorder=require('../../common/sink/DataRecorder');var _DataRecorder2=_interopRequireDefault(_DataRecorder);var _SignalRecorder=require('../../common/sink/SignalRecorder');var _SignalRecorder2=_interopRequireDefault(_SignalRecorder);var _BaseDisplay=require('./BaseDisplay');var _BaseDisplay2=_interopRequireDefault(_BaseDisplay);var _BarChartDisplay=require('./BarChartDisplay');var _BarChartDisplay2=_interopRequireDefault(_BarChartDisplay);var _BpfDisplay=require('./BpfDisplay');var _BpfDisplay2=_interopRequireDefault(_BpfDisplay);var _MarkerDisplay=require('./MarkerDisplay');var _MarkerDisplay2=_interopRequireDefault(_MarkerDisplay);var _SignalDisplay=require('./SignalDisplay');var _SignalDisplay2=_interopRequireDefault(_SignalDisplay);var _SocketSend=require('./SocketSend');var _SocketSend2=_interopRequireDefault(_SocketSend);var _SpectrumDisplay=require('./SpectrumDisplay');var _SpectrumDisplay2=_interopRequireDefault(_SpectrumDisplay);var _TraceDisplay=require('./TraceDisplay');var _TraceDisplay2=_interopRequireDefault(_TraceDisplay);var _VuMeterDisplay=require('./VuMeterDisplay');var _VuMeterDisplay2=_interopRequireDefault(_VuMeterDisplay);var _WaveformDisplay=require('./WaveformDisplay');var _WaveformDisplay2=_interopRequireDefault(_WaveformDisplay);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}// client only
// common
exports.default={Bridge:_Bridge2.default,Logger:_Logger2.default,DataRecorder:_DataRecorder2.default,SignalRecorder:_SignalRecorder2.default,BaseDisplay:_BaseDisplay2.default,BarChartDisplay:_BarChartDisplay2.default,BpfDisplay:_BpfDisplay2.default,MarkerDisplay:_MarkerDisplay2.default,SignalDisplay:_SignalDisplay2.default,SocketSend:_SocketSend2.default,SpectrumDisplay:_SpectrumDisplay2.default,TraceDisplay:_TraceDisplay2.default,VuMeterDisplay:_VuMeterDisplay2.default,WaveformDisplay:_WaveformDisplay2.default};},{"../../common/sink/Bridge":175,"../../common/sink/DataRecorder":176,"../../common/sink/Logger":177,"../../common/sink/SignalRecorder":178,"./BarChartDisplay":134,"./BaseDisplay":135,"./BpfDisplay":136,"./MarkerDisplay":137,"./SignalDisplay":138,"./SocketSend":139,"./SpectrumDisplay":140,"./TraceDisplay":141,"./VuMeterDisplay":142,"./WaveformDisplay":143}],145:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _defineProperty2=require('babel-runtime/helpers/defineProperty');var _defineProperty3=_interopRequireDefault(_defineProperty2);var _definitions;var _BaseLfo=require('../../core/BaseLfo');var _BaseLfo2=_interopRequireDefault(_BaseLfo);var _SourceMixin2=require('../../core/SourceMixin');var _SourceMixin3=_interopRequireDefault(_SourceMixin2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions=(_definitions={audioBuffer:{type:'any',default:null,constant:true},frameSize:{type:'integer',default:512,constant:true},channel:{type:'integer',default:0,constant:true},progressCallback:{type:'any',default:null,nullable:true,constant:true}},(0,_defineProperty3.default)(_definitions,'progressCallback',{type:'any',default:null,nullable:true,constant:true}),(0,_defineProperty3.default)(_definitions,'async',{type:'boolean',default:false}),_definitions);var noop=function noop(){};/**
 * Slice an `AudioBuffer` into signal blocks and propagate the resulting frames
 * through the graph.
 *
 * @param {Object} options - Override parameter' default values.
 * @param {AudioBuffer} [options.audioBuffer] - Audio buffer to process.
 * @param {Number} [options.frameSize=512] - Size of the output blocks.
 * @param {Number} [options.channel=0] - Number of the channel to process.
 * @param {Number} [options.progressCallback=null] - Callback to be excuted on each
 *  frame output, receive as argument the current progress ratio.
 *
 * @memberof module:client.source
 *
 * @example
 * import * as lfo from 'waves-lfo/client';
 *
 * const audioInBuffer = new lfo.source.AudioInBuffer({
 *   audioBuffer: audioBuffer,
 *   frameSize: 512,
 * });
 *
 * const waveform = new lfo.sink.Waveform({
 *   canvas: '#waveform',
 *   duration: 1,
 *   color: 'steelblue',
 *   rms: true,
 * });
 *
 * audioInBuffer.connect(waveform);
 * audioInBuffer.start();
 */var AudioInBuffer=function(_SourceMixin){(0,_inherits3.default)(AudioInBuffer,_SourceMixin);function AudioInBuffer(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,AudioInBuffer);var _this=(0,_possibleConstructorReturn3.default)(this,(AudioInBuffer.__proto__||(0,_getPrototypeOf2.default)(AudioInBuffer)).call(this,definitions,options));var audioBuffer=_this.params.get('audioBuffer');if(!audioBuffer)throw new Error('Invalid "audioBuffer" parameter');_this.endTime=0;return _this;}/**
   * Propagate the `streamParams` in the graph and start propagating frames.
   * When called, the slicing of the given `audioBuffer` starts immediately and
   * each resulting frame is propagated in graph.
   *
   * @see {@link module:core.BaseLfo#processStreamParams}
   * @see {@link module:core.BaseLfo#resetStream}
   * @see {@link module:client.source.AudioInBuffer#stop}
   */(0,_createClass3.default)(AudioInBuffer,[{key:'start',value:function start(){if(this.initialized===false){if(this.initPromise===null)// init has not yet been called
this.initPromise=this.init();this.initPromise.then(this.start);return;}var channel=this.params.get('channel');var audioBuffer=this.params.get('audioBuffer');var buffer=audioBuffer.getChannelData(channel);this.endTime=0;this.started=true;this.processFrame(buffer);}/**
     * Finalize the stream and stop the whole graph. When called, the slicing of
     * the `audioBuffer` stops immediately.
     *
     * @see {@link module:core.BaseLfo#finalizeStream}
     * @see {@link module:client.source.AudioInBuffer#start}
     */},{key:'stop',value:function stop(){this.finalizeStream(this.endTime);this.started=false;}/** @private */},{key:'processStreamParams',value:function processStreamParams(){var audioBuffer=this.params.get('audioBuffer');var frameSize=this.params.get('frameSize');var sourceSampleRate=audioBuffer.sampleRate;var frameRate=sourceSampleRate/frameSize;this.streamParams.frameSize=frameSize;this.streamParams.frameRate=frameRate;this.streamParams.frameType='signal';this.streamParams.sourceSampleRate=sourceSampleRate;this.streamParams.sourceSampleCount=frameSize;this.propagateStreamParams();}/** @private */},{key:'processFrame',value:function processFrame(buffer){var async=this.params.get('async');var sampleRate=this.streamParams.sourceSampleRate;var frameSize=this.streamParams.frameSize;var progressCallback=this.params.get('progressCallback')||noop;var length=buffer.length;var nbrFrames=Math.ceil(buffer.length/frameSize);var data=this.frame.data;var that=this;var i=0;function slice(){var offset=i*frameSize;var nbrCopy=Math.min(length-offset,frameSize);for(var j=0;j<frameSize;j++){data[j]=j<nbrCopy?buffer[offset+j]:0;}that.frame.time=offset/sampleRate;that.endTime=that.frame.time+nbrCopy/sampleRate;that.propagateFrame();i+=1;progressCallback(i/nbrFrames);if(i<nbrFrames){if(async)setTimeout(slice,0);else slice();}else{that.finalizeStream(that.endTime);}};// allow the following to do the expected thing:
// audioIn.connect(recorder);
// audioIn.start();
// recorder.start();
setTimeout(slice,0);}}]);return AudioInBuffer;}((0,_SourceMixin3.default)(_BaseLfo2.default));exports.default=AudioInBuffer;},{"../../core/BaseLfo":182,"../../core/SourceMixin":183,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/defineProperty":17,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],146:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo=require('../../core/BaseLfo');var _BaseLfo2=_interopRequireDefault(_BaseLfo);var _SourceMixin2=require('../../core/SourceMixin');var _SourceMixin3=_interopRequireDefault(_SourceMixin2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var AudioContext=window.AudioContext||window.webkitAudioContext;var definitions={frameSize:{type:'integer',default:512,constant:true},channel:{type:'integer',default:0,constant:true},sourceNode:{type:'any',default:null,constant:true},audioContext:{type:'any',default:null,constant:true}};/**
 * Use a `WebAudio` node as a source for the graph.
 *
 * @param {Object} options - Override parameter' default values.
 * @param {AudioNode} [options.sourceNode=null] - Audio node to process
 *  (mandatory).
 * @param {AudioContext} [options.audioContext=null] - Audio context used to
 *  create the audio node (mandatory).
 * @param {Number} [options.frameSize=512] - Size of the output blocks, define
 *  the `frameSize` in the `streamParams`.
 * @param {Number} [options.channel=0] - Number of the channel to process.
 *
 * @memberof module:client.source
 *
 * @example
 * import * as lfo from 'waves-lfo/client';
 *
 * const audioContext = new AudioContext();
 * const sine = audioContext.createOscillator();
 * sine.frequency.value = 2;
 *
 * const audioInNode = new lfo.source.AudioInNode({
 *   audioContext: audioContext,
 *   sourceNode: sine,
 * });
 *
 * const signalDisplay = new lfo.sink.SignalDisplay({
 *   canvas: '#signal',
 *   duration: 1,
 * });
 *
 * audioInNode.connect(signalDisplay);
 *
 * // start the sine oscillator node and the lfo graph
 * sine.start();
 * audioInNode.start();
 */var AudioInNode=function(_SourceMixin){(0,_inherits3.default)(AudioInNode,_SourceMixin);function AudioInNode(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,AudioInNode);var _this=(0,_possibleConstructorReturn3.default)(this,(AudioInNode.__proto__||(0,_getPrototypeOf2.default)(AudioInNode)).call(this,definitions,options));var audioContext=_this.params.get('audioContext');var sourceNode=_this.params.get('sourceNode');if(!audioContext||!(audioContext instanceof AudioContext))throw new Error('Invalid `audioContext` parameter');if(!sourceNode||!(sourceNode instanceof AudioNode))throw new Error('Invalid `sourceNode` parameter');_this.sourceNode=sourceNode;_this._channel=_this.params.get('channel');_this._blockDuration=null;_this.processFrame=_this.processFrame.bind(_this);return _this;}/**
   * Propagate the `streamParams` in the graph and start to propagate signal
   * blocks produced by the audio node into the graph.
   *
   * @see {@link module:core.BaseLfo#processStreamParams}
   * @see {@link module:core.BaseLfo#resetStream}
   * @see {@link module:client.source.AudioInNode#stop}
   */(0,_createClass3.default)(AudioInNode,[{key:'start',value:function start(){if(this.initialized===false){if(this.initPromise===null)// init has not yet been called
this.initPromise=this.init();this.initPromise.then(this.start);return;}var audioContext=this.params.get('audioContext');var frameSize=this.params.get('frameSize');this.frame.time=0;// @note: recreate each time because of a firefox weird behavior
this.scriptProcessor=audioContext.createScriptProcessor(frameSize,1,1);this.scriptProcessor.onaudioprocess=this.processFrame;this.started=true;this.sourceNode.connect(this.scriptProcessor);this.scriptProcessor.connect(audioContext.destination);}/**
     * Finalize the stream and stop the whole graph.
     *
     * @see {@link module:core.BaseLfo#finalizeStream}
     * @see {@link module:client.source.AudioInNode#start}
     */},{key:'stop',value:function stop(){this.finalizeStream(this.frame.time);this.started=false;this.sourceNode.disconnect();this.scriptProcessor.disconnect();}/** @private */},{key:'processStreamParams',value:function processStreamParams(){var audioContext=this.params.get('audioContext');var frameSize=this.params.get('frameSize');var sampleRate=audioContext.sampleRate;this.streamParams.frameSize=frameSize;this.streamParams.frameRate=sampleRate/frameSize;this.streamParams.frameType='signal';this.streamParams.sourceSampleRate=sampleRate;this.streamParams.sourceSampleCount=frameSize;this._blockDuration=frameSize/sampleRate;this.propagateStreamParams();}/**
     * Basically the `scriptProcessor.onaudioprocess` callback
     * @private
     */},{key:'processFrame',value:function processFrame(e){if(this.started===false)return;this.frame.data=e.inputBuffer.getChannelData(this._channel);this.propagateFrame();this.frame.time+=this._blockDuration;}}]);return AudioInNode;}((0,_SourceMixin3.default)(_BaseLfo2.default));exports.default=AudioInNode;},{"../../core/BaseLfo":182,"../../core/SourceMixin":183,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],147:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _promise=require('babel-runtime/core-js/promise');var _promise2=_interopRequireDefault(_promise);var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);var _wsUtils=require('../../common/utils/wsUtils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var parameters={port:{type:'integer',default:8000,nullable:true,constant:true},url:{type:'string',default:null,nullable:true,constant:true/**
   * Receive an lfo frame as a socket message from a `node.sink.SocketSend`
   * instance.
   *
   * <p class="warning">Experimental</p>
   *
   * @memberof module:client.source
   *
   * @todo - handle init / start properly.
   */}};var SocketReceive=function(_BaseLfo){(0,_inherits3.default)(SocketReceive,_BaseLfo);function SocketReceive(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,SocketReceive);var _this=(0,_possibleConstructorReturn3.default)(this,(SocketReceive.__proto__||(0,_getPrototypeOf2.default)(SocketReceive)).call(this,parameters,options));var protocol=window.location.protocol.replace(/^http/,'ws');var address=_this.params.get('url')||window.location.hostname;var port=_this.params.get('port')||'';// everything falsy becomes ''
var socketAddress=protocol+'//'+address+':'+port;_this._dispatch=_this._dispatch.bind(_this);_this.socket=new WebSocket(socketAddress);_this.socket.binaryType='arraybuffer';_this.openedPromise=new _promise2.default(function(resolve,reject){_this.socket.onopen=resolve;});_this.socket.onmessage=_this._dispatch;_this.socket.onerror=function(err){return console.error(err.stack);};return _this;}/** @private */(0,_createClass3.default)(SocketReceive,[{key:'initModule',value:function initModule(){var _this2=this;var promises=this.nextModules.map(function(mod){return mod.initModule();});promises.push(this.openedPromise);// wait for children promises and send INIT_MODULE_ACK
_promise2.default.all(promises).then(function(){var buffer=_wsUtils.encoders.initModuleAck();_this2.socket.send(buffer);});}// process any type
/** @private */},{key:'processScalar',value:function processScalar(){}/** @private */},{key:'processVector',value:function processVector(){}/** @private */},{key:'processSignal',value:function processSignal(){}/** @private */},{key:'processFrame',value:function processFrame(frame){this.prepareFrame();this.frame=frame;this.propagateFrame();}/**
     * Decode and dispatch incomming frame according to opcode
     * @private
     */},{key:'_dispatch',value:function _dispatch(e){var arrayBuffer=e.data;var opcode=_wsUtils.decoders.opcode(arrayBuffer);switch(opcode){case _wsUtils.opcodes.INIT_MODULE_REQ:this.initModule();break;case _wsUtils.opcodes.PROCESS_STREAM_PARAMS:var prevStreamParams=_wsUtils.decoders.streamParams(arrayBuffer);this.processStreamParams(prevStreamParams);break;case _wsUtils.opcodes.RESET_STREAM:this.resetStream();break;case _wsUtils.opcodes.FINALIZE_STREAM:var endTime=_wsUtils.decoders.finalizeStream(arrayBuffer);this.finalizeStream(endTime);break;case _wsUtils.opcodes.PROCESS_FRAME:var frameSize=this.streamParams.frameSize;var frame=_wsUtils.decoders.processFrame(arrayBuffer,frameSize);this.processFrame(frame);break;}}}]);return SocketReceive;}(_BaseLfo3.default);exports.default=SocketReceive;},{"../../common/utils/wsUtils":181,"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/core-js/promise":12,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],148:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _EventIn=require('../../common/source/EventIn');var _EventIn2=_interopRequireDefault(_EventIn);var _AudioInBuffer=require('./AudioInBuffer');var _AudioInBuffer2=_interopRequireDefault(_AudioInBuffer);var _AudioInNode=require('./AudioInNode');var _AudioInNode2=_interopRequireDefault(_AudioInNode);var _SocketReceive=require('./SocketReceive');var _SocketReceive2=_interopRequireDefault(_SocketReceive);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}// common
exports.default={EventIn:_EventIn2.default,AudioInBuffer:_AudioInBuffer2.default,AudioInNode:_AudioInNode2.default,SocketReceive:_SocketReceive2.default};// client only
},{"../../common/source/EventIn":179,"./AudioInBuffer":145,"./AudioInNode":146,"./SocketReceive":147}],149:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=require("babel-runtime/helpers/classCallCheck");var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require("babel-runtime/helpers/createClass");var _createClass3=_interopRequireDefault(_createClass2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/**
 * Synchronize several display sinks to a common time.
 *
 * @param {...BaseDisplay} views - List of the display to synchronize.
 *
 * @memberof module:client.utils
 *
 * @example
 * import * as lfo from 'waves-lfo/client';
 *
 * const eventIn1 = new lfo.source.EventIn({
 *   frameType: 'scalar',
 *   frameSize: 1,
 * });
 *
 * const bpf1 = new lfo.sink.BpfDisplay({
 *   canvas: '#bpf-1',
 *   duration: 2,
 *   startTime: 0,
 *   min: 0,
 *   colors: ['steelblue'],
 * });
 *
 * eventIn1.connect(bpf1);
 *
 * const eventIn2 = new lfo.source.EventIn({
 *   frameType: 'scalar',
 *   frameSize: 1,
 * });
 *
 * const bpf2 = new lfo.sink.BpfDisplay({
 *   canvas: '#bpf-2',
 *   duration: 2,
 *   startTime: 7,
 *   min: 0,
 *   colors: ['orange'],
 * });
 *
 * const displaySync = new lfo.utils.DisplaySync(bpf1, bpf2);
 *
 * eventIn2.connect(bpf2);
 *
 * eventIn1.start();
 * eventIn2.start();
 *
 * let time = 0;
 * const period = 0.4;
 * const offset = 7.2;
 *
 * (function generateData() {
 *   const v = Math.random();
 *
 *   eventIn1.process(time, v);
 *   eventIn2.process(time + offset, v);
 *
 *   time += period;
 *
 *   setTimeout(generateData, period * 1000);
 * }());
 */var DisplaySync=function(){function DisplaySync(){(0,_classCallCheck3.default)(this,DisplaySync);this.views=[];this.add.apply(this,arguments);}/** @private */(0,_createClass3.default)(DisplaySync,[{key:"add",value:function add(){var _this=this;for(var _len=arguments.length,views=Array(_len),_key=0;_key<_len;_key++){views[_key]=arguments[_key];}views.forEach(function(view){return _this.install(view);});}/** @private */},{key:"install",value:function install(view){this.views.push(view);view.displaySync=this;}/** @private */},{key:"shiftSiblings",value:function shiftSiblings(iShift,time,view){this.views.forEach(function(display){if(display!==view)display.shiftCanvas(iShift,time);});}}]);return DisplaySync;}();exports.default=DisplaySync;},{"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16}],150:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _DisplaySync=require('./DisplaySync');var _DisplaySync2=_interopRequireDefault(_DisplaySync);var _windows=require('../../common/utils/windows');var _windows2=_interopRequireDefault(_windows);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default={DisplaySync:_DisplaySync2.default,initWindows:_windows2.default};},{"../../common/utils/windows":180,"./DisplaySync":149}],151:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var colors=['#4682B4','#ffa500','#00e600','#ff0000','#800080','#224153'];var getColors=exports.getColors=function getColors(type,nbr){switch(type){case'signal':return colors[0];// steelblue
break;case'bpf':if(nbr<=colors.length){return colors.slice(0,nbr);}else{var _colors=colors.slice(0);while(_colors.length<nbr){_colors.push(getRandomColor());}return _colors;}break;case'waveform':return[colors[0],colors[5]];// steelblue / darkblue
break;case'marker':return colors[3];// red
break;case'spectrum':return colors[2];// green
break;case'trace':return colors[1];// orange
break;case'bar-chart':return colors;break;}};// http://stackoverflow.com/questions/1484506/random-color-generator-in-javascript
var getRandomColor=exports.getRandomColor=function getRandomColor(){var letters='0123456789ABCDEF'.split('');var color='#';for(var i=0;i<6;i++){color+=letters[Math.floor(Math.random()*16)];}return color;};// scale from domain [0, 1] to range [270, 0] to consume in
// hsl(x, 100%, 50%) color scheme
var getHue=exports.getHue=function getHue(x){var domainMin=0;var domainMax=1;var rangeMin=270;var rangeMax=0;return(rangeMax-rangeMin)*(x-domainMin)/(domainMax-domainMin)+rangeMin;};var hexToRGB=exports.hexToRGB=function hexToRGB(hex){hex=hex.substring(1,7);var r=parseInt(hex.substring(0,2),16);var g=parseInt(hex.substring(2,4),16);var b=parseInt(hex.substring(4,6),16);return[r,g,b];};},{}],152:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var sin=Math.sin;var cos=Math.cos;var sqrt=Math.sqrt;var pow=Math.pow;var _2PI=Math.PI*2;// plot (from http://www.earlevel.com/scripts/widgets/20131013/biquads2.js)
// var len = 512;
// var magPlot = [];
// for (var idx = 0; idx < len; idx++) {
//   var w;
//   if (plotType == "linear")
//     w = idx / (len - 1) * Math.PI;  // 0 to pi, linear scale
//   else
//     w = Math.exp(Math.log(1 / 0.001) * idx / (len - 1)) * 0.001 * Math.PI;  // 0.001 to 1, times pi, log scale
//   var phi = Math.pow(Math.sin(w/2), 2);
//   var y = Math.log(Math.pow(a0+a1+a2, 2) - 4*(a0*a1 + 4*a0*a2 + a1*a2)*phi + 16*a0*a2*phi*phi) - Math.log(Math.pow(1+b1+b2, 2) - 4*(b1 + 4*b2 + b1*b2)*phi + 16*b2*phi*phi);
//   y = y * 10 / Math.LN10
//   if (y == -Infinity)
//     y = -200;
//   if (plotType == "linear")
//     magPlot.push([idx / (len - 1) * Fs / 2, y]);
//   else
//     magPlot.push([idx / (len - 1) / 2, y]);
//   if (idx == 0)
//     minVal = maxVal = y;
//   else if (y < minVal)
//     minVal = y;
//   else if (y > maxVal)
//     maxVal = y;
// }
var definitions={type:{type:'enum',default:'lowpass',list:['lowpass','highpass','bandpass_constant_skirt','bandpass','bandpass_constant_peak','notch','allpass','peaking','lowshelf','highshelf'],metas:{kind:'dyanmic'}},f0:{type:'float',default:1,metas:{kind:'dyanmic'}},gain:{type:'float',default:1,min:0,metas:{kind:'dyanmic'}},q:{type:'float',default:1,min:0.001,// PIPO_BIQUAD_MIN_Q
// max: 1,
metas:{kind:'dyanmic'}// bandwidth: {
//   type: 'float',
//   default: null,
//   nullable: true,
//   metas: { kind: 'dyanmic' },
// },
/**
   * Biquad filter (Direct form I). If input is of type `vector` the filter is
   * applied on each dimension i parallel.
   *
   * Based on the ["Cookbook formulae for audio EQ biquad filter coefficients"](http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt)
   * by Robert Bristow-Johnson.
   *
   * @memberof module:common.operator
   *
   * @param {Object} options - Override default values.
   * @param {String} [options.type='lowpass'] - Type of the filter. Available
   *  filters: 'lowpass', 'highpass', 'bandpass_constant_skirt', 'bandpass_constant_peak'
   *  (alias 'bandpass'), 'notch', 'allpass', 'peaking', 'lowshelf', 'highshelf'.
   * @param {Number} [options.f0=1] - Cutoff or center frequency of the filter
   *  according to its type.
   * @param {Number} [options.gain=1] - Gain of the filter (in dB).
   * @param {Number} [options.q=1] - Quality factor of the filter.
   *
   * @example
   * import * as lfo from 'waves-lfo/client';
   *
   * const audioInBuffer = new lfo.source.AudioInBuffer({
   *   audioBuffer: buffer,
   * });
   *
   * const biquad = new lfo.operator.Biquad({
   *   type: 'lowpass',
   *   f0: 2000,
   *   gain: 3,
   *   q: 12,
   * });
   *
   * const spectrumDisplay = new lfo.sink.SpectrumDisplay({
   *   canvas: '#spectrum',
   * });
   *
   * audioInBuffer.connect(biquad);
   * biquad.connect(spectrumDisplay);
   *
   * audioInBuffer.start();
   */}};var Biquad=function(_BaseLfo){(0,_inherits3.default)(Biquad,_BaseLfo);function Biquad(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,Biquad);return(0,_possibleConstructorReturn3.default)(this,(Biquad.__proto__||(0,_getPrototypeOf2.default)(Biquad)).call(this,definitions,options));}(0,_createClass3.default)(Biquad,[{key:'onParamUpdate',value:function onParamUpdate(name,value,metas){this._calculateCoefs();}},{key:'_calculateCoefs',value:function _calculateCoefs(){var sampleRate=this.streamParams.sourceSampleRate;var frameType=this.streamParams.frameType;var frameSize=this.streamParams.frameSize;var type=this.params.get('type');var f0=this.params.get('f0');var gain=this.params.get('gain');var q=this.params.get('q');// const bandwidth = this.params.get('bandwidth');
var bandwidth=null;var b0=0,b1=0,b2=0,a0=0,a1=0,a2=0;var A=pow(10,gain/40);var w0=_2PI*f0/sampleRate;var cosW0=cos(w0);var sinW0=sin(w0);var alpha=void 0;// depend of the filter type
var _2RootAAlpha=void 0;// intermediate value for lowshelf and highshelf
switch(type){// H(s) = 1 / (s^2 + s/Q + 1)
case'lowpass':alpha=sinW0/(2*q);b0=(1-cosW0)/2;b1=1-cosW0;b2=b0;a0=1+alpha;a1=-2*cosW0;a2=1-alpha;break;// H(s) = s^2 / (s^2 + s/Q + 1)
case'highpass':alpha=sinW0/(2*q);b0=(1+cosW0)/2;b1=-(1+cosW0);b2=b0;a0=1+alpha;a1=-2*cosW0;a2=1-alpha;break;// H(s) = s / (s^2 + s/Q + 1)  (constant skirt gain, peak gain = Q)
case'bandpass_constant_skirt':if(bandwidth){// sin(w0)*sinh( ln(2)/2 * BW * w0/sin(w0) )           (case: BW)
}else{alpha=sinW0/(2*q);}b0=sinW0/2;b1=0;b2=-b0;a0=1+alpha;a1=-2*cosW0;a2=1-alpha;break;// H(s) = (s/Q) / (s^2 + s/Q + 1)      (constant 0 dB peak gain)
case'bandpass':// looks like what is gnerally considered as a bandpass
case'bandpass_constant_peak':if(bandwidth){// sin(w0)*sinh( ln(2)/2 * BW * w0/sin(w0) )           (case: BW)
}else{alpha=sinW0/(2*q);}b0=alpha;b1=0;b2=-alpha;a0=1+alpha;a1=-2*cosW0;a2=1-alpha;break;// H(s) = (s^2 + 1) / (s^2 + s/Q + 1)
case'notch':alpha=sinW0/(2*q);b0=1;b1=-2*cosW0;b2=1;a0=1+alpha;a1=b1;a2=1-alpha;break;// H(s) = (s^2 - s/Q + 1) / (s^2 + s/Q + 1)
case'allpass':alpha=sinW0/(2*q);b0=1-alpha;b1=-2*cosW0;b2=1+alpha;a0=b2;a1=b1;a2=b0;break;// H(s) = (s^2 + s*(A/Q) + 1) / (s^2 + s/(A*Q) + 1)
case'peaking':if(bandwidth){// sin(w0)*sinh( ln(2)/2 * BW * w0/sin(w0) )           (case: BW)
}else{alpha=sinW0/(2*q);}b0=1+alpha*A;b1=-2*cosW0;b2=1-alpha*A;a0=1+alpha/A;a1=b1;a2=1-alpha/A;break;// H(s) = A * (s^2 + (sqrt(A)/Q)*s + A)/(A*s^2 + (sqrt(A)/Q)*s + 1)
case'lowshelf':alpha=sinW0/(2*q);_2RootAAlpha=2*sqrt(A)*alpha;b0=A*(A+1-(A-1)*cosW0+_2RootAAlpha);b1=2*A*(A-1-(A+1)*cosW0);b2=A*(A+1-(A-1)*cosW0-_2RootAAlpha);a0=A+1+(A-1)*cosW0+_2RootAAlpha;a1=-2*(A-1+(A+1)*cosW0);a2=A+1+(A-1)*cosW0-_2RootAAlpha;break;// H(s) = A * (A*s^2 + (sqrt(A)/Q)*s + 1)/(s^2 + (sqrt(A)/Q)*s + A)
case'highshelf':alpha=sinW0/(2*q);_2RootAAlpha=2*sqrt(A)*alpha;b0=A*(A+1+(A-1)*cosW0+_2RootAAlpha);b1=-2*A*(A-1+(A+1)*cosW0);b2=A*(A+1+(A-1)*cosW0-_2RootAAlpha);a0=A+1-(A-1)*cosW0+_2RootAAlpha;a1=2*(A-1-(A+1)*cosW0);a2=A+1-(A-1)*cosW0-_2RootAAlpha;break;}this.coefs={b0:b0/a0,b1:b1/a0,b2:b2/a0,a1:a1/a0,a2:a2/a0};// reset state
if(frameType==='signal'){this.state={x1:0,x2:0,y1:0,y2:0};}else{this.state={x1:new Float32Array(frameSize),x2:new Float32Array(frameSize),y1:new Float32Array(frameSize),y2:new Float32Array(frameSize)};}}/** @private */},{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);// if no `sampleRate` or `sampleRate` is 0 we shall halt!
var sampleRate=this.streamParams.sourceSampleRate;if(!sampleRate||sampleRate<=0)throw new Error('Invalid sampleRate value (0) for biquad');this._calculateCoefs();this.propagateStreamParams();}/** @private */},{key:'processVector',value:function processVector(frame){var frameSize=this.streamParams.frameSize;var outData=this.frame.data;var inData=frame.data;var state=this.state;var coefs=this.coefs;for(var i=0;i<frameSize;i++){var x=inData[i];var y=coefs.b0*x+coefs.b1*state.x1[i]+coefs.b2*state.x2[i]-coefs.a1*state.y1[i]-coefs.a2*state.y2[i];outData[i]=y;// update states
state.x2[i]=state.x1[i];state.x1[i]=x;state.y2[i]=state.y1[i];state.y1[i]=y;}}/** @private */},{key:'processSignal',value:function processSignal(frame){var frameSize=this.streamParams.frameSize;var outData=this.frame.data;var inData=frame.data;var state=this.state;var coefs=this.coefs;for(var i=0;i<frameSize;i++){var x=inData[i];var y=coefs.b0*x+coefs.b1*state.x1+coefs.b2*state.x2-coefs.a1*state.y1-coefs.a2*state.y2;outData[i]=y;// update states
state.x2=state.x1;state.x1=x;state.y2=state.y1;state.y1=y;}}}]);return Biquad;}(_BaseLfo3.default);exports.default=Biquad;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],153:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={min:{type:'float',default:0,min:-Infinity,max:+Infinity},max:{type:'float',default:1,min:-Infinity,max:+Infinity}};/**
 * Clip incomming according to given `min` and `max` parameters
 *
 * @param {Object} options - Override default paramters
 * @param {Number} [options.min=0] - Minimum value
 * @param {Number} [options.max=1] - Maximum value
 */var Clip=function(_BaseLfo){(0,_inherits3.default)(Clip,_BaseLfo);function Clip(options){(0,_classCallCheck3.default)(this,Clip);return(0,_possibleConstructorReturn3.default)(this,(Clip.__proto__||(0,_getPrototypeOf2.default)(Clip)).call(this,definitions,options));}(0,_createClass3.default)(Clip,[{key:'inputVector',value:function inputVector(data){var min=this.params.get('min');var max=this.params.get('max');var frameSize=this.streamParams.frameSize;var outData=this.frame.data;// @todo - could handle vector as min and max
for(var i=0;i<frameSize;i++){outData[i]=Math.min(max,Math.max(min,data[i]));}return outData;}},{key:'processVector',value:function processVector(frame){this.frame.data=this.inputVector(frame.data);}},{key:'inputSignal',value:function inputSignal(data){var min=this.params.get('min');var max=this.params.get('max');var frameSize=this.streamParams.frameSize;var outData=this.frame.data;for(var i=0;i<frameSize;i++){outData[i]=Math.min(max,Math.max(min,data[i]));}return outData;}},{key:'processSignal',value:function processSignal(frame){this.frame.data=this.inputSignal(frame.data);}}]);return Clip;}(_BaseLfo3.default);exports.default=Clip;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],154:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var sqrt=Math.sqrt;var cos=Math.cos;var PI=Math.PI;// Dct Type 2 - orthogonal matrix scaling
function getDctWeights(order,N){var type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'htk';var weights=new Float32Array(N*order);var piOverN=PI/N;var scale0=1/sqrt(2);var scale=sqrt(2/N);for(var k=0;k<order;k++){var s=k===0?scale0*scale:scale;// const s = scale; // rta doesn't apply k=0 scaling
for(var n=0;n<N;n++){weights[k*N+n]=s*cos(k*(n+0.5)*piOverN);}}return weights;}var definitions={order:{type:'integer',default:12,metas:{kind:'static'}}};/**
 * Compute the Discrete Cosine Transform of an input `signal` or `vector`.
 * (HTK style weighting).
 *
 * _support `standalone` usage_
 *
 * @memberof module:common.operator
 *
 * @param {Object} options - Override default parameters.
 * @param {Number} [options.order=12] - Number of computed bins.
 *
 * @example
 * import * as lfo from 'waves-lfo/client';
 *
 * // assuming some audio buffer
 * const source = new AudioInBuffer({
 *   audioBuffer: audioBuffer,
 *   useWorker: false,
 * });
 *
 * const slicer = new Slicer({
 *   frameSize: 512,
 *   hopSize: 512,
 * });
 *
 * const dct = new Dct({
 *   order: 12,
 * });
 *
 * const logger = new lfo.sink.Logger({ data: true });
 *
 * source.connect(slicer);
 * slicer.connect(dct);
 * dct.connect(logger);
 *
 * source.start();
 */var Dct=function(_BaseLfo){(0,_inherits3.default)(Dct,_BaseLfo);function Dct(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,Dct);return(0,_possibleConstructorReturn3.default)(this,(Dct.__proto__||(0,_getPrototypeOf2.default)(Dct)).call(this,definitions,options));}/** @private */(0,_createClass3.default)(Dct,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);var order=this.params.get('order');var inFrameSize=prevStreamParams.frameSize;this.streamParams.frameSize=order;this.streamParams.frameType='vector';this.streamParams.description=[];this.weightMatrix=getDctWeights(order,inFrameSize);this.propagateStreamParams();}/**
     * Use the `Dct` operator in `standalone` mode (i.e. outside of a graph).
     *
     * @param {Array} values - Input values.
     * @return {Array} - Dct of the input array.
     *
     * @example
     * const dct = new lfo.operator.Dct({ order: 12 });
     * // mandatory for use in standalone mode
     * dct.initStream({ frameSize: 512, frameType: 'signal' });
     * dct.inputSignal(data);
     */},{key:'inputSignal',value:function inputSignal(values){var order=this.params.get('order');var frameSize=values.length;var outFrame=this.frame.data;var weights=this.weightMatrix;for(var k=0;k<order;k++){var offset=k*frameSize;outFrame[k]=0;for(var n=0;n<frameSize;n++){outFrame[k]+=values[n]*weights[offset+n];}}return outFrame;}/** @private */},{key:'processSignal',value:function processSignal(frame){this.inputSignal(frame.data);}/** @private */},{key:'processVector',value:function processVector(frame){this.inputSignal(frame.data);}}]);return Dct;}(_BaseLfo3.default);exports.default=Dct;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],155:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _get2=require('babel-runtime/helpers/get');var _get3=_interopRequireDefault(_get2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function simpleLinearRegression(values,dt){// means
var xSum=0;var ySum=0;var length=values.length;for(var i=0;i<length;i++){xSum+=i*dt;ySum+=values[i];}var xMean=xSum/length;var yMean=ySum/length;var sumDiffXMeanSquared=0;// sum[ pow((x - xMean), 2) ]
var sumDiffYMeanSquared=0;// sum[ pow((y - yMean), 2) ]
var sumDiffXYMean=0;// sum[ (x - xMean)(y - yMean) ]
for(var _i=0;_i<length;_i++){var diffXMean=dt*_i-xMean;var diffYMean=values[_i]-yMean;var diffXMeanSquared=diffXMean*diffXMean;var diffYMeanSquared=diffYMean*diffYMean;var diffXYMean=diffXMean*diffYMean;sumDiffXMeanSquared+=diffXMeanSquared;sumDiffYMeanSquared+=diffYMeanSquared;sumDiffXYMean+=diffXYMean;}// horizontal line, all y on same line
if(sumDiffYMeanSquared===0)return 0;// Pearson correlation coefficient:
// cf. https://www.youtube.com/watch?v=2SCg8Kuh0tE
//
//                 ∑ [ (x - xMean)(y - yMean) ]
// r = ------------------------------------------------------
//     sqrt( ∑ [ pow((x - xMean), 2), pow((y - yMean), 2) ] )
//
//
var r=sumDiffXYMean/Math.sqrt(sumDiffXMeanSquared*sumDiffYMeanSquared);// then we have:
// cf. https://www.youtube.com/watch?v=GhrxgbQnEEU
//
// y = a + bx
// where:
//         Sy
// b = r * --
//         Sx
//
// a = yMean - b * xMean
//
// S for standard deviation
//            ∑ [ pow((x - xMean), 2) ]
// Sx = sqrt( -------------------------  )
//                      N - 1
var Sx=Math.sqrt(sumDiffXMeanSquared/(length-1));var Sy=Math.sqrt(sumDiffYMeanSquared/(length-1));var b=r*(Sy/Sx);return b;}var definitions={size:{type:'integer',min:2,max:+Infinity,default:3},useFrameRate:{type:'integer',min:0,max:+Infinity,default:null,nullable:true}};/**
 * Returns the simple derivative of successive value using
 * simple linear regression.
 * The current implementation assumes a fixed `frameRate` (`frame.time` is ignored)
 *
 * Before the module is filled, it outputs a value of 0.
 *
 * @param {Object} options - Override default parameters
 * @param {Number} [options.size=3] - Size of the window
 * @param {Number} [options.useFrameRate=null] - Override stream frame rate for
 *  the regression
 */var Delta=function(_BaseLfo){(0,_inherits3.default)(Delta,_BaseLfo);function Delta(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,Delta);var _this=(0,_possibleConstructorReturn3.default)(this,(Delta.__proto__||(0,_getPrototypeOf2.default)(Delta)).call(this,definitions,options));_this.buffers=null;_this.ringIndex=0;_this.frameRate=null;return _this;}/** @private */(0,_createClass3.default)(Delta,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);var frameSize=this.streamParams.frameSize;var size=this.params.get('size');var bufferSize=frameSize*size;this.buffers=[];// counter before the operator starts outputing frames
this.ringIndex=0;this.frameRate=this.params.get('useFrameRate')===null?this.streamParams.frameRate:this.params.get('useFrameRate');for(var i=0;i<frameSize;i++){this.buffers[i]=new Float32Array(size);}this.propagateStreamParams();}/** @private */},{key:'resetStream',value:function resetStream(){(0,_get3.default)(Delta.prototype.__proto__||(0,_getPrototypeOf2.default)(Delta.prototype),'resetStream',this).call(this);var frameSize=this.streamParams.frameSize;var size=this.params.get('size');var buffers=this.buffers;for(var i=0;i<frameSize;i++){for(var j=0;j<size;j++){buffers[i][j]=0;}}this.ringIndex=0;}/**
     * Assume a stream of vector at a fixed `frameRate`.
     */},{key:'inputVector',value:function inputVector(data){var size=this.params.get('size');var outData=this.frame.data;var frameSize=this.streamParams.frameSize;// const frameRate = this.streamParams.frameRate;
var buffers=this.buffers;var dt=1/this.frameRate;// console.log(dt);
if(this.ringIndex<size)this.ringIndex+=1;// copy incomming data into buffer
for(var i=0;i<frameSize;i++){var buffer=buffers[i];// we need to keep the order of the incomming frames
// so we have to shift all the values in the buffers
for(var j=1;j<size;j++){buffer[j-1]=buffer[j];}buffer[size-1]=data[i];if(this.ringIndex>=size)outData[i]=simpleLinearRegression(buffer,dt);else outData[i]=0;}return outData;}/** @private */},{key:'processVector',value:function processVector(frame){this.frame.data=this.inputVector(frame.data);// center time according to delta size
var size=this.params.get('size');var frameRate=this.streamParams.frameRate;this.frame.time-=0.5*(size-1)/frameRate;}}]);return Delta;}(_BaseLfo3.default);exports.default=Delta;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/get":18,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],156:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);var _windows=require('../utils/windows');var _windows2=_interopRequireDefault(_windows);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}// https://code.soundsoftware.ac.uk/projects/js-dsp-test/repository/entry/fft/nayuki-obj/fft.js
/*
 * Free Fft and convolution (JavaScript)
 *
 * Copyright (c) 2014 Project Nayuki
 * http://www.nayuki.io/page/free-small-fft-in-multiple-languages
 *
 * (MIT License)
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * - The above copyright notice and this permission notice shall be included in
 *   all copies or substantial portions of the Software.
 * - The Software is provided "as is", without warranty of any kind, express or
 *   implied, including but not limited to the warranties of merchantability,
 *   fitness for a particular purpose and noninfringement. In no event shall the
 *   authors or copyright holders be liable for any claim, damages or other
 *   liability, whether in an action of contract, tort or otherwise, arising from,
 *   out of or in connection with the Software or the use or other dealings in the
 *   Software.
 *
 * Slightly restructured by Chris Cannam, cannam@all-day-breakfast.com
 *
 * @private
 *//*
 * Construct an object for calculating the discrete Fourier transform (DFT) of
 * size n, where n is a power of 2.
 *
 * @private
 */function FftNayuki(n){this.n=n;this.levels=-1;for(var i=0;i<32;i++){if(1<<i==n){this.levels=i;// Equal to log2(n)
}}if(this.levels==-1){throw"Length is not a power of 2";}this.cosTable=new Array(n/2);this.sinTable=new Array(n/2);for(var i=0;i<n/2;i++){this.cosTable[i]=Math.cos(2*Math.PI*i/n);this.sinTable[i]=Math.sin(2*Math.PI*i/n);}/*
   * Computes the discrete Fourier transform (DFT) of the given complex vector,
   * storing the result back into the vector.
   * The vector's length must be equal to the size n that was passed to the
   * object constructor, and this must be a power of 2. Uses the Cooley-Tukey
   * decimation-in-time radix-2 algorithm.
   *
   * @private
   */this.forward=function(real,imag){var n=this.n;// Bit-reversed addressing permutation
for(var i=0;i<n;i++){var j=reverseBits(i,this.levels);if(j>i){var temp=real[i];real[i]=real[j];real[j]=temp;temp=imag[i];imag[i]=imag[j];imag[j]=temp;}}// Cooley-Tukey decimation-in-time radix-2 Fft
for(var size=2;size<=n;size*=2){var halfsize=size/2;var tablestep=n/size;for(var i=0;i<n;i+=size){for(var j=i,k=0;j<i+halfsize;j++,k+=tablestep){var tpre=real[j+halfsize]*this.cosTable[k]+imag[j+halfsize]*this.sinTable[k];var tpim=-real[j+halfsize]*this.sinTable[k]+imag[j+halfsize]*this.cosTable[k];real[j+halfsize]=real[j]-tpre;imag[j+halfsize]=imag[j]-tpim;real[j]+=tpre;imag[j]+=tpim;}}}// Returns the integer whose value is the reverse of the lowest 'bits'
// bits of the integer 'x'.
function reverseBits(x,bits){var y=0;for(var i=0;i<bits;i++){y=y<<1|x&1;x>>>=1;}return y;}};/*
   * Computes the inverse discrete Fourier transform (IDFT) of the given complex
   * vector, storing the result back into the vector.
   * The vector's length must be equal to the size n that was passed to the
   * object constructor, and this must be a power of 2. This is a wrapper
   * function. This transform does not perform scaling, so the inverse is not
   * a true inverse.
   *
   * @private
   */this.inverse=function(real,imag){forward(imag,real);};}var sqrt=Math.sqrt;var isPowerOfTwo=function isPowerOfTwo(number){while(number%2===0&&number>1){number=number/2;}return number===1;};var definitions={size:{type:'integer',default:1024,metas:{kind:'static'}},window:{type:'enum',list:['none','hann','hanning','hamming','blackman','blackmanharris','sine','rectangle'],default:'none',metas:{kind:'static'}},mode:{type:'enum',list:['magnitude','power'],// add complex output
default:'magnitude'},norm:{type:'enum',default:'auto',list:['auto','none','linear','power']/**
   * Compute the Fast Fourier Transform of an incomming `signal`.
   *
   * Fft implementation by [Nayuki](https://code.soundsoftware.ac.uk/projects/js-dsp-test/repository/entry/fft/nayuki-obj/fft.js).
   *
   * _support `standalone` usage_
   *
   * @memberof module:common.operator
   *
   * @param {Object} options - Override default parameters.
   * @param {Number} [options.size=1024] - Size of the fft, should be a power of 2.
   *  If the frame size of the incomming signal is lower than this value,
   *  it is zero padded to match the fft size.
   * @param {String} [options.window='none'] - Name of the window applied on the
   *  incomming signal. Available windows are: 'none', 'hann', 'hanning',
   *  'hamming', 'blackman', 'blackmanharris', 'sine', 'rectangle'.
   * @param {String} [options.mode='magnitude'] - Type of the output (`magnitude`
   *  or `power`)
   * @param {String} [options.norm='auto'] - Type of normalization applied on the
   *  output. Possible values are 'auto', 'none', 'linear', 'power'. When set to
   *  `auto`, a `linear` normalization is applied on the magnitude spectrum, while
   *  a `power` normalization is applied on the power spectrum.
   *
   * @example
   * import * as lfo from 'waves-lfo/client';
   *
   * // assuming an `audioBuffer` exists
   * const source = new lfo.source.AudioInBuffer({ audioBuffer });
   *
   * const slicer = new lfo.operator.Slicer({
   *   frameSize: 256,
   * });
   *
   * const fft = new lfo.operator.Fft({
   *   mode: 'power',
   *   window: 'hann',
   *   norm: 'power',
   *   size: 256,
   * });
   *
   * source.connect(slicer);
   * slicer.connect(fft);
   * source.start();
   *
   * // > outputs 129 bins containing the values of the power spectrum (including
   * // > DC and Nyuist frequencies).
   *
   * @todo - check if 'rectangle' and 'none' windows are not redondant.
   * @todo - check default values for all params.
   */}};var Fft=function(_BaseLfo){(0,_inherits3.default)(Fft,_BaseLfo);function Fft(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,Fft);var _this=(0,_possibleConstructorReturn3.default)(this,(Fft.__proto__||(0,_getPrototypeOf2.default)(Fft)).call(this,definitions,options));_this.windowSize=null;_this.normalizeCoefs=null;_this.window=null;_this.real=null;_this.imag=null;_this.fft=null;if(!isPowerOfTwo(_this.params.get('size')))throw new Error('fftSize must be a power of two');return _this;}/** @private */(0,_createClass3.default)(Fft,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);// set the output frame size
var inFrameSize=prevStreamParams.frameSize;var fftSize=this.params.get('size');var mode=this.params.get('mode');var norm=this.params.get('norm');var windowName=this.params.get('window');// window `none` and `rectangle` are aliases
if(windowName==='none')windowName='rectangle';this.streamParams.frameSize=fftSize/2+1;this.streamParams.frameType='vector';this.streamParams.description=[];// size of the window to apply on the input frame
this.windowSize=inFrameSize<fftSize?inFrameSize:fftSize;// references to populate in the window functions (cf. `initWindow`)
this.normalizeCoefs={linear:0,power:0};this.window=new Float32Array(this.windowSize);(0,_windows2.default)(windowName,// name of the window
this.window,// buffer populated with the window signal
this.windowSize,// size of the window
this.normalizeCoefs// object populated with the normalization coefs
);var _normalizeCoefs=this.normalizeCoefs,linear=_normalizeCoefs.linear,power=_normalizeCoefs.power;switch(norm){case'none':this.windowNorm=1;break;case'linear':this.windowNorm=linear;break;case'power':this.windowNorm=power;break;case'auto':if(mode==='magnitude')this.windowNorm=linear;else if(mode==='power')this.windowNorm=power;break;}this.real=new Float32Array(fftSize);this.imag=new Float32Array(fftSize);this.fft=new FftNayuki(fftSize);this.propagateStreamParams();}/**
     * Use the `Fft` operator in `standalone` mode (i.e. outside of a graph).
     *
     * @param {Array} signal - Input values.
     * @return {Array} - Fft of the input signal.
     *
     * @example
     * const fft = new lfo.operator.Fft({ size: 512, window: 'hann' });
     * // mandatory for use in standalone mode
     * fft.initStream({ frameSize: 256, frameType: 'signal' });
     * fft.inputSignal(signal);
     */},{key:'inputSignal',value:function inputSignal(signal){var mode=this.params.get('mode');var windowSize=this.windowSize;var frameSize=this.streamParams.frameSize;var fftSize=this.params.get('size');var outData=this.frame.data;// apply window on the input signal and reset imag buffer
for(var i=0;i<windowSize;i++){this.real[i]=signal[i]*this.window[i]*this.windowNorm;this.imag[i]=0;}// if real is bigger than input signal, fill with zeros
for(var _i=windowSize;_i<fftSize;_i++){this.real[_i]=0;this.imag[_i]=0;}this.fft.forward(this.real,this.imag);if(mode==='magnitude'){var norm=1/fftSize;// DC index
var realDc=this.real[0];var imagDc=this.imag[0];outData[0]=sqrt(realDc*realDc+imagDc*imagDc)*norm;// Nquyst index
var realNy=this.real[fftSize/2];var imagNy=this.imag[fftSize/2];outData[fftSize/2]=sqrt(realNy*realNy+imagNy*imagNy)*norm;// power spectrum
for(var _i2=1,j=fftSize-1;_i2<fftSize/2;_i2++,j--){var real=0.5*(this.real[_i2]+this.real[j]);var imag=0.5*(this.imag[_i2]-this.imag[j]);outData[_i2]=2*sqrt(real*real+imag*imag)*norm;}}else if(mode==='power'){var _norm=1/(fftSize*fftSize);// DC index
var _realDc=this.real[0];var _imagDc=this.imag[0];outData[0]=(_realDc*_realDc+_imagDc*_imagDc)*_norm;// Nquyst index
var _realNy=this.real[fftSize/2];var _imagNy=this.imag[fftSize/2];outData[fftSize/2]=(_realNy*_realNy+_imagNy*_imagNy)*_norm;// power spectrum
for(var _i3=1,_j=fftSize-1;_i3<fftSize/2;_i3++,_j--){var _real=0.5*(this.real[_i3]+this.real[_j]);var _imag=0.5*(this.imag[_i3]-this.imag[_j]);outData[_i3]=4*(_real*_real+_imag*_imag)*_norm;}}return outData;}/** @private */},{key:'processSignal',value:function processSignal(frame){this.inputSignal(frame.data);}}]);return Fft;}(_BaseLfo3.default);exports.default=Fft;},{"../../core/BaseLfo":182,"../utils/windows":180,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],157:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _get2=require('babel-runtime/helpers/get');var _get3=_interopRequireDefault(_get2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var sqrt=Math.sqrt;var definitions={normalize:{type:'boolean',default:true,metas:{kind:'dynamic'}},power:{type:'boolean',default:false,metas:{kind:'dynamic'}/**
   * Compute the magnitude of a `vector` input.
   *
   * _support `standalone` usage_
   *
   * @param {Object} options - Override default parameters.
   * @param {Boolean} [options.normalize=true] - Normalize output according to
   *  the vector size.
   * @param {Boolean} [options.power=false] - If true, returns the squared
   *  magnitude (power).
   *
   * @memberof module:common.operator
   *
   * @example
   * import * as lfo from 'waves-lfo/common';
   *
   * const eventIn = new lfo.source.EventIn({ frameSize: 2, frameType: 'vector' });
   * const magnitude = new lfo.operator.Magnitude();
   * const logger = new lfo.sink.Logger({ outFrame: true });
   *
   * eventIn.connect(magnitude);
   * magnitude.connect(logger);
   * eventIn.start();
   *
   * eventIn.process(null, [1, 1]);
   * > [1]
   * eventIn.process(null, [2, 2]);
   * > [2.82842712475]
   * eventIn.process(null, [3, 3]);
   * > [4.24264068712]
   */}};var Magnitude=function(_BaseLfo){(0,_inherits3.default)(Magnitude,_BaseLfo);function Magnitude(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,Magnitude);var _this=(0,_possibleConstructorReturn3.default)(this,(Magnitude.__proto__||(0,_getPrototypeOf2.default)(Magnitude)).call(this,definitions,options));_this._normalize=_this.params.get('normalize');_this._power=_this.params.get('power');return _this;}/** @private */(0,_createClass3.default)(Magnitude,[{key:'onParamUpdate',value:function onParamUpdate(name,value,metas){(0,_get3.default)(Magnitude.prototype.__proto__||(0,_getPrototypeOf2.default)(Magnitude.prototype),'onParamUpdate',this).call(this,name,value,metas);switch(name){case'normalize':this._normalize=value;break;case'power':this._power=value;break;}}/** @private */},{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);this.streamParams.frameSize=1;this.streamParams.frameType='scalar';this.streamParams.description=['magnitude'];this.propagateStreamParams();}/**
     * Use the `Magnitude` operator in `standalone` mode (i.e. outside of a graph).
     *
     * @param {Array|Float32Array} values - Values to process.
     * @return {Number} - Magnitude value.
     *
     * @example
     * import * as lfo from 'waves-lfo/client';
     *
     * const magnitude = new lfo.operator.Magnitude({ power: true });
     * magnitude.initStream({ frameType: 'vector', frameSize: 3 });
     * magnitude.inputVector([3, 3]);
     * > 4.24264068712
     */},{key:'inputVector',value:function inputVector(values){var length=values.length;var sum=0;for(var i=0;i<length;i++){sum+=values[i]*values[i];}var mag=sum;if(this._normalize)mag/=length;if(!this._power)mag=sqrt(mag);return mag;}/** @private */},{key:'processVector',value:function processVector(frame){this.frame.data[0]=this.inputVector(frame.data);}}]);return Magnitude;}(_BaseLfo3.default);exports.default=Magnitude;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/get":18,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],158:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var sqrt=Math.sqrt;/**
 * Compute mean and standard deviation of a given `signal`.
 *
 * _support `standalone` usage_
 *
 * @memberof module:common.operator
 *
 * @example
 * import * as lfo from 'waves-lfo/client';
 *
 * const audioContext = new AudioContext();
 *
 * navigator.mediaDevices
 *   .getUserMedia({ audio: true })
 *   .then(init)
 *   .catch((err) => console.error(err.stack));
 *
 * function init(stream) {
 *   const source = audioContext.createMediaStreamSource(stream);
 *
 *   const audioInNode = new lfo.source.AudioInNode({
 *     sourceNode: source,
 *     audioContext: audioContext,
 *   });
 *
 *   const meanStddev = new lfo.operator.MeanStddev();
 *
 *   const traceDisplay = new lfo.sink.TraceDisplay({
 *     canvas: '#trace',
 *   });
 *
 *   audioInNode.connect(meanStddev);
 *   meanStddev.connect(traceDisplay);
 *   audioInNode.start();
 * }
 */var MeanStddev=function(_BaseLfo){(0,_inherits3.default)(MeanStddev,_BaseLfo);function MeanStddev(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,MeanStddev);// no options available, just throw an error if some param try to be set.
return(0,_possibleConstructorReturn3.default)(this,(MeanStddev.__proto__||(0,_getPrototypeOf2.default)(MeanStddev)).call(this,{},options));}/** @private */(0,_createClass3.default)(MeanStddev,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);this.streamParams.frameType='vector';this.streamParams.frameSize=2;this.streamParams.description=['mean','stddev'];this.propagateStreamParams();}/**
     * Use the `MeanStddev` operator in `standalone` mode (i.e. outside of a graph).
     *
     * @param {Array|Float32Array} values - Values to process.
     * @return {Array} - Mean and standart deviation of the input values.
     *
     * @example
     * import * as lfo from 'waves-lfo/client';
     *
     * const meanStddev = new lfo.operator.MeanStddev();
     * meanStddev.initStream({ frameType: 'vector', frameSize: 1024 });
     * meanStddev.inputVector(someSineSignal);
     * > [0, 0.7071]
     */},{key:'inputSignal',value:function inputSignal(values){var outData=this.frame.data;var length=values.length;var mean=0;var m2=0;// compute mean and variance with Welford algorithm
// https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
for(var i=0;i<length;i++){var x=values[i];var delta=x-mean;mean+=delta/(i+1);m2+=delta*(x-mean);}var variance=m2/(length-1);var stddev=sqrt(variance);outData[0]=mean;outData[1]=stddev;return outData;}/** @private */},{key:'processSignal',value:function processSignal(frame){this.inputSignal(frame.data);}}]);return MeanStddev;}(_BaseLfo3.default);exports.default=MeanStddev;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],159:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _log=require('babel-runtime/core-js/math/log10');var _log2=_interopRequireDefault(_log);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var min=Math.min;var max=Math.max;var pow=Math.pow;var log10=_log2.default;function hertzToMelHtk(freqHz){return 2595*(0,_log2.default)(1+freqHz/700);}function melToHertzHtk(freqMel){return 700*(Math.pow(10,freqMel/2595)-1);}/**
 * Returns a description of the weights to apply on the fft bins for each
 * Mel band filter.
 * @note - adapted from imtr-tools/rta
 *
 * @param {Number} nbrBins - Number of fft bins.
 * @param {Number} nbrFilter - Number of mel filters.
 * @param {Number} sampleRate - Sample Rate of the signal.
 * @param {Number} minFreq - Minimum Frequency to be considerered.
 * @param {Number} maxFreq - Maximum frequency to consider.
 * @return {Array<Object>} - Description of the weights to apply on the bins for
 *  each mel filter. Each description has the following structure:
 *  { startIndex: binIndex, centerFreq: binCenterFrequency, weights: [] }
 *
 * @private
 */function getMelBandWeights(nbrBins,nbrBands,sampleRate,minFreq,maxFreq){var type=arguments.length>5&&arguments[5]!==undefined?arguments[5]:'htk';var hertzToMel=null;var melToHertz=null;var minMel=void 0;var maxMel=void 0;if(type==='htk'){hertzToMel=hertzToMelHtk;melToHertz=melToHertzHtk;minMel=hertzToMel(minFreq);maxMel=hertzToMel(maxFreq);}else{throw new Error('Invalid mel band type: "'+type+'"');}var melBandDescriptions=new Array(nbrBands);// center frequencies of Fft bins
var fftFreqs=new Float32Array(nbrBins);// center frequencies of mel bands - uniformly spaced in mel domain between
// limits, there are 2 more frequencies than the actual number of filters in
// order to calculate the slopes
var filterFreqs=new Float32Array(nbrBands+2);var fftSize=(nbrBins-1)*2;// compute bins center frequencies
for(var i=0;i<nbrBins;i++){fftFreqs[i]=sampleRate*i/fftSize;}for(var _i=0;_i<nbrBands+2;_i++){filterFreqs[_i]=melToHertz(minMel+_i/(nbrBands+1)*(maxMel-minMel));}// loop throught filters
for(var _i2=0;_i2<nbrBands;_i2++){var minWeightIndexDefined=0;var description={startIndex:null,centerFreq:null,weights:[]// define contribution of each bin for the filter at index (i + 1)
// do not process the last spectrum component (Nyquist)
};for(var j=0;j<nbrBins-1;j++){var posSlopeContrib=(fftFreqs[j]-filterFreqs[_i2])/(filterFreqs[_i2+1]-filterFreqs[_i2]);var negSlopeContrib=(filterFreqs[_i2+2]-fftFreqs[j])/(filterFreqs[_i2+2]-filterFreqs[_i2+1]);// lowerSlope and upper slope intersect at zero and with each other
var contribution=max(0,min(posSlopeContrib,negSlopeContrib));if(contribution>0){if(description.startIndex===null){description.startIndex=j;description.centerFreq=filterFreqs[_i2+1];}description.weights.push(contribution);}}// empty filter
if(description.startIndex===null){description.startIndex=0;description.centerFreq=0;}// @todo - do some scaling for Slaney-style mel
melBandDescriptions[_i2]=description;}return melBandDescriptions;}var definitions={log:{type:'boolean',default:false,metas:{kind:'static'}},nbrBands:{type:'integer',default:24,metas:{kind:'static'}},minFreq:{type:'float',default:0,metas:{kind:'static'}},maxFreq:{type:'float',default:null,nullable:true,metas:{kind:'static'}},power:{type:'integer',default:1,metas:{kind:'dynamic'}}};/**
 * Compute the mel bands spectrum from a given spectrum (`vector` type).
 * _Implement the `htk` mel band style._
 *
 * _support `standalone` usage_
 *
 * @memberof module:common.operator
 *
 * @param {Object} options - Override default parameters.
 * @param {Boolean} [options.log=false] - Apply a logarithmic scale on the output.
 * @param {Number} [options.nbrBands=24] - Number of filters defining the mel
 *  bands.
 * @param {Number} [options.minFreq=0] - Minimum frequency to consider.
 * @param {Number} [options.maxFreq=null] - Maximum frequency to consider.
 *  If `null`, is set to Nyquist frequency.
 * @param {Number} [options.power=1] - Apply a power scaling on each mel band.
 *
 * @todo - implement Slaney style mel bands
 *
 * @example
 * import lfo from 'waves-lfo/node'
 *
 * // read a file from path (node only source)
 * const audioInFile = new lfo.source.AudioInFile({
 *   filename: 'path/to/file',
 *   frameSize: 512,
 * });
 *
 * const slicer = new lfo.operator.Slicer({
 *   frameSize: 256,
 *   hopSize: 256,
 * });
 *
 * const fft = new lfo.operator.Fft({
 *   size: 1024,
 *   window: 'hann',
 *   mode: 'power',
 *   norm: 'power',
 * });
 *
 * const mel = new lfo.operator.Mel({
 *   log: true,
 *   nbrBands: 24,
 * });
 *
 * const logger = new lfo.sink.Logger({ data: true });
 *
 * audioInFile.connect(slicer);
 * slicer.connect(fft);
 * fft.connect(mel);
 * mel.connect(logger);
 *
 * audioInFile.start();
 */var Mel=function(_BaseLfo){(0,_inherits3.default)(Mel,_BaseLfo);function Mel(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,Mel);return(0,_possibleConstructorReturn3.default)(this,(Mel.__proto__||(0,_getPrototypeOf2.default)(Mel)).call(this,definitions,options));}/** @private */(0,_createClass3.default)(Mel,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);var nbrBins=prevStreamParams.frameSize;var nbrBands=this.params.get('nbrBands');var sampleRate=this.streamParams.sourceSampleRate;var minFreq=this.params.get('minFreq');var maxFreq=this.params.get('maxFreq');//
this.streamParams.frameSize=nbrBands;this.streamParams.frameType='vector';this.streamParams.description=[];if(maxFreq===null)maxFreq=this.streamParams.sourceSampleRate/2;this.melBandDescriptions=getMelBandWeights(nbrBins,nbrBands,sampleRate,minFreq,maxFreq);this.propagateStreamParams();}/**
     * Use the `Mel` operator in `standalone` mode (i.e. outside of a graph).
     *
     * @param {Array} spectrum - Fft bins.
     * @return {Array} - Mel bands.
     *
     * @example
     * const mel = new lfo.operator.Mel({ nbrBands: 24 });
     * // mandatory for use in standalone mode
     * mel.initStream({ frameSize: 256, frameType: 'vector', sourceSampleRate: 44100 });
     * mel.inputVector(fftBins);
     */},{key:'inputVector',value:function inputVector(bins){var power=this.params.get('power');var log=this.params.get('log');var melBands=this.frame.data;var nbrBands=this.streamParams.frameSize;var scale=1;var minLogValue=1e-48;var minLog=-480;if(log)scale*=nbrBands;for(var i=0;i<nbrBands;i++){var _melBandDescriptions$=this.melBandDescriptions[i],startIndex=_melBandDescriptions$.startIndex,weights=_melBandDescriptions$.weights;var value=0;for(var j=0;j<weights.length;j++){value+=weights[j]*bins[startIndex+j];}// apply same logic as in PiPoBands
if(scale!==1)value*=scale;if(log){if(value>minLogValue)value=10*log10(value);else value=minLog;}if(power!==1)value=pow(value,power);melBands[i]=value;}return melBands;}/** @private */},{key:'processVector',value:function processVector(frame){this.inputVector(frame.data);}}]);return Mel;}(_BaseLfo3.default);exports.default=Mel;},{"../../core/BaseLfo":182,"babel-runtime/core-js/math/log10":4,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],160:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={// array defining the frameSizes of the input streamss
// e.g. if [3, 2, 1], we wait for 3 different sources of respective 3, 2, 1 frameSizes
frameSizes:{type:'any',default:null,constant:true/**
   * Merge multiple vector frames. The order of execution depends on the
   * order the branching was initially made. The first branche is master
   * on the time and trigger the output of the frame.
   *
   * @memberof module:common.operator
   *
   * @param {Object} options - Override default parameters
   * @param {Array} [options.frameSizes=null] - Array that defines the number
   *  of values to pick from each incomming vectors.
   *
   * @example
   * import * as lfo from 'waves-lfo/comon'
   *
   * const eventIn = new lfo.operator.EventIn({
   *   type: 'vector',
   *   frameSize: 4,
   *   frameRate: 0,
   * });
   *
   * const minMax = new lfo.operator.MinMax();
   * const magnitude = new lfo.operator.Magnitude();
   *
   * // take the first 2 values of the first branch and 1 value from the second branch
   * const merge = new lfo.operator.Merger({ frameSizes: [2, 1] });
   *
   * // this defines the order in which Merger will be called
   * eventIn.connect(minMax);
   * eventIn.connect(magnitude);
   *
   * minMax.connect(merger);
   * magnitude.connect(merger);
   */}};var Merger=function(_BaseLfo){(0,_inherits3.default)(Merger,_BaseLfo);function Merger(options){(0,_classCallCheck3.default)(this,Merger);return(0,_possibleConstructorReturn3.default)(this,(Merger.__proto__||(0,_getPrototypeOf2.default)(Merger)).call(this,definitions,options));}(0,_createClass3.default)(Merger,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);// ...
var frameSizes=this.params.get('frameSizes');var numSources=frameSizes.length;var frameSize=0;for(var i=0;i<numSources;i++){frameSize+=frameSizes[i];}this.streamParams.frameSize=frameSize;this.numSources=numSources;this.sourceIndex=0;this.propagateStreamParams();}},{key:'processVector',value:function processVector(){}// processSignal() {} // makes no sens to merge signals (maybe MUX / DEMUX)
},{key:'processFrame',value:function processFrame(frame){var currentIndex=this.sourceIndex;var frameSizes=this.params.get('frameSizes');var numSources=frameSizes.length;var input=frame.data;var output=this.frame.data;// first source define time
if(currentIndex===0)this.frame.time=frame.time;var currentFrameSize=frameSizes[currentIndex];var offset=0;for(var i=0;i<currentIndex;i++){offset+=frameSizes[i];}// copy data
for(var _i=0;_i<currentFrameSize;_i++){output[offset+_i]=input[_i];}this.sourceIndex=(this.sourceIndex+1)%numSources;// we just received the last input, output the frame
if(this.sourceIndex===0)this.propagateFrame();}}]);return Merger;}(_BaseLfo3.default);exports.default=Merger;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],161:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);var _Fft=require('./Fft');var _Fft2=_interopRequireDefault(_Fft);var _Mel=require('./Mel');var _Mel2=_interopRequireDefault(_Mel);var _Dct=require('./Dct');var _Dct2=_interopRequireDefault(_Dct);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={nbrBands:{type:'integer',default:24,meta:{kind:'static'}},nbrCoefs:{type:'integer',default:12,meta:{kind:'static'}},minFreq:{type:'float',default:0,meta:{kind:'static'}},maxFreq:{type:'float',default:null,nullable:true,meta:{kind:'static'}}};/**
 * Compute the Mfcc of the incomming `signal`. Is basically a wrapper around
 * [`Fft`]{@link module:common.operator.Fft}, [`Mel`]{@link module:common.operator.Mel}
 * and [`Dct`]{@link module:common.operator.Dct}.
 *
 * _support `standalone` usage_
 *
 * @memberof module:common.operator
 *
 * @param {Object} options - Override default parameters.
 * @param {nbrBands} [options.nbrBands=24] - Number of Mel bands.
 * @param {nbrCoefs} [options.nbrCoefs=12] - Number of output coefs.
 *
 * @see {@link module:common.operator.Fft}
 * @see {@link module:common.operator.Mel}
 * @see {@link module:common.operator.Dct}
 *
 * @example
 * import lfo from 'waves-lfo/node'
 *
 * const audioInFile = new lfo.source.AudioInFile({
 *   filename: 'path/to/file',
 *   frameSize: 512,
 * });
 *
 * const slicer = new lfo.operator.Slicer({
 *   frameSize: 256,
 * });
 *
 * const mfcc = new lfo.operator.Mfcc({
 *   nbrBands: 24,
 *   nbrCoefs: 12,
 * });
 *
 * const logger = new lfo.sink.Logger({ data: true });
 *
 * audioInFile.connect(slicer);
 * slicer.connect(mfcc);
 * mfcc.connect(logger);
 *
 * audioInFile.start();
 */var Mfcc=function(_BaseLfo){(0,_inherits3.default)(Mfcc,_BaseLfo);function Mfcc(options){(0,_classCallCheck3.default)(this,Mfcc);return(0,_possibleConstructorReturn3.default)(this,(Mfcc.__proto__||(0,_getPrototypeOf2.default)(Mfcc)).call(this,definitions,options));}/** @private */(0,_createClass3.default)(Mfcc,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);var nbrBands=this.params.get('nbrBands');var nbrCoefs=this.params.get('nbrCoefs');var minFreq=this.params.get('minFreq');var maxFreq=this.params.get('maxFreq');var inputFrameSize=prevStreamParams.frameSize;var inputFrameRate=prevStreamParams.frameRate;var inputSampleRate=prevStreamParams.sourceSampleRate;var nbrBins=inputFrameSize/2+1;this.streamParams.frameSize=nbrCoefs;this.streamParams.frameType='vector';this.streamParams.description=[];this.fft=new _Fft2.default({window:'hann',mode:'power',norm:'power',size:inputFrameSize});this.mel=new _Mel2.default({nbrBands:nbrBands,log:true,power:1,minFreq:minFreq,maxFreq:maxFreq});this.dct=new _Dct2.default({order:nbrCoefs});// init streams
this.fft.initStream({frameType:'signal',frameSize:inputFrameSize,frameRate:inputFrameRate,sourceSampleRate:inputSampleRate});this.mel.initStream({frameType:'vector',frameSize:nbrBins,frameRate:inputFrameRate,sourceSampleRate:inputSampleRate});this.dct.initStream({frameType:'vector',frameSize:nbrBands,frameRate:inputFrameRate,sourceSampleRate:inputSampleRate});this.propagateStreamParams();}/**
     * Use the `Mfcc` operator in `standalone` mode (i.e. outside of a graph).
     *
     * @param {Array} data - Signal chunk to analyse.
     * @return {Array} - Mfcc coefficients.
     *
     * @example
     * const mfcc = new lfo.operator.Mfcc();
     * // mandatory for use in standalone mode
     * mfcc.initStream({ frameSize: 256, frameType: 'vector' });
     * mfcc.inputSignal(signal);
     */},{key:'inputSignal',value:function inputSignal(data){var output=this.frame.data;var nbrCoefs=this.params.get('nbrCoefs');var bins=this.fft.inputSignal(data);var melBands=this.mel.inputVector(bins);// console.log(melBands);
var coefs=this.dct.inputSignal(melBands);for(var i=0;i<nbrCoefs;i++){output[i]=coefs[i];}return output;}/** @private */},{key:'processSignal',value:function processSignal(frame){this.inputSignal(frame.data);}}]);return Mfcc;}(_BaseLfo3.default);exports.default=Mfcc;},{"../../core/BaseLfo":182,"./Dct":154,"./Fft":156,"./Mel":159,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],162:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/**
 * Find minimun and maximum values of a given `signal`.
 *
 * _support `standalone` usage_
 *
 * @memberof module:common.operator
 *
 * @example
 * import * as lfo from 'waves-lfo/common';
 *
 * const eventIn = new lfo.source.EventIn({
 *   frameSize: 512,
 *   frameType: 'signal',
 *   sampleRate: 0,
 * });
 *
 * const minMax = new lfo.operator.MinMax();
 *
 * const logger = new lfo.sink.Logger({ data: true });
 *
 * eventIn.connect(minMax);
 * minMax.connect(logger);
 * eventIn.start()
 *
 * // create a frame
 * const signal = new Float32Array(512);
 * for (let i = 0; i < 512; i++)
 *   signal[i] = i + 1;
 *
 * eventIn.process(null, signal);
 * > [1, 512];
 */var MinMax=function(_BaseLfo){(0,_inherits3.default)(MinMax,_BaseLfo);function MinMax(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,MinMax);// throw errors if options are given
return(0,_possibleConstructorReturn3.default)(this,(MinMax.__proto__||(0,_getPrototypeOf2.default)(MinMax)).call(this,{},options));}/** @private */(0,_createClass3.default)(MinMax,[{key:'processStreamParams',value:function processStreamParams(){var prevStreamParams=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};this.prepareStreamParams(prevStreamParams);this.streamParams.frameType='vector';this.streamParams.frameSize=2;this.streamParams.description=['min','max'];this.propagateStreamParams();}/**
     * Use the `MinMax` operator in `standalone` mode (i.e. outside of a graph).
     *
     * @param {Float32Array|Array} data - Input signal.
     * @return {Array} - Min and max values.
     *
     * @example
     * const minMax = new MinMax();
     * minMax.initStream({ frameType: 'signal', frameSize: 10 });
     *
     * minMax.inputSignal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
     * > [0, 5]
     */},{key:'inputSignal',value:function inputSignal(data){var outData=this.frame.data;var min=+Infinity;var max=-Infinity;for(var i=0,l=data.length;i<l;i++){var value=data[i];if(value<min)min=value;if(value>max)max=value;}outData[0]=min;outData[1]=max;return outData;}/** @private */},{key:'processSignal',value:function processSignal(frame){this.inputSignal(frame.data);}}]);return MinMax;}(_BaseLfo3.default);exports.default=MinMax;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],163:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _get2=require('babel-runtime/helpers/get');var _get3=_interopRequireDefault(_get2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={order:{type:'integer',min:1,max:1e9,default:10,metas:{kind:'dynamic'}},fill:{type:'float',min:-Infinity,max:+Infinity,default:0,metas:{kind:'dynamic'}}};/**
 * Compute a moving average operation on the incomming frames (`scalar` or
 * `vector` type). If the input is of type vector, the moving average is
 * computed for each dimension in parallel. If the source sample rate is defined
 * frame time is shifted to the middle of the window defined by the order.
 *
 * _support `standalone` usage_
 *
 * @memberof module:common.operator
 *
 * @param {Object} options - Override default parameters.
 * @param {Number} [options.order=10] - Number of successive values on which
 *  the average is computed.
 * @param {Number} [options.fill=0] - Value to fill the ring buffer with before
 *  the first input frame.
 *
 * @todo - Implement `processSignal` ?
 *
 * @example
 * import * as lfo from 'waves-lfo/common';
 *
 * const eventIn = new lfo.source.EventIn({
 *   frameSize: 2,
 *   frameType: 'vector'
 * });
 *
 * const movingAverage = new lfo.operator.MovingAverage({
 *   order: 5,
 *   fill: 0
 * });
 *
 * const logger = new lfo.sink.Logger({ data: true });
 *
 * eventIn.connect(movingAverage);
 * movingAverage.connect(logger);
 *
 * eventIn.start();
 *
 * eventIn.process(null, [1, 1]);
 * > [0.2, 0.2]
 * eventIn.process(null, [1, 1]);
 * > [0.4, 0.4]
 * eventIn.process(null, [1, 1]);
 * > [0.6, 0.6]
 * eventIn.process(null, [1, 1]);
 * > [0.8, 0.8]
 * eventIn.process(null, [1, 1]);
 * > [1, 1]
 */var MovingAverage=function(_BaseLfo){(0,_inherits3.default)(MovingAverage,_BaseLfo);function MovingAverage(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,MovingAverage);var _this=(0,_possibleConstructorReturn3.default)(this,(MovingAverage.__proto__||(0,_getPrototypeOf2.default)(MovingAverage)).call(this,definitions,options));_this.sum=null;_this.ringBuffer=null;_this.ringIndex=0;return _this;}/** @private */(0,_createClass3.default)(MovingAverage,[{key:'onParamUpdate',value:function onParamUpdate(name,value,metas){(0,_get3.default)(MovingAverage.prototype.__proto__||(0,_getPrototypeOf2.default)(MovingAverage.prototype),'onParamUpdate',this).call(this,name,value,metas);// @todo - should be done lazily in process
switch(name){case'order':this.processStreamParams();this.resetStream();break;case'fill':this.resetStream();break;}}/** @private */},{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);var frameSize=this.streamParams.frameSize;var order=this.params.get('order');this.ringBuffer=new Float32Array(order*frameSize);if(frameSize>1)this.sum=new Float32Array(frameSize);else this.sum=0;this.propagateStreamParams();}/** @private */},{key:'resetStream',value:function resetStream(){(0,_get3.default)(MovingAverage.prototype.__proto__||(0,_getPrototypeOf2.default)(MovingAverage.prototype),'resetStream',this).call(this);var order=this.params.get('order');var fill=this.params.get('fill');var ringBuffer=this.ringBuffer;var ringLength=ringBuffer.length;for(var i=0;i<ringLength;i++){ringBuffer[i]=fill;}var fillSum=order*fill;var frameSize=this.streamParams.frameSize;if(frameSize>1){for(var _i=0;_i<frameSize;_i++){this.sum[_i]=fillSum;}}else{this.sum=fillSum;}this.ringIndex=0;}/** @private */},{key:'processScalar',value:function processScalar(frame){this.frame.data[0]=this.inputScalar(frame.data[0]);}/**
     * Use the `MovingAverage` operator in `standalone` mode (i.e. outside of a
     * graph) with a `scalar` input.
     *
     * @param {Number} value - Value to feed the moving average with.
     * @return {Number} - Average value.
     *
     * @example
     * import * as lfo from 'waves-lfo/client';
     *
     * const movingAverage = new lfo.operator.MovingAverage({ order: 5 });
     * movingAverage.initStream({ frameSize: 1, frameType: 'scalar' });
     *
     * movingAverage.inputScalar(1);
     * > 0.2
     * movingAverage.inputScalar(1);
     * > 0.4
     * movingAverage.inputScalar(1);
     * > 0.6
     */},{key:'inputScalar',value:function inputScalar(value){var order=this.params.get('order');var ringIndex=this.ringIndex;var ringBuffer=this.ringBuffer;var sum=this.sum;sum-=ringBuffer[ringIndex];sum+=value;this.sum=sum;this.ringBuffer[ringIndex]=value;this.ringIndex=(ringIndex+1)%order;return sum/order;}/** @private */},{key:'processVector',value:function processVector(frame){this.inputVector(frame.data);}/**
     * Use the `MovingAverage` operator in `standalone` mode (i.e. outside of a
     * graph) with a `vector` input.
     *
     * @param {Array} values - Values to feed the moving average with.
     * @return {Float32Array} - Average value for each dimension.
     *
     * @example
     * import * as lfo from 'waves-lfo/client';
     *
     * const movingAverage = new lfo.operator.MovingAverage({ order: 5 });
     * movingAverage.initStream({ frameSize: 2, frameType: 'scalar' });
     *
     * movingAverage.inputArray([1, 1]);
     * > [0.2, 0.2]
     * movingAverage.inputArray([1, 1]);
     * > [0.4, 0.4]
     * movingAverage.inputArray([1, 1]);
     * > [0.6, 0.6]
     */},{key:'inputVector',value:function inputVector(values){var order=this.params.get('order');var outFrame=this.frame.data;var frameSize=this.streamParams.frameSize;var ringIndex=this.ringIndex;var ringOffset=ringIndex*frameSize;var ringBuffer=this.ringBuffer;var sum=this.sum;var scale=1/order;for(var i=0;i<frameSize;i++){var ringBufferIndex=ringOffset+i;var value=values[i];var localSum=sum[i];localSum-=ringBuffer[ringBufferIndex];localSum+=value;this.sum[i]=localSum;outFrame[i]=localSum*scale;ringBuffer[ringBufferIndex]=value;}this.ringIndex=(ringIndex+1)%order;return outFrame;}/** @private */},{key:'processFrame',value:function processFrame(frame){this.prepareFrame();this.processFunction(frame);var order=this.params.get('order');var time=frame.time;// shift time to take account of the added latency
if(this.streamParams.sourceSampleRate)time-=0.5*(order-1)/this.streamParams.sourceSampleRate;this.frame.time=time;this.frame.metadata=frame.metadata;this.propagateFrame();}}]);return MovingAverage;}(_BaseLfo3.default);exports.default=MovingAverage;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/get":18,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],164:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _get2=require('babel-runtime/helpers/get');var _get3=_interopRequireDefault(_get2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={order:{type:'integer',min:1,max:1e9,default:9,metas:{kind:'static'}},fill:{type:'float',min:-Infinity,max:+Infinity,default:0,metas:{kind:'static'}}};/**
 * Compute a moving median operation on the incomming frames (`scalar` or
 * `vector` type). If the input is of type vector, the moving median is
 * computed for each dimension in parallel. If the source sample rate is defined
 * frame time is shifted to the middle of the window defined by the order.
 *
 * _support `standalone` usage_
 *
 * @memberof module:common.operator
 *
 * @param {Object} options - Override default parameters.
 * @param {Number} [options.order=9] - Number of successive values in which
 *  the median is searched. This value must be odd. _dynamic parameter_
 * @param {Number} [options.fill=0] - Value to fill the ring buffer with before
 *  the first input frame. _dynamic parameter_
 *
 * @todo - Implement `processSignal`
 *
 * @example
 * import * as lfo from 'waves-lfo/common';
 *
 * const eventIn = new lfo.source.EventIn({
 *   frameSize: 2,
 *   frameType: 'vector',
 * });
 *
 * const movingMedian = new lfo.operator.MovingMedian({
 *   order: 5,
 *   fill: 0,
 * });
 *
 * const logger = new lfo.sink.Logger({ data: true });
 *
 * eventIn.connect(movingMedian);
 * movingMedian.connect(logger);
 *
 * eventIn.start();
 *
 * eventIn.processFrame(null, [1, 1]);
 * > [0, 0]
 * eventIn.processFrame(null, [2, 2]);
 * > [0, 0]
 * eventIn.processFrame(null, [3, 3]);
 * > [1, 1]
 * eventIn.processFrame(null, [4, 4]);
 * > [2, 2]
 * eventIn.processFrame(null, [5, 5]);
 * > [3, 3]
 */var MovingMedian=function(_BaseLfo){(0,_inherits3.default)(MovingMedian,_BaseLfo);function MovingMedian(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,MovingMedian);var _this=(0,_possibleConstructorReturn3.default)(this,(MovingMedian.__proto__||(0,_getPrototypeOf2.default)(MovingMedian)).call(this,definitions,options));_this.ringBuffer=null;_this.sortBuffer=null;_this.ringIndex=0;_this._ensureOddOrder();return _this;}/** @private */(0,_createClass3.default)(MovingMedian,[{key:'_ensureOddOrder',value:function _ensureOddOrder(){if(this.params.get('order')%2===0)throw new Error('Invalid value '+order+' for param "order" - must be odd');}/** @private */},{key:'onParamUpdate',value:function onParamUpdate(name,value,metas){(0,_get3.default)(MovingMedian.prototype.__proto__||(0,_getPrototypeOf2.default)(MovingMedian.prototype),'onParamUpdate',this).call(this,name,value,metas);switch(name){case'order':this._ensureOddOrder();this.processStreamParams();this.resetStream();break;case'fill':this.resetStream();break;}}/** @private */},{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);// outType is similar to input type
var frameSize=this.streamParams.frameSize;var order=this.params.get('order');this.ringBuffer=new Float32Array(frameSize*order);this.sortBuffer=new Float32Array(frameSize*order);this.minIndices=new Uint32Array(frameSize);this.propagateStreamParams();}/** @private */},{key:'resetStream',value:function resetStream(){(0,_get3.default)(MovingMedian.prototype.__proto__||(0,_getPrototypeOf2.default)(MovingMedian.prototype),'resetStream',this).call(this);var fill=this.params.get('fill');var ringBuffer=this.ringBuffer;var ringLength=ringBuffer.length;for(var i=0;i<ringLength;i++){this.ringBuffer[i]=fill;}this.ringIndex=0;}/** @private */},{key:'processScalar',value:function processScalar(frame){this.frame.data[0]=this.inputScalar(frame.data[0]);}/**
     * Allows for the use of a `MovingMedian` outside a graph (e.g. inside
     * another node), in this case `processStreamParams` and `resetStream`
     * should be called manually on the node.
     *
     * @param {Number} value - Value to feed the moving median with.
     * @return {Number} - Median value.
     *
     * @example
     * import * as lfo from 'waves-lfo/client';
     *
     * const movingMedian = new MovingMedian({ order: 5 });
     * movingMedian.initStream({ frameSize: 1, frameType: 'scalar' });
     *
     * movingMedian.inputScalar(1);
     * > 0
     * movingMedian.inputScalar(2);
     * > 0
     * movingMedian.inputScalar(3);
     * > 1
     * movingMedian.inputScalar(4);
     * > 2
     */},{key:'inputScalar',value:function inputScalar(value){var ringIndex=this.ringIndex;var ringBuffer=this.ringBuffer;var sortBuffer=this.sortBuffer;var order=this.params.get('order');var medianIndex=(order-1)/2;var startIndex=0;ringBuffer[ringIndex]=value;for(var i=0;i<=medianIndex;i++){var min=+Infinity;var minIndex=null;for(var j=startIndex;j<order;j++){if(i===0)sortBuffer[j]=ringBuffer[j];if(sortBuffer[j]<min){min=sortBuffer[j];minIndex=j;}}// swap minIndex and startIndex
var cache=sortBuffer[startIndex];sortBuffer[startIndex]=sortBuffer[minIndex];sortBuffer[minIndex]=cache;startIndex+=1;}var median=sortBuffer[medianIndex];this.ringIndex=(ringIndex+1)%order;return median;}/** @private */},{key:'processVector',value:function processVector(frame){this.inputVector(frame.data);}/**
     * Allows for the use of a `MovingMedian` outside a graph (e.g. inside
     * another node), in this case `processStreamParams` and `resetStream`
     * should be called manually on the node.
     *
     * @param {Array} values - Values to feed the moving median with.
     * @return {Float32Array} - Median values for each dimension.
     *
     * @example
     * import * as lfo from 'waves-lfo/client';
     *
     * const movingMedian = new MovingMedian({ order: 3, fill: 0 });
     * movingMedian.initStream({ frameSize: 3, frameType: 'vector' });
     *
     * movingMedian.inputArray([1, 1]);
     * > [0, 0]
     * movingMedian.inputArray([2, 2]);
     * > [1, 1]
     * movingMedian.inputArray([3, 3]);
     * > [2, 2]
     */},{key:'inputVector',value:function inputVector(values){var order=this.params.get('order');var ringBuffer=this.ringBuffer;var ringIndex=this.ringIndex;var sortBuffer=this.sortBuffer;var outFrame=this.frame.data;var minIndices=this.minIndices;var frameSize=this.streamParams.frameSize;var medianIndex=Math.floor(order/2);var startIndex=0;for(var i=0;i<=medianIndex;i++){for(var j=0;j<frameSize;j++){outFrame[j]=+Infinity;minIndices[j]=0;for(var k=startIndex;k<order;k++){var index=k*frameSize+j;// update ring buffer corresponding to current
if(k===ringIndex&&i===0)ringBuffer[index]=values[j];// copy value in sort buffer on first pass
if(i===0)sortBuffer[index]=ringBuffer[index];// find minium in the remaining array
if(sortBuffer[index]<outFrame[j]){outFrame[j]=sortBuffer[index];minIndices[j]=index;}}// swap minimum and curent index
var swapIndex=startIndex*frameSize+j;var v=sortBuffer[swapIndex];sortBuffer[swapIndex]=sortBuffer[minIndices[j]];sortBuffer[minIndices[j]]=v;// store this minimum value as current result
outFrame[j]=sortBuffer[swapIndex];}startIndex+=1;}this.ringIndex=(ringIndex+1)%order;return this.frame.data;}/** @private */},{key:'processFrame',value:function processFrame(frame){this.preprocessFrame();this.processFunction(frame);var order=this.params.get('order');var time=frame.time;// shift time to take account of the added latency
if(this.streamParams.sourceSampleRate)time-=0.5*(order-1)/this.streamParams.sourceSampleRate;this.frame.time=time;this.frame.metadata=frame.metadata;this.propagateFrame(time,this.outFrame,metadata);}}]);return MovingMedian;}(_BaseLfo3.default);exports.default=MovingMedian;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/get":18,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],165:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={// float or array
factor:{type:'any',default:1}};/**
 * Multiply a given signal or vector by a given factor. On vector
 * streams, `factor` can be an array of values to apply on each dimension of the
 * vector frames.
 *
 * _support `standalone` usage_
 *
 * @param {Object} options - override default values
 * @param {Number|Array} [options.factor=1] - factor or array of factor to
 *  apply on the incomming frame. Setting an array is only defined in case of
 *  a vector stream.
 *
 * @memberof module:common.operator
 *
 * @example
 * import * as lfo from 'waves-lfo/common';
 *
 * const eventIn = new lfo.operator.EventIn({
 *   type: 'vector',
 *   frameSize: 2,
 *   frameRate: 0,
 * });
 * const scaler = new lfo.operator.Multiplier({ factor: 0.1 });
 *
 * eventIn.connect(scaler);
 *
 * eventIn.process(null, [2, 3]);
 * > [0.2, 0.3]
 */var Multiplier=function(_BaseLfo){(0,_inherits3.default)(Multiplier,_BaseLfo);function Multiplier(options){(0,_classCallCheck3.default)(this,Multiplier);return(0,_possibleConstructorReturn3.default)(this,(Multiplier.__proto__||(0,_getPrototypeOf2.default)(Multiplier)).call(this,definitions,options));}/**
   * Use the `Multiplier` operator in standalone mode.
   *
   * @param {Float32Array|Array} data - Input vector
   * @return {Array} - Scaled values
   *
   * @example
   * const scaler = new Multiplier({ factor: [2, 4] });
   * scaler.initStream({ frameType: 'vector', frameSize: 2 });
   *
   * scaler.inputVector([3, 2]);
   * > [6, 8]
   */(0,_createClass3.default)(Multiplier,[{key:'inputVector',value:function inputVector(data){var output=this.frame.data;var frameSize=this.streamParams.frameSize;var factor=this.params.get('factor');if(Array.isArray(factor)){for(var i=0;i<frameSize;i++){output[i]=data[i]*factor[i];}}else{for(var _i=0;_i<frameSize;_i++){output[_i]=data[_i]*factor;}}return output;}/** @private */},{key:'processVector',value:function processVector(frame){this.frame.data=this.inputVector(frame.data);}/**
     * Use the `Multiplier` operator in standalone mode.
     *
     * @param {Float32Array|Array} data - Input signal.
     * @return {Array} - Scaled signal.
     *
     * @example
     * const scaler = new Multiplier({ factor: 0.1 });
     * scaler.initStream({ frameType: 'signal', frameSize: 2 });
     *
     * scaler.inputVector([1, 2]);
     * > [0.1, 0.2]
     */},{key:'inputSignal',value:function inputSignal(data){var output=this.frame.data;var frameSize=this.streamParams.frameSize;var factor=this.params.get('factor');for(var i=0;i<frameSize;i++){output[i]=data[i]*factor;}return output;}/** @private */},{key:'processSignal',value:function processSignal(frame){this.frame.data=this.inputSignal(frame.data);}}]);return Multiplier;}(_BaseLfo3.default);exports.default=Multiplier;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],166:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={state:{type:'enum',default:'on',list:['on','off'],metas:{kind:'dynamic'}}};/**
 * The OnOff operator allows to stop the propagation of the stream in a
 * subgraph. When "on", frames are propagated, when "off" the propagation is
 * stopped.
 *
 * The `streamParams` propagation is never bypassed so the subsequent subgraph
 * is always ready for incomming frames.
 *
 * @memberof module:common.operator
 *
 * @param {Object} options - Override default parameters.
 * @param {String} [options.state='on'] - Default state.
 *
 * @example
 * import * as lfo from 'waves-lfo/common';
 *
 * const frames = [
 *   { time: 0, data: [1, 2] },
 *   { time: 1, data: [3, 4] },
 *   { time: 2, data: [5, 6] },
 * ];
 *
 * const eventIn = new EventIn({
 *   frameSize: 2,
 *   frameRate: 0,
 *   frameType: 'vector',
 * });
 *
 * const onOff = new OnOff();
 *
 * const logger = new Logger({ data: true });
 *
 * eventIn.connect(onOff);
 * onOff.connect(logger);
 *
 * eventIn.start();
 *
 * eventIn.processFrame(frames[0]);
 * > [0, 1]
 *
 * // bypass subgraph
 * onOff.setState('off');
 * eventIn.processFrame(frames[1]);
 *
 * // re-open subgraph
 * onOff.setState('on');
 * eventIn.processFrame(frames[2]);
 * > [5, 6]
 */var OnOff=function(_BaseLfo){(0,_inherits3.default)(OnOff,_BaseLfo);function OnOff(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,OnOff);var _this=(0,_possibleConstructorReturn3.default)(this,(OnOff.__proto__||(0,_getPrototypeOf2.default)(OnOff)).call(this,definitions,options));_this.state=_this.params.get('state');return _this;}/**
   * Set the state of the `OnOff`.
   *
   * @param {String} state - New state of the operator (`on` or `off`)
   */(0,_createClass3.default)(OnOff,[{key:'setState',value:function setState(state){if(definitions.state.list.indexOf(state)===-1)throw new Error('Invalid switch state value "'+state+'" [valid values: "on"/"off"]');this.state=state;}// define all possible stream API
/** @private */},{key:'processScalar',value:function processScalar(){}/** @private */},{key:'processVector',value:function processVector(){}/** @private */},{key:'processSignal',value:function processSignal(){}/** @private */},{key:'processFrame',value:function processFrame(frame){if(this.state==='on'){this.prepareFrame();this.frame.time=frame.time;this.frame.metadata=frame.metadata;this.frame.data=frame.data;this.propagateFrame();}}}]);return OnOff;}(_BaseLfo3.default);exports.default=OnOff;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],167:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={exponent:{type:'float',default:1}};/**
 * Apply an exponant power to the stream.
 *
 * @param {Object} options - Override default parameters
 * @param {Number} exponent - Exponent
 */var Power=function(_BaseLfo){(0,_inherits3.default)(Power,_BaseLfo);function Power(options){(0,_classCallCheck3.default)(this,Power);return(0,_possibleConstructorReturn3.default)(this,(Power.__proto__||(0,_getPrototypeOf2.default)(Power)).call(this,definitions,options));}(0,_createClass3.default)(Power,[{key:'inputVector',value:function inputVector(data){var outData=this.frame.data;var frameSize=this.streamParams.frameSize;var exponent=this.params.get('exponent');for(var i=0;i<frameSize;i++){outData[i]=Math.pow(data[i],exponent);}return outData;}/** @private */},{key:'processVector',value:function processVector(frame){this.inputVector(frame.data);}},{key:'inputSignal',value:function inputSignal(data){var outData=this.frame.data;var frameSize=this.streamParams.frameSize;var exponent=this.params.get('exponent');for(var i=0;i<frameSize;i++){outData[i]=Math.pow(data[i],exponent);}return outData;}/** @private */},{key:'processSignal',value:function processSignal(frame){this.inputSignal(frame.data);}}]);return Power;}(_BaseLfo3.default);exports.default=Power;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],168:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var sqrt=Math.sqrt;var definitions={power:{type:'boolean',default:false,metas:{kind:'dynamic'}}};/**
 * Compute the Root Mean Square of a `signal`.
 *
 * _support `standalone` usage_
 *
 * @memberof module:common.operator
 *
 * @param {Object} options - Override default parameters.
 * @param {Boolean} [options.power=false] - If `true` remove the "R" of the
 *  "Rms" and return the squared result (i.e. power).
 *
 * @example
 * import * as lfo from 'waves-lfo/client';
 *
 * // assuming some `AudioBuffer`
 * const audioInBuffer = new lfo.source.AudioInBuffer({
 *   audioBuffer: audioBuffer,
 *   frameSize: 512,
 * });
 *
 * const rms = new lfo.operator.Rms();
 * const logger = new lfo.sink.Logger({ data: true });
 *
 * audioInBuffer.connect(rms);
 * rms.connect(logger);
 *
 * audioInBuffer.start();
 */var Rms=function(_BaseLfo){(0,_inherits3.default)(Rms,_BaseLfo);function Rms(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,Rms);return(0,_possibleConstructorReturn3.default)(this,(Rms.__proto__||(0,_getPrototypeOf2.default)(Rms)).call(this,definitions,options));}/** @private */(0,_createClass3.default)(Rms,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);this.streamParams.frameSize=1;this.streamParams.frameType='scalar';this.streamParams.description=['rms'];this.propagateStreamParams();}/**
     * Allows for the use of a `Rms` outside a graph (e.g. inside
     * another node). Return the rms of the given signal block.
     *
     * @param {Number} signal - Signal block to be computed.
     * @return {Number} - rms of the input signal.
     *
     * @example
     * import * as lfo from 'waves-lfo/client';
     *
     * const rms = new lfo.operator.Rms();
     * rms.initStream({ frameType: 'signal', frameSize: 1000 });
     *
     * const results = rms.inputSignal([...values]);
     */},{key:'inputSignal',value:function inputSignal(signal){var power=this.params.get('power');var length=signal.length;var rms=0;for(var i=0;i<length;i++){rms+=signal[i]*signal[i];}rms=rms/length;if(!power)rms=sqrt(rms);return rms;}/** @private */},{key:'processSignal',value:function processSignal(frame){this.frame.data[0]=this.inputSignal(frame.data);}}]);return Rms;}(_BaseLfo3.default);exports.default=Rms;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],169:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _get2=require('babel-runtime/helpers/get');var _get3=_interopRequireDefault(_get2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={type:{type:'enum',list:['linear'],default:'linear',metas:{kind:'dynamic'}},inputMin:{type:'float',default:0,min:-Infinity,max:+Infinity,metas:{kind:'dynamic'}},inputMax:{type:'float',default:1,min:-Infinity,max:+Infinity,metas:{kind:'dynamic'}},outputMin:{type:'float',default:1,min:-Infinity,max:+Infinity,metas:{kind:'dynamic'}},outputMax:{type:'float',default:1,min:-Infinity,max:+Infinity,metas:{kind:'dynamic'}/**
   * Apply a linear scale on the incomming stream. The output is not clipped.
   *
   * @todo - implement log and exp scale
   *
   * @param {Object} options - Override default options
   * @param {Number} [options.inputMin=0] - Input Minimum
   * @param {Number} [options.inputMax=1] - Input Maximum
   * @param {Number} [options.outputMin=0] - Output Minimum
   * @param {Number} [options.outputMax=1] - Output Maximum
   */}};var Scale=function(_BaseLfo){(0,_inherits3.default)(Scale,_BaseLfo);function Scale(options){(0,_classCallCheck3.default)(this,Scale);var _this=(0,_possibleConstructorReturn3.default)(this,(Scale.__proto__||(0,_getPrototypeOf2.default)(Scale)).call(this,definitions,options));_this.scale=null;return _this;}/** @private */(0,_createClass3.default)(Scale,[{key:'_setScaleFunction',value:function _setScaleFunction(){var inputMin=this.params.get('inputMin');var inputMax=this.params.get('inputMax');var outputMin=this.params.get('outputMin');var outputMax=this.params.get('outputMax');var a=(outputMax-outputMin)/(inputMax-inputMin);var b=outputMin-a*inputMin;this.scale=function(x){return a*x+b;};}/** @private */},{key:'onParamUpdate',value:function onParamUpdate(name,value,metas){(0,_get3.default)(Scale.prototype.__proto__||(0,_getPrototypeOf2.default)(Scale.prototype),'onParamUpdate',this).call(this,name,value,metas);if(name!=='type')this._setScaleFunction();}/** @private */},{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);this._setScaleFunction();this.propagateStreamParams();}},{key:'inputVector',value:function inputVector(data){var outData=this.frame.data;var frameSize=this.streamParams.frameSize;var scale=this.scale;for(var i=0;i<frameSize;i++){outData[i]=scale(data[i]);}return outData;}/** @private */},{key:'processVector',value:function processVector(frame){this.frame.data=this.inputVector(frame.data);}},{key:'inputSignal',value:function inputSignal(data){var outData=this.frame.data;var frameSize=this.streamParams.frameSize;var scale=this.scale;for(var i=0;i<frameSize;i++){outData[i]=scale(data[i]);}return outData;}/** @private */},{key:'processSignal',value:function processSignal(frame){this.frame.data=this.inputVector(frame.data);}}]);return Scale;}(_BaseLfo3.default);exports.default=Scale;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/get":18,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],170:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _get2=require('babel-runtime/helpers/get');var _get3=_interopRequireDefault(_get2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);var _MovingAverage=require('./MovingAverage');var _MovingAverage2=_interopRequireDefault(_MovingAverage);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var min=Math.min;var max=Math.max;var definitions={logInput:{type:'boolean',default:false,metas:{kind:'dyanmic'}},minInput:{type:'float',default:0.000000000001,metas:{kind:'dyanmic'}},filterOrder:{type:'integer',default:5,metas:{kind:'dyanmic'}},threshold:{type:'float',default:3,metas:{kind:'dyanmic'}},offThreshold:{type:'float',default:-Infinity,metas:{kind:'dyanmic'}},minInter:{type:'float',default:0.050,metas:{kind:'dyanmic'}},maxDuration:{type:'float',default:Infinity,metas:{kind:'dyanmic'}/**
   * Create segments based on attacks.
   *
   * @memberof module:common.operator
   *
   * @param {Object} options - Override default parameters.
   * @param {Boolean} [options.logInput=false] - Apply log on the input.
   * @param {Number} [options.minInput=0.000000000001] - Minimum value to use as
   *  input.
   * @param {Number} [options.filterOrder=5] - Order of the internally used moving
   *  average.
   * @param {Number} [options.threshold=3] - Threshold that triggers a segment
   *  start.
   * @param {Number} [options.offThreshold=-Infinity] - Threshold that triggers
   *  a segment end.
   * @param {Number} [options.minInter=0.050] - Minimum delay between two semgents.
   * @param {Number} [options.maxDuration=Infinity] - Maximum duration of a segment.
   *
   * @example
   * import * as lfo from 'waves-lfo/client';
   *
   * // assuming a stream from the microphone
   * const source = audioContext.createMediaStreamSource(stream);
   *
   * const audioInNode = new lfo.source.AudioInNode({
   *   sourceNode: source,
   *   audioContext: audioContext,
   * });
   *
   * const slicer = new lfo.operator.Slicer({
   *   frameSize: frameSize,
   *   hopSize: hopSize,
   *   centeredTimeTags: true
   * });
   *
   * const power = new lfo.operator.RMS({
   *   power: true,
   * });
   *
   * const segmenter = new lfo.operator.Segmenter({
   *   logInput: true,
   *   filterOrder: 5,
   *   threshold: 3,
   *   offThreshold: -Infinity,
   *   minInter: 0.050,
   *   maxDuration: 0.050,
   * });
   *
   * const logger = new lfo.sink.Logger({ time: true });
   *
   * audioInNode.connect(slicer);
   * slicer.connect(power);
   * power.connect(segmenter);
   * segmenter.connect(logger);
   *
   * audioInNode.start();
   */}};var Segmenter=function(_BaseLfo){(0,_inherits3.default)(Segmenter,_BaseLfo);function Segmenter(options){(0,_classCallCheck3.default)(this,Segmenter);var _this=(0,_possibleConstructorReturn3.default)(this,(Segmenter.__proto__||(0,_getPrototypeOf2.default)(Segmenter)).call(this,definitions,options));_this.insideSegment=false;_this.onsetTime=-Infinity;// stats
_this.min=Infinity;_this.max=-Infinity;_this.sum=0;_this.sumOfSquares=0;_this.count=0;var minInput=_this.params.get('minInput');var fill=minInput;if(_this.params.get('logInput')&&minInput>0)fill=Math.log(minInput);_this.movingAverage=new _MovingAverage2.default({order:_this.params.get('filterOrder'),fill:fill});_this.lastMvavrg=fill;return _this;}(0,_createClass3.default)(Segmenter,[{key:'onParamUpdate',value:function onParamUpdate(name,value,metas){(0,_get3.default)(Segmenter.prototype.__proto__||(0,_getPrototypeOf2.default)(Segmenter.prototype),'onParamUpdate',this).call(this,name,value,metas);if(name==='filterOrder')this.movingAverage.params.set('order',value);}},{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);this.streamParams.frameType='vector';this.streamParams.frameSize=5;this.streamParams.frameRate=0;this.streamParams.description=['duration','min','max','mean','stddev'];this.movingAverage.initStream(prevStreamParams);this.propagateStreamParams();}},{key:'resetStream',value:function resetStream(){(0,_get3.default)(Segmenter.prototype.__proto__||(0,_getPrototypeOf2.default)(Segmenter.prototype),'resetStream',this).call(this);this.movingAverage.resetStream();this.resetSegment();}},{key:'finalizeStream',value:function finalizeStream(endTime){if(this.insideSegment)this.outputSegment(endTime);(0,_get3.default)(Segmenter.prototype.__proto__||(0,_getPrototypeOf2.default)(Segmenter.prototype),'finalizeStream',this).call(this,endTime);}},{key:'resetSegment',value:function resetSegment(){this.insideSegment=false;this.onsetTime=-Infinity;// stats
this.min=Infinity;this.max=-Infinity;this.sum=0;this.sumOfSquares=0;this.count=0;}},{key:'outputSegment',value:function outputSegment(endTime){var outData=this.frame.data;outData[0]=endTime-this.onsetTime;outData[1]=this.min;outData[2]=this.max;var norm=1/this.count;var mean=this.sum*norm;var meanOfSquare=this.sumOfSquares*norm;var squareOfmean=mean*mean;outData[3]=mean;outData[4]=0;if(meanOfSquare>squareOfmean)outData[4]=Math.sqrt(meanOfSquare-squareOfmean);this.frame.time=this.onsetTime;this.propagateFrame();}},{key:'processSignal',value:function processSignal(frame){var logInput=this.params.get('logInput');var minInput=this.params.get('minInput');var threshold=this.params.get('threshold');var minInter=this.params.get('minInter');var maxDuration=this.params.get('maxDuration');var offThreshold=this.params.get('offThreshold');var rawValue=frame.data[0];var time=frame.time;var value=Math.max(rawValue,minInput);if(logInput)value=Math.log(value);var diff=value-this.lastMvavrg;this.lastMvavrg=this.movingAverage.inputScalar(value);// update frame metadata
this.frame.metadata=frame.metadata;if(diff>threshold&&time-this.onsetTime>minInter){if(this.insideSegment)this.outputSegment(time);// start segment
this.insideSegment=true;this.onsetTime=time;this.max=-Infinity;}if(this.insideSegment){this.min=min(this.min,rawValue);this.max=max(this.max,rawValue);this.sum+=rawValue;this.sumOfSquares+=rawValue*rawValue;this.count++;if(time-this.onsetTime>=maxDuration||value<=offThreshold){this.outputSegment(time);this.insideSegment=false;}}}},{key:'processFrame',value:function processFrame(frame){this.prepareFrame();this.processFunction(frame);// do not propagate here as the frameRate is now zero
}}]);return Segmenter;}(_BaseLfo3.default);exports.default=Segmenter;},{"../../core/BaseLfo":182,"./MovingAverage":163,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/get":18,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],171:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _get2=require('babel-runtime/helpers/get');var _get3=_interopRequireDefault(_get2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={index:{type:'integer',default:0,metas:{kind:'static'}},indexes:{type:'any',default:null,nullable:true,metas:{kind:'dynamic'}}};/**
 * Select one or several indexes from a `vector` input. If only one index is
 * selected, the output will be of type `scalar`, otherwise the output will
 * be a vector containing the selected indexes.
 *
 * @memberof module:common.operator
 *
 * @param {Object} options - Override default values.
 * @param {Number} options.index - Index to select from the input frame.
 * @param {Array<Number>} options.indexes - Indices to select from the input
 *  frame, if defined, take precedance over `option.index`.
 *
 * @example
 * import * as lfo from 'waves-lfo/common';
 *
 * const eventIn = new lfo.source.EventIn({
 *   frameType: 'vector',
 *   frameSize: 3,
 * });
 *
 * const select = new lfo.operator.Select({
 *   indexes: [2, 0],
 * });
 *
 * eventIn.start();
 * eventIn.process(0, [0, 2, 4]);
 * > [4, 0]
 * eventIn.process(0, [1, 3, 5]);
 * > [5, 1]
 */var Select=function(_BaseLfo){(0,_inherits3.default)(Select,_BaseLfo);function Select(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,Select);return(0,_possibleConstructorReturn3.default)(this,(Select.__proto__||(0,_getPrototypeOf2.default)(Select)).call(this,definitions,options));}/** @private */(0,_createClass3.default)(Select,[{key:'onParamUpdate',value:function onParamUpdate(name,value){var metas=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};(0,_get3.default)(Select.prototype.__proto__||(0,_getPrototypeOf2.default)(Select.prototype),'onParamUpdate',this).call(this,name,value,metas);var index=this.params.get('index');var indexes=this.params.get('indexes');this.select=indexes!==null?indexes:[index];}/** @private */},{key:'processStreamParams',value:function processStreamParams(prevStreamParams){var _this2=this;this.prepareStreamParams(prevStreamParams);var index=this.params.get('index');var indexes=this.params.get('indexes');var max=indexes!==null?Math.max.apply(null,indexes):index;if(max>=prevStreamParams.frameSize)throw new Error('Invalid select index "'+max+'"');this.streamParams.frameType=indexes!==null?'vector':'scalar';this.streamParams.frameSize=indexes!==null?indexes.length:1;this.select=indexes!==null?indexes:[index];// steal description() from parent
if(prevStreamParams.description){this.select.forEach(function(val,index){_this2.streamParams.description[index]=prevStreamParams.description[val];});}this.propagateStreamParams();}/** @private */},{key:'processVector',value:function processVector(frame){var data=frame.data;var outData=this.frame.data;var select=this.select;for(var i=0;i<select.length;i++){outData[i]=data[select[i]];}}}]);return Select;}(_BaseLfo3.default);exports.default=Select;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/get":18,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],172:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _get2=require('babel-runtime/helpers/get');var _get3=_interopRequireDefault(_get2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={frameSize:{type:'integer',default:512,metas:{kind:'static'}},hopSize:{// should be nullable
type:'integer',default:null,nullable:true,metas:{kind:'static'}},centeredTimeTags:{type:'boolean',default:false/**
   * Change the `frameSize` and `hopSize` of a `signal` input according to
   * the given options.
   * This operator updates the stream parameters according to its configuration.
   *
   * @memberof module:common.operator
   *
   * @param {Object} options - Override default parameters.
   * @param {Number} [options.frameSize=512] - Frame size of the output signal.
   * @param {Number} [options.hopSize=null] - Number of samples between two
   *  consecutive frames. If null, `hopSize` is set to `frameSize`.
   * @param {Boolean} [options.centeredTimeTags] - Move the time tag to the middle
   *  of the frame.
   *
   * @example
   * import * as lfo from 'waves-lfo/common';
   *
   * const eventIn = new lfo.source.EventIn({
   *   frameType: 'signal',
   *   frameSize: 10,
   *   sampleRate: 2,
   * });
   *
   * const slicer = new lfo.operator.Slicer({
   *   frameSize: 4,
   *   hopSize: 2
   * });
   *
   * const logger = new lfo.sink.Logger({ time: true, data: true });
   *
   * eventIn.connect(slicer);
   * slicer.connect(logger);
   * eventIn.start();
   *
   * eventIn.process(0, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
   * > { time: 0, data: [0, 1, 2, 3] }
   * > { time: 1, data: [2, 3, 4, 5] }
   * > { time: 2, data: [4, 5, 6, 7] }
   * > { time: 3, data: [6, 7, 8, 9] }
   */}};var Slicer=function(_BaseLfo){(0,_inherits3.default)(Slicer,_BaseLfo);function Slicer(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,Slicer);var _this=(0,_possibleConstructorReturn3.default)(this,(Slicer.__proto__||(0,_getPrototypeOf2.default)(Slicer)).call(this,definitions,options));var hopSize=_this.params.get('hopSize');var frameSize=_this.params.get('frameSize');if(!hopSize)_this.params.set('hopSize',frameSize);_this.params.addListener(_this.onParamUpdate.bind(_this));_this.frameIndex=0;return _this;}/** @private */(0,_createClass3.default)(Slicer,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);var hopSize=this.params.get('hopSize');var frameSize=this.params.get('frameSize');this.streamParams.frameSize=frameSize;this.streamParams.frameRate=prevStreamParams.sourceSampleRate/hopSize;if(this.streamParams.frameSize===1)this.streamParams.frameType='scalar';else this.streamParams.frameType='signal';this.propagateStreamParams();}/** @private */},{key:'resetStream',value:function resetStream(){(0,_get3.default)(Slicer.prototype.__proto__||(0,_getPrototypeOf2.default)(Slicer.prototype),'resetStream',this).call(this);this.frameIndex=0;}/** @private */},{key:'finalizeStream',value:function finalizeStream(endTime){if(this.frameIndex>0){var frameRate=this.streamParams.frameRate;var frameSize=this.streamParams.frameSize;var data=this.frame.data;// set the time of the last frame
this.frame.time+=1/frameRate;for(var i=this.frameIndex;i<frameSize;i++){data[i]=0;}this.propagateFrame();}(0,_get3.default)(Slicer.prototype.__proto__||(0,_getPrototypeOf2.default)(Slicer.prototype),'finalizeStream',this).call(this,endTime);}/** @private */},{key:'processFrame',value:function processFrame(frame){this.prepareFrame();this.processFunction(frame);}/** @private */},{key:'processSignal',value:function processSignal(frame){var time=frame.time;var block=frame.data;var metadata=frame.metadata;var centeredTimeTags=this.params.get('centeredTimeTags');var hopSize=this.params.get('hopSize');var outFrame=this.frame.data;var frameSize=this.streamParams.frameSize;var sampleRate=this.streamParams.sourceSampleRate;var samplePeriod=1/sampleRate;var blockSize=block.length;var frameIndex=this.frameIndex;var blockIndex=0;while(blockIndex<blockSize){var numSkip=0;// skip block samples for negative frameIndex (frameSize < hopSize)
if(frameIndex<0){numSkip=-frameIndex;frameIndex=0;// reset `frameIndex`
}if(numSkip<blockSize){blockIndex+=numSkip;// skip block segment
// can copy all the rest of the incoming block
var numCopy=blockSize-blockIndex;// connot copy more than what fits into the frame
var maxCopy=frameSize-frameIndex;if(numCopy>=maxCopy)numCopy=maxCopy;// copy block segment into frame
var copy=block.subarray(blockIndex,blockIndex+numCopy);outFrame.set(copy,frameIndex);// advance block and frame index
blockIndex+=numCopy;frameIndex+=numCopy;// send frame when completed
if(frameIndex===frameSize){// define time tag for the outFrame according to configuration
if(centeredTimeTags)this.frame.time=time+(blockIndex-frameSize/2)*samplePeriod;else this.frame.time=time+(blockIndex-frameSize)*samplePeriod;this.frame.metadata=metadata;// forward to next nodes
this.propagateFrame();// shift frame left
if(hopSize<frameSize)outFrame.set(outFrame.subarray(hopSize,frameSize),0);frameIndex-=hopSize;// hop forward
}}else{// skip entire block
var blockRest=blockSize-blockIndex;frameIndex+=blockRest;blockIndex+=blockRest;}}this.frameIndex=frameIndex;}}]);return Slicer;}(_BaseLfo3.default);exports.default=Slicer;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/get":18,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],173:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var ceil=Math.ceil;/**
 * paper: http://recherche.ircam.fr/equipes/pcm/cheveign/pss/2002_JASA_YIN.pdf
 * implementation based on https://github.com/ashokfernandez/Yin-Pitch-Tracking
 * @private
 */var definitions={threshold:{type:'float',default:0.1,// default from paper
metas:{kind:'static'}},downSamplingExp:{// downsampling factor
type:'integer',default:2,min:0,max:3,metas:{kind:'static'}},minFreq:{//
type:'float',default:60,// mean 735 samples
min:0,metas:{kind:'static'}/**
   * Yin fundamental frequency estimator, based on algorithm described in
   * [YIN, a fundamental frequency estimator for speech and music](http://recherche.ircam.fr/equipes/pcm/cheveign/pss/2002_JASA_YIN.pdf)
   * by Cheveigne and Kawahara.
   * On each frame, this operator propagate a vector containing the following
   * values: `frequency`, `probability`.
   *
   * For good results the input frame size should be large (1024 or 2048).
   *
   * _support `standalone` usage_
   *
   * @note - In node for a frame of 2048 samples, average computation time is:
   *         0.00016742283339993389 second.
   *
   * @memberof module:common.operator
   *
   * @param {Object} options - Override default parameters.
   * @param {Number} [options.threshold=0.1] - Absolute threshold to test the
   *  normalized difference (see paper for more informations).
   * @param {Number} [options.downSamplingExp=2] - Down sample the input frame by
   *  a factor of 2 at the power of `downSamplingExp` (min=0 and max=3) for
   *  performance improvements.
   * @param {Number} [options.minFreq=60] - Minimum frequency the operator can
   *  search for. This parameter defines the size of the autocorrelation performed
   *  on the signal, the input frame size should be around 2 time this size for
   *  good results (i.e. `inputFrameSize ≈ 2 * (samplingRate / minFreq)`).
   *
   * @example
   * import * as lfo from 'waves-lfo/client';
   *
   * // assuming some AudioBuffer
   * const source = new lfo.source.AudioInBuffer({
   *   audioBuffer: audioBuffer,
   * });
   *
   * const slicer = new lfo.operator.Slicer({
   *   frameSize: 2048,
   * });
   *
   * const yin = new lfo.operator.Yin();
   * const logger = new lfo.sink.Logger({ data: true });
   *
   * source.connect(slicer);
   * slicer.connect(yin);
   * yin.connect(logger);
   *
   * source.start();
   */}};var Yin=function(_BaseLfo){(0,_inherits3.default)(Yin,_BaseLfo);function Yin(options){(0,_classCallCheck3.default)(this,Yin);var _this=(0,_possibleConstructorReturn3.default)(this,(Yin.__proto__||(0,_getPrototypeOf2.default)(Yin)).call(this,definitions,options));_this.probability=0;_this.pitch=-1;_this.test=0;return _this;}/** @private */(0,_createClass3.default)(Yin,[{key:'_downsample',value:function _downsample(input,size,output,downSamplingExp){var outputSize=size>>downSamplingExp;var i=void 0,j=void 0;switch(downSamplingExp){case 0:// no down sampling
for(i=0;i<size;i++){output[i]=input[i];}break;case 1:for(i=0,j=0;i<outputSize;i++,j+=2){output[i]=0.5*(input[j]+input[j+1]);}break;case 2:for(i=0,j=0;i<outputSize;i++,j+=4){output[i]=0.25*(input[j]+input[j+1]+input[j+2]+input[j+3]);}break;case 3:for(i=0,j=0;i<outputSize;i++,j+=8){output[i]=0.125*(input[j]+input[j+1]+input[j+2]+input[j+3]+input[j+4]+input[j+5]+input[j+6]+input[j+7]);}break;}return outputSize;}/** @private */},{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);this.streamParams.frameType='vector';this.streamParams.frameSize=2;this.streamParams.description=['frequency','confidence'];this.inputFrameSize=prevStreamParams.frameSize;// handle params
var sourceSampleRate=this.streamParams.sourceSampleRate;var downSamplingExp=this.params.get('downSamplingExp');var downFactor=1<<downSamplingExp;// 2^n
var downSR=sourceSampleRate/downFactor;var downFrameSize=this.inputFrameSize/downFactor;// n_tick_down // 1 / 2^n
var minFreq=this.params.get('minFreq');// limit min freq, cf. paper IV. sensitivity to parameters
var minFreqNbrSamples=downSR/minFreq;// const bufferSize = prevStreamParams.frameSize;
this.halfBufferSize=downFrameSize/2;// minimum error to not crash but not enought to have results
if(minFreqNbrSamples>this.halfBufferSize)throw new Error('Invalid input frame size, too small for given "minFreq"');this.downSamplingExp=downSamplingExp;this.downSamplingRate=downSR;this.downFrameSize=downFrameSize;this.buffer=new Float32Array(downFrameSize);// autocorrelation buffer
this.yinBuffer=new Float32Array(this.halfBufferSize);this.propagateStreamParams();}/** @private */},{key:'_downsample',value:function _downsample(input,size,output,downSamplingExp){var outputSize=size>>downSamplingExp;var i=void 0,j=void 0;switch(downSamplingExp){case 0:// no down sampling
for(i=0;i<size;i++){output[i]=input[i];}break;case 1:for(i=0,j=0;i<outputSize;i++,j+=2){output[i]=0.5*(input[j]+input[j+1]);}break;case 2:for(i=0,j=0;i<outputSize;i++,j+=4){output[i]=0.25*(input[j]+input[j+1]+input[j+2]+input[j+3]);}break;case 3:for(i=0,j=0;i<outputSize;i++,j+=8){output[i]=0.125*(input[j]+input[j+1]+input[j+2]+input[j+3]+input[j+4]+input[j+5]+input[j+6]+input[j+7]);}break;}return outputSize;}/**
     * Step 1, 2 and 3 - Squared difference of the shifted signal with itself.
     * cumulative mean normalized difference.
     *
     * @private
     */},{key:'_normalizedDifference',value:function _normalizedDifference(buffer){var halfBufferSize=this.halfBufferSize;var yinBuffer=this.yinBuffer;var sum=0;// difference for different shift values (tau)
for(var tau=0;tau<halfBufferSize;tau++){var squaredDifference=0;// reset buffer
// take difference of the signal with a shifted version of itself then
// sqaure the result
for(var i=0;i<halfBufferSize;i++){var delta=buffer[i]-buffer[i+tau];squaredDifference+=delta*delta;}// step 3 - normalize yinBuffer
if(tau>0){sum+=squaredDifference;yinBuffer[tau]=squaredDifference*(tau/sum);}}yinBuffer[0]=1;}/**
     * Step 4 - find first best tau that is under the thresold.
     *
     * @private
     */},{key:'_absoluteThreshold',value:function _absoluteThreshold(){var threshold=this.params.get('threshold');var yinBuffer=this.yinBuffer;var halfBufferSize=this.halfBufferSize;var tau=void 0;for(tau=1;tau<halfBufferSize;tau++){if(yinBuffer[tau]<threshold){// keep increasing tau if next value is better
while(tau+1<halfBufferSize&&yinBuffer[tau+1]<yinBuffer[tau]){tau+=1;}// best tau found , yinBuffer[tau] can be seen as an estimation of
// aperiodicity then: periodicity = 1 - aperiodicity
this.probability=1-yinBuffer[tau];break;}}// return -1 if not match found
return tau===halfBufferSize?-1:tau;}/**
     * Step 5 - Find a better fractionnal approximate of tau.
     * this can probably be simplified...
     *
     * @private
     */},{key:'_parabolicInterpolation',value:function _parabolicInterpolation(tauEstimate){var halfBufferSize=this.halfBufferSize;var yinBuffer=this.yinBuffer;var betterTau=void 0;// @note - tauEstimate cannot be zero as the loop start at 1 in step 4
var x0=tauEstimate-1;var x2=tauEstimate<halfBufferSize-1?tauEstimate+1:tauEstimate;// if `tauEstimate` is last index, we can't interpolate
if(x2===tauEstimate){betterTau=tauEstimate;}else{var s0=yinBuffer[x0];var s1=yinBuffer[tauEstimate];var s2=yinBuffer[x2];// @note - don't fully understand this formula neither...
betterTau=tauEstimate+(s2-s0)/(2*(2*s1-s2-s0));}return betterTau;}/**
     * Use the `Yin` operator in `standalone` mode (i.e. outside of a graph).
     *
     * @param {Array|Float32Array} input - The signal fragment to process.
     * @return {Array} - Array containing the `frequency`, `energy`, `periodicity`
     *  and `AC1`
     *
     * @example
     * import * as lfo from 'waves-lfo/client';
     *
     * const yin = new lfo.operator.Yin();
     * yin.initStream({
     *   frameSize: 2048,
     *   frameType: 'signal',
     *   sourceSampleRate: 44100
     * });
     *
     * const results = yin.inputSignal(signal);
     */},{key:'inputSignal',value:function inputSignal(input){this.pitch=-1;this.probability=0;var buffer=this.buffer;var inputFrameSize=this.inputFrameSize;var downSamplingExp=this.downSamplingExp;var sampleRate=this.downSamplingRate;var outData=this.frame.data;var tauEstimate=-1;// subsampling
this._downsample(input,inputFrameSize,buffer,downSamplingExp);// step 1, 2, 3 - normalized squared difference of the signal with a
// shifted version of itself
this._normalizedDifference(buffer);// step 4 - find first best tau estimate that is over the threshold
tauEstimate=this._absoluteThreshold();if(tauEstimate!==-1){// step 5 - so far tau is an integer shift of the signal, check if
// there is a better fractionnal value around
tauEstimate=this._parabolicInterpolation(tauEstimate);this.pitch=sampleRate/tauEstimate;}outData[0]=this.pitch;outData[1]=this.probability;return outData;}/** @private */},{key:'processSignal',value:function processSignal(frame){this.inputSignal(frame.data);}}]);return Yin;}(_BaseLfo3.default);exports.default=Yin;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],174:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _Biquad=require('./Biquad');var _Biquad2=_interopRequireDefault(_Biquad);var _Clip=require('./Clip');var _Clip2=_interopRequireDefault(_Clip);var _Dct=require('./Dct');var _Dct2=_interopRequireDefault(_Dct);var _Delta=require('./Delta');var _Delta2=_interopRequireDefault(_Delta);var _Fft=require('./Fft');var _Fft2=_interopRequireDefault(_Fft);var _Magnitude=require('./Magnitude');var _Magnitude2=_interopRequireDefault(_Magnitude);var _MeanStddev=require('./MeanStddev');var _MeanStddev2=_interopRequireDefault(_MeanStddev);var _Mel=require('./Mel');var _Mel2=_interopRequireDefault(_Mel);var _Merger=require('./Merger');var _Merger2=_interopRequireDefault(_Merger);var _Mfcc=require('./Mfcc');var _Mfcc2=_interopRequireDefault(_Mfcc);var _MinMax=require('./MinMax');var _MinMax2=_interopRequireDefault(_MinMax);var _MovingAverage=require('./MovingAverage');var _MovingAverage2=_interopRequireDefault(_MovingAverage);var _MovingMedian=require('./MovingMedian');var _MovingMedian2=_interopRequireDefault(_MovingMedian);var _OnOff=require('./OnOff');var _OnOff2=_interopRequireDefault(_OnOff);var _Power=require('./Power');var _Power2=_interopRequireDefault(_Power);var _Rms=require('./Rms');var _Rms2=_interopRequireDefault(_Rms);var _Multiplier=require('./Multiplier');var _Multiplier2=_interopRequireDefault(_Multiplier);var _Scale=require('./Scale');var _Scale2=_interopRequireDefault(_Scale);var _Segmenter=require('./Segmenter');var _Segmenter2=_interopRequireDefault(_Segmenter);var _Select=require('./Select');var _Select2=_interopRequireDefault(_Select);var _Slicer=require('./Slicer');var _Slicer2=_interopRequireDefault(_Slicer);var _Yin=require('./Yin');var _Yin2=_interopRequireDefault(_Yin);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default={Biquad:_Biquad2.default,Clip:_Clip2.default,Dct:_Dct2.default,Delta:_Delta2.default,Fft:_Fft2.default,Magnitude:_Magnitude2.default,MeanStddev:_MeanStddev2.default,Mel:_Mel2.default,Merger:_Merger2.default,Mfcc:_Mfcc2.default,MinMax:_MinMax2.default,MovingAverage:_MovingAverage2.default,MovingMedian:_MovingMedian2.default,OnOff:_OnOff2.default,Power:_Power2.default,Rms:_Rms2.default,Multiplier:_Multiplier2.default,Scale:_Scale2.default,Segmenter:_Segmenter2.default,Select:_Select2.default,Slicer:_Slicer2.default,Yin:_Yin2.default};},{"./Biquad":152,"./Clip":153,"./Dct":154,"./Delta":155,"./Fft":156,"./Magnitude":157,"./MeanStddev":158,"./Mel":159,"./Merger":160,"./Mfcc":161,"./MinMax":162,"./MovingAverage":163,"./MovingMedian":164,"./Multiplier":165,"./OnOff":166,"./Power":167,"./Rms":168,"./Scale":169,"./Segmenter":170,"./Select":171,"./Slicer":172,"./Yin":173}],175:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={processStreamParams:{type:'any',default:null,nullable:true,metas:{kind:'dynamic'}},processFrame:{type:'any',default:null,nullable:true,metas:{kind:'dynamic'}},finalizeStream:{type:'any',default:null,nullable:true,metas:{kind:'dynamic'}}};/**
 * Create a bridge between the graph and application logic. Handle `push`
 * and `pull` paradigms.
 *
 * This sink can handle any type of input (`signal`, `vector`, `scalar`)
 *
 * @memberof module:common.sink
 *
 * @param {Object} options - Override default parameters.
 * @param {Function} [options.processFrame=null] - Callback executed on each
 *  `processFrame` call.
 * @param {Function} [options.finalizeStream=null] - Callback executed on each
 *  `finalizeStream` call.
 *
 * @see {@link module:core.BaseLfo#processFrame}
 * @see {@link module:core.BaseLfo#processStreamParams}
 *
 * @example
 * import * as lfo from 'waves-lfo/common';
 *
 * const frames = [
 *  { time: 0, data: [0, 1] },
 *  { time: 1, data: [1, 2] },
 * ];
 *
 * const eventIn = new EventIn({
 *   frameType: 'vector',
 *   frameSize: 2,
 *   frameRate: 1,
 * });
 *
 * const bridge = new Bridge({
 *   processFrame: (frame) => console.log(frame),
 * });
 *
 * eventIn.connect(bridge);
 * eventIn.start();
 *
 * // callback executed on each frame
 * eventIn.processFrame(frame[0]);
 * > { time: 0, data: [0, 1] }
 * eventIn.processFrame(frame[1]);
 * > { time: 1, data: [1, 2] }
 *
 * // pull current frame when needed
 * console.log(bridge.frame);
 * > { time: 1, data: [1, 2] }
 */var Bridge=function(_BaseLfo){(0,_inherits3.default)(Bridge,_BaseLfo);function Bridge(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,Bridge);return(0,_possibleConstructorReturn3.default)(this,(Bridge.__proto__||(0,_getPrototypeOf2.default)(Bridge)).call(this,definitions,options));}/** @private */(0,_createClass3.default)(Bridge,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);var processStreamParamsCallback=this.params.get('processStreamParams');if(processStreamParamsCallback!==null)processStreamParamsCallback(this.streamParams);this.propagateStreamParams();}/** @private */},{key:'finalizeStream',value:function finalizeStream(endTime){var finalizeStreamCallback=this.params.get('finalizeStream');if(finalizeStreamCallback!==null)finalizeStreamCallback(endTime);}// process any type
/** @private */},{key:'processScalar',value:function processScalar(){}/** @private */},{key:'processVector',value:function processVector(){}/** @private */},{key:'processSignal',value:function processSignal(){}/** @private */},{key:'processFrame',value:function processFrame(frame){this.prepareFrame();var processFrameCallback=this.params.get('processFrame');var output=this.frame;output.data=new Float32Array(this.streamParams.frameSize);// pull interface (we copy data since we don't know what could
// be done outside the graph)
for(var i=0;i<this.streamParams.frameSize;i++){output.data[i]=frame.data[i];}output.time=frame.time;output.metadata=frame.metadata;// `push` interface
if(processFrameCallback!==null)processFrameCallback(output);}}]);return Bridge;}(_BaseLfo3.default);exports.default=Bridge;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],176:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={separateArrays:{type:'boolean',default:false,constant:true},callback:{type:'any',default:null,nullable:true,metas:{kind:'dynamic'}}};/**
 * Record input frames from a graph. This sink can handle `signal`, `vector`
 * or `scalar` inputs.
 *
 * When the recording is stopped (either by calling `stop` on the node or when
 * the stream is finalized), the callback given as parameter is executed with
 * the recorder data as argument.
 *
 *
 * @param {Object} options - Override default parameters.
 * @param {Boolean} [options.separateArrays=false] - Format of the retrieved
 *  values:
 *  - when `false`, format is [{ time, data }, { time, data }, ...]
 *  - when `true`, format is { time: [...], data: [...] }
 * @param {Function} [options.callback] - Callback to execute when a new record
 *  is ended. This can happen when:
 *  - `stop` is called on the recorder
 *  - `stop` is called on the source.
 *
 * @todo - Add auto record param.
 *
 * @memberof module:common.sink
 *
 * @example
 * import * as lfo from 'waves-lfo/common';
 *
 * const eventIn = new lfo.source.EventIn({
 *  frameType: 'vector',
 *  frameSize: 2,
 *  frameRate: 0,
 * });
 *
 * const recorder = new lfo.sink.DataRecorder({
 *   callback: (data) => console.log(data),
 * });
 *
 * eventIn.connect(recorder);
 * eventIn.start();
 * recorder.start();
 *
 * eventIn.process(0, [0, 1]);
 * eventIn.process(1, [1, 2]);
 *
 * recorder.stop();
 * > [{ time: 0, data: [0, 1] }, { time: 1, data: [1, 2] }];
 */var DataRecorder=function(_BaseLfo){(0,_inherits3.default)(DataRecorder,_BaseLfo);function DataRecorder(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,DataRecorder);/**
     * Define if the node is currently recording.
     *
     * @type {Boolean}
     * @name isRecording
     * @instance
     * @memberof module:sink.SignalRecorder
     */var _this=(0,_possibleConstructorReturn3.default)(this,(DataRecorder.__proto__||(0,_getPrototypeOf2.default)(DataRecorder)).call(this,definitions,options));_this.isRecording=false;return _this;}/** @private */(0,_createClass3.default)(DataRecorder,[{key:'_initStore',value:function _initStore(){var separateArrays=this.params.get('separateArrays');if(separateArrays)this._store={time:[],data:[]};else this._store=[];}/** @private */},{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);this._initStore();this.propagateStreamParams();}/**
     * Start recording.
     *
     * @see {@link module:client.sink.DataRecorder#stop}
     */},{key:'start',value:function start(){this.isRecording=true;}/**
     * Stop recording and execute the callback defined in parameters.
     *
     * @see {@link module:client.sink.DataRecorder#start}
     */},{key:'stop',value:function stop(){if(this.isRecording){this.isRecording=false;var callback=this.params.get('callback');if(callback!==null)callback(this._store);this._initStore();}}/** @private */},{key:'finalizeStream',value:function finalizeStream(){this.stop();}// handle any input types
/** @private */},{key:'processScalar',value:function processScalar(frame){}/** @private */},{key:'processSignal',value:function processSignal(frame){}/** @private */},{key:'processVector',value:function processVector(frame){}},{key:'processFrame',value:function processFrame(frame){if(this.isRecording){this.prepareFrame(frame);var separateArrays=this.params.get('separateArrays');var entry={time:frame.time,data:new Float32Array(frame.data)};if(!separateArrays){this._store.push(entry);}else{this._store.time.push(entry.time);this._store.data.push(entry.data);}}}}]);return DataRecorder;}(_BaseLfo3.default);exports.default=DataRecorder;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],177:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={time:{type:'boolean',default:false,metas:{kind:'dynamic'}},data:{type:'boolean',default:false,metas:{kind:'dynamic'}},metadata:{type:'boolean',default:false,metas:{kind:'dynamic'}},streamParams:{type:'boolean',default:false,metas:{kind:'dynamic'}},frameIndex:{type:'boolean',default:false,metas:{kind:'dynamic'}/**
   * Log `frame.time`, `frame.data`, `frame.metadata` and/or
   * `streamAttributes` of any node in the console.
   *
   * This sink can handle any type if input (`signal`, `vector`, `scalar`)
   *
   * @param {Object} options - Override parameters default values.
   * @param {Boolean} [options.time=false] - Log incomming `frame.time` if `true`.
   * @param {Boolean} [options.data=false] - Log incomming `frame.data` if `true`.
   * @param {Boolean} [options.metadata=false] - Log incomming `frame.metadata`
   *  if `true`.
   * @param {Boolean} [options.streamParams=false] - Log `streamParams` of the
   *  previous node when graph is started.
   * @param {Boolean} [options.frameIndex=false] - Log index of the incomming
   *  `frame`.
   *
   * @memberof module:common.sink
   *
   * @example
   * import * as lfo from 'waves-lfo/common';
   *
   * const logger = new lfo.sink.Logger({ data: true });
   * whateverOperator.connect(logger);
   */}};var Logger=function(_BaseLfo){(0,_inherits3.default)(Logger,_BaseLfo);function Logger(options){(0,_classCallCheck3.default)(this,Logger);return(0,_possibleConstructorReturn3.default)(this,(Logger.__proto__||(0,_getPrototypeOf2.default)(Logger)).call(this,definitions,options));}/** @private */(0,_createClass3.default)(Logger,[{key:'processStreamParams',value:function processStreamParams(prevStreamParams){if(this.params.get('streamParams')===true)console.log(prevStreamParams);this.frameIndex=0;}/** @private */},{key:'processFunction',value:function processFunction(frame){if(this.params.get('frameIndex')===true)console.log(this.frameIndex++);if(this.params.get('time')===true)console.log(frame.time);if(this.params.get('data')===true)console.log(frame.data);if(this.params.get('metadata')===true)console.log(frame.metadata);}}]);return Logger;}(_BaseLfo3.default);exports.default=Logger;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],178:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo2=require('../../core/BaseLfo');var _BaseLfo3=_interopRequireDefault(_BaseLfo2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var definitions={duration:{type:'float',default:10,min:0,metas:{kind:'static'}},callback:{type:'any',default:null,nullable:true,metas:{kind:'dynamic'}},ignoreLeadingZeros:{type:'boolean',default:true,metas:{kind:'static'}},retrieveAudioBuffer:{type:'boolean',default:false,constant:true},audioContext:{type:'any',default:null,nullable:true}};/**
 * Record an `signal` input stream of arbitrary duration and retrieve it
 * when done.
 *
 * When recording is stopped (either when the `stop` method is called, the
 * defined duration has been recorded, or the source of the graph finalized
 * the stream), the callback given as parameter is executed  with the
 * `AudioBuffer` or `Float32Array` containing the recorded signal as argument.
 *
 * @todo - add option to return only the Float32Array and not an audio buffer
 *  (node compliant) `retrieveAudioBuffer: false`
 *
 * @param {Object} options - Override default parameters.
 * @param {Number} [options.duration=10] - Maximum duration of the recording.
 * @param {Number} [options.callback] - Callback to execute when a new record is
 *  ended. This can happen: `stop` is called on the recorder, `stop` is called
 *  on the source or when the buffer is full according to the given `duration`.
 * @param {Object} [options.ignoreLeadingZeros=true] - Start the effective
 *  recording on the first non-zero value.
 * @param {Boolean} [options.retrieveAudioBuffer=false] - Define if an `AudioBuffer`
 *  should be retrieved or only the raw Float32Array of data.
 *  (works only in browser)
 * @param {AudioContext} [options.audioContext=null] - If
 *  `retrieveAudioBuffer` is set to `true`, audio context to be used
 *  in order to create the final audio buffer.
 *  (works only in browser)
 *
 * @memberof module:common.sink
 *
 * @example
 * import * as lfo from 'waves-lfo/client';
 *
 * const audioContext = new AudioContext();
 *
 * navigator.mediaDevices
 *   .getUserMedia({ audio: true })
 *   .then(init)
 *   .catch((err) => console.error(err.stack));
 *
 * function init(stream) {
 *   const source = audioContext.createMediaStreamSource(stream);
 *
 *   const audioInNode = new lfo.source.AudioInNode({
 *     sourceNode: source,
 *     audioContext: audioContext,
 *   });
 *
 *   const signalRecorder = new lfo.sink.SignalRecorder({
 *     duration: 6,
 *     retrieveAudioBuffer: true,
 *     audioContext: audioContext,
 *     callback: (buffer) => {
 *       const bufferSource = audioContext.createBufferSource();
 *       bufferSource.buffer = buffer;
 *       bufferSource.connect(audioContext.destination);
 *       bufferSource.start();
 *     }
 *   });
 *
 *   audioInNode.connect(signalRecorder);
 *   audioInNode.start();
 *   signalRecorder.start();
 * });
 */var SignalRecorder=function(_BaseLfo){(0,_inherits3.default)(SignalRecorder,_BaseLfo);function SignalRecorder(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,SignalRecorder);/**
     * Define is the node is currently recording or not.
     *
     * @type {Boolean}
     * @name isRecording
     * @instance
     * @memberof module:client.sink.SignalRecorder
     */var _this=(0,_possibleConstructorReturn3.default)(this,(SignalRecorder.__proto__||(0,_getPrototypeOf2.default)(SignalRecorder)).call(this,definitions,options));_this.isRecording=false;var retrieveAudioBuffer=_this.params.get('retrieveAudioBuffer');var audioContext=_this.params.get('audioContext');// needed to retrieve an AudioBuffer
if(retrieveAudioBuffer&&audioContext===null)throw new Error('Invalid parameter "audioContext": an AudioContext must be provided when `retrieveAudioBuffer` is set to `true`');_this._audioContext=audioContext;_this._ignoreZeros=false;_this._isInfiniteBuffer=false;_this._stack=[];_this._buffer=null;_this._bufferLength=null;_this._currentIndex=null;return _this;}(0,_createClass3.default)(SignalRecorder,[{key:'_initBuffer',value:function _initBuffer(){this._buffer=new Float32Array(this._bufferLength);this._stack.length=0;this._currentIndex=0;}/** @private */},{key:'processStreamParams',value:function processStreamParams(prevStreamParams){this.prepareStreamParams(prevStreamParams);var duration=this.params.get('duration');var sampleRate=this.streamParams.sourceSampleRate;if(isFinite(duration)){this._isInfiniteBuffer=false;this._bufferLength=sampleRate*duration;}else{this._isInfiniteBuffer=true;this._bufferLength=sampleRate*10;}this._initBuffer();this.propagateStreamParams();}/**
     * Start recording.
     */},{key:'start',value:function start(){this.isRecording=true;this._ignoreZeros=this.params.get('ignoreLeadingZeros');}/**
     * Stop recording and execute the callback defined in parameters.
     */},{key:'stop',value:function stop(){if(this.isRecording){// ignore next incomming frame
this.isRecording=false;var retrieveAudioBuffer=this.params.get('retrieveAudioBuffer');var callback=this.params.get('callback');var currentIndex=this._currentIndex;var buffer=this._buffer;var output=void 0;if(!this._isInfiniteBuffer){output=new Float32Array(currentIndex);output.set(buffer.subarray(0,currentIndex),0);}else{var bufferLength=this._bufferLength;var stack=this._stack;output=new Float32Array(stack.length*bufferLength+currentIndex);// copy all stacked buffers
for(var i=0;i<stack.length;i++){var stackedBuffer=stack[i];output.set(stackedBuffer,bufferLength*i);};// copy data contained in current buffer
output.set(buffer.subarray(0,currentIndex),stack.length*bufferLength);}if(retrieveAudioBuffer&&this._audioContext){var length=output.length;var sampleRate=this.streamParams.sourceSampleRate;var audioBuffer=this._audioContext.createBuffer(1,length,sampleRate);var channelData=audioBuffer.getChannelData(0);channelData.set(output,0);callback(audioBuffer);}else{callback(output);}// reinit buffer, stack, and currentIndex
this._initBuffer();}}/** @private */},{key:'finalizeStream',value:function finalizeStream(endTime){this.stop();}/** @private */},{key:'processSignal',value:function processSignal(frame){if(!this.isRecording)return;var block=null;var input=frame.data;var bufferLength=this._bufferLength;var buffer=this._buffer;if(this._ignoreZeros===false){block=new Float32Array(input);}else if(input[input.length-1]!==0){// find first index where value !== 0
var i=void 0;for(i=0;i<input.length;i++){if(input[i]!==0)break;}// copy non zero segment
block=new Float32Array(input.subarray(i));// don't repeat this logic once a non-zero value has been found
this._ignoreZeros=false;}if(block!==null){var availableSpace=bufferLength-this._currentIndex;var currentBlock=void 0;if(availableSpace<block.length)currentBlock=block.subarray(0,availableSpace);else currentBlock=block;buffer.set(currentBlock,this._currentIndex);this._currentIndex+=currentBlock.length;if(this._isInfiniteBuffer&&this._currentIndex===bufferLength){this._stack.push(buffer);currentBlock=block.subarray(availableSpace);this._buffer=new Float32Array(bufferLength);this._buffer.set(currentBlock,0);this._currentIndex=currentBlock.length;}//  stop if the buffer is finite and full
if(!this._isInfiniteBuffer&&this._currentIndex===bufferLength)this.stop();}}}]);return SignalRecorder;}(_BaseLfo3.default);exports.default=SignalRecorder;},{"../../core/BaseLfo":182,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],179:[function(require,module,exports){(function(process){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _isFinite=require('babel-runtime/core-js/number/is-finite');var _isFinite2=_interopRequireDefault(_isFinite);var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _BaseLfo=require('../../core/BaseLfo');var _BaseLfo2=_interopRequireDefault(_BaseLfo);var _SourceMixin2=require('../../core/SourceMixin');var _SourceMixin3=_interopRequireDefault(_SourceMixin2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}// http://stackoverflow.com/questions/17575790/environment-detection-node-js-or-browser
var isNode=new Function('try { return this === global; } catch(e) { return false }');/**
 * Create a function that returns time in seconds according to the current
 * environnement (node or browser).
 * If running in node the time rely on `process.hrtime`, while if in the browser
 * it is provided by the `currentTime` of an `AudioContext`, this context can
 * optionnaly be provided to keep time consistency between several `EventIn`
 * nodes.
 *
 * @param {AudioContext} [audioContext=null] - Optionnal audio context.
 * @return {Function}
 * @private
 */function getTimeFunction(){var audioContext=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(isNode()){return function(){var t=process.hrtime();return t[0]+t[1]*1e-9;};}else{return function(){return performance.now()/1000;};}}var definitions={absoluteTime:{type:'boolean',default:false,constant:true},audioContext:{type:'any',default:null,constant:true,nullable:true},frameType:{type:'enum',list:['signal','vector','scalar'],default:'signal',constant:true},frameSize:{type:'integer',default:1,min:1,max:+Infinity,// not recommended...
metas:{kind:'static'}},sampleRate:{type:'float',default:null,min:0,max:+Infinity,// same here
nullable:true,metas:{kind:'static'}},frameRate:{type:'float',default:null,min:0,max:+Infinity,// same here
nullable:true,metas:{kind:'static'}},description:{type:'any',default:null,constant:true}};/**
 * The `EventIn` operator allows to manually create a stream of data or to feed
 * a stream from another source (e.g. sensors) into a processing graph.
 *
 * @param {Object} options - Override parameters' default values.
 * @param {String} [options.frameType='signal'] - Type of the input - allowed
 * values: `signal`,  `vector` or `scalar`.
 * @param {Number} [options.frameSize=1] - Size of the output frame.
 * @param {Number} [options.sampleRate=null] - Sample rate of the source stream,
 *  if of type `signal`.
 * @param {Number} [options.frameRate=null] - Rate of the source stream, if of
 *  type `vector`.
 * @param {Array|String} [options.description] - Optionnal description
 *  describing the dimensions of the output frame
 * @param {Boolean} [options.absoluteTime=false] - Define if time should be used
 *  as forwarded as given in the process method, or relatively to the time of
 *  the first `process` call after start.
 *
 * @memberof module:common.source
 *
 * @todo - Add a `logicalTime` parameter to tag frame according to frame rate.
 *
 * @example
 * import * as lfo from 'waves-lfo/client';
 *
 * const eventIn = new lfo.source.EventIn({
 *   frameType: 'vector',
 *   frameSize: 3,
 *   frameRate: 1 / 50,
 *   description: ['alpha', 'beta', 'gamma'],
 * });
 *
 * // connect source to operators and sink(s)
 *
 * // initialize and start the graph
 * eventIn.start();
 *
 * // feed `deviceorientation` data into the graph
 * window.addEventListener('deviceorientation', (e) => {
 *   const frame = {
 *     time: window.performace.now() / 1000,
 *     data: [e.alpha, e.beta, e.gamma],
 *   };
 *
 *   eventIn.processFrame(frame);
 * }, false);
 */var EventIn=function(_SourceMixin){(0,_inherits3.default)(EventIn,_SourceMixin);function EventIn(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck3.default)(this,EventIn);var _this=(0,_possibleConstructorReturn3.default)(this,(EventIn.__proto__||(0,_getPrototypeOf2.default)(EventIn)).call(this,definitions,options));var audioContext=_this.params.get('audioContext');_this._getTime=getTimeFunction(audioContext);_this._startTime=null;_this._systemTime=null;_this._absoluteTime=_this.params.get('absoluteTime');return _this;}/**
   * Propagate the `streamParams` in the graph and allow to push frames into
   * the graph. Any call to `process` or `processFrame` before `start` will be
   * ignored.
   *
   * @see {@link module:core.BaseLfo#processStreamParams}
   * @see {@link module:core.BaseLfo#resetStream}
   * @see {@link module:common.source.EventIn#stop}
   */(0,_createClass3.default)(EventIn,[{key:'start',value:function start(){var _this2=this;var startTime=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(this.initialized===false){if(this.initPromise===null)// init has not yet been called
this.initPromise=this.init();return this.initPromise.then(function(){return _this2.start(startTime);});}this._startTime=startTime;this._systemTime=null;// value set in the first `process` call
this.started=true;}/**
     * Finalize the stream and stop the whole graph. Any call to `process` or
     * `processFrame` after `stop` will be ignored.
     *
     * @see {@link module:core.BaseLfo#finalizeStream}
     * @see {@link module:common.source.EventIn#start}
     */},{key:'stop',value:function stop(){if(this.started&&this._startTime!==null){var currentTime=this._getTime();var endTime=this.frame.time+(currentTime-this._systemTime);this.finalizeStream(endTime);this.started=false;}}/** @private */},{key:'processStreamParams',value:function processStreamParams(){var frameSize=this.params.get('frameSize');var frameType=this.params.get('frameType');var sampleRate=this.params.get('sampleRate');var frameRate=this.params.get('frameRate');var description=this.params.get('description');// init operator's stream params
this.streamParams.frameSize=frameType==='scalar'?1:frameSize;this.streamParams.frameType=frameType;this.streamParams.description=description;if(frameType==='signal'){if(sampleRate===null)throw new Error('Undefined "sampleRate" for "signal" stream');this.streamParams.sourceSampleRate=sampleRate;this.streamParams.frameRate=sampleRate/frameSize;this.streamParams.sourceSampleCount=frameSize;}else if(frameType==='vector'||frameType==='scalar'){if(frameRate===null)throw new Error('Undefined "frameRate" for "'+frameType+'" stream');this.streamParams.frameRate=frameRate;this.streamParams.sourceSampleRate=frameRate;this.streamParams.sourceSampleCount=1;}this.propagateStreamParams();}/** @private */},{key:'processFunction',value:function processFunction(frame){var currentTime=this._getTime();var inData=frame.data.length?frame.data:[frame.data];var outData=this.frame.data;// if no time provided, use system time
var time=(0,_isFinite2.default)(frame.time)?frame.time:currentTime;if(this._startTime===null)this._startTime=time;if(this._absoluteTime===false)time=time-this._startTime;for(var i=0,l=this.streamParams.frameSize;i<l;i++){outData[i]=inData[i];}this.frame.time=time;this.frame.metadata=frame.metadata;// store current time to compute `endTime` on stop
this._systemTime=currentTime;}/**
     * Alternative interface to propagate a frame in the graph. Pack `time`,
     * `data` and `metadata` in a frame object.
     *
     * @param {Number} time - Frame time.
     * @param {Float32Array|Array} data - Frame data.
     * @param {Object} metadata - Optionnal frame metadata.
     *
     * @example
     * eventIn.process(1, [0, 1, 2]);
     * // is equivalent to
     * eventIn.processFrame({ time: 1, data: [0, 1, 2] });
     */},{key:'process',value:function process(time,data){var metadata=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;this.processFrame({time:time,data:data,metadata:metadata});}/**
     * Propagate a frame object in the graph.
     *
     * @param {Object} frame - Input frame.
     * @param {Number} frame.time - Frame time.
     * @param {Float32Array|Array} frame.data - Frame data.
     * @param {Object} [frame.metadata=undefined] - Optionnal frame metadata.
     *
     * @example
     * eventIn.processFrame({ time: 1, data: [0, 1, 2] });
     */},{key:'processFrame',value:function processFrame(frame){if(!this.started)return;this.prepareFrame();this.processFunction(frame);this.propagateFrame();}}]);return EventIn;}((0,_SourceMixin3.default)(_BaseLfo2.default));exports.default=EventIn;}).call(this,require('_process'));},{"../../core/BaseLfo":182,"../../core/SourceMixin":183,"_process":188,"babel-runtime/core-js/number/is-finite":5,"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],180:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});// shortcuts / helpers
var PI=Math.PI;var cos=Math.cos;var sin=Math.sin;var sqrt=Math.sqrt;// window creation functions
function initHannWindow(buffer,size,normCoefs){var linSum=0;var powSum=0;var step=2*PI/size;for(var i=0;i<size;i++){var phi=i*step;var value=0.5-0.5*cos(phi);buffer[i]=value;linSum+=value;powSum+=value*value;}normCoefs.linear=size/linSum;normCoefs.power=sqrt(size/powSum);}function initHammingWindow(buffer,size,normCoefs){var linSum=0;var powSum=0;var step=2*PI/size;for(var i=0;i<size;i++){var phi=i*step;var value=0.54-0.46*cos(phi);buffer[i]=value;linSum+=value;powSum+=value*value;}normCoefs.linear=size/linSum;normCoefs.power=sqrt(size/powSum);}function initBlackmanWindow(buffer,size,normCoefs){var linSum=0;var powSum=0;var step=2*PI/size;for(var i=0;i<size;i++){var phi=i*step;var value=0.42-0.5*cos(phi)+0.08*cos(2*phi);buffer[i]=value;linSum+=value;powSum+=value*value;}normCoefs.linear=size/linSum;normCoefs.power=sqrt(size/powSum);}function initBlackmanHarrisWindow(buffer,size,normCoefs){var linSum=0;var powSum=0;var a0=0.35875;var a1=0.48829;var a2=0.14128;var a3=0.01168;var step=2*PI/size;for(var i=0;i<size;i++){var phi=i*step;var value=a0-a1*cos(phi)+a2*cos(2*phi);-a3*cos(3*phi);buffer[i]=value;linSum+=value;powSum+=value*value;}normCoefs.linear=size/linSum;normCoefs.power=sqrt(size/powSum);}function initSineWindow(buffer,size,normCoefs){var linSum=0;var powSum=0;var step=PI/size;for(var i=0;i<size;i++){var phi=i*step;var value=sin(phi);buffer[i]=value;linSum+=value;powSum+=value*value;}normCoefs.linear=size/linSum;normCoefs.power=sqrt(size/powSum);}function initRectangleWindow(buffer,size,normCoefs){for(var i=0;i<size;i++){buffer[i]=1;}// @todo - check if these are proper values
normCoefs.linear=1;normCoefs.power=1;}/**
 * Create a buffer with window signal.
 *
 * @memberof module:common.utils
 *
 * @param {String} name - Name of the window.
 * @param {Float32Array} buffer - Buffer to be populated with the window signal.
 * @param {Number} size - Size of the buffer.
 * @param {Object} normCoefs - Object to be populated with the normailzation
 *  coefficients.
 */function initWindow(name,buffer,size,normCoefs){name=name.toLowerCase();switch(name){case'hann':case'hanning':initHannWindow(buffer,size,normCoefs);break;case'hamming':initHammingWindow(buffer,size,normCoefs);break;case'blackman':initBlackmanWindow(buffer,size,normCoefs);break;case'blackmanharris':initBlackmanHarrisWindow(buffer,size,normCoefs);break;case'sine':initSineWindow(buffer,size,normCoefs);break;case'rectangle':initRectangleWindow(buffer,size,normCoefs);break;}}exports.default=initWindow;},{}],181:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.decoders=exports.encoders=exports.opcodes=undefined;var _stringify=require('babel-runtime/core-js/json/stringify');var _stringify2=_interopRequireDefault(_stringify);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}//http://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer
// converts a nodejs Buffer to ArrayBuffer
// export function bufferToArrayBuffer(buffer) {
//   const ab = new ArrayBuffer(buffer.length);
//   const view = new Uint8Array(ab);
//   for (let i = 0; i < buffer.length; ++i)
//     view[i] = buffer[i];
//   return ab;
// }
// export function arrayBufferToBuffer(arrayBuffer) {
//   const buffer = new Buffer(arrayBuffer.byteLength);
//   const view = new Uint8Array(arrayBuffer);
//   for (let i = 0; i < buffer.length; ++i)
//     buffer[i] = view[i];
//   return buffer;
// }
// http://updates.html5rocks.com/2012/06/How-to-convert-ArrayBuffer-to-and-from-String
function Uint16Array2json(arr){var str=String.fromCharCode.apply(null,arr);return JSON.parse(str.replace(/\u0000/g,''));}function json2Uint16Array(json){var str=(0,_stringify2.default)(json);var buffer=new ArrayBuffer(str.length*2);// 2 bytes for each char
var bufferView=new Uint16Array(buffer);for(var i=0,l=str.length;i<l;i++){bufferView[i]=str.charCodeAt(i);}return bufferView;}var opcodes=exports.opcodes={INIT_MODULE_REQ:10,INIT_MODULE_ACK:11,PROCESS_STREAM_PARAMS:12,RESET_STREAM:13,FINALIZE_STREAM:14,PROCESS_FRAME:15//
};var encoders=exports.encoders={opcode:function opcode(name){var opcode=opcodes[name];var buffer=new Uint16Array(1);buffer[0]=opcode;return buffer;},// `opcode`    2 bytes (Uint16) |
initModuleReq:function initModuleReq(){var payload=encoders.opcode('INIT_MODULE_REQ');return payload.buffer;},// `opcode`    2 bytes (Uint16) |
initModuleAck:function initModuleAck(){var payload=encoders.opcode('INIT_MODULE_ACK');return payload.buffer;},// `opcode`    2 bytes (Uint16) |
// `streamParams`  n bytes (Uint16)
streamParams:function streamParams(_streamParams){var opcode=encoders.opcode('PROCESS_STREAM_PARAMS');var streamParamsBuffer=json2Uint16Array(_streamParams);var payload=new Uint16Array(1+streamParamsBuffer.length);payload.set(opcode,0);payload.set(streamParamsBuffer,1);return payload.buffer;},// `opcode`    2 bytes (Uint16) |
resetStream:function resetStream(){var payload=encoders.opcode('RESET_STREAM');return payload.buffer;},// `opcode`    2 bytes (Uint16) |
// `endTime`   8 bytes (Float64)
finalizeStream:function finalizeStream(endTime){var opcode=encoders.opcode('RESET_STREAM');var endTimeBuffer=new Float64Array(1);endTimeBuffer[0]=endTime;var payload=new Uint16Array(1+4);payload.set(opcode,0);payload.set(new Uint16Array(endTimeBuffer.buffer),1);return payload.buffer;},// `opcode`    2 bytes (Uint16) |
// `time`      8 bytes (Float64) |
// `data`      frameSize * 4 (Float32) |
// `metadata`  n bytes (Uint16)
processFrame:function processFrame(frame,frameSize){var opcode=encoders.opcode('PROCESS_FRAME');var time=new Float64Array(1);time[0]=frame.time;var data=new Float32Array(frameSize);for(var i=0;i<frameSize;i++){data[i]=frame.data[i];}var metadata=json2Uint16Array(frame.metadata);var length=1+4+2*frameSize+metadata.length;var payload=new Uint16Array(length);payload.set(opcode,0);payload.set(new Uint16Array(time.buffer),1);payload.set(new Uint16Array(data.buffer),1+4);payload.set(metadata,1+4+2*frameSize);return payload.buffer;}};var decoders=exports.decoders={opcode:function opcode(arrayBuffer){return new Uint16Array(arrayBuffer)[0];},// `opcode`    2 bytes (Uint16) |
// `streamParams`  n bytes (Uint16)
streamParams:function streamParams(arrayBuffer){var payload=new Uint16Array(arrayBuffer.slice(2));var prevStreamParams=Uint16Array2json(payload);return prevStreamParams;},// `opcode`    2 bytes (Uint16) |
// `endTime`   8 bytes (Float64)
finalizeStream:function finalizeStream(arrayBuffer){return new Float64Array(arrayBuffer.slice(2))[0];},// `opcode`    2 bytes (Uint16) |
// `time`      8 bytes (Float64) |
// `data`      frameSize * 4 (Float32) |
// `metadata`  n bytes (Uint16)
processFrame:function processFrame(arrayBuffer,frameSize){// 1 * 8 bytes
var timeStart=2;var timeEnd=timeStart+8;var time=new Float64Array(arrayBuffer.slice(timeStart,timeEnd))[0];// frameSize * 4 bytes
var dataStart=timeEnd;var dataEnd=dataStart+4*frameSize;var data=new Float32Array(arrayBuffer.slice(dataStart,dataEnd));// rest of payload
var metaStart=dataEnd;var metaBuffer=new Uint16Array(arrayBuffer.slice(metaStart));var metadata=Uint16Array2json(metaBuffer);return{time:time,data:data,metadata:metadata};}};},{"babel-runtime/core-js/json/stringify":3}],182:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _assign=require('babel-runtime/core-js/object/assign');var _assign2=_interopRequireDefault(_assign);var _promise=require('babel-runtime/core-js/promise');var _promise2=_interopRequireDefault(_promise);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _parameters=require('@ircam/parameters');var _parameters2=_interopRequireDefault(_parameters);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var id=0;/**
 * Base `lfo` class to be extended in order to create new nodes.
 *
 * Nodes are divided in 3 categories:
 * - **`source`** are responsible for acquering a signal and its properties
 *   (frameRate, frameSize, etc.)
 * - **`sink`** are endpoints of the graph, such nodes can be recorders,
 *   visualizers, etc.
 * - **`operator`** are used to make computation on the input signal and
 *   forward the results below in the graph.
 *
 * In most cases the methods to override / extend are:
 * - the **`constructor`** to define the parameters of the new lfo node.
 * - the **`processStreamParams`** method to define how the node modify the
 *   stream attributes (e.g. by changing the frame size)
 * - the **`process{FrameType}`** method to define the operations that the
 *   node apply on the stream. The type of input a node can handle is defined
 *   by its implemented interface, if it implements `processSignal`, a stream
 *   of type `signal` can be processed, `processVector` to handle
 *   an input of type `vector`.
 *
 * <span class="warning">_This class should be considered abstract and only
 * be used as a base class to extend._</span>
 *
 * #### overview of the interface
 *
 * **initModule**
 *
 * Returns a Promise that resolves when the module is initialized. Is
 * especially important for modules that rely on asynchronous underlying APIs.
 *
 * **processStreamParams(prevStreamParams)**
 *
 * `base` class (default implementation)
 * - call `prepareStreamParams`
 * - call `propagateStreamParams`
 *
 * `child` class
 * - override some of the inherited `streamParams`
 * - creates the any related logic buffers
 * - call `propagateStreamParams`
 *
 * _should not call `super.processStreamParams`_
 *
 * **prepareStreamParams()**
 *
 * - assign prevStreamParams to this.streamParams
 * - check if the class implements the correct `processInput` method
 *
 * _shouldn't be extended, only consumed in `processStreamParams`_
 *
 * **propagateStreamParams()**
 *
 * - creates the `frameData` buffer
 * - propagate `streamParams` to children
 *
 * _shouldn't be extended, only consumed in `processStreamParams`_
 *
 * **processFrame()**
 *
 * `base` class (default implementation)
 * - call `prepareFrame`
 * - assign frameTime and frameMetadata to identity
 * - call the proper function according to inputType
 * - call `propagateFrame`
 *
 * `child` class
 * - call `prepareFrame`
 * - do whatever you want with incomming frame
 * - call `propagateFrame`
 *
 * _should not call `super.processFrame`_
 *
 * **prepareFrame()**
 *
 * - if `reinit` and trigger `processStreamParams` if needed
 *
 * _shouldn't be extended, only consumed in `processFrame`_
 *
 * **propagateFrame()**
 *
 * - propagate frame to children
 *
 * _shouldn't be extended, only consumed in `processFrame`_
 *
 * @memberof module:core
 */var BaseLfo=function(){function BaseLfo(){var definitions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};(0,_classCallCheck3.default)(this,BaseLfo);this.cid=id++;/**
     * Parameter bag containing parameter instances.
     *
     * @type {Object}
     * @name params
     * @instance
     * @memberof module:core.BaseLfo
     */this.params=(0,_parameters2.default)(definitions,options);// listen for param updates
this.params.addListener(this.onParamUpdate.bind(this));/**
     * Description of the stream output of the node.
     * Set to `null` when the node is destroyed.
     *
     * @type {Object}
     * @property {Number} frameSize - Frame size at the output of the node.
     * @property {Number} frameRate - Frame rate at the output of the node.
     * @property {String} frameType - Frame type at the output of the node,
     *  possible values are `signal`, `vector` or `scalar`.
     * @property {Array|String} description - If type is `vector`, describe
     *  the dimension(s) of output stream.
     * @property {Number} sourceSampleRate - Sample rate of the source of the
     *  graph. _The value should be defined by sources and never modified_.
     * @property {Number} sourceSampleCount - Number of consecutive discrete
     *  time values contained in the data frame output by the source.
     *  _The value should be defined by sources and never modified_.
     *
     * @name streamParams
     * @instance
     * @memberof module:core.BaseLfo
     */this.streamParams={frameType:null,frameSize:1,frameRate:0,description:null,sourceSampleRate:0,sourceSampleCount:null};/**
     * Current frame. This object and its data are updated at each incomming
     * frame without reallocating memory.
     *
     * @type {Object}
     * @name frame
     * @property {Number} time - Time of the current frame.
     * @property {Float32Array} data - Data of the current frame.
     * @property {Object} metadata - Metadata associted to the current frame.
     * @instance
     * @memberof module:core.BaseLfo
     */this.frame={time:0,data:null,metadata:{}};/**
     * List of nodes connected to the ouput of the node (lower in the graph).
     * At each frame, the node forward its `frame` to to all its `nextModules`.
     *
     * @type {Array<BaseLfo>}
     * @name nextModules
     * @instance
     * @memberof module:core.BaseLfo
     * @see {@link module:core.BaseLfo#connect}
     * @see {@link module:core.BaseLfo#disconnect}
     */this.nextModules=[];/**
     * The node from which the node receive the frames (upper in the graph).
     *
     * @type {BaseLfo}
     * @name prevModule
     * @instance
     * @memberof module:core.BaseLfo
     * @see {@link module:core.BaseLfo#connect}
     * @see {@link module:core.BaseLfo#disconnect}
     */this.prevModule=null;/**
     * Is set to true when a static parameter is updated. On the next input
     * frame all the subgraph streamParams starting from this node will be
     * updated.
     *
     * @type {Boolean}
     * @name _reinit
     * @instance
     * @memberof module:core.BaseLfo
     * @private
     */this._reinit=false;}/**
   * Returns an object describing each available parameter of the node.
   *
   * @return {Object}
   */(0,_createClass3.default)(BaseLfo,[{key:'getParamsDescription',value:function getParamsDescription(){return this.params.getDefinitions();}/**
     * Reset all parameters to their initial value (as defined on instantication)
     *
     * @see {@link module:core.BaseLfo#streamParams}
     */},{key:'resetParams',value:function resetParams(){this.params.reset();}/**
     * Function called when a param is updated. By default set the `_reinit`
     * flag to `true` if the param is `static` one. This method should be
     * extended to handle particular logic bound to a specific parameter.
     *
     * @param {String} name - Name of the parameter.
     * @param {Mixed} value - Value of the parameter.
     * @param {Object} metas - Metadata associated to the parameter.
     */},{key:'onParamUpdate',value:function onParamUpdate(name,value){var metas=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(metas.kind==='static')this._reinit=true;}/**
     * Connect the current node (`prevModule`) to another node (`nextOp`).
     * A given node can be connected to several operators and propagate frames
     * to each of them.
     *
     * @param {BaseLfo} next - Next operator in the graph.
     * @see {@link module:core.BaseLfo#processFrame}
     * @see {@link module:core.BaseLfo#disconnect}
     */},{key:'connect',value:function connect(next){var _this=this;if(this.streamParams===null||next.streamParams===null)throw new Error('Invalid connection: cannot connect a dead node');if(this.streamParams.frameType!==null){// graph has already been started
// next.processStreamParams(this.streamParams);
next.initModule().then(function(){next.processStreamParams(_this.streamParams);// we can forward frame from now
_this.nextModules.push(next);next.prevModule=_this;});}else{this.nextModules.push(next);next.prevModule=this;}}/**
     * Remove the given operator from its previous operators' `nextModules`.
     *
     * @param {BaseLfo} [next=null] - The operator to disconnect from the current
     *  operator. If `null` disconnect all the next operators.
     */},{key:'disconnect',value:function disconnect(){var _this2=this;var next=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(next===null){this.nextModules.forEach(function(next){return _this2.disconnect(next);});}else{var index=this.nextModules.indexOf(this);this.nextModules.splice(index,1);next.prevModule=null;}}/**
     * Destroy all the nodes in the sub-graph starting from the current node.
     * When detroyed, the `streamParams` of the node are set to `null`, the
     * operator is then considered as `dead` and cannot be reconnected.
     *
     * @see {@link module:core.BaseLfo#connect}
     */},{key:'destroy',value:function destroy(){// destroy all chidren
var index=this.nextModules.length;while(index--){this.nextModules[index].destroy();}// disconnect itself from the previous operator
if(this.prevModule)this.prevModule.disconnect(this);// mark the object as dead
this.streamParams=null;}/**
     * Return a `Promise` that resolve when the module is ready to be consumed.
     * Some modules relies on asynchronous APIs at initialization and thus could
     * be not ready to be consumed when the graph starts.
     * A module should be consider as initialized when all next modules (children)
     * are themselves initialized. The event bubbles up from sinks to sources.
     * When all its next operators are ready, a source can consider the whole graph
     * as ready and then start to produce frames.
     * The default implementation resolves when all next operators are resolved
     * themselves.
     * An operator relying on external async API must override this method to
     * resolve only when its dependecy is ready.
     *
     * @return Promise
     * @todo - Handle dynamic connections
     */},{key:'initModule',value:function initModule(){var nextPromises=this.nextModules.map(function(module){return module.initModule();});return _promise2.default.all(nextPromises);}/**
     * Helper to initialize the stream in standalone mode.
     *
     * @param {Object} [streamParams={}] - Parameters of the stream.
     *
     * @see {@link module:core.BaseLfo#processStreamParams}
     * @see {@link module:core.BaseLfo#resetStream}
     */},{key:'initStream',value:function initStream(){var streamParams=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};this.processStreamParams(streamParams);this.resetStream();}/**
     * Reset the `frame.data` buffer by setting all its values to 0.
     * A source operator should call `processStreamParams` and `resetStream` when
     * started, each of these method propagate through the graph automaticaly.
     *
     * @see {@link module:core.BaseLfo#processStreamParams}
     */},{key:'resetStream',value:function resetStream(){// buttom up
for(var i=0,l=this.nextModules.length;i<l;i++){this.nextModules[i].resetStream();}// no buffer for `scalar` type or sink node
// @note - this should be reviewed
if(this.streamParams.frameType!=='scalar'&&this.frame.data!==null){var frameSize=this.streamParams.frameSize;var data=this.frame.data;for(var _i=0;_i<frameSize;_i++){data[_i]=0;}}}/**
     * Finalize the stream. A source node should call this method when stopped,
     * `finalizeStream` is automatically propagated throught the graph.
     *
     * @param {Number} endTime - Logical time at which the graph is stopped.
     */},{key:'finalizeStream',value:function finalizeStream(endTime){for(var i=0,l=this.nextModules.length;i<l;i++){this.nextModules[i].finalizeStream(endTime);}}/**
     * Initialize or update the operator's `streamParams` according to the
     * previous operators `streamParams` values.
     *
     * When implementing a new operator this method should:
     * 1. call `this.prepareStreamParams` with the given `prevStreamParams`
     * 2. optionnally change values to `this.streamParams` according to the
     *    logic performed by the operator.
     * 3. optionnally allocate memory for ring buffers, etc.
     * 4. call `this.propagateStreamParams` to trigger the method on the next
     *    operators in the graph.
     *
     * @param {Object} prevStreamParams - `streamParams` of the previous operator.
     *
     * @see {@link module:core.BaseLfo#prepareStreamParams}
     * @see {@link module:core.BaseLfo#propagateStreamParams}
     */},{key:'processStreamParams',value:function processStreamParams(){var prevStreamParams=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};this.prepareStreamParams(prevStreamParams);this.propagateStreamParams();}/**
     * Common logic to do at the beginning of the `processStreamParam`, must be
     * called at the beginning of any `processStreamParam` implementation.
     *
     * The method mainly check if the current node implement the interface to
     * handle the type of frame propagated by it's parent:
     * - to handle a `vector` frame type, the class must implement `processVector`
     * - to handle a `signal` frame type, the class must implement `processSignal`
     * - in case of a 'scalar' frame type, the class can implement any of the
     * following by order of preference: `processScalar`, `processVector`,
     * `processSignal`.
     *
     * @param {Object} prevStreamParams - `streamParams` of the previous operator.
     *
     * @see {@link module:core.BaseLfo#processStreamParams}
     * @see {@link module:core.BaseLfo#propagateStreamParams}
     */},{key:'prepareStreamParams',value:function prepareStreamParams(){var prevStreamParams=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_assign2.default)(this.streamParams,prevStreamParams);var prevFrameType=prevStreamParams.frameType;switch(prevFrameType){case'scalar':if(this.processScalar)this.processFunction=this.processScalar;else if(this.processVector)this.processFunction=this.processVector;else if(this.processSignal)this.processFunction=this.processSignal;else throw new Error(this.constructor.name+' - no "process" function found');break;case'vector':if(!('processVector'in this))throw new Error(this.constructor.name+' - "processVector" is not defined');this.processFunction=this.processVector;break;case'signal':if(!('processSignal'in this))throw new Error(this.constructor.name+' - "processSignal" is not defined');this.processFunction=this.processSignal;break;default:// defaults to processFunction
break;}}/**
     * Create the `this.frame.data` buffer and forward the operator's `streamParam`
     * to all its next operators, must be called at the end of any
     * `processStreamParams` implementation.
     *
     * @see {@link module:core.BaseLfo#processStreamParams}
     * @see {@link module:core.BaseLfo#prepareStreamParams}
     */},{key:'propagateStreamParams',value:function propagateStreamParams(){this.frame.data=new Float32Array(this.streamParams.frameSize);for(var i=0,l=this.nextModules.length;i<l;i++){this.nextModules[i].processStreamParams(this.streamParams);}}/**
     * Define the particular logic the operator applies to the stream.
     * According to the frame type of the previous node, the method calls one
     * of the following method `processVector`, `processSignal` or `processScalar`
     *
     * @param {Object} frame - Frame (time, data, and metadata) as given by the
     *  previous operator. The incomming frame should never be modified by
     *  the operator.
     *
     * @see {@link module:core.BaseLfo#prepareFrame}
     * @see {@link module:core.BaseLfo#propagateFrame}
     * @see {@link module:core.BaseLfo#processStreamParams}
     */},{key:'processFrame',value:function processFrame(frame){this.prepareFrame();// frameTime and frameMetadata defaults to identity
this.frame.time=frame.time;this.frame.metadata=frame.metadata;this.processFunction(frame);this.propagateFrame();}/**
     * Pointer to the method called in `processFrame` according to the
     * frame type of the previous operator. Is dynamically assigned in
     * `prepareStreamParams`.
     *
     * @see {@link module:core.BaseLfo#prepareStreamParams}
     * @see {@link module:core.BaseLfo#processFrame}
     */},{key:'processFunction',value:function processFunction(frame){this.frame=frame;}/**
     * Common logic to perform at the beginning of the `processFrame`.
     *
     * @see {@link module:core.BaseLfo#processFrame}
     */},{key:'prepareFrame',value:function prepareFrame(){if(this._reinit===true){var streamParams=this.prevModule!==null?this.prevModule.streamParams:{};this.initStream(streamParams);this._reinit=false;}}/**
     * Forward the current `frame` to the next operators, is called at the end of
     * `processFrame`.
     *
     * @see {@link module:core.BaseLfo#processFrame}
     */},{key:'propagateFrame',value:function propagateFrame(){for(var i=0,l=this.nextModules.length;i<l;i++){this.nextModules[i].processFrame(this.frame);}}}]);return BaseLfo;}();exports.default=BaseLfo;},{"@ircam/parameters":2,"babel-runtime/core-js/object/assign":6,"babel-runtime/core-js/promise":12,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16}],183:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _promise=require("babel-runtime/core-js/promise");var _promise2=_interopRequireDefault(_promise);var _getPrototypeOf=require("babel-runtime/core-js/object/get-prototype-of");var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require("babel-runtime/helpers/classCallCheck");var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require("babel-runtime/helpers/createClass");var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require("babel-runtime/helpers/possibleConstructorReturn");var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require("babel-runtime/helpers/inherits");var _inherits3=_interopRequireDefault(_inherits2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/**
 * Interface added to `LfoCore to implement source
 *
 * Source have some responsability on graph as they mostly control its whole
 * lifecycle. They must implement the start and stop method in order to
 * make sure the graph is initialized and set `started` to true.
 * A source should never accept and propagate incomming frames until `started`
 * is set to `true`.
 *
 * @name SourceMixin
 * @memberof module:core
 * @mixin
 *
 * @example
 * class MySource extends SourceMixin(BaseLfo) {}
 */var SourceMixin=function SourceMixin(superclass){return function(_superclass){(0,_inherits3.default)(_class,_superclass);function _class(){var _ref;(0,_classCallCheck3.default)(this,_class);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}var _this=(0,_possibleConstructorReturn3.default)(this,(_ref=_class.__proto__||(0,_getPrototypeOf2.default)(_class)).call.apply(_ref,[this].concat(args)));_this.initialized=false;_this.initPromise=null;_this.started=false;_this.start=_this.start.bind(_this);_this.stop=_this.stop.bind(_this);return _this;}/**
     * Initialize the graph by calling `initModule`. When the returned `Promise`
     * fulfills, the graph can be considered as initialized and `start` can be
     * called safely. If `start` is called whithout explicit `init`, `init` is
     * made internally, actual start of the graph is then not garanteed to be
     * synchronous.
     *
     * @memberof module:core.SourceMixin
     * @instance
     * @name init
     *
     * @return Promise
     *
     * @example
     * // safe initialization and start
     * source.init().then(() => source.start())
     * // safe initialization and start
     * source.start();
     */(0,_createClass3.default)(_class,[{key:"init",value:function init(){var _this2=this;this.initPromise=this.initModule().then(function(){_this2.initStream();// this is synchronous
_this2.initialized=true;return _promise2.default.resolve(true);});return this.initPromise;}/**
       * Interface method to implement that starts the graph.
       *
       * The method main purpose is to make sure take verify initialization step and
       * set `started` to `true` when done.
       * Should behave synchronously when called inside `init().then()` and async
       * if called without init step.
       *
       * @memberof module:core.SourceMixin
       * @instance
       * @name start
       *
       * @example
       * // basic `start` implementation
       * start() {
       *   if (this.initialized === false) {
       *     if (this.initPromise === null) // init has not yet been called
       *       this.initPromise = this.init();
       *
       *     this.initPromise.then(this.start);
       *     return;
       *   }
       *
       *   this.started = true;
       * }
       */},{key:"start",value:function start(){}/**
       * Interface method to implement that stops the graph.
       *
       * @memberof module:core.SourceMixin
       * @instance
       * @name stop
       *
       * @example
       * // basic `stop` implementation
       * stop() {
       *   this.started = false;
       * }
       */},{key:"stop",value:function stop(){}/**
       * The implementation should never allow incomming frames
       * if `this.started` is not `true`.
       *
       * @memberof module:core.SourceMixin
       * @instance
       * @name processFrame
       *
       * @param {Object} frame
       *
       * @example
       * // basic `processFrame` implementation
       * processFrame(frame) {
       *   if (this.started === true) {
       *     this.prepareFrame();
       *     this.processFunction(frame);
       *     this.propagateFrame();
       *   }
       * }
       */},{key:"processFrame",value:function processFrame(frame){}}]);return _class;}(superclass);};exports.default=SourceMixin;},{"babel-runtime/core-js/object/get-prototype-of":10,"babel-runtime/core-js/promise":12,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":19,"babel-runtime/helpers/possibleConstructorReturn":20}],184:[function(require,module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _BaseLfo=require('./BaseLfo');Object.defineProperty(exports,'BaseLfo',{enumerable:true,get:function get(){return _interopRequireDefault(_BaseLfo).default;}});var _SourceMixin=require('./SourceMixin');Object.defineProperty(exports,'SourceMixin',{enumerable:true,get:function get(){return _interopRequireDefault(_SourceMixin).default;}});function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var version=exports.version='1.1.6';},{"./BaseLfo":182,"./SourceMixin":183}],185:[function(require,module,exports){(function(){var Socket,myoList={};if(typeof window!=='undefined'){if(!("WebSocket"in window))throw"MYO: Websockets are not supported by your browser :(";Socket=WebSocket;}var Myo={defaults:{api_version:3,socket_url:"ws://127.0.0.1:10138/myo/",app_id:'com.myojs.default'},lockingPolicy:'standard',events:[],myos:[],onError:function onError(){throw'MYO: Error with the socket connection. Myo Connect might not be running. If it is, double check the API version.';},setLockingPolicy:function setLockingPolicy(policy){Myo.socket.send(JSON.stringify(['command',{"command":"set_locking_policy","type":policy}]));Myo.lockingPolicy=policy;return Myo;},trigger:function trigger(eventName){var args=Array.prototype.slice.apply(arguments).slice(1);emitter.trigger.call(Myo,Myo.events,eventName,args);return Myo;},on:function on(eventName,fn){return emitter.on(Myo.events,eventName,fn);},off:function off(eventName){Myo.events=emitter.off(Myo.events,eventName);return Myo;},connect:function connect(appId,socketLib){if(socketLib)Socket=socketLib;if(!Socket)throw"MYO: Must provide a socket library to use. Try 'Myo.setSocketLib('id', require('ws'))' before you connect.";if(appId){Myo.defaults.app_id=appId;}Myo.socket=new Socket(Myo.defaults.socket_url+Myo.defaults.api_version+'?appid='+Myo.defaults.app_id);Myo.socket.onmessage=Myo.handleMessage;Myo.socket.onopen=Myo.trigger.bind(Myo,'ready');Myo.socket.onclose=Myo.trigger.bind(Myo,'socket_closed');Myo.socket.onerror=Myo.onError;},disconnect:function disconnect(){Myo.socket.close();},handleMessage:function handleMessage(msg){var data=JSON.parse(msg.data)[1];if(!data.type||typeof data.myo==='undefined')return;if(data.type=='paired'){var exists=Myo.myos.some(function(myo){return myo.macAddress==data.mac_address;});if(!exists){Myo.myos.push(Myo.create({macAddress:data.mac_address,name:data.name,connectIndex:data.myo}));}}Myo.myos.map(function(myo){if(myo.connectIndex===data.myo){var isStatusEvent=true;if(eventTable[data.type]){isStatusEvent=eventTable[data.type](myo,data);}if(!eventTable[data.type]||isStatusEvent){myo.trigger(data.type,data,data.timestamp);myo.trigger('status',data,data.timestamp);}}});},create:function create(props){var myoProps=utils.merge({macAddress:undefined,name:undefined,connectIndex:undefined,locked:true,connected:false,synced:false,batteryLevel:0,lastIMU:undefined,arm:undefined,direction:undefined,warmupState:undefined,orientationOffset:{x:0,y:0,z:0,w:1},events:[]},props||{});return utils.merge(Object.create(Myo.methods),myoProps);},methods:{trigger:function trigger(eventName){var args=Array.prototype.slice.apply(arguments).slice(1);emitter.trigger.call(this,Myo.events,eventName,args);emitter.trigger.call(this,this.events,eventName,args);return this;},_trigger:function _trigger(eventName){var args=Array.prototype.slice.apply(arguments).slice(1);emitter.trigger.call(this,this.events,eventName,args);return this;},on:function on(eventName,fn){return emitter.on(this.events,eventName,fn);},off:function off(eventName){this.events=emitter.off(this.events,eventName);return this;},lock:function lock(){Myo.socket.send(JSON.stringify(["command",{"command":"lock","myo":this.connectIndex}]));return this;},unlock:function unlock(hold){Myo.socket.send(JSON.stringify(["command",{"command":"unlock","myo":this.connectIndex,"type":hold?"hold":"timed"}]));return this;},zeroOrientation:function zeroOrientation(){this.orientationOffset=utils.quatInverse(this.lastQuant);this.trigger('zero_orientation');return this;},vibrate:function vibrate(intensity){intensity=intensity||'medium';Myo.socket.send(JSON.stringify(['command',{"command":"vibrate","myo":this.connectIndex,"type":intensity}]));return this;},requestBluetoothStrength:function requestBluetoothStrength(){Myo.socket.send(JSON.stringify(['command',{"command":"request_rssi","myo":this.connectIndex}]));return this;},requestBatteryLevel:function requestBatteryLevel(){Myo.socket.send(JSON.stringify(['command',{"command":"request_battery_level","myo":this.connectIndex}]));return this;},streamEMG:function streamEMG(enabled){Myo.socket.send(JSON.stringify(['command',{"command":"set_stream_emg","myo":this.connectIndex,"type":enabled?'enabled':'disabled'}]));return this;}}};var eventTable={//Stream Events
'pose':function pose(myo,data){if(myo.lastPose){myo.trigger(myo.lastPose+'_off');myo.trigger('pose_off',myo.lastPose);}if(data.pose=='rest'){myo.trigger('rest');myo.lastPose=null;if(Myo.lockingPolicy==='standard')myo.unlock();}else{myo.trigger(data.pose);myo.trigger('pose',data.pose);myo.lastPose=data.pose;if(Myo.lockingPolicy==='standard')myo.unlock(true);}},'orientation':function orientation(myo,data){myo.lastQuant=data.orientation;var ori=utils.quatRotate(myo.orientationOffset,data.orientation);var imu_data={orientation:ori,accelerometer:{x:data.accelerometer[0],y:data.accelerometer[1],z:data.accelerometer[2]},gyroscope:{x:data.gyroscope[0],y:data.gyroscope[1],z:data.gyroscope[2]}};if(!myo.lastIMU)myo.lastIMU=imu_data;myo.trigger('orientation',imu_data.orientation,data.timestamp);myo.trigger('accelerometer',imu_data.accelerometer,data.timestamp);myo.trigger('gyroscope',imu_data.gyroscope,data.timestamp);myo.trigger('imu',imu_data,data.timestamp);myo.lastIMU=imu_data;},'emg':function emg(myo,data){myo.trigger(data.type,data.emg,data.timestamp);},//Status Events
'arm_synced':function arm_synced(myo,data){myo.arm=data.arm;myo.direction=data.x_direction;myo.warmupState=data.warmup_state;myo.synced=true;return true;},'arm_unsynced':function arm_unsynced(myo,data){myo.arm=undefined;myo.direction=undefined;myo.warmupState=undefined;myo.synced=false;return true;},'connected':function connected(myo,data){myo.connectVersion=data.version.join('.');myo.connected=true;return true;},'disconnected':function disconnected(myo,data){myo.connected=false;return true;},'locked':function locked(myo,data){myo.locked=true;return true;},'unlocked':function unlocked(myo,data){myo.locked=false;return true;},'warmup_completed':function warmup_completed(myo,data){myo.warmupState='warm';return true;},'rssi':function rssi(myo,data){data.bluetooth_strength=utils.getStrengthFromRssi(data.rssi);myo.trigger('bluetooth_strength',data.bluetooth_strength,data.timestamp);myo.trigger('rssi',data.rssi,data.timestamp);myo.trigger('status',data,data.timestamp);},'battery_level':function battery_level(myo,data){myo.batteryLevel=data.battery_level;myo.trigger('battery_level',data.battery_level,data.timestamp);myo.trigger('status',data,data.timestamp);}};var emitter={eventCounter:0,trigger:function trigger(events,eventName,args){var self=this;events.map(function(event){if(event.name==eventName)event.fn.apply(self,args);if(event.name=='*'){var args_temp=args.slice(0);args_temp.unshift(eventName);event.fn.apply(self,args_temp);}});return this;},on:function on(events,name,fn){var id=new Date().getTime()+""+emitter.eventCounter++;events.push({id:id,name:name,fn:fn});return id;},off:function off(events,name){events=events.reduce(function(result,event){if(event.name==name||event.id==name||!name){return result;}result.push(event);return result;},[]);return events;}};var utils={merge:function merge(obj1,obj2){for(var attrname in obj2){obj1[attrname]=obj2[attrname];}return obj1;},quatInverse:function quatInverse(q){var len=Math.sqrt(q.x*q.x+q.y*q.y+q.z*q.z+q.w*q.w);return{w:q.w/len,x:-q.x/len,y:-q.y/len,z:-q.z/len};},quatRotate:function quatRotate(q,r){return{w:q.w*r.w-q.x*r.x-q.y*r.y-q.z*r.z,x:q.w*r.x+q.x*r.w+q.y*r.z-q.z*r.y,y:q.w*r.y-q.x*r.z+q.y*r.w+q.z*r.x,z:q.w*r.z+q.x*r.y-q.y*r.x+q.z*r.w};},getStrengthFromRssi:function getStrengthFromRssi(rssi){var min=-95;var max=-40;rssi=rssi<min?min:rssi;rssi=rssi>max?max:rssi;return Math.round((rssi-min)*100/(max-min)*100)/100;}};if(typeof window!=='undefined')window.Myo=Myo;if(typeof module!=='undefined')module.exports=Myo;})();},{}],186:[function(require,module,exports){/*import * as lfo  from 'waves-lfo/client';
import * as Myo from 'dist/client/js/myo';
import * as SG from 'ml-savitzky-golay';
import * as config from '../../config/default';*/var lfo=require('waves-lfo/client');var Myo=require('./myo');var SG=require('ml-savitzky-golay');var config=require('../../../config/default');//Gravity constant
var g=9.81;//Constant for window Length used
var EMGWindowLength=500;var acceleroWindowLength=30;//Modification en direct
var speedRateWindowLength=10;var amplitudeWindowLength=10;var SGWindowLength=22;//Time for the bpfDisplay
var time=0;var dt=0.01;var timeEMG=0;var dtEMG=0.01;//Socked to send data to node
var socketSendJerkiness=new lfo.sink.SocketSend({port:config.socketClientToServer.port});//Starting myo
Myo.connect('com.stolksdorf.myAwesomeApp');var myMyo=void 0;//Creation of graph
var eventInAccelero=new lfo.source.EventIn({frameType:'vector',frameSize:3,frameRate:0.01,description:['acceleroX','acceleroY','acceleroZ']});var eventInSmoothness=new lfo.source.EventIn({frameType:'vector',frameSize:1,frameRate:0.01,description:['smoothX','smoothY','smoothZ']});var eventInGyro=new lfo.source.EventIn({frameType:'vector',frameSize:3,frameRate:0.01,description:['gyroX','gyroY','gyroZ']});var eventInEMG=new lfo.source.EventIn({frameType:'vector',frameSize:8,frameRate:0.01,description:['emg','emg','emg','emg','emg','emg','emg','emg']});var eventInEMGSliding=new lfo.source.EventIn({frameType:'vector',frameSize:1,frameRate:0.01,description:['emgSliding']});var eventInSmoothnessRecorded=new lfo.source.EventIn({frameType:'vector',frameSize:1,frameRate:0.01,description:['smoothX']});// initialize and start the different graph used
function initGraph(){//eventInAccelero.start();
//eventInGyro.start();
//eventInEMGSliding.start();
//eventInEMG.start();
eventInSmoothnessRecorded.start();eventInSmoothness.start();console.log("event in started");/*ACCELERO*///eventInAccelero.connect(bpfDisplayAccelero);
/*JERKINESS RATE*///eventInSmoothness.connect(bpfDisplayJerkiness);
eventInSmoothness.connect(socketSendJerkiness);/*EMG*///eventInEMG.connect(bpfDisplayEMG);
/*EMGS SLIDING WINDOW*///eventInEMGSliding.connect(bpfDisplayEMGSlinding);
}/*MYO starting event handler*/Myo.onError=function(){console.log("Couldn't connect to Myo Connect");};Myo.on('connected',function(){myMyo=this;//myMyo.setLockingPolicy("Manual");
addEvents(myMyo);});var addEvents=function addEvents(myo){myMyo.streamEMG(true);Myo.on('emg',function(data){//displayEMGWindow(EMGWindowLength,data);
});var bpfDisplayAccelero=new lfo.sink.BpfDisplay({canvas:'#canvasBPFAccelero',width:400,height:250,duration:5,max:9,min:-9});var bpfDisplayJerkiness=new lfo.sink.BpfDisplay({canvas:'#bpfDisplayJerkiness',width:400,height:250,duration:5,max:1,min:-1});var bpfDisplayEMG=new lfo.sink.BpfDisplay({canvas:'#canvasEMG1',width:400,height:250,duration:5,max:128,min:-128});var bpfDisplayEMGSlinding=new lfo.sink.BpfDisplay({canvas:'#canvasEMG2',width:400,height:250,duration:5,max:1,min:-1});//Le low pass ne marche pas et je ne sais toujours pas pourquoi. Probleme de config?
var biquad=new lfo.operator.Biquad({type:'lowpass',f0:50,gain:3,q:12});var biquad2=new lfo.operator.Biquad({type:'lowpass',f0:500,gain:3,q:12});var movingAverage=new lfo.operator.MovingAverage({order:5,fill:0});//Init the different graph used and choose wich one to display
initGraph();Myo.on('imu',function(data){myMyo.lock();displayWindow(data);});};function displayWindow(data){//displayAcceleroWindowSpeed(acceleroWindowLength,data);
displaySmoothness(SGWindowLength,data);//displayEMGWindow(SGWindowLength,data);
}/*Method sliding window computation, require less computation than the naive one*/var ansX=[];var ansY=[];var ansZ=[];var computedSpeedRate=0;var sumLastElem=0;var sumFirstElem=0;function computeSpeedRateAdaptativeWindow(windowLength,newX,newY,newZ){if(ansX.length>=windowLength){var firstElementX=ansX.shift();var firstElementY=ansY.shift();var firstElementZ=ansZ.shift();sumFirstElem=firstElementX+firstElementY+firstElementZ;}var x=Math.abs(newX/g);// let x = (newX/g);
ansX.push(x);var y=Math.abs(newY/g);// let y = (newY/g);
ansY.push(y);var z=Math.abs(newZ/g);//let z = (newZ/g);
ansZ.push(z);sumLastElem=x+y+z;computedSpeedRate=computedSpeedRate-sumFirstElem+sumLastElem;return computedSpeedRate;}//Algorithm de calcul naif de la vitesse selon une fenetre: retourne le meme resultat que l'algorithme evolué
var ansXNaif=[];var ansYNaif=[];var ansZNaif=[];function computeSpeedRateAdaptativeWindowNaif(windowLength,x,y,z){console.log("The function computeSpeedRateAdaptativeWindowNaif is deprecated, use computeSpeedRateAdaptativeWindow instead.");if(ansXNaif.length>=windowLength){ansXNaif.shift();ansYNaif.shift();ansZNaif.shift();}ansXNaif.push(x/g);ansYNaif.push(y/g);ansZNaif.push(z/g);var speedRate=0;for(var _i4=0;_i4<windowLength;_i4++){speedRate+=ansXNaif[_i4]+ansYNaif[_i4]+ansZNaif[_i4];//speedRate += Math.abs(ansX[i]/g)+ Math.abs(ansY[i]/g) +  Math.abs(ansZ[i]/g);
// speedRate +=Math.sqrt(Math.pow( Math.abs(ansX[i]/g) ,2)+ Math.pow(  Math.abs(ansY[i]/g),2) + Math.pow( Math.abs(ansZ[i]/g),2));
}return speedRate;}function displayAcceleroWindowSpeed(windowLength,data){time+=dt;var speedRate=computeSpeedRateAdaptativeWindow(windowLength,data.accelerometer.x,data.accelerometer.y,data.accelerometer.z);var frameAccelero={time:time,data:[data.accelerometer.x*speedRate,data.accelerometer.y*speedRate,data.accelerometer.z*speedRate],metadata:true};eventInAccelero.processFrame(frameAccelero);}//For the sliding window of kinestetic awareness replication
var slidingWindow=[];function displayEMGWindow(windowLength,data){timeEMG+=dtEMG;//Slinding window of EMG
if(slidingWindow.length>windowLength){slidingWindow.shift();}slidingWindow.push(Math.max.apply(Math,_toConsumableArray(data)));var maxSliding=Math.max.apply(Math,slidingWindow);var frameEMGSliding={time:timeEMG,data:slidingWindow[slidingWindow.length-1]/maxSliding};var frameEMG={time:timeEMG,data:data};eventInEMGSliding.processFrame(frameEMGSliding);eventInEMG.processFrame(frameEMG);}//variables for the savitzky-golay filter
var arrayFilteringX=[];var arrayFilteringY=[];var arrayFilteringZ=[];var ansx=[];var ansy=[];var ansz=[];var options={derivative:1,windowSize:SGWindowLength-1};var optionsGolayLowPass={derivative:0};function displaySmoothness(windowLengthSG,data){//Calculing smoothness
arrayFilteringX.push(data.accelerometer.x);arrayFilteringY.push(data.accelerometer.y);arrayFilteringZ.push(data.accelerometer.z);//taille de la fenetre de calcule de l'algorithme
if(arrayFilteringZ.length>=windowLengthSG){arrayFilteringX.shift();arrayFilteringY.shift();arrayFilteringZ.shift();//apllication de savitzky-golay filter
ansx=SG(arrayFilteringX,1,options);ansy=SG(arrayFilteringY,1,options);ansz=SG(arrayFilteringZ,1,options);//normalising data
var normaliseData=Math.sqrt(Math.pow(ansx[ansx.length-1],2)+Math.pow(ansy[ansy.length-1],2)+Math.pow(ansz[ansz.length-1],2));var amplitudeData=computeAmplitudeWindow(amplitudeWindowLength,normaliseData);var speedRate=computeSpeedRateAdaptativeWindow(speedRateWindowLength,data.accelerometer.x,data.accelerometer.y,data.accelerometer.z);// console.log("speedRate : " + speedRate);
if(recording){arrayRecorded.push(normaliseData);console.log("arrayRecorded : "+arrayRecorded.length);}var frameSmoothness={time:time,data:amplitudeData,//data: normaliseData,
metadata:null};eventInSmoothness.processFrame(frameSmoothness);}}//version naive de l'algorithme, le for peut etre remplacé comme dans la fonction: computeSpeedRateAdaptativeWindow
//Moyenne des données du jerk normalisé
var arrayAmplitude=[];function computeAmplitudeWindow(windowLength,data){var amplitudeRate=0;if(arrayAmplitude.length>windowLength){arrayAmplitude.shift();}arrayAmplitude.push(data);for(var _i5=0;_i5<windowLength;_i5++){amplitudeRate+=arrayAmplitude[_i5];}amplitudeRate/=windowLength;// console.log("amplitudeRate : " + amplitudeRate );
return amplitudeRate;}window.setSGWindowLength=function(newValue){//console.log("new value SG : " + newValue);
SGWindowLength=newValue;options={derivative:1,windowSize:SGWindowLength-1};arrayFilteringX=[];arrayFilteringY=[];arrayFilteringZ=[];ansX=[];ansY=[];ansZ=[];};window.setAmplitudeWindowLength=function(newValue){amplitudeWindowLength=newValue;};var arrayRecorded=[];var recording=false;/*Button function*/window.startRecord=function(){console.log("recording");eventInSmoothness.stop();StreamOnOff("off");arrayRecorded=[];recording=true;};window.stopRecord=function(){eventInSmoothness.start();recording=false;};var i=0;var timer;window.playRecorded=function(){timer=setInterval(playingRecord,20);eventInSmoothnessRecorded.connect(socketSendJerkiness);eventInSmoothnessRecorded.start();eventInSmoothness.stop();function playingRecord(){if(i<arrayRecorded.length){var frameSmoothness={time:i,data:arrayRecorded[i],//data: normaliseData,
metadata:null};eventInSmoothnessRecorded.processFrame(frameSmoothness);}else{clearTimeout(timer);eventInSmoothnessRecorded.stop();eventInSmoothness.start();i=0;}i++;}};window.stopingRecorded=function(){clearTimeout(timer);eventInSmoothnessRecorded.stop();eventInSmoothness.start();StreamOnOff("on");i=0;};//2000 = on, 1000 = off
var onOff=1000;window.StreamOnOff=function(value){if(value==="on"){onOff=1000;eventInSmoothness.start();}else if(value==="off"){onOff=2000;//eventInSmoothness.stop();
}else{if(onOff===1000){console.log("on : "+onOff);eventInSmoothness.start();onOff=2000;}else{console.log("off  : "+onOff);onOff=1000;//eventInSmoothness.stop();
}}var frameSmoothnessOnOFF={time:i,data:onOff,//data: normaliseData,
metadata:null};eventInSmoothness.processFrame(frameSmoothnessOnOFF);};},{"../../config/default":187,"./myo":185,"ml-savitzky-golay":132,"waves-lfo/client":133}],187:[function(require,module,exports){//import path from 'path';
//const cwd = process.cwd();
// Configuration of the application.
// Other entries can be added (as long as their name doesn't conflict with
// existing ones) to define global parameters of the application (e.g. BPM,
// synth parameters) that can then be shared easily among all clients using
// the `shared-config` service.
var config={// name of the application, used in the `.ejs` template and by default in
// the `platform` service to populate its view
appName:'ToolBox - MoveOn: A technology probe',// name of the environnement ('production' enable cache in express application)
env:'development',// version of application, can be used to force reload css and js files
// from server (cf. `html/default.ejs`)
version:'0.0.1',// define from where the assets (static files) should be loaded, these value
// could also refer to a separate server for scalability reasons. This value
// should also be used client-side to configure the `audio-buffer-manager` service.
assetsDomain:'/',// port used to open the http server, in production this value is typically 80
portServer:8000,//Port used by the myo
myoPort:10138,// location of the public directory (accessible through http(s) requests)
//  publicDirectory: path.join(cwd, 'public'),
// configuration of the `osc` service
osc:{// IP of the currently running node server
receiveAddress:'127.0.0.1',// port listening for incomming messages
receivePort:57121,// IP of the remote application
sendAddress:'127.0.0.1',// port where the remote application is listening for messages
sendPort:57120},// configuration of the `raw-socket` service
socketServerToClient:{// port used for socket connection with the client
port:9002},// configuration of the `raw-socket` service
socketClientToServer:{// port used for socket connection with the client
port:9001}};module.exports=config;},{}],188:[function(require,module,exports){// shim for using process in browser
var process=module.exports={};// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error('setTimeout has not been defined');}function defaultClearTimeout(){throw new Error('clearTimeout has not been defined');}(function(){try{if(typeof setTimeout==='function'){cachedSetTimeout=setTimeout;}else{cachedSetTimeout=defaultSetTimout;}}catch(e){cachedSetTimeout=defaultSetTimout;}try{if(typeof clearTimeout==='function'){cachedClearTimeout=clearTimeout;}else{cachedClearTimeout=defaultClearTimeout;}}catch(e){cachedClearTimeout=defaultClearTimeout;}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){//normal enviroments in sane situations
return setTimeout(fun,0);}// if setTimeout wasn't available but was latter defined
if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0);}try{// when when somebody has screwed with setTimeout but no I.E. maddness
return cachedSetTimeout(fun,0);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
return cachedSetTimeout.call(null,fun,0);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
return cachedSetTimeout.call(this,fun,0);}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){//normal enviroments in sane situations
return clearTimeout(marker);}// if clearTimeout wasn't available but was latter defined
if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker);}try{// when when somebody has screwed with setTimeout but no I.E. maddness
return cachedClearTimeout(marker);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
return cachedClearTimeout.call(null,marker);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
// Some versions of I.E. have different rules for clearTimeout vs setTimeout
return cachedClearTimeout.call(this,marker);}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return;}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue);}else{queueIndex=-1;}if(queue.length){drainQueue();}}function drainQueue(){if(draining){return;}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run();}}queueIndex=-1;len=queue.length;}currentQueue=null;draining=false;runClearTimeout(timeout);}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i];}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue);}};// v8 likes predictible objects
function Item(fun,array){this.fun=fun;this.array=array;}Item.prototype.run=function(){this.fun.apply(null,this.array);};process.title='browser';process.browser=true;process.env={};process.argv=[];process.version='';// empty string to avoid regexp issues
process.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.prependListener=noop;process.prependOnceListener=noop;process.listeners=function(name){return[];};process.binding=function(name){throw new Error('process.binding is not supported');};process.cwd=function(){return'/';};process.chdir=function(dir){throw new Error('process.chdir is not supported');};process.umask=function(){return 0;};},{}]},{},[186]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,