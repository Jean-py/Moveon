"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * @license
 * Video.js 7.5.4 <http://videojs.com/>
 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
 * Available under Apache License Version 2.0
 * <https://github.com/videojs/video.js/blob/master/LICENSE>
 *
 * Includes vtt.js <https://github.com/mozilla/vtt.js>
 * Available under Apache License Version 2.0
 * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>
 */
!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = t(require("global/window"), require("global/document")) : "function" == typeof define && define.amd ? define(["global/window", "global/document"], t) : (e = e || self).videojs = t(e.window, e.document);
}(undefined, function (h, d) {
  h = h && h.hasOwnProperty("default") ? h.default : h, d = d && d.hasOwnProperty("default") ? d.default : d;var p = "7.5.4";function f(e, t) {
    e.prototype = Object.create(t.prototype), (e.prototype.constructor = e).__proto__ = t;
  }function s(e, t) {
    return (s = Object.setPrototypeOf || function (e, t) {
      return e.__proto__ = t, e;
    })(e, t);
  }function o(e, t, n) {
    return (o = function () {
      if ("undefined" == typeof Reflect || !Reflect.construct) return !1;if (Reflect.construct.sham) return !1;if ("function" == typeof Proxy) return !0;try {
        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
      } catch (e) {
        return !1;
      }
    }() ? Reflect.construct : function (e, t, n) {
      var i = [null];i.push.apply(i, t);var r = new (Function.bind.apply(e, i))();return n && s(r, n.prototype), r;
    }).apply(null, arguments);
  }function v(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e;
  }function t(e, t) {
    return t || (t = e.slice(0)), e.raw = t, e;
  }var l = [],
      e = function e(o, a) {
    return function (e, t, n) {
      var i = a.levels[t],
          r = new RegExp("^(" + i + ")$");if ("log" !== e && n.unshift(e.toUpperCase() + ":"), n.unshift(o + ":"), l && l.push([].concat(n)), h.console) {
        var s = h.console[e];s || "debug" !== e || (s = h.console.info || h.console.log), s && i && r.test(e) && s[Array.isArray(n) ? "apply" : "call"](h.console, n);
      }
    };
  };var g = function t(n) {
    var i,
        r = "info",
        s = function s() {
      for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
        t[n] = arguments[n];
      }i("log", r, t);
    };return i = e(n, s), s.createLogger = function (e) {
      return t(n + ": " + e);
    }, s.levels = { all: "debug|log|warn|error", off: "", debug: "debug|log|warn|error", info: "log|warn|error", warn: "warn|error", error: "error", DEFAULT: r }, s.level = function (e) {
      if ("string" == typeof e) {
        if (!s.levels.hasOwnProperty(e)) throw new Error('"' + e + '" in not a valid log level');r = e;
      }return r;
    }, (s.history = function () {
      return l ? [].concat(l) : [];
    }).filter = function (t) {
      return (l || []).filter(function (e) {
        return new RegExp(".*" + t + ".*").test(e[0]);
      });
    }, s.history.clear = function () {
      l && (l.length = 0);
    }, s.history.disable = function () {
      null !== l && (l.length = 0, l = null);
    }, s.history.enable = function () {
      null === l && (l = []);
    }, s.error = function () {
      for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
        t[n] = arguments[n];
      }return i("error", r, t);
    }, s.warn = function () {
      for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
        t[n] = arguments[n];
      }return i("warn", r, t);
    }, s.debug = function () {
      for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
        t[n] = arguments[n];
      }return i("debug", r, t);
    }, s;
  }("VIDEOJS"),
      y = g.createLogger;var m = function m(e) {
    for (var t = "", n = 0; n < arguments.length; n++) {
      t += e[n].replace(/\n\r?\s*/g, "") + (arguments[n + 1] || "");
    }return t;
  },
      n = Object.prototype.toString,
      r = function r(e) {
    return b(e) ? Object.keys(e) : [];
  };function a(t, n) {
    r(t).forEach(function (e) {
      return n(t[e], e);
    });
  }function _(n) {
    for (var e = arguments.length, t = new Array(1 < e ? e - 1 : 0), i = 1; i < e; i++) {
      t[i - 1] = arguments[i];
    }return Object.assign ? Object.assign.apply(Object, [n].concat(t)) : (t.forEach(function (e) {
      e && a(e, function (e, t) {
        n[t] = e;
      });
    }), n);
  }function b(e) {
    return !!e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e));
  }function c(e) {
    return b(e) && "[object Object]" === n.call(e) && e.constructor === Object;
  }function i(e, t) {
    if (!e || !t) return "";if ("function" != typeof h.getComputedStyle) return "";var n = h.getComputedStyle(e);return n ? n[t] : "";
  }function u() {
    var e = t(["Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ", " to ", "."]);return u = function u() {
      return e;
    }, e;
  }function T(e) {
    return "string" == typeof e && /\S/.test(e);
  }function k(e) {
    if (/\s/.test(e)) throw new Error("class has illegal whitespace characters");
  }function C() {
    return d === h.document;
  }function E(e) {
    return b(e) && 1 === e.nodeType;
  }function w() {
    try {
      return h.parent !== h.self;
    } catch (e) {
      return !0;
    }
  }function S(i) {
    return function (e, t) {
      if (!T(e)) return d[i](null);T(t) && (t = d.querySelector(t));var n = E(t) ? t : d;return n[i] && n[i](e);
    };
  }function x(e, n, t, i) {
    void 0 === e && (e = "div"), void 0 === n && (n = {}), void 0 === t && (t = {});var r = d.createElement(e);return Object.getOwnPropertyNames(n).forEach(function (e) {
      var t = n[e];-1 !== e.indexOf("aria-") || "role" === e || "type" === e ? (g.warn(m(u(), e, t)), r.setAttribute(e, t)) : "textContent" === e ? j(r, t) : r[e] = t;
    }), Object.getOwnPropertyNames(t).forEach(function (e) {
      r.setAttribute(e, t[e]);
    }), i && X(r, i), r;
  }function j(e, t) {
    return "undefined" == typeof e.textContent ? e.innerText = t : e.textContent = t, e;
  }function A(e, t) {
    t.firstChild ? t.insertBefore(e, t.firstChild) : t.appendChild(e);
  }function P(e, t) {
    return k(t), e.classList ? e.classList.contains(t) : (n = t, new RegExp("(^|\\s)" + n + "($|\\s)")).test(e.className);var n;
  }function L(e, t) {
    return e.classList ? e.classList.add(t) : P(e, t) || (e.className = (e.className + " " + t).trim()), e;
  }function M(e, t) {
    return e.classList ? e.classList.remove(t) : (k(t), e.className = e.className.split(/\s+/).filter(function (e) {
      return e !== t;
    }).join(" ")), e;
  }function N(e, t, n) {
    var i = P(e, t);if ("function" == typeof n && (n = n(e, t)), "boolean" != typeof n && (n = !i), n !== i) return n ? L(e, t) : M(e, t), e;
  }function O(n, i) {
    Object.getOwnPropertyNames(i).forEach(function (e) {
      var t = i[e];null === t || "undefined" == typeof t || !1 === t ? n.removeAttribute(e) : n.setAttribute(e, !0 === t ? "" : t);
    });
  }function I(e) {
    var t = {},
        n = ",autoplay,controls,playsinline,loop,muted,default,defaultMuted,";if (e && e.attributes && 0 < e.attributes.length) for (var i = e.attributes, r = i.length - 1; 0 <= r; r--) {
      var s = i[r].name,
          o = i[r].value;"boolean" != typeof e[s] && -1 === n.indexOf("," + s + ",") || (o = null !== o), t[s] = o;
    }return t;
  }function D(e, t) {
    return e.getAttribute(t);
  }function R(e, t, n) {
    e.setAttribute(t, n);
  }function B(e, t) {
    e.removeAttribute(t);
  }function F() {
    d.body.focus(), d.onselectstart = function () {
      return !1;
    };
  }function H() {
    d.onselectstart = function () {
      return !0;
    };
  }function V(e) {
    if (e && e.getBoundingClientRect && e.parentNode) {
      var t = e.getBoundingClientRect(),
          n = {};return ["bottom", "height", "left", "right", "top", "width"].forEach(function (e) {
        void 0 !== t[e] && (n[e] = t[e]);
      }), n.height || (n.height = parseFloat(i(e, "height"))), n.width || (n.width = parseFloat(i(e, "width"))), n;
    }
  }function z(e) {
    var t;if (e.getBoundingClientRect && e.parentNode && (t = e.getBoundingClientRect()), !t) return { left: 0, top: 0 };var n = d.documentElement,
        i = d.body,
        r = n.clientLeft || i.clientLeft || 0,
        s = h.pageXOffset || i.scrollLeft,
        o = t.left + s - r,
        a = n.clientTop || i.clientTop || 0,
        l = h.pageYOffset || i.scrollTop,
        c = t.top + l - a;return { left: Math.round(o), top: Math.round(c) };
  }function W(e, t) {
    var n = {},
        i = z(e),
        r = e.offsetWidth,
        s = e.offsetHeight,
        o = i.top,
        a = i.left,
        l = t.pageY,
        c = t.pageX;return t.changedTouches && (c = t.changedTouches[0].pageX, l = t.changedTouches[0].pageY), n.y = Math.max(0, Math.min(1, (o - l + s) / s)), n.x = Math.max(0, Math.min(1, (c - a) / r)), n;
  }function K(e) {
    return b(e) && 3 === e.nodeType;
  }function U(e) {
    for (; e.firstChild;) {
      e.removeChild(e.firstChild);
    }return e;
  }function q(e) {
    return "function" == typeof e && (e = e()), (Array.isArray(e) ? e : [e]).map(function (e) {
      return "function" == typeof e && (e = e()), E(e) || K(e) ? e : "string" == typeof e && /\S/.test(e) ? d.createTextNode(e) : void 0;
    }).filter(function (e) {
      return e;
    });
  }function X(t, e) {
    return q(e).forEach(function (e) {
      return t.appendChild(e);
    }), t;
  }function $(e, t) {
    return X(U(e), t);
  }function Y(e) {
    return void 0 === e.button && void 0 === e.buttons || 0 === e.button && void 0 === e.buttons || 0 === e.button && 1 === e.buttons;
  }var G = S("querySelector"),
      Q = S("querySelectorAll"),
      J = Object.freeze({ isReal: C, isEl: E, isInFrame: w, createEl: x, textContent: j, prependTo: A, hasClass: P, addClass: L, removeClass: M, toggleClass: N, setAttributes: O, getAttributes: I, getAttribute: D, setAttribute: R, removeAttribute: B, blockTextSelection: F, unblockTextSelection: H, getBoundingClientRect: V, findPosition: z, getPointerPosition: W, isTextNode: K, emptyEl: U, normalizeContent: q, appendContent: X, insertContent: $, isSingleLeftClick: Y, $: G, $$: Q }),
      Z = 1;function ee() {
    return Z++;
  }var te = {},
      ne = "vdata" + new Date().getTime();function ie(e) {
    var t = e[ne];return t || (t = e[ne] = ee()), te[t] || (te[t] = {}), te[t];
  }function re(e) {
    var t = e[ne];return !!t && !!Object.getOwnPropertyNames(te[t]).length;
  }function se(t) {
    var e = t[ne];if (e) {
      delete te[e];try {
        delete t[ne];
      } catch (e) {
        t.removeAttribute ? t.removeAttribute(ne) : t[ne] = null;
      }
    }
  }function oe(e, t) {
    var n = ie(e);0 === n.handlers[t].length && (delete n.handlers[t], e.removeEventListener ? e.removeEventListener(t, n.dispatcher, !1) : e.detachEvent && e.detachEvent("on" + t, n.dispatcher)), Object.getOwnPropertyNames(n.handlers).length <= 0 && (delete n.handlers, delete n.dispatcher, delete n.disabled), 0 === Object.getOwnPropertyNames(n).length && se(e);
  }function ae(t, n, e, i) {
    e.forEach(function (e) {
      t(n, e, i);
    });
  }function le(e) {
    function t() {
      return !0;
    }function n() {
      return !1;
    }if (!e || !e.isPropagationStopped) {
      var i = e || h.event;for (var r in e = {}, i) {
        "layerX" !== r && "layerY" !== r && "keyLocation" !== r && "webkitMovementX" !== r && "webkitMovementY" !== r && ("returnValue" === r && i.preventDefault || (e[r] = i[r]));
      }if (e.target || (e.target = e.srcElement || d), e.relatedTarget || (e.relatedTarget = e.fromElement === e.target ? e.toElement : e.fromElement), e.preventDefault = function () {
        i.preventDefault && i.preventDefault(), e.returnValue = !1, i.returnValue = !1, e.defaultPrevented = !0;
      }, e.defaultPrevented = !1, e.stopPropagation = function () {
        i.stopPropagation && i.stopPropagation(), e.cancelBubble = !0, i.cancelBubble = !0, e.isPropagationStopped = t;
      }, e.isPropagationStopped = n, e.stopImmediatePropagation = function () {
        i.stopImmediatePropagation && i.stopImmediatePropagation(), e.isImmediatePropagationStopped = t, e.stopPropagation();
      }, e.isImmediatePropagationStopped = n, null !== e.clientX && void 0 !== e.clientX) {
        var s = d.documentElement,
            o = d.body;e.pageX = e.clientX + (s && s.scrollLeft || o && o.scrollLeft || 0) - (s && s.clientLeft || o && o.clientLeft || 0), e.pageY = e.clientY + (s && s.scrollTop || o && o.scrollTop || 0) - (s && s.clientTop || o && o.clientTop || 0);
      }e.which = e.charCode || e.keyCode, null !== e.button && void 0 !== e.button && (e.button = 1 & e.button ? 0 : 4 & e.button ? 1 : 2 & e.button ? 2 : 0);
    }return e;
  }var ce = !1;!function () {
    try {
      var e = Object.defineProperty({}, "passive", { get: function get() {
          ce = !0;
        } });h.addEventListener("test", null, e), h.removeEventListener("test", null, e);
    } catch (e) {}
  }();var ue = ["touchstart", "touchmove"];function he(o, e, t) {
    if (Array.isArray(e)) return ae(he, o, e, t);var a = ie(o);if (a.handlers || (a.handlers = {}), a.handlers[e] || (a.handlers[e] = []), t.guid || (t.guid = ee()), a.handlers[e].push(t), a.dispatcher || (a.disabled = !1, a.dispatcher = function (e, t) {
      if (!a.disabled) {
        e = le(e);var n = a.handlers[e.type];if (n) for (var i = n.slice(0), r = 0, s = i.length; r < s && !e.isImmediatePropagationStopped(); r++) {
          try {
            i[r].call(o, e, t);
          } catch (e) {
            g.error(e);
          }
        }
      }
    }), 1 === a.handlers[e].length) if (o.addEventListener) {
      var n = !1;ce && -1 < ue.indexOf(e) && (n = { passive: !0 }), o.addEventListener(e, a.dispatcher, n);
    } else o.attachEvent && o.attachEvent("on" + e, a.dispatcher);
  }function de(e, t, n) {
    if (re(e)) {
      var i = ie(e);if (i.handlers) {
        if (Array.isArray(t)) return ae(de, e, t, n);var r = function r(e, t) {
          i.handlers[t] = [], oe(e, t);
        };if (void 0 !== t) {
          var s = i.handlers[t];if (s) if (n) {
            if (n.guid) for (var o = 0; o < s.length; o++) {
              s[o].guid === n.guid && s.splice(o--, 1);
            }oe(e, t);
          } else r(e, t);
        } else for (var a in i.handlers) {
          Object.prototype.hasOwnProperty.call(i.handlers || {}, a) && r(e, a);
        }
      }
    }
  }function pe(e, t, n) {
    var i = re(e) ? ie(e) : {},
        r = e.parentNode || e.ownerDocument;if ("string" == typeof t ? t = { type: t, target: e } : t.target || (t.target = e), t = le(t), i.dispatcher && i.dispatcher.call(e, t, n), r && !t.isPropagationStopped() && !0 === t.bubbles) pe.call(null, r, t, n);else if (!r && !t.defaultPrevented && t.target && t.target[t.type]) {
      var s = ie(t.target);t.target[t.type] && (s.disabled = !0, "function" == typeof t.target[t.type] && t.target[t.type](), s.disabled = !1);
    }return !t.defaultPrevented;
  }function fe(t, n, i) {
    if (Array.isArray(n)) return ae(fe, t, n, i);var e = function e() {
      de(t, n, e), i.apply(this, arguments);
    };e.guid = i.guid = i.guid || ee(), he(t, n, e);
  }var ve,
      ge = Object.freeze({ fixEvent: le, on: he, off: de, trigger: pe, one: fe }),
      ye = !1,
      me = function me() {
    if (C() && !1 !== ve.options.autoSetup) {
      var e = Array.prototype.slice.call(d.getElementsByTagName("video")),
          t = Array.prototype.slice.call(d.getElementsByTagName("audio")),
          n = Array.prototype.slice.call(d.getElementsByTagName("video-js")),
          i = e.concat(t, n);if (i && 0 < i.length) for (var r = 0, s = i.length; r < s; r++) {
        var o = i[r];if (!o || !o.getAttribute) {
          _e(1);break;
        }void 0 === o.player && null !== o.getAttribute("data-setup") && ve(o);
      } else ye || _e(1);
    }
  };function _e(e, t) {
    t && (ve = t), h.setTimeout(me, e);
  }C() && "complete" === d.readyState ? ye = !0 : fe(h, "load", function () {
    ye = !0;
  });var be,
      Te = function Te(e) {
    var t = d.createElement("style");return t.className = e, t;
  },
      ke = function ke(e, t) {
    e.styleSheet ? e.styleSheet.cssText = t : e.textContent = t;
  },
      Ce = function Ce(e, t, n) {
    t.guid || (t.guid = ee());var i = function i() {
      return t.apply(e, arguments);
    };return i.guid = n ? n + "_" + t.guid : t.guid, i;
  },
      Ee = function Ee(t, n) {
    var i = Date.now();return function () {
      var e = Date.now();n <= e - i && (t.apply(void 0, arguments), i = e);
    };
  },
      we = function we() {};we.prototype.allowedEvents_ = {}, we.prototype.addEventListener = we.prototype.on = function (e, t) {
    var n = this.addEventListener;this.addEventListener = function () {}, he(this, e, t), this.addEventListener = n;
  }, we.prototype.removeEventListener = we.prototype.off = function (e, t) {
    de(this, e, t);
  }, we.prototype.one = function (e, t) {
    var n = this.addEventListener;this.addEventListener = function () {}, fe(this, e, t), this.addEventListener = n;
  }, we.prototype.dispatchEvent = we.prototype.trigger = function (e) {
    var t = e.type || e;"string" == typeof e && (e = { type: t }), e = le(e), this.allowedEvents_[t] && this["on" + t] && this["on" + t](e), pe(this, e);
  }, we.prototype.queueTrigger = function (e) {
    var t = this;be || (be = new Map());var n = e.type || e,
        i = be.get(this);i || (i = new Map(), be.set(this, i));var r = i.get(n);i.delete(n), h.clearTimeout(r);var s = h.setTimeout(function () {
      0 === i.size && (i = null, be.delete(t)), t.trigger(e);
    }, 0);i.set(n, s);
  };var Se = function Se(t) {
    return t instanceof we || !!t.eventBusEl_ && ["on", "one", "off", "trigger"].every(function (e) {
      return "function" == typeof t[e];
    });
  },
      xe = function xe(e) {
    return "string" == typeof e && /\S/.test(e) || Array.isArray(e) && !!e.length;
  },
      je = function je(e) {
    if (!e.nodeName && !Se(e)) throw new Error("Invalid target; must be a DOM node or evented object.");
  },
      Ae = function Ae(e) {
    if (!xe(e)) throw new Error("Invalid event type; must be a non-empty string or array.");
  },
      Pe = function Pe(e) {
    if ("function" != typeof e) throw new Error("Invalid listener; must be a function.");
  },
      Le = function Le(e, t) {
    var n,
        i,
        r,
        s = t.length < 3 || t[0] === e || t[0] === e.eventBusEl_;return r = s ? (n = e.eventBusEl_, 3 <= t.length && t.shift(), i = t[0], t[1]) : (n = t[0], i = t[1], t[2]), je(n), Ae(i), Pe(r), { isTargetingSelf: s, target: n, type: i, listener: r = Ce(e, r) };
  },
      Me = function Me(e, t, n, i) {
    je(e), e.nodeName ? ge[t](e, n, i) : e[t](n, i);
  },
      Ne = { on: function on() {
      for (var e = this, t = arguments.length, n = new Array(t), i = 0; i < t; i++) {
        n[i] = arguments[i];
      }var r = Le(this, n),
          s = r.isTargetingSelf,
          o = r.target,
          a = r.type,
          l = r.listener;if (Me(o, "on", a, l), !s) {
        var c = function c() {
          return e.off(o, a, l);
        };c.guid = l.guid;var u = function u() {
          return e.off("dispose", c);
        };u.guid = l.guid, Me(this, "on", "dispose", c), Me(o, "on", "dispose", u);
      }
    }, one: function one() {
      for (var r = this, e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
        t[n] = arguments[n];
      }var i = Le(this, t),
          s = i.isTargetingSelf,
          o = i.target,
          a = i.type,
          l = i.listener;if (s) Me(o, "one", a, l);else {
        var c = function e() {
          r.off(o, a, e);for (var t = arguments.length, n = new Array(t), i = 0; i < t; i++) {
            n[i] = arguments[i];
          }l.apply(null, n);
        };c.guid = l.guid, Me(o, "one", a, c);
      }
    }, off: function off(e, t, n) {
      if (!e || xe(e)) de(this.eventBusEl_, e, t);else {
        var i = e,
            r = t;je(i), Ae(r), Pe(n), n = Ce(this, n), this.off("dispose", n), i.nodeName ? (de(i, r, n), de(i, "dispose", n)) : Se(i) && (i.off(r, n), i.off("dispose", n));
      }
    }, trigger: function trigger(e, t) {
      return pe(this.eventBusEl_, e, t);
    } };function Oe(e, t) {
    void 0 === t && (t = {});var n = t.eventBusKey;if (n) {
      if (!e[n].nodeName) throw new Error('The eventBusKey "' + n + '" does not refer to an element.');e.eventBusEl_ = e[n];
    } else e.eventBusEl_ = x("span", { className: "vjs-event-bus" });return _(e, Ne), e.eventedCallbacks && e.eventedCallbacks.forEach(function (e) {
      e();
    }), e.on("dispose", function () {
      e.off(), h.setTimeout(function () {
        e.eventBusEl_ = null;
      }, 0);
    }), e;
  }var Ie = { state: {}, setState: function setState(e) {
      var n,
          i = this;return "function" == typeof e && (e = e()), a(e, function (e, t) {
        i.state[t] !== e && ((n = n || {})[t] = { from: i.state[t], to: e }), i.state[t] = e;
      }), n && Se(this) && this.trigger({ changes: n, type: "statechanged" }), n;
    } };function De(e, t) {
    return _(e, Ie), e.state = _({}, e.state, t), "function" == typeof e.handleStateChanged && Se(e) && e.on("statechanged", e.handleStateChanged), e;
  }function Re(e) {
    return "string" != typeof e ? e : e.charAt(0).toUpperCase() + e.slice(1);
  }function Be() {
    for (var n = {}, e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
      t[i] = arguments[i];
    }return t.forEach(function (e) {
      e && a(e, function (e, t) {
        c(e) ? (c(n[t]) || (n[t] = {}), n[t] = Be(n[t], e)) : n[t] = e;
      });
    }), n;
  }var Fe = function () {
    function c(e, t, n) {
      if (!e && this.play ? this.player_ = e = this : this.player_ = e, this.parentComponent_ = null, this.options_ = Be({}, this.options_), t = this.options_ = Be(this.options_, t), this.id_ = t.id || t.el && t.el.id, !this.id_) {
        var i = e && e.id && e.id() || "no_player";this.id_ = i + "_component_" + ee();
      }this.name_ = t.name || null, t.el ? this.el_ = t.el : !1 !== t.createEl && (this.el_ = this.createEl()), !1 !== t.evented && Oe(this, { eventBusKey: this.el_ ? "el_" : null }), De(this, this.constructor.defaultState), this.children_ = [], this.childIndex_ = {}, !(this.childNameIndex_ = {}) !== t.initChildren && this.initChildren(), this.ready(n), !1 !== t.reportTouchActivity && this.enableTouchActivity();
    }var e = c.prototype;return e.dispose = function () {
      if (this.trigger({ type: "dispose", bubbles: !1 }), this.children_) for (var e = this.children_.length - 1; 0 <= e; e--) {
        this.children_[e].dispose && this.children_[e].dispose();
      }this.children_ = null, this.childIndex_ = null, this.childNameIndex_ = null, this.parentComponent_ = null, this.el_ && (this.el_.parentNode && this.el_.parentNode.removeChild(this.el_), se(this.el_), this.el_ = null), this.player_ = null;
    }, e.player = function () {
      return this.player_;
    }, e.options = function (e) {
      return g.warn("this.options() has been deprecated and will be moved to the constructor in 6.0"), e && (this.options_ = Be(this.options_, e)), this.options_;
    }, e.el = function () {
      return this.el_;
    }, e.createEl = function (e, t, n) {
      return x(e, t, n);
    }, e.localize = function (e, r, t) {
      void 0 === t && (t = e);var n = this.player_.language && this.player_.language(),
          i = this.player_.languages && this.player_.languages(),
          s = i && i[n],
          o = n && n.split("-")[0],
          a = i && i[o],
          l = t;return s && s[e] ? l = s[e] : a && a[e] && (l = a[e]), r && (l = l.replace(/\{(\d+)\}/g, function (e, t) {
        var n = r[t - 1],
            i = n;return "undefined" == typeof n && (i = e), i;
      })), l;
    }, e.contentEl = function () {
      return this.contentEl_ || this.el_;
    }, e.id = function () {
      return this.id_;
    }, e.name = function () {
      return this.name_;
    }, e.children = function () {
      return this.children_;
    }, e.getChildById = function (e) {
      return this.childIndex_[e];
    }, e.getChild = function (e) {
      if (e) return e = Re(e), this.childNameIndex_[e];
    }, e.addChild = function (e, t, n) {
      var i, r;if (void 0 === t && (t = {}), void 0 === n && (n = this.children_.length), "string" == typeof e) {
        r = Re(e);var s = t.componentClass || r;t.name = r;var o = c.getComponent(s);if (!o) throw new Error("Component " + s + " does not exist");if ("function" != typeof o) return null;i = new o(this.player_ || this, t);
      } else i = e;if (i.parentComponent_ && i.parentComponent_.removeChild(i), this.children_.splice(n, 0, i), i.parentComponent_ = this, "function" == typeof i.id && (this.childIndex_[i.id()] = i), (r = r || i.name && Re(i.name())) && (this.childNameIndex_[r] = i), "function" == typeof i.el && i.el()) {
        var a = this.contentEl().children[n] || null;this.contentEl().insertBefore(i.el(), a);
      }return i;
    }, e.removeChild = function (e) {
      if ("string" == typeof e && (e = this.getChild(e)), e && this.children_) {
        for (var t = !1, n = this.children_.length - 1; 0 <= n; n--) {
          if (this.children_[n] === e) {
            t = !0, this.children_.splice(n, 1);break;
          }
        }if (t) {
          e.parentComponent_ = null, this.childIndex_[e.id()] = null, this.childNameIndex_[e.name()] = null;var i = e.el();i && i.parentNode === this.contentEl() && this.contentEl().removeChild(e.el());
        }
      }
    }, e.initChildren = function () {
      var r = this,
          i = this.options_.children;if (i) {
        var e,
            s = this.options_,
            n = c.getComponent("Tech");(e = Array.isArray(i) ? i : Object.keys(i)).concat(Object.keys(this.options_).filter(function (t) {
          return !e.some(function (e) {
            return "string" == typeof e ? t === e : t === e.name;
          });
        })).map(function (e) {
          var t, n;return n = "string" == typeof e ? i[t = e] || r.options_[t] || {} : (t = e.name, e), { name: t, opts: n };
        }).filter(function (e) {
          var t = c.getComponent(e.opts.componentClass || Re(e.name));return t && !n.isTech(t);
        }).forEach(function (e) {
          var t = e.name,
              n = e.opts;if (void 0 !== s[t] && (n = s[t]), !1 !== n) {
            !0 === n && (n = {}), n.playerOptions = r.options_.playerOptions;var i = r.addChild(t, n);i && (r[t] = i);
          }
        });
      }
    }, e.buildCSSClass = function () {
      return "";
    }, e.ready = function (e, t) {
      if (void 0 === t && (t = !1), e) return this.isReady_ ? void (t ? e.call(this) : this.setTimeout(e, 1)) : (this.readyQueue_ = this.readyQueue_ || [], void this.readyQueue_.push(e));
    }, e.triggerReady = function () {
      this.isReady_ = !0, this.setTimeout(function () {
        var e = this.readyQueue_;this.readyQueue_ = [], e && 0 < e.length && e.forEach(function (e) {
          e.call(this);
        }, this), this.trigger("ready");
      }, 1);
    }, e.$ = function (e, t) {
      return G(e, t || this.contentEl());
    }, e.$$ = function (e, t) {
      return Q(e, t || this.contentEl());
    }, e.hasClass = function (e) {
      return P(this.el_, e);
    }, e.addClass = function (e) {
      L(this.el_, e);
    }, e.removeClass = function (e) {
      M(this.el_, e);
    }, e.toggleClass = function (e, t) {
      N(this.el_, e, t);
    }, e.show = function () {
      this.removeClass("vjs-hidden");
    }, e.hide = function () {
      this.addClass("vjs-hidden");
    }, e.lockShowing = function () {
      this.addClass("vjs-lock-showing");
    }, e.unlockShowing = function () {
      this.removeClass("vjs-lock-showing");
    }, e.getAttribute = function (e) {
      return D(this.el_, e);
    }, e.setAttribute = function (e, t) {
      R(this.el_, e, t);
    }, e.removeAttribute = function (e) {
      B(this.el_, e);
    }, e.width = function (e, t) {
      return this.dimension("width", e, t);
    }, e.height = function (e, t) {
      return this.dimension("height", e, t);
    }, e.dimensions = function (e, t) {
      this.width(e, !0), this.height(t);
    }, e.dimension = function (e, t, n) {
      if (void 0 !== t) return null !== t && t == t || (t = 0), -1 !== ("" + t).indexOf("%") || -1 !== ("" + t).indexOf("px") ? this.el_.style[e] = t : this.el_.style[e] = "auto" === t ? "" : t + "px", void (n || this.trigger("componentresize"));if (!this.el_) return 0;var i = this.el_.style[e],
          r = i.indexOf("px");return -1 !== r ? parseInt(i.slice(0, r), 10) : parseInt(this.el_["offset" + Re(e)], 10);
    }, e.currentDimension = function (e) {
      var t = 0;if ("width" !== e && "height" !== e) throw new Error("currentDimension only accepts width or height value");if ("function" == typeof h.getComputedStyle) {
        var n = h.getComputedStyle(this.el_);t = n.getPropertyValue(e) || n[e];
      }if (0 === (t = parseFloat(t))) {
        var i = "offset" + Re(e);t = this.el_[i];
      }return t;
    }, e.currentDimensions = function () {
      return { width: this.currentDimension("width"), height: this.currentDimension("height") };
    }, e.currentWidth = function () {
      return this.currentDimension("width");
    }, e.currentHeight = function () {
      return this.currentDimension("height");
    }, e.focus = function () {
      this.el_.focus();
    }, e.blur = function () {
      this.el_.blur();
    }, e.handleKeyPress = function (e) {
      this.player_ && this.player_.handleKeyPress(e);
    }, e.emitTapEvents = function () {
      var i,
          t = 0,
          r = null;this.on("touchstart", function (e) {
        1 === e.touches.length && (r = { pageX: e.touches[0].pageX, pageY: e.touches[0].pageY }, t = new Date().getTime(), i = !0);
      }), this.on("touchmove", function (e) {
        if (1 < e.touches.length) i = !1;else if (r) {
          var t = e.touches[0].pageX - r.pageX,
              n = e.touches[0].pageY - r.pageY;10 < Math.sqrt(t * t + n * n) && (i = !1);
        }
      });var e = function e() {
        i = !1;
      };this.on("touchleave", e), this.on("touchcancel", e), this.on("touchend", function (e) {
        !(r = null) === i && new Date().getTime() - t < 200 && (e.preventDefault(), this.trigger("tap"));
      });
    }, e.enableTouchActivity = function () {
      if (this.player() && this.player().reportUserActivity) {
        var t,
            n = Ce(this.player(), this.player().reportUserActivity);this.on("touchstart", function () {
          n(), this.clearInterval(t), t = this.setInterval(n, 250);
        });var e = function e(_e2) {
          n(), this.clearInterval(t);
        };this.on("touchmove", n), this.on("touchend", e), this.on("touchcancel", e);
      }
    }, e.setTimeout = function (e, t) {
      var n,
          i,
          r = this;return e = Ce(this, e), n = h.setTimeout(function () {
        r.off("dispose", i), e();
      }, t), (i = function i() {
        return r.clearTimeout(n);
      }).guid = "vjs-timeout-" + n, this.on("dispose", i), n;
    }, e.clearTimeout = function (e) {
      h.clearTimeout(e);var t = function t() {};return t.guid = "vjs-timeout-" + e, this.off("dispose", t), e;
    }, e.setInterval = function (e, t) {
      var n = this;e = Ce(this, e);var i = h.setInterval(e, t),
          r = function r() {
        return n.clearInterval(i);
      };return r.guid = "vjs-interval-" + i, this.on("dispose", r), i;
    }, e.clearInterval = function (e) {
      h.clearInterval(e);var t = function t() {};return t.guid = "vjs-interval-" + e, this.off("dispose", t), e;
    }, e.requestAnimationFrame = function (e) {
      var t,
          n,
          i = this;return this.supportsRaf_ ? (e = Ce(this, e), t = h.requestAnimationFrame(function () {
        i.off("dispose", n), e();
      }), (n = function n() {
        return i.cancelAnimationFrame(t);
      }).guid = "vjs-raf-" + t, this.on("dispose", n), t) : this.setTimeout(e, 1e3 / 60);
    }, e.cancelAnimationFrame = function (e) {
      if (this.supportsRaf_) {
        h.cancelAnimationFrame(e);var t = function t() {};return t.guid = "vjs-raf-" + e, this.off("dispose", t), e;
      }return this.clearTimeout(e);
    }, c.registerComponent = function (e, t) {
      if ("string" != typeof e || !e) throw new Error('Illegal component name, "' + e + '"; must be a non-empty string.');var n,
          i = c.getComponent("Tech"),
          r = i && i.isTech(t),
          s = c === t || c.prototype.isPrototypeOf(t.prototype);if (r || !s) throw n = r ? "techs must be registered using Tech.registerTech()" : "must be a Component subclass", new Error('Illegal component, "' + e + '"; ' + n + ".");e = Re(e), c.components_ || (c.components_ = {});var o = c.getComponent("Player");if ("Player" === e && o && o.players) {
        var a = o.players,
            l = Object.keys(a);if (a && 0 < l.length && l.map(function (e) {
          return a[e];
        }).every(Boolean)) throw new Error("Can not register Player component after player has been created.");
      }return c.components_[e] = t;
    }, c.getComponent = function (e) {
      if (e) return e = Re(e), c.components_ && c.components_[e] ? c.components_[e] : void 0;
    }, c;
  }();Fe.prototype.supportsRaf_ = "function" == typeof h.requestAnimationFrame && "function" == typeof h.cancelAnimationFrame, Fe.registerComponent("Component", Fe);var He,
      Ve,
      ze,
      We,
      Ke = h.navigator && h.navigator.userAgent || "",
      Ue = /AppleWebKit\/([\d.]+)/i.exec(Ke),
      qe = Ue ? parseFloat(Ue.pop()) : null,
      Xe = /iPad/i.test(Ke),
      $e = /iPhone/i.test(Ke) && !Xe,
      Ye = /iPod/i.test(Ke),
      Ge = $e || Xe || Ye,
      Qe = (He = Ke.match(/OS (\d+)_/i)) && He[1] ? He[1] : null,
      Je = /Android/i.test(Ke),
      Ze = function () {
    var e = Ke.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);if (!e) return null;var t = e[1] && parseFloat(e[1]),
        n = e[2] && parseFloat(e[2]);return t && n ? parseFloat(e[1] + "." + e[2]) : t || null;
  }(),
      et = Je && Ze < 5 && qe < 537,
      tt = /Firefox/i.test(Ke),
      nt = /Edge/i.test(Ke),
      it = !nt && (/Chrome/i.test(Ke) || /CriOS/i.test(Ke)),
      rt = (Ve = Ke.match(/(Chrome|CriOS)\/(\d+)/)) && Ve[2] ? parseFloat(Ve[2]) : null,
      st = (ze = /MSIE\s(\d+)\.\d/.exec(Ke), !(We = ze && parseFloat(ze[1])) && /Trident\/7.0/i.test(Ke) && /rv:11.0/.test(Ke) && (We = 11), We),
      ot = /Safari/i.test(Ke) && !it && !Je && !nt,
      at = (ot || Ge) && !it,
      lt = C() && ("ontouchstart" in h || h.navigator.maxTouchPoints || h.DocumentTouch && h.document instanceof h.DocumentTouch),
      ct = Object.freeze({ IS_IPAD: Xe, IS_IPHONE: $e, IS_IPOD: Ye, IS_IOS: Ge, IOS_VERSION: Qe, IS_ANDROID: Je, ANDROID_VERSION: Ze, IS_NATIVE_ANDROID: et, IS_FIREFOX: tt, IS_EDGE: nt, IS_CHROME: it, CHROME_VERSION: rt, IE_VERSION: st, IS_SAFARI: ot, IS_ANY_SAFARI: at, TOUCH_ENABLED: lt });function ut(e, t, n, i) {
    return function (e, t, n) {
      if ("number" != typeof t || t < 0 || n < t) throw new Error("Failed to execute '" + e + "' on 'TimeRanges': The index provided (" + t + ") is non-numeric or out of bounds (0-" + n + ").");
    }(e, i, n.length - 1), n[i][t];
  }function ht(e) {
    return void 0 === e || 0 === e.length ? { length: 0, start: function start() {
        throw new Error("This TimeRanges object is empty");
      }, end: function end() {
        throw new Error("This TimeRanges object is empty");
      } } : { length: e.length, start: ut.bind(null, "start", 0, e), end: ut.bind(null, "end", 1, e) };
  }function dt(e, t) {
    return Array.isArray(e) ? ht(e) : void 0 === e || void 0 === t ? ht() : ht([[e, t]]);
  }function pt(e, t) {
    var n,
        i,
        r = 0;if (!t) return 0;e && e.length || (e = dt(0, 0));for (var s = 0; s < e.length; s++) {
      n = e.start(s), t < (i = e.end(s)) && (i = t), r += i - n;
    }return r / t;
  }for (var ft, vt = {}, gt = [["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror", "fullscreen"], ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror", "-webkit-full-screen"], ["mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror", "-moz-full-screen"], ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError", "-ms-fullscreen"]], yt = gt[0], mt = !1, _t = 0; _t < gt.length; _t++) {
    if (gt[_t][1] in d) {
      ft = gt[_t];break;
    }
  }if (ft) {
    for (var bt = 0; bt < ft.length; bt++) {
      vt[yt[bt]] = ft[bt];
    }mt = ft[0] === yt[0];
  }function Tt(e) {
    if (e instanceof Tt) return e;"number" == typeof e ? this.code = e : "string" == typeof e ? this.message = e : b(e) && ("number" == typeof e.code && (this.code = e.code), _(this, e)), this.message || (this.message = Tt.defaultMessages[this.code] || "");
  }Tt.prototype.code = 0, Tt.prototype.message = "", Tt.prototype.status = null, Tt.errorTypes = ["MEDIA_ERR_CUSTOM", "MEDIA_ERR_ABORTED", "MEDIA_ERR_NETWORK", "MEDIA_ERR_DECODE", "MEDIA_ERR_SRC_NOT_SUPPORTED", "MEDIA_ERR_ENCRYPTED"], Tt.defaultMessages = { 1: "You aborted the media playback", 2: "A network error caused the media download to fail part-way.", 3: "The media playback was aborted due to a corruption problem or because the media used features your browser did not support.", 4: "The media could not be loaded, either because the server or network failed or because the format is not supported.", 5: "The media is encrypted and we do not have the keys to decrypt it." };for (var kt = 0; kt < Tt.errorTypes.length; kt++) {
    Tt[Tt.errorTypes[kt]] = kt, Tt.prototype[Tt.errorTypes[kt]] = kt;
  }var Ct = function Ct(e, t) {
    var n,
        i = null;try {
      n = JSON.parse(e, t);
    } catch (e) {
      i = e;
    }return [i, n];
  };function Et(e) {
    return null != e && "function" == typeof e.then;
  }function wt(e) {
    Et(e) && e.then(null, function (e) {});
  }var St = function St(i) {
    return ["kind", "label", "language", "id", "inBandMetadataTrackDispatchType", "mode", "src"].reduce(function (e, t, n) {
      return i[t] && (e[t] = i[t]), e;
    }, { cues: i.cues && Array.prototype.map.call(i.cues, function (e) {
        return { startTime: e.startTime, endTime: e.endTime, text: e.text, id: e.id };
      }) });
  },
      xt = function xt(e) {
    var t = e.$$("track"),
        n = Array.prototype.map.call(t, function (e) {
      return e.track;
    });return Array.prototype.map.call(t, function (e) {
      var t = St(e.track);return e.src && (t.src = e.src), t;
    }).concat(Array.prototype.filter.call(e.textTracks(), function (e) {
      return -1 === n.indexOf(e);
    }).map(St));
  },
      jt = function jt(e, n) {
    return e.forEach(function (e) {
      var t = n.addRemoteTextTrack(e).track;!e.src && e.cues && e.cues.forEach(function (e) {
        return t.addCue(e);
      });
    }), n.textTracks();
  };function At(e, t) {
    return e(t = { exports: {} }, t.exports), t.exports;
  }var Pt = At(function (e, t) {
    function n(e) {
      if (e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e))) {
        var t = e.which || e.keyCode || e.charCode;t && (e = t);
      }if ("number" == typeof e) return o[e];var n,
          i = String(e);return (n = r[i.toLowerCase()]) ? n : (n = s[i.toLowerCase()]) || (1 === i.length ? i.charCodeAt(0) : void 0);
    }n.isEventKey = function (e, t) {
      if (e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e))) {
        var n = e.which || e.keyCode || e.charCode;if (null == n) return !1;if ("string" == typeof t) {
          var i;if (i = r[t.toLowerCase()]) return i === n;if (i = s[t.toLowerCase()]) return i === n;
        } else if ("number" == typeof t) return t === n;return !1;
      }
    };var r = (t = e.exports = n).code = t.codes = { backspace: 8, tab: 9, enter: 13, shift: 16, ctrl: 17, alt: 18, "pause/break": 19, "caps lock": 20, esc: 27, space: 32, "page up": 33, "page down": 34, end: 35, home: 36, left: 37, up: 38, right: 39, down: 40, insert: 45, delete: 46, command: 91, "left command": 91, "right command": 93, "numpad *": 106, "numpad +": 107, "numpad -": 109, "numpad .": 110, "numpad /": 111, "num lock": 144, "scroll lock": 145, "my computer": 182, "my calculator": 183, ";": 186, "=": 187, ",": 188, "-": 189, ".": 190, "/": 191, "`": 192, "[": 219, "\\": 220, "]": 221, "'": 222 },
        s = t.aliases = { windows: 91, "⇧": 16, "⌥": 18, "⌃": 17, "⌘": 91, ctl: 17, control: 17, option: 18, pause: 19, break: 19, caps: 20, return: 13, escape: 27, spc: 32, spacebar: 32, pgup: 33, pgdn: 34, ins: 45, del: 46, cmd: 91 };for (i = 97; i < 123; i++) {
      r[String.fromCharCode(i)] = i - 32;
    }for (var i = 48; i < 58; i++) {
      r[i - 48] = i;
    }for (i = 1; i < 13; i++) {
      r["f" + i] = i + 111;
    }for (i = 0; i < 10; i++) {
      r["numpad " + i] = i + 96;
    }var o = t.names = t.title = {};for (i in r) {
      o[r[i]] = i;
    }for (var a in s) {
      r[a] = s[a];
    }
  }),
      Lt = (Pt.code, Pt.codes, Pt.aliases, Pt.names, Pt.title, "vjs-modal-dialog"),
      Mt = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).opened_ = n.hasBeenOpened_ = n.hasBeenFilled_ = !1, n.closeable(!n.options_.uncloseable), n.content(n.options_.content), n.contentEl_ = x("div", { className: Lt + "-content" }, { role: "document" }), n.descEl_ = x("p", { className: Lt + "-description vjs-control-text", id: n.el().getAttribute("aria-describedby") }), j(n.descEl_, n.description()), n.el_.appendChild(n.descEl_), n.el_.appendChild(n.contentEl_), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      return i.prototype.createEl.call(this, "div", { className: this.buildCSSClass(), tabIndex: -1 }, { "aria-describedby": this.id() + "_description", "aria-hidden": "true", "aria-label": this.label(), role: "dialog" });
    }, t.dispose = function () {
      this.contentEl_ = null, this.descEl_ = null, this.previouslyActiveEl_ = null, i.prototype.dispose.call(this);
    }, t.buildCSSClass = function () {
      return Lt + " vjs-hidden " + i.prototype.buildCSSClass.call(this);
    }, t.handleKeyPress = function (e) {
      Pt.isEventKey(e, "Escape") && this.closeable() && this.close();
    }, t.label = function () {
      return this.localize(this.options_.label || "Modal Window");
    }, t.description = function () {
      var e = this.options_.description || this.localize("This is a modal window.");return this.closeable() && (e += " " + this.localize("This modal can be closed by pressing the Escape key or activating the close button.")), e;
    }, t.open = function () {
      if (!this.opened_) {
        var e = this.player();this.trigger("beforemodalopen"), this.opened_ = !0, (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) && this.fill(), this.wasPlaying_ = !e.paused(), this.options_.pauseOnOpen && this.wasPlaying_ && e.pause(), this.closeable() && this.on(this.el_.ownerDocument, "keydown", Ce(this, this.handleKeyPress)), this.hadControls_ = e.controls(), e.controls(!1), this.show(), this.conditionalFocus_(), this.el().setAttribute("aria-hidden", "false"), this.trigger("modalopen"), this.hasBeenOpened_ = !0;
      }
    }, t.opened = function (e) {
      return "boolean" == typeof e && this[e ? "open" : "close"](), this.opened_;
    }, t.close = function () {
      if (this.opened_) {
        var e = this.player();this.trigger("beforemodalclose"), this.opened_ = !1, this.wasPlaying_ && this.options_.pauseOnOpen && e.play(), this.closeable() && this.off(this.el_.ownerDocument, "keydown", Ce(this, this.handleKeyPress)), this.hadControls_ && e.controls(!0), this.hide(), this.el().setAttribute("aria-hidden", "true"), this.trigger("modalclose"), this.conditionalBlur_(), this.options_.temporary && this.dispose();
      }
    }, t.closeable = function (e) {
      if ("boolean" == typeof e) {
        var t = this.closeable_ = !!e,
            n = this.getChild("closeButton");if (t && !n) {
          var i = this.contentEl_;this.contentEl_ = this.el_, n = this.addChild("closeButton", { controlText: "Close Modal Dialog" }), this.contentEl_ = i, this.on(n, "close", this.close);
        }!t && n && (this.off(n, "close", this.close), this.removeChild(n), n.dispose());
      }return this.closeable_;
    }, t.fill = function () {
      this.fillWith(this.content());
    }, t.fillWith = function (e) {
      var t = this.contentEl(),
          n = t.parentNode,
          i = t.nextSibling;this.trigger("beforemodalfill"), this.hasBeenFilled_ = !0, n.removeChild(t), this.empty(), $(t, e), this.trigger("modalfill"), i ? n.insertBefore(t, i) : n.appendChild(t);var r = this.getChild("closeButton");r && n.appendChild(r.el_);
    }, t.empty = function () {
      this.trigger("beforemodalempty"), U(this.contentEl()), this.trigger("modalempty");
    }, t.content = function (e) {
      return "undefined" != typeof e && (this.content_ = e), this.content_;
    }, t.conditionalFocus_ = function () {
      var e = d.activeElement,
          t = this.player_.el_;this.previouslyActiveEl_ = null, (t.contains(e) || t === e) && (this.previouslyActiveEl_ = e, this.focus(), this.on(d, "keydown", this.handleKeyDown));
    }, t.conditionalBlur_ = function () {
      this.previouslyActiveEl_ && (this.previouslyActiveEl_.focus(), this.previouslyActiveEl_ = null), this.off(d, "keydown", this.handleKeyDown);
    }, t.handleKeyDown = function (e) {
      if (Pt.isEventKey(e, "Tab")) {
        for (var t, n = this.focusableEls_(), i = this.el_.querySelector(":focus"), r = 0; r < n.length; r++) {
          if (i === n[r]) {
            t = r;break;
          }
        }d.activeElement === this.el_ && (t = 0), e.shiftKey && 0 === t ? (n[n.length - 1].focus(), e.preventDefault()) : e.shiftKey || t !== n.length - 1 || (n[0].focus(), e.preventDefault());
      }
    }, t.focusableEls_ = function () {
      var e = this.el_.querySelectorAll("*");return Array.prototype.filter.call(e, function (e) {
        return (e instanceof h.HTMLAnchorElement || e instanceof h.HTMLAreaElement) && e.hasAttribute("href") || (e instanceof h.HTMLInputElement || e instanceof h.HTMLSelectElement || e instanceof h.HTMLTextAreaElement || e instanceof h.HTMLButtonElement) && !e.hasAttribute("disabled") || e instanceof h.HTMLIFrameElement || e instanceof h.HTMLObjectElement || e instanceof h.HTMLEmbedElement || e.hasAttribute("tabindex") && -1 !== e.getAttribute("tabindex") || e.hasAttribute("contenteditable");
      });
    }, e;
  }(Fe);Mt.prototype.options_ = { pauseOnOpen: !0, temporary: !0 }, Fe.registerComponent("ModalDialog", Mt);var Nt = function (i) {
    function e(e) {
      var t;void 0 === e && (e = []), (t = i.call(this) || this).tracks_ = [], Object.defineProperty(v(v(t)), "length", { get: function get() {
          return this.tracks_.length;
        } });for (var n = 0; n < e.length; n++) {
        t.addTrack(e[n]);
      }return t;
    }f(e, i);var t = e.prototype;return t.addTrack = function (e) {
      var t = this.tracks_.length;"" + t in this || Object.defineProperty(this, t, { get: function get() {
          return this.tracks_[t];
        } }), -1 === this.tracks_.indexOf(e) && (this.tracks_.push(e), this.trigger({ track: e, type: "addtrack", target: this }));
    }, t.removeTrack = function (e) {
      for (var t, n = 0, i = this.length; n < i; n++) {
        if (this[n] === e) {
          (t = this[n]).off && t.off(), this.tracks_.splice(n, 1);break;
        }
      }t && this.trigger({ track: t, type: "removetrack", target: this });
    }, t.getTrackById = function (e) {
      for (var t = null, n = 0, i = this.length; n < i; n++) {
        var r = this[n];if (r.id === e) {
          t = r;break;
        }
      }return t;
    }, e;
  }(we);for (var Ot in Nt.prototype.allowedEvents_ = { change: "change", addtrack: "addtrack", removetrack: "removetrack" }, Nt.prototype.allowedEvents_) {
    Nt.prototype["on" + Ot] = null;
  }var It = function It(e, t) {
    for (var n = 0; n < e.length; n++) {
      Object.keys(e[n]).length && t.id !== e[n].id && (e[n].enabled = !1);
    }
  },
      Dt = function (i) {
    function e(e) {
      var t;void 0 === e && (e = []);for (var n = e.length - 1; 0 <= n; n--) {
        if (e[n].enabled) {
          It(e, e[n]);break;
        }
      }return (t = i.call(this, e) || this).changing_ = !1, t;
    }f(e, i);var t = e.prototype;return t.addTrack = function (e) {
      var t = this;e.enabled && It(this, e), i.prototype.addTrack.call(this, e), e.addEventListener && (e.enabledChange_ = function () {
        t.changing_ || (t.changing_ = !0, It(t, e), t.changing_ = !1, t.trigger("change"));
      }, e.addEventListener("enabledchange", e.enabledChange_));
    }, t.removeTrack = function (e) {
      i.prototype.removeTrack.call(this, e), e.removeEventListener && e.enabledChange_ && (e.removeEventListener("enabledchange", e.enabledChange_), e.enabledChange_ = null);
    }, e;
  }(Nt),
      Rt = function Rt(e, t) {
    for (var n = 0; n < e.length; n++) {
      Object.keys(e[n]).length && t.id !== e[n].id && (e[n].selected = !1);
    }
  },
      Bt = function (i) {
    function e(e) {
      var t;void 0 === e && (e = []);for (var n = e.length - 1; 0 <= n; n--) {
        if (e[n].selected) {
          Rt(e, e[n]);break;
        }
      }return (t = i.call(this, e) || this).changing_ = !1, Object.defineProperty(v(v(t)), "selectedIndex", { get: function get() {
          for (var e = 0; e < this.length; e++) {
            if (this[e].selected) return e;
          }return -1;
        }, set: function set() {} }), t;
    }f(e, i);var t = e.prototype;return t.addTrack = function (e) {
      var t = this;e.selected && Rt(this, e), i.prototype.addTrack.call(this, e), e.addEventListener && (e.selectedChange_ = function () {
        t.changing_ || (t.changing_ = !0, Rt(t, e), t.changing_ = !1, t.trigger("change"));
      }, e.addEventListener("selectedchange", e.selectedChange_));
    }, t.removeTrack = function (e) {
      i.prototype.removeTrack.call(this, e), e.removeEventListener && e.selectedChange_ && (e.removeEventListener("selectedchange", e.selectedChange_), e.selectedChange_ = null);
    }, e;
  }(Nt),
      Ft = function (n) {
    function e() {
      return n.apply(this, arguments) || this;
    }f(e, n);var t = e.prototype;return t.addTrack = function (e) {
      var t = this;n.prototype.addTrack.call(this, e), this.queueChange_ || (this.queueChange_ = function () {
        return t.queueTrigger("change");
      }), this.triggerSelectedlanguagechange || (this.triggerSelectedlanguagechange_ = function () {
        return t.trigger("selectedlanguagechange");
      }), e.addEventListener("modechange", this.queueChange_);-1 === ["metadata", "chapters"].indexOf(e.kind) && e.addEventListener("modechange", this.triggerSelectedlanguagechange_);
    }, t.removeTrack = function (e) {
      n.prototype.removeTrack.call(this, e), e.removeEventListener && (this.queueChange_ && e.removeEventListener("modechange", this.queueChange_), this.selectedlanguagechange_ && e.removeEventListener("modechange", this.triggerSelectedlanguagechange_));
    }, e;
  }(Nt),
      Ht = function () {
    function e(e) {
      void 0 === e && (e = []), this.trackElements_ = [], Object.defineProperty(this, "length", { get: function get() {
          return this.trackElements_.length;
        } });for (var t = 0, n = e.length; t < n; t++) {
        this.addTrackElement_(e[t]);
      }
    }var t = e.prototype;return t.addTrackElement_ = function (e) {
      var t = this.trackElements_.length;"" + t in this || Object.defineProperty(this, t, { get: function get() {
          return this.trackElements_[t];
        } }), -1 === this.trackElements_.indexOf(e) && this.trackElements_.push(e);
    }, t.getTrackElementByTrack_ = function (e) {
      for (var t, n = 0, i = this.trackElements_.length; n < i; n++) {
        if (e === this.trackElements_[n].track) {
          t = this.trackElements_[n];break;
        }
      }return t;
    }, t.removeTrackElement_ = function (e) {
      for (var t = 0, n = this.trackElements_.length; t < n; t++) {
        if (e === this.trackElements_[t]) {
          this.trackElements_[t].track && "function" == typeof this.trackElements_[t].track.off && this.trackElements_[t].track.off(), "function" == typeof this.trackElements_[t].off && this.trackElements_[t].off(), this.trackElements_.splice(t, 1);break;
        }
      }
    }, e;
  }(),
      Vt = function () {
    function t(e) {
      t.prototype.setCues_.call(this, e), Object.defineProperty(this, "length", { get: function get() {
          return this.length_;
        } });
    }var e = t.prototype;return e.setCues_ = function (e) {
      var t = this.length || 0,
          n = 0,
          i = e.length;this.cues_ = e, this.length_ = e.length;var r = function r(e) {
        "" + e in this || Object.defineProperty(this, "" + e, { get: function get() {
            return this.cues_[e];
          } });
      };if (t < i) for (n = t; n < i; n++) {
        r.call(this, n);
      }
    }, e.getCueById = function (e) {
      for (var t = null, n = 0, i = this.length; n < i; n++) {
        var r = this[n];if (r.id === e) {
          t = r;break;
        }
      }return t;
    }, t;
  }(),
      zt = { alternative: "alternative", captions: "captions", main: "main", sign: "sign", subtitles: "subtitles", commentary: "commentary" },
      Wt = { alternative: "alternative", descriptions: "descriptions", main: "main", "main-desc": "main-desc", translation: "translation", commentary: "commentary" },
      Kt = { subtitles: "subtitles", captions: "captions", descriptions: "descriptions", chapters: "chapters", metadata: "metadata" },
      Ut = { disabled: "disabled", hidden: "hidden", showing: "showing" },
      qt = function (s) {
    function e(e) {
      var t;void 0 === e && (e = {}), t = s.call(this) || this;var n = { id: e.id || "vjs_track_" + ee(), kind: e.kind || "", label: e.label || "", language: e.language || "" },
          i = function i(e) {
        Object.defineProperty(v(v(t)), e, { get: function get() {
            return n[e];
          }, set: function set() {} });
      };for (var r in n) {
        i(r);
      }return t;
    }return f(e, s), e;
  }(we),
      Xt = function Xt(e) {
    var t = ["protocol", "hostname", "port", "pathname", "search", "hash", "host"],
        n = d.createElement("a");n.href = e;var i,
        r = "" === n.host && "file:" !== n.protocol;r && ((i = d.createElement("div")).innerHTML = '<a href="' + e + '"></a>', n = i.firstChild, i.setAttribute("style", "display:none; position:absolute;"), d.body.appendChild(i));for (var s = {}, o = 0; o < t.length; o++) {
      s[t[o]] = n[t[o]];
    }return "http:" === s.protocol && (s.host = s.host.replace(/:80$/, "")), "https:" === s.protocol && (s.host = s.host.replace(/:443$/, "")), s.protocol || (s.protocol = h.location.protocol), r && d.body.removeChild(i), s;
  },
      $t = function $t(e) {
    if (!e.match(/^https?:\/\//)) {
      var t = d.createElement("div");t.innerHTML = '<a href="' + e + '">x</a>', e = t.firstChild.href;
    }return e;
  },
      Yt = function Yt(e) {
    if ("string" == typeof e) {
      var t = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i.exec(e);if (t) return t.pop().toLowerCase();
    }return "";
  },
      Gt = function Gt(e) {
    var t = h.location,
        n = Xt(e);return (":" === n.protocol ? t.protocol : n.protocol) + n.host !== t.protocol + t.host;
  },
      Qt = Object.freeze({ parseUrl: Xt, getAbsoluteURL: $t, getFileExtension: Yt, isCrossOrigin: Gt }),
      Jt = function Jt(e) {
    var t = Zt.call(e);return "[object Function]" === t || "function" == typeof e && "[object RegExp]" !== t || "undefined" != typeof window && (e === window.setTimeout || e === window.alert || e === window.confirm || e === window.prompt);
  },
      Zt = Object.prototype.toString;var en = At(function (e, t) {
    (t = e.exports = function (e) {
      return e.replace(/^\s*|\s*$/g, "");
    }).left = function (e) {
      return e.replace(/^\s*/, "");
    }, t.right = function (e) {
      return e.replace(/\s*$/, "");
    };
  }),
      tn = (en.left, en.right, Function.prototype.toString),
      nn = /^\s*class\b/,
      rn = function rn(e) {
    try {
      var t = tn.call(e);return nn.test(t);
    } catch (e) {
      return !1;
    }
  },
      sn = Object.prototype.toString,
      on = "function" == typeof Symbol && "symbol" == _typeof(Symbol.toStringTag),
      an = function an(e) {
    if (!e) return !1;if ("function" != typeof e && "object" != (typeof e === "undefined" ? "undefined" : _typeof(e))) return !1;if ("function" == typeof e && !e.prototype) return !0;if (on) return function (e) {
      try {
        return !rn(e) && (tn.call(e), !0);
      } catch (e) {
        return !1;
      }
    }(e);if (rn(e)) return !1;var t = sn.call(e);return "[object Function]" === t || "[object GeneratorFunction]" === t;
  },
      ln = Object.prototype.toString,
      cn = Object.prototype.hasOwnProperty,
      un = function un(e, t, n) {
    if (!an(t)) throw new TypeError("iterator must be a function");var i;3 <= arguments.length && (i = n), "[object Array]" === ln.call(e) ? function (e, t, n) {
      for (var i = 0, r = e.length; i < r; i++) {
        cn.call(e, i) && (null == n ? t(e[i], i, e) : t.call(n, e[i], i, e));
      }
    }(e, t, i) : "string" == typeof e ? function (e, t, n) {
      for (var i = 0, r = e.length; i < r; i++) {
        null == n ? t(e.charAt(i), i, e) : t.call(n, e.charAt(i), i, e);
      }
    }(e, t, i) : function (e, t, n) {
      for (var i in e) {
        cn.call(e, i) && (null == n ? t(e[i], i, e) : t.call(n, e[i], i, e));
      }
    }(e, t, i);
  },
      hn = function hn(e) {
    if (!e) return {};var s = {};return un(en(e).split("\n"), function (e) {
      var t,
          n = e.indexOf(":"),
          i = en(e.slice(0, n)).toLowerCase(),
          r = en(e.slice(n + 1));"undefined" == typeof s[i] ? s[i] = r : (t = s[i], "[object Array]" === Object.prototype.toString.call(t) ? s[i].push(r) : s[i] = [s[i], r]);
    }), s;
  },
      dn = function dn() {
    for (var e = {}, t = 0; t < arguments.length; t++) {
      var n = arguments[t];for (var i in n) {
        pn.call(n, i) && (e[i] = n[i]);
      }
    }return e;
  },
      pn = Object.prototype.hasOwnProperty;var fn = gn;function vn(e, t, n) {
    var i = e;return Jt(t) ? (n = t, "string" == typeof e && (i = { uri: e })) : i = dn(t, { uri: e }), i.callback = n, i;
  }function gn(e, t, n) {
    return yn(t = vn(e, t, n));
  }function yn(i) {
    if ("undefined" == typeof i.callback) throw new Error("callback argument missing");var r = !1,
        s = function s(e, t, n) {
      r || (r = !0, i.callback(e, t, n));
    };function t(e) {
      return clearTimeout(l), e instanceof Error || (e = new Error("" + (e || "Unknown XMLHttpRequest Error"))), e.statusCode = 0, s(e, v);
    }function e() {
      if (!o) {
        var e;clearTimeout(l), e = i.useXDR && void 0 === a.status ? 200 : 1223 === a.status ? 204 : a.status;var t = v,
            n = null;return 0 !== e ? (t = { body: function () {
            var e = void 0;if (e = a.response ? a.response : a.responseText || function (e) {
              if ("document" === e.responseType) return e.responseXML;var t = e.responseXML && "parsererror" === e.responseXML.documentElement.nodeName;return "" !== e.responseType || t ? null : e.responseXML;
            }(a), f) try {
              e = JSON.parse(e);
            } catch (e) {}return e;
          }(), statusCode: e, method: u, headers: {}, url: c, rawRequest: a }, a.getAllResponseHeaders && (t.headers = hn(a.getAllResponseHeaders()))) : n = new Error("Internal XMLHttpRequest Error"), s(n, t, t.body);
      }
    }var n,
        o,
        a = i.xhr || null;a || (a = i.cors || i.useXDR ? new gn.XDomainRequest() : new gn.XMLHttpRequest());var l,
        c = a.url = i.uri || i.url,
        u = a.method = i.method || "GET",
        h = i.body || i.data,
        d = a.headers = i.headers || {},
        p = !!i.sync,
        f = !1,
        v = { body: void 0, headers: {}, statusCode: 0, method: u, url: c, rawRequest: a };if ("json" in i && !1 !== i.json && (f = !0, d.accept || d.Accept || (d.Accept = "application/json"), "GET" !== u && "HEAD" !== u && (d["content-type"] || d["Content-Type"] || (d["Content-Type"] = "application/json"), h = JSON.stringify(!0 === i.json ? h : i.json))), a.onreadystatechange = function () {
      4 === a.readyState && setTimeout(e, 0);
    }, a.onload = e, a.onerror = t, a.onprogress = function () {}, a.onabort = function () {
      o = !0;
    }, a.ontimeout = t, a.open(u, c, !p, i.username, i.password), p || (a.withCredentials = !!i.withCredentials), !p && 0 < i.timeout && (l = setTimeout(function () {
      if (!o) {
        o = !0, a.abort("timeout");var e = new Error("XMLHttpRequest timeout");e.code = "ETIMEDOUT", t(e);
      }
    }, i.timeout)), a.setRequestHeader) for (n in d) {
      d.hasOwnProperty(n) && a.setRequestHeader(n, d[n]);
    } else if (i.headers && !function (e) {
      for (var t in e) {
        if (e.hasOwnProperty(t)) return !1;
      }return !0;
    }(i.headers)) throw new Error("Headers cannot be set on an XDomainRequest object");return "responseType" in i && (a.responseType = i.responseType), "beforeSend" in i && "function" == typeof i.beforeSend && i.beforeSend(a), a.send(h || null), a;
  }gn.XMLHttpRequest = h.XMLHttpRequest || function () {}, gn.XDomainRequest = "withCredentials" in new gn.XMLHttpRequest() ? gn.XMLHttpRequest : h.XDomainRequest, function (e, t) {
    for (var n = 0; n < e.length; n++) {
      t(e[n]);
    }
  }(["get", "put", "post", "patch", "head", "delete"], function (i) {
    gn["delete" === i ? "del" : i] = function (e, t, n) {
      return (t = vn(e, t, n)).method = i.toUpperCase(), yn(t);
    };
  });var mn = function mn(e, t) {
    var n = new h.WebVTT.Parser(h, h.vttjs, h.WebVTT.StringDecoder()),
        i = [];n.oncue = function (e) {
      t.addCue(e);
    }, n.onparsingerror = function (e) {
      i.push(e);
    }, n.onflush = function () {
      t.trigger({ type: "loadeddata", target: t });
    }, n.parse(e), 0 < i.length && (h.console && h.console.groupCollapsed && h.console.groupCollapsed("Text Track parsing errors for " + t.src), i.forEach(function (e) {
      return g.error(e);
    }), h.console && h.console.groupEnd && h.console.groupEnd()), n.flush();
  },
      _n = function (c) {
    function e(e) {
      var t;if (void 0 === e && (e = {}), !e.tech) throw new Error("A tech was not provided.");var n = Be(e, { kind: Kt[e.kind] || "subtitles", language: e.language || e.srclang || "" }),
          i = Ut[n.mode] || "disabled",
          r = n.default;"metadata" !== n.kind && "chapters" !== n.kind || (i = "hidden"), (t = c.call(this, n) || this).tech_ = n.tech, t.cues_ = [], t.activeCues_ = [];var s = new Vt(t.cues_),
          o = new Vt(t.activeCues_),
          a = !1,
          l = Ce(v(v(t)), function () {
        this.activeCues = this.activeCues, a && (this.trigger("cuechange"), a = !1);
      });return "disabled" !== i && t.tech_.ready(function () {
        t.tech_.on("timeupdate", l);
      }, !0), Object.defineProperties(v(v(t)), { default: { get: function get() {
            return r;
          }, set: function set() {} }, mode: { get: function get() {
            return i;
          }, set: function set(e) {
            var t = this;Ut[e] && ("disabled" !== (i = e) ? this.tech_.ready(function () {
              t.tech_.on("timeupdate", l);
            }, !0) : this.tech_.off("timeupdate", l), this.trigger("modechange"));
          } }, cues: { get: function get() {
            return this.loaded_ ? s : null;
          }, set: function set() {} }, activeCues: { get: function get() {
            if (!this.loaded_) return null;if (0 === this.cues.length) return o;for (var e = this.tech_.currentTime(), t = [], n = 0, i = this.cues.length; n < i; n++) {
              var r = this.cues[n];r.startTime <= e && r.endTime >= e ? t.push(r) : r.startTime === r.endTime && r.startTime <= e && r.startTime + .5 >= e && t.push(r);
            }if (a = !1, t.length !== this.activeCues_.length) a = !0;else for (var s = 0; s < t.length; s++) {
              -1 === this.activeCues_.indexOf(t[s]) && (a = !0);
            }return this.activeCues_ = t, o.setCues_(this.activeCues_), o;
          }, set: function set() {} } }), n.src ? (t.src = n.src, function (e, s) {
        var t = { uri: e },
            n = Gt(e);n && (t.cors = n), fn(t, Ce(this, function (e, t, n) {
          if (e) return g.error(e, t);if (s.loaded_ = !0, "function" != typeof h.WebVTT) {
            if (s.tech_) {
              var i,
                  r = function r() {
                g.error("vttjs failed to load, stopping trying to process " + s.src), s.tech_.off("vttjsloaded", i);
              };i = function i() {
                return s.tech_.off("vttjserror", r), mn(n, s);
              }, s.tech_.one("vttjsloaded", i), s.tech_.one("vttjserror", r);
            }
          } else mn(n, s);
        }));
      }(n.src, v(v(t)))) : t.loaded_ = !0, t;
    }f(e, c);var t = e.prototype;return t.addCue = function (e) {
      var t = e;if (h.vttjs && !(e instanceof h.vttjs.VTTCue)) {
        for (var n in t = new h.vttjs.VTTCue(e.startTime, e.endTime, e.text), e) {
          n in t || (t[n] = e[n]);
        }t.id = e.id, t.originalCue_ = e;
      }for (var i = this.tech_.textTracks(), r = 0; r < i.length; r++) {
        i[r] !== this && i[r].removeCue(t);
      }this.cues_.push(t), this.cues.setCues_(this.cues_);
    }, t.removeCue = function (e) {
      for (var t = this.cues_.length; t--;) {
        var n = this.cues_[t];if (n === e || n.originalCue_ && n.originalCue_ === e) {
          this.cues_.splice(t, 1), this.cues.setCues_(this.cues_);break;
        }
      }
    }, e;
  }(qt);_n.prototype.allowedEvents_ = { cuechange: "cuechange" };var bn = function (r) {
    function e(e) {
      var t;void 0 === e && (e = {});var n = Be(e, { kind: Wt[e.kind] || "" });t = r.call(this, n) || this;var i = !1;return Object.defineProperty(v(v(t)), "enabled", { get: function get() {
          return i;
        }, set: function set(e) {
          "boolean" == typeof e && e !== i && (i = e, this.trigger("enabledchange"));
        } }), n.enabled && (t.enabled = n.enabled), t.loaded_ = !0, t;
    }return f(e, r), e;
  }(qt),
      Tn = function (r) {
    function e(e) {
      var t;void 0 === e && (e = {});var n = Be(e, { kind: zt[e.kind] || "" });t = r.call(this, n) || this;var i = !1;return Object.defineProperty(v(v(t)), "selected", { get: function get() {
          return i;
        }, set: function set(e) {
          "boolean" == typeof e && e !== i && (i = e, this.trigger("selectedchange"));
        } }), n.selected && (t.selected = n.selected), t;
    }return f(e, r), e;
  }(qt),
      kn = function (r) {
    function e(e) {
      var t, n;void 0 === e && (e = {}), t = r.call(this) || this;var i = new _n(e);return t.kind = i.kind, t.src = i.src, t.srclang = i.language, t.label = i.label, t.default = i.default, Object.defineProperties(v(v(t)), { readyState: { get: function get() {
            return n;
          } }, track: { get: function get() {
            return i;
          } } }), n = 0, i.addEventListener("loadeddata", function () {
        n = 2, t.trigger({ type: "load", target: v(v(t)) });
      }), t;
    }return f(e, r), e;
  }(we);kn.prototype.allowedEvents_ = { load: "load" }, kn.NONE = 0, kn.LOADING = 1, kn.LOADED = 2, kn.ERROR = 3;var Cn = { audio: { ListClass: Dt, TrackClass: bn, capitalName: "Audio" }, video: { ListClass: Bt, TrackClass: Tn, capitalName: "Video" }, text: { ListClass: Ft, TrackClass: _n, capitalName: "Text" } };Object.keys(Cn).forEach(function (e) {
    Cn[e].getterName = e + "Tracks", Cn[e].privateName = e + "Tracks_";
  });var En = { remoteText: { ListClass: Ft, TrackClass: _n, capitalName: "RemoteText", getterName: "remoteTextTracks", privateName: "remoteTextTracks_" }, remoteTextEl: { ListClass: Ht, TrackClass: kn, capitalName: "RemoteTextTrackEls", getterName: "remoteTextTrackEls", privateName: "remoteTextTrackEls_" } },
      wn = Be(Cn, En);En.names = Object.keys(En), Cn.names = Object.keys(Cn), wn.names = [].concat(En.names).concat(Cn.names);var Sn = Object.create || function () {
    function t() {}return function (e) {
      if (1 !== arguments.length) throw new Error("Object.create shim only accepts one parameter.");return t.prototype = e, new t();
    };
  }();function xn(e, t) {
    this.name = "ParsingError", this.code = e.code, this.message = t || e.message;
  }function jn(e) {
    function t(e, t, n, i) {
      return 3600 * (0 | e) + 60 * (0 | t) + (0 | n) + (0 | i) / 1e3;
    }var n = e.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);return n ? n[3] ? t(n[1], n[2], n[3].replace(":", ""), n[4]) : 59 < n[1] ? t(n[1], n[2], 0, n[4]) : t(0, n[1], n[2], n[4]) : null;
  }function An() {
    this.values = Sn(null);
  }function Pn(e, t, n, i) {
    var r = i ? e.split(i) : [e];for (var s in r) {
      if ("string" == typeof r[s]) {
        var o = r[s].split(n);if (2 === o.length) t(o[0], o[1]);
      }
    }
  }function Ln(t, e, s) {
    var n,
        i,
        o,
        r = t;function a() {
      var e = jn(t);if (null === e) throw new xn(xn.Errors.BadTimeStamp, "Malformed timestamp: " + r);return t = t.replace(/^[^\sa-zA-Z-]+/, ""), e;
    }function l() {
      t = t.replace(/^\s+/, "");
    }if (l(), e.startTime = a(), l(), "--\x3e" !== t.substr(0, 3)) throw new xn(xn.Errors.BadTimeStamp, "Malformed time stamp (time stamps must be separated by '--\x3e'): " + r);t = t.substr(3), l(), e.endTime = a(), l(), n = t, i = e, o = new An(), Pn(n, function (e, t) {
      switch (e) {case "region":
          for (var n = s.length - 1; 0 <= n; n--) {
            if (s[n].id === t) {
              o.set(e, s[n].region);break;
            }
          }break;case "vertical":
          o.alt(e, t, ["rl", "lr"]);break;case "line":
          var i = t.split(","),
              r = i[0];o.integer(e, r), o.percent(e, r) && o.set("snapToLines", !1), o.alt(e, r, ["auto"]), 2 === i.length && o.alt("lineAlign", i[1], ["start", "middle", "end"]);break;case "position":
          i = t.split(","), o.percent(e, i[0]), 2 === i.length && o.alt("positionAlign", i[1], ["start", "middle", "end"]);break;case "size":
          o.percent(e, t);break;case "align":
          o.alt(e, t, ["start", "middle", "end", "left", "right"]);}
    }, /:/, /\s/), i.region = o.get("region", null), i.vertical = o.get("vertical", ""), i.line = o.get("line", "auto"), i.lineAlign = o.get("lineAlign", "start"), i.snapToLines = o.get("snapToLines", !0), i.size = o.get("size", 100), i.align = o.get("align", "middle"), i.position = o.get("position", { start: 0, left: 0, middle: 50, end: 100, right: 100 }, i.align), i.positionAlign = o.get("positionAlign", { start: "start", left: "start", middle: "middle", end: "end", right: "end" }, i.align);
  }((xn.prototype = Sn(Error.prototype)).constructor = xn).Errors = { BadSignature: { code: 0, message: "Malformed WebVTT signature." }, BadTimeStamp: { code: 1, message: "Malformed time stamp." } }, An.prototype = { set: function set(e, t) {
      this.get(e) || "" === t || (this.values[e] = t);
    }, get: function get(e, t, n) {
      return n ? this.has(e) ? this.values[e] : t[n] : this.has(e) ? this.values[e] : t;
    }, has: function has(e) {
      return e in this.values;
    }, alt: function alt(e, t, n) {
      for (var i = 0; i < n.length; ++i) {
        if (t === n[i]) {
          this.set(e, t);break;
        }
      }
    }, integer: function integer(e, t) {
      /^-?\d+$/.test(t) && this.set(e, parseInt(t, 10));
    }, percent: function percent(e, t) {
      return !!(t.match(/^([\d]{1,3})(\.[\d]*)?%$/) && 0 <= (t = parseFloat(t)) && t <= 100) && (this.set(e, t), !0);
    } };var Mn = { "&amp;": "&", "&lt;": "<", "&gt;": ">", "&lrm;": "‎", "&rlm;": "‏", "&nbsp;": " " },
      Nn = { c: "span", i: "i", b: "b", u: "u", ruby: "ruby", rt: "rt", v: "span", lang: "span" },
      On = { v: "title", lang: "lang" },
      In = { rt: "ruby" };function Dn(s, n) {
    function e() {
      if (!n) return null;var e,
          t = n.match(/^([^<]*)(<[^>]*>?)?/);return e = t[1] ? t[1] : t[2], n = n.substr(e.length), e;
    }function t(e) {
      return Mn[e];
    }function i(e) {
      for (; f = e.match(/&(amp|lt|gt|lrm|rlm|nbsp);/);) {
        e = e.replace(f[0], t);
      }return e;
    }function r(e, t) {
      var n = Nn[e];if (!n) return null;var i = s.document.createElement(n);i.localName = n;var r = On[e];return r && t && (i[r] = t.trim()), i;
    }for (var o, a, l, c = s.document.createElement("div"), u = c, h = []; null !== (o = e());) {
      if ("<" !== o[0]) u.appendChild(s.document.createTextNode(i(o)));else {
        if ("/" === o[1]) {
          h.length && h[h.length - 1] === o.substr(2).replace(">", "") && (h.pop(), u = u.parentNode);continue;
        }var d,
            p = jn(o.substr(1, o.length - 2));if (p) {
          d = s.document.createProcessingInstruction("timestamp", p), u.appendChild(d);continue;
        }var f = o.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);if (!f) continue;if (!(d = r(f[1], f[3]))) continue;if (a = u, In[(l = d).localName] && In[l.localName] !== a.localName) continue;f[2] && (d.className = f[2].substr(1).replace(".", " ")), h.push(f[1]), u.appendChild(d), u = d;
      }
    }return c;
  }var Rn = [[1470, 1470], [1472, 1472], [1475, 1475], [1478, 1478], [1488, 1514], [1520, 1524], [1544, 1544], [1547, 1547], [1549, 1549], [1563, 1563], [1566, 1610], [1645, 1647], [1649, 1749], [1765, 1766], [1774, 1775], [1786, 1805], [1807, 1808], [1810, 1839], [1869, 1957], [1969, 1969], [1984, 2026], [2036, 2037], [2042, 2042], [2048, 2069], [2074, 2074], [2084, 2084], [2088, 2088], [2096, 2110], [2112, 2136], [2142, 2142], [2208, 2208], [2210, 2220], [8207, 8207], [64285, 64285], [64287, 64296], [64298, 64310], [64312, 64316], [64318, 64318], [64320, 64321], [64323, 64324], [64326, 64449], [64467, 64829], [64848, 64911], [64914, 64967], [65008, 65020], [65136, 65140], [65142, 65276], [67584, 67589], [67592, 67592], [67594, 67637], [67639, 67640], [67644, 67644], [67647, 67669], [67671, 67679], [67840, 67867], [67872, 67897], [67903, 67903], [67968, 68023], [68030, 68031], [68096, 68096], [68112, 68115], [68117, 68119], [68121, 68147], [68160, 68167], [68176, 68184], [68192, 68223], [68352, 68405], [68416, 68437], [68440, 68466], [68472, 68479], [68608, 68680], [126464, 126467], [126469, 126495], [126497, 126498], [126500, 126500], [126503, 126503], [126505, 126514], [126516, 126519], [126521, 126521], [126523, 126523], [126530, 126530], [126535, 126535], [126537, 126537], [126539, 126539], [126541, 126543], [126545, 126546], [126548, 126548], [126551, 126551], [126553, 126553], [126555, 126555], [126557, 126557], [126559, 126559], [126561, 126562], [126564, 126564], [126567, 126570], [126572, 126578], [126580, 126583], [126585, 126588], [126590, 126590], [126592, 126601], [126603, 126619], [126625, 126627], [126629, 126633], [126635, 126651], [1114109, 1114109]];function Bn(e) {
    for (var t = 0; t < Rn.length; t++) {
      var n = Rn[t];if (e >= n[0] && e <= n[1]) return !0;
    }return !1;
  }function Fn() {}function Hn(e, t, n) {
    Fn.call(this), this.cue = t, this.cueDiv = Dn(e, t.text);var i = { color: "rgba(255, 255, 255, 1)", backgroundColor: "rgba(0, 0, 0, 0.8)", position: "relative", left: 0, right: 0, top: 0, bottom: 0, display: "inline", writingMode: "" === t.vertical ? "horizontal-tb" : "lr" === t.vertical ? "vertical-lr" : "vertical-rl", unicodeBidi: "plaintext" };this.applyStyles(i, this.cueDiv), this.div = e.document.createElement("div"), i = { direction: function (e) {
        var t = [],
            n = "";if (!e || !e.childNodes) return "ltr";function r(e, t) {
          for (var n = t.childNodes.length - 1; 0 <= n; n--) {
            e.push(t.childNodes[n]);
          }
        }function s(e) {
          if (!e || !e.length) return null;var t = e.pop(),
              n = t.textContent || t.innerText;if (n) {
            var i = n.match(/^.*(\n|\r)/);return i ? i[e.length = 0] : n;
          }return "ruby" === t.tagName ? s(e) : t.childNodes ? (r(e, t), s(e)) : void 0;
        }for (r(t, e); n = s(t);) {
          for (var i = 0; i < n.length; i++) {
            if (Bn(n.charCodeAt(i))) return "rtl";
          }
        }return "ltr";
      }(this.cueDiv), writingMode: "" === t.vertical ? "horizontal-tb" : "lr" === t.vertical ? "vertical-lr" : "vertical-rl", unicodeBidi: "plaintext", textAlign: "middle" === t.align ? "center" : t.align, font: n.font, whiteSpace: "pre-line", position: "absolute" }, this.applyStyles(i), this.div.appendChild(this.cueDiv);var r = 0;switch (t.positionAlign) {case "start":
        r = t.position;break;case "middle":
        r = t.position - t.size / 2;break;case "end":
        r = t.position - t.size;}"" === t.vertical ? this.applyStyles({ left: this.formatStyle(r, "%"), width: this.formatStyle(t.size, "%") }) : this.applyStyles({ top: this.formatStyle(r, "%"), height: this.formatStyle(t.size, "%") }), this.move = function (e) {
      this.applyStyles({ top: this.formatStyle(e.top, "px"), bottom: this.formatStyle(e.bottom, "px"), left: this.formatStyle(e.left, "px"), right: this.formatStyle(e.right, "px"), height: this.formatStyle(e.height, "px"), width: this.formatStyle(e.width, "px") });
    };
  }function Vn(e) {
    var t, n, i, r;if (e.div) {
      n = e.div.offsetHeight, i = e.div.offsetWidth, r = e.div.offsetTop;var s = (s = e.div.childNodes) && (s = s[0]) && s.getClientRects && s.getClientRects();e = e.div.getBoundingClientRect(), t = s ? Math.max(s[0] && s[0].height || 0, e.height / s.length) : 0;
    }this.left = e.left, this.right = e.right, this.top = e.top || r, this.height = e.height || n, this.bottom = e.bottom || r + (e.height || n), this.width = e.width || i, this.lineHeight = void 0 !== t ? t : e.lineHeight;
  }function zn(e, t, a, l) {
    var n = new Vn(t),
        i = t.cue,
        r = function (e) {
      if ("number" == typeof e.line && (e.snapToLines || 0 <= e.line && e.line <= 100)) return e.line;if (!e.track || !e.track.textTrackList || !e.track.textTrackList.mediaElement) return -1;for (var t = e.track, n = t.textTrackList, i = 0, r = 0; r < n.length && n[r] !== t; r++) {
        "showing" === n[r].mode && i++;
      }return -1 * ++i;
    }(i),
        s = [];if (i.snapToLines) {
      var o;switch (i.vertical) {case "":
          s = ["+y", "-y"], o = "height";break;case "rl":
          s = ["+x", "-x"], o = "width";break;case "lr":
          s = ["-x", "+x"], o = "width";}var c = n.lineHeight,
          u = c * Math.round(r),
          h = a[o] + c,
          d = s[0];Math.abs(u) > h && (u = u < 0 ? -1 : 1, u *= Math.ceil(h / c) * c), r < 0 && (u += "" === i.vertical ? a.height : a.width, s = s.reverse()), n.move(d, u);
    } else {
      var p = n.lineHeight / a.height * 100;switch (i.lineAlign) {case "middle":
          r -= p / 2;break;case "end":
          r -= p;}switch (i.vertical) {case "":
          t.applyStyles({ top: t.formatStyle(r, "%") });break;case "rl":
          t.applyStyles({ left: t.formatStyle(r, "%") });break;case "lr":
          t.applyStyles({ right: t.formatStyle(r, "%") });}s = ["+y", "-x", "+x", "-y"], n = new Vn(t);
    }var f = function (e, t) {
      for (var n, i = new Vn(e), r = 1, s = 0; s < t.length; s++) {
        for (; e.overlapsOppositeAxis(a, t[s]) || e.within(a) && e.overlapsAny(l);) {
          e.move(t[s]);
        }if (e.within(a)) return e;var o = e.intersectPercentage(a);o < r && (n = new Vn(e), r = o), e = new Vn(i);
      }return n || i;
    }(n, s);t.move(f.toCSSCompatValues(a));
  }function Wn() {}Fn.prototype.applyStyles = function (e, t) {
    for (var n in t = t || this.div, e) {
      e.hasOwnProperty(n) && (t.style[n] = e[n]);
    }
  }, Fn.prototype.formatStyle = function (e, t) {
    return 0 === e ? 0 : e + t;
  }, (Hn.prototype = Sn(Fn.prototype)).constructor = Hn, Vn.prototype.move = function (e, t) {
    switch (t = void 0 !== t ? t : this.lineHeight, e) {case "+x":
        this.left += t, this.right += t;break;case "-x":
        this.left -= t, this.right -= t;break;case "+y":
        this.top += t, this.bottom += t;break;case "-y":
        this.top -= t, this.bottom -= t;}
  }, Vn.prototype.overlaps = function (e) {
    return this.left < e.right && this.right > e.left && this.top < e.bottom && this.bottom > e.top;
  }, Vn.prototype.overlapsAny = function (e) {
    for (var t = 0; t < e.length; t++) {
      if (this.overlaps(e[t])) return !0;
    }return !1;
  }, Vn.prototype.within = function (e) {
    return this.top >= e.top && this.bottom <= e.bottom && this.left >= e.left && this.right <= e.right;
  }, Vn.prototype.overlapsOppositeAxis = function (e, t) {
    switch (t) {case "+x":
        return this.left < e.left;case "-x":
        return this.right > e.right;case "+y":
        return this.top < e.top;case "-y":
        return this.bottom > e.bottom;}
  }, Vn.prototype.intersectPercentage = function (e) {
    return Math.max(0, Math.min(this.right, e.right) - Math.max(this.left, e.left)) * Math.max(0, Math.min(this.bottom, e.bottom) - Math.max(this.top, e.top)) / (this.height * this.width);
  }, Vn.prototype.toCSSCompatValues = function (e) {
    return { top: this.top - e.top, bottom: e.bottom - this.bottom, left: this.left - e.left, right: e.right - this.right, height: this.height, width: this.width };
  }, Vn.getSimpleBoxPosition = function (e) {
    var t = e.div ? e.div.offsetHeight : e.tagName ? e.offsetHeight : 0,
        n = e.div ? e.div.offsetWidth : e.tagName ? e.offsetWidth : 0,
        i = e.div ? e.div.offsetTop : e.tagName ? e.offsetTop : 0;return { left: (e = e.div ? e.div.getBoundingClientRect() : e.tagName ? e.getBoundingClientRect() : e).left, right: e.right, top: e.top || i, height: e.height || t, bottom: e.bottom || i + (e.height || t), width: e.width || n };
  }, Wn.StringDecoder = function () {
    return { decode: function decode(e) {
        if (!e) return "";if ("string" != typeof e) throw new Error("Error - expected string data.");return decodeURIComponent(encodeURIComponent(e));
      } };
  }, Wn.convertCueToDOMTree = function (e, t) {
    return e && t ? Dn(e, t) : null;
  };Wn.processCues = function (i, r, e) {
    if (!i || !r || !e) return null;for (; e.firstChild;) {
      e.removeChild(e.firstChild);
    }var s = i.document.createElement("div");if (s.style.position = "absolute", s.style.left = "0", s.style.right = "0", s.style.top = "0", s.style.bottom = "0", s.style.margin = "1.5%", e.appendChild(s), function (e) {
      for (var t = 0; t < e.length; t++) {
        if (e[t].hasBeenReset || !e[t].displayState) return !0;
      }return !1;
    }(r)) {
      var o = [],
          a = Vn.getSimpleBoxPosition(s),
          l = { font: Math.round(.05 * a.height * 100) / 100 + "px sans-serif" };!function () {
        for (var e, t, n = 0; n < r.length; n++) {
          t = r[n], e = new Hn(i, t, l), s.appendChild(e.div), zn(0, e, a, o), t.displayState = e.div, o.push(Vn.getSimpleBoxPosition(e));
        }
      }();
    } else for (var t = 0; t < r.length; t++) {
      s.appendChild(r[t].displayState);
    }
  }, (Wn.Parser = function (e, t, n) {
    n || (n = t, t = {}), t || (t = {}), this.window = e, this.vttjs = t, this.state = "INITIAL", this.buffer = "", this.decoder = n || new TextDecoder("utf8"), this.regionList = [];
  }).prototype = { reportOrThrowError: function reportOrThrowError(e) {
      if (!(e instanceof xn)) throw e;this.onparsingerror && this.onparsingerror(e);
    }, parse: function parse(e) {
      var s = this;function t() {
        for (var e = s.buffer, t = 0; t < e.length && "\r" !== e[t] && "\n" !== e[t];) {
          ++t;
        }var n = e.substr(0, t);return "\r" === e[t] && ++t, "\n" === e[t] && ++t, s.buffer = e.substr(t), n;
      }function n(e) {
        e.match(/X-TIMESTAMP-MAP/) ? Pn(e, function (e, t) {
          switch (e) {case "X-TIMESTAMP-MAP":
              n = t, i = new An(), Pn(n, function (e, t) {
                switch (e) {case "MPEGT":
                    i.integer(e + "S", t);break;case "LOCA":
                    i.set(e + "L", jn(t));}
              }, /[^\d]:/, /,/), s.ontimestampmap && s.ontimestampmap({ MPEGTS: i.get("MPEGTS"), LOCAL: i.get("LOCAL") });}var n, i;
        }, /=/) : Pn(e, function (e, t) {
          switch (e) {case "Region":
              !function (e) {
                var r = new An();if (Pn(e, function (e, t) {
                  switch (e) {case "id":
                      r.set(e, t);break;case "width":
                      r.percent(e, t);break;case "lines":
                      r.integer(e, t);break;case "regionanchor":case "viewportanchor":
                      var n = t.split(",");if (2 !== n.length) break;var i = new An();if (i.percent("x", n[0]), i.percent("y", n[1]), !i.has("x") || !i.has("y")) break;r.set(e + "X", i.get("x")), r.set(e + "Y", i.get("y"));break;case "scroll":
                      r.alt(e, t, ["up"]);}
                }, /=/, /\s/), r.has("id")) {
                  var t = new (s.vttjs.VTTRegion || s.window.VTTRegion)();t.width = r.get("width", 100), t.lines = r.get("lines", 3), t.regionAnchorX = r.get("regionanchorX", 0), t.regionAnchorY = r.get("regionanchorY", 100), t.viewportAnchorX = r.get("viewportanchorX", 0), t.viewportAnchorY = r.get("viewportanchorY", 100), t.scroll = r.get("scroll", ""), s.onregion && s.onregion(t), s.regionList.push({ id: r.get("id"), region: t });
                }
              }(t);}
        }, /:/);
      }e && (s.buffer += s.decoder.decode(e, { stream: !0 }));try {
        var i;if ("INITIAL" === s.state) {
          if (!/\r\n|\n/.test(s.buffer)) return this;var r = (i = t()).match(/^WEBVTT([ \t].*)?$/);if (!r || !r[0]) throw new xn(xn.Errors.BadSignature);s.state = "HEADER";
        }for (var o = !1; s.buffer;) {
          if (!/\r\n|\n/.test(s.buffer)) return this;switch (o ? o = !1 : i = t(), s.state) {case "HEADER":
              /:/.test(i) ? n(i) : i || (s.state = "ID");continue;case "NOTE":
              i || (s.state = "ID");continue;case "ID":
              if (/^NOTE($|[ \t])/.test(i)) {
                s.state = "NOTE";break;
              }if (!i) continue;if (s.cue = new (s.vttjs.VTTCue || s.window.VTTCue)(0, 0, ""), s.state = "CUE", -1 === i.indexOf("--\x3e")) {
                s.cue.id = i;continue;
              }case "CUE":
              try {
                Ln(i, s.cue, s.regionList);
              } catch (e) {
                s.reportOrThrowError(e), s.cue = null, s.state = "BADCUE";continue;
              }s.state = "CUETEXT";continue;case "CUETEXT":
              var a = -1 !== i.indexOf("--\x3e");if (!i || a && (o = !0)) {
                s.oncue && s.oncue(s.cue), s.cue = null, s.state = "ID";continue;
              }s.cue.text && (s.cue.text += "\n"), s.cue.text += i;continue;case "BADCUE":
              i || (s.state = "ID");continue;}
        }
      } catch (e) {
        s.reportOrThrowError(e), "CUETEXT" === s.state && s.cue && s.oncue && s.oncue(s.cue), s.cue = null, s.state = "INITIAL" === s.state ? "BADWEBVTT" : "BADCUE";
      }return this;
    }, flush: function flush() {
      var t = this;try {
        if (t.buffer += t.decoder.decode(), (t.cue || "HEADER" === t.state) && (t.buffer += "\n\n", t.parse()), "INITIAL" === t.state) throw new xn(xn.Errors.BadSignature);
      } catch (e) {
        t.reportOrThrowError(e);
      }return t.onflush && t.onflush(), this;
    } };var Kn = Wn,
      Un = { "": 1, lr: 1, rl: 1 },
      qn = { start: 1, middle: 1, end: 1, left: 1, right: 1 };function Xn(e) {
    return "string" == typeof e && !!qn[e.toLowerCase()] && e.toLowerCase();
  }function $n(e, t, n) {
    this.hasBeenReset = !1;var i = "",
        r = !1,
        s = e,
        o = t,
        a = n,
        l = null,
        c = "",
        u = !0,
        h = "auto",
        d = "start",
        p = 50,
        f = "middle",
        v = 50,
        g = "middle";Object.defineProperties(this, { id: { enumerable: !0, get: function get() {
          return i;
        }, set: function set(e) {
          i = "" + e;
        } }, pauseOnExit: { enumerable: !0, get: function get() {
          return r;
        }, set: function set(e) {
          r = !!e;
        } }, startTime: { enumerable: !0, get: function get() {
          return s;
        }, set: function set(e) {
          if ("number" != typeof e) throw new TypeError("Start time must be set to a number.");s = e, this.hasBeenReset = !0;
        } }, endTime: { enumerable: !0, get: function get() {
          return o;
        }, set: function set(e) {
          if ("number" != typeof e) throw new TypeError("End time must be set to a number.");o = e, this.hasBeenReset = !0;
        } }, text: { enumerable: !0, get: function get() {
          return a;
        }, set: function set(e) {
          a = "" + e, this.hasBeenReset = !0;
        } }, region: { enumerable: !0, get: function get() {
          return l;
        }, set: function set(e) {
          l = e, this.hasBeenReset = !0;
        } }, vertical: { enumerable: !0, get: function get() {
          return c;
        }, set: function set(e) {
          var t,
              n = "string" == typeof (t = e) && !!Un[t.toLowerCase()] && t.toLowerCase();if (!1 === n) throw new SyntaxError("An invalid or illegal string was specified.");c = n, this.hasBeenReset = !0;
        } }, snapToLines: { enumerable: !0, get: function get() {
          return u;
        }, set: function set(e) {
          u = !!e, this.hasBeenReset = !0;
        } }, line: { enumerable: !0, get: function get() {
          return h;
        }, set: function set(e) {
          if ("number" != typeof e && "auto" !== e) throw new SyntaxError("An invalid number or illegal string was specified.");h = e, this.hasBeenReset = !0;
        } }, lineAlign: { enumerable: !0, get: function get() {
          return d;
        }, set: function set(e) {
          var t = Xn(e);if (!t) throw new SyntaxError("An invalid or illegal string was specified.");d = t, this.hasBeenReset = !0;
        } }, position: { enumerable: !0, get: function get() {
          return p;
        }, set: function set(e) {
          if (e < 0 || 100 < e) throw new Error("Position must be between 0 and 100.");p = e, this.hasBeenReset = !0;
        } }, positionAlign: { enumerable: !0, get: function get() {
          return f;
        }, set: function set(e) {
          var t = Xn(e);if (!t) throw new SyntaxError("An invalid or illegal string was specified.");f = t, this.hasBeenReset = !0;
        } }, size: { enumerable: !0, get: function get() {
          return v;
        }, set: function set(e) {
          if (e < 0 || 100 < e) throw new Error("Size must be between 0 and 100.");v = e, this.hasBeenReset = !0;
        } }, align: { enumerable: !0, get: function get() {
          return g;
        }, set: function set(e) {
          var t = Xn(e);if (!t) throw new SyntaxError("An invalid or illegal string was specified.");g = t, this.hasBeenReset = !0;
        } } }), this.displayState = void 0;
  }$n.prototype.getCueAsHTML = function () {
    return WebVTT.convertCueToDOMTree(window, this.text);
  };var Yn = $n,
      Gn = { "": !0, up: !0 };function Qn(e) {
    return "number" == typeof e && 0 <= e && e <= 100;
  }var Jn = function Jn() {
    var t = 100,
        n = 3,
        i = 0,
        r = 100,
        s = 0,
        o = 100,
        a = "";Object.defineProperties(this, { width: { enumerable: !0, get: function get() {
          return t;
        }, set: function set(e) {
          if (!Qn(e)) throw new Error("Width must be between 0 and 100.");t = e;
        } }, lines: { enumerable: !0, get: function get() {
          return n;
        }, set: function set(e) {
          if ("number" != typeof e) throw new TypeError("Lines must be set to a number.");n = e;
        } }, regionAnchorY: { enumerable: !0, get: function get() {
          return r;
        }, set: function set(e) {
          if (!Qn(e)) throw new Error("RegionAnchorX must be between 0 and 100.");r = e;
        } }, regionAnchorX: { enumerable: !0, get: function get() {
          return i;
        }, set: function set(e) {
          if (!Qn(e)) throw new Error("RegionAnchorY must be between 0 and 100.");i = e;
        } }, viewportAnchorY: { enumerable: !0, get: function get() {
          return o;
        }, set: function set(e) {
          if (!Qn(e)) throw new Error("ViewportAnchorY must be between 0 and 100.");o = e;
        } }, viewportAnchorX: { enumerable: !0, get: function get() {
          return s;
        }, set: function set(e) {
          if (!Qn(e)) throw new Error("ViewportAnchorX must be between 0 and 100.");s = e;
        } }, scroll: { enumerable: !0, get: function get() {
          return a;
        }, set: function set(e) {
          var t,
              n = "string" == typeof (t = e) && !!Gn[t.toLowerCase()] && t.toLowerCase();if (!1 === n) throw new SyntaxError("An invalid or illegal string was specified.");a = n;
        } } });
  },
      Zn = At(function (e) {
    var t = e.exports = { WebVTT: Kn, VTTCue: Yn, VTTRegion: Jn };h.vttjs = t, h.WebVTT = t.WebVTT;var n = t.VTTCue,
        i = t.VTTRegion,
        r = h.VTTCue,
        s = h.VTTRegion;t.shim = function () {
      h.VTTCue = n, h.VTTRegion = i;
    }, t.restore = function () {
      h.VTTCue = r, h.VTTRegion = s;
    }, h.VTTCue || t.shim();
  });Zn.WebVTT, Zn.VTTCue, Zn.VTTRegion;var ei = function (t) {
    function n(n, e) {
      var i;return void 0 === n && (n = {}), void 0 === e && (e = function e() {}), n.reportTouchActivity = !1, (i = t.call(this, null, n, e) || this).hasStarted_ = !1, i.on("playing", function () {
        this.hasStarted_ = !0;
      }), i.on("loadstart", function () {
        this.hasStarted_ = !1;
      }), wn.names.forEach(function (e) {
        var t = wn[e];n && n[t.getterName] && (i[t.privateName] = n[t.getterName]);
      }), i.featuresProgressEvents || i.manualProgressOn(), i.featuresTimeupdateEvents || i.manualTimeUpdatesOn(), ["Text", "Audio", "Video"].forEach(function (e) {
        !1 === n["native" + e + "Tracks"] && (i["featuresNative" + e + "Tracks"] = !1);
      }), !1 === n.nativeCaptions || !1 === n.nativeTextTracks ? i.featuresNativeTextTracks = !1 : !0 !== n.nativeCaptions && !0 !== n.nativeTextTracks || (i.featuresNativeTextTracks = !0), i.featuresNativeTextTracks || i.emulateTextTracks(), i.autoRemoteTextTracks_ = new wn.text.ListClass(), i.initTrackListeners(), n.nativeControlsForTouch || i.emitTapEvents(), i.constructor && (i.name_ = i.constructor.name || "Unknown Tech"), i;
    }f(n, t);var e = n.prototype;return e.triggerSourceset = function (e) {
      var t = this;this.isReady_ || this.one("ready", function () {
        return t.setTimeout(function () {
          return t.triggerSourceset(e);
        }, 1);
      }), this.trigger({ src: e, type: "sourceset" });
    }, e.manualProgressOn = function () {
      this.on("durationchange", this.onDurationChange), this.manualProgress = !0, this.one("ready", this.trackProgress);
    }, e.manualProgressOff = function () {
      this.manualProgress = !1, this.stopTrackingProgress(), this.off("durationchange", this.onDurationChange);
    }, e.trackProgress = function (e) {
      this.stopTrackingProgress(), this.progressInterval = this.setInterval(Ce(this, function () {
        var e = this.bufferedPercent();this.bufferedPercent_ !== e && this.trigger("progress"), 1 === (this.bufferedPercent_ = e) && this.stopTrackingProgress();
      }), 500);
    }, e.onDurationChange = function (e) {
      this.duration_ = this.duration();
    }, e.buffered = function () {
      return dt(0, 0);
    }, e.bufferedPercent = function () {
      return pt(this.buffered(), this.duration_);
    }, e.stopTrackingProgress = function () {
      this.clearInterval(this.progressInterval);
    }, e.manualTimeUpdatesOn = function () {
      this.manualTimeUpdates = !0, this.on("play", this.trackCurrentTime), this.on("pause", this.stopTrackingCurrentTime);
    }, e.manualTimeUpdatesOff = function () {
      this.manualTimeUpdates = !1, this.stopTrackingCurrentTime(), this.off("play", this.trackCurrentTime), this.off("pause", this.stopTrackingCurrentTime);
    }, e.trackCurrentTime = function () {
      this.currentTimeInterval && this.stopTrackingCurrentTime(), this.currentTimeInterval = this.setInterval(function () {
        this.trigger({ type: "timeupdate", target: this, manuallyTriggered: !0 });
      }, 250);
    }, e.stopTrackingCurrentTime = function () {
      this.clearInterval(this.currentTimeInterval), this.trigger({ type: "timeupdate", target: this, manuallyTriggered: !0 });
    }, e.dispose = function () {
      this.clearTracks(Cn.names), this.manualProgress && this.manualProgressOff(), this.manualTimeUpdates && this.manualTimeUpdatesOff(), t.prototype.dispose.call(this);
    }, e.clearTracks = function (e) {
      var r = this;(e = [].concat(e)).forEach(function (e) {
        for (var t = r[e + "Tracks"]() || [], n = t.length; n--;) {
          var i = t[n];"text" === e && r.removeRemoteTextTrack(i), t.removeTrack(i);
        }
      });
    }, e.cleanupAutoTextTracks = function () {
      for (var e = this.autoRemoteTextTracks_ || [], t = e.length; t--;) {
        var n = e[t];this.removeRemoteTextTrack(n);
      }
    }, e.reset = function () {}, e.error = function (e) {
      return void 0 !== e && (this.error_ = new Tt(e), this.trigger("error")), this.error_;
    }, e.played = function () {
      return this.hasStarted_ ? dt(0, 0) : dt();
    }, e.setCurrentTime = function () {
      this.manualTimeUpdates && this.trigger({ type: "timeupdate", target: this, manuallyTriggered: !0 });
    }, e.initTrackListeners = function () {
      var r = this;Cn.names.forEach(function (e) {
        var t = Cn[e],
            n = function n() {
          r.trigger(e + "trackchange");
        },
            i = r[t.getterName]();i.addEventListener("removetrack", n), i.addEventListener("addtrack", n), r.on("dispose", function () {
          i.removeEventListener("removetrack", n), i.removeEventListener("addtrack", n);
        });
      });
    }, e.addWebVttScript_ = function () {
      var e = this;if (!h.WebVTT) if (d.body.contains(this.el())) {
        if (!this.options_["vtt.js"] && c(Zn) && 0 < Object.keys(Zn).length) return void this.trigger("vttjsloaded");var t = d.createElement("script");t.src = this.options_["vtt.js"] || "https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js", t.onload = function () {
          e.trigger("vttjsloaded");
        }, t.onerror = function () {
          e.trigger("vttjserror");
        }, this.on("dispose", function () {
          t.onload = null, t.onerror = null;
        }), h.WebVTT = !0, this.el().parentNode.appendChild(t);
      } else this.ready(this.addWebVttScript_);
    }, e.emulateTextTracks = function () {
      var e = this,
          n = this.textTracks(),
          t = this.remoteTextTracks(),
          i = function i(e) {
        return n.addTrack(e.track);
      },
          r = function r(e) {
        return n.removeTrack(e.track);
      };t.on("addtrack", i), t.on("removetrack", r), this.addWebVttScript_();var s = function s() {
        return e.trigger("texttrackchange");
      },
          o = function o() {
        s();for (var e = 0; e < n.length; e++) {
          var t = n[e];t.removeEventListener("cuechange", s), "showing" === t.mode && t.addEventListener("cuechange", s);
        }
      };o(), n.addEventListener("change", o), n.addEventListener("addtrack", o), n.addEventListener("removetrack", o), this.on("dispose", function () {
        t.off("addtrack", i), t.off("removetrack", r), n.removeEventListener("change", o), n.removeEventListener("addtrack", o), n.removeEventListener("removetrack", o);for (var e = 0; e < n.length; e++) {
          n[e].removeEventListener("cuechange", s);
        }
      });
    }, e.addTextTrack = function (e, t, n) {
      if (!e) throw new Error("TextTrack kind is required but was not provided");return function (e, t, n, i, r) {
        void 0 === r && (r = {});var s = e.textTracks();r.kind = t, n && (r.label = n), i && (r.language = i), r.tech = e;var o = new wn.text.TrackClass(r);return s.addTrack(o), o;
      }(this, e, t, n);
    }, e.createRemoteTextTrack = function (e) {
      var t = Be(e, { tech: this });return new En.remoteTextEl.TrackClass(t);
    }, e.addRemoteTextTrack = function (e, t) {
      var n = this;void 0 === e && (e = {});var i = this.createRemoteTextTrack(e);return !0 !== t && !1 !== t && (g.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js'), t = !0), this.remoteTextTrackEls().addTrackElement_(i), this.remoteTextTracks().addTrack(i.track), !0 !== t && this.ready(function () {
        return n.autoRemoteTextTracks_.addTrack(i.track);
      }), i;
    }, e.removeRemoteTextTrack = function (e) {
      var t = this.remoteTextTrackEls().getTrackElementByTrack_(e);this.remoteTextTrackEls().removeTrackElement_(t), this.remoteTextTracks().removeTrack(e), this.autoRemoteTextTracks_.removeTrack(e);
    }, e.getVideoPlaybackQuality = function () {
      return {};
    }, e.setPoster = function () {}, e.playsinline = function () {}, e.setPlaysinline = function () {}, e.overrideNativeAudioTracks = function () {}, e.overrideNativeVideoTracks = function () {}, e.canPlayType = function () {
      return "";
    }, n.canPlayType = function () {
      return "";
    }, n.canPlaySource = function (e, t) {
      return n.canPlayType(e.type);
    }, n.isTech = function (e) {
      return e.prototype instanceof n || e instanceof n || e === n;
    }, n.registerTech = function (e, t) {
      if (n.techs_ || (n.techs_ = {}), !n.isTech(t)) throw new Error("Tech " + e + " must be a Tech");if (!n.canPlayType) throw new Error("Techs must have a static canPlayType method on them");if (!n.canPlaySource) throw new Error("Techs must have a static canPlaySource method on them");return e = Re(e), n.techs_[e] = t, "Tech" !== e && n.defaultTechOrder_.push(e), t;
    }, n.getTech = function (e) {
      if (e) return e = Re(e), n.techs_ && n.techs_[e] ? n.techs_[e] : h && h.videojs && h.videojs[e] ? (g.warn("The " + e + " tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)"), h.videojs[e]) : void 0;
    }, n;
  }(Fe);wn.names.forEach(function (e) {
    var t = wn[e];ei.prototype[t.getterName] = function () {
      return this[t.privateName] = this[t.privateName] || new t.ListClass(), this[t.privateName];
    };
  }), ei.prototype.featuresVolumeControl = !0, ei.prototype.featuresMuteControl = !0, ei.prototype.featuresFullscreenResize = !1, ei.prototype.featuresPlaybackRate = !1, ei.prototype.featuresProgressEvents = !1, ei.prototype.featuresSourceset = !1, ei.prototype.featuresTimeupdateEvents = !1, ei.prototype.featuresNativeTextTracks = !1, ei.withSourceHandlers = function (r) {
    r.registerSourceHandler = function (e, t) {
      var n = r.sourceHandlers;n || (n = r.sourceHandlers = []), void 0 === t && (t = n.length), n.splice(t, 0, e);
    }, r.canPlayType = function (e) {
      for (var t, n = r.sourceHandlers || [], i = 0; i < n.length; i++) {
        if (t = n[i].canPlayType(e)) return t;
      }return "";
    }, r.selectSourceHandler = function (e, t) {
      for (var n = r.sourceHandlers || [], i = 0; i < n.length; i++) {
        if (n[i].canHandleSource(e, t)) return n[i];
      }return null;
    }, r.canPlaySource = function (e, t) {
      var n = r.selectSourceHandler(e, t);return n ? n.canHandleSource(e, t) : "";
    };["seekable", "seeking", "duration"].forEach(function (e) {
      var t = this[e];"function" == typeof t && (this[e] = function () {
        return this.sourceHandler_ && this.sourceHandler_[e] ? this.sourceHandler_[e].apply(this.sourceHandler_, arguments) : t.apply(this, arguments);
      });
    }, r.prototype), r.prototype.setSource = function (e) {
      var t = r.selectSourceHandler(e, this.options_);t || (r.nativeSourceHandler ? t = r.nativeSourceHandler : g.error("No source handler found for the current source.")), this.disposeSourceHandler(), this.off("dispose", this.disposeSourceHandler), t !== r.nativeSourceHandler && (this.currentSource_ = e), this.sourceHandler_ = t.handleSource(e, this, this.options_), this.one("dispose", this.disposeSourceHandler);
    }, r.prototype.disposeSourceHandler = function () {
      this.currentSource_ && (this.clearTracks(["audio", "video"]), this.currentSource_ = null), this.cleanupAutoTextTracks(), this.sourceHandler_ && (this.sourceHandler_.dispose && this.sourceHandler_.dispose(), this.sourceHandler_ = null);
    };
  }, Fe.registerComponent("Tech", ei), ei.registerTech("Tech", ei), ei.defaultTechOrder_ = [];var ti = {},
      ni = {},
      ii = {};function ri(e, t, n) {
    e.setTimeout(function () {
      return function n(i, e, r, s, o, a) {
        void 0 === i && (i = {});void 0 === e && (e = []);void 0 === o && (o = []);void 0 === a && (a = !1);var t = e,
            l = t[0],
            c = t.slice(1);if ("string" == typeof l) n(i, ti[l], r, s, o, a);else if (l) {
          var u = ui(s, l);if (!u.setSource) return o.push(u), n(i, c, r, s, o, a);u.setSource(_({}, i), function (e, t) {
            if (e) return n(i, c, r, s, o, a);o.push(u), n(t, i.type === t.type ? c : ti[t.type], r, s, o, a);
          });
        } else c.length ? n(i, c, r, s, o, a) : a ? r(i, o) : n(i, ti["*"], r, s, o, !0);
      }(t, ti[t.type], n, e);
    }, 1);
  }function si(e, t, n, i) {
    void 0 === i && (i = null);var r = "call" + Re(n),
        s = e.reduce(ci(r), i),
        o = s === ii,
        a = o ? null : t[n](s);return function (e, t, n, i) {
      for (var r = e.length - 1; 0 <= r; r--) {
        var s = e[r];s[t] && s[t](i, n);
      }
    }(e, n, a, o), a;
  }var oi = { buffered: 1, currentTime: 1, duration: 1, seekable: 1, played: 1, paused: 1 },
      ai = { setCurrentTime: 1 },
      li = { play: 1, pause: 1 };function ci(n) {
    return function (e, t) {
      return e === ii ? ii : t[n] ? t[n](e) : e;
    };
  }function ui(e, t) {
    var n = ni[e.id()],
        i = null;if (null == n) return i = t(e), ni[e.id()] = [[t, i]], i;for (var r = 0; r < n.length; r++) {
      var s = n[r],
          o = s[0],
          a = s[1];o === t && (i = a);
    }return null === i && (i = t(e), n.push([t, i])), i;
  }var hi = { opus: "video/ogg", ogv: "video/ogg", mp4: "video/mp4", mov: "video/mp4", m4v: "video/mp4", mkv: "video/x-matroska", mp3: "audio/mpeg", aac: "audio/aac", oga: "audio/ogg", m3u8: "application/x-mpegURL", jpg: "image/jpeg", jpeg: "image/jpeg", gif: "image/gif", png: "image/png", svg: "image/svg+xml", webp: "image/webp" },
      di = function di(e) {
    void 0 === e && (e = "");var t = Yt(e);return hi[t.toLowerCase()] || "";
  };function pi(e) {
    var t = di(e.src);return !e.type && t && (e.type = t), e;
  }var fi = function (c) {
    function e(e, t, n) {
      var i,
          r = Be({ createEl: !1 }, t);if (i = c.call(this, e, r, n) || this, t.playerOptions.sources && 0 !== t.playerOptions.sources.length) e.src(t.playerOptions.sources);else for (var s = 0, o = t.playerOptions.techOrder; s < o.length; s++) {
        var a = Re(o[s]),
            l = ei.getTech(a);if (a || (l = Fe.getComponent(a)), l && l.isSupported()) {
          e.loadTech_(a);break;
        }
      }return i;
    }return f(e, c), e;
  }(Fe);Fe.registerComponent("MediaLoader", fi);var vi = function (r) {
    function e(e, t) {
      var n;return (n = r.call(this, e, t) || this).emitTapEvents(), n.enable(), n;
    }f(e, r);var t = e.prototype;return t.createEl = function (e, t, n) {
      void 0 === e && (e = "div"), void 0 === t && (t = {}), void 0 === n && (n = {}), t = _({ innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>', className: this.buildCSSClass(), tabIndex: 0 }, t), "button" === e && g.error("Creating a ClickableComponent with an HTML element of " + e + " is not supported; use a Button instead."), n = _({ role: "button" }, n), this.tabIndex_ = t.tabIndex;var i = r.prototype.createEl.call(this, e, t, n);return this.createControlTextEl(i), i;
    }, t.dispose = function () {
      this.controlTextEl_ = null, r.prototype.dispose.call(this);
    }, t.createControlTextEl = function (e) {
      return this.controlTextEl_ = x("span", { className: "vjs-control-text" }, { "aria-live": "polite" }), e && e.appendChild(this.controlTextEl_), this.controlText(this.controlText_, e), this.controlTextEl_;
    }, t.controlText = function (e, t) {
      if (void 0 === t && (t = this.el()), void 0 === e) return this.controlText_ || "Need Text";var n = this.localize(e);this.controlText_ = e, j(this.controlTextEl_, n), this.nonIconControl || t.setAttribute("title", n);
    }, t.buildCSSClass = function () {
      return "vjs-control vjs-button " + r.prototype.buildCSSClass.call(this);
    }, t.enable = function () {
      this.enabled_ || (this.enabled_ = !0, this.removeClass("vjs-disabled"), this.el_.setAttribute("aria-disabled", "false"), "undefined" != typeof this.tabIndex_ && this.el_.setAttribute("tabIndex", this.tabIndex_), this.on(["tap", "click"], this.handleClick), this.on("focus", this.handleFocus), this.on("blur", this.handleBlur));
    }, t.disable = function () {
      this.enabled_ = !1, this.addClass("vjs-disabled"), this.el_.setAttribute("aria-disabled", "true"), "undefined" != typeof this.tabIndex_ && this.el_.removeAttribute("tabIndex"), this.off(["tap", "click"], this.handleClick), this.off("focus", this.handleFocus), this.off("blur", this.handleBlur);
    }, t.handleClick = function (e) {}, t.handleFocus = function (e) {
      he(d, "keydown", Ce(this, this.handleKeyPress));
    }, t.handleKeyPress = function (e) {
      Pt.isEventKey(e, "Space") || Pt.isEventKey(e, "Enter") ? (e.preventDefault(), this.trigger("click")) : r.prototype.handleKeyPress.call(this, e);
    }, t.handleBlur = function (e) {
      de(d, "keydown", Ce(this, this.handleKeyPress));
    }, e;
  }(Fe);Fe.registerComponent("ClickableComponent", vi);var gi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).update(), e.on("posterchange", Ce(v(v(n)), n.update)), n;
    }f(e, i);var t = e.prototype;return t.dispose = function () {
      this.player().off("posterchange", this.update), i.prototype.dispose.call(this);
    }, t.createEl = function () {
      return x("div", { className: "vjs-poster", tabIndex: -1 });
    }, t.update = function (e) {
      var t = this.player().poster();this.setSrc(t), t ? this.show() : this.hide();
    }, t.setSrc = function (e) {
      var t = "";e && (t = 'url("' + e + '")'), this.el_.style.backgroundImage = t;
    }, t.handleClick = function (e) {
      this.player_.controls() && (this.player_.paused() ? wt(this.player_.play()) : this.player_.pause(), this.player_.handleFocus({}));
    }, e;
  }(vi);Fe.registerComponent("PosterImage", gi);var yi = "#222",
      mi = { monospace: "monospace", sansSerif: "sans-serif", serif: "serif", monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace', monospaceSerif: '"Courier New", monospace', proportionalSansSerif: "sans-serif", proportionalSerif: "serif", casual: '"Comic Sans MS", Impact, fantasy', script: '"Monotype Corsiva", cursive', smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif' };function _i(e, t) {
    var n;if (4 === e.length) n = e[1] + e[1] + e[2] + e[2] + e[3] + e[3];else {
      if (7 !== e.length) throw new Error("Invalid color code provided, " + e + "; must be formatted as e.g. #f0e or #f604e2.");n = e.slice(1);
    }return "rgba(" + parseInt(n.slice(0, 2), 16) + "," + parseInt(n.slice(2, 4), 16) + "," + parseInt(n.slice(4, 6), 16) + "," + t + ")";
  }function bi(e, t, n) {
    try {
      e.style[t] = n;
    } catch (e) {
      return;
    }
  }var Ti = function (s) {
    function e(n, e, t) {
      var i;i = s.call(this, n, e, t) || this;var r = Ce(v(v(i)), i.updateDisplay);return n.on("loadstart", Ce(v(v(i)), i.toggleDisplay)), n.on("texttrackchange", r), n.on("loadedmetadata", Ce(v(v(i)), i.preselectTrack)), n.ready(Ce(v(v(i)), function () {
        if (n.tech_ && n.tech_.featuresNativeTextTracks) this.hide();else {
          n.on("fullscreenchange", r), n.on("playerresize", r), h.addEventListener("orientationchange", r), n.on("dispose", function () {
            return h.removeEventListener("orientationchange", r);
          });for (var e = this.options_.playerOptions.tracks || [], t = 0; t < e.length; t++) {
            this.player_.addRemoteTextTrack(e[t], !0);
          }this.preselectTrack();
        }
      })), i;
    }f(e, s);var t = e.prototype;return t.preselectTrack = function () {
      for (var e, t, n, i = { captions: 1, subtitles: 1 }, r = this.player_.textTracks(), s = this.player_.cache_.selectedLanguage, o = 0; o < r.length; o++) {
        var a = r[o];s && s.enabled && s.language && s.language === a.language && a.kind in i ? a.kind === s.kind ? n = a : n || (n = a) : s && !s.enabled ? t = e = n = null : a.default && ("descriptions" !== a.kind || e ? a.kind in i && !t && (t = a) : e = a);
      }n ? n.mode = "showing" : t ? t.mode = "showing" : e && (e.mode = "showing");
    }, t.toggleDisplay = function () {
      this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks ? this.hide() : this.show();
    }, t.createEl = function () {
      return s.prototype.createEl.call(this, "div", { className: "vjs-text-track-display" }, { "aria-live": "off", "aria-atomic": "true" });
    }, t.clearDisplay = function () {
      "function" == typeof h.WebVTT && h.WebVTT.processCues(h, [], this.el_);
    }, t.updateDisplay = function () {
      var e = this.player_.textTracks();this.clearDisplay();for (var t = null, n = null, i = e.length; i--;) {
        var r = e[i];"showing" === r.mode && ("descriptions" === r.kind ? t = r : n = r);
      }n ? ("off" !== this.getAttribute("aria-live") && this.setAttribute("aria-live", "off"), this.updateForTrack(n)) : t && ("assertive" !== this.getAttribute("aria-live") && this.setAttribute("aria-live", "assertive"), this.updateForTrack(t));
    }, t.updateForTrack = function (e) {
      if ("function" == typeof h.WebVTT && e.activeCues) {
        for (var t = [], n = 0; n < e.activeCues.length; n++) {
          t.push(e.activeCues[n]);
        }if (h.WebVTT.processCues(h, t, this.el_), this.player_.textTrackSettings) for (var i = this.player_.textTrackSettings.getValues(), r = t.length; r--;) {
          var s = t[r];if (s) {
            var o = s.displayState;if (i.color && (o.firstChild.style.color = i.color), i.textOpacity && bi(o.firstChild, "color", _i(i.color || "#fff", i.textOpacity)), i.backgroundColor && (o.firstChild.style.backgroundColor = i.backgroundColor), i.backgroundOpacity && bi(o.firstChild, "backgroundColor", _i(i.backgroundColor || "#000", i.backgroundOpacity)), i.windowColor && (i.windowOpacity ? bi(o, "backgroundColor", _i(i.windowColor, i.windowOpacity)) : o.style.backgroundColor = i.windowColor), i.edgeStyle && ("dropshadow" === i.edgeStyle ? o.firstChild.style.textShadow = "2px 2px 3px #222, 2px 2px 4px #222, 2px 2px 5px " + yi : "raised" === i.edgeStyle ? o.firstChild.style.textShadow = "1px 1px #222, 2px 2px #222, 3px 3px " + yi : "depressed" === i.edgeStyle ? o.firstChild.style.textShadow = "1px 1px #ccc, 0 1px #ccc, -1px -1px #222, 0 -1px " + yi : "uniform" === i.edgeStyle && (o.firstChild.style.textShadow = "0 0 4px #222, 0 0 4px #222, 0 0 4px #222, 0 0 4px " + yi)), i.fontPercent && 1 !== i.fontPercent) {
              var a = h.parseFloat(o.style.fontSize);o.style.fontSize = a * i.fontPercent + "px", o.style.height = "auto", o.style.top = "auto", o.style.bottom = "2px";
            }i.fontFamily && "default" !== i.fontFamily && ("small-caps" === i.fontFamily ? o.firstChild.style.fontVariant = "small-caps" : o.firstChild.style.fontFamily = mi[i.fontFamily]);
          }
        }
      }
    }, e;
  }(Fe);Fe.registerComponent("TextTrackDisplay", Ti);var ki = function (r) {
    function e() {
      return r.apply(this, arguments) || this;
    }return f(e, r), e.prototype.createEl = function () {
      var e = this.player_.isAudio(),
          t = this.localize(e ? "Audio Player" : "Video Player"),
          n = x("span", { className: "vjs-control-text", innerHTML: this.localize("{1} is loading.", [t]) }),
          i = r.prototype.createEl.call(this, "div", { className: "vjs-loading-spinner", dir: "ltr" });return i.appendChild(n), i;
    }, e;
  }(Fe);Fe.registerComponent("LoadingSpinner", ki);var Ci = function (t) {
    function e() {
      return t.apply(this, arguments) || this;
    }f(e, t);var n = e.prototype;return n.createEl = function (e, t, n) {
      void 0 === t && (t = {}), void 0 === n && (n = {}), t = _({ innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>', className: this.buildCSSClass() }, t), n = _({ type: "button" }, n);var i = Fe.prototype.createEl.call(this, "button", t, n);return this.createControlTextEl(i), i;
    }, n.addChild = function (e, t) {
      void 0 === t && (t = {});var n = this.constructor.name;return g.warn("Adding an actionable (user controllable) child to a Button (" + n + ") is not supported; use a ClickableComponent instead."), Fe.prototype.addChild.call(this, e, t);
    }, n.enable = function () {
      t.prototype.enable.call(this), this.el_.removeAttribute("disabled");
    }, n.disable = function () {
      t.prototype.disable.call(this), this.el_.setAttribute("disabled", "disabled");
    }, n.handleKeyPress = function (e) {
      Pt.isEventKey(e, "Space") || Pt.isEventKey(e, "Enter") || t.prototype.handleKeyPress.call(this, e);
    }, e;
  }(vi);Fe.registerComponent("Button", Ci);var Ei = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).mouseused_ = !1, n.on("mousedown", n.handleMouseDown), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-big-play-button";
    }, t.handleClick = function (e) {
      var t = this.player_.play();if (this.mouseused_ && e.clientX && e.clientY) return wt(t), void this.player_.handleFocus({});var n = this.player_.getChild("controlBar"),
          i = n && n.getChild("playToggle");if (i) {
        var r = function r() {
          return i.focus();
        };Et(t) ? t.then(r, function () {}) : this.setTimeout(r, 1);
      } else this.player_.focus();
    }, t.handleKeyPress = function (e) {
      this.mouseused_ = !1, i.prototype.handleKeyPress.call(this, e);
    }, t.handleMouseDown = function (e) {
      this.mouseused_ = !0;
    }, e;
  }(Ci);Ei.prototype.controlText_ = "Play Video", Fe.registerComponent("BigPlayButton", Ei);var wi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).controlText(t && t.controlText || n.localize("Close")), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-close-button " + i.prototype.buildCSSClass.call(this);
    }, t.handleKeyPress = function (e) {}, t.handleClick = function (e) {
      this.trigger({ type: "close", bubbles: !1 });
    }, e;
  }(Ci);Fe.registerComponent("CloseButton", wi);var Si = function (i) {
    function e(e, t) {
      var n;return void 0 === t && (t = {}), n = i.call(this, e, t) || this, t.replay = void 0 === t.replay || t.replay, n.on(e, "play", n.handlePlay), n.on(e, "pause", n.handlePause), t.replay && n.on(e, "ended", n.handleEnded), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-play-control " + i.prototype.buildCSSClass.call(this);
    }, t.handleClick = function (e) {
      this.player_.paused() ? this.player_.play() : this.player_.pause();
    }, t.handleSeeked = function (e) {
      this.removeClass("vjs-ended"), this.player_.paused() ? this.handlePause(e) : this.handlePlay(e);
    }, t.handlePlay = function (e) {
      this.removeClass("vjs-ended"), this.removeClass("vjs-paused"), this.addClass("vjs-playing"), this.controlText("Pause");
    }, t.handlePause = function (e) {
      this.removeClass("vjs-playing"), this.addClass("vjs-paused"), this.controlText("Play");
    }, t.handleEnded = function (e) {
      this.removeClass("vjs-playing"), this.addClass("vjs-ended"), this.controlText("Replay"), this.one(this.player_, "seeked", this.handleSeeked);
    }, e;
  }(Ci);Si.prototype.controlText_ = "Play", Fe.registerComponent("PlayToggle", Si);var xi = function xi(e, t) {
    e = e < 0 ? 0 : e;var n = Math.floor(e % 60),
        i = Math.floor(e / 60 % 60),
        r = Math.floor(e / 3600),
        s = Math.floor(t / 60 % 60),
        o = Math.floor(t / 3600);return (isNaN(e) || e === 1 / 0) && (r = i = n = "-"), (r = 0 < r || 0 < o ? r + ":" : "") + (i = ((r || 10 <= s) && i < 10 ? "0" + i : i) + ":") + (n = n < 10 ? "0" + n : n);
  },
      ji = xi;function Ai(e, t) {
    return void 0 === t && (t = e), ji(e, t);
  }var Pi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).throttledUpdateContent = Ee(Ce(v(v(n)), n.updateContent), 25), n.on(e, "timeupdate", n.throttledUpdateContent), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      var e = this.buildCSSClass(),
          t = i.prototype.createEl.call(this, "div", { className: e + " vjs-time-control vjs-control", innerHTML: '<span class="vjs-control-text" role="presentation">' + this.localize(this.labelText_) + " </span>" });return this.contentEl_ = x("span", { className: e + "-display" }, { "aria-live": "off", role: "presentation" }), this.updateTextNode_(), t.appendChild(this.contentEl_), t;
    }, t.dispose = function () {
      this.contentEl_ = null, this.textNode_ = null, i.prototype.dispose.call(this);
    }, t.updateTextNode_ = function () {
      if (this.contentEl_) {
        for (; this.contentEl_.firstChild;) {
          this.contentEl_.removeChild(this.contentEl_.firstChild);
        }this.textNode_ = d.createTextNode(this.formattedTime_ || this.formatTime_(0)), this.contentEl_.appendChild(this.textNode_);
      }
    }, t.formatTime_ = function (e) {
      return Ai(e);
    }, t.updateFormattedTime_ = function (e) {
      var t = this.formatTime_(e);t !== this.formattedTime_ && (this.formattedTime_ = t, this.requestAnimationFrame(this.updateTextNode_));
    }, t.updateContent = function (e) {}, e;
  }(Fe);Pi.prototype.labelText_ = "Time", Pi.prototype.controlText_ = "Time", Fe.registerComponent("TimeDisplay", Pi);var Li = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).on(e, "ended", n.handleEnded), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-current-time";
    }, t.updateContent = function (e) {
      var t = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();this.updateFormattedTime_(t);
    }, t.handleEnded = function (e) {
      this.player_.duration() && this.updateFormattedTime_(this.player_.duration());
    }, e;
  }(Pi);Li.prototype.labelText_ = "Current Time", Li.prototype.controlText_ = "Current Time", Fe.registerComponent("CurrentTimeDisplay", Li);var Mi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).on(e, "durationchange", n.updateContent), n.on(e, "loadstart", n.updateContent), n.on(e, "loadedmetadata", n.throttledUpdateContent), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-duration";
    }, t.updateContent = function (e) {
      var t = this.player_.duration();this.duration_ !== t && (this.duration_ = t, this.updateFormattedTime_(t));
    }, e;
  }(Pi);Mi.prototype.labelText_ = "Duration", Mi.prototype.controlText_ = "Duration", Fe.registerComponent("DurationDisplay", Mi);var Ni = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }return f(t, e), t.prototype.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: "vjs-time-control vjs-time-divider", innerHTML: "<div><span>/</span></div>" }, { "aria-hidden": !0 });
    }, t;
  }(Fe);Fe.registerComponent("TimeDivider", Ni);var Oi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).on(e, "durationchange", n.throttledUpdateContent), n.on(e, "ended", n.handleEnded), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-remaining-time";
    }, t.createEl = function () {
      var e = i.prototype.createEl.call(this);return e.insertBefore(x("span", {}, { "aria-hidden": !0 }, "-"), this.contentEl_), e;
    }, t.updateContent = function (e) {
      "number" == typeof this.player_.duration() && (this.player_.remainingTimeDisplay ? this.updateFormattedTime_(this.player_.remainingTimeDisplay()) : this.updateFormattedTime_(this.player_.remainingTime()));
    }, t.handleEnded = function (e) {
      this.player_.duration() && this.updateFormattedTime_(0);
    }, e;
  }(Pi);Oi.prototype.labelText_ = "Remaining Time", Oi.prototype.controlText_ = "Remaining Time", Fe.registerComponent("RemainingTimeDisplay", Oi);var Ii = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).updateShowing(), n.on(n.player(), "durationchange", n.updateShowing), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      var e = i.prototype.createEl.call(this, "div", { className: "vjs-live-control vjs-control" });return this.contentEl_ = x("div", { className: "vjs-live-display", innerHTML: '<span class="vjs-control-text">' + this.localize("Stream Type") + " </span>" + this.localize("LIVE") }, { "aria-live": "off" }), e.appendChild(this.contentEl_), e;
    }, t.dispose = function () {
      this.contentEl_ = null, i.prototype.dispose.call(this);
    }, t.updateShowing = function (e) {
      this.player().duration() === 1 / 0 ? this.show() : this.hide();
    }, e;
  }(Fe);Fe.registerComponent("LiveDisplay", Ii);var Di = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).updateLiveEdgeStatus(), n.player_.liveTracker && n.on(n.player_.liveTracker, "liveedgechange", n.updateLiveEdgeStatus), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      var e = i.prototype.createEl.call(this, "button", { className: "vjs-seek-to-live-control vjs-control" });return this.textEl_ = x("span", { className: "vjs-seek-to-live-text", innerHTML: this.localize("LIVE") }, { "aria-hidden": "true" }), e.appendChild(this.textEl_), e;
    }, t.updateLiveEdgeStatus = function (e) {
      !this.player_.liveTracker || this.player_.liveTracker.atLiveEdge() ? (this.setAttribute("aria-disabled", !0), this.addClass("vjs-at-live-edge"), this.controlText("Seek to live, currently playing live")) : (this.setAttribute("aria-disabled", !1), this.removeClass("vjs-at-live-edge"), this.controlText("Seek to live, currently behind live"));
    }, t.handleClick = function () {
      this.player_.liveTracker.seekToLiveEdge();
    }, t.dispose = function () {
      this.player_.liveTracker && this.off(this.player_.liveTracker, "liveedgechange", this.updateLiveEdgeStatus), this.textEl_ = null, i.prototype.dispose.call(this);
    }, e;
  }(Ci);Di.prototype.controlText_ = "Seek to live, currently playing live", Fe.registerComponent("SeekToLive", Di);var Ri = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).bar = n.getChild(n.options_.barName), n.vertical(!!n.options_.vertical), n.enable(), n;
    }f(e, i);var t = e.prototype;return t.enabled = function () {
      return this.enabled_;
    }, t.enable = function () {
      this.enabled() || (this.on("mousedown", this.handleMouseDown), this.on("touchstart", this.handleMouseDown), this.on("focus", this.handleFocus), this.on("blur", this.handleBlur), this.on("click", this.handleClick), this.on(this.player_, "controlsvisible", this.update), this.playerEvent && this.on(this.player_, this.playerEvent, this.update), this.removeClass("disabled"), this.setAttribute("tabindex", 0), this.enabled_ = !0);
    }, t.disable = function () {
      if (this.enabled()) {
        var e = this.bar.el_.ownerDocument;this.off("mousedown", this.handleMouseDown), this.off("touchstart", this.handleMouseDown), this.off("focus", this.handleFocus), this.off("blur", this.handleBlur), this.off("click", this.handleClick), this.off(this.player_, "controlsvisible", this.update), this.off(e, "mousemove", this.handleMouseMove), this.off(e, "mouseup", this.handleMouseUp), this.off(e, "touchmove", this.handleMouseMove), this.off(e, "touchend", this.handleMouseUp), this.removeAttribute("tabindex"), this.addClass("disabled"), this.playerEvent && this.off(this.player_, this.playerEvent, this.update), this.enabled_ = !1;
      }
    }, t.createEl = function (e, t, n) {
      return void 0 === t && (t = {}), void 0 === n && (n = {}), t.className = t.className + " vjs-slider", t = _({ tabIndex: 0 }, t), n = _({ role: "slider", "aria-valuenow": 0, "aria-valuemin": 0, "aria-valuemax": 100, tabIndex: 0 }, n), i.prototype.createEl.call(this, e, t, n);
    }, t.handleMouseDown = function (e) {
      var t = this.bar.el_.ownerDocument;"mousedown" === e.type && e.preventDefault(), "touchstart" !== e.type || it || e.preventDefault(), F(), this.addClass("vjs-sliding"), this.trigger("slideractive"), this.on(t, "mousemove", this.handleMouseMove), this.on(t, "mouseup", this.handleMouseUp), this.on(t, "touchmove", this.handleMouseMove), this.on(t, "touchend", this.handleMouseUp), this.handleMouseMove(e);
    }, t.handleMouseMove = function (e) {}, t.handleMouseUp = function () {
      var e = this.bar.el_.ownerDocument;H(), this.removeClass("vjs-sliding"), this.trigger("sliderinactive"), this.off(e, "mousemove", this.handleMouseMove), this.off(e, "mouseup", this.handleMouseUp), this.off(e, "touchmove", this.handleMouseMove), this.off(e, "touchend", this.handleMouseUp), this.update();
    }, t.update = function () {
      if (this.el_) {
        var e = this.getPercent(),
            t = this.bar;if (t) {
          ("number" != typeof e || e != e || e < 0 || e === 1 / 0) && (e = 0);var n = (100 * e).toFixed(2) + "%",
              i = t.el().style;return this.vertical() ? i.height = n : i.width = n, e;
        }
      }
    }, t.calculateDistance = function (e) {
      var t = W(this.el_, e);return this.vertical() ? t.y : t.x;
    }, t.handleFocus = function () {
      this.on(this.bar.el_.ownerDocument, "keydown", this.handleKeyPress);
    }, t.handleKeyPress = function (e) {
      Pt.isEventKey(e, "Left") || Pt.isEventKey(e, "Down") ? (e.preventDefault(), this.stepBack()) : Pt.isEventKey(e, "Right") || Pt.isEventKey(e, "Up") ? (e.preventDefault(), this.stepForward()) : i.prototype.handleKeyPress.call(this, e);
    }, t.handleBlur = function () {
      this.off(this.bar.el_.ownerDocument, "keydown", this.handleKeyPress);
    }, t.handleClick = function (e) {
      e.stopImmediatePropagation(), e.preventDefault();
    }, t.vertical = function (e) {
      if (void 0 === e) return this.vertical_ || !1;this.vertical_ = !!e, this.vertical_ ? this.addClass("vjs-slider-vertical") : this.addClass("vjs-slider-horizontal");
    }, e;
  }(Fe);Fe.registerComponent("Slider", Ri);var Bi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).partEls_ = [], n.on(e, "progress", n.update), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      return i.prototype.createEl.call(this, "div", { className: "vjs-load-progress", innerHTML: '<span class="vjs-control-text"><span>' + this.localize("Loaded") + '</span>: <span class="vjs-control-text-loaded-percentage">0%</span></span>' });
    }, t.dispose = function () {
      this.partEls_ = null, i.prototype.dispose.call(this);
    }, t.update = function (e) {
      var t = this.player_.liveTracker,
          n = this.player_.buffered(),
          i = t && t.isLive() ? t.seekableEnd() : this.player_.duration(),
          r = this.player_.bufferedEnd(),
          s = this.partEls_,
          o = this.$(".vjs-control-text-loaded-percentage"),
          a = function a(e, t, n) {
        var i = e / t || 0;return i = 100 * (1 <= i ? 1 : i), n && (i = i.toFixed(2)), i + "%";
      };this.el_.style.width = a(r, i), j(o, a(r, i, !0));for (var l = 0; l < n.length; l++) {
        var c = n.start(l),
            u = n.end(l),
            h = s[l];h || (h = this.el_.appendChild(x()), s[l] = h), h.style.left = a(c, r), h.style.width = a(u - c, r);
      }for (var d = s.length; d > n.length; d--) {
        this.el_.removeChild(s[d - 1]);
      }s.length = n.length;
    }, e;
  }(Fe);Fe.registerComponent("LoadProgressBar", Bi);var Fi = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }f(t, e);var n = t.prototype;return n.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: "vjs-time-tooltip" }, { "aria-hidden": "true" });
    }, n.update = function (e, t, n) {
      var i = V(this.el_),
          r = V(this.player_.el()),
          s = e.width * t;if (r && i) {
        var o = e.left - r.left + s,
            a = e.width - s + (r.right - e.right),
            l = i.width / 2;o < l ? l += l - o : a < l && (l = a), l < 0 ? l = 0 : l > i.width && (l = i.width), this.el_.style.right = "-" + l + "px", j(this.el_, n);
      }
    }, n.updateTime = function (r, s, o, a) {
      var l = this;this.rafId_ && this.cancelAnimationFrame(this.rafId_), this.rafId_ = this.requestAnimationFrame(function () {
        var e,
            t = l.player_.duration();if (l.player_.liveTracker && l.player_.liveTracker.isLive()) {
          var n = l.player_.liveTracker.liveWindow(),
              i = n - s * n;e = (i < 1 ? "" : "-") + Ai(i, n);
        } else e = Ai(o, t);l.update(r, s, e), a && a();
      });
    }, t;
  }(Fe);Fe.registerComponent("TimeTooltip", Fi);var Hi = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }f(t, e);var n = t.prototype;return n.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: "vjs-play-progress vjs-slider-bar" }, { "aria-hidden": "true" });
    }, n.update = function (e, t) {
      var n = this.getChild("timeTooltip");if (n) {
        var i = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();n.updateTime(e, t, i);
      }
    }, t;
  }(Fe);Hi.prototype.options_ = { children: [] }, Ge || Je || Hi.prototype.options_.children.push("timeTooltip"), Fe.registerComponent("PlayProgressBar", Hi);var Vi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).update = Ee(Ce(v(v(n)), n.update), 25), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      return i.prototype.createEl.call(this, "div", { className: "vjs-mouse-display" });
    }, t.update = function (e, t) {
      var n = this,
          i = t * this.player_.duration();this.getChild("timeTooltip").updateTime(e, t, i, function () {
        n.el_.style.left = e.width * t + "px";
      });
    }, e;
  }(Fe);Vi.prototype.options_ = { children: ["timeTooltip"] }, Fe.registerComponent("MouseTimeDisplay", Vi);var zi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).setEventHandlers_(), n;
    }f(e, i);var t = e.prototype;return t.setEventHandlers_ = function () {
      this.update = Ee(Ce(this, this.update), 30), this.on(this.player_, "timeupdate", this.update), this.on(this.player_, "ended", this.handleEnded), this.on(this.player_, "durationchange", this.update), this.player_.liveTracker && this.on(this.player_.liveTracker, "liveedgechange", this.update), this.updateInterval = null, this.on(this.player_, ["playing"], this.enableInterval_), this.on(this.player_, ["ended", "pause", "waiting"], this.disableInterval_), "hidden" in d && "visibilityState" in d && this.on(d, "visibilitychange", this.toggleVisibility_);
    }, t.toggleVisibility_ = function (e) {
      d.hidden ? this.disableInterval_(e) : (this.enableInterval_(), this.requestAnimationFrame(this.update));
    }, t.enableInterval_ = function () {
      var e = this;this.clearInterval(this.updateInterval), this.updateInterval = this.setInterval(function () {
        e.requestAnimationFrame(e.update);
      }, 30);
    }, t.disableInterval_ = function (e) {
      this.player_.liveTracker && this.player_.liveTracker.isLive() && "ended" !== e.type || this.clearInterval(this.updateInterval);
    }, t.createEl = function () {
      return i.prototype.createEl.call(this, "div", { className: "vjs-progress-holder" }, { "aria-label": this.localize("Progress Bar") });
    }, t.update_ = function (e, t) {
      var n = this.player_.liveTracker,
          i = this.player_.duration();n && n.isLive() && (i = this.player_.liveTracker.liveCurrentTime()), this.el_.setAttribute("aria-valuenow", (100 * t).toFixed(2)), this.el_.setAttribute("aria-valuetext", this.localize("progress bar timing: currentTime={1} duration={2}", [Ai(e, i), Ai(i, i)], "{1} of {2}")), this.bar && this.bar.update(V(this.el_), t);
    }, t.update = function (e) {
      if (null !== this.el().offsetParent) {
        var t = i.prototype.update.call(this);return this.update_(this.getCurrentTime_(), t), t;
      }
    }, t.getCurrentTime_ = function () {
      return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
    }, t.handleEnded = function (e) {
      this.update_(this.player_.duration(), 1);
    }, t.getPercent = function () {
      var e,
          t = this.getCurrentTime_(),
          n = this.player_.liveTracker;return n && n.isLive() ? (e = (t - n.seekableStart()) / n.liveWindow(), n.atLiveEdge() && (e = 1)) : e = t / this.player_.duration(), 1 <= e ? 1 : e || 0;
    }, t.handleMouseDown = function (e) {
      Y(e) && (e.stopPropagation(), this.player_.scrubbing(!0), this.videoWasPlaying = !this.player_.paused(), this.player_.pause(), i.prototype.handleMouseDown.call(this, e));
    }, t.handleMouseMove = function (e) {
      if (Y(e)) {
        var t,
            n = this.calculateDistance(e),
            i = this.player_.liveTracker;if (i && i.isLive()) {
          var r = i.seekableStart(),
              s = i.liveCurrentTime();if (s <= (t = r + n * i.liveWindow()) && (t = s), t <= r && (t = r + .1), t === 1 / 0) return;
        } else (t = n * this.player_.duration()) === this.player_.duration() && (t -= .1);this.player_.currentTime(t);
      }
    }, t.enable = function () {
      i.prototype.enable.call(this);var e = this.getChild("mouseTimeDisplay");e && e.show();
    }, t.disable = function () {
      i.prototype.disable.call(this);var e = this.getChild("mouseTimeDisplay");e && e.hide();
    }, t.handleMouseUp = function (e) {
      i.prototype.handleMouseUp.call(this, e), e && e.stopPropagation(), this.player_.scrubbing(!1), this.player_.trigger({ type: "timeupdate", target: this, manuallyTriggered: !0 }), this.videoWasPlaying && wt(this.player_.play());
    }, t.stepForward = function () {
      this.player_.currentTime(this.player_.currentTime() + 5);
    }, t.stepBack = function () {
      this.player_.currentTime(this.player_.currentTime() - 5);
    }, t.handleAction = function (e) {
      this.player_.paused() ? this.player_.play() : this.player_.pause();
    }, t.handleKeyPress = function (e) {
      if (Pt.isEventKey(e, "Space") || Pt.isEventKey(e, "Enter")) e.preventDefault(), this.handleAction(e);else if (Pt.isEventKey(e, "Home")) e.preventDefault(), this.player_.currentTime(0);else if (Pt.isEventKey(e, "End")) e.preventDefault(), this.player_.currentTime(this.player_.duration());else if (/^[0-9]$/.test(Pt(e))) {
        e.preventDefault();var t = 10 * (Pt.codes[Pt(e)] - Pt.codes[0]) / 100;this.player_.currentTime(this.player_.duration() * t);
      } else Pt.isEventKey(e, "PgDn") ? (e.preventDefault(), this.player_.currentTime(this.player_.currentTime() - 60)) : Pt.isEventKey(e, "PgUp") ? (e.preventDefault(), this.player_.currentTime(this.player_.currentTime() + 60)) : i.prototype.handleKeyPress.call(this, e);
    }, e;
  }(Ri);zi.prototype.options_ = { children: ["loadProgressBar", "playProgressBar"], barName: "playProgressBar" }, Ge || Je || zi.prototype.options_.children.splice(1, 0, "mouseTimeDisplay"), Fe.registerComponent("SeekBar", zi);var Wi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).handleMouseMove = Ee(Ce(v(v(n)), n.handleMouseMove), 25), n.throttledHandleMouseSeek = Ee(Ce(v(v(n)), n.handleMouseSeek), 25), n.enable(), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      return i.prototype.createEl.call(this, "div", { className: "vjs-progress-control vjs-control" });
    }, t.handleMouseMove = function (e) {
      var t = this.getChild("seekBar");if (t) {
        var n = t.getChild("mouseTimeDisplay"),
            i = t.el(),
            r = V(i),
            s = W(i, e).x;1 < s ? s = 1 : s < 0 && (s = 0), n && n.update(r, s);
      }
    }, t.handleMouseSeek = function (e) {
      var t = this.getChild("seekBar");t && t.handleMouseMove(e);
    }, t.enabled = function () {
      return this.enabled_;
    }, t.disable = function () {
      this.children().forEach(function (e) {
        return e.disable && e.disable();
      }), this.enabled() && (this.off(["mousedown", "touchstart"], this.handleMouseDown), this.off(this.el_, "mousemove", this.handleMouseMove), this.handleMouseUp(), this.addClass("disabled"), this.enabled_ = !1);
    }, t.enable = function () {
      this.children().forEach(function (e) {
        return e.enable && e.enable();
      }), this.enabled() || (this.on(["mousedown", "touchstart"], this.handleMouseDown), this.on(this.el_, "mousemove", this.handleMouseMove), this.removeClass("disabled"), this.enabled_ = !0);
    }, t.handleMouseDown = function (e) {
      var t = this.el_.ownerDocument,
          n = this.getChild("seekBar");n && n.handleMouseDown(e), this.on(t, "mousemove", this.throttledHandleMouseSeek), this.on(t, "touchmove", this.throttledHandleMouseSeek), this.on(t, "mouseup", this.handleMouseUp), this.on(t, "touchend", this.handleMouseUp);
    }, t.handleMouseUp = function (e) {
      var t = this.el_.ownerDocument,
          n = this.getChild("seekBar");n && n.handleMouseUp(e), this.off(t, "mousemove", this.throttledHandleMouseSeek), this.off(t, "touchmove", this.throttledHandleMouseSeek), this.off(t, "mouseup", this.handleMouseUp), this.off(t, "touchend", this.handleMouseUp);
    }, e;
  }(Fe);Wi.prototype.options_ = { children: ["seekBar"] }, Fe.registerComponent("ProgressControl", Wi);var Ki = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).on(e, "fullscreenchange", n.handleFullscreenChange), !1 === d[vt.fullscreenEnabled] && n.disable(), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-fullscreen-control " + i.prototype.buildCSSClass.call(this);
    }, t.handleFullscreenChange = function (e) {
      this.player_.isFullscreen() ? this.controlText("Non-Fullscreen") : this.controlText("Fullscreen");
    }, t.handleClick = function (e) {
      this.player_.isFullscreen() ? this.player_.exitFullscreen() : this.player_.requestFullscreen();
    }, e;
  }(Ci);Ki.prototype.controlText_ = "Fullscreen", Fe.registerComponent("FullscreenToggle", Ki);var Ui = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }return f(t, e), t.prototype.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: "vjs-volume-level", innerHTML: '<span class="vjs-control-text"></span>' });
    }, t;
  }(Fe);Fe.registerComponent("VolumeLevel", Ui);var qi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).on("slideractive", n.updateLastVolume_), n.on(e, "volumechange", n.updateARIAAttributes), e.ready(function () {
        return n.updateARIAAttributes();
      }), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      return i.prototype.createEl.call(this, "div", { className: "vjs-volume-bar vjs-slider-bar" }, { "aria-label": this.localize("Volume Level"), "aria-live": "polite" });
    }, t.handleMouseDown = function (e) {
      Y(e) && i.prototype.handleMouseDown.call(this, e);
    }, t.handleMouseMove = function (e) {
      Y(e) && (this.checkMuted(), this.player_.volume(this.calculateDistance(e)));
    }, t.checkMuted = function () {
      this.player_.muted() && this.player_.muted(!1);
    }, t.getPercent = function () {
      return this.player_.muted() ? 0 : this.player_.volume();
    }, t.stepForward = function () {
      this.checkMuted(), this.player_.volume(this.player_.volume() + .1);
    }, t.stepBack = function () {
      this.checkMuted(), this.player_.volume(this.player_.volume() - .1);
    }, t.updateARIAAttributes = function (e) {
      var t = this.player_.muted() ? 0 : this.volumeAsPercentage_();this.el_.setAttribute("aria-valuenow", t), this.el_.setAttribute("aria-valuetext", t + "%");
    }, t.volumeAsPercentage_ = function () {
      return Math.round(100 * this.player_.volume());
    }, t.updateLastVolume_ = function () {
      var e = this,
          t = this.player_.volume();this.one("sliderinactive", function () {
        0 === e.player_.volume() && e.player_.lastVolume_(t);
      });
    }, e;
  }(Ri);qi.prototype.options_ = { children: ["volumeLevel"], barName: "volumeLevel" }, qi.prototype.playerEvent = "volumechange", Fe.registerComponent("VolumeBar", qi);var Xi = function (s) {
    function e(e, t) {
      var n, i, r;return void 0 === t && (t = {}), t.vertical = t.vertical || !1, ("undefined" == typeof t.volumeBar || c(t.volumeBar)) && (t.volumeBar = t.volumeBar || {}, t.volumeBar.vertical = t.vertical), n = s.call(this, e, t) || this, i = v(v(n)), (r = e).tech_ && !r.tech_.featuresVolumeControl && i.addClass("vjs-hidden"), i.on(r, "loadstart", function () {
        r.tech_.featuresVolumeControl ? i.removeClass("vjs-hidden") : i.addClass("vjs-hidden");
      }), n.throttledHandleMouseMove = Ee(Ce(v(v(n)), n.handleMouseMove), 25), n.on("mousedown", n.handleMouseDown), n.on("touchstart", n.handleMouseDown), n.on(n.volumeBar, ["focus", "slideractive"], function () {
        n.volumeBar.addClass("vjs-slider-active"), n.addClass("vjs-slider-active"), n.trigger("slideractive");
      }), n.on(n.volumeBar, ["blur", "sliderinactive"], function () {
        n.volumeBar.removeClass("vjs-slider-active"), n.removeClass("vjs-slider-active"), n.trigger("sliderinactive");
      }), n;
    }f(e, s);var t = e.prototype;return t.createEl = function () {
      var e = "vjs-volume-horizontal";return this.options_.vertical && (e = "vjs-volume-vertical"), s.prototype.createEl.call(this, "div", { className: "vjs-volume-control vjs-control " + e });
    }, t.handleMouseDown = function (e) {
      var t = this.el_.ownerDocument;this.on(t, "mousemove", this.throttledHandleMouseMove), this.on(t, "touchmove", this.throttledHandleMouseMove), this.on(t, "mouseup", this.handleMouseUp), this.on(t, "touchend", this.handleMouseUp);
    }, t.handleMouseUp = function (e) {
      var t = this.el_.ownerDocument;this.off(t, "mousemove", this.throttledHandleMouseMove), this.off(t, "touchmove", this.throttledHandleMouseMove), this.off(t, "mouseup", this.handleMouseUp), this.off(t, "touchend", this.handleMouseUp);
    }, t.handleMouseMove = function (e) {
      this.volumeBar.handleMouseMove(e);
    }, e;
  }(Fe);Xi.prototype.options_ = { children: ["volumeBar"] }, Fe.registerComponent("VolumeControl", Xi);var $i = function (s) {
    function e(e, t) {
      var n, i, r;return n = s.call(this, e, t) || this, i = v(v(n)), (r = e).tech_ && !r.tech_.featuresMuteControl && i.addClass("vjs-hidden"), i.on(r, "loadstart", function () {
        r.tech_.featuresMuteControl ? i.removeClass("vjs-hidden") : i.addClass("vjs-hidden");
      }), n.on(e, ["loadstart", "volumechange"], n.update), n;
    }f(e, s);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-mute-control " + s.prototype.buildCSSClass.call(this);
    }, t.handleClick = function (e) {
      var t = this.player_.volume(),
          n = this.player_.lastVolume_();if (0 === t) {
        var i = n < .1 ? .1 : n;this.player_.volume(i), this.player_.muted(!1);
      } else this.player_.muted(!this.player_.muted());
    }, t.update = function (e) {
      this.updateIcon_(), this.updateControlText_();
    }, t.updateIcon_ = function () {
      var e = this.player_.volume(),
          t = 3;Ge && this.player_.tech_ && this.player_.tech_.el_ && this.player_.muted(this.player_.tech_.el_.muted), 0 === e || this.player_.muted() ? t = 0 : e < .33 ? t = 1 : e < .67 && (t = 2);for (var n = 0; n < 4; n++) {
        M(this.el_, "vjs-vol-" + n);
      }L(this.el_, "vjs-vol-" + t);
    }, t.updateControlText_ = function () {
      var e = this.player_.muted() || 0 === this.player_.volume() ? "Unmute" : "Mute";this.controlText() !== e && this.controlText(e);
    }, e;
  }(Ci);$i.prototype.controlText_ = "Mute", Fe.registerComponent("MuteToggle", $i);var Yi = function (i) {
    function e(e, t) {
      var n;return void 0 === t && (t = {}), "undefined" != typeof t.inline ? t.inline = t.inline : t.inline = !0, ("undefined" == typeof t.volumeControl || c(t.volumeControl)) && (t.volumeControl = t.volumeControl || {}, t.volumeControl.vertical = !t.inline), (n = i.call(this, e, t) || this).on(e, ["loadstart"], n.volumePanelState_), n.on(n.volumeControl, ["slideractive"], n.sliderActive_), n.on(n.volumeControl, ["sliderinactive"], n.sliderInactive_), n;
    }f(e, i);var t = e.prototype;return t.sliderActive_ = function () {
      this.addClass("vjs-slider-active");
    }, t.sliderInactive_ = function () {
      this.removeClass("vjs-slider-active");
    }, t.volumePanelState_ = function () {
      this.volumeControl.hasClass("vjs-hidden") && this.muteToggle.hasClass("vjs-hidden") && this.addClass("vjs-hidden"), this.volumeControl.hasClass("vjs-hidden") && !this.muteToggle.hasClass("vjs-hidden") && this.addClass("vjs-mute-toggle-only");
    }, t.createEl = function () {
      var e = "vjs-volume-panel-horizontal";return this.options_.inline || (e = "vjs-volume-panel-vertical"), i.prototype.createEl.call(this, "div", { className: "vjs-volume-panel vjs-control " + e });
    }, e;
  }(Fe);Yi.prototype.options_ = { children: ["muteToggle", "volumeControl"] }, Fe.registerComponent("VolumePanel", Yi);var Gi = function (i) {
    function e(e, t) {
      var n;return n = i.call(this, e, t) || this, t && (n.menuButton_ = t.menuButton), n.focusedChild_ = -1, n.on("keydown", n.handleKeyPress), n.boundHandleBlur_ = Ce(v(v(n)), n.handleBlur), n.boundHandleTapClick_ = Ce(v(v(n)), n.handleTapClick), n;
    }f(e, i);var t = e.prototype;return t.addEventListenerForItem = function (e) {
      e instanceof Fe && (this.on(e, "blur", this.boundHandleBlur_), this.on(e, ["tap", "click"], this.boundHandleTapClick_));
    }, t.removeEventListenerForItem = function (e) {
      e instanceof Fe && (this.off(e, "blur", this.boundHandleBlur_), this.off(e, ["tap", "click"], this.boundHandleTapClick_));
    }, t.removeChild = function (e) {
      "string" == typeof e && (e = this.getChild(e)), this.removeEventListenerForItem(e), i.prototype.removeChild.call(this, e);
    }, t.addItem = function (e) {
      var t = this.addChild(e);t && this.addEventListenerForItem(t);
    }, t.createEl = function () {
      var e = this.options_.contentElType || "ul";this.contentEl_ = x(e, { className: "vjs-menu-content" }), this.contentEl_.setAttribute("role", "menu");var t = i.prototype.createEl.call(this, "div", { append: this.contentEl_, className: "vjs-menu" });return t.appendChild(this.contentEl_), he(t, "click", function (e) {
        e.preventDefault(), e.stopImmediatePropagation();
      }), t;
    }, t.dispose = function () {
      this.contentEl_ = null, this.boundHandleBlur_ = null, this.boundHandleTapClick_ = null, i.prototype.dispose.call(this);
    }, t.handleBlur = function (e) {
      var t = e.relatedTarget || d.activeElement;if (!this.children().some(function (e) {
        return e.el() === t;
      })) {
        var n = this.menuButton_;n && n.buttonPressed_ && t !== n.el().firstChild && n.unpressButton();
      }
    }, t.handleTapClick = function (t) {
      if (this.menuButton_) {
        this.menuButton_.unpressButton();var e = this.children();if (!Array.isArray(e)) return;var n = e.filter(function (e) {
          return e.el() === t.target;
        })[0];if (!n) return;"CaptionSettingsMenuItem" !== n.name() && this.menuButton_.focus();
      }
    }, t.handleKeyPress = function (e) {
      Pt.isEventKey(e, "Left") || Pt.isEventKey(e, "Down") ? (e.preventDefault(), this.stepForward()) : (Pt.isEventKey(e, "Right") || Pt.isEventKey(e, "Up")) && (e.preventDefault(), this.stepBack());
    }, t.stepForward = function () {
      var e = 0;void 0 !== this.focusedChild_ && (e = this.focusedChild_ + 1), this.focus(e);
    }, t.stepBack = function () {
      var e = 0;void 0 !== this.focusedChild_ && (e = this.focusedChild_ - 1), this.focus(e);
    }, t.focus = function (e) {
      void 0 === e && (e = 0);var t = this.children().slice();t.length && t[0].className && /vjs-menu-title/.test(t[0].className) && t.shift(), 0 < t.length && (e < 0 ? e = 0 : e >= t.length && (e = t.length - 1), t[this.focusedChild_ = e].el_.focus());
    }, e;
  }(Fe);Fe.registerComponent("Menu", Gi);var Qi = function (r) {
    function e(e, t) {
      var n;void 0 === t && (t = {}), (n = r.call(this, e, t) || this).menuButton_ = new Ci(e, t), n.menuButton_.controlText(n.controlText_), n.menuButton_.el_.setAttribute("aria-haspopup", "true");var i = Ci.prototype.buildCSSClass();return n.menuButton_.el_.className = n.buildCSSClass() + " " + i, n.menuButton_.removeClass("vjs-control"), n.addChild(n.menuButton_), n.update(), n.enabled_ = !0, n.on(n.menuButton_, "tap", n.handleClick), n.on(n.menuButton_, "click", n.handleClick), n.on(n.menuButton_, "focus", n.handleFocus), n.on(n.menuButton_, "blur", n.handleBlur), n.on(n.menuButton_, "mouseenter", function () {
        n.menu.show();
      }), n.on("keydown", n.handleSubmenuKeyPress), n;
    }f(e, r);var t = e.prototype;return t.update = function () {
      var e = this.createMenu();this.menu && (this.menu.dispose(), this.removeChild(this.menu)), this.menu = e, this.addChild(e), this.buttonPressed_ = !1, this.menuButton_.el_.setAttribute("aria-expanded", "false"), this.items && this.items.length <= this.hideThreshold_ ? this.hide() : this.show();
    }, t.createMenu = function () {
      var e = new Gi(this.player_, { menuButton: this });if (this.hideThreshold_ = 0, this.options_.title) {
        var t = x("li", { className: "vjs-menu-title", innerHTML: Re(this.options_.title), tabIndex: -1 });this.hideThreshold_ += 1;var n = new Fe(this.player_, { el: t });e.addItem(n);
      }if (this.items = this.createItems(), this.items) for (var i = 0; i < this.items.length; i++) {
        e.addItem(this.items[i]);
      }return e;
    }, t.createItems = function () {}, t.createEl = function () {
      return r.prototype.createEl.call(this, "div", { className: this.buildWrapperCSSClass() }, {});
    }, t.buildWrapperCSSClass = function () {
      var e = "vjs-menu-button";return !0 === this.options_.inline ? e += "-inline" : e += "-popup", "vjs-menu-button " + e + " " + Ci.prototype.buildCSSClass() + " " + r.prototype.buildCSSClass.call(this);
    }, t.buildCSSClass = function () {
      var e = "vjs-menu-button";return !0 === this.options_.inline ? e += "-inline" : e += "-popup", "vjs-menu-button " + e + " " + r.prototype.buildCSSClass.call(this);
    }, t.controlText = function (e, t) {
      return void 0 === t && (t = this.menuButton_.el()), this.menuButton_.controlText(e, t);
    }, t.handleClick = function (e) {
      this.buttonPressed_ ? this.unpressButton() : this.pressButton();
    }, t.focus = function () {
      this.menuButton_.focus();
    }, t.blur = function () {
      this.menuButton_.blur();
    }, t.handleFocus = function () {
      he(d, "keydown", Ce(this, this.handleKeyPress));
    }, t.handleBlur = function () {
      de(d, "keydown", Ce(this, this.handleKeyPress));
    }, t.handleKeyPress = function (e) {
      Pt.isEventKey(e, "Esc") || Pt.isEventKey(e, "Tab") ? (this.buttonPressed_ && this.unpressButton(), Pt.isEventKey(e, "Tab") || (e.preventDefault(), this.menuButton_.focus())) : (Pt.isEventKey(e, "Up") || Pt.isEventKey(e, "Down")) && (this.buttonPressed_ || (e.preventDefault(), this.pressButton()));
    }, t.handleSubmenuKeyPress = function (e) {
      (Pt.isEventKey(e, "Esc") || Pt.isEventKey(e, "Tab")) && (this.buttonPressed_ && this.unpressButton(), Pt.isEventKey(e, "Tab") || (e.preventDefault(), this.menuButton_.focus()));
    }, t.pressButton = function () {
      if (this.enabled_) {
        if (this.buttonPressed_ = !0, this.menu.show(), this.menu.lockShowing(), this.menuButton_.el_.setAttribute("aria-expanded", "true"), Ge && w()) return;this.menu.focus();
      }
    }, t.unpressButton = function () {
      this.enabled_ && (this.buttonPressed_ = !1, this.menu.unlockShowing(), this.menu.hide(), this.menuButton_.el_.setAttribute("aria-expanded", "false"));
    }, t.disable = function () {
      this.unpressButton(), this.enabled_ = !1, this.addClass("vjs-disabled"), this.menuButton_.disable();
    }, t.enable = function () {
      this.enabled_ = !0, this.removeClass("vjs-disabled"), this.menuButton_.enable();
    }, e;
  }(Fe);Fe.registerComponent("MenuButton", Qi);var Ji = function (s) {
    function e(e, t) {
      var n,
          i = t.tracks;if ((n = s.call(this, e, t) || this).items.length <= 1 && n.hide(), !i) return v(n);var r = Ce(v(v(n)), n.update);return i.addEventListener("removetrack", r), i.addEventListener("addtrack", r), n.player_.on("ready", r), n.player_.on("dispose", function () {
        i.removeEventListener("removetrack", r), i.removeEventListener("addtrack", r);
      }), n;
    }return f(e, s), e;
  }(Qi);Fe.registerComponent("TrackButton", Ji);var Zi = ["Tab", "Esc", "Up", "Down", "Right", "Left"],
      er = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).selectable = t.selectable, n.isSelected_ = t.selected || !1, n.multiSelectable = t.multiSelectable, n.selected(n.isSelected_), n.selectable ? n.multiSelectable ? n.el_.setAttribute("role", "menuitemcheckbox") : n.el_.setAttribute("role", "menuitemradio") : n.el_.setAttribute("role", "menuitem"), n;
    }f(e, i);var t = e.prototype;return t.createEl = function (e, t, n) {
      return this.nonIconControl = !0, i.prototype.createEl.call(this, "li", _({ className: "vjs-menu-item", innerHTML: '<span class="vjs-menu-item-text">' + this.localize(this.options_.label) + "</span>", tabIndex: -1 }, t), n);
    }, t.handleKeyPress = function (t) {
      Zi.some(function (e) {
        return Pt.isEventKey(t, e);
      }) || i.prototype.handleKeyPress.call(this, t);
    }, t.handleClick = function (e) {
      this.selected(!0);
    }, t.selected = function (e) {
      this.selectable && (this.isSelected_ = e ? (this.addClass("vjs-selected"), this.el_.setAttribute("aria-checked", "true"), this.controlText(", selected"), !0) : (this.removeClass("vjs-selected"), this.el_.setAttribute("aria-checked", "false"), this.controlText(""), !1));
    }, e;
  }(vi);Fe.registerComponent("MenuItem", er);var tr = function (l) {
    function e(e, t) {
      var i,
          n = t.track,
          r = e.textTracks();t.label = n.label || n.language || "Unknown", t.selected = "showing" === n.mode, (i = l.call(this, e, t) || this).track = n;var s,
          o = function o() {
        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
          t[n] = arguments[n];
        }i.handleTracksChange.apply(v(v(i)), t);
      },
          a = function a() {
        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
          t[n] = arguments[n];
        }i.handleSelectedLanguageChange.apply(v(v(i)), t);
      };(e.on(["loadstart", "texttrackchange"], o), r.addEventListener("change", o), r.addEventListener("selectedlanguagechange", a), i.on("dispose", function () {
        e.off(["loadstart", "texttrackchange"], o), r.removeEventListener("change", o), r.removeEventListener("selectedlanguagechange", a);
      }), void 0 === r.onchange) && i.on(["tap", "click"], function () {
        if ("object" != _typeof(h.Event)) try {
          s = new h.Event("change");
        } catch (e) {}s || (s = d.createEvent("Event")).initEvent("change", !0, !0), r.dispatchEvent(s);
      });return i.handleTracksChange(), i;
    }f(e, l);var t = e.prototype;return t.handleClick = function (e) {
      var t = this.track,
          n = this.player_.textTracks();if (l.prototype.handleClick.call(this, e), n) for (var i = (t.kinds || [t.kind]).filter(Boolean), r = 0; r < n.length; r++) {
        var s = n[r];-1 !== i.indexOf(s.kind) && (s === t ? "showing" !== s.mode && (s.mode = "showing") : "disabled" !== s.mode && (s.mode = "disabled"));
      }
    }, t.handleTracksChange = function (e) {
      var t = "showing" === this.track.mode;t !== this.isSelected_ && this.selected(t);
    }, t.handleSelectedLanguageChange = function (e) {
      if ("showing" === this.track.mode) {
        var t = this.player_.cache_.selectedLanguage;if (t && t.enabled && t.language === this.track.language && t.kind !== this.track.kind) return;this.player_.cache_.selectedLanguage = { enabled: !0, language: this.track.language, kind: this.track.kind };
      }
    }, t.dispose = function () {
      this.track = null, l.prototype.dispose.call(this);
    }, e;
  }(er);Fe.registerComponent("TextTrackMenuItem", tr);var nr = function (n) {
    function e(e, t) {
      return t.track = { player: e, kind: t.kind, kinds: t.kinds, default: !1, mode: "disabled" }, t.kinds || (t.kinds = [t.kind]), t.label ? t.track.label = t.label : t.track.label = t.kinds.join(" and ") + " off", t.selectable = !0, t.multiSelectable = !1, n.call(this, e, t) || this;
    }f(e, n);var t = e.prototype;return t.handleTracksChange = function (e) {
      for (var t = this.player().textTracks(), n = !0, i = 0, r = t.length; i < r; i++) {
        var s = t[i];if (-1 < this.options_.kinds.indexOf(s.kind) && "showing" === s.mode) {
          n = !1;break;
        }
      }n !== this.isSelected_ && this.selected(n);
    }, t.handleSelectedLanguageChange = function (e) {
      for (var t = this.player().textTracks(), n = !0, i = 0, r = t.length; i < r; i++) {
        var s = t[i];if (-1 < ["captions", "descriptions", "subtitles"].indexOf(s.kind) && "showing" === s.mode) {
          n = !1;break;
        }
      }n && (this.player_.cache_.selectedLanguage = { enabled: !1 });
    }, e;
  }(tr);Fe.registerComponent("OffTextTrackMenuItem", nr);var ir = function (n) {
    function e(e, t) {
      return void 0 === t && (t = {}), t.tracks = e.textTracks(), n.call(this, e, t) || this;
    }return f(e, n), e.prototype.createItems = function (e, t) {
      var n;void 0 === e && (e = []), void 0 === t && (t = tr), this.label_ && (n = this.label_ + " off"), e.push(new nr(this.player_, { kinds: this.kinds_, kind: this.kind_, label: n })), this.hideThreshold_ += 1;var i = this.player_.textTracks();Array.isArray(this.kinds_) || (this.kinds_ = [this.kind_]);for (var r = 0; r < i.length; r++) {
        var s = i[r];if (-1 < this.kinds_.indexOf(s.kind)) {
          var o = new t(this.player_, { track: s, selectable: !0, multiSelectable: !1 });o.addClass("vjs-" + s.kind + "-menu-item"), e.push(o);
        }
      }return e;
    }, e;
  }(Ji);Fe.registerComponent("TextTrackButton", ir);var rr = function (o) {
    function e(e, t) {
      var n,
          i = t.track,
          r = t.cue,
          s = e.currentTime();return t.selectable = !0, t.multiSelectable = !1, t.label = r.text, t.selected = r.startTime <= s && s < r.endTime, (n = o.call(this, e, t) || this).track = i, n.cue = r, i.addEventListener("cuechange", Ce(v(v(n)), n.update)), n;
    }f(e, o);var t = e.prototype;return t.handleClick = function (e) {
      o.prototype.handleClick.call(this), this.player_.currentTime(this.cue.startTime), this.update(this.cue.startTime);
    }, t.update = function (e) {
      var t = this.cue,
          n = this.player_.currentTime();this.selected(t.startTime <= n && n < t.endTime);
    }, e;
  }(er);Fe.registerComponent("ChaptersTrackMenuItem", rr);var sr = function (i) {
    function e(e, t, n) {
      return i.call(this, e, t, n) || this;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-chapters-button " + i.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-chapters-button " + i.prototype.buildWrapperCSSClass.call(this);
    }, t.update = function (e) {
      this.track_ && (!e || "addtrack" !== e.type && "removetrack" !== e.type) || this.setTrack(this.findChaptersTrack()), i.prototype.update.call(this);
    }, t.setTrack = function (e) {
      if (this.track_ !== e) {
        if (this.updateHandler_ || (this.updateHandler_ = this.update.bind(this)), this.track_) {
          var t = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);t && t.removeEventListener("load", this.updateHandler_), this.track_ = null;
        }if (this.track_ = e, this.track_) {
          this.track_.mode = "hidden";var n = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);n && n.addEventListener("load", this.updateHandler_);
        }
      }
    }, t.findChaptersTrack = function () {
      for (var e = this.player_.textTracks() || [], t = e.length - 1; 0 <= t; t--) {
        var n = e[t];if (n.kind === this.kind_) return n;
      }
    }, t.getMenuCaption = function () {
      return this.track_ && this.track_.label ? this.track_.label : this.localize(Re(this.kind_));
    }, t.createMenu = function () {
      return this.options_.title = this.getMenuCaption(), i.prototype.createMenu.call(this);
    }, t.createItems = function () {
      var e = [];if (!this.track_) return e;var t = this.track_.cues;if (!t) return e;for (var n = 0, i = t.length; n < i; n++) {
        var r = t[n],
            s = new rr(this.player_, { track: this.track_, cue: r });e.push(s);
      }return e;
    }, e;
  }(ir);sr.prototype.kind_ = "chapters", sr.prototype.controlText_ = "Chapters", Fe.registerComponent("ChaptersButton", sr);var or = function (o) {
    function e(e, t, n) {
      var i;i = o.call(this, e, t, n) || this;var r = e.textTracks(),
          s = Ce(v(v(i)), i.handleTracksChange);return r.addEventListener("change", s), i.on("dispose", function () {
        r.removeEventListener("change", s);
      }), i;
    }f(e, o);var t = e.prototype;return t.handleTracksChange = function (e) {
      for (var t = this.player().textTracks(), n = !1, i = 0, r = t.length; i < r; i++) {
        var s = t[i];if (s.kind !== this.kind_ && "showing" === s.mode) {
          n = !0;break;
        }
      }n ? this.disable() : this.enable();
    }, t.buildCSSClass = function () {
      return "vjs-descriptions-button " + o.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-descriptions-button " + o.prototype.buildWrapperCSSClass.call(this);
    }, e;
  }(ir);or.prototype.kind_ = "descriptions", or.prototype.controlText_ = "Descriptions", Fe.registerComponent("DescriptionsButton", or);var ar = function (i) {
    function e(e, t, n) {
      return i.call(this, e, t, n) || this;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-subtitles-button " + i.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-subtitles-button " + i.prototype.buildWrapperCSSClass.call(this);
    }, e;
  }(ir);ar.prototype.kind_ = "subtitles", ar.prototype.controlText_ = "Subtitles", Fe.registerComponent("SubtitlesButton", ar);var lr = function (i) {
    function e(e, t) {
      var n;return t.track = { player: e, kind: t.kind, label: t.kind + " settings", selectable: !1, default: !1, mode: "disabled" }, t.selectable = !1, t.name = "CaptionSettingsMenuItem", (n = i.call(this, e, t) || this).addClass("vjs-texttrack-settings"), n.controlText(", opens " + t.kind + " settings dialog"), n;
    }return f(e, i), e.prototype.handleClick = function (e) {
      this.player().getChild("textTrackSettings").open();
    }, e;
  }(tr);Fe.registerComponent("CaptionSettingsMenuItem", lr);var cr = function (i) {
    function e(e, t, n) {
      return i.call(this, e, t, n) || this;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-captions-button " + i.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-captions-button " + i.prototype.buildWrapperCSSClass.call(this);
    }, t.createItems = function () {
      var e = [];return this.player().tech_ && this.player().tech_.featuresNativeTextTracks || !this.player().getChild("textTrackSettings") || (e.push(new lr(this.player_, { kind: this.kind_ })), this.hideThreshold_ += 1), i.prototype.createItems.call(this, e);
    }, e;
  }(ir);cr.prototype.kind_ = "captions", cr.prototype.controlText_ = "Captions", Fe.registerComponent("CaptionsButton", cr);var ur = function (r) {
    function e() {
      return r.apply(this, arguments) || this;
    }return f(e, r), e.prototype.createEl = function (e, t, n) {
      var i = '<span class="vjs-menu-item-text">' + this.localize(this.options_.label);return "captions" === this.options_.track.kind && (i += '\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> ' + this.localize("Captions") + "</span>\n      "), i += "</span>", r.prototype.createEl.call(this, e, _({ innerHTML: i }, t), n);
    }, e;
  }(tr);Fe.registerComponent("SubsCapsMenuItem", ur);var hr = function (i) {
    function e(e, t) {
      var n;return void 0 === t && (t = {}), (n = i.call(this, e, t) || this).label_ = "subtitles", -1 < ["en", "en-us", "en-ca", "fr-ca"].indexOf(n.player_.language_) && (n.label_ = "captions"), n.menuButton_.controlText(Re(n.label_)), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-subs-caps-button " + i.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-subs-caps-button " + i.prototype.buildWrapperCSSClass.call(this);
    }, t.createItems = function () {
      var e = [];return this.player().tech_ && this.player().tech_.featuresNativeTextTracks || !this.player().getChild("textTrackSettings") || (e.push(new lr(this.player_, { kind: this.label_ })), this.hideThreshold_ += 1), e = i.prototype.createItems.call(this, e, ur);
    }, e;
  }(ir);hr.prototype.kinds_ = ["captions", "subtitles"], hr.prototype.controlText_ = "Subtitles", Fe.registerComponent("SubsCapsButton", hr);var dr = function (o) {
    function e(e, t) {
      var i,
          n = t.track,
          r = e.audioTracks();t.label = n.label || n.language || "Unknown", t.selected = n.enabled, (i = o.call(this, e, t) || this).track = n, i.addClass("vjs-" + n.kind + "-menu-item");var s = function s() {
        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
          t[n] = arguments[n];
        }i.handleTracksChange.apply(v(v(i)), t);
      };return r.addEventListener("change", s), i.on("dispose", function () {
        r.removeEventListener("change", s);
      }), i;
    }f(e, o);var t = e.prototype;return t.createEl = function (e, t, n) {
      var i = '<span class="vjs-menu-item-text">' + this.localize(this.options_.label);return "main-desc" === this.options_.track.kind && (i += '\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> ' + this.localize("Descriptions") + "</span>\n      "), i += "</span>", o.prototype.createEl.call(this, e, _({ innerHTML: i }, t), n);
    }, t.handleClick = function (e) {
      var t = this.player_.audioTracks();o.prototype.handleClick.call(this, e);for (var n = 0; n < t.length; n++) {
        var i = t[n];i.enabled = i === this.track;
      }
    }, t.handleTracksChange = function (e) {
      this.selected(this.track.enabled);
    }, e;
  }(er);Fe.registerComponent("AudioTrackMenuItem", dr);var pr = function (n) {
    function e(e, t) {
      return void 0 === t && (t = {}), t.tracks = e.audioTracks(), n.call(this, e, t) || this;
    }f(e, n);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-audio-button " + n.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-audio-button " + n.prototype.buildWrapperCSSClass.call(this);
    }, t.createItems = function (e) {
      void 0 === e && (e = []), this.hideThreshold_ = 1;for (var t = this.player_.audioTracks(), n = 0; n < t.length; n++) {
        var i = t[n];e.push(new dr(this.player_, { track: i, selectable: !0, multiSelectable: !1 }));
      }return e;
    }, e;
  }(Ji);pr.prototype.controlText_ = "Audio Track", Fe.registerComponent("AudioTrackButton", pr);var fr = function (s) {
    function e(e, t) {
      var n,
          i = t.rate,
          r = parseFloat(i, 10);return t.label = i, t.selected = 1 === r, t.selectable = !0, t.multiSelectable = !1, (n = s.call(this, e, t) || this).label = i, n.rate = r, n.on(e, "ratechange", n.update), n;
    }f(e, s);var t = e.prototype;return t.handleClick = function (e) {
      s.prototype.handleClick.call(this), this.player().playbackRate(this.rate);
    }, t.update = function (e) {
      this.selected(this.player().playbackRate() === this.rate);
    }, e;
  }(er);fr.prototype.contentElType = "button", Fe.registerComponent("PlaybackRateMenuItem", fr);var vr = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).updateVisibility(), n.updateLabel(), n.on(e, "loadstart", n.updateVisibility), n.on(e, "ratechange", n.updateLabel), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      var e = i.prototype.createEl.call(this);return this.labelEl_ = x("div", { className: "vjs-playback-rate-value", innerHTML: "1x" }), e.appendChild(this.labelEl_), e;
    }, t.dispose = function () {
      this.labelEl_ = null, i.prototype.dispose.call(this);
    }, t.buildCSSClass = function () {
      return "vjs-playback-rate " + i.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-playback-rate " + i.prototype.buildWrapperCSSClass.call(this);
    }, t.createMenu = function () {
      var e = new Gi(this.player()),
          t = this.playbackRates();if (t) for (var n = t.length - 1; 0 <= n; n--) {
        e.addChild(new fr(this.player(), { rate: t[n] + "x" }));
      }return e;
    }, t.updateARIAAttributes = function () {
      this.el().setAttribute("aria-valuenow", this.player().playbackRate());
    }, t.handleClick = function (e) {
      for (var t = this.player().playbackRate(), n = this.playbackRates(), i = n[0], r = 0; r < n.length; r++) {
        if (n[r] > t) {
          i = n[r];break;
        }
      }this.player().playbackRate(i);
    }, t.playbackRates = function () {
      return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;
    }, t.playbackRateSupported = function () {
      return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && 0 < this.playbackRates().length;
    }, t.updateVisibility = function (e) {
      this.playbackRateSupported() ? this.removeClass("vjs-hidden") : this.addClass("vjs-hidden");
    }, t.updateLabel = function (e) {
      this.playbackRateSupported() && (this.labelEl_.innerHTML = this.player().playbackRate() + "x");
    }, e;
  }(Qi);vr.prototype.controlText_ = "Playback Rate", Fe.registerComponent("PlaybackRateMenuButton", vr);var gr = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }f(t, e);var n = t.prototype;return n.buildCSSClass = function () {
      return "vjs-spacer " + e.prototype.buildCSSClass.call(this);
    }, n.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: this.buildCSSClass() });
    }, t;
  }(Fe);Fe.registerComponent("Spacer", gr);var yr = function (t) {
    function e() {
      return t.apply(this, arguments) || this;
    }f(e, t);var n = e.prototype;return n.buildCSSClass = function () {
      return "vjs-custom-control-spacer " + t.prototype.buildCSSClass.call(this);
    }, n.createEl = function () {
      var e = t.prototype.createEl.call(this, { className: this.buildCSSClass() });return e.innerHTML = " ", e;
    }, e;
  }(gr);Fe.registerComponent("CustomControlSpacer", yr);var mr = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }return f(t, e), t.prototype.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: "vjs-control-bar", dir: "ltr" });
    }, t;
  }(Fe);mr.prototype.options_ = { children: ["playToggle", "volumePanel", "currentTimeDisplay", "timeDivider", "durationDisplay", "progressControl", "liveDisplay", "seekToLive", "remainingTimeDisplay", "customControlSpacer", "playbackRateMenuButton", "chaptersButton", "descriptionsButton", "subsCapsButton", "audioTrackButton", "fullscreenToggle"] }, Fe.registerComponent("ControlBar", mr);var _r = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).on(e, "error", n.open), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-error-display " + i.prototype.buildCSSClass.call(this);
    }, t.content = function () {
      var e = this.player().error();return e ? this.localize(e.message) : "";
    }, e;
  }(Mt);_r.prototype.options_ = Be(Mt.prototype.options_, { pauseOnOpen: !1, fillAlways: !0, temporary: !1, uncloseable: !0 }), Fe.registerComponent("ErrorDisplay", _r);var br = "vjs-text-track-settings",
      Tr = ["#000", "Black"],
      kr = ["#00F", "Blue"],
      Cr = ["#0FF", "Cyan"],
      Er = ["#0F0", "Green"],
      wr = ["#F0F", "Magenta"],
      Sr = ["#F00", "Red"],
      xr = ["#FFF", "White"],
      jr = ["#FF0", "Yellow"],
      Ar = ["1", "Opaque"],
      Pr = ["0.5", "Semi-Transparent"],
      Lr = ["0", "Transparent"],
      Mr = { backgroundColor: { selector: ".vjs-bg-color > select", id: "captions-background-color-%s", label: "Color", options: [Tr, xr, Sr, Er, kr, jr, wr, Cr] }, backgroundOpacity: { selector: ".vjs-bg-opacity > select", id: "captions-background-opacity-%s", label: "Transparency", options: [Ar, Pr, Lr] }, color: { selector: ".vjs-fg-color > select", id: "captions-foreground-color-%s", label: "Color", options: [xr, Tr, Sr, Er, kr, jr, wr, Cr] }, edgeStyle: { selector: ".vjs-edge-style > select", id: "%s", label: "Text Edge Style", options: [["none", "None"], ["raised", "Raised"], ["depressed", "Depressed"], ["uniform", "Uniform"], ["dropshadow", "Dropshadow"]] }, fontFamily: { selector: ".vjs-font-family > select", id: "captions-font-family-%s", label: "Font Family", options: [["proportionalSansSerif", "Proportional Sans-Serif"], ["monospaceSansSerif", "Monospace Sans-Serif"], ["proportionalSerif", "Proportional Serif"], ["monospaceSerif", "Monospace Serif"], ["casual", "Casual"], ["script", "Script"], ["small-caps", "Small Caps"]] }, fontPercent: { selector: ".vjs-font-percent > select", id: "captions-font-size-%s", label: "Font Size", options: [["0.50", "50%"], ["0.75", "75%"], ["1.00", "100%"], ["1.25", "125%"], ["1.50", "150%"], ["1.75", "175%"], ["2.00", "200%"], ["3.00", "300%"], ["4.00", "400%"]], default: 2, parser: function parser(e) {
        return "1.00" === e ? null : Number(e);
      } }, textOpacity: { selector: ".vjs-text-opacity > select", id: "captions-foreground-opacity-%s", label: "Transparency", options: [Ar, Pr] }, windowColor: { selector: ".vjs-window-color > select", id: "captions-window-color-%s", label: "Color" }, windowOpacity: { selector: ".vjs-window-opacity > select", id: "captions-window-opacity-%s", label: "Transparency", options: [Lr, Pr, Ar] } };function Nr(e, t) {
    if (t && (e = t(e)), e && "none" !== e) return e;
  }Mr.windowColor.options = Mr.backgroundColor.options;var Or = function (i) {
    function e(e, t) {
      var n;return t.temporary = !1, (n = i.call(this, e, t) || this).updateDisplay = Ce(v(v(n)), n.updateDisplay), n.fill(), n.hasBeenOpened_ = n.hasBeenFilled_ = !0, n.endDialog = x("p", { className: "vjs-control-text", textContent: n.localize("End of dialog window.") }), n.el().appendChild(n.endDialog), n.setDefaults(), void 0 === t.persistTextTrackSettings && (n.options_.persistTextTrackSettings = n.options_.playerOptions.persistTextTrackSettings), n.on(n.$(".vjs-done-button"), "click", function () {
        n.saveSettings(), n.close();
      }), n.on(n.$(".vjs-default-button"), "click", function () {
        n.setDefaults(), n.updateDisplay();
      }), a(Mr, function (e) {
        n.on(n.$(e.selector), "change", n.updateDisplay);
      }), n.options_.persistTextTrackSettings && n.restoreSettings(), n;
    }f(e, i);var t = e.prototype;return t.dispose = function () {
      this.endDialog = null, i.prototype.dispose.call(this);
    }, t.createElSelect_ = function (e, t, n) {
      var i = this;void 0 === t && (t = ""), void 0 === n && (n = "label");var r = Mr[e],
          s = r.id.replace("%s", this.id_),
          o = [t, s].join(" ").trim();return ["<" + n + ' id="' + s + '" class="' + ("label" === n ? "vjs-label" : "") + '">', this.localize(r.label), "</" + n + ">", '<select aria-labelledby="' + o + '">'].concat(r.options.map(function (e) {
        var t = s + "-" + e[1].replace(/\W+/g, "");return ['<option id="' + t + '" value="' + e[0] + '" ', 'aria-labelledby="' + o + " " + t + '">', i.localize(e[1]), "</option>"].join("");
      })).concat("</select>").join("");
    }, t.createElFgColor_ = function () {
      var e = "captions-text-legend-" + this.id_;return ['<fieldset class="vjs-fg-color vjs-track-setting">', '<legend id="' + e + '">', this.localize("Text"), "</legend>", this.createElSelect_("color", e), '<span class="vjs-text-opacity vjs-opacity">', this.createElSelect_("textOpacity", e), "</span>", "</fieldset>"].join("");
    }, t.createElBgColor_ = function () {
      var e = "captions-background-" + this.id_;return ['<fieldset class="vjs-bg-color vjs-track-setting">', '<legend id="' + e + '">', this.localize("Background"), "</legend>", this.createElSelect_("backgroundColor", e), '<span class="vjs-bg-opacity vjs-opacity">', this.createElSelect_("backgroundOpacity", e), "</span>", "</fieldset>"].join("");
    }, t.createElWinColor_ = function () {
      var e = "captions-window-" + this.id_;return ['<fieldset class="vjs-window-color vjs-track-setting">', '<legend id="' + e + '">', this.localize("Window"), "</legend>", this.createElSelect_("windowColor", e), '<span class="vjs-window-opacity vjs-opacity">', this.createElSelect_("windowOpacity", e), "</span>", "</fieldset>"].join("");
    }, t.createElColors_ = function () {
      return x("div", { className: "vjs-track-settings-colors", innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join("") });
    }, t.createElFont_ = function () {
      return x("div", { className: "vjs-track-settings-font", innerHTML: ['<fieldset class="vjs-font-percent vjs-track-setting">', this.createElSelect_("fontPercent", "", "legend"), "</fieldset>", '<fieldset class="vjs-edge-style vjs-track-setting">', this.createElSelect_("edgeStyle", "", "legend"), "</fieldset>", '<fieldset class="vjs-font-family vjs-track-setting">', this.createElSelect_("fontFamily", "", "legend"), "</fieldset>"].join("") });
    }, t.createElControls_ = function () {
      var e = this.localize("restore all settings to the default values");return x("div", { className: "vjs-track-settings-controls", innerHTML: ['<button type="button" class="vjs-default-button" title="' + e + '">', this.localize("Reset"), '<span class="vjs-control-text"> ' + e + "</span>", "</button>", '<button type="button" class="vjs-done-button">' + this.localize("Done") + "</button>"].join("") });
    }, t.content = function () {
      return [this.createElColors_(), this.createElFont_(), this.createElControls_()];
    }, t.label = function () {
      return this.localize("Caption Settings Dialog");
    }, t.description = function () {
      return this.localize("Beginning of dialog window. Escape will cancel and close the window.");
    }, t.buildCSSClass = function () {
      return i.prototype.buildCSSClass.call(this) + " vjs-text-track-settings";
    }, t.getValues = function () {
      var n,
          i,
          e,
          o = this;return i = function i(e, t, n) {
        var i,
            r,
            s = (i = o.$(t.selector), r = t.parser, Nr(i.options[i.options.selectedIndex].value, r));return void 0 !== s && (e[n] = s), e;
      }, void 0 === (e = {}) && (e = 0), r(n = Mr).reduce(function (e, t) {
        return i(e, n[t], t);
      }, e);
    }, t.setValues = function (n) {
      var i = this;a(Mr, function (e, t) {
        !function (e, t, n) {
          if (t) for (var i = 0; i < e.options.length; i++) {
            if (Nr(e.options[i].value, n) === t) {
              e.selectedIndex = i;break;
            }
          }
        }(i.$(e.selector), n[t], e.parser);
      });
    }, t.setDefaults = function () {
      var n = this;a(Mr, function (e) {
        var t = e.hasOwnProperty("default") ? e.default : 0;n.$(e.selector).selectedIndex = t;
      });
    }, t.restoreSettings = function () {
      var e;try {
        e = JSON.parse(h.localStorage.getItem(br));
      } catch (e) {
        g.warn(e);
      }e && this.setValues(e);
    }, t.saveSettings = function () {
      if (this.options_.persistTextTrackSettings) {
        var e = this.getValues();try {
          Object.keys(e).length ? h.localStorage.setItem(br, JSON.stringify(e)) : h.localStorage.removeItem(br);
        } catch (e) {
          g.warn(e);
        }
      }
    }, t.updateDisplay = function () {
      var e = this.player_.getChild("textTrackDisplay");e && e.updateDisplay();
    }, t.conditionalBlur_ = function () {
      this.previouslyActiveEl_ = null, this.off(d, "keydown", this.handleKeyDown);var e = this.player_.controlBar,
          t = e && e.subsCapsButton,
          n = e && e.captionsButton;t ? t.focus() : n && n.focus();
    }, e;
  }(Mt);Fe.registerComponent("TextTrackSettings", Or);var Ir = function (s) {
    function e(e, t) {
      var n,
          i = t.ResizeObserver || h.ResizeObserver;null === t.ResizeObserver && (i = !1);var r = Be({ createEl: !i, reportTouchActivity: !1 }, t);return (n = s.call(this, e, r) || this).ResizeObserver = t.ResizeObserver || h.ResizeObserver, n.loadListener_ = null, n.resizeObserver_ = null, n.debouncedHandler_ = function (i, r, s, o) {
        var a;void 0 === o && (o = h);var e = function e() {
          var e = this,
              t = arguments,
              _n2 = function n() {
            _n2 = a = null, s || i.apply(e, t);
          };!a && s && i.apply(e, t), o.clearTimeout(a), a = o.setTimeout(_n2, r);
        };return e.cancel = function () {
          o.clearTimeout(a), a = null;
        }, e;
      }(function () {
        n.resizeHandler();
      }, 100, !1, v(v(n))), i ? (n.resizeObserver_ = new n.ResizeObserver(n.debouncedHandler_), n.resizeObserver_.observe(e.el())) : (n.loadListener_ = function () {
        if (n.el_ && n.el_.contentWindow) {
          var e = n.debouncedHandler_,
              t = n.unloadListener_ = function () {
            de(this, "resize", e), de(this, "unload", t), t = null;
          };he(n.el_.contentWindow, "unload", t), he(n.el_.contentWindow, "resize", e);
        }
      }, n.one("load", n.loadListener_)), n;
    }f(e, s);var t = e.prototype;return t.createEl = function () {
      return s.prototype.createEl.call(this, "iframe", { className: "vjs-resize-manager", tabIndex: -1 }, { "aria-hidden": "true" });
    }, t.resizeHandler = function () {
      this.player_ && this.player_.trigger && this.player_.trigger("playerresize");
    }, t.dispose = function () {
      this.debouncedHandler_ && this.debouncedHandler_.cancel(), this.resizeObserver_ && (this.player_.el() && this.resizeObserver_.unobserve(this.player_.el()), this.resizeObserver_.disconnect()), this.loadListener_ && this.off("load", this.loadListener_), this.el_ && this.el_.contentWindow && this.unloadListener_ && this.unloadListener_.call(this.el_.contentWindow), this.ResizeObserver = null, this.resizeObserver = null, this.debouncedHandler_ = null, this.loadListener_ = null, s.prototype.dispose.call(this);
    }, e;
  }(Fe);Fe.registerComponent("ResizeManager", Ir);var Dr = function (r) {
    function e(e, t) {
      var n,
          i = Be({ createEl: !1 }, t);return (n = r.call(this, e, i) || this).reset_(), n.on(n.player_, "durationchange", n.handleDurationchange), st && "hidden" in d && "visibilityState" in d && n.on(d, "visibilitychange", n.handleVisibilityChange), n;
    }f(e, r);var t = e.prototype;return t.handleVisibilityChange = function () {
      this.player_.duration() === 1 / 0 && (d.hidden ? this.stopTracking() : this.startTracking());
    }, t.isBehind_ = function () {
      if (!this.timeupdateSeen_) return !1;var e = this.liveCurrentTime(),
          t = this.player_.currentTime(),
          n = this.seekableIncrement_;return e !== 1 / 0 && t <= e - (2 * n + .07);
    }, t.trackLive_ = function () {
      this.pastSeekEnd_ = this.pastSeekEnd_;var e = this.player_.seekable();if (e && e.length) {
        var t = this.seekableEnd();t !== this.lastSeekEnd_ && (this.lastSeekEnd_ && (this.seekableIncrement_ = Math.abs(t - this.lastSeekEnd_)), this.pastSeekEnd_ = 0, this.lastSeekEnd_ = t, this.trigger("seekableendchange")), this.pastSeekEnd_ = this.pastSeekEnd() + .03, this.isBehind_() !== this.behindLiveEdge() && (this.behindLiveEdge_ = this.isBehind_(), this.trigger("liveedgechange"));
      }
    }, t.handleDurationchange = function () {
      this.player_.duration() === 1 / 0 ? this.startTracking() : this.stopTracking();
    }, t.startTracking = function () {
      var e = this;this.isTracking() || (this.trackingInterval_ = this.setInterval(this.trackLive_, 30), this.trackLive_(), this.on(this.player_, "play", this.trackLive_), this.on(this.player_, "pause", this.trackLive_), this.one(this.player_, "play", this.handlePlay), this.timeupdateSeen_ || (this.handleTimeupdate = function () {
        e.timeupdateSeen_ = !0, e.handleTimeupdate = null;
      }, this.one(this.player_, "timeupdate", this.handleTimeupdate)));
    }, t.handlePlay = function () {
      this.one(this.player_, "timeupdate", this.seekToLiveEdge);
    }, t.reset_ = function () {
      this.pastSeekEnd_ = 0, this.lastSeekEnd_ = null, this.behindLiveEdge_ = null, this.timeupdateSeen_ = !1, this.clearInterval(this.trackingInterval_), this.trackingInterval_ = null, this.seekableIncrement_ = 12, this.off(this.player_, "play", this.trackLive_), this.off(this.player_, "pause", this.trackLive_), this.off(this.player_, "play", this.handlePlay), this.off(this.player_, "timeupdate", this.seekToLiveEdge), this.handleTimeupdate && (this.off(this.player_, "timeupdate", this.handleTimeupdate), this.handleTimeupdate = null);
    }, t.stopTracking = function () {
      this.isTracking() && this.reset_();
    }, t.seekableEnd = function () {
      for (var e = this.player_.seekable(), t = [], n = e ? e.length : 0; n--;) {
        t.push(e.end(n));
      }return t.length ? t.sort()[t.length - 1] : 1 / 0;
    }, t.seekableStart = function () {
      for (var e = this.player_.seekable(), t = [], n = e ? e.length : 0; n--;) {
        t.push(e.start(n));
      }return t.length ? t.sort()[0] : 0;
    }, t.liveWindow = function () {
      var e = this.liveCurrentTime();return e === 1 / 0 ? 1 / 0 : e - this.seekableStart();
    }, t.isLive = function () {
      return this.isTracking();
    }, t.atLiveEdge = function () {
      return !this.behindLiveEdge();
    }, t.liveCurrentTime = function () {
      return this.pastSeekEnd() + this.seekableEnd();
    }, t.pastSeekEnd = function () {
      return this.pastSeekEnd_;
    }, t.behindLiveEdge = function () {
      return this.behindLiveEdge_;
    }, t.isTracking = function () {
      return "number" == typeof this.trackingInterval_;
    }, t.seekToLiveEdge = function () {
      this.atLiveEdge() || (this.player_.currentTime(this.liveCurrentTime()), this.player_.paused() && this.player_.play());
    }, t.dispose = function () {
      this.stopTracking(), r.prototype.dispose.call(this);
    }, e;
  }(Fe);Fe.registerComponent("LiveTracker", Dr);var Rr = function Rr(e) {
    var t = e.el();if (t.hasAttribute("src")) return e.triggerSourceset(t.src), !0;var n = e.$$("source"),
        i = [],
        r = "";if (!n.length) return !1;for (var s = 0; s < n.length; s++) {
      var o = n[s].src;o && -1 === i.indexOf(o) && i.push(o);
    }return !!i.length && (1 === i.length && (r = i[0]), e.triggerSourceset(r), !0);
  },
      Br = Object.defineProperty({}, "innerHTML", { get: function get() {
      return this.cloneNode(!0).innerHTML;
    }, set: function set(e) {
      var t = d.createElement(this.nodeName.toLowerCase());t.innerHTML = e;for (var n = d.createDocumentFragment(); t.childNodes.length;) {
        n.appendChild(t.childNodes[0]);
      }return this.innerText = "", h.Element.prototype.appendChild.call(this, n), this.innerHTML;
    } }),
      Fr = function Fr(e, t) {
    for (var n = {}, i = 0; i < e.length && !((n = Object.getOwnPropertyDescriptor(e[i], t)) && n.set && n.get); i++) {}return n.enumerable = !0, n.configurable = !0, n;
  },
      Hr = function Hr(s) {
    var o = s.el();if (!o.resetSourceWatch_) {
      var t = {},
          e = Fr([s.el(), h.HTMLMediaElement.prototype, h.Element.prototype, Br], "innerHTML"),
          n = function n(r) {
        return function () {
          for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
            t[n] = arguments[n];
          }var i = r.apply(o, t);return Rr(s), i;
        };
      };["append", "appendChild", "insertAdjacentHTML"].forEach(function (e) {
        o[e] && (t[e] = o[e], o[e] = n(t[e]));
      }), Object.defineProperty(o, "innerHTML", Be(e, { set: n(e.set) })), o.resetSourceWatch_ = function () {
        o.resetSourceWatch_ = null, Object.keys(t).forEach(function (e) {
          o[e] = t[e];
        }), Object.defineProperty(o, "innerHTML", e);
      }, s.one("sourceset", o.resetSourceWatch_);
    }
  },
      Vr = Object.defineProperty({}, "src", { get: function get() {
      return this.hasAttribute("src") ? $t(h.Element.prototype.getAttribute.call(this, "src")) : "";
    }, set: function set(e) {
      return h.Element.prototype.setAttribute.call(this, "src", e), e;
    } }),
      zr = function zr(i) {
    if (i.featuresSourceset) {
      var r = i.el();if (!r.resetSourceset_) {
        var n = Fr([i.el(), h.HTMLMediaElement.prototype, Vr], "src"),
            s = r.setAttribute,
            t = r.load;Object.defineProperty(r, "src", Be(n, { set: function set(e) {
            var t = n.set.call(r, e);return i.triggerSourceset(r.src), t;
          } })), r.setAttribute = function (e, t) {
          var n = s.call(r, e, t);return (/src/i.test(e) && i.triggerSourceset(r.src), n
          );
        }, r.load = function () {
          var e = t.call(r);return Rr(i) || (i.triggerSourceset(""), Hr(i)), e;
        }, r.currentSrc ? i.triggerSourceset(r.currentSrc) : Rr(i) || Hr(i), r.resetSourceset_ = function () {
          r.resetSourceset_ = null, r.load = t, r.setAttribute = s, Object.defineProperty(r, "src", n), r.resetSourceWatch_ && r.resetSourceWatch_();
        };
      }
    }
  };function Wr() {
    var e = t(["Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\n            This may prevent text tracks from loading."]);return Wr = function Wr() {
      return e;
    }, e;
  }var Kr = function (u) {
    function a(e, t) {
      var n;n = u.call(this, e, t) || this;var i = e.source,
          r = !1;if (i && (n.el_.currentSrc !== i.src || e.tag && 3 === e.tag.initNetworkState_) ? n.setSource(i) : n.handleLateInit_(n.el_), e.enableSourceset && n.setupSourcesetHandling_(), n.el_.hasChildNodes()) {
        for (var s = n.el_.childNodes, o = s.length, a = []; o--;) {
          var l = s[o];"track" === l.nodeName.toLowerCase() && (n.featuresNativeTextTracks ? (n.remoteTextTrackEls().addTrackElement_(l), n.remoteTextTracks().addTrack(l.track), n.textTracks().addTrack(l.track), r || n.el_.hasAttribute("crossorigin") || !Gt(l.src) || (r = !0)) : a.push(l));
        }for (var c = 0; c < a.length; c++) {
          n.el_.removeChild(a[c]);
        }
      }return n.proxyNativeTracks_(), n.featuresNativeTextTracks && r && g.warn(m(Wr())), n.restoreMetadataTracksInIOSNativePlayer_(), (lt || $e || et) && !0 === e.nativeControlsForTouch && n.setControls(!0), n.proxyWebkitFullscreen_(), n.triggerReady(), n;
    }f(a, u);var e = a.prototype;return e.dispose = function () {
      this.el_ && this.el_.resetSourceset_ && this.el_.resetSourceset_(), a.disposeMediaElement(this.el_), this.options_ = null, u.prototype.dispose.call(this);
    }, e.setupSourcesetHandling_ = function () {
      zr(this);
    }, e.restoreMetadataTracksInIOSNativePlayer_ = function () {
      var i,
          r = this.textTracks(),
          e = function e() {
        i = [];for (var e = 0; e < r.length; e++) {
          var t = r[e];"metadata" === t.kind && i.push({ track: t, storedMode: t.mode });
        }
      };e(), r.addEventListener("change", e), this.on("dispose", function () {
        return r.removeEventListener("change", e);
      });var t = function e() {
        for (var t = 0; t < i.length; t++) {
          var n = i[t];"disabled" === n.track.mode && n.track.mode !== n.storedMode && (n.track.mode = n.storedMode);
        }r.removeEventListener("change", e);
      };this.on("webkitbeginfullscreen", function () {
        r.removeEventListener("change", e), r.removeEventListener("change", t), r.addEventListener("change", t);
      }), this.on("webkitendfullscreen", function () {
        r.removeEventListener("change", e), r.addEventListener("change", e), r.removeEventListener("change", t);
      });
    }, e.overrideNative_ = function (e, t) {
      var n = this;if (t === this["featuresNative" + e + "Tracks"]) {
        var i = e.toLowerCase();this[i + "TracksListeners_"] && Object.keys(this[i + "TracksListeners_"]).forEach(function (e) {
          n.el()[i + "Tracks"].removeEventListener(e, n[i + "TracksListeners_"][e]);
        }), this["featuresNative" + e + "Tracks"] = !t, this[i + "TracksListeners_"] = null, this.proxyNativeTracksForType_(i);
      }
    }, e.overrideNativeAudioTracks = function (e) {
      this.overrideNative_("Audio", e);
    }, e.overrideNativeVideoTracks = function (e) {
      this.overrideNative_("Video", e);
    }, e.proxyNativeTracksForType_ = function (e) {
      var i = this,
          t = Cn[e],
          r = this.el()[t.getterName],
          s = this[t.getterName]();if (this["featuresNative" + t.capitalName + "Tracks"] && r && r.addEventListener) {
        var o = { change: function change(e) {
            s.trigger({ type: "change", target: s, currentTarget: s, srcElement: s });
          }, addtrack: function addtrack(e) {
            s.addTrack(e.track);
          }, removetrack: function removetrack(e) {
            s.removeTrack(e.track);
          } },
            n = function n() {
          for (var e = [], t = 0; t < s.length; t++) {
            for (var n = !1, i = 0; i < r.length; i++) {
              if (r[i] === s[t]) {
                n = !0;break;
              }
            }n || e.push(s[t]);
          }for (; e.length;) {
            s.removeTrack(e.shift());
          }
        };this[t.getterName + "Listeners_"] = o, Object.keys(o).forEach(function (t) {
          var n = o[t];r.addEventListener(t, n), i.on("dispose", function (e) {
            return r.removeEventListener(t, n);
          });
        }), this.on("loadstart", n), this.on("dispose", function (e) {
          return i.off("loadstart", n);
        });
      }
    }, e.proxyNativeTracks_ = function () {
      var t = this;Cn.names.forEach(function (e) {
        t.proxyNativeTracksForType_(e);
      });
    }, e.createEl = function () {
      var e = this.options_.tag;if (!e || !this.options_.playerElIngest && !this.movingMediaElementInDOM) {
        if (e) {
          var t = e.cloneNode(!0);e.parentNode && e.parentNode.insertBefore(t, e), a.disposeMediaElement(e), e = t;
        } else {
          e = d.createElement("video");var n = Be({}, this.options_.tag && I(this.options_.tag));lt && !0 === this.options_.nativeControlsForTouch || delete n.controls, O(e, _(n, { id: this.options_.techId, class: "vjs-tech" }));
        }e.playerId = this.options_.playerId;
      }"undefined" != typeof this.options_.preload && R(e, "preload", this.options_.preload);for (var i = ["loop", "muted", "playsinline", "autoplay"], r = 0; r < i.length; r++) {
        var s = i[r],
            o = this.options_[s];"undefined" != typeof o && (o ? R(e, s, s) : B(e, s), e[s] = o);
      }return e;
    }, e.handleLateInit_ = function (e) {
      if (0 !== e.networkState && 3 !== e.networkState) {
        if (0 === e.readyState) {
          var t = !1,
              n = function n() {
            t = !0;
          };this.on("loadstart", n);var i = function i() {
            t || this.trigger("loadstart");
          };return this.on("loadedmetadata", i), void this.ready(function () {
            this.off("loadstart", n), this.off("loadedmetadata", i), t || this.trigger("loadstart");
          });
        }var r = ["loadstart"];r.push("loadedmetadata"), 2 <= e.readyState && r.push("loadeddata"), 3 <= e.readyState && r.push("canplay"), 4 <= e.readyState && r.push("canplaythrough"), this.ready(function () {
          r.forEach(function (e) {
            this.trigger(e);
          }, this);
        });
      }
    }, e.setCurrentTime = function (e) {
      try {
        this.el_.currentTime = e;
      } catch (e) {
        g(e, "Video is not ready. (Video.js)");
      }
    }, e.duration = function () {
      var t = this;if (this.el_.duration === 1 / 0 && Je && it && 0 === this.el_.currentTime) {
        return this.on("timeupdate", function e() {
          0 < t.el_.currentTime && (t.el_.duration === 1 / 0 && t.trigger("durationchange"), t.off("timeupdate", e));
        }), NaN;
      }return this.el_.duration || NaN;
    }, e.width = function () {
      return this.el_.offsetWidth;
    }, e.height = function () {
      return this.el_.offsetHeight;
    }, e.proxyWebkitFullscreen_ = function () {
      var e = this;if ("webkitDisplayingFullscreen" in this.el_) {
        var t = function t() {
          this.trigger("fullscreenchange", { isFullscreen: !1 });
        },
            n = function n() {
          "webkitPresentationMode" in this.el_ && "picture-in-picture" !== this.el_.webkitPresentationMode && (this.one("webkitendfullscreen", t), this.trigger("fullscreenchange", { isFullscreen: !0 }));
        };this.on("webkitbeginfullscreen", n), this.on("dispose", function () {
          e.off("webkitbeginfullscreen", n), e.off("webkitendfullscreen", t);
        });
      }
    }, e.supportsFullScreen = function () {
      if ("function" == typeof this.el_.webkitEnterFullScreen) {
        var e = h.navigator && h.navigator.userAgent || "";if (/Android/.test(e) || !/Chrome|Mac OS X 10.5/.test(e)) return !0;
      }return !1;
    }, e.enterFullScreen = function () {
      var e = this.el_;e.paused && e.networkState <= e.HAVE_METADATA ? (this.el_.play(), this.setTimeout(function () {
        e.pause(), e.webkitEnterFullScreen();
      }, 0)) : e.webkitEnterFullScreen();
    }, e.exitFullScreen = function () {
      this.el_.webkitExitFullScreen();
    }, e.src = function (e) {
      if (void 0 === e) return this.el_.src;this.setSrc(e);
    }, e.reset = function () {
      a.resetMediaElement(this.el_);
    }, e.currentSrc = function () {
      return this.currentSource_ ? this.currentSource_.src : this.el_.currentSrc;
    }, e.setControls = function (e) {
      this.el_.controls = !!e;
    }, e.addTextTrack = function (e, t, n) {
      return this.featuresNativeTextTracks ? this.el_.addTextTrack(e, t, n) : u.prototype.addTextTrack.call(this, e, t, n);
    }, e.createRemoteTextTrack = function (e) {
      if (!this.featuresNativeTextTracks) return u.prototype.createRemoteTextTrack.call(this, e);var t = d.createElement("track");return e.kind && (t.kind = e.kind), e.label && (t.label = e.label), (e.language || e.srclang) && (t.srclang = e.language || e.srclang), e.default && (t.default = e.default), e.id && (t.id = e.id), e.src && (t.src = e.src), t;
    }, e.addRemoteTextTrack = function (e, t) {
      var n = u.prototype.addRemoteTextTrack.call(this, e, t);return this.featuresNativeTextTracks && this.el().appendChild(n), n;
    }, e.removeRemoteTextTrack = function (e) {
      if (u.prototype.removeRemoteTextTrack.call(this, e), this.featuresNativeTextTracks) for (var t = this.$$("track"), n = t.length; n--;) {
        e !== t[n] && e !== t[n].track || this.el().removeChild(t[n]);
      }
    }, e.getVideoPlaybackQuality = function () {
      if ("function" == typeof this.el().getVideoPlaybackQuality) return this.el().getVideoPlaybackQuality();var e = {};return "undefined" != typeof this.el().webkitDroppedFrameCount && "undefined" != typeof this.el().webkitDecodedFrameCount && (e.droppedVideoFrames = this.el().webkitDroppedFrameCount, e.totalVideoFrames = this.el().webkitDecodedFrameCount), h.performance && "function" == typeof h.performance.now ? e.creationTime = h.performance.now() : h.performance && h.performance.timing && "number" == typeof h.performance.timing.navigationStart && (e.creationTime = h.Date.now() - h.performance.timing.navigationStart), e;
    }, a;
  }(ei);if (C()) {
    Kr.TEST_VID = d.createElement("video");var Ur = d.createElement("track");Ur.kind = "captions", Ur.srclang = "en", Ur.label = "English", Kr.TEST_VID.appendChild(Ur);
  }Kr.isSupported = function () {
    try {
      Kr.TEST_VID.volume = .5;
    } catch (e) {
      return !1;
    }return !(!Kr.TEST_VID || !Kr.TEST_VID.canPlayType);
  }, Kr.canPlayType = function (e) {
    return Kr.TEST_VID.canPlayType(e);
  }, Kr.canPlaySource = function (e, t) {
    return Kr.canPlayType(e.type);
  }, Kr.canControlVolume = function () {
    try {
      var e = Kr.TEST_VID.volume;return Kr.TEST_VID.volume = e / 2 + .1, e !== Kr.TEST_VID.volume;
    } catch (e) {
      return !1;
    }
  }, Kr.canMuteVolume = function () {
    try {
      var e = Kr.TEST_VID.muted;return Kr.TEST_VID.muted = !e, Kr.TEST_VID.muted ? R(Kr.TEST_VID, "muted", "muted") : B(Kr.TEST_VID, "muted"), e !== Kr.TEST_VID.muted;
    } catch (e) {
      return !1;
    }
  }, Kr.canControlPlaybackRate = function () {
    if (Je && it && rt < 58) return !1;try {
      var e = Kr.TEST_VID.playbackRate;return Kr.TEST_VID.playbackRate = e / 2 + .1, e !== Kr.TEST_VID.playbackRate;
    } catch (e) {
      return !1;
    }
  }, Kr.canOverrideAttributes = function () {
    try {
      var e = function e() {};Object.defineProperty(d.createElement("video"), "src", { get: e, set: e }), Object.defineProperty(d.createElement("audio"), "src", { get: e, set: e }), Object.defineProperty(d.createElement("video"), "innerHTML", { get: e, set: e }), Object.defineProperty(d.createElement("audio"), "innerHTML", { get: e, set: e });
    } catch (e) {
      return !1;
    }return !0;
  }, Kr.supportsNativeTextTracks = function () {
    return at || Ge && it;
  }, Kr.supportsNativeVideoTracks = function () {
    return !(!Kr.TEST_VID || !Kr.TEST_VID.videoTracks);
  }, Kr.supportsNativeAudioTracks = function () {
    return !(!Kr.TEST_VID || !Kr.TEST_VID.audioTracks);
  }, Kr.Events = ["loadstart", "suspend", "abort", "error", "emptied", "stalled", "loadedmetadata", "loadeddata", "canplay", "canplaythrough", "playing", "waiting", "seeking", "seeked", "ended", "durationchange", "timeupdate", "progress", "play", "pause", "ratechange", "resize", "volumechange"], Kr.prototype.featuresVolumeControl = Kr.canControlVolume(), Kr.prototype.featuresMuteControl = Kr.canMuteVolume(), Kr.prototype.featuresPlaybackRate = Kr.canControlPlaybackRate(), Kr.prototype.featuresSourceset = Kr.canOverrideAttributes(), Kr.prototype.movingMediaElementInDOM = !Ge, Kr.prototype.featuresFullscreenResize = !0, Kr.prototype.featuresProgressEvents = !0, Kr.prototype.featuresTimeupdateEvents = !0, Kr.prototype.featuresNativeTextTracks = Kr.supportsNativeTextTracks(), Kr.prototype.featuresNativeVideoTracks = Kr.supportsNativeVideoTracks(), Kr.prototype.featuresNativeAudioTracks = Kr.supportsNativeAudioTracks();var qr = Kr.TEST_VID && Kr.TEST_VID.constructor.prototype.canPlayType,
      Xr = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;function $r() {
    var e = t(["\n        Using the tech directly can be dangerous. I hope you know what you're doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      "]);return $r = function $r() {
      return e;
    }, e;
  }Kr.patchCanPlayType = function () {
    4 <= Ze && !tt && !it && (Kr.TEST_VID.constructor.prototype.canPlayType = function (e) {
      return e && Xr.test(e) ? "maybe" : qr.call(this, e);
    });
  }, Kr.unpatchCanPlayType = function () {
    var e = Kr.TEST_VID.constructor.prototype.canPlayType;return Kr.TEST_VID.constructor.prototype.canPlayType = qr, e;
  }, Kr.patchCanPlayType(), Kr.disposeMediaElement = function (e) {
    if (e) {
      for (e.parentNode && e.parentNode.removeChild(e); e.hasChildNodes();) {
        e.removeChild(e.firstChild);
      }e.removeAttribute("src"), "function" == typeof e.load && function () {
        try {
          e.load();
        } catch (e) {}
      }();
    }
  }, Kr.resetMediaElement = function (e) {
    if (e) {
      for (var t = e.querySelectorAll("source"), n = t.length; n--;) {
        e.removeChild(t[n]);
      }e.removeAttribute("src"), "function" == typeof e.load && function () {
        try {
          e.load();
        } catch (e) {}
      }();
    }
  }, ["muted", "defaultMuted", "autoplay", "controls", "loop", "playsinline"].forEach(function (e) {
    Kr.prototype[e] = function () {
      return this.el_[e] || this.el_.hasAttribute(e);
    };
  }), ["muted", "defaultMuted", "autoplay", "loop", "playsinline"].forEach(function (t) {
    Kr.prototype["set" + Re(t)] = function (e) {
      (this.el_[t] = e) ? this.el_.setAttribute(t, t) : this.el_.removeAttribute(t);
    };
  }), ["paused", "currentTime", "buffered", "volume", "poster", "preload", "error", "seeking", "seekable", "ended", "playbackRate", "defaultPlaybackRate", "played", "networkState", "readyState", "videoWidth", "videoHeight"].forEach(function (e) {
    Kr.prototype[e] = function () {
      return this.el_[e];
    };
  }), ["volume", "src", "poster", "preload", "playbackRate", "defaultPlaybackRate"].forEach(function (t) {
    Kr.prototype["set" + Re(t)] = function (e) {
      this.el_[t] = e;
    };
  }), ["pause", "load", "play"].forEach(function (e) {
    Kr.prototype[e] = function () {
      return this.el_[e]();
    };
  }), ei.withSourceHandlers(Kr), Kr.nativeSourceHandler = {}, Kr.nativeSourceHandler.canPlayType = function (e) {
    try {
      return Kr.TEST_VID.canPlayType(e);
    } catch (e) {
      return "";
    }
  }, Kr.nativeSourceHandler.canHandleSource = function (e, t) {
    if (e.type) return Kr.nativeSourceHandler.canPlayType(e.type);if (e.src) {
      var n = Yt(e.src);return Kr.nativeSourceHandler.canPlayType("video/" + n);
    }return "";
  }, Kr.nativeSourceHandler.handleSource = function (e, t, n) {
    t.setSrc(e.src);
  }, Kr.nativeSourceHandler.dispose = function () {}, Kr.registerSourceHandler(Kr.nativeSourceHandler), ei.registerTech("Html5", Kr);var Yr = ["progress", "abort", "suspend", "emptied", "stalled", "loadedmetadata", "loadeddata", "timeupdate", "resize", "volumechange", "texttrackchange"],
      Gr = { canplay: "CanPlay", canplaythrough: "CanPlayThrough", playing: "Playing", seeked: "Seeked" },
      Qr = ["tiny", "xsmall", "small", "medium", "large", "xlarge", "huge"],
      Jr = {};Qr.forEach(function (e) {
    var t = "x" === e.charAt(0) ? "x-" + e.substring(1) : e;Jr[e] = "vjs-layout-" + t;
  });var Zr = { tiny: 210, xsmall: 320, small: 425, medium: 768, large: 1440, xlarge: 2560, huge: 1 / 0 },
      es = function (u) {
    function c(e, t, n) {
      var i;if (e.id = e.id || t.id || "vjs_video_" + ee(), (t = _(c.getTagSettings(e), t)).initChildren = !1, t.createEl = !1, t.evented = !1, t.reportTouchActivity = !1, !t.language) if ("function" == typeof e.closest) {
        var r = e.closest("[lang]");r && r.getAttribute && (t.language = r.getAttribute("lang"));
      } else for (var s = e; s && 1 === s.nodeType;) {
        if (I(s).hasOwnProperty("lang")) {
          t.language = s.getAttribute("lang");break;
        }s = s.parentNode;
      }if ((i = u.call(this, null, t, n) || this).boundDocumentFullscreenChange_ = Ce(v(v(i)), i.documentFullscreenChange_), i.boundFullWindowOnEscKey_ = Ce(v(v(i)), i.fullWindowOnEscKey), i.boundHandleKeyPress_ = Ce(v(v(i)), i.handleKeyPress), i.log = y(i.id_), i.isPosterFromTech_ = !1, i.queuedCallbacks_ = [], i.isReady_ = !1, i.hasStarted_ = !1, i.userActive_ = !1, !i.options_ || !i.options_.techOrder || !i.options_.techOrder.length) throw new Error("No techOrder specified. Did you overwrite videojs.options instead of just changing the properties you want to override?");if (i.tag = e, i.tagAttributes = e && I(e), i.language(i.options_.language), t.languages) {
        var o = {};Object.getOwnPropertyNames(t.languages).forEach(function (e) {
          o[e.toLowerCase()] = t.languages[e];
        }), i.languages_ = o;
      } else i.languages_ = c.prototype.options_.languages;i.resetCache_(), i.poster_ = t.poster || "", i.controls_ = !!t.controls, e.controls = !1, e.removeAttribute("controls"), i.changingSrc_ = !1, i.playCallbacks_ = [], i.playTerminatedQueue_ = [], e.hasAttribute("autoplay") ? i.autoplay(!0) : i.autoplay(i.options_.autoplay), t.plugins && Object.keys(t.plugins).forEach(function (e) {
        if ("function" != typeof i[e]) throw new Error('plugin "' + e + '" does not exist');
      }), i.scrubbing_ = !1, i.el_ = i.createEl(), Oe(v(v(i)), { eventBusKey: "el_" }), i.fluid_ && i.on("playerreset", i.updateStyleEl_);var a = Be(i.options_);t.plugins && Object.keys(t.plugins).forEach(function (e) {
        i[e](t.plugins[e]);
      }), i.options_.playerOptions = a, i.middleware_ = [], i.initChildren(), i.isAudio("audio" === e.nodeName.toLowerCase()), i.controls() ? i.addClass("vjs-controls-enabled") : i.addClass("vjs-controls-disabled"), i.el_.setAttribute("role", "region"), i.isAudio() ? i.el_.setAttribute("aria-label", i.localize("Audio Player")) : i.el_.setAttribute("aria-label", i.localize("Video Player")), i.isAudio() && i.addClass("vjs-audio"), i.flexNotSupported_() && i.addClass("vjs-no-flex"), lt && i.addClass("vjs-touch-enabled"), Ge || i.addClass("vjs-workinghover"), c.players[i.id_] = v(v(i));var l = p.split(".")[0];return i.addClass("vjs-v" + l), i.userActive(!0), i.reportUserActivity(), i.one("play", i.listenForUserActivity_), i.on("focus", i.handleFocus), i.on("blur", i.handleBlur), i.on("stageclick", i.handleStageClick_), i.breakpoints(i.options_.breakpoints), i.responsive(i.options_.responsive), i;
    }f(c, u);var e = c.prototype;return e.dispose = function () {
      var i = this;this.trigger("dispose"), this.off("dispose"), de(d, vt.fullscreenchange, this.boundDocumentFullscreenChange_), de(d, "keydown", this.boundFullWindowOnEscKey_), de(d, "keydown", this.boundHandleKeyPress_), this.styleEl_ && this.styleEl_.parentNode && (this.styleEl_.parentNode.removeChild(this.styleEl_), this.styleEl_ = null), c.players[this.id_] = null, this.tag && this.tag.player && (this.tag.player = null), this.el_ && this.el_.player && (this.el_.player = null), this.tech_ && (this.tech_.dispose(), this.isPosterFromTech_ = !1, this.poster_ = ""), this.playerElIngest_ && (this.playerElIngest_ = null), this.tag && (this.tag = null), ni[this.id()] = null, wn.names.forEach(function (e) {
        var t = wn[e],
            n = i[t.getterName]();n && n.off && n.off();
      }), u.prototype.dispose.call(this);
    }, e.createEl = function () {
      var t,
          n = this.tag,
          e = this.playerElIngest_ = n.parentNode && n.parentNode.hasAttribute && n.parentNode.hasAttribute("data-vjs-player"),
          i = "video-js" === this.tag.tagName.toLowerCase();e ? t = this.el_ = n.parentNode : i || (t = this.el_ = u.prototype.createEl.call(this, "div"));var r = I(n);if (i) {
        for (t = this.el_ = n, n = this.tag = d.createElement("video"); t.children.length;) {
          n.appendChild(t.firstChild);
        }P(t, "video-js") || L(t, "video-js"), t.appendChild(n), e = this.playerElIngest_ = t, Object.keys(t).forEach(function (e) {
          n[e] = t[e];
        });
      }if (n.setAttribute("tabindex", "-1"), r.tabindex = "-1", st && (n.setAttribute("role", "application"), r.role = "application"), n.removeAttribute("width"), n.removeAttribute("height"), "width" in r && delete r.width, "height" in r && delete r.height, Object.getOwnPropertyNames(r).forEach(function (e) {
        i && "class" === e || t.setAttribute(e, r[e]), i && n.setAttribute(e, r[e]);
      }), n.playerId = n.id, n.id += "_html5_api", n.className = "vjs-tech", n.player = t.player = this, this.addClass("vjs-paused"), !0 !== h.VIDEOJS_NO_DYNAMIC_STYLE) {
        this.styleEl_ = Te("vjs-styles-dimensions");var s = G(".vjs-styles-defaults"),
            o = G("head");o.insertBefore(this.styleEl_, s ? s.nextSibling : o.firstChild);
      }this.fill_ = !1, this.fluid_ = !1, this.width(this.options_.width), this.height(this.options_.height), this.fill(this.options_.fill), this.fluid(this.options_.fluid), this.aspectRatio(this.options_.aspectRatio);for (var a = n.getElementsByTagName("a"), l = 0; l < a.length; l++) {
        var c = a.item(l);L(c, "vjs-hidden"), c.setAttribute("hidden", "hidden");
      }return n.initNetworkState_ = n.networkState, n.parentNode && !e && n.parentNode.insertBefore(t, n), A(n, t), this.children_.unshift(n), this.el_.setAttribute("lang", this.language_), this.el_ = t;
    }, e.width = function (e) {
      return this.dimension("width", e);
    }, e.height = function (e) {
      return this.dimension("height", e);
    }, e.dimension = function (e, t) {
      var n = e + "_";if (void 0 === t) return this[n] || 0;if ("" === t) return this[n] = void 0, void this.updateStyleEl_();var i = parseFloat(t);isNaN(i) ? g.error('Improper value "' + t + '" supplied for for ' + e) : (this[n] = i, this.updateStyleEl_());
    }, e.fluid = function (e) {
      if (void 0 === e) return !!this.fluid_;var t, n;this.fluid_ = !!e, Se(this) && this.off("playerreset", this.updateStyleEl_), e ? (this.addClass("vjs-fluid"), this.fill(!1), Se(t = function t() {
        this.on("playerreset", this.updateStyleEl_);
      }) ? n() : (t.eventedCallbacks || (t.eventedCallbacks = []), t.eventedCallbacks.push(n))) : this.removeClass("vjs-fluid"), this.updateStyleEl_();
    }, e.fill = function (e) {
      if (void 0 === e) return !!this.fill_;this.fill_ = !!e, e ? (this.addClass("vjs-fill"), this.fluid(!1)) : this.removeClass("vjs-fill");
    }, e.aspectRatio = function (e) {
      if (void 0 === e) return this.aspectRatio_;if (!/^\d+\:\d+$/.test(e)) throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");this.aspectRatio_ = e, this.fluid(!0), this.updateStyleEl_();
    }, e.updateStyleEl_ = function () {
      if (!0 !== h.VIDEOJS_NO_DYNAMIC_STYLE) {
        var e,
            t,
            n,
            i = (void 0 !== this.aspectRatio_ && "auto" !== this.aspectRatio_ ? this.aspectRatio_ : 0 < this.videoWidth() ? this.videoWidth() + ":" + this.videoHeight() : "16:9").split(":"),
            r = i[1] / i[0];e = void 0 !== this.width_ ? this.width_ : void 0 !== this.height_ ? this.height_ / r : this.videoWidth() || 300, t = void 0 !== this.height_ ? this.height_ : e * r, n = /^[^a-zA-Z]/.test(this.id()) ? "dimensions-" + this.id() : this.id() + "-dimensions", this.addClass(n), ke(this.styleEl_, "\n      ." + n + " {\n        width: " + e + "px;\n        height: " + t + "px;\n      }\n\n      ." + n + ".vjs-fluid {\n        padding-top: " + 100 * r + "%;\n      }\n    ");
      } else {
        var s = "number" == typeof this.width_ ? this.width_ : this.options_.width,
            o = "number" == typeof this.height_ ? this.height_ : this.options_.height,
            a = this.tech_ && this.tech_.el();a && (0 <= s && (a.width = s), 0 <= o && (a.height = o));
      }
    }, e.loadTech_ = function (e, t) {
      var n = this;this.tech_ && this.unloadTech_();var i = Re(e),
          r = e.charAt(0).toLowerCase() + e.slice(1);"Html5" !== i && this.tag && (ei.getTech("Html5").disposeMediaElement(this.tag), this.tag.player = null, this.tag = null), this.techName_ = i, this.isReady_ = !1;var s = { source: t, autoplay: "string" != typeof this.autoplay() && this.autoplay(), nativeControlsForTouch: this.options_.nativeControlsForTouch, playerId: this.id(), techId: this.id() + "_" + r + "_api", playsinline: this.options_.playsinline, preload: this.options_.preload, loop: this.options_.loop, muted: this.options_.muted, poster: this.poster(), language: this.language(), playerElIngest: this.playerElIngest_ || !1, "vtt.js": this.options_["vtt.js"], canOverridePoster: !!this.options_.techCanOverridePoster, enableSourceset: this.options_.enableSourceset };wn.names.forEach(function (e) {
        var t = wn[e];s[t.getterName] = n[t.privateName];
      }), _(s, this.options_[i]), _(s, this.options_[r]), _(s, this.options_[e.toLowerCase()]), this.tag && (s.tag = this.tag), t && t.src === this.cache_.src && 0 < this.cache_.currentTime && (s.startTime = this.cache_.currentTime);var o = ei.getTech(e);if (!o) throw new Error("No Tech named '" + i + "' exists! '" + i + "' should be registered using videojs.registerTech()'");this.tech_ = new o(s), this.tech_.ready(Ce(this, this.handleTechReady_), !0), jt(this.textTracksJson_ || [], this.tech_), Yr.forEach(function (e) {
        n.on(n.tech_, e, n["handleTech" + Re(e) + "_"]);
      }), Object.keys(Gr).forEach(function (t) {
        n.on(n.tech_, t, function (e) {
          0 === n.tech_.playbackRate() && n.tech_.seeking() ? n.queuedCallbacks_.push({ callback: n["handleTech" + Gr[t] + "_"].bind(n), event: e }) : n["handleTech" + Gr[t] + "_"](e);
        });
      }), this.on(this.tech_, "loadstart", this.handleTechLoadStart_), this.on(this.tech_, "sourceset", this.handleTechSourceset_), this.on(this.tech_, "waiting", this.handleTechWaiting_), this.on(this.tech_, "ended", this.handleTechEnded_), this.on(this.tech_, "seeking", this.handleTechSeeking_), this.on(this.tech_, "play", this.handleTechPlay_), this.on(this.tech_, "firstplay", this.handleTechFirstPlay_), this.on(this.tech_, "pause", this.handleTechPause_), this.on(this.tech_, "durationchange", this.handleTechDurationChange_), this.on(this.tech_, "fullscreenchange", this.handleTechFullscreenChange_), this.on(this.tech_, "error", this.handleTechError_), this.on(this.tech_, "loadedmetadata", this.updateStyleEl_), this.on(this.tech_, "posterchange", this.handleTechPosterChange_), this.on(this.tech_, "textdata", this.handleTechTextData_), this.on(this.tech_, "ratechange", this.handleTechRateChange_), this.usingNativeControls(this.techGet_("controls")), this.controls() && !this.usingNativeControls() && this.addTechControlsListeners_(), this.tech_.el().parentNode === this.el() || "Html5" === i && this.tag || A(this.tech_.el(), this.el()), this.tag && (this.tag.player = null, this.tag = null);
    }, e.unloadTech_ = function () {
      var n = this;wn.names.forEach(function (e) {
        var t = wn[e];n[t.privateName] = n[t.getterName]();
      }), this.textTracksJson_ = xt(this.tech_), this.isReady_ = !1, this.tech_.dispose(), this.tech_ = !1, this.isPosterFromTech_ && (this.poster_ = "", this.trigger("posterchange")), this.isPosterFromTech_ = !1;
    }, e.tech = function (e) {
      return void 0 === e && g.warn(m($r())), this.tech_;
    }, e.addTechControlsListeners_ = function () {
      this.removeTechControlsListeners_(), this.on(this.tech_, "mousedown", this.handleTechClick_), this.on(this.tech_, "dblclick", this.handleTechDoubleClick_), this.on(this.tech_, "touchstart", this.handleTechTouchStart_), this.on(this.tech_, "touchmove", this.handleTechTouchMove_), this.on(this.tech_, "touchend", this.handleTechTouchEnd_), this.on(this.tech_, "tap", this.handleTechTap_);
    }, e.removeTechControlsListeners_ = function () {
      this.off(this.tech_, "tap", this.handleTechTap_), this.off(this.tech_, "touchstart", this.handleTechTouchStart_), this.off(this.tech_, "touchmove", this.handleTechTouchMove_), this.off(this.tech_, "touchend", this.handleTechTouchEnd_), this.off(this.tech_, "mousedown", this.handleTechClick_), this.off(this.tech_, "dblclick", this.handleTechDoubleClick_);
    }, e.handleTechReady_ = function () {
      this.triggerReady(), this.cache_.volume && this.techCall_("setVolume", this.cache_.volume), this.handleTechPosterChange_(), this.handleTechDurationChange_();
    }, e.handleTechLoadStart_ = function () {
      this.removeClass("vjs-ended"), this.removeClass("vjs-seeking"), this.error(null), this.handleTechDurationChange_(), this.paused() ? (this.hasStarted(!1), this.trigger("loadstart")) : (this.trigger("loadstart"), this.trigger("firstplay")), this.manualAutoplay_(this.autoplay());
    }, e.manualAutoplay_ = function (t) {
      var i = this;if (this.tech_ && "string" == typeof t) {
        var e,
            n = function n() {
          var e = i.muted();i.muted(!0);var t = function t() {
            i.muted(e);
          };i.playTerminatedQueue_.push(t);var n = i.play();if (Et(n)) return n.catch(t);
        };if ("any" === t && !0 !== this.muted() ? Et(e = this.play()) && (e = e.catch(n)) : e = "muted" === t && !0 !== this.muted() ? n() : this.play(), Et(e)) return e.then(function () {
          i.trigger({ type: "autoplay-success", autoplay: t });
        }).catch(function (e) {
          i.trigger({ type: "autoplay-failure", autoplay: t });
        });
      }
    }, e.updateSourceCaches_ = function (e) {
      void 0 === e && (e = "");var t = e,
          n = "";"string" != typeof t && (t = e.src, n = e.type), this.cache_.source = this.cache_.source || {}, this.cache_.sources = this.cache_.sources || [], t && !n && (n = function (e, t) {
        if (!t) return "";if (e.cache_.source.src === t && e.cache_.source.type) return e.cache_.source.type;var n = e.cache_.sources.filter(function (e) {
          return e.src === t;
        });if (n.length) return n[0].type;for (var i = e.$$("source"), r = 0; r < i.length; r++) {
          var s = i[r];if (s.type && s.src && s.src === t) return s.type;
        }return di(t);
      }(this, t)), this.cache_.source = Be({}, e, { src: t, type: n });for (var i = this.cache_.sources.filter(function (e) {
        return e.src && e.src === t;
      }), r = [], s = this.$$("source"), o = [], a = 0; a < s.length; a++) {
        var l = I(s[a]);r.push(l), l.src && l.src === t && o.push(l.src);
      }o.length && !i.length ? this.cache_.sources = r : i.length || (this.cache_.sources = [this.cache_.source]), this.cache_.src = t;
    }, e.handleTechSourceset_ = function (e) {
      var i = this;if (!this.changingSrc_) {
        var t = function t(e) {
          return i.updateSourceCaches_(e);
        },
            n = this.currentSource().src,
            r = e.src;if (n && !/^blob:/.test(n) && /^blob:/.test(r) && (!this.lastSource_ || this.lastSource_.tech !== r && this.lastSource_.player !== n) && (t = function t() {}), t(r), !e.src) {
          this.tech_.one(["sourceset", "loadstart"], function e(t) {
            if ("sourceset" !== t.type) {
              var n = i.techGet("currentSrc");i.lastSource_.tech = n, i.updateSourceCaches_(n);
            }i.tech_.off(["sourceset", "loadstart"], e);
          });
        }
      }this.lastSource_ = { player: this.currentSource().src, tech: e.src }, this.trigger({ src: e.src, type: "sourceset" });
    }, e.hasStarted = function (e) {
      if (void 0 === e) return this.hasStarted_;e !== this.hasStarted_ && (this.hasStarted_ = e, this.hasStarted_ ? (this.addClass("vjs-has-started"), this.trigger("firstplay")) : this.removeClass("vjs-has-started"));
    }, e.handleTechPlay_ = function () {
      this.removeClass("vjs-ended"), this.removeClass("vjs-paused"), this.addClass("vjs-playing"), this.hasStarted(!0), this.trigger("play");
    }, e.handleTechRateChange_ = function () {
      0 < this.tech_.playbackRate() && 0 === this.cache_.lastPlaybackRate && (this.queuedCallbacks_.forEach(function (e) {
        return e.callback(e.event);
      }), this.queuedCallbacks_ = []), this.cache_.lastPlaybackRate = this.tech_.playbackRate(), this.trigger("ratechange");
    }, e.handleTechWaiting_ = function () {
      var t = this;this.addClass("vjs-waiting"), this.trigger("waiting");var n = this.currentTime();this.on("timeupdate", function e() {
        n !== t.currentTime() && (t.removeClass("vjs-waiting"), t.off("timeupdate", e));
      });
    }, e.handleTechCanPlay_ = function () {
      this.removeClass("vjs-waiting"), this.trigger("canplay");
    }, e.handleTechCanPlayThrough_ = function () {
      this.removeClass("vjs-waiting"), this.trigger("canplaythrough");
    }, e.handleTechPlaying_ = function () {
      this.removeClass("vjs-waiting"), this.trigger("playing");
    }, e.handleTechSeeking_ = function () {
      this.addClass("vjs-seeking"), this.trigger("seeking");
    }, e.handleTechSeeked_ = function () {
      this.removeClass("vjs-seeking"), this.removeClass("vjs-ended"), this.trigger("seeked");
    }, e.handleTechFirstPlay_ = function () {
      this.options_.starttime && (g.warn("Passing the `starttime` option to the player will be deprecated in 6.0"), this.currentTime(this.options_.starttime)), this.addClass("vjs-has-started"), this.trigger("firstplay");
    }, e.handleTechPause_ = function () {
      this.removeClass("vjs-playing"), this.addClass("vjs-paused"), this.trigger("pause");
    }, e.handleTechEnded_ = function () {
      this.addClass("vjs-ended"), this.options_.loop ? (this.currentTime(0), this.play()) : this.paused() || this.pause(), this.trigger("ended");
    }, e.handleTechDurationChange_ = function () {
      this.duration(this.techGet_("duration"));
    }, e.handleTechClick_ = function (e) {
      Y(e) && this.controls_ && (this.paused() ? wt(this.play()) : this.pause());
    }, e.handleTechDoubleClick_ = function (t) {
      this.controls_ && (Array.prototype.some.call(this.$$(".vjs-control-bar, .vjs-modal-dialog"), function (e) {
        return e.contains(t.target);
      }) || void 0 !== this.options_ && void 0 !== this.options_.userActions && void 0 !== this.options_.userActions.doubleClick && !1 === this.options_.userActions.doubleClick || (void 0 !== this.options_ && void 0 !== this.options_.userActions && "function" == typeof this.options_.userActions.doubleClick ? this.options_.userActions.doubleClick.call(this, t) : this.isFullscreen() ? this.exitFullscreen() : this.requestFullscreen()));
    }, e.handleTechTap_ = function () {
      this.userActive(!this.userActive());
    }, e.handleTechTouchStart_ = function () {
      this.userWasActive = this.userActive();
    }, e.handleTechTouchMove_ = function () {
      this.userWasActive && this.reportUserActivity();
    }, e.handleTechTouchEnd_ = function (e) {
      e.preventDefault();
    }, e.handleStageClick_ = function () {
      this.reportUserActivity();
    }, e.toggleFullscreenClass_ = function () {
      this.isFullscreen() ? this.addClass("vjs-fullscreen") : this.removeClass("vjs-fullscreen");
    }, e.documentFullscreenChange_ = function (e) {
      var t = vt;this.isFullscreen(d[t.fullscreenElement] === this.el() || this.el().matches(":" + t.fullscreen)), !1 === this.isFullscreen() && de(d, t.fullscreenchange, this.boundDocumentFullscreenChange_), mt || this.trigger("fullscreenchange");
    }, e.handleTechFullscreenChange_ = function (e, t) {
      t && this.isFullscreen(t.isFullscreen), this.trigger("fullscreenchange");
    }, e.handleTechError_ = function () {
      var e = this.tech_.error();this.error(e);
    }, e.handleTechTextData_ = function () {
      var e = null;1 < arguments.length && (e = arguments[1]), this.trigger("textdata", e);
    }, e.getCache = function () {
      return this.cache_;
    }, e.resetCache_ = function () {
      this.cache_ = { currentTime: 0, inactivityTimeout: this.options_.inactivityTimeout, duration: NaN, lastVolume: 1, lastPlaybackRate: this.defaultPlaybackRate(), media: null, src: "", source: {}, sources: [], volume: 1 };
    }, e.techCall_ = function (r, s) {
      this.ready(function () {
        if (r in ai) return e = this.middleware_, t = this.tech_, i = s, t[n = r](e.reduce(ci(n), i));if (r in li) return si(this.middleware_, this.tech_, r, s);var e, t, n, i;try {
          this.tech_ && this.tech_[r](s);
        } catch (e) {
          throw g(e), e;
        }
      }, !0);
    }, e.techGet_ = function (t) {
      if (this.tech_ && this.tech_.isReady_) {
        if (t in oi) return e = this.middleware_, n = this.tech_, i = t, e.reduceRight(ci(i), n[i]());if (t in li) return si(this.middleware_, this.tech_, t);var e, n, i;try {
          return this.tech_[t]();
        } catch (e) {
          if (void 0 === this.tech_[t]) throw g("Video.js: " + t + " method not defined for " + this.techName_ + " playback technology.", e), e;if ("TypeError" === e.name) throw g("Video.js: " + t + " unavailable on " + this.techName_ + " playback technology element.", e), this.tech_.isReady_ = !1, e;throw g(e), e;
        }
      }
    }, e.play = function () {
      var t = this,
          e = this.options_.Promise || h.Promise;return e ? new e(function (e) {
        t.play_(e);
      }) : this.play_();
    }, e.play_ = function (e) {
      var t = this;void 0 === e && (e = wt), this.playCallbacks_.push(e);var n = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc()));if (this.waitToPlay_ && (this.off(["ready", "loadstart"], this.waitToPlay_), this.waitToPlay_ = null), !this.isReady_ || !n) return this.waitToPlay_ = function (e) {
        t.play_();
      }, this.one(["ready", "loadstart"], this.waitToPlay_), void (n || !at && !Ge || this.load());var i = this.techGet_("play");null === i ? this.runPlayTerminatedQueue_() : this.runPlayCallbacks_(i);
    }, e.runPlayTerminatedQueue_ = function () {
      var e = this.playTerminatedQueue_.slice(0);this.playTerminatedQueue_ = [], e.forEach(function (e) {
        e();
      });
    }, e.runPlayCallbacks_ = function (t) {
      var e = this.playCallbacks_.slice(0);this.playCallbacks_ = [], this.playTerminatedQueue_ = [], e.forEach(function (e) {
        e(t);
      });
    }, e.pause = function () {
      this.techCall_("pause");
    }, e.paused = function () {
      return !1 !== this.techGet_("paused");
    }, e.played = function () {
      return this.techGet_("played") || dt(0, 0);
    }, e.scrubbing = function (e) {
      if ("undefined" == typeof e) return this.scrubbing_;this.scrubbing_ = !!e, e ? this.addClass("vjs-scrubbing") : this.removeClass("vjs-scrubbing");
    }, e.currentTime = function (e) {
      return "undefined" != typeof e ? (e < 0 && (e = 0), void this.techCall_("setCurrentTime", e)) : (this.cache_.currentTime = this.techGet_("currentTime") || 0, this.cache_.currentTime);
    }, e.duration = function (e) {
      if (void 0 === e) return void 0 !== this.cache_.duration ? this.cache_.duration : NaN;(e = parseFloat(e)) < 0 && (e = 1 / 0), e !== this.cache_.duration && ((this.cache_.duration = e) === 1 / 0 ? (this.addClass("vjs-live"), this.options_.liveui && this.player_.liveTracker && this.addClass("vjs-liveui")) : (this.removeClass("vjs-live"), this.removeClass("vjs-liveui")), isNaN(e) || this.trigger("durationchange"));
    }, e.remainingTime = function () {
      return this.duration() - this.currentTime();
    }, e.remainingTimeDisplay = function () {
      return Math.floor(this.duration()) - Math.floor(this.currentTime());
    }, e.buffered = function () {
      var e = this.techGet_("buffered");return e && e.length || (e = dt(0, 0)), e;
    }, e.bufferedPercent = function () {
      return pt(this.buffered(), this.duration());
    }, e.bufferedEnd = function () {
      var e = this.buffered(),
          t = this.duration(),
          n = e.end(e.length - 1);return t < n && (n = t), n;
    }, e.volume = function (e) {
      var t;return void 0 !== e ? (t = Math.max(0, Math.min(1, parseFloat(e))), this.cache_.volume = t, this.techCall_("setVolume", t), void (0 < t && this.lastVolume_(t))) : (t = parseFloat(this.techGet_("volume")), isNaN(t) ? 1 : t);
    }, e.muted = function (e) {
      if (void 0 === e) return this.techGet_("muted") || !1;this.techCall_("setMuted", e);
    }, e.defaultMuted = function (e) {
      return void 0 !== e ? this.techCall_("setDefaultMuted", e) : this.techGet_("defaultMuted") || !1;
    }, e.lastVolume_ = function (e) {
      if (void 0 === e || 0 === e) return this.cache_.lastVolume;this.cache_.lastVolume = e;
    }, e.supportsFullScreen = function () {
      return this.techGet_("supportsFullScreen") || !1;
    }, e.isFullscreen = function (e) {
      return void 0 !== e ? (this.isFullscreen_ = !!e, void this.toggleFullscreenClass_()) : !!this.isFullscreen_;
    }, e.requestFullscreen = function () {
      var e = vt;this.isFullscreen(!0), e.requestFullscreen ? (he(d, e.fullscreenchange, this.boundDocumentFullscreenChange_), this.el_[e.requestFullscreen]()) : this.tech_.supportsFullScreen() ? this.techCall_("enterFullScreen") : (this.enterFullWindow(), this.trigger("fullscreenchange"));
    }, e.exitFullscreen = function () {
      var e = vt;this.isFullscreen(!1), e.requestFullscreen ? d[e.exitFullscreen]() : this.tech_.supportsFullScreen() ? this.techCall_("exitFullScreen") : (this.exitFullWindow(), this.trigger("fullscreenchange"));
    }, e.enterFullWindow = function () {
      this.isFullWindow = !0, this.docOrigOverflow = d.documentElement.style.overflow, he(d, "keydown", this.boundFullWindowOnEscKey_), d.documentElement.style.overflow = "hidden", L(d.body, "vjs-full-window"), this.trigger("enterFullWindow");
    }, e.fullWindowOnEscKey = function (e) {
      Pt.isEventKey(e, "Esc") && (!0 === this.isFullscreen() ? this.exitFullscreen() : this.exitFullWindow());
    }, e.exitFullWindow = function () {
      this.isFullWindow = !1, de(d, "keydown", this.boundFullWindowOnEscKey_), d.documentElement.style.overflow = this.docOrigOverflow, M(d.body, "vjs-full-window"), this.trigger("exitFullWindow");
    }, e.handleFocus = function (e) {
      de(d, "keydown", this.boundHandleKeyPress_), he(d, "keydown", this.boundHandleKeyPress_);
    }, e.handleBlur = function (e) {
      de(d, "keydown", this.boundHandleKeyPress_);
    }, e.handleKeyPress = function (e) {
      this.options_.userActions && this.options_.userActions.hotkeys && !1 !== this.options_.userActions.hotkeys && ("function" == typeof this.options_.userActions.hotkeys ? this.options_.userActions.hotkeys.call(this, e) : this.handleHotkeys(e));
    }, e.handleHotkeys = function (e) {
      var t = this.options_.userActions ? this.options_.userActions.hotkeys : {},
          n = t.fullscreenKey,
          i = void 0 === n ? function (e) {
        return Pt.isEventKey(e, "f");
      } : n,
          r = t.muteKey,
          s = void 0 === r ? function (e) {
        return Pt.isEventKey(e, "m");
      } : r,
          o = t.playPauseKey,
          a = void 0 === o ? function (e) {
        return Pt.isEventKey(e, "k") || Pt.isEventKey(e, "Space");
      } : o;if (i.call(this, e)) {
        e.preventDefault();var l = Fe.getComponent("FullscreenToggle");!1 !== d[vt.fullscreenEnabled] && l.prototype.handleClick.call(this);
      } else if (s.call(this, e)) {
        e.preventDefault(), Fe.getComponent("MuteToggle").prototype.handleClick.call(this);
      } else if (a.call(this, e)) {
        e.preventDefault(), Fe.getComponent("PlayToggle").prototype.handleClick.call(this);
      }
    }, e.canPlayType = function (e) {
      for (var t, n = 0, i = this.options_.techOrder; n < i.length; n++) {
        var r = i[n],
            s = ei.getTech(r);if (s || (s = Fe.getComponent(r)), s) {
          if (s.isSupported() && (t = s.canPlayType(e))) return t;
        } else g.error('The "' + r + '" tech is undefined. Skipped browser support check for that tech.');
      }return "";
    }, e.selectSource = function (e) {
      var n,
          i = this,
          t = this.options_.techOrder.map(function (e) {
        return [e, ei.getTech(e)];
      }).filter(function (e) {
        var t = e[0],
            n = e[1];return n ? n.isSupported() : (g.error('The "' + t + '" tech is undefined. Skipped browser support check for that tech.'), !1);
      }),
          r = function r(e, n, i) {
        var r;return e.some(function (t) {
          return n.some(function (e) {
            if (r = i(t, e)) return !0;
          });
        }), r;
      },
          s = function s(e, t) {
        var n = e[0];if (e[1].canPlaySource(t, i.options_[n.toLowerCase()])) return { source: t, tech: n };
      };return (this.options_.sourceOrder ? r(e, t, (n = s, function (e, t) {
        return n(t, e);
      })) : r(t, e, s)) || !1;
    }, e.src = function (e) {
      var r = this;if ("undefined" == typeof e) return this.cache_.src || "";var s = function t(e) {
        if (Array.isArray(e)) {
          var n = [];e.forEach(function (e) {
            e = t(e), Array.isArray(e) ? n = n.concat(e) : b(e) && n.push(e);
          }), e = n;
        } else e = "string" == typeof e && e.trim() ? [pi({ src: e })] : b(e) && "string" == typeof e.src && e.src && e.src.trim() ? [pi(e)] : [];return e;
      }(e);s.length ? (this.changingSrc_ = !0, this.cache_.sources = s, this.updateSourceCaches_(s[0]), ri(this, s[0], function (e, t) {
        var n, i;if (r.middleware_ = t, r.cache_.sources = s, r.updateSourceCaches_(e), r.src_(e)) return 1 < s.length ? r.src(s.slice(1)) : (r.changingSrc_ = !1, r.setTimeout(function () {
          this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
        }, 0), void r.triggerReady());n = t, i = r.tech_, n.forEach(function (e) {
          return e.setTech && e.setTech(i);
        });
      })) : this.setTimeout(function () {
        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
      }, 0);
    }, e.src_ = function (e) {
      var t,
          n,
          i = this,
          r = this.selectSource([e]);return !r || (t = r.tech, n = this.techName_, Re(t) !== Re(n) ? (this.changingSrc_ = !0, this.loadTech_(r.tech, r.source), this.tech_.ready(function () {
        i.changingSrc_ = !1;
      })) : this.ready(function () {
        this.tech_.constructor.prototype.hasOwnProperty("setSource") ? this.techCall_("setSource", e) : this.techCall_("src", e.src), this.changingSrc_ = !1;
      }, !0), !1);
    }, e.load = function () {
      this.techCall_("load");
    }, e.reset = function () {
      var e = this,
          t = this.options_.Promise || h.Promise;this.paused() || !t ? this.doReset_() : wt(this.play().then(function () {
        return e.doReset_();
      }));
    }, e.doReset_ = function () {
      this.tech_ && this.tech_.clearTracks("text"), this.resetCache_(), this.poster(""), this.loadTech_(this.options_.techOrder[0], null), this.techCall_("reset"), this.resetControlBarUI_(), Se(this) && this.trigger("playerreset");
    }, e.resetControlBarUI_ = function () {
      this.resetProgressBar_(), this.resetPlaybackRate_(), this.resetVolumeBar_();
    }, e.resetProgressBar_ = function () {
      this.currentTime(0);var e = this.controlBar,
          t = e.durationDisplay,
          n = e.remainingTimeDisplay;t && t.updateContent(), n && n.updateContent();
    }, e.resetPlaybackRate_ = function () {
      this.playbackRate(this.defaultPlaybackRate()), this.handleTechRateChange_();
    }, e.resetVolumeBar_ = function () {
      this.volume(1), this.trigger("volumechange");
    }, e.currentSources = function () {
      var e = this.currentSource(),
          t = [];return 0 !== Object.keys(e).length && t.push(e), this.cache_.sources || t;
    }, e.currentSource = function () {
      return this.cache_.source || {};
    }, e.currentSrc = function () {
      return this.currentSource() && this.currentSource().src || "";
    }, e.currentType = function () {
      return this.currentSource() && this.currentSource().type || "";
    }, e.preload = function (e) {
      return void 0 !== e ? (this.techCall_("setPreload", e), void (this.options_.preload = e)) : this.techGet_("preload");
    }, e.autoplay = function (e) {
      if (void 0 === e) return this.options_.autoplay || !1;var t;"string" == typeof e && /(any|play|muted)/.test(e) ? (this.options_.autoplay = e, this.manualAutoplay_(e), t = !1) : this.options_.autoplay = !!e, t = "undefined" == typeof t ? this.options_.autoplay : t, this.tech_ && this.techCall_("setAutoplay", t);
    }, e.playsinline = function (e) {
      return void 0 !== e ? (this.techCall_("setPlaysinline", e), this.options_.playsinline = e, this) : this.techGet_("playsinline");
    }, e.loop = function (e) {
      return void 0 !== e ? (this.techCall_("setLoop", e), void (this.options_.loop = e)) : this.techGet_("loop");
    }, e.poster = function (e) {
      if (void 0 === e) return this.poster_;e || (e = ""), e !== this.poster_ && (this.poster_ = e, this.techCall_("setPoster", e), this.isPosterFromTech_ = !1, this.trigger("posterchange"));
    }, e.handleTechPosterChange_ = function () {
      if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {
        var e = this.tech_.poster() || "";e !== this.poster_ && (this.poster_ = e, this.isPosterFromTech_ = !0, this.trigger("posterchange"));
      }
    }, e.controls = function (e) {
      if (void 0 === e) return !!this.controls_;e = !!e, this.controls_ !== e && (this.controls_ = e, this.usingNativeControls() && this.techCall_("setControls", e), this.controls_ ? (this.removeClass("vjs-controls-disabled"), this.addClass("vjs-controls-enabled"), this.trigger("controlsenabled"), this.usingNativeControls() || this.addTechControlsListeners_()) : (this.removeClass("vjs-controls-enabled"), this.addClass("vjs-controls-disabled"), this.trigger("controlsdisabled"), this.usingNativeControls() || this.removeTechControlsListeners_()));
    }, e.usingNativeControls = function (e) {
      if (void 0 === e) return !!this.usingNativeControls_;e = !!e, this.usingNativeControls_ !== e && (this.usingNativeControls_ = e, this.usingNativeControls_ ? (this.addClass("vjs-using-native-controls"), this.trigger("usingnativecontrols")) : (this.removeClass("vjs-using-native-controls"), this.trigger("usingcustomcontrols")));
    }, e.error = function (e) {
      return void 0 === e ? this.error_ || null : null === e ? (this.error_ = e, this.removeClass("vjs-error"), void (this.errorDisplay && this.errorDisplay.close())) : (this.error_ = new Tt(e), this.addClass("vjs-error"), g.error("(CODE:" + this.error_.code + " " + Tt.errorTypes[this.error_.code] + ")", this.error_.message, this.error_), void this.trigger("error"));
    }, e.reportUserActivity = function (e) {
      this.userActivity_ = !0;
    }, e.userActive = function (e) {
      if (void 0 === e) return this.userActive_;if ((e = !!e) !== this.userActive_) {
        if (this.userActive_ = e, this.userActive_) return this.userActivity_ = !0, this.removeClass("vjs-user-inactive"), this.addClass("vjs-user-active"), void this.trigger("useractive");this.tech_ && this.tech_.one("mousemove", function (e) {
          e.stopPropagation(), e.preventDefault();
        }), this.userActivity_ = !1, this.removeClass("vjs-user-active"), this.addClass("vjs-user-inactive"), this.trigger("userinactive");
      }
    }, e.listenForUserActivity_ = function () {
      var t,
          n,
          i,
          r = Ce(this, this.reportUserActivity);this.on("mousedown", function () {
        r(), this.clearInterval(t), t = this.setInterval(r, 250);
      }), this.on("mousemove", function (e) {
        e.screenX === n && e.screenY === i || (n = e.screenX, i = e.screenY, r());
      }), this.on("mouseup", function (e) {
        r(), this.clearInterval(t);
      });var s,
          e = this.getChild("controlBar");!e || Ge || Je || (e.on("mouseenter", function (e) {
        this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout, this.player().options_.inactivityTimeout = 0;
      }), e.on("mouseleave", function (e) {
        this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;
      })), this.on("keydown", r), this.on("keyup", r), this.setInterval(function () {
        if (this.userActivity_) {
          this.userActivity_ = !1, this.userActive(!0), this.clearTimeout(s);var e = this.options_.inactivityTimeout;e <= 0 || (s = this.setTimeout(function () {
            this.userActivity_ || this.userActive(!1);
          }, e));
        }
      }, 250);
    }, e.playbackRate = function (e) {
      if (void 0 === e) return this.tech_ && this.tech_.featuresPlaybackRate ? this.cache_.lastPlaybackRate || this.techGet_("playbackRate") : 1;this.techCall_("setPlaybackRate", e);
    }, e.defaultPlaybackRate = function (e) {
      return void 0 !== e ? this.techCall_("setDefaultPlaybackRate", e) : this.tech_ && this.tech_.featuresPlaybackRate ? this.techGet_("defaultPlaybackRate") : 1;
    }, e.isAudio = function (e) {
      if (void 0 === e) return !!this.isAudio_;this.isAudio_ = !!e;
    }, e.addTextTrack = function (e, t, n) {
      if (this.tech_) return this.tech_.addTextTrack(e, t, n);
    }, e.addRemoteTextTrack = function (e, t) {
      if (this.tech_) return this.tech_.addRemoteTextTrack(e, t);
    }, e.removeRemoteTextTrack = function (e) {
      void 0 === e && (e = {});var t = e.track;if (t || (t = e), this.tech_) return this.tech_.removeRemoteTextTrack(t);
    }, e.getVideoPlaybackQuality = function () {
      return this.techGet_("getVideoPlaybackQuality");
    }, e.videoWidth = function () {
      return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
    }, e.videoHeight = function () {
      return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
    }, e.language = function (e) {
      if (void 0 === e) return this.language_;this.language_ = String(e).toLowerCase();
    }, e.languages = function () {
      return Be(c.prototype.options_.languages, this.languages_);
    }, e.toJSON = function () {
      var e = Be(this.options_),
          t = e.tracks;e.tracks = [];for (var n = 0; n < t.length; n++) {
        var i = t[n];(i = Be(i)).player = void 0, e.tracks[n] = i;
      }return e;
    }, e.createModal = function (e, t) {
      var n = this;(t = t || {}).content = e || "";var i = new Mt(this, t);return this.addChild(i), i.on("dispose", function () {
        n.removeChild(i);
      }), i.open(), i;
    }, e.updateCurrentBreakpoint_ = function () {
      if (this.responsive()) for (var e = this.currentBreakpoint(), t = this.currentWidth(), n = 0; n < Qr.length; n++) {
        var i = Qr[n];if (t <= this.breakpoints_[i]) {
          if (e === i) return;e && this.removeClass(Jr[e]), this.addClass(Jr[i]), this.breakpoint_ = i;break;
        }
      }
    }, e.removeCurrentBreakpoint_ = function () {
      var e = this.currentBreakpointClass();this.breakpoint_ = "", e && this.removeClass(e);
    }, e.breakpoints = function (e) {
      return void 0 === e || (this.breakpoint_ = "", this.breakpoints_ = _({}, Zr, e), this.updateCurrentBreakpoint_()), _(this.breakpoints_);
    }, e.responsive = function (e) {
      return void 0 === e ? this.responsive_ : (e = Boolean(e)) !== this.responsive_ ? ((this.responsive_ = e) ? (this.on("playerresize", this.updateCurrentBreakpoint_), this.updateCurrentBreakpoint_()) : (this.off("playerresize", this.updateCurrentBreakpoint_), this.removeCurrentBreakpoint_()), e) : void 0;
    }, e.currentBreakpoint = function () {
      return this.breakpoint_;
    }, e.currentBreakpointClass = function () {
      return Jr[this.breakpoint_] || "";
    }, e.loadMedia = function (e, t) {
      var n = this;if (e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e))) {
        this.reset(), this.cache_.media = Be(e);var i = this.cache_.media,
            r = i.artwork,
            s = i.poster,
            o = i.src,
            a = i.textTracks;!r && s && (this.cache_.media.artwork = [{ src: s, type: di(s) }]), o && this.src(o), s && this.poster(s), Array.isArray(a) && a.forEach(function (e) {
          return n.addRemoteTextTrack(e, !1);
        }), this.ready(t);
      }
    }, e.getMedia = function () {
      if (this.cache_.media) return Be(this.cache_.media);var e = this.poster(),
          t = { src: this.currentSources(), textTracks: Array.prototype.map.call(this.remoteTextTracks(), function (e) {
          return { kind: e.kind, label: e.label, language: e.language, src: e.src };
        }) };return e && (t.poster = e, t.artwork = [{ src: t.poster, type: di(t.poster) }]), t;
    }, c.getTagSettings = function (e) {
      var t = { sources: [], tracks: [] },
          n = I(e),
          i = n["data-setup"];if (P(e, "vjs-fill") && (n.fill = !0), P(e, "vjs-fluid") && (n.fluid = !0), null !== i) {
        var r = Ct(i || "{}"),
            s = r[0],
            o = r[1];s && g.error(s), _(n, o);
      }if (_(t, n), e.hasChildNodes()) for (var a = e.childNodes, l = 0, c = a.length; l < c; l++) {
        var u = a[l],
            h = u.nodeName.toLowerCase();"source" === h ? t.sources.push(I(u)) : "track" === h && t.tracks.push(I(u));
      }return t;
    }, e.flexNotSupported_ = function () {
      var e = d.createElement("i");return !("flexBasis" in e.style || "webkitFlexBasis" in e.style || "mozFlexBasis" in e.style || "msFlexBasis" in e.style || "msFlexOrder" in e.style);
    }, c;
  }(Fe);wn.names.forEach(function (e) {
    var t = wn[e];es.prototype[t.getterName] = function () {
      return this.tech_ ? this.tech_[t.getterName]() : (this[t.privateName] = this[t.privateName] || new t.ListClass(), this[t.privateName]);
    };
  }), es.players = {};var ts = h.navigator;es.prototype.options_ = { techOrder: ei.defaultTechOrder_, html5: {}, flash: {}, inactivityTimeout: 2e3, playbackRates: [], liveui: !1, children: ["mediaLoader", "posterImage", "textTrackDisplay", "loadingSpinner", "bigPlayButton", "liveTracker", "controlBar", "errorDisplay", "textTrackSettings", "resizeManager"], language: ts && (ts.languages && ts.languages[0] || ts.userLanguage || ts.language) || "en", languages: {}, notSupportedMessage: "No compatible source was found for this media.", breakpoints: {}, responsive: !1 }, ["ended", "seeking", "seekable", "networkState", "readyState"].forEach(function (e) {
    es.prototype[e] = function () {
      return this.techGet_(e);
    };
  }), Yr.forEach(function (e) {
    es.prototype["handleTech" + Re(e) + "_"] = function () {
      return this.trigger(e);
    };
  }), Fe.registerComponent("Player", es);var ns = "plugin",
      is = "activePlugins_",
      rs = {},
      ss = function ss(e) {
    return rs.hasOwnProperty(e);
  },
      os = function os(e) {
    return ss(e) ? rs[e] : void 0;
  },
      as = function as(e, t) {
    e[is] = e[is] || {}, e[is][t] = !0;
  },
      ls = function ls(e, t, n) {
    var i = (n ? "before" : "") + "pluginsetup";e.trigger(i, t), e.trigger(i + ":" + t.name, t);
  },
      cs = function cs(r, s) {
    return s.prototype.name = r, function () {
      ls(this, { name: r, plugin: s, instance: null }, !0);for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
        t[n] = arguments[n];
      }var i = o(s, [this].concat(t));return this[r] = function () {
        return i;
      }, ls(this, i.getEventHash()), i;
    };
  },
      us = function () {
    function s(e) {
      if (this.constructor === s) throw new Error("Plugin must be sub-classed; not directly instantiated.");this.player = e, Oe(this), delete this.trigger, De(this, this.constructor.defaultState), as(e, this.name), this.dispose = Ce(this, this.dispose), e.on("dispose", this.dispose);
    }var e = s.prototype;return e.version = function () {
      return this.constructor.VERSION;
    }, e.getEventHash = function (e) {
      return void 0 === e && (e = {}), e.name = this.name, e.plugin = this.constructor, e.instance = this, e;
    }, e.trigger = function (e, t) {
      return void 0 === t && (t = {}), pe(this.eventBusEl_, e, this.getEventHash(t));
    }, e.handleStateChanged = function (e) {}, e.dispose = function () {
      var e = this.name,
          t = this.player;this.trigger("dispose"), this.off(), t.off("dispose", this.dispose), t[is][e] = !1, this.player = this.state = null, t[e] = cs(e, rs[e]);
    }, s.isBasic = function (e) {
      var t = "string" == typeof e ? os(e) : e;return "function" == typeof t && !s.prototype.isPrototypeOf(t.prototype);
    }, s.registerPlugin = function (e, t) {
      if ("string" != typeof e) throw new Error('Illegal plugin name, "' + e + '", must be a string, was ' + (typeof e === "undefined" ? "undefined" : _typeof(e)) + ".");if (ss(e)) g.warn('A plugin named "' + e + '" already exists. You may want to avoid re-registering plugins!');else if (es.prototype.hasOwnProperty(e)) throw new Error('Illegal plugin name, "' + e + '", cannot share a name with an existing player method!');if ("function" != typeof t) throw new Error('Illegal plugin for "' + e + '", must be a function, was ' + (typeof t === "undefined" ? "undefined" : _typeof(t)) + ".");var n, i, r;return rs[e] = t, e !== ns && (s.isBasic(t) ? es.prototype[e] = (n = e, i = t, r = function r() {
        ls(this, { name: n, plugin: i, instance: null }, !0);var e = i.apply(this, arguments);return as(this, n), ls(this, { name: n, plugin: i, instance: e }), e;
      }, Object.keys(i).forEach(function (e) {
        r[e] = i[e];
      }), r) : es.prototype[e] = cs(e, t)), t;
    }, s.deregisterPlugin = function (e) {
      if (e === ns) throw new Error("Cannot de-register base plugin.");ss(e) && (delete rs[e], delete es.prototype[e]);
    }, s.getPlugins = function (e) {
      var n;return void 0 === e && (e = Object.keys(rs)), e.forEach(function (e) {
        var t = os(e);t && ((n = n || {})[e] = t);
      }), n;
    }, s.getPluginVersion = function (e) {
      var t = os(e);return t && t.VERSION || "";
    }, s;
  }();us.getPlugin = os, us.BASE_PLUGIN_NAME = ns, us.registerPlugin(ns, us), es.prototype.usingPlugin = function (e) {
    return !!this[is] && !0 === this[is][e];
  }, es.prototype.hasPlugin = function (e) {
    return !!ss(e);
  };var hs = function hs(e) {
    return 0 === e.indexOf("#") ? e.slice(1) : e;
  };function ds(e, n, t) {
    var i = ds.getPlayer(e);if (i) return n && g.warn('Player "' + e + '" is already initialised. Options will not be applied.'), t && i.ready(t), i;var r = "string" == typeof e ? G("#" + hs(e)) : e;if (!E(r)) throw new TypeError("The element or ID supplied is not valid. (videojs)");r.ownerDocument.defaultView && r.ownerDocument.body.contains(r) || g.warn("The element supplied is not included in the DOM"), n = n || {}, ds.hooks("beforesetup").forEach(function (e) {
      var t = e(r, Be(n));b(t) && !Array.isArray(t) ? n = Be(n, t) : g.error("please return an object in beforesetup hooks");
    });var s = Fe.getComponent("Player");return i = new s(r, n, t), ds.hooks("setup").forEach(function (e) {
      return e(i);
    }), i;
  }if (ds.hooks_ = {}, ds.hooks = function (e, t) {
    return ds.hooks_[e] = ds.hooks_[e] || [], t && (ds.hooks_[e] = ds.hooks_[e].concat(t)), ds.hooks_[e];
  }, ds.hook = function (e, t) {
    ds.hooks(e, t);
  }, ds.hookOnce = function (n, e) {
    ds.hooks(n, [].concat(e).map(function (t) {
      return function e() {
        return ds.removeHook(n, e), t.apply(void 0, arguments);
      };
    }));
  }, ds.removeHook = function (e, t) {
    var n = ds.hooks(e).indexOf(t);return !(n <= -1) && (ds.hooks_[e] = ds.hooks_[e].slice(), ds.hooks_[e].splice(n, 1), !0);
  }, !0 !== h.VIDEOJS_NO_DYNAMIC_STYLE && C()) {
    var ps = G(".vjs-styles-defaults");if (!ps) {
      ps = Te("vjs-styles-defaults");var fs = G("head");fs && fs.insertBefore(ps, fs.firstChild), ke(ps, "\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ");
    }
  }return _e(1, ds), ds.VERSION = p, ds.options = es.prototype.options_, ds.getPlayers = function () {
    return es.players;
  }, ds.getPlayer = function (e) {
    var t,
        n = es.players;if ("string" == typeof e) {
      var i = hs(e),
          r = n[i];if (r) return r;t = G("#" + i);
    } else t = e;if (E(t)) {
      var s = t,
          o = s.player,
          a = s.playerId;if (o || n[a]) return o || n[a];
    }
  }, ds.getAllPlayers = function () {
    return Object.keys(es.players).map(function (e) {
      return es.players[e];
    }).filter(Boolean);
  }, ds.players = es.players, ds.getComponent = Fe.getComponent, ds.registerComponent = function (e, t) {
    ei.isTech(t) && g.warn("The " + e + " tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)"), Fe.registerComponent.call(Fe, e, t);
  }, ds.getTech = ei.getTech, ds.registerTech = ei.registerTech, ds.use = function (e, t) {
    ti[e] = ti[e] || [], ti[e].push(t);
  }, Object.defineProperty(ds, "middleware", { value: {}, writeable: !1, enumerable: !0 }), Object.defineProperty(ds.middleware, "TERMINATOR", { value: ii, writeable: !1, enumerable: !0 }), ds.browser = ct, ds.TOUCH_ENABLED = lt, ds.extend = function (e, t) {
    void 0 === t && (t = {});var n = function n() {
      e.apply(this, arguments);
    },
        i = {};for (var r in "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? (t.constructor !== Object.prototype.constructor && (n = t.constructor), i = t) : "function" == typeof t && (n = t), function (e, t) {
      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (e.super_ = t);
    }(n, e), i) {
      i.hasOwnProperty(r) && (n.prototype[r] = i[r]);
    }return n;
  }, ds.mergeOptions = Be, ds.bind = Ce, ds.registerPlugin = us.registerPlugin, ds.deregisterPlugin = us.deregisterPlugin, ds.plugin = function (e, t) {
    return g.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead"), us.registerPlugin(e, t);
  }, ds.getPlugins = us.getPlugins, ds.getPlugin = us.getPlugin, ds.getPluginVersion = us.getPluginVersion, ds.addLanguage = function (e, t) {
    var n;return e = ("" + e).toLowerCase(), ds.options.languages = Be(ds.options.languages, ((n = {})[e] = t, n)), ds.options.languages[e];
  }, ds.log = g, ds.createLogger = y, ds.createTimeRange = ds.createTimeRanges = dt, ds.formatTime = Ai, ds.setFormatTime = function (e) {
    ji = e;
  }, ds.resetFormatTime = function () {
    ji = xi;
  }, ds.parseUrl = Xt, ds.isCrossOrigin = Gt, ds.EventTarget = we, ds.on = he, ds.one = fe, ds.off = de, ds.trigger = pe, ds.xhr = fn, ds.TextTrack = _n, ds.AudioTrack = bn, ds.VideoTrack = Tn, ["isEl", "isTextNode", "createEl", "hasClass", "addClass", "removeClass", "toggleClass", "setAttributes", "getAttributes", "emptyEl", "appendContent", "insertContent"].forEach(function (e) {
    ds[e] = function () {
      return g.warn("videojs." + e + "() is deprecated; use videojs.dom." + e + "() instead"), J[e].apply(null, arguments);
    };
  }), ds.computedStyle = i, ds.dom = J, ds.url = Qt, ds;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZGVvLmNvcmUubWluLmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwidmlkZW9qcyIsIndpbmRvdyIsImRvY3VtZW50IiwiaCIsImQiLCJoYXNPd25Qcm9wZXJ0eSIsImRlZmF1bHQiLCJwIiwiZiIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwicyIsInNldFByb3RvdHlwZU9mIiwibyIsIm4iLCJSZWZsZWN0IiwiY29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwiRGF0ZSIsInRvU3RyaW5nIiwiY2FsbCIsImkiLCJwdXNoIiwiYXBwbHkiLCJyIiwiRnVuY3Rpb24iLCJiaW5kIiwiYXJndW1lbnRzIiwidiIsIlJlZmVyZW5jZUVycm9yIiwic2xpY2UiLCJyYXciLCJsIiwiYSIsImxldmVscyIsIlJlZ0V4cCIsInVuc2hpZnQiLCJ0b1VwcGVyQ2FzZSIsImNvbmNhdCIsImNvbnNvbGUiLCJpbmZvIiwibG9nIiwidGVzdCIsIkFycmF5IiwiaXNBcnJheSIsImciLCJsZW5ndGgiLCJjcmVhdGVMb2dnZXIiLCJhbGwiLCJvZmYiLCJkZWJ1ZyIsIndhcm4iLCJlcnJvciIsIkRFRkFVTFQiLCJsZXZlbCIsIkVycm9yIiwiaGlzdG9yeSIsImZpbHRlciIsImNsZWFyIiwiZGlzYWJsZSIsImVuYWJsZSIsInkiLCJtIiwicmVwbGFjZSIsImIiLCJrZXlzIiwiZm9yRWFjaCIsIl8iLCJhc3NpZ24iLCJjIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInUiLCJUIiwiayIsIkMiLCJFIiwibm9kZVR5cGUiLCJ3IiwicGFyZW50IiwiUyIsInF1ZXJ5U2VsZWN0b3IiLCJ4IiwiY3JlYXRlRWxlbWVudCIsImdldE93blByb3BlcnR5TmFtZXMiLCJpbmRleE9mIiwic2V0QXR0cmlidXRlIiwiaiIsIlgiLCJ0ZXh0Q29udGVudCIsImlubmVyVGV4dCIsIkEiLCJmaXJzdENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJQIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJjbGFzc05hbWUiLCJMIiwiYWRkIiwidHJpbSIsIk0iLCJyZW1vdmUiLCJzcGxpdCIsImpvaW4iLCJOIiwiTyIsInJlbW92ZUF0dHJpYnV0ZSIsIkkiLCJhdHRyaWJ1dGVzIiwibmFtZSIsInZhbHVlIiwiRCIsImdldEF0dHJpYnV0ZSIsIlIiLCJCIiwiRiIsImJvZHkiLCJmb2N1cyIsIm9uc2VsZWN0c3RhcnQiLCJIIiwiViIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhcmVudE5vZGUiLCJoZWlnaHQiLCJwYXJzZUZsb2F0Iiwid2lkdGgiLCJ6IiwibGVmdCIsInRvcCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudExlZnQiLCJwYWdlWE9mZnNldCIsInNjcm9sbExlZnQiLCJjbGllbnRUb3AiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsIk1hdGgiLCJyb3VuZCIsIlciLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInBhZ2VZIiwicGFnZVgiLCJjaGFuZ2VkVG91Y2hlcyIsIm1heCIsIm1pbiIsIksiLCJVIiwicmVtb3ZlQ2hpbGQiLCJxIiwibWFwIiwiY3JlYXRlVGV4dE5vZGUiLCIkIiwiWSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJHIiwiUSIsIkoiLCJmcmVlemUiLCJpc1JlYWwiLCJpc0VsIiwiaXNJbkZyYW1lIiwiY3JlYXRlRWwiLCJwcmVwZW5kVG8iLCJoYXNDbGFzcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInNldEF0dHJpYnV0ZXMiLCJnZXRBdHRyaWJ1dGVzIiwiYmxvY2tUZXh0U2VsZWN0aW9uIiwidW5ibG9ja1RleHRTZWxlY3Rpb24iLCJmaW5kUG9zaXRpb24iLCJnZXRQb2ludGVyUG9zaXRpb24iLCJpc1RleHROb2RlIiwiZW1wdHlFbCIsIm5vcm1hbGl6ZUNvbnRlbnQiLCJhcHBlbmRDb250ZW50IiwiaW5zZXJ0Q29udGVudCIsImlzU2luZ2xlTGVmdENsaWNrIiwiJCQiLCJaIiwiZWUiLCJ0ZSIsIm5lIiwiZ2V0VGltZSIsImllIiwicmUiLCJzZSIsIm9lIiwiaGFuZGxlcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hlciIsImRldGFjaEV2ZW50IiwiZGlzYWJsZWQiLCJhZSIsImxlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsInJldHVyblZhbHVlIiwiZGVmYXVsdFByZXZlbnRlZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwiY2xpZW50WCIsImNsaWVudFkiLCJ3aGljaCIsImNoYXJDb2RlIiwia2V5Q29kZSIsImNlIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJhZGRFdmVudExpc3RlbmVyIiwidWUiLCJoZSIsImd1aWQiLCJ0eXBlIiwicGFzc2l2ZSIsImF0dGFjaEV2ZW50IiwiZGUiLCJzcGxpY2UiLCJwZSIsIm93bmVyRG9jdW1lbnQiLCJidWJibGVzIiwiZmUiLCJ2ZSIsImdlIiwiZml4RXZlbnQiLCJvbiIsInRyaWdnZXIiLCJvbmUiLCJ5ZSIsIm1lIiwib3B0aW9ucyIsImF1dG9TZXR1cCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiX2UiLCJwbGF5ZXIiLCJzZXRUaW1lb3V0IiwicmVhZHlTdGF0ZSIsImJlIiwiVGUiLCJrZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiQ2UiLCJFZSIsIm5vdyIsIndlIiwiYWxsb3dlZEV2ZW50c18iLCJkaXNwYXRjaEV2ZW50IiwicXVldWVUcmlnZ2VyIiwiTWFwIiwic2V0IiwiZGVsZXRlIiwiY2xlYXJUaW1lb3V0Iiwic2l6ZSIsIlNlIiwiZXZlbnRCdXNFbF8iLCJldmVyeSIsInhlIiwiamUiLCJub2RlTmFtZSIsIkFlIiwiUGUiLCJMZSIsInNoaWZ0IiwiaXNUYXJnZXRpbmdTZWxmIiwibGlzdGVuZXIiLCJNZSIsIk5lIiwiT2UiLCJldmVudEJ1c0tleSIsImV2ZW50ZWRDYWxsYmFja3MiLCJJZSIsInN0YXRlIiwic2V0U3RhdGUiLCJmcm9tIiwidG8iLCJjaGFuZ2VzIiwiRGUiLCJoYW5kbGVTdGF0ZUNoYW5nZWQiLCJSZSIsImNoYXJBdCIsIkJlIiwiRmUiLCJwbGF5IiwicGxheWVyXyIsInBhcmVudENvbXBvbmVudF8iLCJvcHRpb25zXyIsImlkXyIsImlkIiwiZWwiLCJuYW1lXyIsImVsXyIsImV2ZW50ZWQiLCJkZWZhdWx0U3RhdGUiLCJjaGlsZHJlbl8iLCJjaGlsZEluZGV4XyIsImNoaWxkTmFtZUluZGV4XyIsImluaXRDaGlsZHJlbiIsInJlYWR5IiwicmVwb3J0VG91Y2hBY3Rpdml0eSIsImVuYWJsZVRvdWNoQWN0aXZpdHkiLCJkaXNwb3NlIiwibG9jYWxpemUiLCJsYW5ndWFnZSIsImxhbmd1YWdlcyIsImNvbnRlbnRFbCIsImNvbnRlbnRFbF8iLCJjaGlsZHJlbiIsImdldENoaWxkQnlJZCIsImdldENoaWxkIiwiYWRkQ2hpbGQiLCJjb21wb25lbnRDbGFzcyIsImdldENvbXBvbmVudCIsInNvbWUiLCJvcHRzIiwiaXNUZWNoIiwicGxheWVyT3B0aW9ucyIsImJ1aWxkQ1NTQ2xhc3MiLCJpc1JlYWR5XyIsInJlYWR5UXVldWVfIiwidHJpZ2dlclJlYWR5Iiwic2hvdyIsImhpZGUiLCJsb2NrU2hvd2luZyIsInVubG9ja1Nob3dpbmciLCJkaW1lbnNpb24iLCJkaW1lbnNpb25zIiwic3R5bGUiLCJwYXJzZUludCIsImN1cnJlbnREaW1lbnNpb24iLCJnZXRQcm9wZXJ0eVZhbHVlIiwiY3VycmVudERpbWVuc2lvbnMiLCJjdXJyZW50V2lkdGgiLCJjdXJyZW50SGVpZ2h0IiwiYmx1ciIsImhhbmRsZUtleVByZXNzIiwiZW1pdFRhcEV2ZW50cyIsInRvdWNoZXMiLCJzcXJ0IiwicmVwb3J0VXNlckFjdGl2aXR5IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic3VwcG9ydHNSYWZfIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZWdpc3RlckNvbXBvbmVudCIsImlzUHJvdG90eXBlT2YiLCJjb21wb25lbnRzXyIsInBsYXllcnMiLCJCb29sZWFuIiwiSGUiLCJWZSIsInplIiwiV2UiLCJLZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIlVlIiwiZXhlYyIsInFlIiwicG9wIiwiWGUiLCIkZSIsIlllIiwiR2UiLCJRZSIsIm1hdGNoIiwiSmUiLCJaZSIsImV0IiwidHQiLCJudCIsIml0IiwicnQiLCJzdCIsIm90IiwiYXQiLCJsdCIsIm1heFRvdWNoUG9pbnRzIiwiRG9jdW1lbnRUb3VjaCIsImN0IiwiSVNfSVBBRCIsIklTX0lQSE9ORSIsIklTX0lQT0QiLCJJU19JT1MiLCJJT1NfVkVSU0lPTiIsIklTX0FORFJPSUQiLCJBTkRST0lEX1ZFUlNJT04iLCJJU19OQVRJVkVfQU5EUk9JRCIsIklTX0ZJUkVGT1giLCJJU19FREdFIiwiSVNfQ0hST01FIiwiQ0hST01FX1ZFUlNJT04iLCJJRV9WRVJTSU9OIiwiSVNfU0FGQVJJIiwiSVNfQU5ZX1NBRkFSSSIsIlRPVUNIX0VOQUJMRUQiLCJ1dCIsImh0Iiwic3RhcnQiLCJlbmQiLCJkdCIsInB0IiwiZnQiLCJ2dCIsImd0IiwieXQiLCJtdCIsIl90IiwiYnQiLCJUdCIsImNvZGUiLCJtZXNzYWdlIiwiZGVmYXVsdE1lc3NhZ2VzIiwic3RhdHVzIiwiZXJyb3JUeXBlcyIsImt0IiwiQ3QiLCJKU09OIiwicGFyc2UiLCJFdCIsInRoZW4iLCJ3dCIsIlN0IiwicmVkdWNlIiwiY3VlcyIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJ0ZXh0IiwieHQiLCJ0cmFjayIsInNyYyIsInRleHRUcmFja3MiLCJqdCIsImFkZFJlbW90ZVRleHRUcmFjayIsImFkZEN1ZSIsIkF0IiwiUHQiLCJTdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImNoYXJDb2RlQXQiLCJpc0V2ZW50S2V5IiwiY29kZXMiLCJiYWNrc3BhY2UiLCJ0YWIiLCJlbnRlciIsImN0cmwiLCJhbHQiLCJlc2MiLCJzcGFjZSIsImhvbWUiLCJ1cCIsInJpZ2h0IiwiZG93biIsImluc2VydCIsImNvbW1hbmQiLCJhbGlhc2VzIiwid2luZG93cyIsImN0bCIsImNvbnRyb2wiLCJvcHRpb24iLCJwYXVzZSIsImJyZWFrIiwiY2FwcyIsInJldHVybiIsImVzY2FwZSIsInNwYyIsInNwYWNlYmFyIiwicGd1cCIsInBnZG4iLCJpbnMiLCJkZWwiLCJjbWQiLCJmcm9tQ2hhckNvZGUiLCJuYW1lcyIsInRpdGxlIiwiTHQiLCJNdCIsIm9wZW5lZF8iLCJoYXNCZWVuT3BlbmVkXyIsImhhc0JlZW5GaWxsZWRfIiwiY2xvc2VhYmxlIiwidW5jbG9zZWFibGUiLCJjb250ZW50Iiwicm9sZSIsImRlc2NFbF8iLCJkZXNjcmlwdGlvbiIsInRhYkluZGV4IiwibGFiZWwiLCJwcmV2aW91c2x5QWN0aXZlRWxfIiwiY2xvc2UiLCJvcGVuIiwiZmlsbEFsd2F5cyIsImZpbGwiLCJ3YXNQbGF5aW5nXyIsInBhdXNlZCIsInBhdXNlT25PcGVuIiwiaGFkQ29udHJvbHNfIiwiY29udHJvbHMiLCJjb25kaXRpb25hbEZvY3VzXyIsIm9wZW5lZCIsImNvbmRpdGlvbmFsQmx1cl8iLCJ0ZW1wb3JhcnkiLCJjbG9zZWFibGVfIiwiY29udHJvbFRleHQiLCJmaWxsV2l0aCIsIm5leHRTaWJsaW5nIiwiZW1wdHkiLCJjb250ZW50XyIsImFjdGl2ZUVsZW1lbnQiLCJoYW5kbGVLZXlEb3duIiwiZm9jdXNhYmxlRWxzXyIsInNoaWZ0S2V5IiwicXVlcnlTZWxlY3RvckFsbCIsIkhUTUxBbmNob3JFbGVtZW50IiwiSFRNTEFyZWFFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwiSFRNTElucHV0RWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiSFRNTFRleHRBcmVhRWxlbWVudCIsIkhUTUxCdXR0b25FbGVtZW50IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJIVE1MT2JqZWN0RWxlbWVudCIsIkhUTUxFbWJlZEVsZW1lbnQiLCJOdCIsInRyYWNrc18iLCJhZGRUcmFjayIsInJlbW92ZVRyYWNrIiwiZ2V0VHJhY2tCeUlkIiwiT3QiLCJjaGFuZ2UiLCJhZGR0cmFjayIsInJlbW92ZXRyYWNrIiwiSXQiLCJlbmFibGVkIiwiRHQiLCJjaGFuZ2luZ18iLCJlbmFibGVkQ2hhbmdlXyIsIlJ0Iiwic2VsZWN0ZWQiLCJCdCIsInNlbGVjdGVkQ2hhbmdlXyIsIkZ0IiwicXVldWVDaGFuZ2VfIiwidHJpZ2dlclNlbGVjdGVkbGFuZ3VhZ2VjaGFuZ2UiLCJ0cmlnZ2VyU2VsZWN0ZWRsYW5ndWFnZWNoYW5nZV8iLCJraW5kIiwic2VsZWN0ZWRsYW5ndWFnZWNoYW5nZV8iLCJIdCIsInRyYWNrRWxlbWVudHNfIiwiYWRkVHJhY2tFbGVtZW50XyIsImdldFRyYWNrRWxlbWVudEJ5VHJhY2tfIiwicmVtb3ZlVHJhY2tFbGVtZW50XyIsIlZ0Iiwic2V0Q3Vlc18iLCJsZW5ndGhfIiwiY3Vlc18iLCJnZXRDdWVCeUlkIiwienQiLCJhbHRlcm5hdGl2ZSIsImNhcHRpb25zIiwibWFpbiIsInNpZ24iLCJzdWJ0aXRsZXMiLCJjb21tZW50YXJ5IiwiV3QiLCJkZXNjcmlwdGlvbnMiLCJ0cmFuc2xhdGlvbiIsIkt0IiwiY2hhcHRlcnMiLCJtZXRhZGF0YSIsIlV0IiwiaGlkZGVuIiwic2hvd2luZyIsInF0IiwiWHQiLCJocmVmIiwiaG9zdCIsInByb3RvY29sIiwiaW5uZXJIVE1MIiwibG9jYXRpb24iLCIkdCIsIll0IiwiR3QiLCJRdCIsInBhcnNlVXJsIiwiZ2V0QWJzb2x1dGVVUkwiLCJnZXRGaWxlRXh0ZW5zaW9uIiwiaXNDcm9zc09yaWdpbiIsIkp0IiwiWnQiLCJhbGVydCIsImNvbmZpcm0iLCJwcm9tcHQiLCJlbiIsInRuIiwibm4iLCJybiIsInNuIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJhbiIsImxuIiwiY24iLCJ1biIsIlR5cGVFcnJvciIsImhuIiwiZG4iLCJwbiIsImZuIiwiZ24iLCJ2biIsInVyaSIsImNhbGxiYWNrIiwieW4iLCJzdGF0dXNDb2RlIiwidXNlWERSIiwicmVzcG9uc2UiLCJyZXNwb25zZVRleHQiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVhNTCIsIm1ldGhvZCIsImhlYWRlcnMiLCJ1cmwiLCJyYXdSZXF1ZXN0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwieGhyIiwiY29ycyIsIlhEb21haW5SZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJkYXRhIiwic3luYyIsImpzb24iLCJhY2NlcHQiLCJBY2NlcHQiLCJzdHJpbmdpZnkiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJvbmxvYWQiLCJvbmVycm9yIiwib25wcm9ncmVzcyIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwid2l0aENyZWRlbnRpYWxzIiwidGltZW91dCIsImFib3J0Iiwic2V0UmVxdWVzdEhlYWRlciIsImJlZm9yZVNlbmQiLCJzZW5kIiwibW4iLCJXZWJWVFQiLCJQYXJzZXIiLCJ2dHRqcyIsIlN0cmluZ0RlY29kZXIiLCJvbmN1ZSIsIm9ucGFyc2luZ2Vycm9yIiwib25mbHVzaCIsImdyb3VwQ29sbGFwc2VkIiwiZ3JvdXBFbmQiLCJmbHVzaCIsIl9uIiwidGVjaCIsInNyY2xhbmciLCJtb2RlIiwidGVjaF8iLCJhY3RpdmVDdWVzXyIsImFjdGl2ZUN1ZXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwibG9hZGVkXyIsImN1cnJlbnRUaW1lIiwiVlRUQ3VlIiwib3JpZ2luYWxDdWVfIiwicmVtb3ZlQ3VlIiwiY3VlY2hhbmdlIiwiYm4iLCJUbiIsImtuIiwibG9hZCIsIk5PTkUiLCJMT0FESU5HIiwiTE9BREVEIiwiRVJST1IiLCJDbiIsImF1ZGlvIiwiTGlzdENsYXNzIiwiVHJhY2tDbGFzcyIsImNhcGl0YWxOYW1lIiwidmlkZW8iLCJnZXR0ZXJOYW1lIiwicHJpdmF0ZU5hbWUiLCJFbiIsInJlbW90ZVRleHQiLCJyZW1vdGVUZXh0RWwiLCJ3biIsIlNuIiwieG4iLCJqbiIsIkFuIiwidmFsdWVzIiwiUG4iLCJMbiIsIkVycm9ycyIsIkJhZFRpbWVTdGFtcCIsInN1YnN0ciIsInJlZ2lvbiIsImludGVnZXIiLCJwZXJjZW50IiwidmVydGljYWwiLCJsaW5lIiwibGluZUFsaWduIiwic25hcFRvTGluZXMiLCJhbGlnbiIsInBvc2l0aW9uIiwibWlkZGxlIiwicG9zaXRpb25BbGlnbiIsIkJhZFNpZ25hdHVyZSIsImhhcyIsIk1uIiwiTm4iLCJydWJ5IiwibGFuZyIsIk9uIiwiSW4iLCJEbiIsImxvY2FsTmFtZSIsImNyZWF0ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsIlJuIiwiQm4iLCJGbiIsIkhuIiwiY3VlIiwiY3VlRGl2IiwiY29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3R0b20iLCJkaXNwbGF5Iiwid3JpdGluZ01vZGUiLCJ1bmljb2RlQmlkaSIsImFwcGx5U3R5bGVzIiwiZGl2IiwiZGlyZWN0aW9uIiwiY2hpbGROb2RlcyIsInRhZ05hbWUiLCJ0ZXh0QWxpZ24iLCJmb250Iiwid2hpdGVTcGFjZSIsImZvcm1hdFN0eWxlIiwibW92ZSIsIlZuIiwib2Zmc2V0VG9wIiwiZ2V0Q2xpZW50UmVjdHMiLCJsaW5lSGVpZ2h0Iiwiem4iLCJ0ZXh0VHJhY2tMaXN0IiwibWVkaWFFbGVtZW50IiwiYWJzIiwiY2VpbCIsInJldmVyc2UiLCJvdmVybGFwc09wcG9zaXRlQXhpcyIsIndpdGhpbiIsIm92ZXJsYXBzQW55IiwiaW50ZXJzZWN0UGVyY2VudGFnZSIsInRvQ1NTQ29tcGF0VmFsdWVzIiwiV24iLCJvdmVybGFwcyIsImdldFNpbXBsZUJveFBvc2l0aW9uIiwiZGVjb2RlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY29udmVydEN1ZVRvRE9NVHJlZSIsInByb2Nlc3NDdWVzIiwibWFyZ2luIiwiaGFzQmVlblJlc2V0IiwiZGlzcGxheVN0YXRlIiwiYnVmZmVyIiwiZGVjb2RlciIsIlRleHREZWNvZGVyIiwicmVnaW9uTGlzdCIsInJlcG9ydE9yVGhyb3dFcnJvciIsIm9udGltZXN0YW1wbWFwIiwiTVBFR1RTIiwiTE9DQUwiLCJWVFRSZWdpb24iLCJsaW5lcyIsInJlZ2lvbkFuY2hvclgiLCJyZWdpb25BbmNob3JZIiwidmlld3BvcnRBbmNob3JYIiwidmlld3BvcnRBbmNob3JZIiwic2Nyb2xsIiwib25yZWdpb24iLCJzdHJlYW0iLCJLbiIsIlVuIiwibHIiLCJybCIsInFuIiwiWG4iLCIkbiIsImVudW1lcmFibGUiLCJwYXVzZU9uRXhpdCIsIlN5bnRheEVycm9yIiwiZ2V0Q3VlQXNIVE1MIiwiWW4iLCJHbiIsIlFuIiwiSm4iLCJabiIsInNoaW0iLCJyZXN0b3JlIiwiZWkiLCJoYXNTdGFydGVkXyIsImZlYXR1cmVzUHJvZ3Jlc3NFdmVudHMiLCJtYW51YWxQcm9ncmVzc09uIiwiZmVhdHVyZXNUaW1ldXBkYXRlRXZlbnRzIiwibWFudWFsVGltZVVwZGF0ZXNPbiIsIm5hdGl2ZUNhcHRpb25zIiwibmF0aXZlVGV4dFRyYWNrcyIsImZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcyIsImVtdWxhdGVUZXh0VHJhY2tzIiwiYXV0b1JlbW90ZVRleHRUcmFja3NfIiwiaW5pdFRyYWNrTGlzdGVuZXJzIiwibmF0aXZlQ29udHJvbHNGb3JUb3VjaCIsInRyaWdnZXJTb3VyY2VzZXQiLCJvbkR1cmF0aW9uQ2hhbmdlIiwibWFudWFsUHJvZ3Jlc3MiLCJ0cmFja1Byb2dyZXNzIiwibWFudWFsUHJvZ3Jlc3NPZmYiLCJzdG9wVHJhY2tpbmdQcm9ncmVzcyIsInByb2dyZXNzSW50ZXJ2YWwiLCJidWZmZXJlZFBlcmNlbnQiLCJidWZmZXJlZFBlcmNlbnRfIiwiZHVyYXRpb25fIiwiZHVyYXRpb24iLCJidWZmZXJlZCIsIm1hbnVhbFRpbWVVcGRhdGVzIiwidHJhY2tDdXJyZW50VGltZSIsInN0b3BUcmFja2luZ0N1cnJlbnRUaW1lIiwibWFudWFsVGltZVVwZGF0ZXNPZmYiLCJjdXJyZW50VGltZUludGVydmFsIiwibWFudWFsbHlUcmlnZ2VyZWQiLCJjbGVhclRyYWNrcyIsInJlbW92ZVJlbW90ZVRleHRUcmFjayIsImNsZWFudXBBdXRvVGV4dFRyYWNrcyIsInJlc2V0IiwiZXJyb3JfIiwicGxheWVkIiwic2V0Q3VycmVudFRpbWUiLCJhZGRXZWJWdHRTY3JpcHRfIiwicmVtb3RlVGV4dFRyYWNrcyIsImFkZFRleHRUcmFjayIsImNyZWF0ZVJlbW90ZVRleHRUcmFjayIsInJlbW90ZVRleHRUcmFja0VscyIsImdldFZpZGVvUGxheWJhY2tRdWFsaXR5Iiwic2V0UG9zdGVyIiwicGxheXNpbmxpbmUiLCJzZXRQbGF5c2lubGluZSIsIm92ZXJyaWRlTmF0aXZlQXVkaW9UcmFja3MiLCJvdmVycmlkZU5hdGl2ZVZpZGVvVHJhY2tzIiwiY2FuUGxheVR5cGUiLCJjYW5QbGF5U291cmNlIiwicmVnaXN0ZXJUZWNoIiwidGVjaHNfIiwiZGVmYXVsdFRlY2hPcmRlcl8iLCJnZXRUZWNoIiwiZmVhdHVyZXNWb2x1bWVDb250cm9sIiwiZmVhdHVyZXNNdXRlQ29udHJvbCIsImZlYXR1cmVzRnVsbHNjcmVlblJlc2l6ZSIsImZlYXR1cmVzUGxheWJhY2tSYXRlIiwiZmVhdHVyZXNTb3VyY2VzZXQiLCJ3aXRoU291cmNlSGFuZGxlcnMiLCJyZWdpc3RlclNvdXJjZUhhbmRsZXIiLCJzb3VyY2VIYW5kbGVycyIsInNlbGVjdFNvdXJjZUhhbmRsZXIiLCJjYW5IYW5kbGVTb3VyY2UiLCJzb3VyY2VIYW5kbGVyXyIsInNldFNvdXJjZSIsIm5hdGl2ZVNvdXJjZUhhbmRsZXIiLCJkaXNwb3NlU291cmNlSGFuZGxlciIsImN1cnJlbnRTb3VyY2VfIiwiaGFuZGxlU291cmNlIiwidGkiLCJuaSIsImlpIiwicmkiLCJ1aSIsInNpIiwiY2kiLCJvaSIsInNlZWthYmxlIiwiYWkiLCJsaSIsImhpIiwib3B1cyIsIm9ndiIsIm1wNCIsIm1vdiIsIm00diIsIm1rdiIsIm1wMyIsImFhYyIsIm9nYSIsIm0zdTgiLCJqcGciLCJqcGVnIiwiZ2lmIiwicG5nIiwic3ZnIiwid2VicCIsImRpIiwicGkiLCJmaSIsInNvdXJjZXMiLCJ0ZWNoT3JkZXIiLCJpc1N1cHBvcnRlZCIsImxvYWRUZWNoXyIsInZpIiwidGFiSW5kZXhfIiwiY3JlYXRlQ29udHJvbFRleHRFbCIsImNvbnRyb2xUZXh0RWxfIiwiY29udHJvbFRleHRfIiwibm9uSWNvbkNvbnRyb2wiLCJlbmFibGVkXyIsImhhbmRsZUNsaWNrIiwiaGFuZGxlRm9jdXMiLCJoYW5kbGVCbHVyIiwiZ2kiLCJ1cGRhdGUiLCJwb3N0ZXIiLCJzZXRTcmMiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJ5aSIsIm1pIiwibW9ub3NwYWNlIiwic2Fuc1NlcmlmIiwic2VyaWYiLCJtb25vc3BhY2VTYW5zU2VyaWYiLCJtb25vc3BhY2VTZXJpZiIsInByb3BvcnRpb25hbFNhbnNTZXJpZiIsInByb3BvcnRpb25hbFNlcmlmIiwiY2FzdWFsIiwic2NyaXB0Iiwic21hbGxjYXBzIiwiX2kiLCJiaSIsIlRpIiwidXBkYXRlRGlzcGxheSIsInRvZ2dsZURpc3BsYXkiLCJwcmVzZWxlY3RUcmFjayIsInRyYWNrcyIsImNhY2hlXyIsInNlbGVjdGVkTGFuZ3VhZ2UiLCJjbGVhckRpc3BsYXkiLCJ1cGRhdGVGb3JUcmFjayIsInRleHRUcmFja1NldHRpbmdzIiwiZ2V0VmFsdWVzIiwidGV4dE9wYWNpdHkiLCJiYWNrZ3JvdW5kT3BhY2l0eSIsIndpbmRvd0NvbG9yIiwid2luZG93T3BhY2l0eSIsImVkZ2VTdHlsZSIsInRleHRTaGFkb3ciLCJmb250UGVyY2VudCIsImZvbnRTaXplIiwiZm9udEZhbWlseSIsImZvbnRWYXJpYW50Iiwia2kiLCJpc0F1ZGlvIiwiZGlyIiwiQ2kiLCJFaSIsIm1vdXNldXNlZF8iLCJoYW5kbGVNb3VzZURvd24iLCJ3aSIsIlNpIiwicmVwbGF5IiwiaGFuZGxlUGxheSIsImhhbmRsZVBhdXNlIiwiaGFuZGxlRW5kZWQiLCJoYW5kbGVTZWVrZWQiLCJ4aSIsImZsb29yIiwiaXNOYU4iLCJqaSIsIkFpIiwiUGkiLCJ0aHJvdHRsZWRVcGRhdGVDb250ZW50IiwidXBkYXRlQ29udGVudCIsImxhYmVsVGV4dF8iLCJ1cGRhdGVUZXh0Tm9kZV8iLCJ0ZXh0Tm9kZV8iLCJmb3JtYXR0ZWRUaW1lXyIsImZvcm1hdFRpbWVfIiwidXBkYXRlRm9ybWF0dGVkVGltZV8iLCJMaSIsInNjcnViYmluZyIsImdldENhY2hlIiwiTWkiLCJOaSIsIk9pIiwicmVtYWluaW5nVGltZURpc3BsYXkiLCJyZW1haW5pbmdUaW1lIiwiSWkiLCJ1cGRhdGVTaG93aW5nIiwiRGkiLCJ1cGRhdGVMaXZlRWRnZVN0YXR1cyIsImxpdmVUcmFja2VyIiwidGV4dEVsXyIsImF0TGl2ZUVkZ2UiLCJzZWVrVG9MaXZlRWRnZSIsIlJpIiwiYmFyIiwiYmFyTmFtZSIsInBsYXllckV2ZW50IiwiaGFuZGxlTW91c2VNb3ZlIiwiaGFuZGxlTW91c2VVcCIsImdldFBlcmNlbnQiLCJ0b0ZpeGVkIiwiY2FsY3VsYXRlRGlzdGFuY2UiLCJzdGVwQmFjayIsInN0ZXBGb3J3YXJkIiwidmVydGljYWxfIiwiQmkiLCJwYXJ0RWxzXyIsImlzTGl2ZSIsInNlZWthYmxlRW5kIiwiYnVmZmVyZWRFbmQiLCJGaSIsInVwZGF0ZVRpbWUiLCJyYWZJZF8iLCJsaXZlV2luZG93IiwiSGkiLCJWaSIsInppIiwic2V0RXZlbnRIYW5kbGVyc18iLCJ1cGRhdGVJbnRlcnZhbCIsImVuYWJsZUludGVydmFsXyIsImRpc2FibGVJbnRlcnZhbF8iLCJ0b2dnbGVWaXNpYmlsaXR5XyIsInVwZGF0ZV8iLCJsaXZlQ3VycmVudFRpbWUiLCJvZmZzZXRQYXJlbnQiLCJnZXRDdXJyZW50VGltZV8iLCJzZWVrYWJsZVN0YXJ0IiwidmlkZW9XYXNQbGF5aW5nIiwiaGFuZGxlQWN0aW9uIiwiV2kiLCJ0aHJvdHRsZWRIYW5kbGVNb3VzZVNlZWsiLCJoYW5kbGVNb3VzZVNlZWsiLCJLaSIsImhhbmRsZUZ1bGxzY3JlZW5DaGFuZ2UiLCJmdWxsc2NyZWVuRW5hYmxlZCIsImlzRnVsbHNjcmVlbiIsImV4aXRGdWxsc2NyZWVuIiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJVaSIsInFpIiwidXBkYXRlTGFzdFZvbHVtZV8iLCJ1cGRhdGVBUklBQXR0cmlidXRlcyIsImNoZWNrTXV0ZWQiLCJ2b2x1bWUiLCJtdXRlZCIsInZvbHVtZUFzUGVyY2VudGFnZV8iLCJsYXN0Vm9sdW1lXyIsIlhpIiwidm9sdW1lQmFyIiwidGhyb3R0bGVkSGFuZGxlTW91c2VNb3ZlIiwiJGkiLCJ1cGRhdGVJY29uXyIsInVwZGF0ZUNvbnRyb2xUZXh0XyIsIllpIiwiaW5saW5lIiwidm9sdW1lQ29udHJvbCIsInZvbHVtZVBhbmVsU3RhdGVfIiwic2xpZGVyQWN0aXZlXyIsInNsaWRlckluYWN0aXZlXyIsIm11dGVUb2dnbGUiLCJHaSIsIm1lbnVCdXR0b25fIiwibWVudUJ1dHRvbiIsImZvY3VzZWRDaGlsZF8iLCJib3VuZEhhbmRsZUJsdXJfIiwiYm91bmRIYW5kbGVUYXBDbGlja18iLCJoYW5kbGVUYXBDbGljayIsImFkZEV2ZW50TGlzdGVuZXJGb3JJdGVtIiwicmVtb3ZlRXZlbnRMaXN0ZW5lckZvckl0ZW0iLCJhZGRJdGVtIiwiY29udGVudEVsVHlwZSIsImFwcGVuZCIsImJ1dHRvblByZXNzZWRfIiwidW5wcmVzc0J1dHRvbiIsIlFpIiwibWVudSIsImhhbmRsZVN1Ym1lbnVLZXlQcmVzcyIsImNyZWF0ZU1lbnUiLCJpdGVtcyIsImhpZGVUaHJlc2hvbGRfIiwiY3JlYXRlSXRlbXMiLCJidWlsZFdyYXBwZXJDU1NDbGFzcyIsInByZXNzQnV0dG9uIiwiSmkiLCJaaSIsImVyIiwic2VsZWN0YWJsZSIsImlzU2VsZWN0ZWRfIiwibXVsdGlTZWxlY3RhYmxlIiwidHIiLCJoYW5kbGVUcmFja3NDaGFuZ2UiLCJoYW5kbGVTZWxlY3RlZExhbmd1YWdlQ2hhbmdlIiwib25jaGFuZ2UiLCJFdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50Iiwia2luZHMiLCJuciIsImlyIiwibGFiZWxfIiwia2luZHNfIiwia2luZF8iLCJyciIsInNyIiwidHJhY2tfIiwic2V0VHJhY2siLCJmaW5kQ2hhcHRlcnNUcmFjayIsInVwZGF0ZUhhbmRsZXJfIiwiZ2V0TWVudUNhcHRpb24iLCJvciIsImFyIiwiY3IiLCJ1ciIsImhyIiwibGFuZ3VhZ2VfIiwiZHIiLCJhdWRpb1RyYWNrcyIsInByIiwiZnIiLCJyYXRlIiwicGxheWJhY2tSYXRlIiwidnIiLCJ1cGRhdGVWaXNpYmlsaXR5IiwidXBkYXRlTGFiZWwiLCJsYWJlbEVsXyIsInBsYXliYWNrUmF0ZXMiLCJwbGF5YmFja1JhdGVTdXBwb3J0ZWQiLCJnciIsInlyIiwibXIiLCJfciIsImJyIiwiVHIiLCJrciIsIkNyIiwiRXIiLCJ3ciIsIlNyIiwieHIiLCJqciIsIkFyIiwiUHIiLCJMciIsIk1yIiwic2VsZWN0b3IiLCJwYXJzZXIiLCJOdW1iZXIiLCJOciIsIk9yIiwiZW5kRGlhbG9nIiwic2V0RGVmYXVsdHMiLCJwZXJzaXN0VGV4dFRyYWNrU2V0dGluZ3MiLCJzYXZlU2V0dGluZ3MiLCJyZXN0b3JlU2V0dGluZ3MiLCJjcmVhdGVFbFNlbGVjdF8iLCJjcmVhdGVFbEZnQ29sb3JfIiwiY3JlYXRlRWxCZ0NvbG9yXyIsImNyZWF0ZUVsV2luQ29sb3JfIiwiY3JlYXRlRWxDb2xvcnNfIiwiY3JlYXRlRWxGb250XyIsImNyZWF0ZUVsQ29udHJvbHNfIiwic2VsZWN0ZWRJbmRleCIsInNldFZhbHVlcyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImNvbnRyb2xCYXIiLCJzdWJzQ2Fwc0J1dHRvbiIsImNhcHRpb25zQnV0dG9uIiwiSXIiLCJSZXNpemVPYnNlcnZlciIsImxvYWRMaXN0ZW5lcl8iLCJyZXNpemVPYnNlcnZlcl8iLCJkZWJvdW5jZWRIYW5kbGVyXyIsImNhbmNlbCIsInJlc2l6ZUhhbmRsZXIiLCJvYnNlcnZlIiwiY29udGVudFdpbmRvdyIsInVubG9hZExpc3RlbmVyXyIsInVub2JzZXJ2ZSIsImRpc2Nvbm5lY3QiLCJyZXNpemVPYnNlcnZlciIsIkRyIiwicmVzZXRfIiwiaGFuZGxlRHVyYXRpb25jaGFuZ2UiLCJoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlIiwic3RvcFRyYWNraW5nIiwic3RhcnRUcmFja2luZyIsImlzQmVoaW5kXyIsInRpbWV1cGRhdGVTZWVuXyIsInNlZWthYmxlSW5jcmVtZW50XyIsInRyYWNrTGl2ZV8iLCJwYXN0U2Vla0VuZF8iLCJsYXN0U2Vla0VuZF8iLCJwYXN0U2Vla0VuZCIsImJlaGluZExpdmVFZGdlIiwiYmVoaW5kTGl2ZUVkZ2VfIiwiaXNUcmFja2luZyIsInRyYWNraW5nSW50ZXJ2YWxfIiwiaGFuZGxlVGltZXVwZGF0ZSIsInNvcnQiLCJSciIsIkJyIiwiY2xvbmVOb2RlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIkVsZW1lbnQiLCJGciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIkhyIiwicmVzZXRTb3VyY2VXYXRjaF8iLCJIVE1MTWVkaWFFbGVtZW50IiwiVnIiLCJ6ciIsInJlc2V0U291cmNlc2V0XyIsImN1cnJlbnRTcmMiLCJXciIsIktyIiwic291cmNlIiwidGFnIiwiaW5pdE5ldHdvcmtTdGF0ZV8iLCJoYW5kbGVMYXRlSW5pdF8iLCJlbmFibGVTb3VyY2VzZXQiLCJzZXR1cFNvdXJjZXNldEhhbmRsaW5nXyIsImhhc0NoaWxkTm9kZXMiLCJwcm94eU5hdGl2ZVRyYWNrc18iLCJyZXN0b3JlTWV0YWRhdGFUcmFja3NJbklPU05hdGl2ZVBsYXllcl8iLCJzZXRDb250cm9scyIsInByb3h5V2Via2l0RnVsbHNjcmVlbl8iLCJkaXNwb3NlTWVkaWFFbGVtZW50Iiwic3RvcmVkTW9kZSIsIm92ZXJyaWRlTmF0aXZlXyIsInByb3h5TmF0aXZlVHJhY2tzRm9yVHlwZV8iLCJjdXJyZW50VGFyZ2V0IiwicGxheWVyRWxJbmdlc3QiLCJtb3ZpbmdNZWRpYUVsZW1lbnRJbkRPTSIsInRlY2hJZCIsImNsYXNzIiwicGxheWVySWQiLCJwcmVsb2FkIiwibmV0d29ya1N0YXRlIiwiTmFOIiwid2Via2l0UHJlc2VudGF0aW9uTW9kZSIsInN1cHBvcnRzRnVsbFNjcmVlbiIsIndlYmtpdEVudGVyRnVsbFNjcmVlbiIsImVudGVyRnVsbFNjcmVlbiIsIkhBVkVfTUVUQURBVEEiLCJleGl0RnVsbFNjcmVlbiIsIndlYmtpdEV4aXRGdWxsU2NyZWVuIiwicmVzZXRNZWRpYUVsZW1lbnQiLCJ3ZWJraXREcm9wcGVkRnJhbWVDb3VudCIsIndlYmtpdERlY29kZWRGcmFtZUNvdW50IiwiZHJvcHBlZFZpZGVvRnJhbWVzIiwidG90YWxWaWRlb0ZyYW1lcyIsInBlcmZvcm1hbmNlIiwiY3JlYXRpb25UaW1lIiwidGltaW5nIiwibmF2aWdhdGlvblN0YXJ0IiwiVEVTVF9WSUQiLCJVciIsImNhbkNvbnRyb2xWb2x1bWUiLCJjYW5NdXRlVm9sdW1lIiwiY2FuQ29udHJvbFBsYXliYWNrUmF0ZSIsImNhbk92ZXJyaWRlQXR0cmlidXRlcyIsInN1cHBvcnRzTmF0aXZlVGV4dFRyYWNrcyIsInN1cHBvcnRzTmF0aXZlVmlkZW9UcmFja3MiLCJ2aWRlb1RyYWNrcyIsInN1cHBvcnRzTmF0aXZlQXVkaW9UcmFja3MiLCJFdmVudHMiLCJmZWF0dXJlc05hdGl2ZVZpZGVvVHJhY2tzIiwiZmVhdHVyZXNOYXRpdmVBdWRpb1RyYWNrcyIsInFyIiwiWHIiLCIkciIsInBhdGNoQ2FuUGxheVR5cGUiLCJ1bnBhdGNoQ2FuUGxheVR5cGUiLCJZciIsIkdyIiwiY2FucGxheSIsImNhbnBsYXl0aHJvdWdoIiwicGxheWluZyIsInNlZWtlZCIsIlFyIiwiSnIiLCJzdWJzdHJpbmciLCJaciIsInRpbnkiLCJ4c21hbGwiLCJzbWFsbCIsIm1lZGl1bSIsImxhcmdlIiwieGxhcmdlIiwiaHVnZSIsImVzIiwiZ2V0VGFnU2V0dGluZ3MiLCJjbG9zZXN0IiwiYm91bmREb2N1bWVudEZ1bGxzY3JlZW5DaGFuZ2VfIiwiZG9jdW1lbnRGdWxsc2NyZWVuQ2hhbmdlXyIsImJvdW5kRnVsbFdpbmRvd09uRXNjS2V5XyIsImZ1bGxXaW5kb3dPbkVzY0tleSIsImJvdW5kSGFuZGxlS2V5UHJlc3NfIiwiaXNQb3N0ZXJGcm9tVGVjaF8iLCJxdWV1ZWRDYWxsYmFja3NfIiwidXNlckFjdGl2ZV8iLCJ0YWdBdHRyaWJ1dGVzIiwibGFuZ3VhZ2VzXyIsInJlc2V0Q2FjaGVfIiwicG9zdGVyXyIsImNvbnRyb2xzXyIsImNoYW5naW5nU3JjXyIsInBsYXlDYWxsYmFja3NfIiwicGxheVRlcm1pbmF0ZWRRdWV1ZV8iLCJhdXRvcGxheSIsInBsdWdpbnMiLCJzY3J1YmJpbmdfIiwiZmx1aWRfIiwidXBkYXRlU3R5bGVFbF8iLCJtaWRkbGV3YXJlXyIsImZsZXhOb3RTdXBwb3J0ZWRfIiwidXNlckFjdGl2ZSIsImxpc3RlbkZvclVzZXJBY3Rpdml0eV8iLCJoYW5kbGVTdGFnZUNsaWNrXyIsImJyZWFrcG9pbnRzIiwicmVzcG9uc2l2ZSIsImZ1bGxzY3JlZW5jaGFuZ2UiLCJzdHlsZUVsXyIsInBsYXllckVsSW5nZXN0XyIsInRhYmluZGV4IiwiVklERU9KU19OT19EWU5BTUlDX1NUWUxFIiwiZmlsbF8iLCJmbHVpZCIsImFzcGVjdFJhdGlvIiwiaXRlbSIsImFzcGVjdFJhdGlvXyIsInZpZGVvV2lkdGgiLCJ2aWRlb0hlaWdodCIsIndpZHRoXyIsImhlaWdodF8iLCJ1bmxvYWRUZWNoXyIsInRlY2hOYW1lXyIsImxvb3AiLCJjYW5PdmVycmlkZVBvc3RlciIsInRlY2hDYW5PdmVycmlkZVBvc3RlciIsImhhbmRsZVRlY2hSZWFkeV8iLCJ0ZXh0VHJhY2tzSnNvbl8iLCJzZWVraW5nIiwiaGFuZGxlVGVjaExvYWRTdGFydF8iLCJoYW5kbGVUZWNoU291cmNlc2V0XyIsImhhbmRsZVRlY2hXYWl0aW5nXyIsImhhbmRsZVRlY2hFbmRlZF8iLCJoYW5kbGVUZWNoU2Vla2luZ18iLCJoYW5kbGVUZWNoUGxheV8iLCJoYW5kbGVUZWNoRmlyc3RQbGF5XyIsImhhbmRsZVRlY2hQYXVzZV8iLCJoYW5kbGVUZWNoRHVyYXRpb25DaGFuZ2VfIiwiaGFuZGxlVGVjaEZ1bGxzY3JlZW5DaGFuZ2VfIiwiaGFuZGxlVGVjaEVycm9yXyIsImhhbmRsZVRlY2hQb3N0ZXJDaGFuZ2VfIiwiaGFuZGxlVGVjaFRleHREYXRhXyIsImhhbmRsZVRlY2hSYXRlQ2hhbmdlXyIsInVzaW5nTmF0aXZlQ29udHJvbHMiLCJ0ZWNoR2V0XyIsImFkZFRlY2hDb250cm9sc0xpc3RlbmVyc18iLCJyZW1vdmVUZWNoQ29udHJvbHNMaXN0ZW5lcnNfIiwiaGFuZGxlVGVjaENsaWNrXyIsImhhbmRsZVRlY2hEb3VibGVDbGlja18iLCJoYW5kbGVUZWNoVG91Y2hTdGFydF8iLCJoYW5kbGVUZWNoVG91Y2hNb3ZlXyIsImhhbmRsZVRlY2hUb3VjaEVuZF8iLCJoYW5kbGVUZWNoVGFwXyIsInRlY2hDYWxsXyIsImhhc1N0YXJ0ZWQiLCJtYW51YWxBdXRvcGxheV8iLCJjYXRjaCIsInVwZGF0ZVNvdXJjZUNhY2hlc18iLCJjdXJyZW50U291cmNlIiwibGFzdFNvdXJjZV8iLCJ0ZWNoR2V0IiwibGFzdFBsYXliYWNrUmF0ZSIsImhhbmRsZVRlY2hDYW5QbGF5XyIsImhhbmRsZVRlY2hDYW5QbGF5VGhyb3VnaF8iLCJoYW5kbGVUZWNoUGxheWluZ18iLCJoYW5kbGVUZWNoU2Vla2VkXyIsInN0YXJ0dGltZSIsInVzZXJBY3Rpb25zIiwiZG91YmxlQ2xpY2siLCJ1c2VyV2FzQWN0aXZlIiwidG9nZ2xlRnVsbHNjcmVlbkNsYXNzXyIsImZ1bGxzY3JlZW5FbGVtZW50IiwibWF0Y2hlcyIsImZ1bGxzY3JlZW4iLCJpbmFjdGl2aXR5VGltZW91dCIsImxhc3RWb2x1bWUiLCJkZWZhdWx0UGxheWJhY2tSYXRlIiwibWVkaWEiLCJyZWR1Y2VSaWdodCIsIlByb21pc2UiLCJwbGF5XyIsIndhaXRUb1BsYXlfIiwicnVuUGxheVRlcm1pbmF0ZWRRdWV1ZV8iLCJydW5QbGF5Q2FsbGJhY2tzXyIsImxpdmV1aSIsImRlZmF1bHRNdXRlZCIsImlzRnVsbHNjcmVlbl8iLCJlbnRlckZ1bGxXaW5kb3ciLCJleGl0RnVsbFdpbmRvdyIsImlzRnVsbFdpbmRvdyIsImRvY09yaWdPdmVyZmxvdyIsIm92ZXJmbG93IiwiaG90a2V5cyIsImhhbmRsZUhvdGtleXMiLCJmdWxsc2NyZWVuS2V5IiwibXV0ZUtleSIsInBsYXlQYXVzZUtleSIsInNlbGVjdFNvdXJjZSIsInNvdXJjZU9yZGVyIiwic3JjXyIsIm5vdFN1cHBvcnRlZE1lc3NhZ2UiLCJzZXRUZWNoIiwiZG9SZXNldF8iLCJyZXNldENvbnRyb2xCYXJVSV8iLCJyZXNldFByb2dyZXNzQmFyXyIsInJlc2V0UGxheWJhY2tSYXRlXyIsInJlc2V0Vm9sdW1lQmFyXyIsImR1cmF0aW9uRGlzcGxheSIsImN1cnJlbnRTb3VyY2VzIiwiY3VycmVudFR5cGUiLCJ1c2luZ05hdGl2ZUNvbnRyb2xzXyIsImVycm9yRGlzcGxheSIsInVzZXJBY3Rpdml0eV8iLCJzY3JlZW5YIiwic2NyZWVuWSIsImlzQXVkaW9fIiwidG9KU09OIiwiY3JlYXRlTW9kYWwiLCJ1cGRhdGVDdXJyZW50QnJlYWtwb2ludF8iLCJjdXJyZW50QnJlYWtwb2ludCIsImJyZWFrcG9pbnRzXyIsImJyZWFrcG9pbnRfIiwicmVtb3ZlQ3VycmVudEJyZWFrcG9pbnRfIiwiY3VycmVudEJyZWFrcG9pbnRDbGFzcyIsInJlc3BvbnNpdmVfIiwibG9hZE1lZGlhIiwiYXJ0d29yayIsImdldE1lZGlhIiwidHMiLCJodG1sNSIsImZsYXNoIiwidXNlckxhbmd1YWdlIiwibnMiLCJpcyIsInJzIiwic3MiLCJvcyIsImFzIiwibHMiLCJjcyIsInBsdWdpbiIsImluc3RhbmNlIiwiZ2V0RXZlbnRIYXNoIiwidXMiLCJ2ZXJzaW9uIiwiVkVSU0lPTiIsImlzQmFzaWMiLCJyZWdpc3RlclBsdWdpbiIsImRlcmVnaXN0ZXJQbHVnaW4iLCJnZXRQbHVnaW5zIiwiZ2V0UGx1Z2luVmVyc2lvbiIsImdldFBsdWdpbiIsIkJBU0VfUExVR0lOX05BTUUiLCJ1c2luZ1BsdWdpbiIsImhhc1BsdWdpbiIsImhzIiwiZHMiLCJnZXRQbGF5ZXIiLCJkZWZhdWx0VmlldyIsImhvb2tzIiwiaG9va3NfIiwiaG9vayIsImhvb2tPbmNlIiwicmVtb3ZlSG9vayIsInBzIiwiZnMiLCJnZXRQbGF5ZXJzIiwiZ2V0QWxsUGxheWVycyIsInVzZSIsIndyaXRlYWJsZSIsIm1pZGRsZXdhcmUiLCJicm93c2VyIiwiZXh0ZW5kIiwid3JpdGFibGUiLCJzdXBlcl8iLCJtZXJnZU9wdGlvbnMiLCJhZGRMYW5ndWFnZSIsImNyZWF0ZVRpbWVSYW5nZSIsImNyZWF0ZVRpbWVSYW5nZXMiLCJmb3JtYXRUaW1lIiwic2V0Rm9ybWF0VGltZSIsInJlc2V0Rm9ybWF0VGltZSIsIkV2ZW50VGFyZ2V0IiwiVGV4dFRyYWNrIiwiQXVkaW9UcmFjayIsIlZpZGVvVHJhY2siLCJjb21wdXRlZFN0eWxlIiwiZG9tIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Ozs7O0FBV0EsQ0FBQyxVQUFTQSxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLHNCQUFpQkMsT0FBakIseUNBQWlCQSxPQUFqQixNQUEwQixlQUFhLE9BQU9DLE1BQTlDLEdBQXFEQSxPQUFPRCxPQUFQLEdBQWVELEVBQUVHLFFBQVEsZUFBUixDQUFGLEVBQTJCQSxRQUFRLGlCQUFSLENBQTNCLENBQXBFLEdBQTJILGNBQVksT0FBT0MsTUFBbkIsSUFBMkJBLE9BQU9DLEdBQWxDLEdBQXNDRCxPQUFPLENBQUMsZUFBRCxFQUFpQixpQkFBakIsQ0FBUCxFQUEyQ0osQ0FBM0MsQ0FBdEMsR0FBb0YsQ0FBQ0QsSUFBRUEsS0FBR08sSUFBTixFQUFZQyxPQUFaLEdBQW9CUCxFQUFFRCxFQUFFUyxNQUFKLEVBQVdULEVBQUVVLFFBQWIsQ0FBbk87QUFBMFAsQ0FBeFEsWUFBOFEsVUFBU0MsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUEsS0FBR0Es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QUFHNEIsVUFBSCxHQUFjNTBCLEVBQXR2RSxFQUF5dkVnekIsR0FBRzZCLFVBQUgsR0FBYzUwQixFQUF2d0UsRUFBMHdFLENBQUMsTUFBRCxFQUFRLFlBQVIsRUFBcUIsVUFBckIsRUFBZ0MsVUFBaEMsRUFBMkMsVUFBM0MsRUFBc0QsYUFBdEQsRUFBb0UsYUFBcEUsRUFBa0YsZUFBbEYsRUFBa0csZUFBbEcsRUFBa0gsU0FBbEgsRUFBNEgsZUFBNUgsRUFBNEksZUFBNUksRUFBNko5bUIsT0FBN0osQ0FBcUssVUFBUzlFLENBQVQsRUFBVztBQUFDMitDLE9BQUczK0MsQ0FBSCxJQUFNLFlBQVU7QUFBQyxhQUFPeUQsRUFBRU0sSUFBRixDQUFPLGFBQVcvRCxDQUFYLEdBQWEsb0NBQWIsR0FBa0RBLENBQWxELEdBQW9ELFlBQTNELEdBQXlFMkssRUFBRTNLLENBQUYsRUFBS21DLEtBQUwsQ0FBVyxJQUFYLEVBQWdCSSxTQUFoQixDQUFoRjtBQUEyRyxLQUE1SDtBQUE2SCxHQUE5UyxDQUExd0UsRUFBMGpGbzhDLEdBQUc4QixhQUFILEdBQWlCeCtDLENBQTNrRixFQUE2a0YwOEMsR0FBRytCLEdBQUgsR0FBTy8xQyxDQUFwbEYsRUFBc2xGZzBDLEdBQUdwMkIsR0FBSCxHQUFPdkMsRUFBN2xGLEVBQWdtRjI0QixFQUF2bUY7QUFBMG1GLENBQWw3Nk0sQ0FBRCIsImZpbGUiOiJ2aWRlby5jb3JlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIFZpZGVvLmpzIDcuNS40IDxodHRwOi8vdmlkZW9qcy5jb20vPlxuICogQ29weXJpZ2h0IEJyaWdodGNvdmUsIEluYy4gPGh0dHBzOi8vd3d3LmJyaWdodGNvdmUuY29tLz5cbiAqIEF2YWlsYWJsZSB1bmRlciBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMFxuICogPGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL3ZpZGVvLmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0U+XG4gKlxuICogSW5jbHVkZXMgdnR0LmpzIDxodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS92dHQuanM+XG4gKiBBdmFpbGFibGUgdW5kZXIgQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjBcbiAqIDxodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS92dHQuanMvYmxvYi9tYXN0ZXIvTElDRU5TRT5cbiAqL1xuIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dChyZXF1aXJlKFwiZ2xvYmFsL3dpbmRvd1wiKSxyZXF1aXJlKFwiZ2xvYmFsL2RvY3VtZW50XCIpKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImdsb2JhbC93aW5kb3dcIixcImdsb2JhbC9kb2N1bWVudFwiXSx0KTooZT1lfHxzZWxmKS52aWRlb2pzPXQoZS53aW5kb3csZS5kb2N1bWVudCl9KHRoaXMsZnVuY3Rpb24oaCxkKXtoPWgmJmguaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0XCIpP2guZGVmYXVsdDpoLGQ9ZCYmZC5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRcIik/ZC5kZWZhdWx0OmQ7dmFyIHA9XCI3LjUuNFwiO2Z1bmN0aW9uIGYoZSx0KXtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKSwoZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSkuX19wcm90b19fPXR9ZnVuY3Rpb24gcyhlLHQpe3JldHVybihzPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5fX3Byb3RvX189dCxlfSkoZSx0KX1mdW5jdGlvbiBvKGUsdCxuKXtyZXR1cm4obz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk/UmVmbGVjdC5jb25zdHJ1Y3Q6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPVtudWxsXTtpLnB1c2guYXBwbHkoaSx0KTt2YXIgcj1uZXcoRnVuY3Rpb24uYmluZC5hcHBseShlLGkpKTtyZXR1cm4gbiYmcyhyLG4ucHJvdG90eXBlKSxyfSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfWZ1bmN0aW9uIHYoZSl7aWYodm9pZCAwPT09ZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIGV9ZnVuY3Rpb24gdChlLHQpe3JldHVybiB0fHwodD1lLnNsaWNlKDApKSxlLnJhdz10LGV9dmFyIGw9W10sZT1mdW5jdGlvbihvLGEpe3JldHVybiBmdW5jdGlvbihlLHQsbil7dmFyIGk9YS5sZXZlbHNbdF0scj1uZXcgUmVnRXhwKFwiXihcIitpK1wiKSRcIik7aWYoXCJsb2dcIiE9PWUmJm4udW5zaGlmdChlLnRvVXBwZXJDYXNlKCkrXCI6XCIpLG4udW5zaGlmdChvK1wiOlwiKSxsJiZsLnB1c2goW10uY29uY2F0KG4pKSxoLmNvbnNvbGUpe3ZhciBzPWguY29uc29sZVtlXTtzfHxcImRlYnVnXCIhPT1lfHwocz1oLmNvbnNvbGUuaW5mb3x8aC5jb25zb2xlLmxvZykscyYmaSYmci50ZXN0KGUpJiZzW0FycmF5LmlzQXJyYXkobik/XCJhcHBseVwiOlwiY2FsbFwiXShoLmNvbnNvbGUsbil9fX07dmFyIGc9ZnVuY3Rpb24gdChuKXt2YXIgaSxyPVwiaW5mb1wiLHM9ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxuPTA7bjxlO24rKyl0W25dPWFyZ3VtZW50c1tuXTtpKFwibG9nXCIscix0KX07cmV0dXJuIGk9ZShuLHMpLHMuY3JlYXRlTG9nZ2VyPWZ1bmN0aW9uKGUpe3JldHVybiB0KG4rXCI6IFwiK2UpfSxzLmxldmVscz17YWxsOlwiZGVidWd8bG9nfHdhcm58ZXJyb3JcIixvZmY6XCJcIixkZWJ1ZzpcImRlYnVnfGxvZ3x3YXJufGVycm9yXCIsaW5mbzpcImxvZ3x3YXJufGVycm9yXCIsd2FybjpcIndhcm58ZXJyb3JcIixlcnJvcjpcImVycm9yXCIsREVGQVVMVDpyfSxzLmxldmVsPWZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZighcy5sZXZlbHMuaGFzT3duUHJvcGVydHkoZSkpdGhyb3cgbmV3IEVycm9yKCdcIicrZSsnXCIgaW4gbm90IGEgdmFsaWQgbG9nIGxldmVsJyk7cj1lfXJldHVybiByfSwocy5oaXN0b3J5PWZ1bmN0aW9uKCl7cmV0dXJuIGw/W10uY29uY2F0KGwpOltdfSkuZmlsdGVyPWZ1bmN0aW9uKHQpe3JldHVybihsfHxbXSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUmVnRXhwKFwiLipcIit0K1wiLipcIikudGVzdChlWzBdKX0pfSxzLmhpc3RvcnkuY2xlYXI9ZnVuY3Rpb24oKXtsJiYobC5sZW5ndGg9MCl9LHMuaGlzdG9yeS5kaXNhYmxlPWZ1bmN0aW9uKCl7bnVsbCE9PWwmJihsLmxlbmd0aD0wLGw9bnVsbCl9LHMuaGlzdG9yeS5lbmFibGU9ZnVuY3Rpb24oKXtudWxsPT09bCYmKGw9W10pfSxzLmVycm9yPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSksbj0wO248ZTtuKyspdFtuXT1hcmd1bWVudHNbbl07cmV0dXJuIGkoXCJlcnJvclwiLHIsdCl9LHMud2Fybj1mdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLG49MDtuPGU7bisrKXRbbl09YXJndW1lbnRzW25dO3JldHVybiBpKFwid2FyblwiLHIsdCl9LHMuZGVidWc9ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxuPTA7bjxlO24rKyl0W25dPWFyZ3VtZW50c1tuXTtyZXR1cm4gaShcImRlYnVnXCIscix0KX0sc30oXCJWSURFT0pTXCIpLHk9Zy5jcmVhdGVMb2dnZXI7dmFyIG09ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVwiXCIsbj0wO248YXJndW1lbnRzLmxlbmd0aDtuKyspdCs9ZVtuXS5yZXBsYWNlKC9cXG5cXHI/XFxzKi9nLFwiXCIpKyhhcmd1bWVudHNbbisxXXx8XCJcIik7cmV0dXJuIHR9LG49T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxyPWZ1bmN0aW9uKGUpe3JldHVybiBiKGUpP09iamVjdC5rZXlzKGUpOltdfTtmdW5jdGlvbiBhKHQsbil7cih0KS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBuKHRbZV0sZSl9KX1mdW5jdGlvbiBfKG4pe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KDE8ZT9lLTE6MCksaT0xO2k8ZTtpKyspdFtpLTFdPWFyZ3VtZW50c1tpXTtyZXR1cm4gT2JqZWN0LmFzc2lnbj9PYmplY3QuYXNzaWduLmFwcGx5KE9iamVjdCxbbl0uY29uY2F0KHQpKToodC5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UmJmEoZSxmdW5jdGlvbihlLHQpe25bdF09ZX0pfSksbil9ZnVuY3Rpb24gYihlKXtyZXR1cm4hIWUmJlwib2JqZWN0XCI9PXR5cGVvZiBlfWZ1bmN0aW9uIGMoZSl7cmV0dXJuIGIoZSkmJlwiW29iamVjdCBPYmplY3RdXCI9PT1uLmNhbGwoZSkmJmUuY29uc3RydWN0b3I9PT1PYmplY3R9ZnVuY3Rpb24gaShlLHQpe2lmKCFlfHwhdClyZXR1cm5cIlwiO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGguZ2V0Q29tcHV0ZWRTdHlsZSlyZXR1cm5cIlwiO3ZhciBuPWguZ2V0Q29tcHV0ZWRTdHlsZShlKTtyZXR1cm4gbj9uW3RdOlwiXCJ9ZnVuY3Rpb24gdSgpe3ZhciBlPXQoW1wiU2V0dGluZyBhdHRyaWJ1dGVzIGluIHRoZSBzZWNvbmQgYXJndW1lbnQgb2YgY3JlYXRlRWwoKVxcbiAgICAgICAgICAgICAgICBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgdGhlIHRoaXJkIGFyZ3VtZW50IGluc3RlYWQuXFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsKHR5cGUsIHByb3BlcnRpZXMsIGF0dHJpYnV0ZXMpLiBBdHRlbXB0aW5nIHRvIHNldCBcIixcIiB0byBcIixcIi5cIl0pO3JldHVybiB1PWZ1bmN0aW9uKCl7cmV0dXJuIGV9LGV9ZnVuY3Rpb24gVChlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmL1xcUy8udGVzdChlKX1mdW5jdGlvbiBrKGUpe2lmKC9cXHMvLnRlc3QoZSkpdGhyb3cgbmV3IEVycm9yKFwiY2xhc3MgaGFzIGlsbGVnYWwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXCIpfWZ1bmN0aW9uIEMoKXtyZXR1cm4gZD09PWguZG9jdW1lbnR9ZnVuY3Rpb24gRShlKXtyZXR1cm4gYihlKSYmMT09PWUubm9kZVR5cGV9ZnVuY3Rpb24gdygpe3RyeXtyZXR1cm4gaC5wYXJlbnQhPT1oLnNlbGZ9Y2F0Y2goZSl7cmV0dXJuITB9fWZ1bmN0aW9uIFMoaSl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoIVQoZSkpcmV0dXJuIGRbaV0obnVsbCk7VCh0KSYmKHQ9ZC5xdWVyeVNlbGVjdG9yKHQpKTt2YXIgbj1FKHQpP3Q6ZDtyZXR1cm4gbltpXSYmbltpXShlKX19ZnVuY3Rpb24geChlLG4sdCxpKXt2b2lkIDA9PT1lJiYoZT1cImRpdlwiKSx2b2lkIDA9PT1uJiYobj17fSksdm9pZCAwPT09dCYmKHQ9e30pO3ZhciByPWQuY3JlYXRlRWxlbWVudChlKTtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobikuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1uW2VdOy0xIT09ZS5pbmRleE9mKFwiYXJpYS1cIil8fFwicm9sZVwiPT09ZXx8XCJ0eXBlXCI9PT1lPyhnLndhcm4obSh1KCksZSx0KSksci5zZXRBdHRyaWJ1dGUoZSx0KSk6XCJ0ZXh0Q29udGVudFwiPT09ZT9qKHIsdCk6cltlXT10fSksT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCkuZm9yRWFjaChmdW5jdGlvbihlKXtyLnNldEF0dHJpYnV0ZShlLHRbZV0pfSksaSYmWChyLGkpLHJ9ZnVuY3Rpb24gaihlLHQpe3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBlLnRleHRDb250ZW50P2UuaW5uZXJUZXh0PXQ6ZS50ZXh0Q29udGVudD10LGV9ZnVuY3Rpb24gQShlLHQpe3QuZmlyc3RDaGlsZD90Lmluc2VydEJlZm9yZShlLHQuZmlyc3RDaGlsZCk6dC5hcHBlbmRDaGlsZChlKX1mdW5jdGlvbiBQKGUsdCl7cmV0dXJuIGsodCksZS5jbGFzc0xpc3Q/ZS5jbGFzc0xpc3QuY29udGFpbnModCk6KG49dCxuZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIrbitcIigkfFxcXFxzKVwiKSkudGVzdChlLmNsYXNzTmFtZSk7dmFyIG59ZnVuY3Rpb24gTChlLHQpe3JldHVybiBlLmNsYXNzTGlzdD9lLmNsYXNzTGlzdC5hZGQodCk6UChlLHQpfHwoZS5jbGFzc05hbWU9KGUuY2xhc3NOYW1lK1wiIFwiK3QpLnRyaW0oKSksZX1mdW5jdGlvbiBNKGUsdCl7cmV0dXJuIGUuY2xhc3NMaXN0P2UuY2xhc3NMaXN0LnJlbW92ZSh0KTooayh0KSxlLmNsYXNzTmFtZT1lLmNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZSE9PXR9KS5qb2luKFwiIFwiKSksZX1mdW5jdGlvbiBOKGUsdCxuKXt2YXIgaT1QKGUsdCk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmKG49bihlLHQpKSxcImJvb2xlYW5cIiE9dHlwZW9mIG4mJihuPSFpKSxuIT09aSlyZXR1cm4gbj9MKGUsdCk6TShlLHQpLGV9ZnVuY3Rpb24gTyhuLGkpe09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGkpLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9aVtlXTtudWxsPT09dHx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIHR8fCExPT09dD9uLnJlbW92ZUF0dHJpYnV0ZShlKTpuLnNldEF0dHJpYnV0ZShlLCEwPT09dD9cIlwiOnQpfSl9ZnVuY3Rpb24gSShlKXt2YXIgdD17fSxuPVwiLGF1dG9wbGF5LGNvbnRyb2xzLHBsYXlzaW5saW5lLGxvb3AsbXV0ZWQsZGVmYXVsdCxkZWZhdWx0TXV0ZWQsXCI7aWYoZSYmZS5hdHRyaWJ1dGVzJiYwPGUuYXR0cmlidXRlcy5sZW5ndGgpZm9yKHZhciBpPWUuYXR0cmlidXRlcyxyPWkubGVuZ3RoLTE7MDw9cjtyLS0pe3ZhciBzPWlbcl0ubmFtZSxvPWlbcl0udmFsdWU7XCJib29sZWFuXCIhPXR5cGVvZiBlW3NdJiYtMT09PW4uaW5kZXhPZihcIixcIitzK1wiLFwiKXx8KG89bnVsbCE9PW8pLHRbc109b31yZXR1cm4gdH1mdW5jdGlvbiBEKGUsdCl7cmV0dXJuIGUuZ2V0QXR0cmlidXRlKHQpfWZ1bmN0aW9uIFIoZSx0LG4pe2Uuc2V0QXR0cmlidXRlKHQsbil9ZnVuY3Rpb24gQihlLHQpe2UucmVtb3ZlQXR0cmlidXRlKHQpfWZ1bmN0aW9uIEYoKXtkLmJvZHkuZm9jdXMoKSxkLm9uc2VsZWN0c3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX19ZnVuY3Rpb24gSCgpe2Qub25zZWxlY3RzdGFydD1mdW5jdGlvbigpe3JldHVybiEwfX1mdW5jdGlvbiBWKGUpe2lmKGUmJmUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0JiZlLnBhcmVudE5vZGUpe3ZhciB0PWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbj17fTtyZXR1cm5bXCJib3R0b21cIixcImhlaWdodFwiLFwibGVmdFwiLFwicmlnaHRcIixcInRvcFwiLFwid2lkdGhcIl0uZm9yRWFjaChmdW5jdGlvbihlKXt2b2lkIDAhPT10W2VdJiYobltlXT10W2VdKX0pLG4uaGVpZ2h0fHwobi5oZWlnaHQ9cGFyc2VGbG9hdChpKGUsXCJoZWlnaHRcIikpKSxuLndpZHRofHwobi53aWR0aD1wYXJzZUZsb2F0KGkoZSxcIndpZHRoXCIpKSksbn19ZnVuY3Rpb24geihlKXt2YXIgdDtpZihlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCYmZS5wYXJlbnROb2RlJiYodD1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKSwhdClyZXR1cm57bGVmdDowLHRvcDowfTt2YXIgbj1kLmRvY3VtZW50RWxlbWVudCxpPWQuYm9keSxyPW4uY2xpZW50TGVmdHx8aS5jbGllbnRMZWZ0fHwwLHM9aC5wYWdlWE9mZnNldHx8aS5zY3JvbGxMZWZ0LG89dC5sZWZ0K3MtcixhPW4uY2xpZW50VG9wfHxpLmNsaWVudFRvcHx8MCxsPWgucGFnZVlPZmZzZXR8fGkuc2Nyb2xsVG9wLGM9dC50b3ArbC1hO3JldHVybntsZWZ0Ok1hdGgucm91bmQobyksdG9wOk1hdGgucm91bmQoYyl9fWZ1bmN0aW9uIFcoZSx0KXt2YXIgbj17fSxpPXooZSkscj1lLm9mZnNldFdpZHRoLHM9ZS5vZmZzZXRIZWlnaHQsbz1pLnRvcCxhPWkubGVmdCxsPXQucGFnZVksYz10LnBhZ2VYO3JldHVybiB0LmNoYW5nZWRUb3VjaGVzJiYoYz10LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYLGw9dC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSksbi55PU1hdGgubWF4KDAsTWF0aC5taW4oMSwoby1sK3MpL3MpKSxuLng9TWF0aC5tYXgoMCxNYXRoLm1pbigxLChjLWEpL3IpKSxufWZ1bmN0aW9uIEsoZSl7cmV0dXJuIGIoZSkmJjM9PT1lLm5vZGVUeXBlfWZ1bmN0aW9uIFUoZSl7Zm9yKDtlLmZpcnN0Q2hpbGQ7KWUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKTtyZXR1cm4gZX1mdW5jdGlvbiBxKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJihlPWUoKSksKEFycmF5LmlzQXJyYXkoZSk/ZTpbZV0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiYoZT1lKCkpLEUoZSl8fEsoZSk/ZTpcInN0cmluZ1wiPT10eXBlb2YgZSYmL1xcUy8udGVzdChlKT9kLmNyZWF0ZVRleHROb2RlKGUpOnZvaWQgMH0pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZX0pfWZ1bmN0aW9uIFgodCxlKXtyZXR1cm4gcShlKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiB0LmFwcGVuZENoaWxkKGUpfSksdH1mdW5jdGlvbiAkKGUsdCl7cmV0dXJuIFgoVShlKSx0KX1mdW5jdGlvbiBZKGUpe3JldHVybiB2b2lkIDA9PT1lLmJ1dHRvbiYmdm9pZCAwPT09ZS5idXR0b25zfHwoMD09PWUuYnV0dG9uJiZ2b2lkIDA9PT1lLmJ1dHRvbnN8fDA9PT1lLmJ1dHRvbiYmMT09PWUuYnV0dG9ucyl9dmFyIEc9UyhcInF1ZXJ5U2VsZWN0b3JcIiksUT1TKFwicXVlcnlTZWxlY3RvckFsbFwiKSxKPU9iamVjdC5mcmVlemUoe2lzUmVhbDpDLGlzRWw6RSxpc0luRnJhbWU6dyxjcmVhdGVFbDp4LHRleHRDb250ZW50OmoscHJlcGVuZFRvOkEsaGFzQ2xhc3M6UCxhZGRDbGFzczpMLHJlbW92ZUNsYXNzOk0sdG9nZ2xlQ2xhc3M6TixzZXRBdHRyaWJ1dGVzOk8sZ2V0QXR0cmlidXRlczpJLGdldEF0dHJpYnV0ZTpELHNldEF0dHJpYnV0ZTpSLHJlbW92ZUF0dHJpYnV0ZTpCLGJsb2NrVGV4dFNlbGVjdGlvbjpGLHVuYmxvY2tUZXh0U2VsZWN0aW9uOkgsZ2V0Qm91bmRpbmdDbGllbnRSZWN0OlYsZmluZFBvc2l0aW9uOnosZ2V0UG9pbnRlclBvc2l0aW9uOlcsaXNUZXh0Tm9kZTpLLGVtcHR5RWw6VSxub3JtYWxpemVDb250ZW50OnEsYXBwZW5kQ29udGVudDpYLGluc2VydENvbnRlbnQ6JCxpc1NpbmdsZUxlZnRDbGljazpZLCQ6RywkJDpRfSksWj0xO2Z1bmN0aW9uIGVlKCl7cmV0dXJuIForK312YXIgdGU9e30sbmU9XCJ2ZGF0YVwiKyhuZXcgRGF0ZSkuZ2V0VGltZSgpO2Z1bmN0aW9uIGllKGUpe3ZhciB0PWVbbmVdO3JldHVybiB0fHwodD1lW25lXT1lZSgpKSx0ZVt0XXx8KHRlW3RdPXt9KSx0ZVt0XX1mdW5jdGlvbiByZShlKXt2YXIgdD1lW25lXTtyZXR1cm4hIXQmJiEhT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVbdF0pLmxlbmd0aH1mdW5jdGlvbiBzZSh0KXt2YXIgZT10W25lXTtpZihlKXtkZWxldGUgdGVbZV07dHJ5e2RlbGV0ZSB0W25lXX1jYXRjaChlKXt0LnJlbW92ZUF0dHJpYnV0ZT90LnJlbW92ZUF0dHJpYnV0ZShuZSk6dFtuZV09bnVsbH19fWZ1bmN0aW9uIG9lKGUsdCl7dmFyIG49aWUoZSk7MD09PW4uaGFuZGxlcnNbdF0ubGVuZ3RoJiYoZGVsZXRlIG4uaGFuZGxlcnNbdF0sZS5yZW1vdmVFdmVudExpc3RlbmVyP2UucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4uZGlzcGF0Y2hlciwhMSk6ZS5kZXRhY2hFdmVudCYmZS5kZXRhY2hFdmVudChcIm9uXCIrdCxuLmRpc3BhdGNoZXIpKSxPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuLmhhbmRsZXJzKS5sZW5ndGg8PTAmJihkZWxldGUgbi5oYW5kbGVycyxkZWxldGUgbi5kaXNwYXRjaGVyLGRlbGV0ZSBuLmRpc2FibGVkKSwwPT09T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobikubGVuZ3RoJiZzZShlKX1mdW5jdGlvbiBhZSh0LG4sZSxpKXtlLmZvckVhY2goZnVuY3Rpb24oZSl7dChuLGUsaSl9KX1mdW5jdGlvbiBsZShlKXtmdW5jdGlvbiB0KCl7cmV0dXJuITB9ZnVuY3Rpb24gbigpe3JldHVybiExfWlmKCFlfHwhZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCl7dmFyIGk9ZXx8aC5ldmVudDtmb3IodmFyIHIgaW4gZT17fSxpKVwibGF5ZXJYXCIhPT1yJiZcImxheWVyWVwiIT09ciYmXCJrZXlMb2NhdGlvblwiIT09ciYmXCJ3ZWJraXRNb3ZlbWVudFhcIiE9PXImJlwid2Via2l0TW92ZW1lbnRZXCIhPT1yJiYoXCJyZXR1cm5WYWx1ZVwiPT09ciYmaS5wcmV2ZW50RGVmYXVsdHx8KGVbcl09aVtyXSkpO2lmKGUudGFyZ2V0fHwoZS50YXJnZXQ9ZS5zcmNFbGVtZW50fHxkKSxlLnJlbGF0ZWRUYXJnZXR8fChlLnJlbGF0ZWRUYXJnZXQ9ZS5mcm9tRWxlbWVudD09PWUudGFyZ2V0P2UudG9FbGVtZW50OmUuZnJvbUVsZW1lbnQpLGUucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oKXtpLnByZXZlbnREZWZhdWx0JiZpLnByZXZlbnREZWZhdWx0KCksZS5yZXR1cm5WYWx1ZT0hMSxpLnJldHVyblZhbHVlPSExLGUuZGVmYXVsdFByZXZlbnRlZD0hMH0sZS5kZWZhdWx0UHJldmVudGVkPSExLGUuc3RvcFByb3BhZ2F0aW9uPWZ1bmN0aW9uKCl7aS5zdG9wUHJvcGFnYXRpb24mJmkuc3RvcFByb3BhZ2F0aW9uKCksZS5jYW5jZWxCdWJibGU9ITAsaS5jYW5jZWxCdWJibGU9ITAsZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10fSxlLmlzUHJvcGFnYXRpb25TdG9wcGVkPW4sZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb249ZnVuY3Rpb24oKXtpLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiYmaS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSxlLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkPXQsZS5zdG9wUHJvcGFnYXRpb24oKX0sZS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD1uLG51bGwhPT1lLmNsaWVudFgmJnZvaWQgMCE9PWUuY2xpZW50WCl7dmFyIHM9ZC5kb2N1bWVudEVsZW1lbnQsbz1kLmJvZHk7ZS5wYWdlWD1lLmNsaWVudFgrKHMmJnMuc2Nyb2xsTGVmdHx8byYmby5zY3JvbGxMZWZ0fHwwKS0ocyYmcy5jbGllbnRMZWZ0fHxvJiZvLmNsaWVudExlZnR8fDApLGUucGFnZVk9ZS5jbGllbnRZKyhzJiZzLnNjcm9sbFRvcHx8byYmby5zY3JvbGxUb3B8fDApLShzJiZzLmNsaWVudFRvcHx8byYmby5jbGllbnRUb3B8fDApfWUud2hpY2g9ZS5jaGFyQ29kZXx8ZS5rZXlDb2RlLG51bGwhPT1lLmJ1dHRvbiYmdm9pZCAwIT09ZS5idXR0b24mJihlLmJ1dHRvbj0xJmUuYnV0dG9uPzA6NCZlLmJ1dHRvbj8xOjImZS5idXR0b24/MjowKX1yZXR1cm4gZX12YXIgY2U9ITE7IWZ1bmN0aW9uKCl7dHJ5e3ZhciBlPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7Y2U9ITB9fSk7aC5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLG51bGwsZSksaC5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLG51bGwsZSl9Y2F0Y2goZSl7fX0oKTt2YXIgdWU9W1widG91Y2hzdGFydFwiLFwidG91Y2htb3ZlXCJdO2Z1bmN0aW9uIGhlKG8sZSx0KXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBhZShoZSxvLGUsdCk7dmFyIGE9aWUobyk7aWYoYS5oYW5kbGVyc3x8KGEuaGFuZGxlcnM9e30pLGEuaGFuZGxlcnNbZV18fChhLmhhbmRsZXJzW2VdPVtdKSx0Lmd1aWR8fCh0Lmd1aWQ9ZWUoKSksYS5oYW5kbGVyc1tlXS5wdXNoKHQpLGEuZGlzcGF0Y2hlcnx8KGEuZGlzYWJsZWQ9ITEsYS5kaXNwYXRjaGVyPWZ1bmN0aW9uKGUsdCl7aWYoIWEuZGlzYWJsZWQpe2U9bGUoZSk7dmFyIG49YS5oYW5kbGVyc1tlLnR5cGVdO2lmKG4pZm9yKHZhciBpPW4uc2xpY2UoMCkscj0wLHM9aS5sZW5ndGg7cjxzJiYhZS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpO3IrKyl0cnl7aVtyXS5jYWxsKG8sZSx0KX1jYXRjaChlKXtnLmVycm9yKGUpfX19KSwxPT09YS5oYW5kbGVyc1tlXS5sZW5ndGgpaWYoby5hZGRFdmVudExpc3RlbmVyKXt2YXIgbj0hMTtjZSYmLTE8dWUuaW5kZXhPZihlKSYmKG49e3Bhc3NpdmU6ITB9KSxvLmFkZEV2ZW50TGlzdGVuZXIoZSxhLmRpc3BhdGNoZXIsbil9ZWxzZSBvLmF0dGFjaEV2ZW50JiZvLmF0dGFjaEV2ZW50KFwib25cIitlLGEuZGlzcGF0Y2hlcil9ZnVuY3Rpb24gZGUoZSx0LG4pe2lmKHJlKGUpKXt2YXIgaT1pZShlKTtpZihpLmhhbmRsZXJzKXtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiBhZShkZSxlLHQsbik7dmFyIHI9ZnVuY3Rpb24oZSx0KXtpLmhhbmRsZXJzW3RdPVtdLG9lKGUsdCl9O2lmKHZvaWQgMCE9PXQpe3ZhciBzPWkuaGFuZGxlcnNbdF07aWYocylpZihuKXtpZihuLmd1aWQpZm9yKHZhciBvPTA7bzxzLmxlbmd0aDtvKyspc1tvXS5ndWlkPT09bi5ndWlkJiZzLnNwbGljZShvLS0sMSk7b2UoZSx0KX1lbHNlIHIoZSx0KX1lbHNlIGZvcih2YXIgYSBpbiBpLmhhbmRsZXJzKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpLmhhbmRsZXJzfHx7fSxhKSYmcihlLGEpfX19ZnVuY3Rpb24gcGUoZSx0LG4pe3ZhciBpPXJlKGUpP2llKGUpOnt9LHI9ZS5wYXJlbnROb2RlfHxlLm93bmVyRG9jdW1lbnQ7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQ/dD17dHlwZTp0LHRhcmdldDplfTp0LnRhcmdldHx8KHQudGFyZ2V0PWUpLHQ9bGUodCksaS5kaXNwYXRjaGVyJiZpLmRpc3BhdGNoZXIuY2FsbChlLHQsbiksciYmIXQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSYmITA9PT10LmJ1YmJsZXMpcGUuY2FsbChudWxsLHIsdCxuKTtlbHNlIGlmKCFyJiYhdC5kZWZhdWx0UHJldmVudGVkJiZ0LnRhcmdldCYmdC50YXJnZXRbdC50eXBlXSl7dmFyIHM9aWUodC50YXJnZXQpO3QudGFyZ2V0W3QudHlwZV0mJihzLmRpc2FibGVkPSEwLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQudGFyZ2V0W3QudHlwZV0mJnQudGFyZ2V0W3QudHlwZV0oKSxzLmRpc2FibGVkPSExKX1yZXR1cm4hdC5kZWZhdWx0UHJldmVudGVkfWZ1bmN0aW9uIGZlKHQsbixpKXtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBhZShmZSx0LG4saSk7dmFyIGU9ZnVuY3Rpb24gZSgpe2RlKHQsbixlKSxpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07ZS5ndWlkPWkuZ3VpZD1pLmd1aWR8fGVlKCksaGUodCxuLGUpfXZhciB2ZSxnZT1PYmplY3QuZnJlZXplKHtmaXhFdmVudDpsZSxvbjpoZSxvZmY6ZGUsdHJpZ2dlcjpwZSxvbmU6ZmV9KSx5ZT0hMSxtZT1mdW5jdGlvbigpe2lmKEMoKSYmITEhPT12ZS5vcHRpb25zLmF1dG9TZXR1cCl7dmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInZpZGVvXCIpKSx0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJhdWRpb1wiKSksbj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidmlkZW8tanNcIikpLGk9ZS5jb25jYXQodCxuKTtpZihpJiYwPGkubGVuZ3RoKWZvcih2YXIgcj0wLHM9aS5sZW5ndGg7cjxzO3IrKyl7dmFyIG89aVtyXTtpZighb3x8IW8uZ2V0QXR0cmlidXRlKXtfZSgxKTticmVha312b2lkIDA9PT1vLnBsYXllciYmbnVsbCE9PW8uZ2V0QXR0cmlidXRlKFwiZGF0YS1zZXR1cFwiKSYmdmUobyl9ZWxzZSB5ZXx8X2UoMSl9fTtmdW5jdGlvbiBfZShlLHQpe3QmJih2ZT10KSxoLnNldFRpbWVvdXQobWUsZSl9QygpJiZcImNvbXBsZXRlXCI9PT1kLnJlYWR5U3RhdGU/eWU9ITA6ZmUoaCxcImxvYWRcIixmdW5jdGlvbigpe3llPSEwfSk7dmFyIGJlLFRlPWZ1bmN0aW9uKGUpe3ZhciB0PWQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO3JldHVybiB0LmNsYXNzTmFtZT1lLHR9LGtlPWZ1bmN0aW9uKGUsdCl7ZS5zdHlsZVNoZWV0P2Uuc3R5bGVTaGVldC5jc3NUZXh0PXQ6ZS50ZXh0Q29udGVudD10fSxDZT1mdW5jdGlvbihlLHQsbil7dC5ndWlkfHwodC5ndWlkPWVlKCkpO3ZhciBpPWZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkoZSxhcmd1bWVudHMpfTtyZXR1cm4gaS5ndWlkPW4/bitcIl9cIit0Lmd1aWQ6dC5ndWlkLGl9LEVlPWZ1bmN0aW9uKHQsbil7dmFyIGk9RGF0ZS5ub3coKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZT1EYXRlLm5vdygpO248PWUtaSYmKHQuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyksaT1lKX19LHdlPWZ1bmN0aW9uKCl7fTt3ZS5wcm90b3R5cGUuYWxsb3dlZEV2ZW50c189e30sd2UucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI9d2UucHJvdG90eXBlLm9uPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5hZGRFdmVudExpc3RlbmVyO3RoaXMuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbigpe30saGUodGhpcyxlLHQpLHRoaXMuYWRkRXZlbnRMaXN0ZW5lcj1ufSx3ZS5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcj13ZS5wcm90b3R5cGUub2ZmPWZ1bmN0aW9uKGUsdCl7ZGUodGhpcyxlLHQpfSx3ZS5wcm90b3R5cGUub25lPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5hZGRFdmVudExpc3RlbmVyO3RoaXMuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbigpe30sZmUodGhpcyxlLHQpLHRoaXMuYWRkRXZlbnRMaXN0ZW5lcj1ufSx3ZS5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudD13ZS5wcm90b3R5cGUudHJpZ2dlcj1mdW5jdGlvbihlKXt2YXIgdD1lLnR5cGV8fGU7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPXt0eXBlOnR9KSxlPWxlKGUpLHRoaXMuYWxsb3dlZEV2ZW50c19bdF0mJnRoaXNbXCJvblwiK3RdJiZ0aGlzW1wib25cIit0XShlKSxwZSh0aGlzLGUpfSx3ZS5wcm90b3R5cGUucXVldWVUcmlnZ2VyPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7YmV8fChiZT1uZXcgTWFwKTt2YXIgbj1lLnR5cGV8fGUsaT1iZS5nZXQodGhpcyk7aXx8KGk9bmV3IE1hcCxiZS5zZXQodGhpcyxpKSk7dmFyIHI9aS5nZXQobik7aS5kZWxldGUobiksaC5jbGVhclRpbWVvdXQocik7dmFyIHM9aC5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7MD09PWkuc2l6ZSYmKGk9bnVsbCxiZS5kZWxldGUodCkpLHQudHJpZ2dlcihlKX0sMCk7aS5zZXQobixzKX07dmFyIFNlPWZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2Ygd2V8fCEhdC5ldmVudEJ1c0VsXyYmW1wib25cIixcIm9uZVwiLFwib2ZmXCIsXCJ0cmlnZ2VyXCJdLmV2ZXJ5KGZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHRbZV19KX0seGU9ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJi9cXFMvLnRlc3QoZSl8fEFycmF5LmlzQXJyYXkoZSkmJiEhZS5sZW5ndGh9LGplPWZ1bmN0aW9uKGUpe2lmKCFlLm5vZGVOYW1lJiYhU2UoZSkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB0YXJnZXQ7IG11c3QgYmUgYSBET00gbm9kZSBvciBldmVudGVkIG9iamVjdC5cIil9LEFlPWZ1bmN0aW9uKGUpe2lmKCF4ZShlKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGV2ZW50IHR5cGU7IG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nIG9yIGFycmF5LlwiKX0sUGU9ZnVuY3Rpb24oZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGxpc3RlbmVyOyBtdXN0IGJlIGEgZnVuY3Rpb24uXCIpfSxMZT1mdW5jdGlvbihlLHQpe3ZhciBuLGkscixzPXQubGVuZ3RoPDN8fHRbMF09PT1lfHx0WzBdPT09ZS5ldmVudEJ1c0VsXztyZXR1cm4gcj1zPyhuPWUuZXZlbnRCdXNFbF8sMzw9dC5sZW5ndGgmJnQuc2hpZnQoKSxpPXRbMF0sdFsxXSk6KG49dFswXSxpPXRbMV0sdFsyXSksamUobiksQWUoaSksUGUocikse2lzVGFyZ2V0aW5nU2VsZjpzLHRhcmdldDpuLHR5cGU6aSxsaXN0ZW5lcjpyPUNlKGUscil9fSxNZT1mdW5jdGlvbihlLHQsbixpKXtqZShlKSxlLm5vZGVOYW1lP2dlW3RdKGUsbixpKTplW3RdKG4saSl9LE5lPXtvbjpmdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0KSxpPTA7aTx0O2krKyluW2ldPWFyZ3VtZW50c1tpXTt2YXIgcj1MZSh0aGlzLG4pLHM9ci5pc1RhcmdldGluZ1NlbGYsbz1yLnRhcmdldCxhPXIudHlwZSxsPXIubGlzdGVuZXI7aWYoTWUobyxcIm9uXCIsYSxsKSwhcyl7dmFyIGM9ZnVuY3Rpb24oKXtyZXR1cm4gZS5vZmYobyxhLGwpfTtjLmd1aWQ9bC5ndWlkO3ZhciB1PWZ1bmN0aW9uKCl7cmV0dXJuIGUub2ZmKFwiZGlzcG9zZVwiLGMpfTt1Lmd1aWQ9bC5ndWlkLE1lKHRoaXMsXCJvblwiLFwiZGlzcG9zZVwiLGMpLE1lKG8sXCJvblwiLFwiZGlzcG9zZVwiLHUpfX0sb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciByPXRoaXMsZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLG49MDtuPGU7bisrKXRbbl09YXJndW1lbnRzW25dO3ZhciBpPUxlKHRoaXMsdCkscz1pLmlzVGFyZ2V0aW5nU2VsZixvPWkudGFyZ2V0LGE9aS50eXBlLGw9aS5saXN0ZW5lcjtpZihzKU1lKG8sXCJvbmVcIixhLGwpO2Vsc2V7dmFyIGM9ZnVuY3Rpb24gZSgpe3Iub2ZmKG8sYSxlKTtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0KSxpPTA7aTx0O2krKyluW2ldPWFyZ3VtZW50c1tpXTtsLmFwcGx5KG51bGwsbil9O2MuZ3VpZD1sLmd1aWQsTWUobyxcIm9uZVwiLGEsYyl9fSxvZmY6ZnVuY3Rpb24oZSx0LG4pe2lmKCFlfHx4ZShlKSlkZSh0aGlzLmV2ZW50QnVzRWxfLGUsdCk7ZWxzZXt2YXIgaT1lLHI9dDtqZShpKSxBZShyKSxQZShuKSxuPUNlKHRoaXMsbiksdGhpcy5vZmYoXCJkaXNwb3NlXCIsbiksaS5ub2RlTmFtZT8oZGUoaSxyLG4pLGRlKGksXCJkaXNwb3NlXCIsbikpOlNlKGkpJiYoaS5vZmYocixuKSxpLm9mZihcImRpc3Bvc2VcIixuKSl9fSx0cmlnZ2VyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHBlKHRoaXMuZXZlbnRCdXNFbF8sZSx0KX19O2Z1bmN0aW9uIE9lKGUsdCl7dm9pZCAwPT09dCYmKHQ9e30pO3ZhciBuPXQuZXZlbnRCdXNLZXk7aWYobil7aWYoIWVbbl0ubm9kZU5hbWUpdGhyb3cgbmV3IEVycm9yKCdUaGUgZXZlbnRCdXNLZXkgXCInK24rJ1wiIGRvZXMgbm90IHJlZmVyIHRvIGFuIGVsZW1lbnQuJyk7ZS5ldmVudEJ1c0VsXz1lW25dfWVsc2UgZS5ldmVudEJ1c0VsXz14KFwic3BhblwiLHtjbGFzc05hbWU6XCJ2anMtZXZlbnQtYnVzXCJ9KTtyZXR1cm4gXyhlLE5lKSxlLmV2ZW50ZWRDYWxsYmFja3MmJmUuZXZlbnRlZENhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UoKX0pLGUub24oXCJkaXNwb3NlXCIsZnVuY3Rpb24oKXtlLm9mZigpLGguc2V0VGltZW91dChmdW5jdGlvbigpe2UuZXZlbnRCdXNFbF89bnVsbH0sMCl9KSxlfXZhciBJZT17c3RhdGU6e30sc2V0U3RhdGU6ZnVuY3Rpb24oZSl7dmFyIG4saT10aGlzO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJihlPWUoKSksYShlLGZ1bmN0aW9uKGUsdCl7aS5zdGF0ZVt0XSE9PWUmJigobj1ufHx7fSlbdF09e2Zyb206aS5zdGF0ZVt0XSx0bzplfSksaS5zdGF0ZVt0XT1lfSksbiYmU2UodGhpcykmJnRoaXMudHJpZ2dlcih7Y2hhbmdlczpuLHR5cGU6XCJzdGF0ZWNoYW5nZWRcIn0pLG59fTtmdW5jdGlvbiBEZShlLHQpe3JldHVybiBfKGUsSWUpLGUuc3RhdGU9Xyh7fSxlLnN0YXRlLHQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuaGFuZGxlU3RhdGVDaGFuZ2VkJiZTZShlKSYmZS5vbihcInN0YXRlY2hhbmdlZFwiLGUuaGFuZGxlU3RhdGVDaGFuZ2VkKSxlfWZ1bmN0aW9uIFJlKGUpe3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlP2U6ZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStlLnNsaWNlKDEpfWZ1bmN0aW9uIEJlKCl7Zm9yKHZhciBuPXt9LGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxpPTA7aTxlO2krKyl0W2ldPWFyZ3VtZW50c1tpXTtyZXR1cm4gdC5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UmJmEoZSxmdW5jdGlvbihlLHQpe2MoZSk/KGMoblt0XSl8fChuW3RdPXt9KSxuW3RdPUJlKG5bdF0sZSkpOm5bdF09ZX0pfSksbn12YXIgRmU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBjKGUsdCxuKXtpZighZSYmdGhpcy5wbGF5P3RoaXMucGxheWVyXz1lPXRoaXM6dGhpcy5wbGF5ZXJfPWUsdGhpcy5wYXJlbnRDb21wb25lbnRfPW51bGwsdGhpcy5vcHRpb25zXz1CZSh7fSx0aGlzLm9wdGlvbnNfKSx0PXRoaXMub3B0aW9uc189QmUodGhpcy5vcHRpb25zXyx0KSx0aGlzLmlkXz10LmlkfHx0LmVsJiZ0LmVsLmlkLCF0aGlzLmlkXyl7dmFyIGk9ZSYmZS5pZCYmZS5pZCgpfHxcIm5vX3BsYXllclwiO3RoaXMuaWRfPWkrXCJfY29tcG9uZW50X1wiK2VlKCl9dGhpcy5uYW1lXz10Lm5hbWV8fG51bGwsdC5lbD90aGlzLmVsXz10LmVsOiExIT09dC5jcmVhdGVFbCYmKHRoaXMuZWxfPXRoaXMuY3JlYXRlRWwoKSksITEhPT10LmV2ZW50ZWQmJk9lKHRoaXMse2V2ZW50QnVzS2V5OnRoaXMuZWxfP1wiZWxfXCI6bnVsbH0pLERlKHRoaXMsdGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0U3RhdGUpLHRoaXMuY2hpbGRyZW5fPVtdLHRoaXMuY2hpbGRJbmRleF89e30sISh0aGlzLmNoaWxkTmFtZUluZGV4Xz17fSkhPT10LmluaXRDaGlsZHJlbiYmdGhpcy5pbml0Q2hpbGRyZW4oKSx0aGlzLnJlYWR5KG4pLCExIT09dC5yZXBvcnRUb3VjaEFjdGl2aXR5JiZ0aGlzLmVuYWJsZVRvdWNoQWN0aXZpdHkoKX12YXIgZT1jLnByb3RvdHlwZTtyZXR1cm4gZS5kaXNwb3NlPWZ1bmN0aW9uKCl7aWYodGhpcy50cmlnZ2VyKHt0eXBlOlwiZGlzcG9zZVwiLGJ1YmJsZXM6ITF9KSx0aGlzLmNoaWxkcmVuXylmb3IodmFyIGU9dGhpcy5jaGlsZHJlbl8ubGVuZ3RoLTE7MDw9ZTtlLS0pdGhpcy5jaGlsZHJlbl9bZV0uZGlzcG9zZSYmdGhpcy5jaGlsZHJlbl9bZV0uZGlzcG9zZSgpO3RoaXMuY2hpbGRyZW5fPW51bGwsdGhpcy5jaGlsZEluZGV4Xz1udWxsLHRoaXMuY2hpbGROYW1lSW5kZXhfPW51bGwsdGhpcy5wYXJlbnRDb21wb25lbnRfPW51bGwsdGhpcy5lbF8mJih0aGlzLmVsXy5wYXJlbnROb2RlJiZ0aGlzLmVsXy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxfKSxzZSh0aGlzLmVsXyksdGhpcy5lbF89bnVsbCksdGhpcy5wbGF5ZXJfPW51bGx9LGUucGxheWVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGxheWVyX30sZS5vcHRpb25zPWZ1bmN0aW9uKGUpe3JldHVybiBnLndhcm4oXCJ0aGlzLm9wdGlvbnMoKSBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIG1vdmVkIHRvIHRoZSBjb25zdHJ1Y3RvciBpbiA2LjBcIiksZSYmKHRoaXMub3B0aW9uc189QmUodGhpcy5vcHRpb25zXyxlKSksdGhpcy5vcHRpb25zX30sZS5lbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVsX30sZS5jcmVhdGVFbD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHgoZSx0LG4pfSxlLmxvY2FsaXplPWZ1bmN0aW9uKGUscix0KXt2b2lkIDA9PT10JiYodD1lKTt2YXIgbj10aGlzLnBsYXllcl8ubGFuZ3VhZ2UmJnRoaXMucGxheWVyXy5sYW5ndWFnZSgpLGk9dGhpcy5wbGF5ZXJfLmxhbmd1YWdlcyYmdGhpcy5wbGF5ZXJfLmxhbmd1YWdlcygpLHM9aSYmaVtuXSxvPW4mJm4uc3BsaXQoXCItXCIpWzBdLGE9aSYmaVtvXSxsPXQ7cmV0dXJuIHMmJnNbZV0/bD1zW2VdOmEmJmFbZV0mJihsPWFbZV0pLHImJihsPWwucmVwbGFjZSgvXFx7KFxcZCspXFx9L2csZnVuY3Rpb24oZSx0KXt2YXIgbj1yW3QtMV0saT1uO3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBuJiYoaT1lKSxpfSkpLGx9LGUuY29udGVudEVsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29udGVudEVsX3x8dGhpcy5lbF99LGUuaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pZF99LGUubmFtZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5hbWVffSxlLmNoaWxkcmVuPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2hpbGRyZW5ffSxlLmdldENoaWxkQnlJZD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jaGlsZEluZGV4X1tlXX0sZS5nZXRDaGlsZD1mdW5jdGlvbihlKXtpZihlKXJldHVybiBlPVJlKGUpLHRoaXMuY2hpbGROYW1lSW5kZXhfW2VdfSxlLmFkZENoaWxkPWZ1bmN0aW9uKGUsdCxuKXt2YXIgaSxyO2lmKHZvaWQgMD09PXQmJih0PXt9KSx2b2lkIDA9PT1uJiYobj10aGlzLmNoaWxkcmVuXy5sZW5ndGgpLFwic3RyaW5nXCI9PXR5cGVvZiBlKXtyPVJlKGUpO3ZhciBzPXQuY29tcG9uZW50Q2xhc3N8fHI7dC5uYW1lPXI7dmFyIG89Yy5nZXRDb21wb25lbnQocyk7aWYoIW8pdGhyb3cgbmV3IEVycm9yKFwiQ29tcG9uZW50IFwiK3MrXCIgZG9lcyBub3QgZXhpc3RcIik7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgbylyZXR1cm4gbnVsbDtpPW5ldyBvKHRoaXMucGxheWVyX3x8dGhpcyx0KX1lbHNlIGk9ZTtpZihpLnBhcmVudENvbXBvbmVudF8mJmkucGFyZW50Q29tcG9uZW50Xy5yZW1vdmVDaGlsZChpKSx0aGlzLmNoaWxkcmVuXy5zcGxpY2UobiwwLGkpLGkucGFyZW50Q29tcG9uZW50Xz10aGlzLFwiZnVuY3Rpb25cIj09dHlwZW9mIGkuaWQmJih0aGlzLmNoaWxkSW5kZXhfW2kuaWQoKV09aSksKHI9cnx8aS5uYW1lJiZSZShpLm5hbWUoKSkpJiYodGhpcy5jaGlsZE5hbWVJbmRleF9bcl09aSksXCJmdW5jdGlvblwiPT10eXBlb2YgaS5lbCYmaS5lbCgpKXt2YXIgYT10aGlzLmNvbnRlbnRFbCgpLmNoaWxkcmVuW25dfHxudWxsO3RoaXMuY29udGVudEVsKCkuaW5zZXJ0QmVmb3JlKGkuZWwoKSxhKX1yZXR1cm4gaX0sZS5yZW1vdmVDaGlsZD1mdW5jdGlvbihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9dGhpcy5nZXRDaGlsZChlKSksZSYmdGhpcy5jaGlsZHJlbl8pe2Zvcih2YXIgdD0hMSxuPXRoaXMuY2hpbGRyZW5fLmxlbmd0aC0xOzA8PW47bi0tKWlmKHRoaXMuY2hpbGRyZW5fW25dPT09ZSl7dD0hMCx0aGlzLmNoaWxkcmVuXy5zcGxpY2UobiwxKTticmVha31pZih0KXtlLnBhcmVudENvbXBvbmVudF89bnVsbCx0aGlzLmNoaWxkSW5kZXhfW2UuaWQoKV09bnVsbCx0aGlzLmNoaWxkTmFtZUluZGV4X1tlLm5hbWUoKV09bnVsbDt2YXIgaT1lLmVsKCk7aSYmaS5wYXJlbnROb2RlPT09dGhpcy5jb250ZW50RWwoKSYmdGhpcy5jb250ZW50RWwoKS5yZW1vdmVDaGlsZChlLmVsKCkpfX19LGUuaW5pdENoaWxkcmVuPWZ1bmN0aW9uKCl7dmFyIHI9dGhpcyxpPXRoaXMub3B0aW9uc18uY2hpbGRyZW47aWYoaSl7dmFyIGUscz10aGlzLm9wdGlvbnNfLG49Yy5nZXRDb21wb25lbnQoXCJUZWNoXCIpOyhlPUFycmF5LmlzQXJyYXkoaSk/aTpPYmplY3Qua2V5cyhpKSkuY29uY2F0KE9iamVjdC5rZXlzKHRoaXMub3B0aW9uc18pLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4hZS5zb21lKGZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP3Q9PT1lOnQ9PT1lLm5hbWV9KX0pKS5tYXAoZnVuY3Rpb24oZSl7dmFyIHQsbjtyZXR1cm4gbj1cInN0cmluZ1wiPT10eXBlb2YgZT9pW3Q9ZV18fHIub3B0aW9uc19bdF18fHt9Oih0PWUubmFtZSxlKSx7bmFtZTp0LG9wdHM6bn19KS5maWx0ZXIoZnVuY3Rpb24oZSl7dmFyIHQ9Yy5nZXRDb21wb25lbnQoZS5vcHRzLmNvbXBvbmVudENsYXNzfHxSZShlLm5hbWUpKTtyZXR1cm4gdCYmIW4uaXNUZWNoKHQpfSkuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lLm5hbWUsbj1lLm9wdHM7aWYodm9pZCAwIT09c1t0XSYmKG49c1t0XSksITEhPT1uKXshMD09PW4mJihuPXt9KSxuLnBsYXllck9wdGlvbnM9ci5vcHRpb25zXy5wbGF5ZXJPcHRpb25zO3ZhciBpPXIuYWRkQ2hpbGQodCxuKTtpJiYoclt0XT1pKX19KX19LGUuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwiXCJ9LGUucmVhZHk9ZnVuY3Rpb24oZSx0KXtpZih2b2lkIDA9PT10JiYodD0hMSksZSlyZXR1cm4gdGhpcy5pc1JlYWR5Xz92b2lkKHQ/ZS5jYWxsKHRoaXMpOnRoaXMuc2V0VGltZW91dChlLDEpKToodGhpcy5yZWFkeVF1ZXVlXz10aGlzLnJlYWR5UXVldWVffHxbXSx2b2lkIHRoaXMucmVhZHlRdWV1ZV8ucHVzaChlKSl9LGUudHJpZ2dlclJlYWR5PWZ1bmN0aW9uKCl7dGhpcy5pc1JlYWR5Xz0hMCx0aGlzLnNldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgZT10aGlzLnJlYWR5UXVldWVfO3RoaXMucmVhZHlRdWV1ZV89W10sZSYmMDxlLmxlbmd0aCYmZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UuY2FsbCh0aGlzKX0sdGhpcyksdGhpcy50cmlnZ2VyKFwicmVhZHlcIil9LDEpfSxlLiQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gRyhlLHR8fHRoaXMuY29udGVudEVsKCkpfSxlLiQkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIFEoZSx0fHx0aGlzLmNvbnRlbnRFbCgpKX0sZS5oYXNDbGFzcz1mdW5jdGlvbihlKXtyZXR1cm4gUCh0aGlzLmVsXyxlKX0sZS5hZGRDbGFzcz1mdW5jdGlvbihlKXtMKHRoaXMuZWxfLGUpfSxlLnJlbW92ZUNsYXNzPWZ1bmN0aW9uKGUpe00odGhpcy5lbF8sZSl9LGUudG9nZ2xlQ2xhc3M9ZnVuY3Rpb24oZSx0KXtOKHRoaXMuZWxfLGUsdCl9LGUuc2hvdz1mdW5jdGlvbigpe3RoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtaGlkZGVuXCIpfSxlLmhpZGU9ZnVuY3Rpb24oKXt0aGlzLmFkZENsYXNzKFwidmpzLWhpZGRlblwiKX0sZS5sb2NrU2hvd2luZz1mdW5jdGlvbigpe3RoaXMuYWRkQ2xhc3MoXCJ2anMtbG9jay1zaG93aW5nXCIpfSxlLnVubG9ja1Nob3dpbmc9ZnVuY3Rpb24oKXt0aGlzLnJlbW92ZUNsYXNzKFwidmpzLWxvY2stc2hvd2luZ1wiKX0sZS5nZXRBdHRyaWJ1dGU9ZnVuY3Rpb24oZSl7cmV0dXJuIEQodGhpcy5lbF8sZSl9LGUuc2V0QXR0cmlidXRlPWZ1bmN0aW9uKGUsdCl7Uih0aGlzLmVsXyxlLHQpfSxlLnJlbW92ZUF0dHJpYnV0ZT1mdW5jdGlvbihlKXtCKHRoaXMuZWxfLGUpfSxlLndpZHRoPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZGltZW5zaW9uKFwid2lkdGhcIixlLHQpfSxlLmhlaWdodD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmRpbWVuc2lvbihcImhlaWdodFwiLGUsdCl9LGUuZGltZW5zaW9ucz1mdW5jdGlvbihlLHQpe3RoaXMud2lkdGgoZSwhMCksdGhpcy5oZWlnaHQodCl9LGUuZGltZW5zaW9uPWZ1bmN0aW9uKGUsdCxuKXtpZih2b2lkIDAhPT10KXJldHVybiBudWxsIT09dCYmdD09dHx8KHQ9MCksLTEhPT0oXCJcIit0KS5pbmRleE9mKFwiJVwiKXx8LTEhPT0oXCJcIit0KS5pbmRleE9mKFwicHhcIik/dGhpcy5lbF8uc3R5bGVbZV09dDp0aGlzLmVsXy5zdHlsZVtlXT1cImF1dG9cIj09PXQ/XCJcIjp0K1wicHhcIix2b2lkKG58fHRoaXMudHJpZ2dlcihcImNvbXBvbmVudHJlc2l6ZVwiKSk7aWYoIXRoaXMuZWxfKXJldHVybiAwO3ZhciBpPXRoaXMuZWxfLnN0eWxlW2VdLHI9aS5pbmRleE9mKFwicHhcIik7cmV0dXJuLTEhPT1yP3BhcnNlSW50KGkuc2xpY2UoMCxyKSwxMCk6cGFyc2VJbnQodGhpcy5lbF9bXCJvZmZzZXRcIitSZShlKV0sMTApfSxlLmN1cnJlbnREaW1lbnNpb249ZnVuY3Rpb24oZSl7dmFyIHQ9MDtpZihcIndpZHRoXCIhPT1lJiZcImhlaWdodFwiIT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJjdXJyZW50RGltZW5zaW9uIG9ubHkgYWNjZXB0cyB3aWR0aCBvciBoZWlnaHQgdmFsdWVcIik7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgaC5nZXRDb21wdXRlZFN0eWxlKXt2YXIgbj1oLmdldENvbXB1dGVkU3R5bGUodGhpcy5lbF8pO3Q9bi5nZXRQcm9wZXJ0eVZhbHVlKGUpfHxuW2VdfWlmKDA9PT0odD1wYXJzZUZsb2F0KHQpKSl7dmFyIGk9XCJvZmZzZXRcIitSZShlKTt0PXRoaXMuZWxfW2ldfXJldHVybiB0fSxlLmN1cnJlbnREaW1lbnNpb25zPWZ1bmN0aW9uKCl7cmV0dXJue3dpZHRoOnRoaXMuY3VycmVudERpbWVuc2lvbihcIndpZHRoXCIpLGhlaWdodDp0aGlzLmN1cnJlbnREaW1lbnNpb24oXCJoZWlnaHRcIil9fSxlLmN1cnJlbnRXaWR0aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmN1cnJlbnREaW1lbnNpb24oXCJ3aWR0aFwiKX0sZS5jdXJyZW50SGVpZ2h0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3VycmVudERpbWVuc2lvbihcImhlaWdodFwiKX0sZS5mb2N1cz1mdW5jdGlvbigpe3RoaXMuZWxfLmZvY3VzKCl9LGUuYmx1cj1mdW5jdGlvbigpe3RoaXMuZWxfLmJsdXIoKX0sZS5oYW5kbGVLZXlQcmVzcz1mdW5jdGlvbihlKXt0aGlzLnBsYXllcl8mJnRoaXMucGxheWVyXy5oYW5kbGVLZXlQcmVzcyhlKX0sZS5lbWl0VGFwRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGksdD0wLHI9bnVsbDt0aGlzLm9uKFwidG91Y2hzdGFydFwiLGZ1bmN0aW9uKGUpezE9PT1lLnRvdWNoZXMubGVuZ3RoJiYocj17cGFnZVg6ZS50b3VjaGVzWzBdLnBhZ2VYLHBhZ2VZOmUudG91Y2hlc1swXS5wYWdlWX0sdD0obmV3IERhdGUpLmdldFRpbWUoKSxpPSEwKX0pLHRoaXMub24oXCJ0b3VjaG1vdmVcIixmdW5jdGlvbihlKXtpZigxPGUudG91Y2hlcy5sZW5ndGgpaT0hMTtlbHNlIGlmKHIpe3ZhciB0PWUudG91Y2hlc1swXS5wYWdlWC1yLnBhZ2VYLG49ZS50b3VjaGVzWzBdLnBhZ2VZLXIucGFnZVk7MTA8TWF0aC5zcXJ0KHQqdCtuKm4pJiYoaT0hMSl9fSk7dmFyIGU9ZnVuY3Rpb24oKXtpPSExfTt0aGlzLm9uKFwidG91Y2hsZWF2ZVwiLGUpLHRoaXMub24oXCJ0b3VjaGNhbmNlbFwiLGUpLHRoaXMub24oXCJ0b3VjaGVuZFwiLGZ1bmN0aW9uKGUpeyEocj1udWxsKT09PWkmJigobmV3IERhdGUpLmdldFRpbWUoKS10PDIwMCYmKGUucHJldmVudERlZmF1bHQoKSx0aGlzLnRyaWdnZXIoXCJ0YXBcIikpKX0pfSxlLmVuYWJsZVRvdWNoQWN0aXZpdHk9ZnVuY3Rpb24oKXtpZih0aGlzLnBsYXllcigpJiZ0aGlzLnBsYXllcigpLnJlcG9ydFVzZXJBY3Rpdml0eSl7dmFyIHQsbj1DZSh0aGlzLnBsYXllcigpLHRoaXMucGxheWVyKCkucmVwb3J0VXNlckFjdGl2aXR5KTt0aGlzLm9uKFwidG91Y2hzdGFydFwiLGZ1bmN0aW9uKCl7bigpLHRoaXMuY2xlYXJJbnRlcnZhbCh0KSx0PXRoaXMuc2V0SW50ZXJ2YWwobiwyNTApfSk7dmFyIGU9ZnVuY3Rpb24oZSl7bigpLHRoaXMuY2xlYXJJbnRlcnZhbCh0KX07dGhpcy5vbihcInRvdWNobW92ZVwiLG4pLHRoaXMub24oXCJ0b3VjaGVuZFwiLGUpLHRoaXMub24oXCJ0b3VjaGNhbmNlbFwiLGUpfX0sZS5zZXRUaW1lb3V0PWZ1bmN0aW9uKGUsdCl7dmFyIG4saSxyPXRoaXM7cmV0dXJuIGU9Q2UodGhpcyxlKSxuPWguc2V0VGltZW91dChmdW5jdGlvbigpe3Iub2ZmKFwiZGlzcG9zZVwiLGkpLGUoKX0sdCksKGk9ZnVuY3Rpb24oKXtyZXR1cm4gci5jbGVhclRpbWVvdXQobil9KS5ndWlkPVwidmpzLXRpbWVvdXQtXCIrbix0aGlzLm9uKFwiZGlzcG9zZVwiLGkpLG59LGUuY2xlYXJUaW1lb3V0PWZ1bmN0aW9uKGUpe2guY2xlYXJUaW1lb3V0KGUpO3ZhciB0PWZ1bmN0aW9uKCl7fTtyZXR1cm4gdC5ndWlkPVwidmpzLXRpbWVvdXQtXCIrZSx0aGlzLm9mZihcImRpc3Bvc2VcIix0KSxlfSxlLnNldEludGVydmFsPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztlPUNlKHRoaXMsZSk7dmFyIGk9aC5zZXRJbnRlcnZhbChlLHQpLHI9ZnVuY3Rpb24oKXtyZXR1cm4gbi5jbGVhckludGVydmFsKGkpfTtyZXR1cm4gci5ndWlkPVwidmpzLWludGVydmFsLVwiK2ksdGhpcy5vbihcImRpc3Bvc2VcIixyKSxpfSxlLmNsZWFySW50ZXJ2YWw9ZnVuY3Rpb24oZSl7aC5jbGVhckludGVydmFsKGUpO3ZhciB0PWZ1bmN0aW9uKCl7fTtyZXR1cm4gdC5ndWlkPVwidmpzLWludGVydmFsLVwiK2UsdGhpcy5vZmYoXCJkaXNwb3NlXCIsdCksZX0sZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU9ZnVuY3Rpb24oZSl7dmFyIHQsbixpPXRoaXM7cmV0dXJuIHRoaXMuc3VwcG9ydHNSYWZfPyhlPUNlKHRoaXMsZSksdD1oLnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpe2kub2ZmKFwiZGlzcG9zZVwiLG4pLGUoKX0pLChuPWZ1bmN0aW9uKCl7cmV0dXJuIGkuY2FuY2VsQW5pbWF0aW9uRnJhbWUodCl9KS5ndWlkPVwidmpzLXJhZi1cIit0LHRoaXMub24oXCJkaXNwb3NlXCIsbiksdCk6dGhpcy5zZXRUaW1lb3V0KGUsMWUzLzYwKX0sZS5jYW5jZWxBbmltYXRpb25GcmFtZT1mdW5jdGlvbihlKXtpZih0aGlzLnN1cHBvcnRzUmFmXyl7aC5jYW5jZWxBbmltYXRpb25GcmFtZShlKTt2YXIgdD1mdW5jdGlvbigpe307cmV0dXJuIHQuZ3VpZD1cInZqcy1yYWYtXCIrZSx0aGlzLm9mZihcImRpc3Bvc2VcIix0KSxlfXJldHVybiB0aGlzLmNsZWFyVGltZW91dChlKX0sYy5yZWdpc3RlckNvbXBvbmVudD1mdW5jdGlvbihlLHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlfHwhZSl0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgY29tcG9uZW50IG5hbWUsIFwiJytlKydcIjsgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcuJyk7dmFyIG4saT1jLmdldENvbXBvbmVudChcIlRlY2hcIikscj1pJiZpLmlzVGVjaCh0KSxzPWM9PT10fHxjLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKHQucHJvdG90eXBlKTtpZihyfHwhcyl0aHJvdyBuPXI/XCJ0ZWNocyBtdXN0IGJlIHJlZ2lzdGVyZWQgdXNpbmcgVGVjaC5yZWdpc3RlclRlY2goKVwiOlwibXVzdCBiZSBhIENvbXBvbmVudCBzdWJjbGFzc1wiLG5ldyBFcnJvcignSWxsZWdhbCBjb21wb25lbnQsIFwiJytlKydcIjsgJytuK1wiLlwiKTtlPVJlKGUpLGMuY29tcG9uZW50c198fChjLmNvbXBvbmVudHNfPXt9KTt2YXIgbz1jLmdldENvbXBvbmVudChcIlBsYXllclwiKTtpZihcIlBsYXllclwiPT09ZSYmbyYmby5wbGF5ZXJzKXt2YXIgYT1vLnBsYXllcnMsbD1PYmplY3Qua2V5cyhhKTtpZihhJiYwPGwubGVuZ3RoJiZsLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gYVtlXX0pLmV2ZXJ5KEJvb2xlYW4pKXRocm93IG5ldyBFcnJvcihcIkNhbiBub3QgcmVnaXN0ZXIgUGxheWVyIGNvbXBvbmVudCBhZnRlciBwbGF5ZXIgaGFzIGJlZW4gY3JlYXRlZC5cIil9cmV0dXJuIGMuY29tcG9uZW50c19bZV09dH0sYy5nZXRDb21wb25lbnQ9ZnVuY3Rpb24oZSl7aWYoZSlyZXR1cm4gZT1SZShlKSxjLmNvbXBvbmVudHNfJiZjLmNvbXBvbmVudHNfW2VdP2MuY29tcG9uZW50c19bZV06dm9pZCAwfSxjfSgpO0ZlLnByb3RvdHlwZS5zdXBwb3J0c1JhZl89XCJmdW5jdGlvblwiPT10eXBlb2YgaC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGguY2FuY2VsQW5pbWF0aW9uRnJhbWUsRmUucmVnaXN0ZXJDb21wb25lbnQoXCJDb21wb25lbnRcIixGZSk7dmFyIEhlLFZlLHplLFdlLEtlPWgubmF2aWdhdG9yJiZoLm5hdmlnYXRvci51c2VyQWdlbnR8fFwiXCIsVWU9L0FwcGxlV2ViS2l0XFwvKFtcXGQuXSspL2kuZXhlYyhLZSkscWU9VWU/cGFyc2VGbG9hdChVZS5wb3AoKSk6bnVsbCxYZT0vaVBhZC9pLnRlc3QoS2UpLCRlPS9pUGhvbmUvaS50ZXN0KEtlKSYmIVhlLFllPS9pUG9kL2kudGVzdChLZSksR2U9JGV8fFhlfHxZZSxRZT0oSGU9S2UubWF0Y2goL09TIChcXGQrKV8vaSkpJiZIZVsxXT9IZVsxXTpudWxsLEplPS9BbmRyb2lkL2kudGVzdChLZSksWmU9ZnVuY3Rpb24oKXt2YXIgZT1LZS5tYXRjaCgvQW5kcm9pZCAoXFxkKykoPzpcXC4oXFxkKykpPyg/OlxcLihcXGQrKSkqL2kpO2lmKCFlKXJldHVybiBudWxsO3ZhciB0PWVbMV0mJnBhcnNlRmxvYXQoZVsxXSksbj1lWzJdJiZwYXJzZUZsb2F0KGVbMl0pO3JldHVybiB0JiZuP3BhcnNlRmxvYXQoZVsxXStcIi5cIitlWzJdKTp0fHxudWxsfSgpLGV0PUplJiZaZTw1JiZxZTw1MzcsdHQ9L0ZpcmVmb3gvaS50ZXN0KEtlKSxudD0vRWRnZS9pLnRlc3QoS2UpLGl0PSFudCYmKC9DaHJvbWUvaS50ZXN0KEtlKXx8L0NyaU9TL2kudGVzdChLZSkpLHJ0PShWZT1LZS5tYXRjaCgvKENocm9tZXxDcmlPUylcXC8oXFxkKykvKSkmJlZlWzJdP3BhcnNlRmxvYXQoVmVbMl0pOm51bGwsc3Q9KHplPS9NU0lFXFxzKFxcZCspXFwuXFxkLy5leGVjKEtlKSwhKFdlPXplJiZwYXJzZUZsb2F0KHplWzFdKSkmJi9UcmlkZW50XFwvNy4wL2kudGVzdChLZSkmJi9ydjoxMS4wLy50ZXN0KEtlKSYmKFdlPTExKSxXZSksb3Q9L1NhZmFyaS9pLnRlc3QoS2UpJiYhaXQmJiFKZSYmIW50LGF0PShvdHx8R2UpJiYhaXQsbHQ9QygpJiYoXCJvbnRvdWNoc3RhcnRcImluIGh8fGgubmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzfHxoLkRvY3VtZW50VG91Y2gmJmguZG9jdW1lbnQgaW5zdGFuY2VvZiBoLkRvY3VtZW50VG91Y2gpLGN0PU9iamVjdC5mcmVlemUoe0lTX0lQQUQ6WGUsSVNfSVBIT05FOiRlLElTX0lQT0Q6WWUsSVNfSU9TOkdlLElPU19WRVJTSU9OOlFlLElTX0FORFJPSUQ6SmUsQU5EUk9JRF9WRVJTSU9OOlplLElTX05BVElWRV9BTkRST0lEOmV0LElTX0ZJUkVGT1g6dHQsSVNfRURHRTpudCxJU19DSFJPTUU6aXQsQ0hST01FX1ZFUlNJT046cnQsSUVfVkVSU0lPTjpzdCxJU19TQUZBUkk6b3QsSVNfQU5ZX1NBRkFSSTphdCxUT1VDSF9FTkFCTEVEOmx0fSk7ZnVuY3Rpb24gdXQoZSx0LG4saSl7cmV0dXJuIGZ1bmN0aW9uKGUsdCxuKXtpZihcIm51bWJlclwiIT10eXBlb2YgdHx8dDwwfHxuPHQpdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ1wiK2UrXCInIG9uICdUaW1lUmFuZ2VzJzogVGhlIGluZGV4IHByb3ZpZGVkIChcIit0K1wiKSBpcyBub24tbnVtZXJpYyBvciBvdXQgb2YgYm91bmRzICgwLVwiK24rXCIpLlwiKX0oZSxpLG4ubGVuZ3RoLTEpLG5baV1bdF19ZnVuY3Rpb24gaHQoZSl7cmV0dXJuIHZvaWQgMD09PWV8fDA9PT1lLmxlbmd0aD97bGVuZ3RoOjAsc3RhcnQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIFRpbWVSYW5nZXMgb2JqZWN0IGlzIGVtcHR5XCIpfSxlbmQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIFRpbWVSYW5nZXMgb2JqZWN0IGlzIGVtcHR5XCIpfX06e2xlbmd0aDplLmxlbmd0aCxzdGFydDp1dC5iaW5kKG51bGwsXCJzdGFydFwiLDAsZSksZW5kOnV0LmJpbmQobnVsbCxcImVuZFwiLDEsZSl9fWZ1bmN0aW9uIGR0KGUsdCl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/aHQoZSk6dm9pZCAwPT09ZXx8dm9pZCAwPT09dD9odCgpOmh0KFtbZSx0XV0pfWZ1bmN0aW9uIHB0KGUsdCl7dmFyIG4saSxyPTA7aWYoIXQpcmV0dXJuIDA7ZSYmZS5sZW5ndGh8fChlPWR0KDAsMCkpO2Zvcih2YXIgcz0wO3M8ZS5sZW5ndGg7cysrKW49ZS5zdGFydChzKSx0PChpPWUuZW5kKHMpKSYmKGk9dCkscis9aS1uO3JldHVybiByL3R9Zm9yKHZhciBmdCx2dD17fSxndD1bW1wicmVxdWVzdEZ1bGxzY3JlZW5cIixcImV4aXRGdWxsc2NyZWVuXCIsXCJmdWxsc2NyZWVuRWxlbWVudFwiLFwiZnVsbHNjcmVlbkVuYWJsZWRcIixcImZ1bGxzY3JlZW5jaGFuZ2VcIixcImZ1bGxzY3JlZW5lcnJvclwiLFwiZnVsbHNjcmVlblwiXSxbXCJ3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlblwiLFwid2Via2l0RXhpdEZ1bGxzY3JlZW5cIixcIndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50XCIsXCJ3ZWJraXRGdWxsc2NyZWVuRW5hYmxlZFwiLFwid2Via2l0ZnVsbHNjcmVlbmNoYW5nZVwiLFwid2Via2l0ZnVsbHNjcmVlbmVycm9yXCIsXCItd2Via2l0LWZ1bGwtc2NyZWVuXCJdLFtcIm1velJlcXVlc3RGdWxsU2NyZWVuXCIsXCJtb3pDYW5jZWxGdWxsU2NyZWVuXCIsXCJtb3pGdWxsU2NyZWVuRWxlbWVudFwiLFwibW96RnVsbFNjcmVlbkVuYWJsZWRcIixcIm1vemZ1bGxzY3JlZW5jaGFuZ2VcIixcIm1vemZ1bGxzY3JlZW5lcnJvclwiLFwiLW1vei1mdWxsLXNjcmVlblwiXSxbXCJtc1JlcXVlc3RGdWxsc2NyZWVuXCIsXCJtc0V4aXRGdWxsc2NyZWVuXCIsXCJtc0Z1bGxzY3JlZW5FbGVtZW50XCIsXCJtc0Z1bGxzY3JlZW5FbmFibGVkXCIsXCJNU0Z1bGxzY3JlZW5DaGFuZ2VcIixcIk1TRnVsbHNjcmVlbkVycm9yXCIsXCItbXMtZnVsbHNjcmVlblwiXV0seXQ9Z3RbMF0sbXQ9ITEsX3Q9MDtfdDxndC5sZW5ndGg7X3QrKylpZihndFtfdF1bMV1pbiBkKXtmdD1ndFtfdF07YnJlYWt9aWYoZnQpe2Zvcih2YXIgYnQ9MDtidDxmdC5sZW5ndGg7YnQrKyl2dFt5dFtidF1dPWZ0W2J0XTttdD1mdFswXT09PXl0WzBdfWZ1bmN0aW9uIFR0KGUpe2lmKGUgaW5zdGFuY2VvZiBUdClyZXR1cm4gZTtcIm51bWJlclwiPT10eXBlb2YgZT90aGlzLmNvZGU9ZTpcInN0cmluZ1wiPT10eXBlb2YgZT90aGlzLm1lc3NhZ2U9ZTpiKGUpJiYoXCJudW1iZXJcIj09dHlwZW9mIGUuY29kZSYmKHRoaXMuY29kZT1lLmNvZGUpLF8odGhpcyxlKSksdGhpcy5tZXNzYWdlfHwodGhpcy5tZXNzYWdlPVR0LmRlZmF1bHRNZXNzYWdlc1t0aGlzLmNvZGVdfHxcIlwiKX1UdC5wcm90b3R5cGUuY29kZT0wLFR0LnByb3RvdHlwZS5tZXNzYWdlPVwiXCIsVHQucHJvdG90eXBlLnN0YXR1cz1udWxsLFR0LmVycm9yVHlwZXM9W1wiTUVESUFfRVJSX0NVU1RPTVwiLFwiTUVESUFfRVJSX0FCT1JURURcIixcIk1FRElBX0VSUl9ORVRXT1JLXCIsXCJNRURJQV9FUlJfREVDT0RFXCIsXCJNRURJQV9FUlJfU1JDX05PVF9TVVBQT1JURURcIixcIk1FRElBX0VSUl9FTkNSWVBURURcIl0sVHQuZGVmYXVsdE1lc3NhZ2VzPXsxOlwiWW91IGFib3J0ZWQgdGhlIG1lZGlhIHBsYXliYWNrXCIsMjpcIkEgbmV0d29yayBlcnJvciBjYXVzZWQgdGhlIG1lZGlhIGRvd25sb2FkIHRvIGZhaWwgcGFydC13YXkuXCIsMzpcIlRoZSBtZWRpYSBwbGF5YmFjayB3YXMgYWJvcnRlZCBkdWUgdG8gYSBjb3JydXB0aW9uIHByb2JsZW0gb3IgYmVjYXVzZSB0aGUgbWVkaWEgdXNlZCBmZWF0dXJlcyB5b3VyIGJyb3dzZXIgZGlkIG5vdCBzdXBwb3J0LlwiLDQ6XCJUaGUgbWVkaWEgY291bGQgbm90IGJlIGxvYWRlZCwgZWl0aGVyIGJlY2F1c2UgdGhlIHNlcnZlciBvciBuZXR3b3JrIGZhaWxlZCBvciBiZWNhdXNlIHRoZSBmb3JtYXQgaXMgbm90IHN1cHBvcnRlZC5cIiw1OlwiVGhlIG1lZGlhIGlzIGVuY3J5cHRlZCBhbmQgd2UgZG8gbm90IGhhdmUgdGhlIGtleXMgdG8gZGVjcnlwdCBpdC5cIn07Zm9yKHZhciBrdD0wO2t0PFR0LmVycm9yVHlwZXMubGVuZ3RoO2t0KyspVHRbVHQuZXJyb3JUeXBlc1trdF1dPWt0LFR0LnByb3RvdHlwZVtUdC5lcnJvclR5cGVzW2t0XV09a3Q7dmFyIEN0PWZ1bmN0aW9uKGUsdCl7dmFyIG4saT1udWxsO3RyeXtuPUpTT04ucGFyc2UoZSx0KX1jYXRjaChlKXtpPWV9cmV0dXJuW2ksbl19O2Z1bmN0aW9uIEV0KGUpe3JldHVybiBudWxsIT1lJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnRoZW59ZnVuY3Rpb24gd3QoZSl7RXQoZSkmJmUudGhlbihudWxsLGZ1bmN0aW9uKGUpe30pfXZhciBTdD1mdW5jdGlvbihpKXtyZXR1cm5bXCJraW5kXCIsXCJsYWJlbFwiLFwibGFuZ3VhZ2VcIixcImlkXCIsXCJpbkJhbmRNZXRhZGF0YVRyYWNrRGlzcGF0Y2hUeXBlXCIsXCJtb2RlXCIsXCJzcmNcIl0ucmVkdWNlKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gaVt0XSYmKGVbdF09aVt0XSksZX0se2N1ZXM6aS5jdWVzJiZBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoaS5jdWVzLGZ1bmN0aW9uKGUpe3JldHVybntzdGFydFRpbWU6ZS5zdGFydFRpbWUsZW5kVGltZTplLmVuZFRpbWUsdGV4dDplLnRleHQsaWQ6ZS5pZH19KX0pfSx4dD1mdW5jdGlvbihlKXt2YXIgdD1lLiQkKFwidHJhY2tcIiksbj1BcnJheS5wcm90b3R5cGUubWFwLmNhbGwodCxmdW5jdGlvbihlKXtyZXR1cm4gZS50cmFja30pO3JldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwodCxmdW5jdGlvbihlKXt2YXIgdD1TdChlLnRyYWNrKTtyZXR1cm4gZS5zcmMmJih0LnNyYz1lLnNyYyksdH0pLmNvbmNhdChBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZS50ZXh0VHJhY2tzKCksZnVuY3Rpb24oZSl7cmV0dXJuLTE9PT1uLmluZGV4T2YoZSl9KS5tYXAoU3QpKX0sanQ9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PW4uYWRkUmVtb3RlVGV4dFRyYWNrKGUpLnRyYWNrOyFlLnNyYyYmZS5jdWVzJiZlLmN1ZXMuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gdC5hZGRDdWUoZSl9KX0pLG4udGV4dFRyYWNrcygpfTtmdW5jdGlvbiBBdChlLHQpe3JldHVybiBlKHQ9e2V4cG9ydHM6e319LHQuZXhwb3J0cyksdC5leHBvcnRzfXZhciBQdD1BdChmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4oZSl7aWYoZSYmXCJvYmplY3RcIj09dHlwZW9mIGUpe3ZhciB0PWUud2hpY2h8fGUua2V5Q29kZXx8ZS5jaGFyQ29kZTt0JiYoZT10KX1pZihcIm51bWJlclwiPT10eXBlb2YgZSlyZXR1cm4gb1tlXTt2YXIgbixpPVN0cmluZyhlKTtyZXR1cm4obj1yW2kudG9Mb3dlckNhc2UoKV0pP246KG49c1tpLnRvTG93ZXJDYXNlKCldKXx8KDE9PT1pLmxlbmd0aD9pLmNoYXJDb2RlQXQoMCk6dm9pZCAwKX1uLmlzRXZlbnRLZXk9ZnVuY3Rpb24oZSx0KXtpZihlJiZcIm9iamVjdFwiPT10eXBlb2YgZSl7dmFyIG49ZS53aGljaHx8ZS5rZXlDb2RlfHxlLmNoYXJDb2RlO2lmKG51bGw9PW4pcmV0dXJuITE7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe3ZhciBpO2lmKGk9clt0LnRvTG93ZXJDYXNlKCldKXJldHVybiBpPT09bjtpZihpPXNbdC50b0xvd2VyQ2FzZSgpXSlyZXR1cm4gaT09PW59ZWxzZSBpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdD09PW47cmV0dXJuITF9fTt2YXIgcj0odD1lLmV4cG9ydHM9bikuY29kZT10LmNvZGVzPXtiYWNrc3BhY2U6OCx0YWI6OSxlbnRlcjoxMyxzaGlmdDoxNixjdHJsOjE3LGFsdDoxOCxcInBhdXNlL2JyZWFrXCI6MTksXCJjYXBzIGxvY2tcIjoyMCxlc2M6Mjcsc3BhY2U6MzIsXCJwYWdlIHVwXCI6MzMsXCJwYWdlIGRvd25cIjozNCxlbmQ6MzUsaG9tZTozNixsZWZ0OjM3LHVwOjM4LHJpZ2h0OjM5LGRvd246NDAsaW5zZXJ0OjQ1LGRlbGV0ZTo0Nixjb21tYW5kOjkxLFwibGVmdCBjb21tYW5kXCI6OTEsXCJyaWdodCBjb21tYW5kXCI6OTMsXCJudW1wYWQgKlwiOjEwNixcIm51bXBhZCArXCI6MTA3LFwibnVtcGFkIC1cIjoxMDksXCJudW1wYWQgLlwiOjExMCxcIm51bXBhZCAvXCI6MTExLFwibnVtIGxvY2tcIjoxNDQsXCJzY3JvbGwgbG9ja1wiOjE0NSxcIm15IGNvbXB1dGVyXCI6MTgyLFwibXkgY2FsY3VsYXRvclwiOjE4MyxcIjtcIjoxODYsXCI9XCI6MTg3LFwiLFwiOjE4OCxcIi1cIjoxODksXCIuXCI6MTkwLFwiL1wiOjE5MSxcImBcIjoxOTIsXCJbXCI6MjE5LFwiXFxcXFwiOjIyMCxcIl1cIjoyMjEsXCInXCI6MjIyfSxzPXQuYWxpYXNlcz17d2luZG93czo5MSxcIuKHp1wiOjE2LFwi4oylXCI6MTgsXCLijINcIjoxNyxcIuKMmFwiOjkxLGN0bDoxNyxjb250cm9sOjE3LG9wdGlvbjoxOCxwYXVzZToxOSxicmVhazoxOSxjYXBzOjIwLHJldHVybjoxMyxlc2NhcGU6Mjcsc3BjOjMyLHNwYWNlYmFyOjMyLHBndXA6MzMscGdkbjozNCxpbnM6NDUsZGVsOjQ2LGNtZDo5MX07Zm9yKGk9OTc7aTwxMjM7aSsrKXJbU3RyaW5nLmZyb21DaGFyQ29kZShpKV09aS0zMjtmb3IodmFyIGk9NDg7aTw1ODtpKyspcltpLTQ4XT1pO2ZvcihpPTE7aTwxMztpKyspcltcImZcIitpXT1pKzExMTtmb3IoaT0wO2k8MTA7aSsrKXJbXCJudW1wYWQgXCIraV09aSs5Njt2YXIgbz10Lm5hbWVzPXQudGl0bGU9e307Zm9yKGkgaW4gcilvW3JbaV1dPWk7Zm9yKHZhciBhIGluIHMpclthXT1zW2FdfSksTHQ9KFB0LmNvZGUsUHQuY29kZXMsUHQuYWxpYXNlcyxQdC5uYW1lcyxQdC50aXRsZSxcInZqcy1tb2RhbC1kaWFsb2dcIiksTXQ9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLm9wZW5lZF89bi5oYXNCZWVuT3BlbmVkXz1uLmhhc0JlZW5GaWxsZWRfPSExLG4uY2xvc2VhYmxlKCFuLm9wdGlvbnNfLnVuY2xvc2VhYmxlKSxuLmNvbnRlbnQobi5vcHRpb25zXy5jb250ZW50KSxuLmNvbnRlbnRFbF89eChcImRpdlwiLHtjbGFzc05hbWU6THQrXCItY29udGVudFwifSx7cm9sZTpcImRvY3VtZW50XCJ9KSxuLmRlc2NFbF89eChcInBcIix7Y2xhc3NOYW1lOkx0K1wiLWRlc2NyaXB0aW9uIHZqcy1jb250cm9sLXRleHRcIixpZDpuLmVsKCkuZ2V0QXR0cmlidXRlKFwiYXJpYS1kZXNjcmliZWRieVwiKX0pLGoobi5kZXNjRWxfLG4uZGVzY3JpcHRpb24oKSksbi5lbF8uYXBwZW5kQ2hpbGQobi5kZXNjRWxfKSxuLmVsXy5hcHBlbmRDaGlsZChuLmNvbnRlbnRFbF8pLG59ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZUVsPWZ1bmN0aW9uKCl7cmV0dXJuIGkucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImRpdlwiLHtjbGFzc05hbWU6dGhpcy5idWlsZENTU0NsYXNzKCksdGFiSW5kZXg6LTF9LHtcImFyaWEtZGVzY3JpYmVkYnlcIjp0aGlzLmlkKCkrXCJfZGVzY3JpcHRpb25cIixcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCIsXCJhcmlhLWxhYmVsXCI6dGhpcy5sYWJlbCgpLHJvbGU6XCJkaWFsb2dcIn0pfSx0LmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmNvbnRlbnRFbF89bnVsbCx0aGlzLmRlc2NFbF89bnVsbCx0aGlzLnByZXZpb3VzbHlBY3RpdmVFbF89bnVsbCxpLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyl9LHQuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVybiBMdCtcIiB2anMtaGlkZGVuIFwiK2kucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sdC5oYW5kbGVLZXlQcmVzcz1mdW5jdGlvbihlKXtQdC5pc0V2ZW50S2V5KGUsXCJFc2NhcGVcIikmJnRoaXMuY2xvc2VhYmxlKCkmJnRoaXMuY2xvc2UoKX0sdC5sYWJlbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmxvY2FsaXplKHRoaXMub3B0aW9uc18ubGFiZWx8fFwiTW9kYWwgV2luZG93XCIpfSx0LmRlc2NyaXB0aW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcHRpb25zXy5kZXNjcmlwdGlvbnx8dGhpcy5sb2NhbGl6ZShcIlRoaXMgaXMgYSBtb2RhbCB3aW5kb3cuXCIpO3JldHVybiB0aGlzLmNsb3NlYWJsZSgpJiYoZSs9XCIgXCIrdGhpcy5sb2NhbGl6ZShcIlRoaXMgbW9kYWwgY2FuIGJlIGNsb3NlZCBieSBwcmVzc2luZyB0aGUgRXNjYXBlIGtleSBvciBhY3RpdmF0aW5nIHRoZSBjbG9zZSBidXR0b24uXCIpKSxlfSx0Lm9wZW49ZnVuY3Rpb24oKXtpZighdGhpcy5vcGVuZWRfKXt2YXIgZT10aGlzLnBsYXllcigpO3RoaXMudHJpZ2dlcihcImJlZm9yZW1vZGFsb3BlblwiKSx0aGlzLm9wZW5lZF89ITAsKHRoaXMub3B0aW9uc18uZmlsbEFsd2F5c3x8IXRoaXMuaGFzQmVlbk9wZW5lZF8mJiF0aGlzLmhhc0JlZW5GaWxsZWRfKSYmdGhpcy5maWxsKCksdGhpcy53YXNQbGF5aW5nXz0hZS5wYXVzZWQoKSx0aGlzLm9wdGlvbnNfLnBhdXNlT25PcGVuJiZ0aGlzLndhc1BsYXlpbmdfJiZlLnBhdXNlKCksdGhpcy5jbG9zZWFibGUoKSYmdGhpcy5vbih0aGlzLmVsXy5vd25lckRvY3VtZW50LFwia2V5ZG93blwiLENlKHRoaXMsdGhpcy5oYW5kbGVLZXlQcmVzcykpLHRoaXMuaGFkQ29udHJvbHNfPWUuY29udHJvbHMoKSxlLmNvbnRyb2xzKCExKSx0aGlzLnNob3coKSx0aGlzLmNvbmRpdGlvbmFsRm9jdXNfKCksdGhpcy5lbCgpLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKSx0aGlzLnRyaWdnZXIoXCJtb2RhbG9wZW5cIiksdGhpcy5oYXNCZWVuT3BlbmVkXz0hMH19LHQub3BlbmVkPWZ1bmN0aW9uKGUpe3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgZSYmdGhpc1tlP1wib3BlblwiOlwiY2xvc2VcIl0oKSx0aGlzLm9wZW5lZF99LHQuY2xvc2U9ZnVuY3Rpb24oKXtpZih0aGlzLm9wZW5lZF8pe3ZhciBlPXRoaXMucGxheWVyKCk7dGhpcy50cmlnZ2VyKFwiYmVmb3JlbW9kYWxjbG9zZVwiKSx0aGlzLm9wZW5lZF89ITEsdGhpcy53YXNQbGF5aW5nXyYmdGhpcy5vcHRpb25zXy5wYXVzZU9uT3BlbiYmZS5wbGF5KCksdGhpcy5jbG9zZWFibGUoKSYmdGhpcy5vZmYodGhpcy5lbF8ub3duZXJEb2N1bWVudCxcImtleWRvd25cIixDZSh0aGlzLHRoaXMuaGFuZGxlS2V5UHJlc3MpKSx0aGlzLmhhZENvbnRyb2xzXyYmZS5jb250cm9scyghMCksdGhpcy5oaWRlKCksdGhpcy5lbCgpLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpLHRoaXMudHJpZ2dlcihcIm1vZGFsY2xvc2VcIiksdGhpcy5jb25kaXRpb25hbEJsdXJfKCksdGhpcy5vcHRpb25zXy50ZW1wb3JhcnkmJnRoaXMuZGlzcG9zZSgpfX0sdC5jbG9zZWFibGU9ZnVuY3Rpb24oZSl7aWYoXCJib29sZWFuXCI9PXR5cGVvZiBlKXt2YXIgdD10aGlzLmNsb3NlYWJsZV89ISFlLG49dGhpcy5nZXRDaGlsZChcImNsb3NlQnV0dG9uXCIpO2lmKHQmJiFuKXt2YXIgaT10aGlzLmNvbnRlbnRFbF87dGhpcy5jb250ZW50RWxfPXRoaXMuZWxfLG49dGhpcy5hZGRDaGlsZChcImNsb3NlQnV0dG9uXCIse2NvbnRyb2xUZXh0OlwiQ2xvc2UgTW9kYWwgRGlhbG9nXCJ9KSx0aGlzLmNvbnRlbnRFbF89aSx0aGlzLm9uKG4sXCJjbG9zZVwiLHRoaXMuY2xvc2UpfSF0JiZuJiYodGhpcy5vZmYobixcImNsb3NlXCIsdGhpcy5jbG9zZSksdGhpcy5yZW1vdmVDaGlsZChuKSxuLmRpc3Bvc2UoKSl9cmV0dXJuIHRoaXMuY2xvc2VhYmxlX30sdC5maWxsPWZ1bmN0aW9uKCl7dGhpcy5maWxsV2l0aCh0aGlzLmNvbnRlbnQoKSl9LHQuZmlsbFdpdGg9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5jb250ZW50RWwoKSxuPXQucGFyZW50Tm9kZSxpPXQubmV4dFNpYmxpbmc7dGhpcy50cmlnZ2VyKFwiYmVmb3JlbW9kYWxmaWxsXCIpLHRoaXMuaGFzQmVlbkZpbGxlZF89ITAsbi5yZW1vdmVDaGlsZCh0KSx0aGlzLmVtcHR5KCksJCh0LGUpLHRoaXMudHJpZ2dlcihcIm1vZGFsZmlsbFwiKSxpP24uaW5zZXJ0QmVmb3JlKHQsaSk6bi5hcHBlbmRDaGlsZCh0KTt2YXIgcj10aGlzLmdldENoaWxkKFwiY2xvc2VCdXR0b25cIik7ciYmbi5hcHBlbmRDaGlsZChyLmVsXyl9LHQuZW1wdHk9ZnVuY3Rpb24oKXt0aGlzLnRyaWdnZXIoXCJiZWZvcmVtb2RhbGVtcHR5XCIpLFUodGhpcy5jb250ZW50RWwoKSksdGhpcy50cmlnZ2VyKFwibW9kYWxlbXB0eVwiKX0sdC5jb250ZW50PWZ1bmN0aW9uKGUpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBlJiYodGhpcy5jb250ZW50Xz1lKSx0aGlzLmNvbnRlbnRffSx0LmNvbmRpdGlvbmFsRm9jdXNfPWZ1bmN0aW9uKCl7dmFyIGU9ZC5hY3RpdmVFbGVtZW50LHQ9dGhpcy5wbGF5ZXJfLmVsXzt0aGlzLnByZXZpb3VzbHlBY3RpdmVFbF89bnVsbCwodC5jb250YWlucyhlKXx8dD09PWUpJiYodGhpcy5wcmV2aW91c2x5QWN0aXZlRWxfPWUsdGhpcy5mb2N1cygpLHRoaXMub24oZCxcImtleWRvd25cIix0aGlzLmhhbmRsZUtleURvd24pKX0sdC5jb25kaXRpb25hbEJsdXJfPWZ1bmN0aW9uKCl7dGhpcy5wcmV2aW91c2x5QWN0aXZlRWxfJiYodGhpcy5wcmV2aW91c2x5QWN0aXZlRWxfLmZvY3VzKCksdGhpcy5wcmV2aW91c2x5QWN0aXZlRWxfPW51bGwpLHRoaXMub2ZmKGQsXCJrZXlkb3duXCIsdGhpcy5oYW5kbGVLZXlEb3duKX0sdC5oYW5kbGVLZXlEb3duPWZ1bmN0aW9uKGUpe2lmKFB0LmlzRXZlbnRLZXkoZSxcIlRhYlwiKSl7Zm9yKHZhciB0LG49dGhpcy5mb2N1c2FibGVFbHNfKCksaT10aGlzLmVsXy5xdWVyeVNlbGVjdG9yKFwiOmZvY3VzXCIpLHI9MDtyPG4ubGVuZ3RoO3IrKylpZihpPT09bltyXSl7dD1yO2JyZWFrfWQuYWN0aXZlRWxlbWVudD09PXRoaXMuZWxfJiYodD0wKSxlLnNoaWZ0S2V5JiYwPT09dD8obltuLmxlbmd0aC0xXS5mb2N1cygpLGUucHJldmVudERlZmF1bHQoKSk6ZS5zaGlmdEtleXx8dCE9PW4ubGVuZ3RoLTF8fChuWzBdLmZvY3VzKCksZS5wcmV2ZW50RGVmYXVsdCgpKX19LHQuZm9jdXNhYmxlRWxzXz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuZWxfLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqXCIpO3JldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZSxmdW5jdGlvbihlKXtyZXR1cm4oZSBpbnN0YW5jZW9mIGguSFRNTEFuY2hvckVsZW1lbnR8fGUgaW5zdGFuY2VvZiBoLkhUTUxBcmVhRWxlbWVudCkmJmUuaGFzQXR0cmlidXRlKFwiaHJlZlwiKXx8KGUgaW5zdGFuY2VvZiBoLkhUTUxJbnB1dEVsZW1lbnR8fGUgaW5zdGFuY2VvZiBoLkhUTUxTZWxlY3RFbGVtZW50fHxlIGluc3RhbmNlb2YgaC5IVE1MVGV4dEFyZWFFbGVtZW50fHxlIGluc3RhbmNlb2YgaC5IVE1MQnV0dG9uRWxlbWVudCkmJiFlLmhhc0F0dHJpYnV0ZShcImRpc2FibGVkXCIpfHxlIGluc3RhbmNlb2YgaC5IVE1MSUZyYW1lRWxlbWVudHx8ZSBpbnN0YW5jZW9mIGguSFRNTE9iamVjdEVsZW1lbnR8fGUgaW5zdGFuY2VvZiBoLkhUTUxFbWJlZEVsZW1lbnR8fGUuaGFzQXR0cmlidXRlKFwidGFiaW5kZXhcIikmJi0xIT09ZS5nZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKXx8ZS5oYXNBdHRyaWJ1dGUoXCJjb250ZW50ZWRpdGFibGVcIil9KX0sZX0oRmUpO010LnByb3RvdHlwZS5vcHRpb25zXz17cGF1c2VPbk9wZW46ITAsdGVtcG9yYXJ5OiEwfSxGZS5yZWdpc3RlckNvbXBvbmVudChcIk1vZGFsRGlhbG9nXCIsTXQpO3ZhciBOdD1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUpe3ZhciB0O3ZvaWQgMD09PWUmJihlPVtdKSwodD1pLmNhbGwodGhpcyl8fHRoaXMpLnRyYWNrc189W10sT2JqZWN0LmRlZmluZVByb3BlcnR5KHYodih0KSksXCJsZW5ndGhcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudHJhY2tzXy5sZW5ndGh9fSk7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspdC5hZGRUcmFjayhlW25dKTtyZXR1cm4gdH1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuYWRkVHJhY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy50cmFja3NfLmxlbmd0aDtcIlwiK3QgaW4gdGhpc3x8T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsdCx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudHJhY2tzX1t0XX19KSwtMT09PXRoaXMudHJhY2tzXy5pbmRleE9mKGUpJiYodGhpcy50cmFja3NfLnB1c2goZSksdGhpcy50cmlnZ2VyKHt0cmFjazplLHR5cGU6XCJhZGR0cmFja1wiLHRhcmdldDp0aGlzfSkpfSx0LnJlbW92ZVRyYWNrPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPTAsaT10aGlzLmxlbmd0aDtuPGk7bisrKWlmKHRoaXNbbl09PT1lKXsodD10aGlzW25dKS5vZmYmJnQub2ZmKCksdGhpcy50cmFja3NfLnNwbGljZShuLDEpO2JyZWFrfXQmJnRoaXMudHJpZ2dlcih7dHJhY2s6dCx0eXBlOlwicmVtb3ZldHJhY2tcIix0YXJnZXQ6dGhpc30pfSx0LmdldFRyYWNrQnlJZD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9bnVsbCxuPTAsaT10aGlzLmxlbmd0aDtuPGk7bisrKXt2YXIgcj10aGlzW25dO2lmKHIuaWQ9PT1lKXt0PXI7YnJlYWt9fXJldHVybiB0fSxlfSh3ZSk7Zm9yKHZhciBPdCBpbiBOdC5wcm90b3R5cGUuYWxsb3dlZEV2ZW50c189e2NoYW5nZTpcImNoYW5nZVwiLGFkZHRyYWNrOlwiYWRkdHJhY2tcIixyZW1vdmV0cmFjazpcInJlbW92ZXRyYWNrXCJ9LE50LnByb3RvdHlwZS5hbGxvd2VkRXZlbnRzXylOdC5wcm90b3R5cGVbXCJvblwiK090XT1udWxsO3ZhciBJdD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKU9iamVjdC5rZXlzKGVbbl0pLmxlbmd0aCYmdC5pZCE9PWVbbl0uaWQmJihlW25dLmVuYWJsZWQ9ITEpfSxEdD1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUpe3ZhciB0O3ZvaWQgMD09PWUmJihlPVtdKTtmb3IodmFyIG49ZS5sZW5ndGgtMTswPD1uO24tLSlpZihlW25dLmVuYWJsZWQpe0l0KGUsZVtuXSk7YnJlYWt9cmV0dXJuKHQ9aS5jYWxsKHRoaXMsZSl8fHRoaXMpLmNoYW5naW5nXz0hMSx0fWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5hZGRUcmFjaz1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2UuZW5hYmxlZCYmSXQodGhpcyxlKSxpLnByb3RvdHlwZS5hZGRUcmFjay5jYWxsKHRoaXMsZSksZS5hZGRFdmVudExpc3RlbmVyJiYoZS5lbmFibGVkQ2hhbmdlXz1mdW5jdGlvbigpe3QuY2hhbmdpbmdffHwodC5jaGFuZ2luZ189ITAsSXQodCxlKSx0LmNoYW5naW5nXz0hMSx0LnRyaWdnZXIoXCJjaGFuZ2VcIikpfSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJlbmFibGVkY2hhbmdlXCIsZS5lbmFibGVkQ2hhbmdlXykpfSx0LnJlbW92ZVRyYWNrPWZ1bmN0aW9uKGUpe2kucHJvdG90eXBlLnJlbW92ZVRyYWNrLmNhbGwodGhpcyxlKSxlLnJlbW92ZUV2ZW50TGlzdGVuZXImJmUuZW5hYmxlZENoYW5nZV8mJihlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlbmFibGVkY2hhbmdlXCIsZS5lbmFibGVkQ2hhbmdlXyksZS5lbmFibGVkQ2hhbmdlXz1udWxsKX0sZX0oTnQpLFJ0PWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspT2JqZWN0LmtleXMoZVtuXSkubGVuZ3RoJiZ0LmlkIT09ZVtuXS5pZCYmKGVbbl0uc2VsZWN0ZWQ9ITEpfSxCdD1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUpe3ZhciB0O3ZvaWQgMD09PWUmJihlPVtdKTtmb3IodmFyIG49ZS5sZW5ndGgtMTswPD1uO24tLSlpZihlW25dLnNlbGVjdGVkKXtSdChlLGVbbl0pO2JyZWFrfXJldHVybih0PWkuY2FsbCh0aGlzLGUpfHx0aGlzKS5jaGFuZ2luZ189ITEsT2JqZWN0LmRlZmluZVByb3BlcnR5KHYodih0KSksXCJzZWxlY3RlZEluZGV4XCIse2dldDpmdW5jdGlvbigpe2Zvcih2YXIgZT0wO2U8dGhpcy5sZW5ndGg7ZSsrKWlmKHRoaXNbZV0uc2VsZWN0ZWQpcmV0dXJuIGU7cmV0dXJuLTF9LHNldDpmdW5jdGlvbigpe319KSx0fWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5hZGRUcmFjaz1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2Uuc2VsZWN0ZWQmJlJ0KHRoaXMsZSksaS5wcm90b3R5cGUuYWRkVHJhY2suY2FsbCh0aGlzLGUpLGUuYWRkRXZlbnRMaXN0ZW5lciYmKGUuc2VsZWN0ZWRDaGFuZ2VfPWZ1bmN0aW9uKCl7dC5jaGFuZ2luZ198fCh0LmNoYW5naW5nXz0hMCxSdCh0LGUpLHQuY2hhbmdpbmdfPSExLHQudHJpZ2dlcihcImNoYW5nZVwiKSl9LGUuYWRkRXZlbnRMaXN0ZW5lcihcInNlbGVjdGVkY2hhbmdlXCIsZS5zZWxlY3RlZENoYW5nZV8pKX0sdC5yZW1vdmVUcmFjaz1mdW5jdGlvbihlKXtpLnByb3RvdHlwZS5yZW1vdmVUcmFjay5jYWxsKHRoaXMsZSksZS5yZW1vdmVFdmVudExpc3RlbmVyJiZlLnNlbGVjdGVkQ2hhbmdlXyYmKGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNlbGVjdGVkY2hhbmdlXCIsZS5zZWxlY3RlZENoYW5nZV8pLGUuc2VsZWN0ZWRDaGFuZ2VfPW51bGwpfSxlfShOdCksRnQ9ZnVuY3Rpb24obil7ZnVuY3Rpb24gZSgpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31mKGUsbik7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuYWRkVHJhY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztuLnByb3RvdHlwZS5hZGRUcmFjay5jYWxsKHRoaXMsZSksdGhpcy5xdWV1ZUNoYW5nZV98fCh0aGlzLnF1ZXVlQ2hhbmdlXz1mdW5jdGlvbigpe3JldHVybiB0LnF1ZXVlVHJpZ2dlcihcImNoYW5nZVwiKX0pLHRoaXMudHJpZ2dlclNlbGVjdGVkbGFuZ3VhZ2VjaGFuZ2V8fCh0aGlzLnRyaWdnZXJTZWxlY3RlZGxhbmd1YWdlY2hhbmdlXz1mdW5jdGlvbigpe3JldHVybiB0LnRyaWdnZXIoXCJzZWxlY3RlZGxhbmd1YWdlY2hhbmdlXCIpfSksZS5hZGRFdmVudExpc3RlbmVyKFwibW9kZWNoYW5nZVwiLHRoaXMucXVldWVDaGFuZ2VfKTstMT09PVtcIm1ldGFkYXRhXCIsXCJjaGFwdGVyc1wiXS5pbmRleE9mKGUua2luZCkmJmUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vZGVjaGFuZ2VcIix0aGlzLnRyaWdnZXJTZWxlY3RlZGxhbmd1YWdlY2hhbmdlXyl9LHQucmVtb3ZlVHJhY2s9ZnVuY3Rpb24oZSl7bi5wcm90b3R5cGUucmVtb3ZlVHJhY2suY2FsbCh0aGlzLGUpLGUucmVtb3ZlRXZlbnRMaXN0ZW5lciYmKHRoaXMucXVldWVDaGFuZ2VfJiZlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb2RlY2hhbmdlXCIsdGhpcy5xdWV1ZUNoYW5nZV8pLHRoaXMuc2VsZWN0ZWRsYW5ndWFnZWNoYW5nZV8mJmUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vZGVjaGFuZ2VcIix0aGlzLnRyaWdnZXJTZWxlY3RlZGxhbmd1YWdlY2hhbmdlXykpfSxlfShOdCksSHQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZvaWQgMD09PWUmJihlPVtdKSx0aGlzLnRyYWNrRWxlbWVudHNfPVtdLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibGVuZ3RoXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRyYWNrRWxlbWVudHNfLmxlbmd0aH19KTtmb3IodmFyIHQ9MCxuPWUubGVuZ3RoO3Q8bjt0KyspdGhpcy5hZGRUcmFja0VsZW1lbnRfKGVbdF0pfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmFkZFRyYWNrRWxlbWVudF89ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy50cmFja0VsZW1lbnRzXy5sZW5ndGg7XCJcIit0IGluIHRoaXN8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLHQse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRyYWNrRWxlbWVudHNfW3RdfX0pLC0xPT09dGhpcy50cmFja0VsZW1lbnRzXy5pbmRleE9mKGUpJiZ0aGlzLnRyYWNrRWxlbWVudHNfLnB1c2goZSl9LHQuZ2V0VHJhY2tFbGVtZW50QnlUcmFja189ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49MCxpPXRoaXMudHJhY2tFbGVtZW50c18ubGVuZ3RoO248aTtuKyspaWYoZT09PXRoaXMudHJhY2tFbGVtZW50c19bbl0udHJhY2spe3Q9dGhpcy50cmFja0VsZW1lbnRzX1tuXTticmVha31yZXR1cm4gdH0sdC5yZW1vdmVUcmFja0VsZW1lbnRfPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLG49dGhpcy50cmFja0VsZW1lbnRzXy5sZW5ndGg7dDxuO3QrKylpZihlPT09dGhpcy50cmFja0VsZW1lbnRzX1t0XSl7dGhpcy50cmFja0VsZW1lbnRzX1t0XS50cmFjayYmXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy50cmFja0VsZW1lbnRzX1t0XS50cmFjay5vZmYmJnRoaXMudHJhY2tFbGVtZW50c19bdF0udHJhY2sub2ZmKCksXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy50cmFja0VsZW1lbnRzX1t0XS5vZmYmJnRoaXMudHJhY2tFbGVtZW50c19bdF0ub2ZmKCksdGhpcy50cmFja0VsZW1lbnRzXy5zcGxpY2UodCwxKTticmVha319LGV9KCksVnQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUpe3QucHJvdG90eXBlLnNldEN1ZXNfLmNhbGwodGhpcyxlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImxlbmd0aFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sZW5ndGhffX0pfXZhciBlPXQucHJvdG90eXBlO3JldHVybiBlLnNldEN1ZXNfPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubGVuZ3RofHwwLG49MCxpPWUubGVuZ3RoO3RoaXMuY3Vlc189ZSx0aGlzLmxlbmd0aF89ZS5sZW5ndGg7dmFyIHI9ZnVuY3Rpb24oZSl7XCJcIitlIGluIHRoaXN8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiXCIrZSx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3Vlc19bZV19fSl9O2lmKHQ8aSlmb3Iobj10O248aTtuKyspci5jYWxsKHRoaXMsbil9LGUuZ2V0Q3VlQnlJZD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9bnVsbCxuPTAsaT10aGlzLmxlbmd0aDtuPGk7bisrKXt2YXIgcj10aGlzW25dO2lmKHIuaWQ9PT1lKXt0PXI7YnJlYWt9fXJldHVybiB0fSx0fSgpLHp0PXthbHRlcm5hdGl2ZTpcImFsdGVybmF0aXZlXCIsY2FwdGlvbnM6XCJjYXB0aW9uc1wiLG1haW46XCJtYWluXCIsc2lnbjpcInNpZ25cIixzdWJ0aXRsZXM6XCJzdWJ0aXRsZXNcIixjb21tZW50YXJ5OlwiY29tbWVudGFyeVwifSxXdD17YWx0ZXJuYXRpdmU6XCJhbHRlcm5hdGl2ZVwiLGRlc2NyaXB0aW9uczpcImRlc2NyaXB0aW9uc1wiLG1haW46XCJtYWluXCIsXCJtYWluLWRlc2NcIjpcIm1haW4tZGVzY1wiLHRyYW5zbGF0aW9uOlwidHJhbnNsYXRpb25cIixjb21tZW50YXJ5OlwiY29tbWVudGFyeVwifSxLdD17c3VidGl0bGVzOlwic3VidGl0bGVzXCIsY2FwdGlvbnM6XCJjYXB0aW9uc1wiLGRlc2NyaXB0aW9uczpcImRlc2NyaXB0aW9uc1wiLGNoYXB0ZXJzOlwiY2hhcHRlcnNcIixtZXRhZGF0YTpcIm1ldGFkYXRhXCJ9LFV0PXtkaXNhYmxlZDpcImRpc2FibGVkXCIsaGlkZGVuOlwiaGlkZGVuXCIsc2hvd2luZzpcInNob3dpbmdcIn0scXQ9ZnVuY3Rpb24ocyl7ZnVuY3Rpb24gZShlKXt2YXIgdDt2b2lkIDA9PT1lJiYoZT17fSksdD1zLmNhbGwodGhpcyl8fHRoaXM7dmFyIG49e2lkOmUuaWR8fFwidmpzX3RyYWNrX1wiK2VlKCksa2luZDplLmtpbmR8fFwiXCIsbGFiZWw6ZS5sYWJlbHx8XCJcIixsYW5ndWFnZTplLmxhbmd1YWdlfHxcIlwifSxpPWZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh2KHYodCkpLGUse2dldDpmdW5jdGlvbigpe3JldHVybiBuW2VdfSxzZXQ6ZnVuY3Rpb24oKXt9fSl9O2Zvcih2YXIgciBpbiBuKWkocik7cmV0dXJuIHR9cmV0dXJuIGYoZSxzKSxlfSh3ZSksWHQ9ZnVuY3Rpb24oZSl7dmFyIHQ9W1wicHJvdG9jb2xcIixcImhvc3RuYW1lXCIsXCJwb3J0XCIsXCJwYXRobmFtZVwiLFwic2VhcmNoXCIsXCJoYXNoXCIsXCJob3N0XCJdLG49ZC5jcmVhdGVFbGVtZW50KFwiYVwiKTtuLmhyZWY9ZTt2YXIgaSxyPVwiXCI9PT1uLmhvc3QmJlwiZmlsZTpcIiE9PW4ucHJvdG9jb2w7ciYmKChpPWQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuaW5uZXJIVE1MPSc8YSBocmVmPVwiJytlKydcIj48L2E+JyxuPWkuZmlyc3RDaGlsZCxpLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsXCJkaXNwbGF5Om5vbmU7IHBvc2l0aW9uOmFic29sdXRlO1wiKSxkLmJvZHkuYXBwZW5kQ2hpbGQoaSkpO2Zvcih2YXIgcz17fSxvPTA7bzx0Lmxlbmd0aDtvKyspc1t0W29dXT1uW3Rbb11dO3JldHVyblwiaHR0cDpcIj09PXMucHJvdG9jb2wmJihzLmhvc3Q9cy5ob3N0LnJlcGxhY2UoLzo4MCQvLFwiXCIpKSxcImh0dHBzOlwiPT09cy5wcm90b2NvbCYmKHMuaG9zdD1zLmhvc3QucmVwbGFjZSgvOjQ0MyQvLFwiXCIpKSxzLnByb3RvY29sfHwocy5wcm90b2NvbD1oLmxvY2F0aW9uLnByb3RvY29sKSxyJiZkLmJvZHkucmVtb3ZlQ2hpbGQoaSksc30sJHQ9ZnVuY3Rpb24oZSl7aWYoIWUubWF0Y2goL15odHRwcz86XFwvXFwvLykpe3ZhciB0PWQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt0LmlubmVySFRNTD0nPGEgaHJlZj1cIicrZSsnXCI+eDwvYT4nLGU9dC5maXJzdENoaWxkLmhyZWZ9cmV0dXJuIGV9LFl0PWZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXt2YXIgdD0vXihcXC8/KShbXFxzXFxTXSo/KSgoPzpcXC57MSwyfXxbXlxcL10rPykoXFwuKFteXFwuXFwvXFw/XSspKSkoPzpbXFwvXSp8W1xcP10uKikkL2kuZXhlYyhlKTtpZih0KXJldHVybiB0LnBvcCgpLnRvTG93ZXJDYXNlKCl9cmV0dXJuXCJcIn0sR3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9aC5sb2NhdGlvbixuPVh0KGUpO3JldHVybihcIjpcIj09PW4ucHJvdG9jb2w/dC5wcm90b2NvbDpuLnByb3RvY29sKStuLmhvc3QhPT10LnByb3RvY29sK3QuaG9zdH0sUXQ9T2JqZWN0LmZyZWV6ZSh7cGFyc2VVcmw6WHQsZ2V0QWJzb2x1dGVVUkw6JHQsZ2V0RmlsZUV4dGVuc2lvbjpZdCxpc0Nyb3NzT3JpZ2luOkd0fSksSnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9WnQuY2FsbChlKTtyZXR1cm5cIltvYmplY3QgRnVuY3Rpb25dXCI9PT10fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZcIltvYmplY3QgUmVnRXhwXVwiIT09dHx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKGU9PT13aW5kb3cuc2V0VGltZW91dHx8ZT09PXdpbmRvdy5hbGVydHx8ZT09PXdpbmRvdy5jb25maXJtfHxlPT09d2luZG93LnByb21wdCl9LFp0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7dmFyIGVuPUF0KGZ1bmN0aW9uKGUsdCl7KHQ9ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL15cXHMqfFxccyokL2csXCJcIil9KS5sZWZ0PWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL15cXHMqLyxcIlwiKX0sdC5yaWdodD1mdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXHMqJC8sXCJcIil9fSksdG49KGVuLmxlZnQsZW4ucmlnaHQsRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nKSxubj0vXlxccypjbGFzc1xcYi8scm49ZnVuY3Rpb24oZSl7dHJ5e3ZhciB0PXRuLmNhbGwoZSk7cmV0dXJuIG5uLnRlc3QodCl9Y2F0Y2goZSl7cmV0dXJuITF9fSxzbj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLG9uPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyxhbj1mdW5jdGlvbihlKXtpZighZSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZcIm9iamVjdFwiIT10eXBlb2YgZSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiYhZS5wcm90b3R5cGUpcmV0dXJuITA7aWYob24pcmV0dXJuIGZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4hcm4oZSkmJih0bi5jYWxsKGUpLCEwKX1jYXRjaChlKXtyZXR1cm4hMX19KGUpO2lmKHJuKGUpKXJldHVybiExO3ZhciB0PXNuLmNhbGwoZSk7cmV0dXJuXCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT09dHx8XCJbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXVwiPT09dH0sbG49T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxjbj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHVuPWZ1bmN0aW9uKGUsdCxuKXtpZighYW4odCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIG11c3QgYmUgYSBmdW5jdGlvblwiKTt2YXIgaTszPD1hcmd1bWVudHMubGVuZ3RoJiYoaT1uKSxcIltvYmplY3QgQXJyYXldXCI9PT1sbi5jYWxsKGUpP2Z1bmN0aW9uKGUsdCxuKXtmb3IodmFyIGk9MCxyPWUubGVuZ3RoO2k8cjtpKyspY24uY2FsbChlLGkpJiYobnVsbD09bj90KGVbaV0saSxlKTp0LmNhbGwobixlW2ldLGksZSkpfShlLHQsaSk6XCJzdHJpbmdcIj09dHlwZW9mIGU/ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgaT0wLHI9ZS5sZW5ndGg7aTxyO2krKyludWxsPT1uP3QoZS5jaGFyQXQoaSksaSxlKTp0LmNhbGwobixlLmNoYXJBdChpKSxpLGUpfShlLHQsaSk6ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgaSBpbiBlKWNuLmNhbGwoZSxpKSYmKG51bGw9PW4/dChlW2ldLGksZSk6dC5jYWxsKG4sZVtpXSxpLGUpKX0oZSx0LGkpfSxobj1mdW5jdGlvbihlKXtpZighZSlyZXR1cm57fTt2YXIgcz17fTtyZXR1cm4gdW4oZW4oZSkuc3BsaXQoXCJcXG5cIiksZnVuY3Rpb24oZSl7dmFyIHQsbj1lLmluZGV4T2YoXCI6XCIpLGk9ZW4oZS5zbGljZSgwLG4pKS50b0xvd2VyQ2FzZSgpLHI9ZW4oZS5zbGljZShuKzEpKTtcInVuZGVmaW5lZFwiPT10eXBlb2Ygc1tpXT9zW2ldPXI6KHQ9c1tpXSxcIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCk/c1tpXS5wdXNoKHIpOnNbaV09W3NbaV0scl0pfSksc30sZG49ZnVuY3Rpb24oKXtmb3IodmFyIGU9e30sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciBuPWFyZ3VtZW50c1t0XTtmb3IodmFyIGkgaW4gbilwbi5jYWxsKG4saSkmJihlW2ldPW5baV0pfXJldHVybiBlfSxwbj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3ZhciBmbj1nbjtmdW5jdGlvbiB2bihlLHQsbil7dmFyIGk9ZTtyZXR1cm4gSnQodCk/KG49dCxcInN0cmluZ1wiPT10eXBlb2YgZSYmKGk9e3VyaTplfSkpOmk9ZG4odCx7dXJpOmV9KSxpLmNhbGxiYWNrPW4saX1mdW5jdGlvbiBnbihlLHQsbil7cmV0dXJuIHluKHQ9dm4oZSx0LG4pKX1mdW5jdGlvbiB5bihpKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgaS5jYWxsYmFjayl0aHJvdyBuZXcgRXJyb3IoXCJjYWxsYmFjayBhcmd1bWVudCBtaXNzaW5nXCIpO3ZhciByPSExLHM9ZnVuY3Rpb24oZSx0LG4pe3J8fChyPSEwLGkuY2FsbGJhY2soZSx0LG4pKX07ZnVuY3Rpb24gdChlKXtyZXR1cm4gY2xlYXJUaW1lb3V0KGwpLGUgaW5zdGFuY2VvZiBFcnJvcnx8KGU9bmV3IEVycm9yKFwiXCIrKGV8fFwiVW5rbm93biBYTUxIdHRwUmVxdWVzdCBFcnJvclwiKSkpLGUuc3RhdHVzQ29kZT0wLHMoZSx2KX1mdW5jdGlvbiBlKCl7aWYoIW8pe3ZhciBlO2NsZWFyVGltZW91dChsKSxlPWkudXNlWERSJiZ2b2lkIDA9PT1hLnN0YXR1cz8yMDA6MTIyMz09PWEuc3RhdHVzPzIwNDphLnN0YXR1czt2YXIgdD12LG49bnVsbDtyZXR1cm4gMCE9PWU/KHQ9e2JvZHk6ZnVuY3Rpb24oKXt2YXIgZT12b2lkIDA7aWYoZT1hLnJlc3BvbnNlP2EucmVzcG9uc2U6YS5yZXNwb25zZVRleHR8fGZ1bmN0aW9uKGUpe2lmKFwiZG9jdW1lbnRcIj09PWUucmVzcG9uc2VUeXBlKXJldHVybiBlLnJlc3BvbnNlWE1MO3ZhciB0PWUucmVzcG9uc2VYTUwmJlwicGFyc2VyZXJyb3JcIj09PWUucmVzcG9uc2VYTUwuZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lO3JldHVyblwiXCIhPT1lLnJlc3BvbnNlVHlwZXx8dD9udWxsOmUucmVzcG9uc2VYTUx9KGEpLGYpdHJ5e2U9SlNPTi5wYXJzZShlKX1jYXRjaChlKXt9cmV0dXJuIGV9KCksc3RhdHVzQ29kZTplLG1ldGhvZDp1LGhlYWRlcnM6e30sdXJsOmMscmF3UmVxdWVzdDphfSxhLmdldEFsbFJlc3BvbnNlSGVhZGVycyYmKHQuaGVhZGVycz1obihhLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSkpOm49bmV3IEVycm9yKFwiSW50ZXJuYWwgWE1MSHR0cFJlcXVlc3QgRXJyb3JcIikscyhuLHQsdC5ib2R5KX19dmFyIG4sbyxhPWkueGhyfHxudWxsO2F8fChhPWkuY29yc3x8aS51c2VYRFI/bmV3IGduLlhEb21haW5SZXF1ZXN0Om5ldyBnbi5YTUxIdHRwUmVxdWVzdCk7dmFyIGwsYz1hLnVybD1pLnVyaXx8aS51cmwsdT1hLm1ldGhvZD1pLm1ldGhvZHx8XCJHRVRcIixoPWkuYm9keXx8aS5kYXRhLGQ9YS5oZWFkZXJzPWkuaGVhZGVyc3x8e30scD0hIWkuc3luYyxmPSExLHY9e2JvZHk6dm9pZCAwLGhlYWRlcnM6e30sc3RhdHVzQ29kZTowLG1ldGhvZDp1LHVybDpjLHJhd1JlcXVlc3Q6YX07aWYoXCJqc29uXCJpbiBpJiYhMSE9PWkuanNvbiYmKGY9ITAsZC5hY2NlcHR8fGQuQWNjZXB0fHwoZC5BY2NlcHQ9XCJhcHBsaWNhdGlvbi9qc29uXCIpLFwiR0VUXCIhPT11JiZcIkhFQURcIiE9PXUmJihkW1wiY29udGVudC10eXBlXCJdfHxkW1wiQ29udGVudC1UeXBlXCJdfHwoZFtcIkNvbnRlbnQtVHlwZVwiXT1cImFwcGxpY2F0aW9uL2pzb25cIiksaD1KU09OLnN0cmluZ2lmeSghMD09PWkuanNvbj9oOmkuanNvbikpKSxhLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpezQ9PT1hLnJlYWR5U3RhdGUmJnNldFRpbWVvdXQoZSwwKX0sYS5vbmxvYWQ9ZSxhLm9uZXJyb3I9dCxhLm9ucHJvZ3Jlc3M9ZnVuY3Rpb24oKXt9LGEub25hYm9ydD1mdW5jdGlvbigpe289ITB9LGEub250aW1lb3V0PXQsYS5vcGVuKHUsYywhcCxpLnVzZXJuYW1lLGkucGFzc3dvcmQpLHB8fChhLndpdGhDcmVkZW50aWFscz0hIWkud2l0aENyZWRlbnRpYWxzKSwhcCYmMDxpLnRpbWVvdXQmJihsPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtpZighbyl7bz0hMCxhLmFib3J0KFwidGltZW91dFwiKTt2YXIgZT1uZXcgRXJyb3IoXCJYTUxIdHRwUmVxdWVzdCB0aW1lb3V0XCIpO2UuY29kZT1cIkVUSU1FRE9VVFwiLHQoZSl9fSxpLnRpbWVvdXQpKSxhLnNldFJlcXVlc3RIZWFkZXIpZm9yKG4gaW4gZClkLmhhc093blByb3BlcnR5KG4pJiZhLnNldFJlcXVlc3RIZWFkZXIobixkW25dKTtlbHNlIGlmKGkuaGVhZGVycyYmIWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkodCkpcmV0dXJuITE7cmV0dXJuITB9KGkuaGVhZGVycykpdGhyb3cgbmV3IEVycm9yKFwiSGVhZGVycyBjYW5ub3QgYmUgc2V0IG9uIGFuIFhEb21haW5SZXF1ZXN0IG9iamVjdFwiKTtyZXR1cm5cInJlc3BvbnNlVHlwZVwiaW4gaSYmKGEucmVzcG9uc2VUeXBlPWkucmVzcG9uc2VUeXBlKSxcImJlZm9yZVNlbmRcImluIGkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGkuYmVmb3JlU2VuZCYmaS5iZWZvcmVTZW5kKGEpLGEuc2VuZChofHxudWxsKSxhfWduLlhNTEh0dHBSZXF1ZXN0PWguWE1MSHR0cFJlcXVlc3R8fGZ1bmN0aW9uKCl7fSxnbi5YRG9tYWluUmVxdWVzdD1cIndpdGhDcmVkZW50aWFsc1wiaW4gbmV3IGduLlhNTEh0dHBSZXF1ZXN0P2duLlhNTEh0dHBSZXF1ZXN0OmguWERvbWFpblJlcXVlc3QsZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl0KGVbbl0pfShbXCJnZXRcIixcInB1dFwiLFwicG9zdFwiLFwicGF0Y2hcIixcImhlYWRcIixcImRlbGV0ZVwiXSxmdW5jdGlvbihpKXtnbltcImRlbGV0ZVwiPT09aT9cImRlbFwiOmldPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4odD12bihlLHQsbikpLm1ldGhvZD1pLnRvVXBwZXJDYXNlKCkseW4odCl9fSk7dmFyIG1uPWZ1bmN0aW9uKGUsdCl7dmFyIG49bmV3IGguV2ViVlRULlBhcnNlcihoLGgudnR0anMsaC5XZWJWVFQuU3RyaW5nRGVjb2RlcigpKSxpPVtdO24ub25jdWU9ZnVuY3Rpb24oZSl7dC5hZGRDdWUoZSl9LG4ub25wYXJzaW5nZXJyb3I9ZnVuY3Rpb24oZSl7aS5wdXNoKGUpfSxuLm9uZmx1c2g9ZnVuY3Rpb24oKXt0LnRyaWdnZXIoe3R5cGU6XCJsb2FkZWRkYXRhXCIsdGFyZ2V0OnR9KX0sbi5wYXJzZShlKSwwPGkubGVuZ3RoJiYoaC5jb25zb2xlJiZoLmNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQmJmguY29uc29sZS5ncm91cENvbGxhcHNlZChcIlRleHQgVHJhY2sgcGFyc2luZyBlcnJvcnMgZm9yIFwiK3Quc3JjKSxpLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGcuZXJyb3IoZSl9KSxoLmNvbnNvbGUmJmguY29uc29sZS5ncm91cEVuZCYmaC5jb25zb2xlLmdyb3VwRW5kKCkpLG4uZmx1c2goKX0sX249ZnVuY3Rpb24oYyl7ZnVuY3Rpb24gZShlKXt2YXIgdDtpZih2b2lkIDA9PT1lJiYoZT17fSksIWUudGVjaCl0aHJvdyBuZXcgRXJyb3IoXCJBIHRlY2ggd2FzIG5vdCBwcm92aWRlZC5cIik7dmFyIG49QmUoZSx7a2luZDpLdFtlLmtpbmRdfHxcInN1YnRpdGxlc1wiLGxhbmd1YWdlOmUubGFuZ3VhZ2V8fGUuc3JjbGFuZ3x8XCJcIn0pLGk9VXRbbi5tb2RlXXx8XCJkaXNhYmxlZFwiLHI9bi5kZWZhdWx0O1wibWV0YWRhdGFcIiE9PW4ua2luZCYmXCJjaGFwdGVyc1wiIT09bi5raW5kfHwoaT1cImhpZGRlblwiKSwodD1jLmNhbGwodGhpcyxuKXx8dGhpcykudGVjaF89bi50ZWNoLHQuY3Vlc189W10sdC5hY3RpdmVDdWVzXz1bXTt2YXIgcz1uZXcgVnQodC5jdWVzXyksbz1uZXcgVnQodC5hY3RpdmVDdWVzXyksYT0hMSxsPUNlKHYodih0KSksZnVuY3Rpb24oKXt0aGlzLmFjdGl2ZUN1ZXM9dGhpcy5hY3RpdmVDdWVzLGEmJih0aGlzLnRyaWdnZXIoXCJjdWVjaGFuZ2VcIiksYT0hMSl9KTtyZXR1cm5cImRpc2FibGVkXCIhPT1pJiZ0LnRlY2hfLnJlYWR5KGZ1bmN0aW9uKCl7dC50ZWNoXy5vbihcInRpbWV1cGRhdGVcIixsKX0sITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHYodih0KSkse2RlZmF1bHQ6e2dldDpmdW5jdGlvbigpe3JldHVybiByfSxzZXQ6ZnVuY3Rpb24oKXt9fSxtb2RlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sc2V0OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7VXRbZV0mJihcImRpc2FibGVkXCIhPT0oaT1lKT90aGlzLnRlY2hfLnJlYWR5KGZ1bmN0aW9uKCl7dC50ZWNoXy5vbihcInRpbWV1cGRhdGVcIixsKX0sITApOnRoaXMudGVjaF8ub2ZmKFwidGltZXVwZGF0ZVwiLGwpLHRoaXMudHJpZ2dlcihcIm1vZGVjaGFuZ2VcIikpfX0sY3Vlczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubG9hZGVkXz9zOm51bGx9LHNldDpmdW5jdGlvbigpe319LGFjdGl2ZUN1ZXM6e2dldDpmdW5jdGlvbigpe2lmKCF0aGlzLmxvYWRlZF8pcmV0dXJuIG51bGw7aWYoMD09PXRoaXMuY3Vlcy5sZW5ndGgpcmV0dXJuIG87Zm9yKHZhciBlPXRoaXMudGVjaF8uY3VycmVudFRpbWUoKSx0PVtdLG49MCxpPXRoaXMuY3Vlcy5sZW5ndGg7bjxpO24rKyl7dmFyIHI9dGhpcy5jdWVzW25dO3Iuc3RhcnRUaW1lPD1lJiZyLmVuZFRpbWU+PWU/dC5wdXNoKHIpOnIuc3RhcnRUaW1lPT09ci5lbmRUaW1lJiZyLnN0YXJ0VGltZTw9ZSYmci5zdGFydFRpbWUrLjU+PWUmJnQucHVzaChyKX1pZihhPSExLHQubGVuZ3RoIT09dGhpcy5hY3RpdmVDdWVzXy5sZW5ndGgpYT0hMDtlbHNlIGZvcih2YXIgcz0wO3M8dC5sZW5ndGg7cysrKS0xPT09dGhpcy5hY3RpdmVDdWVzXy5pbmRleE9mKHRbc10pJiYoYT0hMCk7cmV0dXJuIHRoaXMuYWN0aXZlQ3Vlc189dCxvLnNldEN1ZXNfKHRoaXMuYWN0aXZlQ3Vlc18pLG99LHNldDpmdW5jdGlvbigpe319fSksbi5zcmM/KHQuc3JjPW4uc3JjLGZ1bmN0aW9uKGUscyl7dmFyIHQ9e3VyaTplfSxuPUd0KGUpO24mJih0LmNvcnM9biksZm4odCxDZSh0aGlzLGZ1bmN0aW9uKGUsdCxuKXtpZihlKXJldHVybiBnLmVycm9yKGUsdCk7aWYocy5sb2FkZWRfPSEwLFwiZnVuY3Rpb25cIiE9dHlwZW9mIGguV2ViVlRUKXtpZihzLnRlY2hfKXt2YXIgaSxyPWZ1bmN0aW9uKCl7Zy5lcnJvcihcInZ0dGpzIGZhaWxlZCB0byBsb2FkLCBzdG9wcGluZyB0cnlpbmcgdG8gcHJvY2VzcyBcIitzLnNyYykscy50ZWNoXy5vZmYoXCJ2dHRqc2xvYWRlZFwiLGkpfTtpPWZ1bmN0aW9uKCl7cmV0dXJuIHMudGVjaF8ub2ZmKFwidnR0anNlcnJvclwiLHIpLG1uKG4scyl9LHMudGVjaF8ub25lKFwidnR0anNsb2FkZWRcIixpKSxzLnRlY2hfLm9uZShcInZ0dGpzZXJyb3JcIixyKX19ZWxzZSBtbihuLHMpfSkpfShuLnNyYyx2KHYodCkpKSk6dC5sb2FkZWRfPSEwLHR9ZihlLGMpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmFkZEN1ZT1mdW5jdGlvbihlKXt2YXIgdD1lO2lmKGgudnR0anMmJiEoZSBpbnN0YW5jZW9mIGgudnR0anMuVlRUQ3VlKSl7Zm9yKHZhciBuIGluIHQ9bmV3IGgudnR0anMuVlRUQ3VlKGUuc3RhcnRUaW1lLGUuZW5kVGltZSxlLnRleHQpLGUpbiBpbiB0fHwodFtuXT1lW25dKTt0LmlkPWUuaWQsdC5vcmlnaW5hbEN1ZV89ZX1mb3IodmFyIGk9dGhpcy50ZWNoXy50ZXh0VHJhY2tzKCkscj0wO3I8aS5sZW5ndGg7cisrKWlbcl0hPT10aGlzJiZpW3JdLnJlbW92ZUN1ZSh0KTt0aGlzLmN1ZXNfLnB1c2godCksdGhpcy5jdWVzLnNldEN1ZXNfKHRoaXMuY3Vlc18pfSx0LnJlbW92ZUN1ZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy5jdWVzXy5sZW5ndGg7dC0tOyl7dmFyIG49dGhpcy5jdWVzX1t0XTtpZihuPT09ZXx8bi5vcmlnaW5hbEN1ZV8mJm4ub3JpZ2luYWxDdWVfPT09ZSl7dGhpcy5jdWVzXy5zcGxpY2UodCwxKSx0aGlzLmN1ZXMuc2V0Q3Vlc18odGhpcy5jdWVzXyk7YnJlYWt9fX0sZX0ocXQpO19uLnByb3RvdHlwZS5hbGxvd2VkRXZlbnRzXz17Y3VlY2hhbmdlOlwiY3VlY2hhbmdlXCJ9O3ZhciBibj1mdW5jdGlvbihyKXtmdW5jdGlvbiBlKGUpe3ZhciB0O3ZvaWQgMD09PWUmJihlPXt9KTt2YXIgbj1CZShlLHtraW5kOld0W2Uua2luZF18fFwiXCJ9KTt0PXIuY2FsbCh0aGlzLG4pfHx0aGlzO3ZhciBpPSExO3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodih2KHQpKSxcImVuYWJsZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9LHNldDpmdW5jdGlvbihlKXtcImJvb2xlYW5cIj09dHlwZW9mIGUmJmUhPT1pJiYoaT1lLHRoaXMudHJpZ2dlcihcImVuYWJsZWRjaGFuZ2VcIikpfX0pLG4uZW5hYmxlZCYmKHQuZW5hYmxlZD1uLmVuYWJsZWQpLHQubG9hZGVkXz0hMCx0fXJldHVybiBmKGUsciksZX0ocXQpLFRuPWZ1bmN0aW9uKHIpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ7dm9pZCAwPT09ZSYmKGU9e30pO3ZhciBuPUJlKGUse2tpbmQ6enRbZS5raW5kXXx8XCJcIn0pO3Q9ci5jYWxsKHRoaXMsbil8fHRoaXM7dmFyIGk9ITE7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2KHYodCkpLFwic2VsZWN0ZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9LHNldDpmdW5jdGlvbihlKXtcImJvb2xlYW5cIj09dHlwZW9mIGUmJmUhPT1pJiYoaT1lLHRoaXMudHJpZ2dlcihcInNlbGVjdGVkY2hhbmdlXCIpKX19KSxuLnNlbGVjdGVkJiYodC5zZWxlY3RlZD1uLnNlbGVjdGVkKSx0fXJldHVybiBmKGUsciksZX0ocXQpLGtuPWZ1bmN0aW9uKHIpe2Z1bmN0aW9uIGUoZSl7dmFyIHQsbjt2b2lkIDA9PT1lJiYoZT17fSksdD1yLmNhbGwodGhpcyl8fHRoaXM7dmFyIGk9bmV3IF9uKGUpO3JldHVybiB0LmtpbmQ9aS5raW5kLHQuc3JjPWkuc3JjLHQuc3JjbGFuZz1pLmxhbmd1YWdlLHQubGFiZWw9aS5sYWJlbCx0LmRlZmF1bHQ9aS5kZWZhdWx0LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHYodih0KSkse3JlYWR5U3RhdGU6e2dldDpmdW5jdGlvbigpe3JldHVybiBufX0sdHJhY2s6e2dldDpmdW5jdGlvbigpe3JldHVybiBpfX19KSxuPTAsaS5hZGRFdmVudExpc3RlbmVyKFwibG9hZGVkZGF0YVwiLGZ1bmN0aW9uKCl7bj0yLHQudHJpZ2dlcih7dHlwZTpcImxvYWRcIix0YXJnZXQ6dih2KHQpKX0pfSksdH1yZXR1cm4gZihlLHIpLGV9KHdlKTtrbi5wcm90b3R5cGUuYWxsb3dlZEV2ZW50c189e2xvYWQ6XCJsb2FkXCJ9LGtuLk5PTkU9MCxrbi5MT0FESU5HPTEsa24uTE9BREVEPTIsa24uRVJST1I9Mzt2YXIgQ249e2F1ZGlvOntMaXN0Q2xhc3M6RHQsVHJhY2tDbGFzczpibixjYXBpdGFsTmFtZTpcIkF1ZGlvXCJ9LHZpZGVvOntMaXN0Q2xhc3M6QnQsVHJhY2tDbGFzczpUbixjYXBpdGFsTmFtZTpcIlZpZGVvXCJ9LHRleHQ6e0xpc3RDbGFzczpGdCxUcmFja0NsYXNzOl9uLGNhcGl0YWxOYW1lOlwiVGV4dFwifX07T2JqZWN0LmtleXMoQ24pLmZvckVhY2goZnVuY3Rpb24oZSl7Q25bZV0uZ2V0dGVyTmFtZT1lK1wiVHJhY2tzXCIsQ25bZV0ucHJpdmF0ZU5hbWU9ZStcIlRyYWNrc19cIn0pO3ZhciBFbj17cmVtb3RlVGV4dDp7TGlzdENsYXNzOkZ0LFRyYWNrQ2xhc3M6X24sY2FwaXRhbE5hbWU6XCJSZW1vdGVUZXh0XCIsZ2V0dGVyTmFtZTpcInJlbW90ZVRleHRUcmFja3NcIixwcml2YXRlTmFtZTpcInJlbW90ZVRleHRUcmFja3NfXCJ9LHJlbW90ZVRleHRFbDp7TGlzdENsYXNzOkh0LFRyYWNrQ2xhc3M6a24sY2FwaXRhbE5hbWU6XCJSZW1vdGVUZXh0VHJhY2tFbHNcIixnZXR0ZXJOYW1lOlwicmVtb3RlVGV4dFRyYWNrRWxzXCIscHJpdmF0ZU5hbWU6XCJyZW1vdGVUZXh0VHJhY2tFbHNfXCJ9fSx3bj1CZShDbixFbik7RW4ubmFtZXM9T2JqZWN0LmtleXMoRW4pLENuLm5hbWVzPU9iamVjdC5rZXlzKENuKSx3bi5uYW1lcz1bXS5jb25jYXQoRW4ubmFtZXMpLmNvbmNhdChDbi5uYW1lcyk7dmFyIFNuPU9iamVjdC5jcmVhdGV8fGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4gZnVuY3Rpb24oZSl7aWYoMSE9PWFyZ3VtZW50cy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiT2JqZWN0LmNyZWF0ZSBzaGltIG9ubHkgYWNjZXB0cyBvbmUgcGFyYW1ldGVyLlwiKTtyZXR1cm4gdC5wcm90b3R5cGU9ZSxuZXcgdH19KCk7ZnVuY3Rpb24geG4oZSx0KXt0aGlzLm5hbWU9XCJQYXJzaW5nRXJyb3JcIix0aGlzLmNvZGU9ZS5jb2RlLHRoaXMubWVzc2FnZT10fHxlLm1lc3NhZ2V9ZnVuY3Rpb24gam4oZSl7ZnVuY3Rpb24gdChlLHQsbixpKXtyZXR1cm4gMzYwMCooMHxlKSs2MCooMHx0KSsoMHxuKSsoMHxpKS8xZTN9dmFyIG49ZS5tYXRjaCgvXihcXGQrKTooXFxkezJ9KSg6XFxkezJ9KT9cXC4oXFxkezN9KS8pO3JldHVybiBuP25bM10/dChuWzFdLG5bMl0sblszXS5yZXBsYWNlKFwiOlwiLFwiXCIpLG5bNF0pOjU5PG5bMV0/dChuWzFdLG5bMl0sMCxuWzRdKTp0KDAsblsxXSxuWzJdLG5bNF0pOm51bGx9ZnVuY3Rpb24gQW4oKXt0aGlzLnZhbHVlcz1TbihudWxsKX1mdW5jdGlvbiBQbihlLHQsbixpKXt2YXIgcj1pP2Uuc3BsaXQoaSk6W2VdO2Zvcih2YXIgcyBpbiByKWlmKFwic3RyaW5nXCI9PXR5cGVvZiByW3NdKXt2YXIgbz1yW3NdLnNwbGl0KG4pO2lmKDI9PT1vLmxlbmd0aCl0KG9bMF0sb1sxXSl9fWZ1bmN0aW9uIExuKHQsZSxzKXt2YXIgbixpLG8scj10O2Z1bmN0aW9uIGEoKXt2YXIgZT1qbih0KTtpZihudWxsPT09ZSl0aHJvdyBuZXcgeG4oeG4uRXJyb3JzLkJhZFRpbWVTdGFtcCxcIk1hbGZvcm1lZCB0aW1lc3RhbXA6IFwiK3IpO3JldHVybiB0PXQucmVwbGFjZSgvXlteXFxzYS16QS1aLV0rLyxcIlwiKSxlfWZ1bmN0aW9uIGwoKXt0PXQucmVwbGFjZSgvXlxccysvLFwiXCIpfWlmKGwoKSxlLnN0YXJ0VGltZT1hKCksbCgpLFwiLS1cXHgzZVwiIT09dC5zdWJzdHIoMCwzKSl0aHJvdyBuZXcgeG4oeG4uRXJyb3JzLkJhZFRpbWVTdGFtcCxcIk1hbGZvcm1lZCB0aW1lIHN0YW1wICh0aW1lIHN0YW1wcyBtdXN0IGJlIHNlcGFyYXRlZCBieSAnLS1cXHgzZScpOiBcIityKTt0PXQuc3Vic3RyKDMpLGwoKSxlLmVuZFRpbWU9YSgpLGwoKSxuPXQsaT1lLG89bmV3IEFuLFBuKG4sZnVuY3Rpb24oZSx0KXtzd2l0Y2goZSl7Y2FzZVwicmVnaW9uXCI6Zm9yKHZhciBuPXMubGVuZ3RoLTE7MDw9bjtuLS0paWYoc1tuXS5pZD09PXQpe28uc2V0KGUsc1tuXS5yZWdpb24pO2JyZWFrfWJyZWFrO2Nhc2VcInZlcnRpY2FsXCI6by5hbHQoZSx0LFtcInJsXCIsXCJsclwiXSk7YnJlYWs7Y2FzZVwibGluZVwiOnZhciBpPXQuc3BsaXQoXCIsXCIpLHI9aVswXTtvLmludGVnZXIoZSxyKSxvLnBlcmNlbnQoZSxyKSYmby5zZXQoXCJzbmFwVG9MaW5lc1wiLCExKSxvLmFsdChlLHIsW1wiYXV0b1wiXSksMj09PWkubGVuZ3RoJiZvLmFsdChcImxpbmVBbGlnblwiLGlbMV0sW1wic3RhcnRcIixcIm1pZGRsZVwiLFwiZW5kXCJdKTticmVhaztjYXNlXCJwb3NpdGlvblwiOmk9dC5zcGxpdChcIixcIiksby5wZXJjZW50KGUsaVswXSksMj09PWkubGVuZ3RoJiZvLmFsdChcInBvc2l0aW9uQWxpZ25cIixpWzFdLFtcInN0YXJ0XCIsXCJtaWRkbGVcIixcImVuZFwiXSk7YnJlYWs7Y2FzZVwic2l6ZVwiOm8ucGVyY2VudChlLHQpO2JyZWFrO2Nhc2VcImFsaWduXCI6by5hbHQoZSx0LFtcInN0YXJ0XCIsXCJtaWRkbGVcIixcImVuZFwiLFwibGVmdFwiLFwicmlnaHRcIl0pfX0sLzovLC9cXHMvKSxpLnJlZ2lvbj1vLmdldChcInJlZ2lvblwiLG51bGwpLGkudmVydGljYWw9by5nZXQoXCJ2ZXJ0aWNhbFwiLFwiXCIpLGkubGluZT1vLmdldChcImxpbmVcIixcImF1dG9cIiksaS5saW5lQWxpZ249by5nZXQoXCJsaW5lQWxpZ25cIixcInN0YXJ0XCIpLGkuc25hcFRvTGluZXM9by5nZXQoXCJzbmFwVG9MaW5lc1wiLCEwKSxpLnNpemU9by5nZXQoXCJzaXplXCIsMTAwKSxpLmFsaWduPW8uZ2V0KFwiYWxpZ25cIixcIm1pZGRsZVwiKSxpLnBvc2l0aW9uPW8uZ2V0KFwicG9zaXRpb25cIix7c3RhcnQ6MCxsZWZ0OjAsbWlkZGxlOjUwLGVuZDoxMDAscmlnaHQ6MTAwfSxpLmFsaWduKSxpLnBvc2l0aW9uQWxpZ249by5nZXQoXCJwb3NpdGlvbkFsaWduXCIse3N0YXJ0Olwic3RhcnRcIixsZWZ0Olwic3RhcnRcIixtaWRkbGU6XCJtaWRkbGVcIixlbmQ6XCJlbmRcIixyaWdodDpcImVuZFwifSxpLmFsaWduKX0oKHhuLnByb3RvdHlwZT1TbihFcnJvci5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj14bikuRXJyb3JzPXtCYWRTaWduYXR1cmU6e2NvZGU6MCxtZXNzYWdlOlwiTWFsZm9ybWVkIFdlYlZUVCBzaWduYXR1cmUuXCJ9LEJhZFRpbWVTdGFtcDp7Y29kZToxLG1lc3NhZ2U6XCJNYWxmb3JtZWQgdGltZSBzdGFtcC5cIn19LEFuLnByb3RvdHlwZT17c2V0OmZ1bmN0aW9uKGUsdCl7dGhpcy5nZXQoZSl8fFwiXCI9PT10fHwodGhpcy52YWx1ZXNbZV09dCl9LGdldDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIG4/dGhpcy5oYXMoZSk/dGhpcy52YWx1ZXNbZV06dFtuXTp0aGlzLmhhcyhlKT90aGlzLnZhbHVlc1tlXTp0fSxoYXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW4gdGhpcy52YWx1ZXN9LGFsdDpmdW5jdGlvbihlLHQsbil7Zm9yKHZhciBpPTA7aTxuLmxlbmd0aDsrK2kpaWYodD09PW5baV0pe3RoaXMuc2V0KGUsdCk7YnJlYWt9fSxpbnRlZ2VyOmZ1bmN0aW9uKGUsdCl7L14tP1xcZCskLy50ZXN0KHQpJiZ0aGlzLnNldChlLHBhcnNlSW50KHQsMTApKX0scGVyY2VudDpmdW5jdGlvbihlLHQpe3JldHVybiEhKHQubWF0Y2goL14oW1xcZF17MSwzfSkoXFwuW1xcZF0qKT8lJC8pJiYwPD0odD1wYXJzZUZsb2F0KHQpKSYmdDw9MTAwKSYmKHRoaXMuc2V0KGUsdCksITApfX07dmFyIE1uPXtcIiZhbXA7XCI6XCImXCIsXCImbHQ7XCI6XCI8XCIsXCImZ3Q7XCI6XCI+XCIsXCImbHJtO1wiOlwi4oCOXCIsXCImcmxtO1wiOlwi4oCPXCIsXCImbmJzcDtcIjpcIsKgXCJ9LE5uPXtjOlwic3BhblwiLGk6XCJpXCIsYjpcImJcIix1OlwidVwiLHJ1Ynk6XCJydWJ5XCIscnQ6XCJydFwiLHY6XCJzcGFuXCIsbGFuZzpcInNwYW5cIn0sT249e3Y6XCJ0aXRsZVwiLGxhbmc6XCJsYW5nXCJ9LEluPXtydDpcInJ1YnlcIn07ZnVuY3Rpb24gRG4ocyxuKXtmdW5jdGlvbiBlKCl7aWYoIW4pcmV0dXJuIG51bGw7dmFyIGUsdD1uLm1hdGNoKC9eKFtePF0qKSg8W14+XSo+Pyk/Lyk7cmV0dXJuIGU9dFsxXT90WzFdOnRbMl0sbj1uLnN1YnN0cihlLmxlbmd0aCksZX1mdW5jdGlvbiB0KGUpe3JldHVybiBNbltlXX1mdW5jdGlvbiBpKGUpe2Zvcig7Zj1lLm1hdGNoKC8mKGFtcHxsdHxndHxscm18cmxtfG5ic3ApOy8pOyllPWUucmVwbGFjZShmWzBdLHQpO3JldHVybiBlfWZ1bmN0aW9uIHIoZSx0KXt2YXIgbj1ObltlXTtpZighbilyZXR1cm4gbnVsbDt2YXIgaT1zLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobik7aS5sb2NhbE5hbWU9bjt2YXIgcj1PbltlXTtyZXR1cm4gciYmdCYmKGlbcl09dC50cmltKCkpLGl9Zm9yKHZhciBvLGEsbCxjPXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx1PWMsaD1bXTtudWxsIT09KG89ZSgpKTspaWYoXCI8XCIhPT1vWzBdKXUuYXBwZW5kQ2hpbGQocy5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShpKG8pKSk7ZWxzZXtpZihcIi9cIj09PW9bMV0pe2gubGVuZ3RoJiZoW2gubGVuZ3RoLTFdPT09by5zdWJzdHIoMikucmVwbGFjZShcIj5cIixcIlwiKSYmKGgucG9wKCksdT11LnBhcmVudE5vZGUpO2NvbnRpbnVlfXZhciBkLHA9am4oby5zdWJzdHIoMSxvLmxlbmd0aC0yKSk7aWYocCl7ZD1zLmRvY3VtZW50LmNyZWF0ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbihcInRpbWVzdGFtcFwiLHApLHUuYXBwZW5kQ2hpbGQoZCk7Y29udGludWV9dmFyIGY9by5tYXRjaCgvXjwoW14uXFxzLzAtOT5dKykoXFwuW15cXHNcXFxcPl0rKT8oW14+XFxcXF0rKT8oXFxcXD8pPj8kLyk7aWYoIWYpY29udGludWU7aWYoIShkPXIoZlsxXSxmWzNdKSkpY29udGludWU7aWYoYT11LEluWyhsPWQpLmxvY2FsTmFtZV0mJkluW2wubG9jYWxOYW1lXSE9PWEubG9jYWxOYW1lKWNvbnRpbnVlO2ZbMl0mJihkLmNsYXNzTmFtZT1mWzJdLnN1YnN0cigxKS5yZXBsYWNlKFwiLlwiLFwiIFwiKSksaC5wdXNoKGZbMV0pLHUuYXBwZW5kQ2hpbGQoZCksdT1kfXJldHVybiBjfXZhciBSbj1bWzE0NzAsMTQ3MF0sWzE0NzIsMTQ3Ml0sWzE0NzUsMTQ3NV0sWzE0NzgsMTQ3OF0sWzE0ODgsMTUxNF0sWzE1MjAsMTUyNF0sWzE1NDQsMTU0NF0sWzE1NDcsMTU0N10sWzE1NDksMTU0OV0sWzE1NjMsMTU2M10sWzE1NjYsMTYxMF0sWzE2NDUsMTY0N10sWzE2NDksMTc0OV0sWzE3NjUsMTc2Nl0sWzE3NzQsMTc3NV0sWzE3ODYsMTgwNV0sWzE4MDcsMTgwOF0sWzE4MTAsMTgzOV0sWzE4NjksMTk1N10sWzE5NjksMTk2OV0sWzE5ODQsMjAyNl0sWzIwMzYsMjAzN10sWzIwNDIsMjA0Ml0sWzIwNDgsMjA2OV0sWzIwNzQsMjA3NF0sWzIwODQsMjA4NF0sWzIwODgsMjA4OF0sWzIwOTYsMjExMF0sWzIxMTIsMjEzNl0sWzIxNDIsMjE0Ml0sWzIyMDgsMjIwOF0sWzIyMTAsMjIyMF0sWzgyMDcsODIwN10sWzY0Mjg1LDY0Mjg1XSxbNjQyODcsNjQyOTZdLFs2NDI5OCw2NDMxMF0sWzY0MzEyLDY0MzE2XSxbNjQzMTgsNjQzMThdLFs2NDMyMCw2NDMyMV0sWzY0MzIzLDY0MzI0XSxbNjQzMjYsNjQ0NDldLFs2NDQ2Nyw2NDgyOV0sWzY0ODQ4LDY0OTExXSxbNjQ5MTQsNjQ5NjddLFs2NTAwOCw2NTAyMF0sWzY1MTM2LDY1MTQwXSxbNjUxNDIsNjUyNzZdLFs2NzU4NCw2NzU4OV0sWzY3NTkyLDY3NTkyXSxbNjc1OTQsNjc2MzddLFs2NzYzOSw2NzY0MF0sWzY3NjQ0LDY3NjQ0XSxbNjc2NDcsNjc2NjldLFs2NzY3MSw2NzY3OV0sWzY3ODQwLDY3ODY3XSxbNjc4NzIsNjc4OTddLFs2NzkwMyw2NzkwM10sWzY3OTY4LDY4MDIzXSxbNjgwMzAsNjgwMzFdLFs2ODA5Niw2ODA5Nl0sWzY4MTEyLDY4MTE1XSxbNjgxMTcsNjgxMTldLFs2ODEyMSw2ODE0N10sWzY4MTYwLDY4MTY3XSxbNjgxNzYsNjgxODRdLFs2ODE5Miw2ODIyM10sWzY4MzUyLDY4NDA1XSxbNjg0MTYsNjg0MzddLFs2ODQ0MCw2ODQ2Nl0sWzY4NDcyLDY4NDc5XSxbNjg2MDgsNjg2ODBdLFsxMjY0NjQsMTI2NDY3XSxbMTI2NDY5LDEyNjQ5NV0sWzEyNjQ5NywxMjY0OThdLFsxMjY1MDAsMTI2NTAwXSxbMTI2NTAzLDEyNjUwM10sWzEyNjUwNSwxMjY1MTRdLFsxMjY1MTYsMTI2NTE5XSxbMTI2NTIxLDEyNjUyMV0sWzEyNjUyMywxMjY1MjNdLFsxMjY1MzAsMTI2NTMwXSxbMTI2NTM1LDEyNjUzNV0sWzEyNjUzNywxMjY1MzddLFsxMjY1MzksMTI2NTM5XSxbMTI2NTQxLDEyNjU0M10sWzEyNjU0NSwxMjY1NDZdLFsxMjY1NDgsMTI2NTQ4XSxbMTI2NTUxLDEyNjU1MV0sWzEyNjU1MywxMjY1NTNdLFsxMjY1NTUsMTI2NTU1XSxbMTI2NTU3LDEyNjU1N10sWzEyNjU1OSwxMjY1NTldLFsxMjY1NjEsMTI2NTYyXSxbMTI2NTY0LDEyNjU2NF0sWzEyNjU2NywxMjY1NzBdLFsxMjY1NzIsMTI2NTc4XSxbMTI2NTgwLDEyNjU4M10sWzEyNjU4NSwxMjY1ODhdLFsxMjY1OTAsMTI2NTkwXSxbMTI2NTkyLDEyNjYwMV0sWzEyNjYwMywxMjY2MTldLFsxMjY2MjUsMTI2NjI3XSxbMTI2NjI5LDEyNjYzM10sWzEyNjYzNSwxMjY2NTFdLFsxMTE0MTA5LDExMTQxMDldXTtmdW5jdGlvbiBCbihlKXtmb3IodmFyIHQ9MDt0PFJuLmxlbmd0aDt0Kyspe3ZhciBuPVJuW3RdO2lmKGU+PW5bMF0mJmU8PW5bMV0pcmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gRm4oKXt9ZnVuY3Rpb24gSG4oZSx0LG4pe0ZuLmNhbGwodGhpcyksdGhpcy5jdWU9dCx0aGlzLmN1ZURpdj1EbihlLHQudGV4dCk7dmFyIGk9e2NvbG9yOlwicmdiYSgyNTUsIDI1NSwgMjU1LCAxKVwiLGJhY2tncm91bmRDb2xvcjpcInJnYmEoMCwgMCwgMCwgMC44KVwiLHBvc2l0aW9uOlwicmVsYXRpdmVcIixsZWZ0OjAscmlnaHQ6MCx0b3A6MCxib3R0b206MCxkaXNwbGF5OlwiaW5saW5lXCIsd3JpdGluZ01vZGU6XCJcIj09PXQudmVydGljYWw/XCJob3Jpem9udGFsLXRiXCI6XCJsclwiPT09dC52ZXJ0aWNhbD9cInZlcnRpY2FsLWxyXCI6XCJ2ZXJ0aWNhbC1ybFwiLHVuaWNvZGVCaWRpOlwicGxhaW50ZXh0XCJ9O3RoaXMuYXBwbHlTdHlsZXMoaSx0aGlzLmN1ZURpdiksdGhpcy5kaXY9ZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGk9e2RpcmVjdGlvbjpmdW5jdGlvbihlKXt2YXIgdD1bXSxuPVwiXCI7aWYoIWV8fCFlLmNoaWxkTm9kZXMpcmV0dXJuXCJsdHJcIjtmdW5jdGlvbiByKGUsdCl7Zm9yKHZhciBuPXQuY2hpbGROb2Rlcy5sZW5ndGgtMTswPD1uO24tLSllLnB1c2godC5jaGlsZE5vZGVzW25dKX1mdW5jdGlvbiBzKGUpe2lmKCFlfHwhZS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIHQ9ZS5wb3AoKSxuPXQudGV4dENvbnRlbnR8fHQuaW5uZXJUZXh0O2lmKG4pe3ZhciBpPW4ubWF0Y2goL14uKihcXG58XFxyKS8pO3JldHVybiBpP2lbZS5sZW5ndGg9MF06bn1yZXR1cm5cInJ1YnlcIj09PXQudGFnTmFtZT9zKGUpOnQuY2hpbGROb2Rlcz8ocihlLHQpLHMoZSkpOnZvaWQgMH1mb3Iocih0LGUpO249cyh0KTspZm9yKHZhciBpPTA7aTxuLmxlbmd0aDtpKyspaWYoQm4obi5jaGFyQ29kZUF0KGkpKSlyZXR1cm5cInJ0bFwiO3JldHVyblwibHRyXCJ9KHRoaXMuY3VlRGl2KSx3cml0aW5nTW9kZTpcIlwiPT09dC52ZXJ0aWNhbD9cImhvcml6b250YWwtdGJcIjpcImxyXCI9PT10LnZlcnRpY2FsP1widmVydGljYWwtbHJcIjpcInZlcnRpY2FsLXJsXCIsdW5pY29kZUJpZGk6XCJwbGFpbnRleHRcIix0ZXh0QWxpZ246XCJtaWRkbGVcIj09PXQuYWxpZ24/XCJjZW50ZXJcIjp0LmFsaWduLGZvbnQ6bi5mb250LHdoaXRlU3BhY2U6XCJwcmUtbGluZVwiLHBvc2l0aW9uOlwiYWJzb2x1dGVcIn0sdGhpcy5hcHBseVN0eWxlcyhpKSx0aGlzLmRpdi5hcHBlbmRDaGlsZCh0aGlzLmN1ZURpdik7dmFyIHI9MDtzd2l0Y2godC5wb3NpdGlvbkFsaWduKXtjYXNlXCJzdGFydFwiOnI9dC5wb3NpdGlvbjticmVhaztjYXNlXCJtaWRkbGVcIjpyPXQucG9zaXRpb24tdC5zaXplLzI7YnJlYWs7Y2FzZVwiZW5kXCI6cj10LnBvc2l0aW9uLXQuc2l6ZX1cIlwiPT09dC52ZXJ0aWNhbD90aGlzLmFwcGx5U3R5bGVzKHtsZWZ0OnRoaXMuZm9ybWF0U3R5bGUocixcIiVcIiksd2lkdGg6dGhpcy5mb3JtYXRTdHlsZSh0LnNpemUsXCIlXCIpfSk6dGhpcy5hcHBseVN0eWxlcyh7dG9wOnRoaXMuZm9ybWF0U3R5bGUocixcIiVcIiksaGVpZ2h0OnRoaXMuZm9ybWF0U3R5bGUodC5zaXplLFwiJVwiKX0pLHRoaXMubW92ZT1mdW5jdGlvbihlKXt0aGlzLmFwcGx5U3R5bGVzKHt0b3A6dGhpcy5mb3JtYXRTdHlsZShlLnRvcCxcInB4XCIpLGJvdHRvbTp0aGlzLmZvcm1hdFN0eWxlKGUuYm90dG9tLFwicHhcIiksbGVmdDp0aGlzLmZvcm1hdFN0eWxlKGUubGVmdCxcInB4XCIpLHJpZ2h0OnRoaXMuZm9ybWF0U3R5bGUoZS5yaWdodCxcInB4XCIpLGhlaWdodDp0aGlzLmZvcm1hdFN0eWxlKGUuaGVpZ2h0LFwicHhcIiksd2lkdGg6dGhpcy5mb3JtYXRTdHlsZShlLndpZHRoLFwicHhcIil9KX19ZnVuY3Rpb24gVm4oZSl7dmFyIHQsbixpLHI7aWYoZS5kaXYpe249ZS5kaXYub2Zmc2V0SGVpZ2h0LGk9ZS5kaXYub2Zmc2V0V2lkdGgscj1lLmRpdi5vZmZzZXRUb3A7dmFyIHM9KHM9ZS5kaXYuY2hpbGROb2RlcykmJihzPXNbMF0pJiZzLmdldENsaWVudFJlY3RzJiZzLmdldENsaWVudFJlY3RzKCk7ZT1lLmRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSx0PXM/TWF0aC5tYXgoc1swXSYmc1swXS5oZWlnaHR8fDAsZS5oZWlnaHQvcy5sZW5ndGgpOjB9dGhpcy5sZWZ0PWUubGVmdCx0aGlzLnJpZ2h0PWUucmlnaHQsdGhpcy50b3A9ZS50b3B8fHIsdGhpcy5oZWlnaHQ9ZS5oZWlnaHR8fG4sdGhpcy5ib3R0b209ZS5ib3R0b218fHIrKGUuaGVpZ2h0fHxuKSx0aGlzLndpZHRoPWUud2lkdGh8fGksdGhpcy5saW5lSGVpZ2h0PXZvaWQgMCE9PXQ/dDplLmxpbmVIZWlnaHR9ZnVuY3Rpb24gem4oZSx0LGEsbCl7dmFyIG49bmV3IFZuKHQpLGk9dC5jdWUscj1mdW5jdGlvbihlKXtpZihcIm51bWJlclwiPT10eXBlb2YgZS5saW5lJiYoZS5zbmFwVG9MaW5lc3x8MDw9ZS5saW5lJiZlLmxpbmU8PTEwMCkpcmV0dXJuIGUubGluZTtpZighZS50cmFja3x8IWUudHJhY2sudGV4dFRyYWNrTGlzdHx8IWUudHJhY2sudGV4dFRyYWNrTGlzdC5tZWRpYUVsZW1lbnQpcmV0dXJuLTE7Zm9yKHZhciB0PWUudHJhY2ssbj10LnRleHRUcmFja0xpc3QsaT0wLHI9MDtyPG4ubGVuZ3RoJiZuW3JdIT09dDtyKyspXCJzaG93aW5nXCI9PT1uW3JdLm1vZGUmJmkrKztyZXR1cm4tMSorK2l9KGkpLHM9W107aWYoaS5zbmFwVG9MaW5lcyl7dmFyIG87c3dpdGNoKGkudmVydGljYWwpe2Nhc2VcIlwiOnM9W1wiK3lcIixcIi15XCJdLG89XCJoZWlnaHRcIjticmVhaztjYXNlXCJybFwiOnM9W1wiK3hcIixcIi14XCJdLG89XCJ3aWR0aFwiO2JyZWFrO2Nhc2VcImxyXCI6cz1bXCIteFwiLFwiK3hcIl0sbz1cIndpZHRoXCJ9dmFyIGM9bi5saW5lSGVpZ2h0LHU9YypNYXRoLnJvdW5kKHIpLGg9YVtvXStjLGQ9c1swXTtNYXRoLmFicyh1KT5oJiYodT11PDA/LTE6MSx1Kj1NYXRoLmNlaWwoaC9jKSpjKSxyPDAmJih1Kz1cIlwiPT09aS52ZXJ0aWNhbD9hLmhlaWdodDphLndpZHRoLHM9cy5yZXZlcnNlKCkpLG4ubW92ZShkLHUpfWVsc2V7dmFyIHA9bi5saW5lSGVpZ2h0L2EuaGVpZ2h0KjEwMDtzd2l0Y2goaS5saW5lQWxpZ24pe2Nhc2VcIm1pZGRsZVwiOnItPXAvMjticmVhaztjYXNlXCJlbmRcIjpyLT1wfXN3aXRjaChpLnZlcnRpY2FsKXtjYXNlXCJcIjp0LmFwcGx5U3R5bGVzKHt0b3A6dC5mb3JtYXRTdHlsZShyLFwiJVwiKX0pO2JyZWFrO2Nhc2VcInJsXCI6dC5hcHBseVN0eWxlcyh7bGVmdDp0LmZvcm1hdFN0eWxlKHIsXCIlXCIpfSk7YnJlYWs7Y2FzZVwibHJcIjp0LmFwcGx5U3R5bGVzKHtyaWdodDp0LmZvcm1hdFN0eWxlKHIsXCIlXCIpfSl9cz1bXCIreVwiLFwiLXhcIixcIit4XCIsXCIteVwiXSxuPW5ldyBWbih0KX12YXIgZj1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbixpPW5ldyBWbihlKSxyPTEscz0wO3M8dC5sZW5ndGg7cysrKXtmb3IoO2Uub3ZlcmxhcHNPcHBvc2l0ZUF4aXMoYSx0W3NdKXx8ZS53aXRoaW4oYSkmJmUub3ZlcmxhcHNBbnkobCk7KWUubW92ZSh0W3NdKTtpZihlLndpdGhpbihhKSlyZXR1cm4gZTt2YXIgbz1lLmludGVyc2VjdFBlcmNlbnRhZ2UoYSk7bzxyJiYobj1uZXcgVm4oZSkscj1vKSxlPW5ldyBWbihpKX1yZXR1cm4gbnx8aX0obixzKTt0Lm1vdmUoZi50b0NTU0NvbXBhdFZhbHVlcyhhKSl9ZnVuY3Rpb24gV24oKXt9Rm4ucHJvdG90eXBlLmFwcGx5U3R5bGVzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuIGluIHQ9dHx8dGhpcy5kaXYsZSllLmhhc093blByb3BlcnR5KG4pJiYodC5zdHlsZVtuXT1lW25dKX0sRm4ucHJvdG90eXBlLmZvcm1hdFN0eWxlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIDA9PT1lPzA6ZSt0fSwoSG4ucHJvdG90eXBlPVNuKEZuLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPUhuLFZuLnByb3RvdHlwZS5tb3ZlPWZ1bmN0aW9uKGUsdCl7c3dpdGNoKHQ9dm9pZCAwIT09dD90OnRoaXMubGluZUhlaWdodCxlKXtjYXNlXCIreFwiOnRoaXMubGVmdCs9dCx0aGlzLnJpZ2h0Kz10O2JyZWFrO2Nhc2VcIi14XCI6dGhpcy5sZWZ0LT10LHRoaXMucmlnaHQtPXQ7YnJlYWs7Y2FzZVwiK3lcIjp0aGlzLnRvcCs9dCx0aGlzLmJvdHRvbSs9dDticmVhaztjYXNlXCIteVwiOnRoaXMudG9wLT10LHRoaXMuYm90dG9tLT10fX0sVm4ucHJvdG90eXBlLm92ZXJsYXBzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmxlZnQ8ZS5yaWdodCYmdGhpcy5yaWdodD5lLmxlZnQmJnRoaXMudG9wPGUuYm90dG9tJiZ0aGlzLmJvdHRvbT5lLnRvcH0sVm4ucHJvdG90eXBlLm92ZXJsYXBzQW55PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKWlmKHRoaXMub3ZlcmxhcHMoZVt0XSkpcmV0dXJuITA7cmV0dXJuITF9LFZuLnByb3RvdHlwZS53aXRoaW49ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMudG9wPj1lLnRvcCYmdGhpcy5ib3R0b208PWUuYm90dG9tJiZ0aGlzLmxlZnQ+PWUubGVmdCYmdGhpcy5yaWdodDw9ZS5yaWdodH0sVm4ucHJvdG90eXBlLm92ZXJsYXBzT3Bwb3NpdGVBeGlzPWZ1bmN0aW9uKGUsdCl7c3dpdGNoKHQpe2Nhc2VcIit4XCI6cmV0dXJuIHRoaXMubGVmdDxlLmxlZnQ7Y2FzZVwiLXhcIjpyZXR1cm4gdGhpcy5yaWdodD5lLnJpZ2h0O2Nhc2VcIit5XCI6cmV0dXJuIHRoaXMudG9wPGUudG9wO2Nhc2VcIi15XCI6cmV0dXJuIHRoaXMuYm90dG9tPmUuYm90dG9tfX0sVm4ucHJvdG90eXBlLmludGVyc2VjdFBlcmNlbnRhZ2U9ZnVuY3Rpb24oZSl7cmV0dXJuIE1hdGgubWF4KDAsTWF0aC5taW4odGhpcy5yaWdodCxlLnJpZ2h0KS1NYXRoLm1heCh0aGlzLmxlZnQsZS5sZWZ0KSkqTWF0aC5tYXgoMCxNYXRoLm1pbih0aGlzLmJvdHRvbSxlLmJvdHRvbSktTWF0aC5tYXgodGhpcy50b3AsZS50b3ApKS8odGhpcy5oZWlnaHQqdGhpcy53aWR0aCl9LFZuLnByb3RvdHlwZS50b0NTU0NvbXBhdFZhbHVlcz1mdW5jdGlvbihlKXtyZXR1cm57dG9wOnRoaXMudG9wLWUudG9wLGJvdHRvbTplLmJvdHRvbS10aGlzLmJvdHRvbSxsZWZ0OnRoaXMubGVmdC1lLmxlZnQscmlnaHQ6ZS5yaWdodC10aGlzLnJpZ2h0LGhlaWdodDp0aGlzLmhlaWdodCx3aWR0aDp0aGlzLndpZHRofX0sVm4uZ2V0U2ltcGxlQm94UG9zaXRpb249ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5kaXY/ZS5kaXYub2Zmc2V0SGVpZ2h0OmUudGFnTmFtZT9lLm9mZnNldEhlaWdodDowLG49ZS5kaXY/ZS5kaXYub2Zmc2V0V2lkdGg6ZS50YWdOYW1lP2Uub2Zmc2V0V2lkdGg6MCxpPWUuZGl2P2UuZGl2Lm9mZnNldFRvcDplLnRhZ05hbWU/ZS5vZmZzZXRUb3A6MDtyZXR1cm57bGVmdDooZT1lLmRpdj9lLmRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTplLnRhZ05hbWU/ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTplKS5sZWZ0LHJpZ2h0OmUucmlnaHQsdG9wOmUudG9wfHxpLGhlaWdodDplLmhlaWdodHx8dCxib3R0b206ZS5ib3R0b218fGkrKGUuaGVpZ2h0fHx0KSx3aWR0aDplLndpZHRofHxufX0sV24uU3RyaW5nRGVjb2Rlcj1mdW5jdGlvbigpe3JldHVybntkZWNvZGU6ZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuXCJcIjtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciAtIGV4cGVjdGVkIHN0cmluZyBkYXRhLlwiKTtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZVVSSUNvbXBvbmVudChlKSl9fX0sV24uY29udmVydEN1ZVRvRE9NVHJlZT1mdW5jdGlvbihlLHQpe3JldHVybiBlJiZ0P0RuKGUsdCk6bnVsbH07V24ucHJvY2Vzc0N1ZXM9ZnVuY3Rpb24oaSxyLGUpe2lmKCFpfHwhcnx8IWUpcmV0dXJuIG51bGw7Zm9yKDtlLmZpcnN0Q2hpbGQ7KWUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKTt2YXIgcz1pLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7aWYocy5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCIscy5zdHlsZS5sZWZ0PVwiMFwiLHMuc3R5bGUucmlnaHQ9XCIwXCIscy5zdHlsZS50b3A9XCIwXCIscy5zdHlsZS5ib3R0b209XCIwXCIscy5zdHlsZS5tYXJnaW49XCIxLjUlXCIsZS5hcHBlbmRDaGlsZChzKSxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKylpZihlW3RdLmhhc0JlZW5SZXNldHx8IWVbdF0uZGlzcGxheVN0YXRlKXJldHVybiEwO3JldHVybiExfShyKSl7dmFyIG89W10sYT1Wbi5nZXRTaW1wbGVCb3hQb3NpdGlvbihzKSxsPXtmb250Ok1hdGgucm91bmQoLjA1KmEuaGVpZ2h0KjEwMCkvMTAwK1wicHggc2Fucy1zZXJpZlwifTshZnVuY3Rpb24oKXtmb3IodmFyIGUsdCxuPTA7bjxyLmxlbmd0aDtuKyspdD1yW25dLGU9bmV3IEhuKGksdCxsKSxzLmFwcGVuZENoaWxkKGUuZGl2KSx6bigwLGUsYSxvKSx0LmRpc3BsYXlTdGF0ZT1lLmRpdixvLnB1c2goVm4uZ2V0U2ltcGxlQm94UG9zaXRpb24oZSkpfSgpfWVsc2UgZm9yKHZhciB0PTA7dDxyLmxlbmd0aDt0Kyspcy5hcHBlbmRDaGlsZChyW3RdLmRpc3BsYXlTdGF0ZSl9LChXbi5QYXJzZXI9ZnVuY3Rpb24oZSx0LG4pe258fChuPXQsdD17fSksdHx8KHQ9e30pLHRoaXMud2luZG93PWUsdGhpcy52dHRqcz10LHRoaXMuc3RhdGU9XCJJTklUSUFMXCIsdGhpcy5idWZmZXI9XCJcIix0aGlzLmRlY29kZXI9bnx8bmV3IFRleHREZWNvZGVyKFwidXRmOFwiKSx0aGlzLnJlZ2lvbkxpc3Q9W119KS5wcm90b3R5cGU9e3JlcG9ydE9yVGhyb3dFcnJvcjpmdW5jdGlvbihlKXtpZighKGUgaW5zdGFuY2VvZiB4bikpdGhyb3cgZTt0aGlzLm9ucGFyc2luZ2Vycm9yJiZ0aGlzLm9ucGFyc2luZ2Vycm9yKGUpfSxwYXJzZTpmdW5jdGlvbihlKXt2YXIgcz10aGlzO2Z1bmN0aW9uIHQoKXtmb3IodmFyIGU9cy5idWZmZXIsdD0wO3Q8ZS5sZW5ndGgmJlwiXFxyXCIhPT1lW3RdJiZcIlxcblwiIT09ZVt0XTspKyt0O3ZhciBuPWUuc3Vic3RyKDAsdCk7cmV0dXJuXCJcXHJcIj09PWVbdF0mJisrdCxcIlxcblwiPT09ZVt0XSYmKyt0LHMuYnVmZmVyPWUuc3Vic3RyKHQpLG59ZnVuY3Rpb24gbihlKXtlLm1hdGNoKC9YLVRJTUVTVEFNUC1NQVAvKT9QbihlLGZ1bmN0aW9uKGUsdCl7c3dpdGNoKGUpe2Nhc2VcIlgtVElNRVNUQU1QLU1BUFwiOm49dCxpPW5ldyBBbixQbihuLGZ1bmN0aW9uKGUsdCl7c3dpdGNoKGUpe2Nhc2VcIk1QRUdUXCI6aS5pbnRlZ2VyKGUrXCJTXCIsdCk7YnJlYWs7Y2FzZVwiTE9DQVwiOmkuc2V0KGUrXCJMXCIsam4odCkpfX0sL1teXFxkXTovLC8sLykscy5vbnRpbWVzdGFtcG1hcCYmcy5vbnRpbWVzdGFtcG1hcCh7TVBFR1RTOmkuZ2V0KFwiTVBFR1RTXCIpLExPQ0FMOmkuZ2V0KFwiTE9DQUxcIil9KX12YXIgbixpfSwvPS8pOlBuKGUsZnVuY3Rpb24oZSx0KXtzd2l0Y2goZSl7Y2FzZVwiUmVnaW9uXCI6IWZ1bmN0aW9uKGUpe3ZhciByPW5ldyBBbjtpZihQbihlLGZ1bmN0aW9uKGUsdCl7c3dpdGNoKGUpe2Nhc2VcImlkXCI6ci5zZXQoZSx0KTticmVhaztjYXNlXCJ3aWR0aFwiOnIucGVyY2VudChlLHQpO2JyZWFrO2Nhc2VcImxpbmVzXCI6ci5pbnRlZ2VyKGUsdCk7YnJlYWs7Y2FzZVwicmVnaW9uYW5jaG9yXCI6Y2FzZVwidmlld3BvcnRhbmNob3JcIjp2YXIgbj10LnNwbGl0KFwiLFwiKTtpZigyIT09bi5sZW5ndGgpYnJlYWs7dmFyIGk9bmV3IEFuO2lmKGkucGVyY2VudChcInhcIixuWzBdKSxpLnBlcmNlbnQoXCJ5XCIsblsxXSksIWkuaGFzKFwieFwiKXx8IWkuaGFzKFwieVwiKSlicmVhaztyLnNldChlK1wiWFwiLGkuZ2V0KFwieFwiKSksci5zZXQoZStcIllcIixpLmdldChcInlcIikpO2JyZWFrO2Nhc2VcInNjcm9sbFwiOnIuYWx0KGUsdCxbXCJ1cFwiXSl9fSwvPS8sL1xccy8pLHIuaGFzKFwiaWRcIikpe3ZhciB0PW5ldyhzLnZ0dGpzLlZUVFJlZ2lvbnx8cy53aW5kb3cuVlRUUmVnaW9uKTt0LndpZHRoPXIuZ2V0KFwid2lkdGhcIiwxMDApLHQubGluZXM9ci5nZXQoXCJsaW5lc1wiLDMpLHQucmVnaW9uQW5jaG9yWD1yLmdldChcInJlZ2lvbmFuY2hvclhcIiwwKSx0LnJlZ2lvbkFuY2hvclk9ci5nZXQoXCJyZWdpb25hbmNob3JZXCIsMTAwKSx0LnZpZXdwb3J0QW5jaG9yWD1yLmdldChcInZpZXdwb3J0YW5jaG9yWFwiLDApLHQudmlld3BvcnRBbmNob3JZPXIuZ2V0KFwidmlld3BvcnRhbmNob3JZXCIsMTAwKSx0LnNjcm9sbD1yLmdldChcInNjcm9sbFwiLFwiXCIpLHMub25yZWdpb24mJnMub25yZWdpb24odCkscy5yZWdpb25MaXN0LnB1c2goe2lkOnIuZ2V0KFwiaWRcIikscmVnaW9uOnR9KX19KHQpfX0sLzovKX1lJiYocy5idWZmZXIrPXMuZGVjb2Rlci5kZWNvZGUoZSx7c3RyZWFtOiEwfSkpO3RyeXt2YXIgaTtpZihcIklOSVRJQUxcIj09PXMuc3RhdGUpe2lmKCEvXFxyXFxufFxcbi8udGVzdChzLmJ1ZmZlcikpcmV0dXJuIHRoaXM7dmFyIHI9KGk9dCgpKS5tYXRjaCgvXldFQlZUVChbIFxcdF0uKik/JC8pO2lmKCFyfHwhclswXSl0aHJvdyBuZXcgeG4oeG4uRXJyb3JzLkJhZFNpZ25hdHVyZSk7cy5zdGF0ZT1cIkhFQURFUlwifWZvcih2YXIgbz0hMTtzLmJ1ZmZlcjspe2lmKCEvXFxyXFxufFxcbi8udGVzdChzLmJ1ZmZlcikpcmV0dXJuIHRoaXM7c3dpdGNoKG8/bz0hMTppPXQoKSxzLnN0YXRlKXtjYXNlXCJIRUFERVJcIjovOi8udGVzdChpKT9uKGkpOml8fChzLnN0YXRlPVwiSURcIik7Y29udGludWU7Y2FzZVwiTk9URVwiOml8fChzLnN0YXRlPVwiSURcIik7Y29udGludWU7Y2FzZVwiSURcIjppZigvXk5PVEUoJHxbIFxcdF0pLy50ZXN0KGkpKXtzLnN0YXRlPVwiTk9URVwiO2JyZWFrfWlmKCFpKWNvbnRpbnVlO2lmKHMuY3VlPW5ldyhzLnZ0dGpzLlZUVEN1ZXx8cy53aW5kb3cuVlRUQ3VlKSgwLDAsXCJcIikscy5zdGF0ZT1cIkNVRVwiLC0xPT09aS5pbmRleE9mKFwiLS1cXHgzZVwiKSl7cy5jdWUuaWQ9aTtjb250aW51ZX1jYXNlXCJDVUVcIjp0cnl7TG4oaSxzLmN1ZSxzLnJlZ2lvbkxpc3QpfWNhdGNoKGUpe3MucmVwb3J0T3JUaHJvd0Vycm9yKGUpLHMuY3VlPW51bGwscy5zdGF0ZT1cIkJBRENVRVwiO2NvbnRpbnVlfXMuc3RhdGU9XCJDVUVURVhUXCI7Y29udGludWU7Y2FzZVwiQ1VFVEVYVFwiOnZhciBhPS0xIT09aS5pbmRleE9mKFwiLS1cXHgzZVwiKTtpZighaXx8YSYmKG89ITApKXtzLm9uY3VlJiZzLm9uY3VlKHMuY3VlKSxzLmN1ZT1udWxsLHMuc3RhdGU9XCJJRFwiO2NvbnRpbnVlfXMuY3VlLnRleHQmJihzLmN1ZS50ZXh0Kz1cIlxcblwiKSxzLmN1ZS50ZXh0Kz1pO2NvbnRpbnVlO2Nhc2VcIkJBRENVRVwiOml8fChzLnN0YXRlPVwiSURcIik7Y29udGludWV9fX1jYXRjaChlKXtzLnJlcG9ydE9yVGhyb3dFcnJvcihlKSxcIkNVRVRFWFRcIj09PXMuc3RhdGUmJnMuY3VlJiZzLm9uY3VlJiZzLm9uY3VlKHMuY3VlKSxzLmN1ZT1udWxsLHMuc3RhdGU9XCJJTklUSUFMXCI9PT1zLnN0YXRlP1wiQkFEV0VCVlRUXCI6XCJCQURDVUVcIn1yZXR1cm4gdGhpc30sZmx1c2g6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RyeXtpZih0LmJ1ZmZlcis9dC5kZWNvZGVyLmRlY29kZSgpLCh0LmN1ZXx8XCJIRUFERVJcIj09PXQuc3RhdGUpJiYodC5idWZmZXIrPVwiXFxuXFxuXCIsdC5wYXJzZSgpKSxcIklOSVRJQUxcIj09PXQuc3RhdGUpdGhyb3cgbmV3IHhuKHhuLkVycm9ycy5CYWRTaWduYXR1cmUpfWNhdGNoKGUpe3QucmVwb3J0T3JUaHJvd0Vycm9yKGUpfXJldHVybiB0Lm9uZmx1c2gmJnQub25mbHVzaCgpLHRoaXN9fTt2YXIgS249V24sVW49e1wiXCI6MSxscjoxLHJsOjF9LHFuPXtzdGFydDoxLG1pZGRsZToxLGVuZDoxLGxlZnQ6MSxyaWdodDoxfTtmdW5jdGlvbiBYbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmKCEhcW5bZS50b0xvd2VyQ2FzZSgpXSYmZS50b0xvd2VyQ2FzZSgpKX1mdW5jdGlvbiAkbihlLHQsbil7dGhpcy5oYXNCZWVuUmVzZXQ9ITE7dmFyIGk9XCJcIixyPSExLHM9ZSxvPXQsYT1uLGw9bnVsbCxjPVwiXCIsdT0hMCxoPVwiYXV0b1wiLGQ9XCJzdGFydFwiLHA9NTAsZj1cIm1pZGRsZVwiLHY9NTAsZz1cIm1pZGRsZVwiO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMse2lkOntlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBpfSxzZXQ6ZnVuY3Rpb24oZSl7aT1cIlwiK2V9fSxwYXVzZU9uRXhpdDp7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn0sc2V0OmZ1bmN0aW9uKGUpe3I9ISFlfX0sc3RhcnRUaW1lOntlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBzfSxzZXQ6ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN0YXJ0IHRpbWUgbXVzdCBiZSBzZXQgdG8gYSBudW1iZXIuXCIpO3M9ZSx0aGlzLmhhc0JlZW5SZXNldD0hMH19LGVuZFRpbWU6e2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99LHNldDpmdW5jdGlvbihlKXtpZihcIm51bWJlclwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRW5kIHRpbWUgbXVzdCBiZSBzZXQgdG8gYSBudW1iZXIuXCIpO289ZSx0aGlzLmhhc0JlZW5SZXNldD0hMH19LHRleHQ6e2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGF9LHNldDpmdW5jdGlvbihlKXthPVwiXCIrZSx0aGlzLmhhc0JlZW5SZXNldD0hMH19LHJlZ2lvbjp7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbH0sc2V0OmZ1bmN0aW9uKGUpe2w9ZSx0aGlzLmhhc0JlZW5SZXNldD0hMH19LHZlcnRpY2FsOntlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBjfSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQsbj1cInN0cmluZ1wiPT10eXBlb2YodD1lKSYmISFVblt0LnRvTG93ZXJDYXNlKCldJiZ0LnRvTG93ZXJDYXNlKCk7aWYoITE9PT1uKXRocm93IG5ldyBTeW50YXhFcnJvcihcIkFuIGludmFsaWQgb3IgaWxsZWdhbCBzdHJpbmcgd2FzIHNwZWNpZmllZC5cIik7Yz1uLHRoaXMuaGFzQmVlblJlc2V0PSEwfX0sc25hcFRvTGluZXM6e2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHV9LHNldDpmdW5jdGlvbihlKXt1PSEhZSx0aGlzLmhhc0JlZW5SZXNldD0hMH19LGxpbmU6e2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGh9LHNldDpmdW5jdGlvbihlKXtpZihcIm51bWJlclwiIT10eXBlb2YgZSYmXCJhdXRvXCIhPT1lKXRocm93IG5ldyBTeW50YXhFcnJvcihcIkFuIGludmFsaWQgbnVtYmVyIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWQuXCIpO2g9ZSx0aGlzLmhhc0JlZW5SZXNldD0hMH19LGxpbmVBbGlnbjp7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0OmZ1bmN0aW9uKGUpe3ZhciB0PVhuKGUpO2lmKCF0KXRocm93IG5ldyBTeW50YXhFcnJvcihcIkFuIGludmFsaWQgb3IgaWxsZWdhbCBzdHJpbmcgd2FzIHNwZWNpZmllZC5cIik7ZD10LHRoaXMuaGFzQmVlblJlc2V0PSEwfX0scG9zaXRpb246e2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHB9LHNldDpmdW5jdGlvbihlKXtpZihlPDB8fDEwMDxlKXRocm93IG5ldyBFcnJvcihcIlBvc2l0aW9uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxMDAuXCIpO3A9ZSx0aGlzLmhhc0JlZW5SZXNldD0hMH19LHBvc2l0aW9uQWxpZ246e2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LHNldDpmdW5jdGlvbihlKXt2YXIgdD1YbihlKTtpZighdCl0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJBbiBpbnZhbGlkIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWQuXCIpO2Y9dCx0aGlzLmhhc0JlZW5SZXNldD0hMH19LHNpemU6e2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHZ9LHNldDpmdW5jdGlvbihlKXtpZihlPDB8fDEwMDxlKXRocm93IG5ldyBFcnJvcihcIlNpemUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC5cIik7dj1lLHRoaXMuaGFzQmVlblJlc2V0PSEwfX0sYWxpZ246e2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGd9LHNldDpmdW5jdGlvbihlKXt2YXIgdD1YbihlKTtpZighdCl0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJBbiBpbnZhbGlkIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWQuXCIpO2c9dCx0aGlzLmhhc0JlZW5SZXNldD0hMH19fSksdGhpcy5kaXNwbGF5U3RhdGU9dm9pZCAwfSRuLnByb3RvdHlwZS5nZXRDdWVBc0hUTUw9ZnVuY3Rpb24oKXtyZXR1cm4gV2ViVlRULmNvbnZlcnRDdWVUb0RPTVRyZWUod2luZG93LHRoaXMudGV4dCl9O3ZhciBZbj0kbixHbj17XCJcIjohMCx1cDohMH07ZnVuY3Rpb24gUW4oZSl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGUmJjA8PWUmJmU8PTEwMH12YXIgSm49ZnVuY3Rpb24oKXt2YXIgdD0xMDAsbj0zLGk9MCxyPTEwMCxzPTAsbz0xMDAsYT1cIlwiO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMse3dpZHRoOntlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0fSxzZXQ6ZnVuY3Rpb24oZSl7aWYoIVFuKGUpKXRocm93IG5ldyBFcnJvcihcIldpZHRoIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxMDAuXCIpO3Q9ZX19LGxpbmVzOntlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBufSxzZXQ6ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkxpbmVzIG11c3QgYmUgc2V0IHRvIGEgbnVtYmVyLlwiKTtuPWV9fSxyZWdpb25BbmNob3JZOntlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByfSxzZXQ6ZnVuY3Rpb24oZSl7aWYoIVFuKGUpKXRocm93IG5ldyBFcnJvcihcIlJlZ2lvbkFuY2hvclggbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC5cIik7cj1lfX0scmVnaW9uQW5jaG9yWDp7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sc2V0OmZ1bmN0aW9uKGUpe2lmKCFRbihlKSl0aHJvdyBuZXcgRXJyb3IoXCJSZWdpb25BbmNob3JZIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxMDAuXCIpO2k9ZX19LHZpZXdwb3J0QW5jaG9yWTp7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb30sc2V0OmZ1bmN0aW9uKGUpe2lmKCFRbihlKSl0aHJvdyBuZXcgRXJyb3IoXCJWaWV3cG9ydEFuY2hvclkgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC5cIik7bz1lfX0sdmlld3BvcnRBbmNob3JYOntlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBzfSxzZXQ6ZnVuY3Rpb24oZSl7aWYoIVFuKGUpKXRocm93IG5ldyBFcnJvcihcIlZpZXdwb3J0QW5jaG9yWCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMTAwLlwiKTtzPWV9fSxzY3JvbGw6e2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGF9LHNldDpmdW5jdGlvbihlKXt2YXIgdCxuPVwic3RyaW5nXCI9PXR5cGVvZih0PWUpJiYhIUduW3QudG9Mb3dlckNhc2UoKV0mJnQudG9Mb3dlckNhc2UoKTtpZighMT09PW4pdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiQW4gaW52YWxpZCBvciBpbGxlZ2FsIHN0cmluZyB3YXMgc3BlY2lmaWVkLlwiKTthPW59fX0pfSxabj1BdChmdW5jdGlvbihlKXt2YXIgdD1lLmV4cG9ydHM9e1dlYlZUVDpLbixWVFRDdWU6WW4sVlRUUmVnaW9uOkpufTtoLnZ0dGpzPXQsaC5XZWJWVFQ9dC5XZWJWVFQ7dmFyIG49dC5WVFRDdWUsaT10LlZUVFJlZ2lvbixyPWguVlRUQ3VlLHM9aC5WVFRSZWdpb247dC5zaGltPWZ1bmN0aW9uKCl7aC5WVFRDdWU9bixoLlZUVFJlZ2lvbj1pfSx0LnJlc3RvcmU9ZnVuY3Rpb24oKXtoLlZUVEN1ZT1yLGguVlRUUmVnaW9uPXN9LGguVlRUQ3VlfHx0LnNoaW0oKX0pO1puLldlYlZUVCxabi5WVFRDdWUsWm4uVlRUUmVnaW9uO3ZhciBlaT1mdW5jdGlvbih0KXtmdW5jdGlvbiBuKG4sZSl7dmFyIGk7cmV0dXJuIHZvaWQgMD09PW4mJihuPXt9KSx2b2lkIDA9PT1lJiYoZT1mdW5jdGlvbigpe30pLG4ucmVwb3J0VG91Y2hBY3Rpdml0eT0hMSwoaT10LmNhbGwodGhpcyxudWxsLG4sZSl8fHRoaXMpLmhhc1N0YXJ0ZWRfPSExLGkub24oXCJwbGF5aW5nXCIsZnVuY3Rpb24oKXt0aGlzLmhhc1N0YXJ0ZWRfPSEwfSksaS5vbihcImxvYWRzdGFydFwiLGZ1bmN0aW9uKCl7dGhpcy5oYXNTdGFydGVkXz0hMX0pLHduLm5hbWVzLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9d25bZV07biYmblt0LmdldHRlck5hbWVdJiYoaVt0LnByaXZhdGVOYW1lXT1uW3QuZ2V0dGVyTmFtZV0pfSksaS5mZWF0dXJlc1Byb2dyZXNzRXZlbnRzfHxpLm1hbnVhbFByb2dyZXNzT24oKSxpLmZlYXR1cmVzVGltZXVwZGF0ZUV2ZW50c3x8aS5tYW51YWxUaW1lVXBkYXRlc09uKCksW1wiVGV4dFwiLFwiQXVkaW9cIixcIlZpZGVvXCJdLmZvckVhY2goZnVuY3Rpb24oZSl7ITE9PT1uW1wibmF0aXZlXCIrZStcIlRyYWNrc1wiXSYmKGlbXCJmZWF0dXJlc05hdGl2ZVwiK2UrXCJUcmFja3NcIl09ITEpfSksITE9PT1uLm5hdGl2ZUNhcHRpb25zfHwhMT09PW4ubmF0aXZlVGV4dFRyYWNrcz9pLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcz0hMTohMCE9PW4ubmF0aXZlQ2FwdGlvbnMmJiEwIT09bi5uYXRpdmVUZXh0VHJhY2tzfHwoaS5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3M9ITApLGkuZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzfHxpLmVtdWxhdGVUZXh0VHJhY2tzKCksaS5hdXRvUmVtb3RlVGV4dFRyYWNrc189bmV3IHduLnRleHQuTGlzdENsYXNzLGkuaW5pdFRyYWNrTGlzdGVuZXJzKCksbi5uYXRpdmVDb250cm9sc0ZvclRvdWNofHxpLmVtaXRUYXBFdmVudHMoKSxpLmNvbnN0cnVjdG9yJiYoaS5uYW1lXz1pLmNvbnN0cnVjdG9yLm5hbWV8fFwiVW5rbm93biBUZWNoXCIpLGl9ZihuLHQpO3ZhciBlPW4ucHJvdG90eXBlO3JldHVybiBlLnRyaWdnZXJTb3VyY2VzZXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0aGlzLmlzUmVhZHlffHx0aGlzLm9uZShcInJlYWR5XCIsZnVuY3Rpb24oKXtyZXR1cm4gdC5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIHQudHJpZ2dlclNvdXJjZXNldChlKX0sMSl9KSx0aGlzLnRyaWdnZXIoe3NyYzplLHR5cGU6XCJzb3VyY2VzZXRcIn0pfSxlLm1hbnVhbFByb2dyZXNzT249ZnVuY3Rpb24oKXt0aGlzLm9uKFwiZHVyYXRpb25jaGFuZ2VcIix0aGlzLm9uRHVyYXRpb25DaGFuZ2UpLHRoaXMubWFudWFsUHJvZ3Jlc3M9ITAsdGhpcy5vbmUoXCJyZWFkeVwiLHRoaXMudHJhY2tQcm9ncmVzcyl9LGUubWFudWFsUHJvZ3Jlc3NPZmY9ZnVuY3Rpb24oKXt0aGlzLm1hbnVhbFByb2dyZXNzPSExLHRoaXMuc3RvcFRyYWNraW5nUHJvZ3Jlc3MoKSx0aGlzLm9mZihcImR1cmF0aW9uY2hhbmdlXCIsdGhpcy5vbkR1cmF0aW9uQ2hhbmdlKX0sZS50cmFja1Byb2dyZXNzPWZ1bmN0aW9uKGUpe3RoaXMuc3RvcFRyYWNraW5nUHJvZ3Jlc3MoKSx0aGlzLnByb2dyZXNzSW50ZXJ2YWw9dGhpcy5zZXRJbnRlcnZhbChDZSh0aGlzLGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5idWZmZXJlZFBlcmNlbnQoKTt0aGlzLmJ1ZmZlcmVkUGVyY2VudF8hPT1lJiZ0aGlzLnRyaWdnZXIoXCJwcm9ncmVzc1wiKSwxPT09KHRoaXMuYnVmZmVyZWRQZXJjZW50Xz1lKSYmdGhpcy5zdG9wVHJhY2tpbmdQcm9ncmVzcygpfSksNTAwKX0sZS5vbkR1cmF0aW9uQ2hhbmdlPWZ1bmN0aW9uKGUpe3RoaXMuZHVyYXRpb25fPXRoaXMuZHVyYXRpb24oKX0sZS5idWZmZXJlZD1mdW5jdGlvbigpe3JldHVybiBkdCgwLDApfSxlLmJ1ZmZlcmVkUGVyY2VudD1mdW5jdGlvbigpe3JldHVybiBwdCh0aGlzLmJ1ZmZlcmVkKCksdGhpcy5kdXJhdGlvbl8pfSxlLnN0b3BUcmFja2luZ1Byb2dyZXNzPWZ1bmN0aW9uKCl7dGhpcy5jbGVhckludGVydmFsKHRoaXMucHJvZ3Jlc3NJbnRlcnZhbCl9LGUubWFudWFsVGltZVVwZGF0ZXNPbj1mdW5jdGlvbigpe3RoaXMubWFudWFsVGltZVVwZGF0ZXM9ITAsdGhpcy5vbihcInBsYXlcIix0aGlzLnRyYWNrQ3VycmVudFRpbWUpLHRoaXMub24oXCJwYXVzZVwiLHRoaXMuc3RvcFRyYWNraW5nQ3VycmVudFRpbWUpfSxlLm1hbnVhbFRpbWVVcGRhdGVzT2ZmPWZ1bmN0aW9uKCl7dGhpcy5tYW51YWxUaW1lVXBkYXRlcz0hMSx0aGlzLnN0b3BUcmFja2luZ0N1cnJlbnRUaW1lKCksdGhpcy5vZmYoXCJwbGF5XCIsdGhpcy50cmFja0N1cnJlbnRUaW1lKSx0aGlzLm9mZihcInBhdXNlXCIsdGhpcy5zdG9wVHJhY2tpbmdDdXJyZW50VGltZSl9LGUudHJhY2tDdXJyZW50VGltZT1mdW5jdGlvbigpe3RoaXMuY3VycmVudFRpbWVJbnRlcnZhbCYmdGhpcy5zdG9wVHJhY2tpbmdDdXJyZW50VGltZSgpLHRoaXMuY3VycmVudFRpbWVJbnRlcnZhbD10aGlzLnNldEludGVydmFsKGZ1bmN0aW9uKCl7dGhpcy50cmlnZ2VyKHt0eXBlOlwidGltZXVwZGF0ZVwiLHRhcmdldDp0aGlzLG1hbnVhbGx5VHJpZ2dlcmVkOiEwfSl9LDI1MCl9LGUuc3RvcFRyYWNraW5nQ3VycmVudFRpbWU9ZnVuY3Rpb24oKXt0aGlzLmNsZWFySW50ZXJ2YWwodGhpcy5jdXJyZW50VGltZUludGVydmFsKSx0aGlzLnRyaWdnZXIoe3R5cGU6XCJ0aW1ldXBkYXRlXCIsdGFyZ2V0OnRoaXMsbWFudWFsbHlUcmlnZ2VyZWQ6ITB9KX0sZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5jbGVhclRyYWNrcyhDbi5uYW1lcyksdGhpcy5tYW51YWxQcm9ncmVzcyYmdGhpcy5tYW51YWxQcm9ncmVzc09mZigpLHRoaXMubWFudWFsVGltZVVwZGF0ZXMmJnRoaXMubWFudWFsVGltZVVwZGF0ZXNPZmYoKSx0LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyl9LGUuY2xlYXJUcmFja3M9ZnVuY3Rpb24oZSl7dmFyIHI9dGhpczsoZT1bXS5jb25jYXQoZSkpLmZvckVhY2goZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXJbZStcIlRyYWNrc1wiXSgpfHxbXSxuPXQubGVuZ3RoO24tLTspe3ZhciBpPXRbbl07XCJ0ZXh0XCI9PT1lJiZyLnJlbW92ZVJlbW90ZVRleHRUcmFjayhpKSx0LnJlbW92ZVRyYWNrKGkpfX0pfSxlLmNsZWFudXBBdXRvVGV4dFRyYWNrcz1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLmF1dG9SZW1vdGVUZXh0VHJhY2tzX3x8W10sdD1lLmxlbmd0aDt0LS07KXt2YXIgbj1lW3RdO3RoaXMucmVtb3ZlUmVtb3RlVGV4dFRyYWNrKG4pfX0sZS5yZXNldD1mdW5jdGlvbigpe30sZS5lcnJvcj1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwIT09ZSYmKHRoaXMuZXJyb3JfPW5ldyBUdChlKSx0aGlzLnRyaWdnZXIoXCJlcnJvclwiKSksdGhpcy5lcnJvcl99LGUucGxheWVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFzU3RhcnRlZF8/ZHQoMCwwKTpkdCgpfSxlLnNldEN1cnJlbnRUaW1lPWZ1bmN0aW9uKCl7dGhpcy5tYW51YWxUaW1lVXBkYXRlcyYmdGhpcy50cmlnZ2VyKHt0eXBlOlwidGltZXVwZGF0ZVwiLHRhcmdldDp0aGlzLG1hbnVhbGx5VHJpZ2dlcmVkOiEwfSl9LGUuaW5pdFRyYWNrTGlzdGVuZXJzPWZ1bmN0aW9uKCl7dmFyIHI9dGhpcztDbi5uYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PUNuW2VdLG49ZnVuY3Rpb24oKXtyLnRyaWdnZXIoZStcInRyYWNrY2hhbmdlXCIpfSxpPXJbdC5nZXR0ZXJOYW1lXSgpO2kuYWRkRXZlbnRMaXN0ZW5lcihcInJlbW92ZXRyYWNrXCIsbiksaS5hZGRFdmVudExpc3RlbmVyKFwiYWRkdHJhY2tcIixuKSxyLm9uKFwiZGlzcG9zZVwiLGZ1bmN0aW9uKCl7aS5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVtb3ZldHJhY2tcIixuKSxpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhZGR0cmFja1wiLG4pfSl9KX0sZS5hZGRXZWJWdHRTY3JpcHRfPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZighaC5XZWJWVFQpaWYoZC5ib2R5LmNvbnRhaW5zKHRoaXMuZWwoKSkpe2lmKCF0aGlzLm9wdGlvbnNfW1widnR0LmpzXCJdJiZjKFpuKSYmMDxPYmplY3Qua2V5cyhabikubGVuZ3RoKXJldHVybiB2b2lkIHRoaXMudHJpZ2dlcihcInZ0dGpzbG9hZGVkXCIpO3ZhciB0PWQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTt0LnNyYz10aGlzLm9wdGlvbnNfW1widnR0LmpzXCJdfHxcImh0dHBzOi8vdmpzLnplbmNkbi5uZXQvdnR0anMvMC4xNC4xL3Z0dC5taW4uanNcIix0Lm9ubG9hZD1mdW5jdGlvbigpe2UudHJpZ2dlcihcInZ0dGpzbG9hZGVkXCIpfSx0Lm9uZXJyb3I9ZnVuY3Rpb24oKXtlLnRyaWdnZXIoXCJ2dHRqc2Vycm9yXCIpfSx0aGlzLm9uKFwiZGlzcG9zZVwiLGZ1bmN0aW9uKCl7dC5vbmxvYWQ9bnVsbCx0Lm9uZXJyb3I9bnVsbH0pLGguV2ViVlRUPSEwLHRoaXMuZWwoKS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHQpfWVsc2UgdGhpcy5yZWFkeSh0aGlzLmFkZFdlYlZ0dFNjcmlwdF8pfSxlLmVtdWxhdGVUZXh0VHJhY2tzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPXRoaXMudGV4dFRyYWNrcygpLHQ9dGhpcy5yZW1vdGVUZXh0VHJhY2tzKCksaT1mdW5jdGlvbihlKXtyZXR1cm4gbi5hZGRUcmFjayhlLnRyYWNrKX0scj1mdW5jdGlvbihlKXtyZXR1cm4gbi5yZW1vdmVUcmFjayhlLnRyYWNrKX07dC5vbihcImFkZHRyYWNrXCIsaSksdC5vbihcInJlbW92ZXRyYWNrXCIsciksdGhpcy5hZGRXZWJWdHRTY3JpcHRfKCk7dmFyIHM9ZnVuY3Rpb24oKXtyZXR1cm4gZS50cmlnZ2VyKFwidGV4dHRyYWNrY2hhbmdlXCIpfSxvPWZ1bmN0aW9uKCl7cygpO2Zvcih2YXIgZT0wO2U8bi5sZW5ndGg7ZSsrKXt2YXIgdD1uW2VdO3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImN1ZWNoYW5nZVwiLHMpLFwic2hvd2luZ1wiPT09dC5tb2RlJiZ0LmFkZEV2ZW50TGlzdGVuZXIoXCJjdWVjaGFuZ2VcIixzKX19O28oKSxuLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIixvKSxuLmFkZEV2ZW50TGlzdGVuZXIoXCJhZGR0cmFja1wiLG8pLG4uYWRkRXZlbnRMaXN0ZW5lcihcInJlbW92ZXRyYWNrXCIsbyksdGhpcy5vbihcImRpc3Bvc2VcIixmdW5jdGlvbigpe3Qub2ZmKFwiYWRkdHJhY2tcIixpKSx0Lm9mZihcInJlbW92ZXRyYWNrXCIsciksbi5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsbyksbi5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWRkdHJhY2tcIixvKSxuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZW1vdmV0cmFja1wiLG8pO2Zvcih2YXIgZT0wO2U8bi5sZW5ndGg7ZSsrKXtuW2VdLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjdWVjaGFuZ2VcIixzKX19KX0sZS5hZGRUZXh0VHJhY2s9ZnVuY3Rpb24oZSx0LG4pe2lmKCFlKXRocm93IG5ldyBFcnJvcihcIlRleHRUcmFjayBraW5kIGlzIHJlcXVpcmVkIGJ1dCB3YXMgbm90IHByb3ZpZGVkXCIpO3JldHVybiBmdW5jdGlvbihlLHQsbixpLHIpe3ZvaWQgMD09PXImJihyPXt9KTt2YXIgcz1lLnRleHRUcmFja3MoKTtyLmtpbmQ9dCxuJiYoci5sYWJlbD1uKSxpJiYoci5sYW5ndWFnZT1pKSxyLnRlY2g9ZTt2YXIgbz1uZXcgd24udGV4dC5UcmFja0NsYXNzKHIpO3JldHVybiBzLmFkZFRyYWNrKG8pLG99KHRoaXMsZSx0LG4pfSxlLmNyZWF0ZVJlbW90ZVRleHRUcmFjaz1mdW5jdGlvbihlKXt2YXIgdD1CZShlLHt0ZWNoOnRoaXN9KTtyZXR1cm4gbmV3IEVuLnJlbW90ZVRleHRFbC5UcmFja0NsYXNzKHQpfSxlLmFkZFJlbW90ZVRleHRUcmFjaz1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7dm9pZCAwPT09ZSYmKGU9e30pO3ZhciBpPXRoaXMuY3JlYXRlUmVtb3RlVGV4dFRyYWNrKGUpO3JldHVybiEwIT09dCYmITEhPT10JiYoZy53YXJuKCdDYWxsaW5nIGFkZFJlbW90ZVRleHRUcmFjayB3aXRob3V0IGV4cGxpY2l0bHkgc2V0dGluZyB0aGUgXCJtYW51YWxDbGVhbnVwXCIgcGFyYW1ldGVyIHRvIGB0cnVlYCBpcyBkZXByZWNhdGVkIGFuZCBkZWZhdWx0IHRvIGBmYWxzZWAgaW4gZnV0dXJlIHZlcnNpb24gb2YgdmlkZW8uanMnKSx0PSEwKSx0aGlzLnJlbW90ZVRleHRUcmFja0VscygpLmFkZFRyYWNrRWxlbWVudF8oaSksdGhpcy5yZW1vdGVUZXh0VHJhY2tzKCkuYWRkVHJhY2soaS50cmFjayksITAhPT10JiZ0aGlzLnJlYWR5KGZ1bmN0aW9uKCl7cmV0dXJuIG4uYXV0b1JlbW90ZVRleHRUcmFja3NfLmFkZFRyYWNrKGkudHJhY2spfSksaX0sZS5yZW1vdmVSZW1vdGVUZXh0VHJhY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5yZW1vdGVUZXh0VHJhY2tFbHMoKS5nZXRUcmFja0VsZW1lbnRCeVRyYWNrXyhlKTt0aGlzLnJlbW90ZVRleHRUcmFja0VscygpLnJlbW92ZVRyYWNrRWxlbWVudF8odCksdGhpcy5yZW1vdGVUZXh0VHJhY2tzKCkucmVtb3ZlVHJhY2soZSksdGhpcy5hdXRvUmVtb3RlVGV4dFRyYWNrc18ucmVtb3ZlVHJhY2soZSl9LGUuZ2V0VmlkZW9QbGF5YmFja1F1YWxpdHk9ZnVuY3Rpb24oKXtyZXR1cm57fX0sZS5zZXRQb3N0ZXI9ZnVuY3Rpb24oKXt9LGUucGxheXNpbmxpbmU9ZnVuY3Rpb24oKXt9LGUuc2V0UGxheXNpbmxpbmU9ZnVuY3Rpb24oKXt9LGUub3ZlcnJpZGVOYXRpdmVBdWRpb1RyYWNrcz1mdW5jdGlvbigpe30sZS5vdmVycmlkZU5hdGl2ZVZpZGVvVHJhY2tzPWZ1bmN0aW9uKCl7fSxlLmNhblBsYXlUeXBlPWZ1bmN0aW9uKCl7cmV0dXJuXCJcIn0sbi5jYW5QbGF5VHlwZT1mdW5jdGlvbigpe3JldHVyblwiXCJ9LG4uY2FuUGxheVNvdXJjZT1mdW5jdGlvbihlLHQpe3JldHVybiBuLmNhblBsYXlUeXBlKGUudHlwZSl9LG4uaXNUZWNoPWZ1bmN0aW9uKGUpe3JldHVybiBlLnByb3RvdHlwZSBpbnN0YW5jZW9mIG58fGUgaW5zdGFuY2VvZiBufHxlPT09bn0sbi5yZWdpc3RlclRlY2g9ZnVuY3Rpb24oZSx0KXtpZihuLnRlY2hzX3x8KG4udGVjaHNfPXt9KSwhbi5pc1RlY2godCkpdGhyb3cgbmV3IEVycm9yKFwiVGVjaCBcIitlK1wiIG11c3QgYmUgYSBUZWNoXCIpO2lmKCFuLmNhblBsYXlUeXBlKXRocm93IG5ldyBFcnJvcihcIlRlY2hzIG11c3QgaGF2ZSBhIHN0YXRpYyBjYW5QbGF5VHlwZSBtZXRob2Qgb24gdGhlbVwiKTtpZighbi5jYW5QbGF5U291cmNlKXRocm93IG5ldyBFcnJvcihcIlRlY2hzIG11c3QgaGF2ZSBhIHN0YXRpYyBjYW5QbGF5U291cmNlIG1ldGhvZCBvbiB0aGVtXCIpO3JldHVybiBlPVJlKGUpLG4udGVjaHNfW2VdPXQsXCJUZWNoXCIhPT1lJiZuLmRlZmF1bHRUZWNoT3JkZXJfLnB1c2goZSksdH0sbi5nZXRUZWNoPWZ1bmN0aW9uKGUpe2lmKGUpcmV0dXJuIGU9UmUoZSksbi50ZWNoc18mJm4udGVjaHNfW2VdP24udGVjaHNfW2VdOmgmJmgudmlkZW9qcyYmaC52aWRlb2pzW2VdPyhnLndhcm4oXCJUaGUgXCIrZStcIiB0ZWNoIHdhcyBhZGRlZCB0byB0aGUgdmlkZW9qcyBvYmplY3Qgd2hlbiBpdCBzaG91bGQgYmUgcmVnaXN0ZXJlZCB1c2luZyB2aWRlb2pzLnJlZ2lzdGVyVGVjaChuYW1lLCB0ZWNoKVwiKSxoLnZpZGVvanNbZV0pOnZvaWQgMH0sbn0oRmUpO3duLm5hbWVzLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9d25bZV07ZWkucHJvdG90eXBlW3QuZ2V0dGVyTmFtZV09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1t0LnByaXZhdGVOYW1lXT10aGlzW3QucHJpdmF0ZU5hbWVdfHxuZXcgdC5MaXN0Q2xhc3MsdGhpc1t0LnByaXZhdGVOYW1lXX19KSxlaS5wcm90b3R5cGUuZmVhdHVyZXNWb2x1bWVDb250cm9sPSEwLGVpLnByb3RvdHlwZS5mZWF0dXJlc011dGVDb250cm9sPSEwLGVpLnByb3RvdHlwZS5mZWF0dXJlc0Z1bGxzY3JlZW5SZXNpemU9ITEsZWkucHJvdG90eXBlLmZlYXR1cmVzUGxheWJhY2tSYXRlPSExLGVpLnByb3RvdHlwZS5mZWF0dXJlc1Byb2dyZXNzRXZlbnRzPSExLGVpLnByb3RvdHlwZS5mZWF0dXJlc1NvdXJjZXNldD0hMSxlaS5wcm90b3R5cGUuZmVhdHVyZXNUaW1ldXBkYXRlRXZlbnRzPSExLGVpLnByb3RvdHlwZS5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3M9ITEsZWkud2l0aFNvdXJjZUhhbmRsZXJzPWZ1bmN0aW9uKHIpe3IucmVnaXN0ZXJTb3VyY2VIYW5kbGVyPWZ1bmN0aW9uKGUsdCl7dmFyIG49ci5zb3VyY2VIYW5kbGVycztufHwobj1yLnNvdXJjZUhhbmRsZXJzPVtdKSx2b2lkIDA9PT10JiYodD1uLmxlbmd0aCksbi5zcGxpY2UodCwwLGUpfSxyLmNhblBsYXlUeXBlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPXIuc291cmNlSGFuZGxlcnN8fFtdLGk9MDtpPG4ubGVuZ3RoO2krKylpZih0PW5baV0uY2FuUGxheVR5cGUoZSkpcmV0dXJuIHQ7cmV0dXJuXCJcIn0sci5zZWxlY3RTb3VyY2VIYW5kbGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPXIuc291cmNlSGFuZGxlcnN8fFtdLGk9MDtpPG4ubGVuZ3RoO2krKylpZihuW2ldLmNhbkhhbmRsZVNvdXJjZShlLHQpKXJldHVybiBuW2ldO3JldHVybiBudWxsfSxyLmNhblBsYXlTb3VyY2U9ZnVuY3Rpb24oZSx0KXt2YXIgbj1yLnNlbGVjdFNvdXJjZUhhbmRsZXIoZSx0KTtyZXR1cm4gbj9uLmNhbkhhbmRsZVNvdXJjZShlLHQpOlwiXCJ9O1tcInNlZWthYmxlXCIsXCJzZWVraW5nXCIsXCJkdXJhdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PXRoaXNbZV07XCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKHRoaXNbZV09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zb3VyY2VIYW5kbGVyXyYmdGhpcy5zb3VyY2VIYW5kbGVyX1tlXT90aGlzLnNvdXJjZUhhbmRsZXJfW2VdLmFwcGx5KHRoaXMuc291cmNlSGFuZGxlcl8sYXJndW1lbnRzKTp0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSxyLnByb3RvdHlwZSksci5wcm90b3R5cGUuc2V0U291cmNlPWZ1bmN0aW9uKGUpe3ZhciB0PXIuc2VsZWN0U291cmNlSGFuZGxlcihlLHRoaXMub3B0aW9uc18pO3R8fChyLm5hdGl2ZVNvdXJjZUhhbmRsZXI/dD1yLm5hdGl2ZVNvdXJjZUhhbmRsZXI6Zy5lcnJvcihcIk5vIHNvdXJjZSBoYW5kbGVyIGZvdW5kIGZvciB0aGUgY3VycmVudCBzb3VyY2UuXCIpKSx0aGlzLmRpc3Bvc2VTb3VyY2VIYW5kbGVyKCksdGhpcy5vZmYoXCJkaXNwb3NlXCIsdGhpcy5kaXNwb3NlU291cmNlSGFuZGxlciksdCE9PXIubmF0aXZlU291cmNlSGFuZGxlciYmKHRoaXMuY3VycmVudFNvdXJjZV89ZSksdGhpcy5zb3VyY2VIYW5kbGVyXz10LmhhbmRsZVNvdXJjZShlLHRoaXMsdGhpcy5vcHRpb25zXyksdGhpcy5vbmUoXCJkaXNwb3NlXCIsdGhpcy5kaXNwb3NlU291cmNlSGFuZGxlcil9LHIucHJvdG90eXBlLmRpc3Bvc2VTb3VyY2VIYW5kbGVyPWZ1bmN0aW9uKCl7dGhpcy5jdXJyZW50U291cmNlXyYmKHRoaXMuY2xlYXJUcmFja3MoW1wiYXVkaW9cIixcInZpZGVvXCJdKSx0aGlzLmN1cnJlbnRTb3VyY2VfPW51bGwpLHRoaXMuY2xlYW51cEF1dG9UZXh0VHJhY2tzKCksdGhpcy5zb3VyY2VIYW5kbGVyXyYmKHRoaXMuc291cmNlSGFuZGxlcl8uZGlzcG9zZSYmdGhpcy5zb3VyY2VIYW5kbGVyXy5kaXNwb3NlKCksdGhpcy5zb3VyY2VIYW5kbGVyXz1udWxsKX19LEZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiVGVjaFwiLGVpKSxlaS5yZWdpc3RlclRlY2goXCJUZWNoXCIsZWkpLGVpLmRlZmF1bHRUZWNoT3JkZXJfPVtdO3ZhciB0aT17fSxuaT17fSxpaT17fTtmdW5jdGlvbiByaShlLHQsbil7ZS5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uIG4oaSxlLHIscyxvLGEpe3ZvaWQgMD09PWkmJihpPXt9KTt2b2lkIDA9PT1lJiYoZT1bXSk7dm9pZCAwPT09byYmKG89W10pO3ZvaWQgMD09PWEmJihhPSExKTt2YXIgdD1lLGw9dFswXSxjPXQuc2xpY2UoMSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGwpbihpLHRpW2xdLHIscyxvLGEpO2Vsc2UgaWYobCl7dmFyIHU9dWkocyxsKTtpZighdS5zZXRTb3VyY2UpcmV0dXJuIG8ucHVzaCh1KSxuKGksYyxyLHMsbyxhKTt1LnNldFNvdXJjZShfKHt9LGkpLGZ1bmN0aW9uKGUsdCl7aWYoZSlyZXR1cm4gbihpLGMscixzLG8sYSk7by5wdXNoKHUpLG4odCxpLnR5cGU9PT10LnR5cGU/Yzp0aVt0LnR5cGVdLHIscyxvLGEpfSl9ZWxzZSBjLmxlbmd0aD9uKGksYyxyLHMsbyxhKTphP3IoaSxvKTpuKGksdGlbXCIqXCJdLHIscyxvLCEwKX0odCx0aVt0LnR5cGVdLG4sZSl9LDEpfWZ1bmN0aW9uIHNpKGUsdCxuLGkpe3ZvaWQgMD09PWkmJihpPW51bGwpO3ZhciByPVwiY2FsbFwiK1JlKG4pLHM9ZS5yZWR1Y2UoY2kociksaSksbz1zPT09aWksYT1vP251bGw6dFtuXShzKTtyZXR1cm4gZnVuY3Rpb24oZSx0LG4saSl7Zm9yKHZhciByPWUubGVuZ3RoLTE7MDw9cjtyLS0pe3ZhciBzPWVbcl07c1t0XSYmc1t0XShpLG4pfX0oZSxuLGEsbyksYX12YXIgb2k9e2J1ZmZlcmVkOjEsY3VycmVudFRpbWU6MSxkdXJhdGlvbjoxLHNlZWthYmxlOjEscGxheWVkOjEscGF1c2VkOjF9LGFpPXtzZXRDdXJyZW50VGltZToxfSxsaT17cGxheToxLHBhdXNlOjF9O2Z1bmN0aW9uIGNpKG4pe3JldHVybiBmdW5jdGlvbihlLHQpe3JldHVybiBlPT09aWk/aWk6dFtuXT90W25dKGUpOmV9fWZ1bmN0aW9uIHVpKGUsdCl7dmFyIG49bmlbZS5pZCgpXSxpPW51bGw7aWYobnVsbD09bilyZXR1cm4gaT10KGUpLG5pW2UuaWQoKV09W1t0LGldXSxpO2Zvcih2YXIgcj0wO3I8bi5sZW5ndGg7cisrKXt2YXIgcz1uW3JdLG89c1swXSxhPXNbMV07bz09PXQmJihpPWEpfXJldHVybiBudWxsPT09aSYmKGk9dChlKSxuLnB1c2goW3QsaV0pKSxpfXZhciBoaT17b3B1czpcInZpZGVvL29nZ1wiLG9ndjpcInZpZGVvL29nZ1wiLG1wNDpcInZpZGVvL21wNFwiLG1vdjpcInZpZGVvL21wNFwiLG00djpcInZpZGVvL21wNFwiLG1rdjpcInZpZGVvL3gtbWF0cm9za2FcIixtcDM6XCJhdWRpby9tcGVnXCIsYWFjOlwiYXVkaW8vYWFjXCIsb2dhOlwiYXVkaW8vb2dnXCIsbTN1ODpcImFwcGxpY2F0aW9uL3gtbXBlZ1VSTFwiLGpwZzpcImltYWdlL2pwZWdcIixqcGVnOlwiaW1hZ2UvanBlZ1wiLGdpZjpcImltYWdlL2dpZlwiLHBuZzpcImltYWdlL3BuZ1wiLHN2ZzpcImltYWdlL3N2Zyt4bWxcIix3ZWJwOlwiaW1hZ2Uvd2VicFwifSxkaT1mdW5jdGlvbihlKXt2b2lkIDA9PT1lJiYoZT1cIlwiKTt2YXIgdD1ZdChlKTtyZXR1cm4gaGlbdC50b0xvd2VyQ2FzZSgpXXx8XCJcIn07ZnVuY3Rpb24gcGkoZSl7dmFyIHQ9ZGkoZS5zcmMpO3JldHVybiFlLnR5cGUmJnQmJihlLnR5cGU9dCksZX12YXIgZmk9ZnVuY3Rpb24oYyl7ZnVuY3Rpb24gZShlLHQsbil7dmFyIGkscj1CZSh7Y3JlYXRlRWw6ITF9LHQpO2lmKGk9Yy5jYWxsKHRoaXMsZSxyLG4pfHx0aGlzLHQucGxheWVyT3B0aW9ucy5zb3VyY2VzJiYwIT09dC5wbGF5ZXJPcHRpb25zLnNvdXJjZXMubGVuZ3RoKWUuc3JjKHQucGxheWVyT3B0aW9ucy5zb3VyY2VzKTtlbHNlIGZvcih2YXIgcz0wLG89dC5wbGF5ZXJPcHRpb25zLnRlY2hPcmRlcjtzPG8ubGVuZ3RoO3MrKyl7dmFyIGE9UmUob1tzXSksbD1laS5nZXRUZWNoKGEpO2lmKGF8fChsPUZlLmdldENvbXBvbmVudChhKSksbCYmbC5pc1N1cHBvcnRlZCgpKXtlLmxvYWRUZWNoXyhhKTticmVha319cmV0dXJuIGl9cmV0dXJuIGYoZSxjKSxlfShGZSk7RmUucmVnaXN0ZXJDb21wb25lbnQoXCJNZWRpYUxvYWRlclwiLGZpKTt2YXIgdmk9ZnVuY3Rpb24ocil7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPXIuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLmVtaXRUYXBFdmVudHMoKSxuLmVuYWJsZSgpLG59ZihlLHIpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZUVsPWZ1bmN0aW9uKGUsdCxuKXt2b2lkIDA9PT1lJiYoZT1cImRpdlwiKSx2b2lkIDA9PT10JiYodD17fSksdm9pZCAwPT09biYmKG49e30pLHQ9Xyh7aW5uZXJIVE1MOic8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIiBjbGFzcz1cInZqcy1pY29uLXBsYWNlaG9sZGVyXCI+PC9zcGFuPicsY2xhc3NOYW1lOnRoaXMuYnVpbGRDU1NDbGFzcygpLHRhYkluZGV4OjB9LHQpLFwiYnV0dG9uXCI9PT1lJiZnLmVycm9yKFwiQ3JlYXRpbmcgYSBDbGlja2FibGVDb21wb25lbnQgd2l0aCBhbiBIVE1MIGVsZW1lbnQgb2YgXCIrZStcIiBpcyBub3Qgc3VwcG9ydGVkOyB1c2UgYSBCdXR0b24gaW5zdGVhZC5cIiksbj1fKHtyb2xlOlwiYnV0dG9uXCJ9LG4pLHRoaXMudGFiSW5kZXhfPXQudGFiSW5kZXg7dmFyIGk9ci5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLGUsdCxuKTtyZXR1cm4gdGhpcy5jcmVhdGVDb250cm9sVGV4dEVsKGkpLGl9LHQuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuY29udHJvbFRleHRFbF89bnVsbCxyLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyl9LHQuY3JlYXRlQ29udHJvbFRleHRFbD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jb250cm9sVGV4dEVsXz14KFwic3BhblwiLHtjbGFzc05hbWU6XCJ2anMtY29udHJvbC10ZXh0XCJ9LHtcImFyaWEtbGl2ZVwiOlwicG9saXRlXCJ9KSxlJiZlLmFwcGVuZENoaWxkKHRoaXMuY29udHJvbFRleHRFbF8pLHRoaXMuY29udHJvbFRleHQodGhpcy5jb250cm9sVGV4dF8sZSksdGhpcy5jb250cm9sVGV4dEVsX30sdC5jb250cm9sVGV4dD1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PXQmJih0PXRoaXMuZWwoKSksdm9pZCAwPT09ZSlyZXR1cm4gdGhpcy5jb250cm9sVGV4dF98fFwiTmVlZCBUZXh0XCI7dmFyIG49dGhpcy5sb2NhbGl6ZShlKTt0aGlzLmNvbnRyb2xUZXh0Xz1lLGoodGhpcy5jb250cm9sVGV4dEVsXyxuKSx0aGlzLm5vbkljb25Db250cm9sfHx0LnNldEF0dHJpYnV0ZShcInRpdGxlXCIsbil9LHQuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLWNvbnRyb2wgdmpzLWJ1dHRvbiBcIityLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyl9LHQuZW5hYmxlPWZ1bmN0aW9uKCl7dGhpcy5lbmFibGVkX3x8KHRoaXMuZW5hYmxlZF89ITAsdGhpcy5yZW1vdmVDbGFzcyhcInZqcy1kaXNhYmxlZFwiKSx0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRpc2FibGVkXCIsXCJmYWxzZVwiKSxcInVuZGVmaW5lZFwiIT10eXBlb2YgdGhpcy50YWJJbmRleF8mJnRoaXMuZWxfLnNldEF0dHJpYnV0ZShcInRhYkluZGV4XCIsdGhpcy50YWJJbmRleF8pLHRoaXMub24oW1widGFwXCIsXCJjbGlja1wiXSx0aGlzLmhhbmRsZUNsaWNrKSx0aGlzLm9uKFwiZm9jdXNcIix0aGlzLmhhbmRsZUZvY3VzKSx0aGlzLm9uKFwiYmx1clwiLHRoaXMuaGFuZGxlQmx1cikpfSx0LmRpc2FibGU9ZnVuY3Rpb24oKXt0aGlzLmVuYWJsZWRfPSExLHRoaXMuYWRkQ2xhc3MoXCJ2anMtZGlzYWJsZWRcIiksdGhpcy5lbF8uc2V0QXR0cmlidXRlKFwiYXJpYS1kaXNhYmxlZFwiLFwidHJ1ZVwiKSxcInVuZGVmaW5lZFwiIT10eXBlb2YgdGhpcy50YWJJbmRleF8mJnRoaXMuZWxfLnJlbW92ZUF0dHJpYnV0ZShcInRhYkluZGV4XCIpLHRoaXMub2ZmKFtcInRhcFwiLFwiY2xpY2tcIl0sdGhpcy5oYW5kbGVDbGljayksdGhpcy5vZmYoXCJmb2N1c1wiLHRoaXMuaGFuZGxlRm9jdXMpLHRoaXMub2ZmKFwiYmx1clwiLHRoaXMuaGFuZGxlQmx1cil9LHQuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZSl7fSx0LmhhbmRsZUZvY3VzPWZ1bmN0aW9uKGUpe2hlKGQsXCJrZXlkb3duXCIsQ2UodGhpcyx0aGlzLmhhbmRsZUtleVByZXNzKSl9LHQuaGFuZGxlS2V5UHJlc3M9ZnVuY3Rpb24oZSl7UHQuaXNFdmVudEtleShlLFwiU3BhY2VcIil8fFB0LmlzRXZlbnRLZXkoZSxcIkVudGVyXCIpPyhlLnByZXZlbnREZWZhdWx0KCksdGhpcy50cmlnZ2VyKFwiY2xpY2tcIikpOnIucHJvdG90eXBlLmhhbmRsZUtleVByZXNzLmNhbGwodGhpcyxlKX0sdC5oYW5kbGVCbHVyPWZ1bmN0aW9uKGUpe2RlKGQsXCJrZXlkb3duXCIsQ2UodGhpcyx0aGlzLmhhbmRsZUtleVByZXNzKSl9LGV9KEZlKTtGZS5yZWdpc3RlckNvbXBvbmVudChcIkNsaWNrYWJsZUNvbXBvbmVudFwiLHZpKTt2YXIgZ2k9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLnVwZGF0ZSgpLGUub24oXCJwb3N0ZXJjaGFuZ2VcIixDZSh2KHYobikpLG4udXBkYXRlKSksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMucGxheWVyKCkub2ZmKFwicG9zdGVyY2hhbmdlXCIsdGhpcy51cGRhdGUpLGkucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKX0sdC5jcmVhdGVFbD1mdW5jdGlvbigpe3JldHVybiB4KFwiZGl2XCIse2NsYXNzTmFtZTpcInZqcy1wb3N0ZXJcIix0YWJJbmRleDotMX0pfSx0LnVwZGF0ZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnBsYXllcigpLnBvc3RlcigpO3RoaXMuc2V0U3JjKHQpLHQ/dGhpcy5zaG93KCk6dGhpcy5oaWRlKCl9LHQuc2V0U3JjPWZ1bmN0aW9uKGUpe3ZhciB0PVwiXCI7ZSYmKHQ9J3VybChcIicrZSsnXCIpJyksdGhpcy5lbF8uc3R5bGUuYmFja2dyb3VuZEltYWdlPXR9LHQuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZSl7dGhpcy5wbGF5ZXJfLmNvbnRyb2xzKCkmJih0aGlzLnBsYXllcl8ucGF1c2VkKCk/d3QodGhpcy5wbGF5ZXJfLnBsYXkoKSk6dGhpcy5wbGF5ZXJfLnBhdXNlKCksdGhpcy5wbGF5ZXJfLmhhbmRsZUZvY3VzKHt9KSl9LGV9KHZpKTtGZS5yZWdpc3RlckNvbXBvbmVudChcIlBvc3RlckltYWdlXCIsZ2kpO3ZhciB5aT1cIiMyMjJcIixtaT17bW9ub3NwYWNlOlwibW9ub3NwYWNlXCIsc2Fuc1NlcmlmOlwic2Fucy1zZXJpZlwiLHNlcmlmOlwic2VyaWZcIixtb25vc3BhY2VTYW5zU2VyaWY6J1wiQW5kYWxlIE1vbm9cIiwgXCJMdWNpZGEgQ29uc29sZVwiLCBtb25vc3BhY2UnLG1vbm9zcGFjZVNlcmlmOidcIkNvdXJpZXIgTmV3XCIsIG1vbm9zcGFjZScscHJvcG9ydGlvbmFsU2Fuc1NlcmlmOlwic2Fucy1zZXJpZlwiLHByb3BvcnRpb25hbFNlcmlmOlwic2VyaWZcIixjYXN1YWw6J1wiQ29taWMgU2FucyBNU1wiLCBJbXBhY3QsIGZhbnRhc3knLHNjcmlwdDonXCJNb25vdHlwZSBDb3JzaXZhXCIsIGN1cnNpdmUnLHNtYWxsY2FwczonXCJBbmRhbGUgTW9ub1wiLCBcIkx1Y2lkYSBDb25zb2xlXCIsIG1vbm9zcGFjZSwgc2Fucy1zZXJpZid9O2Z1bmN0aW9uIF9pKGUsdCl7dmFyIG47aWYoND09PWUubGVuZ3RoKW49ZVsxXStlWzFdK2VbMl0rZVsyXStlWzNdK2VbM107ZWxzZXtpZig3IT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2xvciBjb2RlIHByb3ZpZGVkLCBcIitlK1wiOyBtdXN0IGJlIGZvcm1hdHRlZCBhcyBlLmcuICNmMGUgb3IgI2Y2MDRlMi5cIik7bj1lLnNsaWNlKDEpfXJldHVyblwicmdiYShcIitwYXJzZUludChuLnNsaWNlKDAsMiksMTYpK1wiLFwiK3BhcnNlSW50KG4uc2xpY2UoMiw0KSwxNikrXCIsXCIrcGFyc2VJbnQobi5zbGljZSg0LDYpLDE2KStcIixcIit0K1wiKVwifWZ1bmN0aW9uIGJpKGUsdCxuKXt0cnl7ZS5zdHlsZVt0XT1ufWNhdGNoKGUpe3JldHVybn19dmFyIFRpPWZ1bmN0aW9uKHMpe2Z1bmN0aW9uIGUobixlLHQpe3ZhciBpO2k9cy5jYWxsKHRoaXMsbixlLHQpfHx0aGlzO3ZhciByPUNlKHYodihpKSksaS51cGRhdGVEaXNwbGF5KTtyZXR1cm4gbi5vbihcImxvYWRzdGFydFwiLENlKHYodihpKSksaS50b2dnbGVEaXNwbGF5KSksbi5vbihcInRleHR0cmFja2NoYW5nZVwiLHIpLG4ub24oXCJsb2FkZWRtZXRhZGF0YVwiLENlKHYodihpKSksaS5wcmVzZWxlY3RUcmFjaykpLG4ucmVhZHkoQ2Uodih2KGkpKSxmdW5jdGlvbigpe2lmKG4udGVjaF8mJm4udGVjaF8uZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzKXRoaXMuaGlkZSgpO2Vsc2V7bi5vbihcImZ1bGxzY3JlZW5jaGFuZ2VcIixyKSxuLm9uKFwicGxheWVycmVzaXplXCIsciksaC5hZGRFdmVudExpc3RlbmVyKFwib3JpZW50YXRpb25jaGFuZ2VcIixyKSxuLm9uKFwiZGlzcG9zZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGgucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9yaWVudGF0aW9uY2hhbmdlXCIscil9KTtmb3IodmFyIGU9dGhpcy5vcHRpb25zXy5wbGF5ZXJPcHRpb25zLnRyYWNrc3x8W10sdD0wO3Q8ZS5sZW5ndGg7dCsrKXRoaXMucGxheWVyXy5hZGRSZW1vdGVUZXh0VHJhY2soZVt0XSwhMCk7dGhpcy5wcmVzZWxlY3RUcmFjaygpfX0pKSxpfWYoZSxzKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5wcmVzZWxlY3RUcmFjaz1mdW5jdGlvbigpe2Zvcih2YXIgZSx0LG4saT17Y2FwdGlvbnM6MSxzdWJ0aXRsZXM6MX0scj10aGlzLnBsYXllcl8udGV4dFRyYWNrcygpLHM9dGhpcy5wbGF5ZXJfLmNhY2hlXy5zZWxlY3RlZExhbmd1YWdlLG89MDtvPHIubGVuZ3RoO28rKyl7dmFyIGE9cltvXTtzJiZzLmVuYWJsZWQmJnMubGFuZ3VhZ2UmJnMubGFuZ3VhZ2U9PT1hLmxhbmd1YWdlJiZhLmtpbmQgaW4gaT9hLmtpbmQ9PT1zLmtpbmQ/bj1hOm58fChuPWEpOnMmJiFzLmVuYWJsZWQ/dD1lPW49bnVsbDphLmRlZmF1bHQmJihcImRlc2NyaXB0aW9uc1wiIT09YS5raW5kfHxlP2Eua2luZCBpbiBpJiYhdCYmKHQ9YSk6ZT1hKX1uP24ubW9kZT1cInNob3dpbmdcIjp0P3QubW9kZT1cInNob3dpbmdcIjplJiYoZS5tb2RlPVwic2hvd2luZ1wiKX0sdC50b2dnbGVEaXNwbGF5PWZ1bmN0aW9uKCl7dGhpcy5wbGF5ZXJfLnRlY2hfJiZ0aGlzLnBsYXllcl8udGVjaF8uZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzP3RoaXMuaGlkZSgpOnRoaXMuc2hvdygpfSx0LmNyZWF0ZUVsPWZ1bmN0aW9uKCl7cmV0dXJuIHMucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImRpdlwiLHtjbGFzc05hbWU6XCJ2anMtdGV4dC10cmFjay1kaXNwbGF5XCJ9LHtcImFyaWEtbGl2ZVwiOlwib2ZmXCIsXCJhcmlhLWF0b21pY1wiOlwidHJ1ZVwifSl9LHQuY2xlYXJEaXNwbGF5PWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiPT10eXBlb2YgaC5XZWJWVFQmJmguV2ViVlRULnByb2Nlc3NDdWVzKGgsW10sdGhpcy5lbF8pfSx0LnVwZGF0ZURpc3BsYXk9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnBsYXllcl8udGV4dFRyYWNrcygpO3RoaXMuY2xlYXJEaXNwbGF5KCk7Zm9yKHZhciB0PW51bGwsbj1udWxsLGk9ZS5sZW5ndGg7aS0tOyl7dmFyIHI9ZVtpXTtcInNob3dpbmdcIj09PXIubW9kZSYmKFwiZGVzY3JpcHRpb25zXCI9PT1yLmtpbmQ/dD1yOm49cil9bj8oXCJvZmZcIiE9PXRoaXMuZ2V0QXR0cmlidXRlKFwiYXJpYS1saXZlXCIpJiZ0aGlzLnNldEF0dHJpYnV0ZShcImFyaWEtbGl2ZVwiLFwib2ZmXCIpLHRoaXMudXBkYXRlRm9yVHJhY2sobikpOnQmJihcImFzc2VydGl2ZVwiIT09dGhpcy5nZXRBdHRyaWJ1dGUoXCJhcmlhLWxpdmVcIikmJnRoaXMuc2V0QXR0cmlidXRlKFwiYXJpYS1saXZlXCIsXCJhc3NlcnRpdmVcIiksdGhpcy51cGRhdGVGb3JUcmFjayh0KSl9LHQudXBkYXRlRm9yVHJhY2s9ZnVuY3Rpb24oZSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgaC5XZWJWVFQmJmUuYWN0aXZlQ3Vlcyl7Zm9yKHZhciB0PVtdLG49MDtuPGUuYWN0aXZlQ3Vlcy5sZW5ndGg7bisrKXQucHVzaChlLmFjdGl2ZUN1ZXNbbl0pO2lmKGguV2ViVlRULnByb2Nlc3NDdWVzKGgsdCx0aGlzLmVsXyksdGhpcy5wbGF5ZXJfLnRleHRUcmFja1NldHRpbmdzKWZvcih2YXIgaT10aGlzLnBsYXllcl8udGV4dFRyYWNrU2V0dGluZ3MuZ2V0VmFsdWVzKCkscj10Lmxlbmd0aDtyLS07KXt2YXIgcz10W3JdO2lmKHMpe3ZhciBvPXMuZGlzcGxheVN0YXRlO2lmKGkuY29sb3ImJihvLmZpcnN0Q2hpbGQuc3R5bGUuY29sb3I9aS5jb2xvciksaS50ZXh0T3BhY2l0eSYmYmkoby5maXJzdENoaWxkLFwiY29sb3JcIixfaShpLmNvbG9yfHxcIiNmZmZcIixpLnRleHRPcGFjaXR5KSksaS5iYWNrZ3JvdW5kQ29sb3ImJihvLmZpcnN0Q2hpbGQuc3R5bGUuYmFja2dyb3VuZENvbG9yPWkuYmFja2dyb3VuZENvbG9yKSxpLmJhY2tncm91bmRPcGFjaXR5JiZiaShvLmZpcnN0Q2hpbGQsXCJiYWNrZ3JvdW5kQ29sb3JcIixfaShpLmJhY2tncm91bmRDb2xvcnx8XCIjMDAwXCIsaS5iYWNrZ3JvdW5kT3BhY2l0eSkpLGkud2luZG93Q29sb3ImJihpLndpbmRvd09wYWNpdHk/YmkobyxcImJhY2tncm91bmRDb2xvclwiLF9pKGkud2luZG93Q29sb3IsaS53aW5kb3dPcGFjaXR5KSk6by5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9aS53aW5kb3dDb2xvciksaS5lZGdlU3R5bGUmJihcImRyb3BzaGFkb3dcIj09PWkuZWRnZVN0eWxlP28uZmlyc3RDaGlsZC5zdHlsZS50ZXh0U2hhZG93PVwiMnB4IDJweCAzcHggIzIyMiwgMnB4IDJweCA0cHggIzIyMiwgMnB4IDJweCA1cHggXCIreWk6XCJyYWlzZWRcIj09PWkuZWRnZVN0eWxlP28uZmlyc3RDaGlsZC5zdHlsZS50ZXh0U2hhZG93PVwiMXB4IDFweCAjMjIyLCAycHggMnB4ICMyMjIsIDNweCAzcHggXCIreWk6XCJkZXByZXNzZWRcIj09PWkuZWRnZVN0eWxlP28uZmlyc3RDaGlsZC5zdHlsZS50ZXh0U2hhZG93PVwiMXB4IDFweCAjY2NjLCAwIDFweCAjY2NjLCAtMXB4IC0xcHggIzIyMiwgMCAtMXB4IFwiK3lpOlwidW5pZm9ybVwiPT09aS5lZGdlU3R5bGUmJihvLmZpcnN0Q2hpbGQuc3R5bGUudGV4dFNoYWRvdz1cIjAgMCA0cHggIzIyMiwgMCAwIDRweCAjMjIyLCAwIDAgNHB4ICMyMjIsIDAgMCA0cHggXCIreWkpKSxpLmZvbnRQZXJjZW50JiYxIT09aS5mb250UGVyY2VudCl7dmFyIGE9aC5wYXJzZUZsb2F0KG8uc3R5bGUuZm9udFNpemUpO28uc3R5bGUuZm9udFNpemU9YSppLmZvbnRQZXJjZW50K1wicHhcIixvLnN0eWxlLmhlaWdodD1cImF1dG9cIixvLnN0eWxlLnRvcD1cImF1dG9cIixvLnN0eWxlLmJvdHRvbT1cIjJweFwifWkuZm9udEZhbWlseSYmXCJkZWZhdWx0XCIhPT1pLmZvbnRGYW1pbHkmJihcInNtYWxsLWNhcHNcIj09PWkuZm9udEZhbWlseT9vLmZpcnN0Q2hpbGQuc3R5bGUuZm9udFZhcmlhbnQ9XCJzbWFsbC1jYXBzXCI6by5maXJzdENoaWxkLnN0eWxlLmZvbnRGYW1pbHk9bWlbaS5mb250RmFtaWx5XSl9fX19LGV9KEZlKTtGZS5yZWdpc3RlckNvbXBvbmVudChcIlRleHRUcmFja0Rpc3BsYXlcIixUaSk7dmFyIGtpPWZ1bmN0aW9uKHIpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gci5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuIGYoZSxyKSxlLnByb3RvdHlwZS5jcmVhdGVFbD1mdW5jdGlvbigpe3ZhciBlPXRoaXMucGxheWVyXy5pc0F1ZGlvKCksdD10aGlzLmxvY2FsaXplKGU/XCJBdWRpbyBQbGF5ZXJcIjpcIlZpZGVvIFBsYXllclwiKSxuPXgoXCJzcGFuXCIse2NsYXNzTmFtZTpcInZqcy1jb250cm9sLXRleHRcIixpbm5lckhUTUw6dGhpcy5sb2NhbGl6ZShcInsxfSBpcyBsb2FkaW5nLlwiLFt0XSl9KSxpPXIucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImRpdlwiLHtjbGFzc05hbWU6XCJ2anMtbG9hZGluZy1zcGlubmVyXCIsZGlyOlwibHRyXCJ9KTtyZXR1cm4gaS5hcHBlbmRDaGlsZChuKSxpfSxlfShGZSk7RmUucmVnaXN0ZXJDb21wb25lbnQoXCJMb2FkaW5nU3Bpbm5lclwiLGtpKTt2YXIgQ2k9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3JldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31mKGUsdCk7dmFyIG49ZS5wcm90b3R5cGU7cmV0dXJuIG4uY3JlYXRlRWw9ZnVuY3Rpb24oZSx0LG4pe3ZvaWQgMD09PXQmJih0PXt9KSx2b2lkIDA9PT1uJiYobj17fSksdD1fKHtpbm5lckhUTUw6JzxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGNsYXNzPVwidmpzLWljb24tcGxhY2Vob2xkZXJcIj48L3NwYW4+JyxjbGFzc05hbWU6dGhpcy5idWlsZENTU0NsYXNzKCl9LHQpLG49Xyh7dHlwZTpcImJ1dHRvblwifSxuKTt2YXIgaT1GZS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiYnV0dG9uXCIsdCxuKTtyZXR1cm4gdGhpcy5jcmVhdGVDb250cm9sVGV4dEVsKGkpLGl9LG4uYWRkQ2hpbGQ9ZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT10JiYodD17fSk7dmFyIG49dGhpcy5jb25zdHJ1Y3Rvci5uYW1lO3JldHVybiBnLndhcm4oXCJBZGRpbmcgYW4gYWN0aW9uYWJsZSAodXNlciBjb250cm9sbGFibGUpIGNoaWxkIHRvIGEgQnV0dG9uIChcIituK1wiKSBpcyBub3Qgc3VwcG9ydGVkOyB1c2UgYSBDbGlja2FibGVDb21wb25lbnQgaW5zdGVhZC5cIiksRmUucHJvdG90eXBlLmFkZENoaWxkLmNhbGwodGhpcyxlLHQpfSxuLmVuYWJsZT1mdW5jdGlvbigpe3QucHJvdG90eXBlLmVuYWJsZS5jYWxsKHRoaXMpLHRoaXMuZWxfLnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpfSxuLmRpc2FibGU9ZnVuY3Rpb24oKXt0LnByb3RvdHlwZS5kaXNhYmxlLmNhbGwodGhpcyksdGhpcy5lbF8uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIixcImRpc2FibGVkXCIpfSxuLmhhbmRsZUtleVByZXNzPWZ1bmN0aW9uKGUpe1B0LmlzRXZlbnRLZXkoZSxcIlNwYWNlXCIpfHxQdC5pc0V2ZW50S2V5KGUsXCJFbnRlclwiKXx8dC5wcm90b3R5cGUuaGFuZGxlS2V5UHJlc3MuY2FsbCh0aGlzLGUpfSxlfSh2aSk7RmUucmVnaXN0ZXJDb21wb25lbnQoXCJCdXR0b25cIixDaSk7dmFyIEVpPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbjtyZXR1cm4obj1pLmNhbGwodGhpcyxlLHQpfHx0aGlzKS5tb3VzZXVzZWRfPSExLG4ub24oXCJtb3VzZWRvd25cIixuLmhhbmRsZU1vdXNlRG93biksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLWJpZy1wbGF5LWJ1dHRvblwifSx0LmhhbmRsZUNsaWNrPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMucGxheWVyXy5wbGF5KCk7aWYodGhpcy5tb3VzZXVzZWRfJiZlLmNsaWVudFgmJmUuY2xpZW50WSlyZXR1cm4gd3QodCksdm9pZCB0aGlzLnBsYXllcl8uaGFuZGxlRm9jdXMoe30pO3ZhciBuPXRoaXMucGxheWVyXy5nZXRDaGlsZChcImNvbnRyb2xCYXJcIiksaT1uJiZuLmdldENoaWxkKFwicGxheVRvZ2dsZVwiKTtpZihpKXt2YXIgcj1mdW5jdGlvbigpe3JldHVybiBpLmZvY3VzKCl9O0V0KHQpP3QudGhlbihyLGZ1bmN0aW9uKCl7fSk6dGhpcy5zZXRUaW1lb3V0KHIsMSl9ZWxzZSB0aGlzLnBsYXllcl8uZm9jdXMoKX0sdC5oYW5kbGVLZXlQcmVzcz1mdW5jdGlvbihlKXt0aGlzLm1vdXNldXNlZF89ITEsaS5wcm90b3R5cGUuaGFuZGxlS2V5UHJlc3MuY2FsbCh0aGlzLGUpfSx0LmhhbmRsZU1vdXNlRG93bj1mdW5jdGlvbihlKXt0aGlzLm1vdXNldXNlZF89ITB9LGV9KENpKTtFaS5wcm90b3R5cGUuY29udHJvbFRleHRfPVwiUGxheSBWaWRlb1wiLEZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiQmlnUGxheUJ1dHRvblwiLEVpKTt2YXIgd2k9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLmNvbnRyb2xUZXh0KHQmJnQuY29udHJvbFRleHR8fG4ubG9jYWxpemUoXCJDbG9zZVwiKSksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLWNsb3NlLWJ1dHRvbiBcIitpLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyl9LHQuaGFuZGxlS2V5UHJlc3M9ZnVuY3Rpb24oZSl7fSx0LmhhbmRsZUNsaWNrPWZ1bmN0aW9uKGUpe3RoaXMudHJpZ2dlcih7dHlwZTpcImNsb3NlXCIsYnViYmxlczohMX0pfSxlfShDaSk7RmUucmVnaXN0ZXJDb21wb25lbnQoXCJDbG9zZUJ1dHRvblwiLHdpKTt2YXIgU2k9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybiB2b2lkIDA9PT10JiYodD17fSksbj1pLmNhbGwodGhpcyxlLHQpfHx0aGlzLHQucmVwbGF5PXZvaWQgMD09PXQucmVwbGF5fHx0LnJlcGxheSxuLm9uKGUsXCJwbGF5XCIsbi5oYW5kbGVQbGF5KSxuLm9uKGUsXCJwYXVzZVwiLG4uaGFuZGxlUGF1c2UpLHQucmVwbGF5JiZuLm9uKGUsXCJlbmRlZFwiLG4uaGFuZGxlRW5kZWQpLG59ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmJ1aWxkQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1wbGF5LWNvbnRyb2wgXCIraS5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpfSx0LmhhbmRsZUNsaWNrPWZ1bmN0aW9uKGUpe3RoaXMucGxheWVyXy5wYXVzZWQoKT90aGlzLnBsYXllcl8ucGxheSgpOnRoaXMucGxheWVyXy5wYXVzZSgpfSx0LmhhbmRsZVNlZWtlZD1mdW5jdGlvbihlKXt0aGlzLnJlbW92ZUNsYXNzKFwidmpzLWVuZGVkXCIpLHRoaXMucGxheWVyXy5wYXVzZWQoKT90aGlzLmhhbmRsZVBhdXNlKGUpOnRoaXMuaGFuZGxlUGxheShlKX0sdC5oYW5kbGVQbGF5PWZ1bmN0aW9uKGUpe3RoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtZW5kZWRcIiksdGhpcy5yZW1vdmVDbGFzcyhcInZqcy1wYXVzZWRcIiksdGhpcy5hZGRDbGFzcyhcInZqcy1wbGF5aW5nXCIpLHRoaXMuY29udHJvbFRleHQoXCJQYXVzZVwiKX0sdC5oYW5kbGVQYXVzZT1mdW5jdGlvbihlKXt0aGlzLnJlbW92ZUNsYXNzKFwidmpzLXBsYXlpbmdcIiksdGhpcy5hZGRDbGFzcyhcInZqcy1wYXVzZWRcIiksdGhpcy5jb250cm9sVGV4dChcIlBsYXlcIil9LHQuaGFuZGxlRW5kZWQ9ZnVuY3Rpb24oZSl7dGhpcy5yZW1vdmVDbGFzcyhcInZqcy1wbGF5aW5nXCIpLHRoaXMuYWRkQ2xhc3MoXCJ2anMtZW5kZWRcIiksdGhpcy5jb250cm9sVGV4dChcIlJlcGxheVwiKSx0aGlzLm9uZSh0aGlzLnBsYXllcl8sXCJzZWVrZWRcIix0aGlzLmhhbmRsZVNlZWtlZCl9LGV9KENpKTtTaS5wcm90b3R5cGUuY29udHJvbFRleHRfPVwiUGxheVwiLEZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiUGxheVRvZ2dsZVwiLFNpKTt2YXIgeGk9ZnVuY3Rpb24oZSx0KXtlPWU8MD8wOmU7dmFyIG49TWF0aC5mbG9vcihlJTYwKSxpPU1hdGguZmxvb3IoZS82MCU2MCkscj1NYXRoLmZsb29yKGUvMzYwMCkscz1NYXRoLmZsb29yKHQvNjAlNjApLG89TWF0aC5mbG9vcih0LzM2MDApO3JldHVybihpc05hTihlKXx8ZT09PTEvMCkmJihyPWk9bj1cIi1cIiksKHI9MDxyfHwwPG8/citcIjpcIjpcIlwiKSsoaT0oKHJ8fDEwPD1zKSYmaTwxMD9cIjBcIitpOmkpK1wiOlwiKSsobj1uPDEwP1wiMFwiK246bil9LGppPXhpO2Z1bmN0aW9uIEFpKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PWUpLGppKGUsdCl9dmFyIFBpPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbjtyZXR1cm4obj1pLmNhbGwodGhpcyxlLHQpfHx0aGlzKS50aHJvdHRsZWRVcGRhdGVDb250ZW50PUVlKENlKHYodihuKSksbi51cGRhdGVDb250ZW50KSwyNSksbi5vbihlLFwidGltZXVwZGF0ZVwiLG4udGhyb3R0bGVkVXBkYXRlQ29udGVudCksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY3JlYXRlRWw9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmJ1aWxkQ1NTQ2xhc3MoKSx0PWkucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImRpdlwiLHtjbGFzc05hbWU6ZStcIiB2anMtdGltZS1jb250cm9sIHZqcy1jb250cm9sXCIsaW5uZXJIVE1MOic8c3BhbiBjbGFzcz1cInZqcy1jb250cm9sLXRleHRcIiByb2xlPVwicHJlc2VudGF0aW9uXCI+Jyt0aGlzLmxvY2FsaXplKHRoaXMubGFiZWxUZXh0XykrXCLCoDwvc3Bhbj5cIn0pO3JldHVybiB0aGlzLmNvbnRlbnRFbF89eChcInNwYW5cIix7Y2xhc3NOYW1lOmUrXCItZGlzcGxheVwifSx7XCJhcmlhLWxpdmVcIjpcIm9mZlwiLHJvbGU6XCJwcmVzZW50YXRpb25cIn0pLHRoaXMudXBkYXRlVGV4dE5vZGVfKCksdC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRFbF8pLHR9LHQuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuY29udGVudEVsXz1udWxsLHRoaXMudGV4dE5vZGVfPW51bGwsaS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpfSx0LnVwZGF0ZVRleHROb2RlXz1mdW5jdGlvbigpe2lmKHRoaXMuY29udGVudEVsXyl7Zm9yKDt0aGlzLmNvbnRlbnRFbF8uZmlyc3RDaGlsZDspdGhpcy5jb250ZW50RWxfLnJlbW92ZUNoaWxkKHRoaXMuY29udGVudEVsXy5maXJzdENoaWxkKTt0aGlzLnRleHROb2RlXz1kLmNyZWF0ZVRleHROb2RlKHRoaXMuZm9ybWF0dGVkVGltZV98fHRoaXMuZm9ybWF0VGltZV8oMCkpLHRoaXMuY29udGVudEVsXy5hcHBlbmRDaGlsZCh0aGlzLnRleHROb2RlXyl9fSx0LmZvcm1hdFRpbWVfPWZ1bmN0aW9uKGUpe3JldHVybiBBaShlKX0sdC51cGRhdGVGb3JtYXR0ZWRUaW1lXz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmZvcm1hdFRpbWVfKGUpO3QhPT10aGlzLmZvcm1hdHRlZFRpbWVfJiYodGhpcy5mb3JtYXR0ZWRUaW1lXz10LHRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlVGV4dE5vZGVfKSl9LHQudXBkYXRlQ29udGVudD1mdW5jdGlvbihlKXt9LGV9KEZlKTtQaS5wcm90b3R5cGUubGFiZWxUZXh0Xz1cIlRpbWVcIixQaS5wcm90b3R5cGUuY29udHJvbFRleHRfPVwiVGltZVwiLEZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiVGltZURpc3BsYXlcIixQaSk7dmFyIExpPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbjtyZXR1cm4obj1pLmNhbGwodGhpcyxlLHQpfHx0aGlzKS5vbihlLFwiZW5kZWRcIixuLmhhbmRsZUVuZGVkKSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtY3VycmVudC10aW1lXCJ9LHQudXBkYXRlQ29udGVudD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnBsYXllcl8uc2NydWJiaW5nKCk/dGhpcy5wbGF5ZXJfLmdldENhY2hlKCkuY3VycmVudFRpbWU6dGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCk7dGhpcy51cGRhdGVGb3JtYXR0ZWRUaW1lXyh0KX0sdC5oYW5kbGVFbmRlZD1mdW5jdGlvbihlKXt0aGlzLnBsYXllcl8uZHVyYXRpb24oKSYmdGhpcy51cGRhdGVGb3JtYXR0ZWRUaW1lXyh0aGlzLnBsYXllcl8uZHVyYXRpb24oKSl9LGV9KFBpKTtMaS5wcm90b3R5cGUubGFiZWxUZXh0Xz1cIkN1cnJlbnQgVGltZVwiLExpLnByb3RvdHlwZS5jb250cm9sVGV4dF89XCJDdXJyZW50IFRpbWVcIixGZS5yZWdpc3RlckNvbXBvbmVudChcIkN1cnJlbnRUaW1lRGlzcGxheVwiLExpKTt2YXIgTWk9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLm9uKGUsXCJkdXJhdGlvbmNoYW5nZVwiLG4udXBkYXRlQ29udGVudCksbi5vbihlLFwibG9hZHN0YXJ0XCIsbi51cGRhdGVDb250ZW50KSxuLm9uKGUsXCJsb2FkZWRtZXRhZGF0YVwiLG4udGhyb3R0bGVkVXBkYXRlQ29udGVudCksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLWR1cmF0aW9uXCJ9LHQudXBkYXRlQ29udGVudD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnBsYXllcl8uZHVyYXRpb24oKTt0aGlzLmR1cmF0aW9uXyE9PXQmJih0aGlzLmR1cmF0aW9uXz10LHRoaXMudXBkYXRlRm9ybWF0dGVkVGltZV8odCkpfSxlfShQaSk7TWkucHJvdG90eXBlLmxhYmVsVGV4dF89XCJEdXJhdGlvblwiLE1pLnByb3RvdHlwZS5jb250cm9sVGV4dF89XCJEdXJhdGlvblwiLEZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiRHVyYXRpb25EaXNwbGF5XCIsTWkpO3ZhciBOaT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybiBmKHQsZSksdC5wcm90b3R5cGUuY3JlYXRlRWw9ZnVuY3Rpb24oKXtyZXR1cm4gZS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIse2NsYXNzTmFtZTpcInZqcy10aW1lLWNvbnRyb2wgdmpzLXRpbWUtZGl2aWRlclwiLGlubmVySFRNTDpcIjxkaXY+PHNwYW4+Lzwvc3Bhbj48L2Rpdj5cIn0se1wiYXJpYS1oaWRkZW5cIjohMH0pfSx0fShGZSk7RmUucmVnaXN0ZXJDb21wb25lbnQoXCJUaW1lRGl2aWRlclwiLE5pKTt2YXIgT2k9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLm9uKGUsXCJkdXJhdGlvbmNoYW5nZVwiLG4udGhyb3R0bGVkVXBkYXRlQ29udGVudCksbi5vbihlLFwiZW5kZWRcIixuLmhhbmRsZUVuZGVkKSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtcmVtYWluaW5nLXRpbWVcIn0sdC5jcmVhdGVFbD1mdW5jdGlvbigpe3ZhciBlPWkucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyk7cmV0dXJuIGUuaW5zZXJ0QmVmb3JlKHgoXCJzcGFuXCIse30se1wiYXJpYS1oaWRkZW5cIjohMH0sXCItXCIpLHRoaXMuY29udGVudEVsXyksZX0sdC51cGRhdGVDb250ZW50PWZ1bmN0aW9uKGUpe1wibnVtYmVyXCI9PXR5cGVvZiB0aGlzLnBsYXllcl8uZHVyYXRpb24oKSYmKHRoaXMucGxheWVyXy5yZW1haW5pbmdUaW1lRGlzcGxheT90aGlzLnVwZGF0ZUZvcm1hdHRlZFRpbWVfKHRoaXMucGxheWVyXy5yZW1haW5pbmdUaW1lRGlzcGxheSgpKTp0aGlzLnVwZGF0ZUZvcm1hdHRlZFRpbWVfKHRoaXMucGxheWVyXy5yZW1haW5pbmdUaW1lKCkpKX0sdC5oYW5kbGVFbmRlZD1mdW5jdGlvbihlKXt0aGlzLnBsYXllcl8uZHVyYXRpb24oKSYmdGhpcy51cGRhdGVGb3JtYXR0ZWRUaW1lXygwKX0sZX0oUGkpO09pLnByb3RvdHlwZS5sYWJlbFRleHRfPVwiUmVtYWluaW5nIFRpbWVcIixPaS5wcm90b3R5cGUuY29udHJvbFRleHRfPVwiUmVtYWluaW5nIFRpbWVcIixGZS5yZWdpc3RlckNvbXBvbmVudChcIlJlbWFpbmluZ1RpbWVEaXNwbGF5XCIsT2kpO3ZhciBJaT1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuKG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcykudXBkYXRlU2hvd2luZygpLG4ub24obi5wbGF5ZXIoKSxcImR1cmF0aW9uY2hhbmdlXCIsbi51cGRhdGVTaG93aW5nKSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jcmVhdGVFbD1mdW5jdGlvbigpe3ZhciBlPWkucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImRpdlwiLHtjbGFzc05hbWU6XCJ2anMtbGl2ZS1jb250cm9sIHZqcy1jb250cm9sXCJ9KTtyZXR1cm4gdGhpcy5jb250ZW50RWxfPXgoXCJkaXZcIix7Y2xhc3NOYW1lOlwidmpzLWxpdmUtZGlzcGxheVwiLGlubmVySFRNTDonPHNwYW4gY2xhc3M9XCJ2anMtY29udHJvbC10ZXh0XCI+Jyt0aGlzLmxvY2FsaXplKFwiU3RyZWFtIFR5cGVcIikrXCLCoDwvc3Bhbj5cIit0aGlzLmxvY2FsaXplKFwiTElWRVwiKX0se1wiYXJpYS1saXZlXCI6XCJvZmZcIn0pLGUuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RWxfKSxlfSx0LmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmNvbnRlbnRFbF89bnVsbCxpLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyl9LHQudXBkYXRlU2hvd2luZz1mdW5jdGlvbihlKXt0aGlzLnBsYXllcigpLmR1cmF0aW9uKCk9PT0xLzA/dGhpcy5zaG93KCk6dGhpcy5oaWRlKCl9LGV9KEZlKTtGZS5yZWdpc3RlckNvbXBvbmVudChcIkxpdmVEaXNwbGF5XCIsSWkpO3ZhciBEaT1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuKG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcykudXBkYXRlTGl2ZUVkZ2VTdGF0dXMoKSxuLnBsYXllcl8ubGl2ZVRyYWNrZXImJm4ub24obi5wbGF5ZXJfLmxpdmVUcmFja2VyLFwibGl2ZWVkZ2VjaGFuZ2VcIixuLnVwZGF0ZUxpdmVFZGdlU3RhdHVzKSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jcmVhdGVFbD1mdW5jdGlvbigpe3ZhciBlPWkucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImJ1dHRvblwiLHtjbGFzc05hbWU6XCJ2anMtc2Vlay10by1saXZlLWNvbnRyb2wgdmpzLWNvbnRyb2xcIn0pO3JldHVybiB0aGlzLnRleHRFbF89eChcInNwYW5cIix7Y2xhc3NOYW1lOlwidmpzLXNlZWstdG8tbGl2ZS10ZXh0XCIsaW5uZXJIVE1MOnRoaXMubG9jYWxpemUoXCJMSVZFXCIpfSx7XCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwifSksZS5hcHBlbmRDaGlsZCh0aGlzLnRleHRFbF8pLGV9LHQudXBkYXRlTGl2ZUVkZ2VTdGF0dXM9ZnVuY3Rpb24oZSl7IXRoaXMucGxheWVyXy5saXZlVHJhY2tlcnx8dGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyLmF0TGl2ZUVkZ2UoKT8odGhpcy5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRpc2FibGVkXCIsITApLHRoaXMuYWRkQ2xhc3MoXCJ2anMtYXQtbGl2ZS1lZGdlXCIpLHRoaXMuY29udHJvbFRleHQoXCJTZWVrIHRvIGxpdmUsIGN1cnJlbnRseSBwbGF5aW5nIGxpdmVcIikpOih0aGlzLnNldEF0dHJpYnV0ZShcImFyaWEtZGlzYWJsZWRcIiwhMSksdGhpcy5yZW1vdmVDbGFzcyhcInZqcy1hdC1saXZlLWVkZ2VcIiksdGhpcy5jb250cm9sVGV4dChcIlNlZWsgdG8gbGl2ZSwgY3VycmVudGx5IGJlaGluZCBsaXZlXCIpKX0sdC5oYW5kbGVDbGljaz1mdW5jdGlvbigpe3RoaXMucGxheWVyXy5saXZlVHJhY2tlci5zZWVrVG9MaXZlRWRnZSgpfSx0LmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXImJnRoaXMub2ZmKHRoaXMucGxheWVyXy5saXZlVHJhY2tlcixcImxpdmVlZGdlY2hhbmdlXCIsdGhpcy51cGRhdGVMaXZlRWRnZVN0YXR1cyksdGhpcy50ZXh0RWxfPW51bGwsaS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpfSxlfShDaSk7RGkucHJvdG90eXBlLmNvbnRyb2xUZXh0Xz1cIlNlZWsgdG8gbGl2ZSwgY3VycmVudGx5IHBsYXlpbmcgbGl2ZVwiLEZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiU2Vla1RvTGl2ZVwiLERpKTt2YXIgUmk9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLmJhcj1uLmdldENoaWxkKG4ub3B0aW9uc18uYmFyTmFtZSksbi52ZXJ0aWNhbCghIW4ub3B0aW9uc18udmVydGljYWwpLG4uZW5hYmxlKCksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuZW5hYmxlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVuYWJsZWRffSx0LmVuYWJsZT1mdW5jdGlvbigpe3RoaXMuZW5hYmxlZCgpfHwodGhpcy5vbihcIm1vdXNlZG93blwiLHRoaXMuaGFuZGxlTW91c2VEb3duKSx0aGlzLm9uKFwidG91Y2hzdGFydFwiLHRoaXMuaGFuZGxlTW91c2VEb3duKSx0aGlzLm9uKFwiZm9jdXNcIix0aGlzLmhhbmRsZUZvY3VzKSx0aGlzLm9uKFwiYmx1clwiLHRoaXMuaGFuZGxlQmx1ciksdGhpcy5vbihcImNsaWNrXCIsdGhpcy5oYW5kbGVDbGljayksdGhpcy5vbih0aGlzLnBsYXllcl8sXCJjb250cm9sc3Zpc2libGVcIix0aGlzLnVwZGF0ZSksdGhpcy5wbGF5ZXJFdmVudCYmdGhpcy5vbih0aGlzLnBsYXllcl8sdGhpcy5wbGF5ZXJFdmVudCx0aGlzLnVwZGF0ZSksdGhpcy5yZW1vdmVDbGFzcyhcImRpc2FibGVkXCIpLHRoaXMuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwwKSx0aGlzLmVuYWJsZWRfPSEwKX0sdC5kaXNhYmxlPWZ1bmN0aW9uKCl7aWYodGhpcy5lbmFibGVkKCkpe3ZhciBlPXRoaXMuYmFyLmVsXy5vd25lckRvY3VtZW50O3RoaXMub2ZmKFwibW91c2Vkb3duXCIsdGhpcy5oYW5kbGVNb3VzZURvd24pLHRoaXMub2ZmKFwidG91Y2hzdGFydFwiLHRoaXMuaGFuZGxlTW91c2VEb3duKSx0aGlzLm9mZihcImZvY3VzXCIsdGhpcy5oYW5kbGVGb2N1cyksdGhpcy5vZmYoXCJibHVyXCIsdGhpcy5oYW5kbGVCbHVyKSx0aGlzLm9mZihcImNsaWNrXCIsdGhpcy5oYW5kbGVDbGljayksdGhpcy5vZmYodGhpcy5wbGF5ZXJfLFwiY29udHJvbHN2aXNpYmxlXCIsdGhpcy51cGRhdGUpLHRoaXMub2ZmKGUsXCJtb3VzZW1vdmVcIix0aGlzLmhhbmRsZU1vdXNlTW92ZSksdGhpcy5vZmYoZSxcIm1vdXNldXBcIix0aGlzLmhhbmRsZU1vdXNlVXApLHRoaXMub2ZmKGUsXCJ0b3VjaG1vdmVcIix0aGlzLmhhbmRsZU1vdXNlTW92ZSksdGhpcy5vZmYoZSxcInRvdWNoZW5kXCIsdGhpcy5oYW5kbGVNb3VzZVVwKSx0aGlzLnJlbW92ZUF0dHJpYnV0ZShcInRhYmluZGV4XCIpLHRoaXMuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKSx0aGlzLnBsYXllckV2ZW50JiZ0aGlzLm9mZih0aGlzLnBsYXllcl8sdGhpcy5wbGF5ZXJFdmVudCx0aGlzLnVwZGF0ZSksdGhpcy5lbmFibGVkXz0hMX19LHQuY3JlYXRlRWw9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB2b2lkIDA9PT10JiYodD17fSksdm9pZCAwPT09biYmKG49e30pLHQuY2xhc3NOYW1lPXQuY2xhc3NOYW1lK1wiIHZqcy1zbGlkZXJcIix0PV8oe3RhYkluZGV4OjB9LHQpLG49Xyh7cm9sZTpcInNsaWRlclwiLFwiYXJpYS12YWx1ZW5vd1wiOjAsXCJhcmlhLXZhbHVlbWluXCI6MCxcImFyaWEtdmFsdWVtYXhcIjoxMDAsdGFiSW5kZXg6MH0sbiksaS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLGUsdCxuKX0sdC5oYW5kbGVNb3VzZURvd249ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5iYXIuZWxfLm93bmVyRG9jdW1lbnQ7XCJtb3VzZWRvd25cIj09PWUudHlwZSYmZS5wcmV2ZW50RGVmYXVsdCgpLFwidG91Y2hzdGFydFwiIT09ZS50eXBlfHxpdHx8ZS5wcmV2ZW50RGVmYXVsdCgpLEYoKSx0aGlzLmFkZENsYXNzKFwidmpzLXNsaWRpbmdcIiksdGhpcy50cmlnZ2VyKFwic2xpZGVyYWN0aXZlXCIpLHRoaXMub24odCxcIm1vdXNlbW92ZVwiLHRoaXMuaGFuZGxlTW91c2VNb3ZlKSx0aGlzLm9uKHQsXCJtb3VzZXVwXCIsdGhpcy5oYW5kbGVNb3VzZVVwKSx0aGlzLm9uKHQsXCJ0b3VjaG1vdmVcIix0aGlzLmhhbmRsZU1vdXNlTW92ZSksdGhpcy5vbih0LFwidG91Y2hlbmRcIix0aGlzLmhhbmRsZU1vdXNlVXApLHRoaXMuaGFuZGxlTW91c2VNb3ZlKGUpfSx0LmhhbmRsZU1vdXNlTW92ZT1mdW5jdGlvbihlKXt9LHQuaGFuZGxlTW91c2VVcD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuYmFyLmVsXy5vd25lckRvY3VtZW50O0goKSx0aGlzLnJlbW92ZUNsYXNzKFwidmpzLXNsaWRpbmdcIiksdGhpcy50cmlnZ2VyKFwic2xpZGVyaW5hY3RpdmVcIiksdGhpcy5vZmYoZSxcIm1vdXNlbW92ZVwiLHRoaXMuaGFuZGxlTW91c2VNb3ZlKSx0aGlzLm9mZihlLFwibW91c2V1cFwiLHRoaXMuaGFuZGxlTW91c2VVcCksdGhpcy5vZmYoZSxcInRvdWNobW92ZVwiLHRoaXMuaGFuZGxlTW91c2VNb3ZlKSx0aGlzLm9mZihlLFwidG91Y2hlbmRcIix0aGlzLmhhbmRsZU1vdXNlVXApLHRoaXMudXBkYXRlKCl9LHQudXBkYXRlPWZ1bmN0aW9uKCl7aWYodGhpcy5lbF8pe3ZhciBlPXRoaXMuZ2V0UGVyY2VudCgpLHQ9dGhpcy5iYXI7aWYodCl7KFwibnVtYmVyXCIhPXR5cGVvZiBlfHxlIT1lfHxlPDB8fGU9PT0xLzApJiYoZT0wKTt2YXIgbj0oMTAwKmUpLnRvRml4ZWQoMikrXCIlXCIsaT10LmVsKCkuc3R5bGU7cmV0dXJuIHRoaXMudmVydGljYWwoKT9pLmhlaWdodD1uOmkud2lkdGg9bixlfX19LHQuY2FsY3VsYXRlRGlzdGFuY2U9ZnVuY3Rpb24oZSl7dmFyIHQ9Vyh0aGlzLmVsXyxlKTtyZXR1cm4gdGhpcy52ZXJ0aWNhbCgpP3QueTp0Lnh9LHQuaGFuZGxlRm9jdXM9ZnVuY3Rpb24oKXt0aGlzLm9uKHRoaXMuYmFyLmVsXy5vd25lckRvY3VtZW50LFwia2V5ZG93blwiLHRoaXMuaGFuZGxlS2V5UHJlc3MpfSx0LmhhbmRsZUtleVByZXNzPWZ1bmN0aW9uKGUpe1B0LmlzRXZlbnRLZXkoZSxcIkxlZnRcIil8fFB0LmlzRXZlbnRLZXkoZSxcIkRvd25cIik/KGUucHJldmVudERlZmF1bHQoKSx0aGlzLnN0ZXBCYWNrKCkpOlB0LmlzRXZlbnRLZXkoZSxcIlJpZ2h0XCIpfHxQdC5pc0V2ZW50S2V5KGUsXCJVcFwiKT8oZS5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuc3RlcEZvcndhcmQoKSk6aS5wcm90b3R5cGUuaGFuZGxlS2V5UHJlc3MuY2FsbCh0aGlzLGUpfSx0LmhhbmRsZUJsdXI9ZnVuY3Rpb24oKXt0aGlzLm9mZih0aGlzLmJhci5lbF8ub3duZXJEb2N1bWVudCxcImtleWRvd25cIix0aGlzLmhhbmRsZUtleVByZXNzKX0sdC5oYW5kbGVDbGljaz1mdW5jdGlvbihlKXtlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLGUucHJldmVudERlZmF1bHQoKX0sdC52ZXJ0aWNhbD1mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXJldHVybiB0aGlzLnZlcnRpY2FsX3x8ITE7dGhpcy52ZXJ0aWNhbF89ISFlLHRoaXMudmVydGljYWxfP3RoaXMuYWRkQ2xhc3MoXCJ2anMtc2xpZGVyLXZlcnRpY2FsXCIpOnRoaXMuYWRkQ2xhc3MoXCJ2anMtc2xpZGVyLWhvcml6b250YWxcIil9LGV9KEZlKTtGZS5yZWdpc3RlckNvbXBvbmVudChcIlNsaWRlclwiLFJpKTt2YXIgQmk9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLnBhcnRFbHNfPVtdLG4ub24oZSxcInByb2dyZXNzXCIsbi51cGRhdGUpLG59ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZUVsPWZ1bmN0aW9uKCl7cmV0dXJuIGkucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImRpdlwiLHtjbGFzc05hbWU6XCJ2anMtbG9hZC1wcm9ncmVzc1wiLGlubmVySFRNTDonPHNwYW4gY2xhc3M9XCJ2anMtY29udHJvbC10ZXh0XCI+PHNwYW4+Jyt0aGlzLmxvY2FsaXplKFwiTG9hZGVkXCIpKyc8L3NwYW4+OiA8c3BhbiBjbGFzcz1cInZqcy1jb250cm9sLXRleHQtbG9hZGVkLXBlcmNlbnRhZ2VcIj4wJTwvc3Bhbj48L3NwYW4+J30pfSx0LmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLnBhcnRFbHNfPW51bGwsaS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpfSx0LnVwZGF0ZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIsbj10aGlzLnBsYXllcl8uYnVmZmVyZWQoKSxpPXQmJnQuaXNMaXZlKCk/dC5zZWVrYWJsZUVuZCgpOnRoaXMucGxheWVyXy5kdXJhdGlvbigpLHI9dGhpcy5wbGF5ZXJfLmJ1ZmZlcmVkRW5kKCkscz10aGlzLnBhcnRFbHNfLG89dGhpcy4kKFwiLnZqcy1jb250cm9sLXRleHQtbG9hZGVkLXBlcmNlbnRhZ2VcIiksYT1mdW5jdGlvbihlLHQsbil7dmFyIGk9ZS90fHwwO3JldHVybiBpPTEwMCooMTw9aT8xOmkpLG4mJihpPWkudG9GaXhlZCgyKSksaStcIiVcIn07dGhpcy5lbF8uc3R5bGUud2lkdGg9YShyLGkpLGoobyxhKHIsaSwhMCkpO2Zvcih2YXIgbD0wO2w8bi5sZW5ndGg7bCsrKXt2YXIgYz1uLnN0YXJ0KGwpLHU9bi5lbmQobCksaD1zW2xdO2h8fChoPXRoaXMuZWxfLmFwcGVuZENoaWxkKHgoKSksc1tsXT1oKSxoLnN0eWxlLmxlZnQ9YShjLHIpLGguc3R5bGUud2lkdGg9YSh1LWMscil9Zm9yKHZhciBkPXMubGVuZ3RoO2Q+bi5sZW5ndGg7ZC0tKXRoaXMuZWxfLnJlbW92ZUNoaWxkKHNbZC0xXSk7cy5sZW5ndGg9bi5sZW5ndGh9LGV9KEZlKTtGZS5yZWdpc3RlckNvbXBvbmVudChcIkxvYWRQcm9ncmVzc0JhclwiLEJpKTt2YXIgRmk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31mKHQsZSk7dmFyIG49dC5wcm90b3R5cGU7cmV0dXJuIG4uY3JlYXRlRWw9ZnVuY3Rpb24oKXtyZXR1cm4gZS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIse2NsYXNzTmFtZTpcInZqcy10aW1lLXRvb2x0aXBcIn0se1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIn0pfSxuLnVwZGF0ZT1mdW5jdGlvbihlLHQsbil7dmFyIGk9Vih0aGlzLmVsXykscj1WKHRoaXMucGxheWVyXy5lbCgpKSxzPWUud2lkdGgqdDtpZihyJiZpKXt2YXIgbz1lLmxlZnQtci5sZWZ0K3MsYT1lLndpZHRoLXMrKHIucmlnaHQtZS5yaWdodCksbD1pLndpZHRoLzI7bzxsP2wrPWwtbzphPGwmJihsPWEpLGw8MD9sPTA6bD5pLndpZHRoJiYobD1pLndpZHRoKSx0aGlzLmVsXy5zdHlsZS5yaWdodD1cIi1cIitsK1wicHhcIixqKHRoaXMuZWxfLG4pfX0sbi51cGRhdGVUaW1lPWZ1bmN0aW9uKHIscyxvLGEpe3ZhciBsPXRoaXM7dGhpcy5yYWZJZF8mJnRoaXMuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5yYWZJZF8pLHRoaXMucmFmSWRfPXRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7dmFyIGUsdD1sLnBsYXllcl8uZHVyYXRpb24oKTtpZihsLnBsYXllcl8ubGl2ZVRyYWNrZXImJmwucGxheWVyXy5saXZlVHJhY2tlci5pc0xpdmUoKSl7dmFyIG49bC5wbGF5ZXJfLmxpdmVUcmFja2VyLmxpdmVXaW5kb3coKSxpPW4tcypuO2U9KGk8MT9cIlwiOlwiLVwiKStBaShpLG4pfWVsc2UgZT1BaShvLHQpO2wudXBkYXRlKHIscyxlKSxhJiZhKCl9KX0sdH0oRmUpO0ZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiVGltZVRvb2x0aXBcIixGaSk7dmFyIEhpPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9Zih0LGUpO3ZhciBuPXQucHJvdG90eXBlO3JldHVybiBuLmNyZWF0ZUVsPWZ1bmN0aW9uKCl7cmV0dXJuIGUucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImRpdlwiLHtjbGFzc05hbWU6XCJ2anMtcGxheS1wcm9ncmVzcyB2anMtc2xpZGVyLWJhclwifSx7XCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwifSl9LG4udXBkYXRlPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5nZXRDaGlsZChcInRpbWVUb29sdGlwXCIpO2lmKG4pe3ZhciBpPXRoaXMucGxheWVyXy5zY3J1YmJpbmcoKT90aGlzLnBsYXllcl8uZ2V0Q2FjaGUoKS5jdXJyZW50VGltZTp0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKTtuLnVwZGF0ZVRpbWUoZSx0LGkpfX0sdH0oRmUpO0hpLnByb3RvdHlwZS5vcHRpb25zXz17Y2hpbGRyZW46W119LEdlfHxKZXx8SGkucHJvdG90eXBlLm9wdGlvbnNfLmNoaWxkcmVuLnB1c2goXCJ0aW1lVG9vbHRpcFwiKSxGZS5yZWdpc3RlckNvbXBvbmVudChcIlBsYXlQcm9ncmVzc0JhclwiLEhpKTt2YXIgVmk9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLnVwZGF0ZT1FZShDZSh2KHYobikpLG4udXBkYXRlKSwyNSksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY3JlYXRlRWw9ZnVuY3Rpb24oKXtyZXR1cm4gaS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIse2NsYXNzTmFtZTpcInZqcy1tb3VzZS1kaXNwbGF5XCJ9KX0sdC51cGRhdGU9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLGk9dCp0aGlzLnBsYXllcl8uZHVyYXRpb24oKTt0aGlzLmdldENoaWxkKFwidGltZVRvb2x0aXBcIikudXBkYXRlVGltZShlLHQsaSxmdW5jdGlvbigpe24uZWxfLnN0eWxlLmxlZnQ9ZS53aWR0aCp0K1wicHhcIn0pfSxlfShGZSk7VmkucHJvdG90eXBlLm9wdGlvbnNfPXtjaGlsZHJlbjpbXCJ0aW1lVG9vbHRpcFwiXX0sRmUucmVnaXN0ZXJDb21wb25lbnQoXCJNb3VzZVRpbWVEaXNwbGF5XCIsVmkpO3ZhciB6aT1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuKG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcykuc2V0RXZlbnRIYW5kbGVyc18oKSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5zZXRFdmVudEhhbmRsZXJzXz1mdW5jdGlvbigpe3RoaXMudXBkYXRlPUVlKENlKHRoaXMsdGhpcy51cGRhdGUpLDMwKSx0aGlzLm9uKHRoaXMucGxheWVyXyxcInRpbWV1cGRhdGVcIix0aGlzLnVwZGF0ZSksdGhpcy5vbih0aGlzLnBsYXllcl8sXCJlbmRlZFwiLHRoaXMuaGFuZGxlRW5kZWQpLHRoaXMub24odGhpcy5wbGF5ZXJfLFwiZHVyYXRpb25jaGFuZ2VcIix0aGlzLnVwZGF0ZSksdGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyJiZ0aGlzLm9uKHRoaXMucGxheWVyXy5saXZlVHJhY2tlcixcImxpdmVlZGdlY2hhbmdlXCIsdGhpcy51cGRhdGUpLHRoaXMudXBkYXRlSW50ZXJ2YWw9bnVsbCx0aGlzLm9uKHRoaXMucGxheWVyXyxbXCJwbGF5aW5nXCJdLHRoaXMuZW5hYmxlSW50ZXJ2YWxfKSx0aGlzLm9uKHRoaXMucGxheWVyXyxbXCJlbmRlZFwiLFwicGF1c2VcIixcIndhaXRpbmdcIl0sdGhpcy5kaXNhYmxlSW50ZXJ2YWxfKSxcImhpZGRlblwiaW4gZCYmXCJ2aXNpYmlsaXR5U3RhdGVcImluIGQmJnRoaXMub24oZCxcInZpc2liaWxpdHljaGFuZ2VcIix0aGlzLnRvZ2dsZVZpc2liaWxpdHlfKX0sdC50b2dnbGVWaXNpYmlsaXR5Xz1mdW5jdGlvbihlKXtkLmhpZGRlbj90aGlzLmRpc2FibGVJbnRlcnZhbF8oZSk6KHRoaXMuZW5hYmxlSW50ZXJ2YWxfKCksdGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGUpKX0sdC5lbmFibGVJbnRlcnZhbF89ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuY2xlYXJJbnRlcnZhbCh0aGlzLnVwZGF0ZUludGVydmFsKSx0aGlzLnVwZGF0ZUludGVydmFsPXRoaXMuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtlLnJlcXVlc3RBbmltYXRpb25GcmFtZShlLnVwZGF0ZSl9LDMwKX0sdC5kaXNhYmxlSW50ZXJ2YWxfPWZ1bmN0aW9uKGUpe3RoaXMucGxheWVyXy5saXZlVHJhY2tlciYmdGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyLmlzTGl2ZSgpJiZcImVuZGVkXCIhPT1lLnR5cGV8fHRoaXMuY2xlYXJJbnRlcnZhbCh0aGlzLnVwZGF0ZUludGVydmFsKX0sdC5jcmVhdGVFbD1mdW5jdGlvbigpe3JldHVybiBpLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsXCJkaXZcIix7Y2xhc3NOYW1lOlwidmpzLXByb2dyZXNzLWhvbGRlclwifSx7XCJhcmlhLWxhYmVsXCI6dGhpcy5sb2NhbGl6ZShcIlByb2dyZXNzIEJhclwiKX0pfSx0LnVwZGF0ZV89ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIsaT10aGlzLnBsYXllcl8uZHVyYXRpb24oKTtuJiZuLmlzTGl2ZSgpJiYoaT10aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIubGl2ZUN1cnJlbnRUaW1lKCkpLHRoaXMuZWxfLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVub3dcIiwoMTAwKnQpLnRvRml4ZWQoMikpLHRoaXMuZWxfLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWV0ZXh0XCIsdGhpcy5sb2NhbGl6ZShcInByb2dyZXNzIGJhciB0aW1pbmc6IGN1cnJlbnRUaW1lPXsxfSBkdXJhdGlvbj17Mn1cIixbQWkoZSxpKSxBaShpLGkpXSxcInsxfSBvZiB7Mn1cIikpLHRoaXMuYmFyJiZ0aGlzLmJhci51cGRhdGUoVih0aGlzLmVsXyksdCl9LHQudXBkYXRlPWZ1bmN0aW9uKGUpe2lmKG51bGwhPT10aGlzLmVsKCkub2Zmc2V0UGFyZW50KXt2YXIgdD1pLnByb3RvdHlwZS51cGRhdGUuY2FsbCh0aGlzKTtyZXR1cm4gdGhpcy51cGRhdGVfKHRoaXMuZ2V0Q3VycmVudFRpbWVfKCksdCksdH19LHQuZ2V0Q3VycmVudFRpbWVfPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGxheWVyXy5zY3J1YmJpbmcoKT90aGlzLnBsYXllcl8uZ2V0Q2FjaGUoKS5jdXJyZW50VGltZTp0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKX0sdC5oYW5kbGVFbmRlZD1mdW5jdGlvbihlKXt0aGlzLnVwZGF0ZV8odGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCksMSl9LHQuZ2V0UGVyY2VudD1mdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5nZXRDdXJyZW50VGltZV8oKSxuPXRoaXMucGxheWVyXy5saXZlVHJhY2tlcjtyZXR1cm4gbiYmbi5pc0xpdmUoKT8oZT0odC1uLnNlZWthYmxlU3RhcnQoKSkvbi5saXZlV2luZG93KCksbi5hdExpdmVFZGdlKCkmJihlPTEpKTplPXQvdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCksMTw9ZT8xOmV8fDB9LHQuaGFuZGxlTW91c2VEb3duPWZ1bmN0aW9uKGUpe1koZSkmJihlLnN0b3BQcm9wYWdhdGlvbigpLHRoaXMucGxheWVyXy5zY3J1YmJpbmcoITApLHRoaXMudmlkZW9XYXNQbGF5aW5nPSF0aGlzLnBsYXllcl8ucGF1c2VkKCksdGhpcy5wbGF5ZXJfLnBhdXNlKCksaS5wcm90b3R5cGUuaGFuZGxlTW91c2VEb3duLmNhbGwodGhpcyxlKSl9LHQuaGFuZGxlTW91c2VNb3ZlPWZ1bmN0aW9uKGUpe2lmKFkoZSkpe3ZhciB0LG49dGhpcy5jYWxjdWxhdGVEaXN0YW5jZShlKSxpPXRoaXMucGxheWVyXy5saXZlVHJhY2tlcjtpZihpJiZpLmlzTGl2ZSgpKXt2YXIgcj1pLnNlZWthYmxlU3RhcnQoKSxzPWkubGl2ZUN1cnJlbnRUaW1lKCk7aWYoczw9KHQ9cituKmkubGl2ZVdpbmRvdygpKSYmKHQ9cyksdDw9ciYmKHQ9cisuMSksdD09PTEvMClyZXR1cm59ZWxzZSh0PW4qdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkpPT09dGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkmJih0LT0uMSk7dGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHQpfX0sdC5lbmFibGU9ZnVuY3Rpb24oKXtpLnByb3RvdHlwZS5lbmFibGUuY2FsbCh0aGlzKTt2YXIgZT10aGlzLmdldENoaWxkKFwibW91c2VUaW1lRGlzcGxheVwiKTtlJiZlLnNob3coKX0sdC5kaXNhYmxlPWZ1bmN0aW9uKCl7aS5wcm90b3R5cGUuZGlzYWJsZS5jYWxsKHRoaXMpO3ZhciBlPXRoaXMuZ2V0Q2hpbGQoXCJtb3VzZVRpbWVEaXNwbGF5XCIpO2UmJmUuaGlkZSgpfSx0LmhhbmRsZU1vdXNlVXA9ZnVuY3Rpb24oZSl7aS5wcm90b3R5cGUuaGFuZGxlTW91c2VVcC5jYWxsKHRoaXMsZSksZSYmZS5zdG9wUHJvcGFnYXRpb24oKSx0aGlzLnBsYXllcl8uc2NydWJiaW5nKCExKSx0aGlzLnBsYXllcl8udHJpZ2dlcih7dHlwZTpcInRpbWV1cGRhdGVcIix0YXJnZXQ6dGhpcyxtYW51YWxseVRyaWdnZXJlZDohMH0pLHRoaXMudmlkZW9XYXNQbGF5aW5nJiZ3dCh0aGlzLnBsYXllcl8ucGxheSgpKX0sdC5zdGVwRm9yd2FyZD1mdW5jdGlvbigpe3RoaXMucGxheWVyXy5jdXJyZW50VGltZSh0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKSs1KX0sdC5zdGVwQmFjaz1mdW5jdGlvbigpe3RoaXMucGxheWVyXy5jdXJyZW50VGltZSh0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKS01KX0sdC5oYW5kbGVBY3Rpb249ZnVuY3Rpb24oZSl7dGhpcy5wbGF5ZXJfLnBhdXNlZCgpP3RoaXMucGxheWVyXy5wbGF5KCk6dGhpcy5wbGF5ZXJfLnBhdXNlKCl9LHQuaGFuZGxlS2V5UHJlc3M9ZnVuY3Rpb24oZSl7aWYoUHQuaXNFdmVudEtleShlLFwiU3BhY2VcIil8fFB0LmlzRXZlbnRLZXkoZSxcIkVudGVyXCIpKWUucHJldmVudERlZmF1bHQoKSx0aGlzLmhhbmRsZUFjdGlvbihlKTtlbHNlIGlmKFB0LmlzRXZlbnRLZXkoZSxcIkhvbWVcIikpZS5wcmV2ZW50RGVmYXVsdCgpLHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgwKTtlbHNlIGlmKFB0LmlzRXZlbnRLZXkoZSxcIkVuZFwiKSllLnByZXZlbnREZWZhdWx0KCksdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMucGxheWVyXy5kdXJhdGlvbigpKTtlbHNlIGlmKC9eWzAtOV0kLy50ZXN0KFB0KGUpKSl7ZS5wcmV2ZW50RGVmYXVsdCgpO3ZhciB0PTEwKihQdC5jb2Rlc1tQdChlKV0tUHQuY29kZXNbMF0pLzEwMDt0aGlzLnBsYXllcl8uY3VycmVudFRpbWUodGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkqdCl9ZWxzZSBQdC5pc0V2ZW50S2V5KGUsXCJQZ0RuXCIpPyhlLnByZXZlbnREZWZhdWx0KCksdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpLTYwKSk6UHQuaXNFdmVudEtleShlLFwiUGdVcFwiKT8oZS5wcmV2ZW50RGVmYXVsdCgpLHRoaXMucGxheWVyXy5jdXJyZW50VGltZSh0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKSs2MCkpOmkucHJvdG90eXBlLmhhbmRsZUtleVByZXNzLmNhbGwodGhpcyxlKX0sZX0oUmkpO3ppLnByb3RvdHlwZS5vcHRpb25zXz17Y2hpbGRyZW46W1wibG9hZFByb2dyZXNzQmFyXCIsXCJwbGF5UHJvZ3Jlc3NCYXJcIl0sYmFyTmFtZTpcInBsYXlQcm9ncmVzc0JhclwifSxHZXx8SmV8fHppLnByb3RvdHlwZS5vcHRpb25zXy5jaGlsZHJlbi5zcGxpY2UoMSwwLFwibW91c2VUaW1lRGlzcGxheVwiKSxGZS5yZWdpc3RlckNvbXBvbmVudChcIlNlZWtCYXJcIix6aSk7dmFyIFdpPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbjtyZXR1cm4obj1pLmNhbGwodGhpcyxlLHQpfHx0aGlzKS5oYW5kbGVNb3VzZU1vdmU9RWUoQ2Uodih2KG4pKSxuLmhhbmRsZU1vdXNlTW92ZSksMjUpLG4udGhyb3R0bGVkSGFuZGxlTW91c2VTZWVrPUVlKENlKHYodihuKSksbi5oYW5kbGVNb3VzZVNlZWspLDI1KSxuLmVuYWJsZSgpLG59ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZUVsPWZ1bmN0aW9uKCl7cmV0dXJuIGkucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImRpdlwiLHtjbGFzc05hbWU6XCJ2anMtcHJvZ3Jlc3MtY29udHJvbCB2anMtY29udHJvbFwifSl9LHQuaGFuZGxlTW91c2VNb3ZlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZ2V0Q2hpbGQoXCJzZWVrQmFyXCIpO2lmKHQpe3ZhciBuPXQuZ2V0Q2hpbGQoXCJtb3VzZVRpbWVEaXNwbGF5XCIpLGk9dC5lbCgpLHI9VihpKSxzPVcoaSxlKS54OzE8cz9zPTE6czwwJiYocz0wKSxuJiZuLnVwZGF0ZShyLHMpfX0sdC5oYW5kbGVNb3VzZVNlZWs9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5nZXRDaGlsZChcInNlZWtCYXJcIik7dCYmdC5oYW5kbGVNb3VzZU1vdmUoZSl9LHQuZW5hYmxlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVuYWJsZWRffSx0LmRpc2FibGU9ZnVuY3Rpb24oKXt0aGlzLmNoaWxkcmVuKCkuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5kaXNhYmxlJiZlLmRpc2FibGUoKX0pLHRoaXMuZW5hYmxlZCgpJiYodGhpcy5vZmYoW1wibW91c2Vkb3duXCIsXCJ0b3VjaHN0YXJ0XCJdLHRoaXMuaGFuZGxlTW91c2VEb3duKSx0aGlzLm9mZih0aGlzLmVsXyxcIm1vdXNlbW92ZVwiLHRoaXMuaGFuZGxlTW91c2VNb3ZlKSx0aGlzLmhhbmRsZU1vdXNlVXAoKSx0aGlzLmFkZENsYXNzKFwiZGlzYWJsZWRcIiksdGhpcy5lbmFibGVkXz0hMSl9LHQuZW5hYmxlPWZ1bmN0aW9uKCl7dGhpcy5jaGlsZHJlbigpLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUuZW5hYmxlJiZlLmVuYWJsZSgpfSksdGhpcy5lbmFibGVkKCl8fCh0aGlzLm9uKFtcIm1vdXNlZG93blwiLFwidG91Y2hzdGFydFwiXSx0aGlzLmhhbmRsZU1vdXNlRG93biksdGhpcy5vbih0aGlzLmVsXyxcIm1vdXNlbW92ZVwiLHRoaXMuaGFuZGxlTW91c2VNb3ZlKSx0aGlzLnJlbW92ZUNsYXNzKFwiZGlzYWJsZWRcIiksdGhpcy5lbmFibGVkXz0hMCl9LHQuaGFuZGxlTW91c2VEb3duPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZWxfLm93bmVyRG9jdW1lbnQsbj10aGlzLmdldENoaWxkKFwic2Vla0JhclwiKTtuJiZuLmhhbmRsZU1vdXNlRG93bihlKSx0aGlzLm9uKHQsXCJtb3VzZW1vdmVcIix0aGlzLnRocm90dGxlZEhhbmRsZU1vdXNlU2VlayksdGhpcy5vbih0LFwidG91Y2htb3ZlXCIsdGhpcy50aHJvdHRsZWRIYW5kbGVNb3VzZVNlZWspLHRoaXMub24odCxcIm1vdXNldXBcIix0aGlzLmhhbmRsZU1vdXNlVXApLHRoaXMub24odCxcInRvdWNoZW5kXCIsdGhpcy5oYW5kbGVNb3VzZVVwKX0sdC5oYW5kbGVNb3VzZVVwPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZWxfLm93bmVyRG9jdW1lbnQsbj10aGlzLmdldENoaWxkKFwic2Vla0JhclwiKTtuJiZuLmhhbmRsZU1vdXNlVXAoZSksdGhpcy5vZmYodCxcIm1vdXNlbW92ZVwiLHRoaXMudGhyb3R0bGVkSGFuZGxlTW91c2VTZWVrKSx0aGlzLm9mZih0LFwidG91Y2htb3ZlXCIsdGhpcy50aHJvdHRsZWRIYW5kbGVNb3VzZVNlZWspLHRoaXMub2ZmKHQsXCJtb3VzZXVwXCIsdGhpcy5oYW5kbGVNb3VzZVVwKSx0aGlzLm9mZih0LFwidG91Y2hlbmRcIix0aGlzLmhhbmRsZU1vdXNlVXApfSxlfShGZSk7V2kucHJvdG90eXBlLm9wdGlvbnNfPXtjaGlsZHJlbjpbXCJzZWVrQmFyXCJdfSxGZS5yZWdpc3RlckNvbXBvbmVudChcIlByb2dyZXNzQ29udHJvbFwiLFdpKTt2YXIgS2k9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLm9uKGUsXCJmdWxsc2NyZWVuY2hhbmdlXCIsbi5oYW5kbGVGdWxsc2NyZWVuQ2hhbmdlKSwhMT09PWRbdnQuZnVsbHNjcmVlbkVuYWJsZWRdJiZuLmRpc2FibGUoKSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtZnVsbHNjcmVlbi1jb250cm9sIFwiK2kucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sdC5oYW5kbGVGdWxsc2NyZWVuQ2hhbmdlPWZ1bmN0aW9uKGUpe3RoaXMucGxheWVyXy5pc0Z1bGxzY3JlZW4oKT90aGlzLmNvbnRyb2xUZXh0KFwiTm9uLUZ1bGxzY3JlZW5cIik6dGhpcy5jb250cm9sVGV4dChcIkZ1bGxzY3JlZW5cIil9LHQuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZSl7dGhpcy5wbGF5ZXJfLmlzRnVsbHNjcmVlbigpP3RoaXMucGxheWVyXy5leGl0RnVsbHNjcmVlbigpOnRoaXMucGxheWVyXy5yZXF1ZXN0RnVsbHNjcmVlbigpfSxlfShDaSk7S2kucHJvdG90eXBlLmNvbnRyb2xUZXh0Xz1cIkZ1bGxzY3JlZW5cIixGZS5yZWdpc3RlckNvbXBvbmVudChcIkZ1bGxzY3JlZW5Ub2dnbGVcIixLaSk7dmFyIFVpPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuIGYodCxlKSx0LnByb3RvdHlwZS5jcmVhdGVFbD1mdW5jdGlvbigpe3JldHVybiBlLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsXCJkaXZcIix7Y2xhc3NOYW1lOlwidmpzLXZvbHVtZS1sZXZlbFwiLGlubmVySFRNTDonPHNwYW4gY2xhc3M9XCJ2anMtY29udHJvbC10ZXh0XCI+PC9zcGFuPid9KX0sdH0oRmUpO0ZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiVm9sdW1lTGV2ZWxcIixVaSk7dmFyIHFpPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbjtyZXR1cm4obj1pLmNhbGwodGhpcyxlLHQpfHx0aGlzKS5vbihcInNsaWRlcmFjdGl2ZVwiLG4udXBkYXRlTGFzdFZvbHVtZV8pLG4ub24oZSxcInZvbHVtZWNoYW5nZVwiLG4udXBkYXRlQVJJQUF0dHJpYnV0ZXMpLGUucmVhZHkoZnVuY3Rpb24oKXtyZXR1cm4gbi51cGRhdGVBUklBQXR0cmlidXRlcygpfSksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY3JlYXRlRWw9ZnVuY3Rpb24oKXtyZXR1cm4gaS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIse2NsYXNzTmFtZTpcInZqcy12b2x1bWUtYmFyIHZqcy1zbGlkZXItYmFyXCJ9LHtcImFyaWEtbGFiZWxcIjp0aGlzLmxvY2FsaXplKFwiVm9sdW1lIExldmVsXCIpLFwiYXJpYS1saXZlXCI6XCJwb2xpdGVcIn0pfSx0LmhhbmRsZU1vdXNlRG93bj1mdW5jdGlvbihlKXtZKGUpJiZpLnByb3RvdHlwZS5oYW5kbGVNb3VzZURvd24uY2FsbCh0aGlzLGUpfSx0LmhhbmRsZU1vdXNlTW92ZT1mdW5jdGlvbihlKXtZKGUpJiYodGhpcy5jaGVja011dGVkKCksdGhpcy5wbGF5ZXJfLnZvbHVtZSh0aGlzLmNhbGN1bGF0ZURpc3RhbmNlKGUpKSl9LHQuY2hlY2tNdXRlZD1mdW5jdGlvbigpe3RoaXMucGxheWVyXy5tdXRlZCgpJiZ0aGlzLnBsYXllcl8ubXV0ZWQoITEpfSx0LmdldFBlcmNlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wbGF5ZXJfLm11dGVkKCk/MDp0aGlzLnBsYXllcl8udm9sdW1lKCl9LHQuc3RlcEZvcndhcmQ9ZnVuY3Rpb24oKXt0aGlzLmNoZWNrTXV0ZWQoKSx0aGlzLnBsYXllcl8udm9sdW1lKHRoaXMucGxheWVyXy52b2x1bWUoKSsuMSl9LHQuc3RlcEJhY2s9ZnVuY3Rpb24oKXt0aGlzLmNoZWNrTXV0ZWQoKSx0aGlzLnBsYXllcl8udm9sdW1lKHRoaXMucGxheWVyXy52b2x1bWUoKS0uMSl9LHQudXBkYXRlQVJJQUF0dHJpYnV0ZXM9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5wbGF5ZXJfLm11dGVkKCk/MDp0aGlzLnZvbHVtZUFzUGVyY2VudGFnZV8oKTt0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbm93XCIsdCksdGhpcy5lbF8uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZXRleHRcIix0K1wiJVwiKX0sdC52b2x1bWVBc1BlcmNlbnRhZ2VfPWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGgucm91bmQoMTAwKnRoaXMucGxheWVyXy52b2x1bWUoKSl9LHQudXBkYXRlTGFzdFZvbHVtZV89ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5wbGF5ZXJfLnZvbHVtZSgpO3RoaXMub25lKFwic2xpZGVyaW5hY3RpdmVcIixmdW5jdGlvbigpezA9PT1lLnBsYXllcl8udm9sdW1lKCkmJmUucGxheWVyXy5sYXN0Vm9sdW1lXyh0KX0pfSxlfShSaSk7cWkucHJvdG90eXBlLm9wdGlvbnNfPXtjaGlsZHJlbjpbXCJ2b2x1bWVMZXZlbFwiXSxiYXJOYW1lOlwidm9sdW1lTGV2ZWxcIn0scWkucHJvdG90eXBlLnBsYXllckV2ZW50PVwidm9sdW1lY2hhbmdlXCIsRmUucmVnaXN0ZXJDb21wb25lbnQoXCJWb2x1bWVCYXJcIixxaSk7dmFyIFhpPWZ1bmN0aW9uKHMpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbixpLHI7cmV0dXJuIHZvaWQgMD09PXQmJih0PXt9KSx0LnZlcnRpY2FsPXQudmVydGljYWx8fCExLChcInVuZGVmaW5lZFwiPT10eXBlb2YgdC52b2x1bWVCYXJ8fGModC52b2x1bWVCYXIpKSYmKHQudm9sdW1lQmFyPXQudm9sdW1lQmFyfHx7fSx0LnZvbHVtZUJhci52ZXJ0aWNhbD10LnZlcnRpY2FsKSxuPXMuY2FsbCh0aGlzLGUsdCl8fHRoaXMsaT12KHYobikpLChyPWUpLnRlY2hfJiYhci50ZWNoXy5mZWF0dXJlc1ZvbHVtZUNvbnRyb2wmJmkuYWRkQ2xhc3MoXCJ2anMtaGlkZGVuXCIpLGkub24ocixcImxvYWRzdGFydFwiLGZ1bmN0aW9uKCl7ci50ZWNoXy5mZWF0dXJlc1ZvbHVtZUNvbnRyb2w/aS5yZW1vdmVDbGFzcyhcInZqcy1oaWRkZW5cIik6aS5hZGRDbGFzcyhcInZqcy1oaWRkZW5cIil9KSxuLnRocm90dGxlZEhhbmRsZU1vdXNlTW92ZT1FZShDZSh2KHYobikpLG4uaGFuZGxlTW91c2VNb3ZlKSwyNSksbi5vbihcIm1vdXNlZG93blwiLG4uaGFuZGxlTW91c2VEb3duKSxuLm9uKFwidG91Y2hzdGFydFwiLG4uaGFuZGxlTW91c2VEb3duKSxuLm9uKG4udm9sdW1lQmFyLFtcImZvY3VzXCIsXCJzbGlkZXJhY3RpdmVcIl0sZnVuY3Rpb24oKXtuLnZvbHVtZUJhci5hZGRDbGFzcyhcInZqcy1zbGlkZXItYWN0aXZlXCIpLG4uYWRkQ2xhc3MoXCJ2anMtc2xpZGVyLWFjdGl2ZVwiKSxuLnRyaWdnZXIoXCJzbGlkZXJhY3RpdmVcIil9KSxuLm9uKG4udm9sdW1lQmFyLFtcImJsdXJcIixcInNsaWRlcmluYWN0aXZlXCJdLGZ1bmN0aW9uKCl7bi52b2x1bWVCYXIucmVtb3ZlQ2xhc3MoXCJ2anMtc2xpZGVyLWFjdGl2ZVwiKSxuLnJlbW92ZUNsYXNzKFwidmpzLXNsaWRlci1hY3RpdmVcIiksbi50cmlnZ2VyKFwic2xpZGVyaW5hY3RpdmVcIil9KSxufWYoZSxzKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jcmVhdGVFbD1mdW5jdGlvbigpe3ZhciBlPVwidmpzLXZvbHVtZS1ob3Jpem9udGFsXCI7cmV0dXJuIHRoaXMub3B0aW9uc18udmVydGljYWwmJihlPVwidmpzLXZvbHVtZS12ZXJ0aWNhbFwiKSxzLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsXCJkaXZcIix7Y2xhc3NOYW1lOlwidmpzLXZvbHVtZS1jb250cm9sIHZqcy1jb250cm9sIFwiK2V9KX0sdC5oYW5kbGVNb3VzZURvd249ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5lbF8ub3duZXJEb2N1bWVudDt0aGlzLm9uKHQsXCJtb3VzZW1vdmVcIix0aGlzLnRocm90dGxlZEhhbmRsZU1vdXNlTW92ZSksdGhpcy5vbih0LFwidG91Y2htb3ZlXCIsdGhpcy50aHJvdHRsZWRIYW5kbGVNb3VzZU1vdmUpLHRoaXMub24odCxcIm1vdXNldXBcIix0aGlzLmhhbmRsZU1vdXNlVXApLHRoaXMub24odCxcInRvdWNoZW5kXCIsdGhpcy5oYW5kbGVNb3VzZVVwKX0sdC5oYW5kbGVNb3VzZVVwPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZWxfLm93bmVyRG9jdW1lbnQ7dGhpcy5vZmYodCxcIm1vdXNlbW92ZVwiLHRoaXMudGhyb3R0bGVkSGFuZGxlTW91c2VNb3ZlKSx0aGlzLm9mZih0LFwidG91Y2htb3ZlXCIsdGhpcy50aHJvdHRsZWRIYW5kbGVNb3VzZU1vdmUpLHRoaXMub2ZmKHQsXCJtb3VzZXVwXCIsdGhpcy5oYW5kbGVNb3VzZVVwKSx0aGlzLm9mZih0LFwidG91Y2hlbmRcIix0aGlzLmhhbmRsZU1vdXNlVXApfSx0LmhhbmRsZU1vdXNlTW92ZT1mdW5jdGlvbihlKXt0aGlzLnZvbHVtZUJhci5oYW5kbGVNb3VzZU1vdmUoZSl9LGV9KEZlKTtYaS5wcm90b3R5cGUub3B0aW9uc189e2NoaWxkcmVuOltcInZvbHVtZUJhclwiXX0sRmUucmVnaXN0ZXJDb21wb25lbnQoXCJWb2x1bWVDb250cm9sXCIsWGkpO3ZhciAkaT1mdW5jdGlvbihzKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG4saSxyO3JldHVybiBuPXMuY2FsbCh0aGlzLGUsdCl8fHRoaXMsaT12KHYobikpLChyPWUpLnRlY2hfJiYhci50ZWNoXy5mZWF0dXJlc011dGVDb250cm9sJiZpLmFkZENsYXNzKFwidmpzLWhpZGRlblwiKSxpLm9uKHIsXCJsb2Fkc3RhcnRcIixmdW5jdGlvbigpe3IudGVjaF8uZmVhdHVyZXNNdXRlQ29udHJvbD9pLnJlbW92ZUNsYXNzKFwidmpzLWhpZGRlblwiKTppLmFkZENsYXNzKFwidmpzLWhpZGRlblwiKX0pLG4ub24oZSxbXCJsb2Fkc3RhcnRcIixcInZvbHVtZWNoYW5nZVwiXSxuLnVwZGF0ZSksbn1mKGUscyk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLW11dGUtY29udHJvbCBcIitzLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyl9LHQuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5wbGF5ZXJfLnZvbHVtZSgpLG49dGhpcy5wbGF5ZXJfLmxhc3RWb2x1bWVfKCk7aWYoMD09PXQpe3ZhciBpPW48LjE/LjE6bjt0aGlzLnBsYXllcl8udm9sdW1lKGkpLHRoaXMucGxheWVyXy5tdXRlZCghMSl9ZWxzZSB0aGlzLnBsYXllcl8ubXV0ZWQoIXRoaXMucGxheWVyXy5tdXRlZCgpKX0sdC51cGRhdGU9ZnVuY3Rpb24oZSl7dGhpcy51cGRhdGVJY29uXygpLHRoaXMudXBkYXRlQ29udHJvbFRleHRfKCl9LHQudXBkYXRlSWNvbl89ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnBsYXllcl8udm9sdW1lKCksdD0zO0dlJiZ0aGlzLnBsYXllcl8udGVjaF8mJnRoaXMucGxheWVyXy50ZWNoXy5lbF8mJnRoaXMucGxheWVyXy5tdXRlZCh0aGlzLnBsYXllcl8udGVjaF8uZWxfLm11dGVkKSwwPT09ZXx8dGhpcy5wbGF5ZXJfLm11dGVkKCk/dD0wOmU8LjMzP3Q9MTplPC42NyYmKHQ9Mik7Zm9yKHZhciBuPTA7bjw0O24rKylNKHRoaXMuZWxfLFwidmpzLXZvbC1cIituKTtMKHRoaXMuZWxfLFwidmpzLXZvbC1cIit0KX0sdC51cGRhdGVDb250cm9sVGV4dF89ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnBsYXllcl8ubXV0ZWQoKXx8MD09PXRoaXMucGxheWVyXy52b2x1bWUoKT9cIlVubXV0ZVwiOlwiTXV0ZVwiO3RoaXMuY29udHJvbFRleHQoKSE9PWUmJnRoaXMuY29udHJvbFRleHQoZSl9LGV9KENpKTskaS5wcm90b3R5cGUuY29udHJvbFRleHRfPVwiTXV0ZVwiLEZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiTXV0ZVRvZ2dsZVwiLCRpKTt2YXIgWWk9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybiB2b2lkIDA9PT10JiYodD17fSksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQuaW5saW5lP3QuaW5saW5lPXQuaW5saW5lOnQuaW5saW5lPSEwLChcInVuZGVmaW5lZFwiPT10eXBlb2YgdC52b2x1bWVDb250cm9sfHxjKHQudm9sdW1lQ29udHJvbCkpJiYodC52b2x1bWVDb250cm9sPXQudm9sdW1lQ29udHJvbHx8e30sdC52b2x1bWVDb250cm9sLnZlcnRpY2FsPSF0LmlubGluZSksKG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcykub24oZSxbXCJsb2Fkc3RhcnRcIl0sbi52b2x1bWVQYW5lbFN0YXRlXyksbi5vbihuLnZvbHVtZUNvbnRyb2wsW1wic2xpZGVyYWN0aXZlXCJdLG4uc2xpZGVyQWN0aXZlXyksbi5vbihuLnZvbHVtZUNvbnRyb2wsW1wic2xpZGVyaW5hY3RpdmVcIl0sbi5zbGlkZXJJbmFjdGl2ZV8pLG59ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LnNsaWRlckFjdGl2ZV89ZnVuY3Rpb24oKXt0aGlzLmFkZENsYXNzKFwidmpzLXNsaWRlci1hY3RpdmVcIil9LHQuc2xpZGVySW5hY3RpdmVfPWZ1bmN0aW9uKCl7dGhpcy5yZW1vdmVDbGFzcyhcInZqcy1zbGlkZXItYWN0aXZlXCIpfSx0LnZvbHVtZVBhbmVsU3RhdGVfPWZ1bmN0aW9uKCl7dGhpcy52b2x1bWVDb250cm9sLmhhc0NsYXNzKFwidmpzLWhpZGRlblwiKSYmdGhpcy5tdXRlVG9nZ2xlLmhhc0NsYXNzKFwidmpzLWhpZGRlblwiKSYmdGhpcy5hZGRDbGFzcyhcInZqcy1oaWRkZW5cIiksdGhpcy52b2x1bWVDb250cm9sLmhhc0NsYXNzKFwidmpzLWhpZGRlblwiKSYmIXRoaXMubXV0ZVRvZ2dsZS5oYXNDbGFzcyhcInZqcy1oaWRkZW5cIikmJnRoaXMuYWRkQ2xhc3MoXCJ2anMtbXV0ZS10b2dnbGUtb25seVwiKX0sdC5jcmVhdGVFbD1mdW5jdGlvbigpe3ZhciBlPVwidmpzLXZvbHVtZS1wYW5lbC1ob3Jpem9udGFsXCI7cmV0dXJuIHRoaXMub3B0aW9uc18uaW5saW5lfHwoZT1cInZqcy12b2x1bWUtcGFuZWwtdmVydGljYWxcIiksaS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIse2NsYXNzTmFtZTpcInZqcy12b2x1bWUtcGFuZWwgdmpzLWNvbnRyb2wgXCIrZX0pfSxlfShGZSk7WWkucHJvdG90eXBlLm9wdGlvbnNfPXtjaGlsZHJlbjpbXCJtdXRlVG9nZ2xlXCIsXCJ2b2x1bWVDb250cm9sXCJdfSxGZS5yZWdpc3RlckNvbXBvbmVudChcIlZvbHVtZVBhbmVsXCIsWWkpO3ZhciBHaT1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuIG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcyx0JiYobi5tZW51QnV0dG9uXz10Lm1lbnVCdXR0b24pLG4uZm9jdXNlZENoaWxkXz0tMSxuLm9uKFwia2V5ZG93blwiLG4uaGFuZGxlS2V5UHJlc3MpLG4uYm91bmRIYW5kbGVCbHVyXz1DZSh2KHYobikpLG4uaGFuZGxlQmx1ciksbi5ib3VuZEhhbmRsZVRhcENsaWNrXz1DZSh2KHYobikpLG4uaGFuZGxlVGFwQ2xpY2spLG59ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmFkZEV2ZW50TGlzdGVuZXJGb3JJdGVtPWZ1bmN0aW9uKGUpe2UgaW5zdGFuY2VvZiBGZSYmKHRoaXMub24oZSxcImJsdXJcIix0aGlzLmJvdW5kSGFuZGxlQmx1cl8pLHRoaXMub24oZSxbXCJ0YXBcIixcImNsaWNrXCJdLHRoaXMuYm91bmRIYW5kbGVUYXBDbGlja18pKX0sdC5yZW1vdmVFdmVudExpc3RlbmVyRm9ySXRlbT1mdW5jdGlvbihlKXtlIGluc3RhbmNlb2YgRmUmJih0aGlzLm9mZihlLFwiYmx1clwiLHRoaXMuYm91bmRIYW5kbGVCbHVyXyksdGhpcy5vZmYoZSxbXCJ0YXBcIixcImNsaWNrXCJdLHRoaXMuYm91bmRIYW5kbGVUYXBDbGlja18pKX0sdC5yZW1vdmVDaGlsZD1mdW5jdGlvbihlKXtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9dGhpcy5nZXRDaGlsZChlKSksdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyRm9ySXRlbShlKSxpLnByb3RvdHlwZS5yZW1vdmVDaGlsZC5jYWxsKHRoaXMsZSl9LHQuYWRkSXRlbT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmFkZENoaWxkKGUpO3QmJnRoaXMuYWRkRXZlbnRMaXN0ZW5lckZvckl0ZW0odCl9LHQuY3JlYXRlRWw9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9wdGlvbnNfLmNvbnRlbnRFbFR5cGV8fFwidWxcIjt0aGlzLmNvbnRlbnRFbF89eChlLHtjbGFzc05hbWU6XCJ2anMtbWVudS1jb250ZW50XCJ9KSx0aGlzLmNvbnRlbnRFbF8uc2V0QXR0cmlidXRlKFwicm9sZVwiLFwibWVudVwiKTt2YXIgdD1pLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsXCJkaXZcIix7YXBwZW5kOnRoaXMuY29udGVudEVsXyxjbGFzc05hbWU6XCJ2anMtbWVudVwifSk7cmV0dXJuIHQuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RWxfKSxoZSh0LFwiY2xpY2tcIixmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKX0pLHR9LHQuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuY29udGVudEVsXz1udWxsLHRoaXMuYm91bmRIYW5kbGVCbHVyXz1udWxsLHRoaXMuYm91bmRIYW5kbGVUYXBDbGlja189bnVsbCxpLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyl9LHQuaGFuZGxlQmx1cj1mdW5jdGlvbihlKXt2YXIgdD1lLnJlbGF0ZWRUYXJnZXR8fGQuYWN0aXZlRWxlbWVudDtpZighdGhpcy5jaGlsZHJlbigpLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuIGUuZWwoKT09PXR9KSl7dmFyIG49dGhpcy5tZW51QnV0dG9uXztuJiZuLmJ1dHRvblByZXNzZWRfJiZ0IT09bi5lbCgpLmZpcnN0Q2hpbGQmJm4udW5wcmVzc0J1dHRvbigpfX0sdC5oYW5kbGVUYXBDbGljaz1mdW5jdGlvbih0KXtpZih0aGlzLm1lbnVCdXR0b25fKXt0aGlzLm1lbnVCdXR0b25fLnVucHJlc3NCdXR0b24oKTt2YXIgZT10aGlzLmNoaWxkcmVuKCk7aWYoIUFycmF5LmlzQXJyYXkoZSkpcmV0dXJuO3ZhciBuPWUuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLmVsKCk9PT10LnRhcmdldH0pWzBdO2lmKCFuKXJldHVybjtcIkNhcHRpb25TZXR0aW5nc01lbnVJdGVtXCIhPT1uLm5hbWUoKSYmdGhpcy5tZW51QnV0dG9uXy5mb2N1cygpfX0sdC5oYW5kbGVLZXlQcmVzcz1mdW5jdGlvbihlKXtQdC5pc0V2ZW50S2V5KGUsXCJMZWZ0XCIpfHxQdC5pc0V2ZW50S2V5KGUsXCJEb3duXCIpPyhlLnByZXZlbnREZWZhdWx0KCksdGhpcy5zdGVwRm9yd2FyZCgpKTooUHQuaXNFdmVudEtleShlLFwiUmlnaHRcIil8fFB0LmlzRXZlbnRLZXkoZSxcIlVwXCIpKSYmKGUucHJldmVudERlZmF1bHQoKSx0aGlzLnN0ZXBCYWNrKCkpfSx0LnN0ZXBGb3J3YXJkPWZ1bmN0aW9uKCl7dmFyIGU9MDt2b2lkIDAhPT10aGlzLmZvY3VzZWRDaGlsZF8mJihlPXRoaXMuZm9jdXNlZENoaWxkXysxKSx0aGlzLmZvY3VzKGUpfSx0LnN0ZXBCYWNrPWZ1bmN0aW9uKCl7dmFyIGU9MDt2b2lkIDAhPT10aGlzLmZvY3VzZWRDaGlsZF8mJihlPXRoaXMuZm9jdXNlZENoaWxkXy0xKSx0aGlzLmZvY3VzKGUpfSx0LmZvY3VzPWZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUmJihlPTApO3ZhciB0PXRoaXMuY2hpbGRyZW4oKS5zbGljZSgpO3QubGVuZ3RoJiZ0WzBdLmNsYXNzTmFtZSYmL3Zqcy1tZW51LXRpdGxlLy50ZXN0KHRbMF0uY2xhc3NOYW1lKSYmdC5zaGlmdCgpLDA8dC5sZW5ndGgmJihlPDA/ZT0wOmU+PXQubGVuZ3RoJiYoZT10Lmxlbmd0aC0xKSx0W3RoaXMuZm9jdXNlZENoaWxkXz1lXS5lbF8uZm9jdXMoKSl9LGV9KEZlKTtGZS5yZWdpc3RlckNvbXBvbmVudChcIk1lbnVcIixHaSk7dmFyIFFpPWZ1bmN0aW9uKHIpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbjt2b2lkIDA9PT10JiYodD17fSksKG49ci5jYWxsKHRoaXMsZSx0KXx8dGhpcykubWVudUJ1dHRvbl89bmV3IENpKGUsdCksbi5tZW51QnV0dG9uXy5jb250cm9sVGV4dChuLmNvbnRyb2xUZXh0Xyksbi5tZW51QnV0dG9uXy5lbF8uc2V0QXR0cmlidXRlKFwiYXJpYS1oYXNwb3B1cFwiLFwidHJ1ZVwiKTt2YXIgaT1DaS5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcygpO3JldHVybiBuLm1lbnVCdXR0b25fLmVsXy5jbGFzc05hbWU9bi5idWlsZENTU0NsYXNzKCkrXCIgXCIraSxuLm1lbnVCdXR0b25fLnJlbW92ZUNsYXNzKFwidmpzLWNvbnRyb2xcIiksbi5hZGRDaGlsZChuLm1lbnVCdXR0b25fKSxuLnVwZGF0ZSgpLG4uZW5hYmxlZF89ITAsbi5vbihuLm1lbnVCdXR0b25fLFwidGFwXCIsbi5oYW5kbGVDbGljayksbi5vbihuLm1lbnVCdXR0b25fLFwiY2xpY2tcIixuLmhhbmRsZUNsaWNrKSxuLm9uKG4ubWVudUJ1dHRvbl8sXCJmb2N1c1wiLG4uaGFuZGxlRm9jdXMpLG4ub24obi5tZW51QnV0dG9uXyxcImJsdXJcIixuLmhhbmRsZUJsdXIpLG4ub24obi5tZW51QnV0dG9uXyxcIm1vdXNlZW50ZXJcIixmdW5jdGlvbigpe24ubWVudS5zaG93KCl9KSxuLm9uKFwia2V5ZG93blwiLG4uaGFuZGxlU3VibWVudUtleVByZXNzKSxufWYoZSxyKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU1lbnUoKTt0aGlzLm1lbnUmJih0aGlzLm1lbnUuZGlzcG9zZSgpLHRoaXMucmVtb3ZlQ2hpbGQodGhpcy5tZW51KSksdGhpcy5tZW51PWUsdGhpcy5hZGRDaGlsZChlKSx0aGlzLmJ1dHRvblByZXNzZWRfPSExLHRoaXMubWVudUJ1dHRvbl8uZWxfLnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIixcImZhbHNlXCIpLHRoaXMuaXRlbXMmJnRoaXMuaXRlbXMubGVuZ3RoPD10aGlzLmhpZGVUaHJlc2hvbGRfP3RoaXMuaGlkZSgpOnRoaXMuc2hvdygpfSx0LmNyZWF0ZU1lbnU9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgR2kodGhpcy5wbGF5ZXJfLHttZW51QnV0dG9uOnRoaXN9KTtpZih0aGlzLmhpZGVUaHJlc2hvbGRfPTAsdGhpcy5vcHRpb25zXy50aXRsZSl7dmFyIHQ9eChcImxpXCIse2NsYXNzTmFtZTpcInZqcy1tZW51LXRpdGxlXCIsaW5uZXJIVE1MOlJlKHRoaXMub3B0aW9uc18udGl0bGUpLHRhYkluZGV4Oi0xfSk7dGhpcy5oaWRlVGhyZXNob2xkXys9MTt2YXIgbj1uZXcgRmUodGhpcy5wbGF5ZXJfLHtlbDp0fSk7ZS5hZGRJdGVtKG4pfWlmKHRoaXMuaXRlbXM9dGhpcy5jcmVhdGVJdGVtcygpLHRoaXMuaXRlbXMpZm9yKHZhciBpPTA7aTx0aGlzLml0ZW1zLmxlbmd0aDtpKyspZS5hZGRJdGVtKHRoaXMuaXRlbXNbaV0pO3JldHVybiBlfSx0LmNyZWF0ZUl0ZW1zPWZ1bmN0aW9uKCl7fSx0LmNyZWF0ZUVsPWZ1bmN0aW9uKCl7cmV0dXJuIHIucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImRpdlwiLHtjbGFzc05hbWU6dGhpcy5idWlsZFdyYXBwZXJDU1NDbGFzcygpfSx7fSl9LHQuYnVpbGRXcmFwcGVyQ1NTQ2xhc3M9ZnVuY3Rpb24oKXt2YXIgZT1cInZqcy1tZW51LWJ1dHRvblwiO3JldHVybiEwPT09dGhpcy5vcHRpb25zXy5pbmxpbmU/ZSs9XCItaW5saW5lXCI6ZSs9XCItcG9wdXBcIixcInZqcy1tZW51LWJ1dHRvbiBcIitlK1wiIFwiK0NpLnByb3RvdHlwZS5idWlsZENTU0NsYXNzKCkrXCIgXCIrci5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpfSx0LmJ1aWxkQ1NTQ2xhc3M9ZnVuY3Rpb24oKXt2YXIgZT1cInZqcy1tZW51LWJ1dHRvblwiO3JldHVybiEwPT09dGhpcy5vcHRpb25zXy5pbmxpbmU/ZSs9XCItaW5saW5lXCI6ZSs9XCItcG9wdXBcIixcInZqcy1tZW51LWJ1dHRvbiBcIitlK1wiIFwiK3IucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sdC5jb250cm9sVGV4dD1mdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10JiYodD10aGlzLm1lbnVCdXR0b25fLmVsKCkpLHRoaXMubWVudUJ1dHRvbl8uY29udHJvbFRleHQoZSx0KX0sdC5oYW5kbGVDbGljaz1mdW5jdGlvbihlKXt0aGlzLmJ1dHRvblByZXNzZWRfP3RoaXMudW5wcmVzc0J1dHRvbigpOnRoaXMucHJlc3NCdXR0b24oKX0sdC5mb2N1cz1mdW5jdGlvbigpe3RoaXMubWVudUJ1dHRvbl8uZm9jdXMoKX0sdC5ibHVyPWZ1bmN0aW9uKCl7dGhpcy5tZW51QnV0dG9uXy5ibHVyKCl9LHQuaGFuZGxlRm9jdXM9ZnVuY3Rpb24oKXtoZShkLFwia2V5ZG93blwiLENlKHRoaXMsdGhpcy5oYW5kbGVLZXlQcmVzcykpfSx0LmhhbmRsZUJsdXI9ZnVuY3Rpb24oKXtkZShkLFwia2V5ZG93blwiLENlKHRoaXMsdGhpcy5oYW5kbGVLZXlQcmVzcykpfSx0LmhhbmRsZUtleVByZXNzPWZ1bmN0aW9uKGUpe1B0LmlzRXZlbnRLZXkoZSxcIkVzY1wiKXx8UHQuaXNFdmVudEtleShlLFwiVGFiXCIpPyh0aGlzLmJ1dHRvblByZXNzZWRfJiZ0aGlzLnVucHJlc3NCdXR0b24oKSxQdC5pc0V2ZW50S2V5KGUsXCJUYWJcIil8fChlLnByZXZlbnREZWZhdWx0KCksdGhpcy5tZW51QnV0dG9uXy5mb2N1cygpKSk6KFB0LmlzRXZlbnRLZXkoZSxcIlVwXCIpfHxQdC5pc0V2ZW50S2V5KGUsXCJEb3duXCIpKSYmKHRoaXMuYnV0dG9uUHJlc3NlZF98fChlLnByZXZlbnREZWZhdWx0KCksdGhpcy5wcmVzc0J1dHRvbigpKSl9LHQuaGFuZGxlU3VibWVudUtleVByZXNzPWZ1bmN0aW9uKGUpeyhQdC5pc0V2ZW50S2V5KGUsXCJFc2NcIil8fFB0LmlzRXZlbnRLZXkoZSxcIlRhYlwiKSkmJih0aGlzLmJ1dHRvblByZXNzZWRfJiZ0aGlzLnVucHJlc3NCdXR0b24oKSxQdC5pc0V2ZW50S2V5KGUsXCJUYWJcIil8fChlLnByZXZlbnREZWZhdWx0KCksdGhpcy5tZW51QnV0dG9uXy5mb2N1cygpKSl9LHQucHJlc3NCdXR0b249ZnVuY3Rpb24oKXtpZih0aGlzLmVuYWJsZWRfKXtpZih0aGlzLmJ1dHRvblByZXNzZWRfPSEwLHRoaXMubWVudS5zaG93KCksdGhpcy5tZW51LmxvY2tTaG93aW5nKCksdGhpcy5tZW51QnV0dG9uXy5lbF8uc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLFwidHJ1ZVwiKSxHZSYmdygpKXJldHVybjt0aGlzLm1lbnUuZm9jdXMoKX19LHQudW5wcmVzc0J1dHRvbj1mdW5jdGlvbigpe3RoaXMuZW5hYmxlZF8mJih0aGlzLmJ1dHRvblByZXNzZWRfPSExLHRoaXMubWVudS51bmxvY2tTaG93aW5nKCksdGhpcy5tZW51LmhpZGUoKSx0aGlzLm1lbnVCdXR0b25fLmVsXy5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsXCJmYWxzZVwiKSl9LHQuZGlzYWJsZT1mdW5jdGlvbigpe3RoaXMudW5wcmVzc0J1dHRvbigpLHRoaXMuZW5hYmxlZF89ITEsdGhpcy5hZGRDbGFzcyhcInZqcy1kaXNhYmxlZFwiKSx0aGlzLm1lbnVCdXR0b25fLmRpc2FibGUoKX0sdC5lbmFibGU9ZnVuY3Rpb24oKXt0aGlzLmVuYWJsZWRfPSEwLHRoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtZGlzYWJsZWRcIiksdGhpcy5tZW51QnV0dG9uXy5lbmFibGUoKX0sZX0oRmUpO0ZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiTWVudUJ1dHRvblwiLFFpKTt2YXIgSmk9ZnVuY3Rpb24ocyl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuLGk9dC50cmFja3M7aWYoKG49cy5jYWxsKHRoaXMsZSx0KXx8dGhpcykuaXRlbXMubGVuZ3RoPD0xJiZuLmhpZGUoKSwhaSlyZXR1cm4gdihuKTt2YXIgcj1DZSh2KHYobikpLG4udXBkYXRlKTtyZXR1cm4gaS5hZGRFdmVudExpc3RlbmVyKFwicmVtb3ZldHJhY2tcIixyKSxpLmFkZEV2ZW50TGlzdGVuZXIoXCJhZGR0cmFja1wiLHIpLG4ucGxheWVyXy5vbihcInJlYWR5XCIsciksbi5wbGF5ZXJfLm9uKFwiZGlzcG9zZVwiLGZ1bmN0aW9uKCl7aS5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVtb3ZldHJhY2tcIixyKSxpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhZGR0cmFja1wiLHIpfSksbn1yZXR1cm4gZihlLHMpLGV9KFFpKTtGZS5yZWdpc3RlckNvbXBvbmVudChcIlRyYWNrQnV0dG9uXCIsSmkpO3ZhciBaaT1bXCJUYWJcIixcIkVzY1wiLFwiVXBcIixcIkRvd25cIixcIlJpZ2h0XCIsXCJMZWZ0XCJdLGVyPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbjtyZXR1cm4obj1pLmNhbGwodGhpcyxlLHQpfHx0aGlzKS5zZWxlY3RhYmxlPXQuc2VsZWN0YWJsZSxuLmlzU2VsZWN0ZWRfPXQuc2VsZWN0ZWR8fCExLG4ubXVsdGlTZWxlY3RhYmxlPXQubXVsdGlTZWxlY3RhYmxlLG4uc2VsZWN0ZWQobi5pc1NlbGVjdGVkXyksbi5zZWxlY3RhYmxlP24ubXVsdGlTZWxlY3RhYmxlP24uZWxfLnNldEF0dHJpYnV0ZShcInJvbGVcIixcIm1lbnVpdGVtY2hlY2tib3hcIik6bi5lbF8uc2V0QXR0cmlidXRlKFwicm9sZVwiLFwibWVudWl0ZW1yYWRpb1wiKTpuLmVsXy5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsXCJtZW51aXRlbVwiKSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jcmVhdGVFbD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHRoaXMubm9uSWNvbkNvbnRyb2w9ITAsaS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwibGlcIixfKHtjbGFzc05hbWU6XCJ2anMtbWVudS1pdGVtXCIsaW5uZXJIVE1MOic8c3BhbiBjbGFzcz1cInZqcy1tZW51LWl0ZW0tdGV4dFwiPicrdGhpcy5sb2NhbGl6ZSh0aGlzLm9wdGlvbnNfLmxhYmVsKStcIjwvc3Bhbj5cIix0YWJJbmRleDotMX0sdCksbil9LHQuaGFuZGxlS2V5UHJlc3M9ZnVuY3Rpb24odCl7Wmkuc29tZShmdW5jdGlvbihlKXtyZXR1cm4gUHQuaXNFdmVudEtleSh0LGUpfSl8fGkucHJvdG90eXBlLmhhbmRsZUtleVByZXNzLmNhbGwodGhpcyx0KX0sdC5oYW5kbGVDbGljaz1mdW5jdGlvbihlKXt0aGlzLnNlbGVjdGVkKCEwKX0sdC5zZWxlY3RlZD1mdW5jdGlvbihlKXt0aGlzLnNlbGVjdGFibGUmJih0aGlzLmlzU2VsZWN0ZWRfPWU/KHRoaXMuYWRkQ2xhc3MoXCJ2anMtc2VsZWN0ZWRcIiksdGhpcy5lbF8uc2V0QXR0cmlidXRlKFwiYXJpYS1jaGVja2VkXCIsXCJ0cnVlXCIpLHRoaXMuY29udHJvbFRleHQoXCIsIHNlbGVjdGVkXCIpLCEwKToodGhpcy5yZW1vdmVDbGFzcyhcInZqcy1zZWxlY3RlZFwiKSx0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoXCJhcmlhLWNoZWNrZWRcIixcImZhbHNlXCIpLHRoaXMuY29udHJvbFRleHQoXCJcIiksITEpKX0sZX0odmkpO0ZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiTWVudUl0ZW1cIixlcik7dmFyIHRyPWZ1bmN0aW9uKGwpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgaSxuPXQudHJhY2sscj1lLnRleHRUcmFja3MoKTt0LmxhYmVsPW4ubGFiZWx8fG4ubGFuZ3VhZ2V8fFwiVW5rbm93blwiLHQuc2VsZWN0ZWQ9XCJzaG93aW5nXCI9PT1uLm1vZGUsKGk9bC5jYWxsKHRoaXMsZSx0KXx8dGhpcykudHJhY2s9bjt2YXIgcyxvPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSksbj0wO248ZTtuKyspdFtuXT1hcmd1bWVudHNbbl07aS5oYW5kbGVUcmFja3NDaGFuZ2UuYXBwbHkodih2KGkpKSx0KX0sYT1mdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLG49MDtuPGU7bisrKXRbbl09YXJndW1lbnRzW25dO2kuaGFuZGxlU2VsZWN0ZWRMYW5ndWFnZUNoYW5nZS5hcHBseSh2KHYoaSkpLHQpfTsoZS5vbihbXCJsb2Fkc3RhcnRcIixcInRleHR0cmFja2NoYW5nZVwiXSxvKSxyLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIixvKSxyLmFkZEV2ZW50TGlzdGVuZXIoXCJzZWxlY3RlZGxhbmd1YWdlY2hhbmdlXCIsYSksaS5vbihcImRpc3Bvc2VcIixmdW5jdGlvbigpe2Uub2ZmKFtcImxvYWRzdGFydFwiLFwidGV4dHRyYWNrY2hhbmdlXCJdLG8pLHIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLG8pLHIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNlbGVjdGVkbGFuZ3VhZ2VjaGFuZ2VcIixhKX0pLHZvaWQgMD09PXIub25jaGFuZ2UpJiZpLm9uKFtcInRhcFwiLFwiY2xpY2tcIl0sZnVuY3Rpb24oKXtpZihcIm9iamVjdFwiIT10eXBlb2YgaC5FdmVudCl0cnl7cz1uZXcgaC5FdmVudChcImNoYW5nZVwiKX1jYXRjaChlKXt9c3x8KHM9ZC5jcmVhdGVFdmVudChcIkV2ZW50XCIpKS5pbml0RXZlbnQoXCJjaGFuZ2VcIiwhMCwhMCksci5kaXNwYXRjaEV2ZW50KHMpfSk7cmV0dXJuIGkuaGFuZGxlVHJhY2tzQ2hhbmdlKCksaX1mKGUsbCk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy50cmFjayxuPXRoaXMucGxheWVyXy50ZXh0VHJhY2tzKCk7aWYobC5wcm90b3R5cGUuaGFuZGxlQ2xpY2suY2FsbCh0aGlzLGUpLG4pZm9yKHZhciBpPSh0LmtpbmRzfHxbdC5raW5kXSkuZmlsdGVyKEJvb2xlYW4pLHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIHM9bltyXTstMSE9PWkuaW5kZXhPZihzLmtpbmQpJiYocz09PXQ/XCJzaG93aW5nXCIhPT1zLm1vZGUmJihzLm1vZGU9XCJzaG93aW5nXCIpOlwiZGlzYWJsZWRcIiE9PXMubW9kZSYmKHMubW9kZT1cImRpc2FibGVkXCIpKX19LHQuaGFuZGxlVHJhY2tzQ2hhbmdlPWZ1bmN0aW9uKGUpe3ZhciB0PVwic2hvd2luZ1wiPT09dGhpcy50cmFjay5tb2RlO3QhPT10aGlzLmlzU2VsZWN0ZWRfJiZ0aGlzLnNlbGVjdGVkKHQpfSx0LmhhbmRsZVNlbGVjdGVkTGFuZ3VhZ2VDaGFuZ2U9ZnVuY3Rpb24oZSl7aWYoXCJzaG93aW5nXCI9PT10aGlzLnRyYWNrLm1vZGUpe3ZhciB0PXRoaXMucGxheWVyXy5jYWNoZV8uc2VsZWN0ZWRMYW5ndWFnZTtpZih0JiZ0LmVuYWJsZWQmJnQubGFuZ3VhZ2U9PT10aGlzLnRyYWNrLmxhbmd1YWdlJiZ0LmtpbmQhPT10aGlzLnRyYWNrLmtpbmQpcmV0dXJuO3RoaXMucGxheWVyXy5jYWNoZV8uc2VsZWN0ZWRMYW5ndWFnZT17ZW5hYmxlZDohMCxsYW5ndWFnZTp0aGlzLnRyYWNrLmxhbmd1YWdlLGtpbmQ6dGhpcy50cmFjay5raW5kfX19LHQuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMudHJhY2s9bnVsbCxsLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyl9LGV9KGVyKTtGZS5yZWdpc3RlckNvbXBvbmVudChcIlRleHRUcmFja01lbnVJdGVtXCIsdHIpO3ZhciBucj1mdW5jdGlvbihuKXtmdW5jdGlvbiBlKGUsdCl7cmV0dXJuIHQudHJhY2s9e3BsYXllcjplLGtpbmQ6dC5raW5kLGtpbmRzOnQua2luZHMsZGVmYXVsdDohMSxtb2RlOlwiZGlzYWJsZWRcIn0sdC5raW5kc3x8KHQua2luZHM9W3Qua2luZF0pLHQubGFiZWw/dC50cmFjay5sYWJlbD10LmxhYmVsOnQudHJhY2subGFiZWw9dC5raW5kcy5qb2luKFwiIGFuZCBcIikrXCIgb2ZmXCIsdC5zZWxlY3RhYmxlPSEwLHQubXVsdGlTZWxlY3RhYmxlPSExLG4uY2FsbCh0aGlzLGUsdCl8fHRoaXN9ZihlLG4pO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmhhbmRsZVRyYWNrc0NoYW5nZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy5wbGF5ZXIoKS50ZXh0VHJhY2tzKCksbj0hMCxpPTAscj10Lmxlbmd0aDtpPHI7aSsrKXt2YXIgcz10W2ldO2lmKC0xPHRoaXMub3B0aW9uc18ua2luZHMuaW5kZXhPZihzLmtpbmQpJiZcInNob3dpbmdcIj09PXMubW9kZSl7bj0hMTticmVha319biE9PXRoaXMuaXNTZWxlY3RlZF8mJnRoaXMuc2VsZWN0ZWQobil9LHQuaGFuZGxlU2VsZWN0ZWRMYW5ndWFnZUNoYW5nZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy5wbGF5ZXIoKS50ZXh0VHJhY2tzKCksbj0hMCxpPTAscj10Lmxlbmd0aDtpPHI7aSsrKXt2YXIgcz10W2ldO2lmKC0xPFtcImNhcHRpb25zXCIsXCJkZXNjcmlwdGlvbnNcIixcInN1YnRpdGxlc1wiXS5pbmRleE9mKHMua2luZCkmJlwic2hvd2luZ1wiPT09cy5tb2RlKXtuPSExO2JyZWFrfX1uJiYodGhpcy5wbGF5ZXJfLmNhY2hlXy5zZWxlY3RlZExhbmd1YWdlPXtlbmFibGVkOiExfSl9LGV9KHRyKTtGZS5yZWdpc3RlckNvbXBvbmVudChcIk9mZlRleHRUcmFja01lbnVJdGVtXCIsbnIpO3ZhciBpcj1mdW5jdGlvbihuKXtmdW5jdGlvbiBlKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PXt9KSx0LnRyYWNrcz1lLnRleHRUcmFja3MoKSxuLmNhbGwodGhpcyxlLHQpfHx0aGlzfXJldHVybiBmKGUsbiksZS5wcm90b3R5cGUuY3JlYXRlSXRlbXM9ZnVuY3Rpb24oZSx0KXt2YXIgbjt2b2lkIDA9PT1lJiYoZT1bXSksdm9pZCAwPT09dCYmKHQ9dHIpLHRoaXMubGFiZWxfJiYobj10aGlzLmxhYmVsXytcIiBvZmZcIiksZS5wdXNoKG5ldyBucih0aGlzLnBsYXllcl8se2tpbmRzOnRoaXMua2luZHNfLGtpbmQ6dGhpcy5raW5kXyxsYWJlbDpufSkpLHRoaXMuaGlkZVRocmVzaG9sZF8rPTE7dmFyIGk9dGhpcy5wbGF5ZXJfLnRleHRUcmFja3MoKTtBcnJheS5pc0FycmF5KHRoaXMua2luZHNfKXx8KHRoaXMua2luZHNfPVt0aGlzLmtpbmRfXSk7Zm9yKHZhciByPTA7cjxpLmxlbmd0aDtyKyspe3ZhciBzPWlbcl07aWYoLTE8dGhpcy5raW5kc18uaW5kZXhPZihzLmtpbmQpKXt2YXIgbz1uZXcgdCh0aGlzLnBsYXllcl8se3RyYWNrOnMsc2VsZWN0YWJsZTohMCxtdWx0aVNlbGVjdGFibGU6ITF9KTtvLmFkZENsYXNzKFwidmpzLVwiK3Mua2luZCtcIi1tZW51LWl0ZW1cIiksZS5wdXNoKG8pfX1yZXR1cm4gZX0sZX0oSmkpO0ZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiVGV4dFRyYWNrQnV0dG9uXCIsaXIpO3ZhciBycj1mdW5jdGlvbihvKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG4saT10LnRyYWNrLHI9dC5jdWUscz1lLmN1cnJlbnRUaW1lKCk7cmV0dXJuIHQuc2VsZWN0YWJsZT0hMCx0Lm11bHRpU2VsZWN0YWJsZT0hMSx0LmxhYmVsPXIudGV4dCx0LnNlbGVjdGVkPXIuc3RhcnRUaW1lPD1zJiZzPHIuZW5kVGltZSwobj1vLmNhbGwodGhpcyxlLHQpfHx0aGlzKS50cmFjaz1pLG4uY3VlPXIsaS5hZGRFdmVudExpc3RlbmVyKFwiY3VlY2hhbmdlXCIsQ2Uodih2KG4pKSxuLnVwZGF0ZSkpLG59ZihlLG8pO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmhhbmRsZUNsaWNrPWZ1bmN0aW9uKGUpe28ucHJvdG90eXBlLmhhbmRsZUNsaWNrLmNhbGwodGhpcyksdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMuY3VlLnN0YXJ0VGltZSksdGhpcy51cGRhdGUodGhpcy5jdWUuc3RhcnRUaW1lKX0sdC51cGRhdGU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5jdWUsbj10aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKTt0aGlzLnNlbGVjdGVkKHQuc3RhcnRUaW1lPD1uJiZuPHQuZW5kVGltZSl9LGV9KGVyKTtGZS5yZWdpc3RlckNvbXBvbmVudChcIkNoYXB0ZXJzVHJhY2tNZW51SXRlbVwiLHJyKTt2YXIgc3I9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQsbil7cmV0dXJuIGkuY2FsbCh0aGlzLGUsdCxuKXx8dGhpc31mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLWNoYXB0ZXJzLWJ1dHRvbiBcIitpLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyl9LHQuYnVpbGRXcmFwcGVyQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1jaGFwdGVycy1idXR0b24gXCIraS5wcm90b3R5cGUuYnVpbGRXcmFwcGVyQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sdC51cGRhdGU9ZnVuY3Rpb24oZSl7dGhpcy50cmFja18mJighZXx8XCJhZGR0cmFja1wiIT09ZS50eXBlJiZcInJlbW92ZXRyYWNrXCIhPT1lLnR5cGUpfHx0aGlzLnNldFRyYWNrKHRoaXMuZmluZENoYXB0ZXJzVHJhY2soKSksaS5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcyl9LHQuc2V0VHJhY2s9ZnVuY3Rpb24oZSl7aWYodGhpcy50cmFja18hPT1lKXtpZih0aGlzLnVwZGF0ZUhhbmRsZXJffHwodGhpcy51cGRhdGVIYW5kbGVyXz10aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKSx0aGlzLnRyYWNrXyl7dmFyIHQ9dGhpcy5wbGF5ZXJfLnJlbW90ZVRleHRUcmFja0VscygpLmdldFRyYWNrRWxlbWVudEJ5VHJhY2tfKHRoaXMudHJhY2tfKTt0JiZ0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsdGhpcy51cGRhdGVIYW5kbGVyXyksdGhpcy50cmFja189bnVsbH1pZih0aGlzLnRyYWNrXz1lLHRoaXMudHJhY2tfKXt0aGlzLnRyYWNrXy5tb2RlPVwiaGlkZGVuXCI7dmFyIG49dGhpcy5wbGF5ZXJfLnJlbW90ZVRleHRUcmFja0VscygpLmdldFRyYWNrRWxlbWVudEJ5VHJhY2tfKHRoaXMudHJhY2tfKTtuJiZuLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsdGhpcy51cGRhdGVIYW5kbGVyXyl9fX0sdC5maW5kQ2hhcHRlcnNUcmFjaz1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLnBsYXllcl8udGV4dFRyYWNrcygpfHxbXSx0PWUubGVuZ3RoLTE7MDw9dDt0LS0pe3ZhciBuPWVbdF07aWYobi5raW5kPT09dGhpcy5raW5kXylyZXR1cm4gbn19LHQuZ2V0TWVudUNhcHRpb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50cmFja18mJnRoaXMudHJhY2tfLmxhYmVsP3RoaXMudHJhY2tfLmxhYmVsOnRoaXMubG9jYWxpemUoUmUodGhpcy5raW5kXykpfSx0LmNyZWF0ZU1lbnU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vcHRpb25zXy50aXRsZT10aGlzLmdldE1lbnVDYXB0aW9uKCksaS5wcm90b3R5cGUuY3JlYXRlTWVudS5jYWxsKHRoaXMpfSx0LmNyZWF0ZUl0ZW1zPWZ1bmN0aW9uKCl7dmFyIGU9W107aWYoIXRoaXMudHJhY2tfKXJldHVybiBlO3ZhciB0PXRoaXMudHJhY2tfLmN1ZXM7aWYoIXQpcmV0dXJuIGU7Zm9yKHZhciBuPTAsaT10Lmxlbmd0aDtuPGk7bisrKXt2YXIgcj10W25dLHM9bmV3IHJyKHRoaXMucGxheWVyXyx7dHJhY2s6dGhpcy50cmFja18sY3VlOnJ9KTtlLnB1c2gocyl9cmV0dXJuIGV9LGV9KGlyKTtzci5wcm90b3R5cGUua2luZF89XCJjaGFwdGVyc1wiLHNyLnByb3RvdHlwZS5jb250cm9sVGV4dF89XCJDaGFwdGVyc1wiLEZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiQ2hhcHRlcnNCdXR0b25cIixzcik7dmFyIG9yPWZ1bmN0aW9uKG8pe2Z1bmN0aW9uIGUoZSx0LG4pe3ZhciBpO2k9by5jYWxsKHRoaXMsZSx0LG4pfHx0aGlzO3ZhciByPWUudGV4dFRyYWNrcygpLHM9Q2Uodih2KGkpKSxpLmhhbmRsZVRyYWNrc0NoYW5nZSk7cmV0dXJuIHIuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLHMpLGkub24oXCJkaXNwb3NlXCIsZnVuY3Rpb24oKXtyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIixzKX0pLGl9ZihlLG8pO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmhhbmRsZVRyYWNrc0NoYW5nZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy5wbGF5ZXIoKS50ZXh0VHJhY2tzKCksbj0hMSxpPTAscj10Lmxlbmd0aDtpPHI7aSsrKXt2YXIgcz10W2ldO2lmKHMua2luZCE9PXRoaXMua2luZF8mJlwic2hvd2luZ1wiPT09cy5tb2RlKXtuPSEwO2JyZWFrfX1uP3RoaXMuZGlzYWJsZSgpOnRoaXMuZW5hYmxlKCl9LHQuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLWRlc2NyaXB0aW9ucy1idXR0b24gXCIrby5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpfSx0LmJ1aWxkV3JhcHBlckNTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtZGVzY3JpcHRpb25zLWJ1dHRvbiBcIitvLnByb3RvdHlwZS5idWlsZFdyYXBwZXJDU1NDbGFzcy5jYWxsKHRoaXMpfSxlfShpcik7b3IucHJvdG90eXBlLmtpbmRfPVwiZGVzY3JpcHRpb25zXCIsb3IucHJvdG90eXBlLmNvbnRyb2xUZXh0Xz1cIkRlc2NyaXB0aW9uc1wiLEZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiRGVzY3JpcHRpb25zQnV0dG9uXCIsb3IpO3ZhciBhcj1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCxuKXtyZXR1cm4gaS5jYWxsKHRoaXMsZSx0LG4pfHx0aGlzfWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtc3VidGl0bGVzLWJ1dHRvbiBcIitpLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyl9LHQuYnVpbGRXcmFwcGVyQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1zdWJ0aXRsZXMtYnV0dG9uIFwiK2kucHJvdG90eXBlLmJ1aWxkV3JhcHBlckNTU0NsYXNzLmNhbGwodGhpcyl9LGV9KGlyKTthci5wcm90b3R5cGUua2luZF89XCJzdWJ0aXRsZXNcIixhci5wcm90b3R5cGUuY29udHJvbFRleHRfPVwiU3VidGl0bGVzXCIsRmUucmVnaXN0ZXJDb21wb25lbnQoXCJTdWJ0aXRsZXNCdXR0b25cIixhcik7dmFyIGxyPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbjtyZXR1cm4gdC50cmFjaz17cGxheWVyOmUsa2luZDp0LmtpbmQsbGFiZWw6dC5raW5kK1wiIHNldHRpbmdzXCIsc2VsZWN0YWJsZTohMSxkZWZhdWx0OiExLG1vZGU6XCJkaXNhYmxlZFwifSx0LnNlbGVjdGFibGU9ITEsdC5uYW1lPVwiQ2FwdGlvblNldHRpbmdzTWVudUl0ZW1cIiwobj1pLmNhbGwodGhpcyxlLHQpfHx0aGlzKS5hZGRDbGFzcyhcInZqcy10ZXh0dHJhY2stc2V0dGluZ3NcIiksbi5jb250cm9sVGV4dChcIiwgb3BlbnMgXCIrdC5raW5kK1wiIHNldHRpbmdzIGRpYWxvZ1wiKSxufXJldHVybiBmKGUsaSksZS5wcm90b3R5cGUuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZSl7dGhpcy5wbGF5ZXIoKS5nZXRDaGlsZChcInRleHRUcmFja1NldHRpbmdzXCIpLm9wZW4oKX0sZX0odHIpO0ZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiQ2FwdGlvblNldHRpbmdzTWVudUl0ZW1cIixscik7dmFyIGNyPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0LG4pe3JldHVybiBpLmNhbGwodGhpcyxlLHQsbil8fHRoaXN9ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmJ1aWxkQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1jYXB0aW9ucy1idXR0b24gXCIraS5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpfSx0LmJ1aWxkV3JhcHBlckNTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtY2FwdGlvbnMtYnV0dG9uIFwiK2kucHJvdG90eXBlLmJ1aWxkV3JhcHBlckNTU0NsYXNzLmNhbGwodGhpcyl9LHQuY3JlYXRlSXRlbXM9ZnVuY3Rpb24oKXt2YXIgZT1bXTtyZXR1cm4gdGhpcy5wbGF5ZXIoKS50ZWNoXyYmdGhpcy5wbGF5ZXIoKS50ZWNoXy5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3N8fCF0aGlzLnBsYXllcigpLmdldENoaWxkKFwidGV4dFRyYWNrU2V0dGluZ3NcIil8fChlLnB1c2gobmV3IGxyKHRoaXMucGxheWVyXyx7a2luZDp0aGlzLmtpbmRffSkpLHRoaXMuaGlkZVRocmVzaG9sZF8rPTEpLGkucHJvdG90eXBlLmNyZWF0ZUl0ZW1zLmNhbGwodGhpcyxlKX0sZX0oaXIpO2NyLnByb3RvdHlwZS5raW5kXz1cImNhcHRpb25zXCIsY3IucHJvdG90eXBlLmNvbnRyb2xUZXh0Xz1cIkNhcHRpb25zXCIsRmUucmVnaXN0ZXJDb21wb25lbnQoXCJDYXB0aW9uc0J1dHRvblwiLGNyKTt2YXIgdXI9ZnVuY3Rpb24ocil7ZnVuY3Rpb24gZSgpe3JldHVybiByLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4gZihlLHIpLGUucHJvdG90eXBlLmNyZWF0ZUVsPWZ1bmN0aW9uKGUsdCxuKXt2YXIgaT0nPHNwYW4gY2xhc3M9XCJ2anMtbWVudS1pdGVtLXRleHRcIj4nK3RoaXMubG9jYWxpemUodGhpcy5vcHRpb25zXy5sYWJlbCk7cmV0dXJuXCJjYXB0aW9uc1wiPT09dGhpcy5vcHRpb25zXy50cmFjay5raW5kJiYoaSs9J1xcbiAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCIgY2xhc3M9XCJ2anMtaWNvbi1wbGFjZWhvbGRlclwiPjwvc3Bhbj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPiAnK3RoaXMubG9jYWxpemUoXCJDYXB0aW9uc1wiKStcIjwvc3Bhbj5cXG4gICAgICBcIiksaSs9XCI8L3NwYW4+XCIsci5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLGUsXyh7aW5uZXJIVE1MOml9LHQpLG4pfSxlfSh0cik7RmUucmVnaXN0ZXJDb21wb25lbnQoXCJTdWJzQ2Fwc01lbnVJdGVtXCIsdXIpO3ZhciBocj1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuIHZvaWQgMD09PXQmJih0PXt9KSwobj1pLmNhbGwodGhpcyxlLHQpfHx0aGlzKS5sYWJlbF89XCJzdWJ0aXRsZXNcIiwtMTxbXCJlblwiLFwiZW4tdXNcIixcImVuLWNhXCIsXCJmci1jYVwiXS5pbmRleE9mKG4ucGxheWVyXy5sYW5ndWFnZV8pJiYobi5sYWJlbF89XCJjYXB0aW9uc1wiKSxuLm1lbnVCdXR0b25fLmNvbnRyb2xUZXh0KFJlKG4ubGFiZWxfKSksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLXN1YnMtY2Fwcy1idXR0b24gXCIraS5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpfSx0LmJ1aWxkV3JhcHBlckNTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtc3Vicy1jYXBzLWJ1dHRvbiBcIitpLnByb3RvdHlwZS5idWlsZFdyYXBwZXJDU1NDbGFzcy5jYWxsKHRoaXMpfSx0LmNyZWF0ZUl0ZW1zPWZ1bmN0aW9uKCl7dmFyIGU9W107cmV0dXJuIHRoaXMucGxheWVyKCkudGVjaF8mJnRoaXMucGxheWVyKCkudGVjaF8uZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzfHwhdGhpcy5wbGF5ZXIoKS5nZXRDaGlsZChcInRleHRUcmFja1NldHRpbmdzXCIpfHwoZS5wdXNoKG5ldyBscih0aGlzLnBsYXllcl8se2tpbmQ6dGhpcy5sYWJlbF99KSksdGhpcy5oaWRlVGhyZXNob2xkXys9MSksZT1pLnByb3RvdHlwZS5jcmVhdGVJdGVtcy5jYWxsKHRoaXMsZSx1cil9LGV9KGlyKTtoci5wcm90b3R5cGUua2luZHNfPVtcImNhcHRpb25zXCIsXCJzdWJ0aXRsZXNcIl0saHIucHJvdG90eXBlLmNvbnRyb2xUZXh0Xz1cIlN1YnRpdGxlc1wiLEZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiU3Vic0NhcHNCdXR0b25cIixocik7dmFyIGRyPWZ1bmN0aW9uKG8pe2Z1bmN0aW9uIGUoZSx0KXt2YXIgaSxuPXQudHJhY2sscj1lLmF1ZGlvVHJhY2tzKCk7dC5sYWJlbD1uLmxhYmVsfHxuLmxhbmd1YWdlfHxcIlVua25vd25cIix0LnNlbGVjdGVkPW4uZW5hYmxlZCwoaT1vLmNhbGwodGhpcyxlLHQpfHx0aGlzKS50cmFjaz1uLGkuYWRkQ2xhc3MoXCJ2anMtXCIrbi5raW5kK1wiLW1lbnUtaXRlbVwiKTt2YXIgcz1mdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLG49MDtuPGU7bisrKXRbbl09YXJndW1lbnRzW25dO2kuaGFuZGxlVHJhY2tzQ2hhbmdlLmFwcGx5KHYodihpKSksdCl9O3JldHVybiByLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIixzKSxpLm9uKFwiZGlzcG9zZVwiLGZ1bmN0aW9uKCl7ci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIscyl9KSxpfWYoZSxvKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jcmVhdGVFbD1mdW5jdGlvbihlLHQsbil7dmFyIGk9JzxzcGFuIGNsYXNzPVwidmpzLW1lbnUtaXRlbS10ZXh0XCI+Jyt0aGlzLmxvY2FsaXplKHRoaXMub3B0aW9uc18ubGFiZWwpO3JldHVyblwibWFpbi1kZXNjXCI9PT10aGlzLm9wdGlvbnNfLnRyYWNrLmtpbmQmJihpKz0nXFxuICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIiBjbGFzcz1cInZqcy1pY29uLXBsYWNlaG9sZGVyXCI+PC9zcGFuPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJ2anMtY29udHJvbC10ZXh0XCI+ICcrdGhpcy5sb2NhbGl6ZShcIkRlc2NyaXB0aW9uc1wiKStcIjwvc3Bhbj5cXG4gICAgICBcIiksaSs9XCI8L3NwYW4+XCIsby5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLGUsXyh7aW5uZXJIVE1MOml9LHQpLG4pfSx0LmhhbmRsZUNsaWNrPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMucGxheWVyXy5hdWRpb1RyYWNrcygpO28ucHJvdG90eXBlLmhhbmRsZUNsaWNrLmNhbGwodGhpcyxlKTtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIGk9dFtuXTtpLmVuYWJsZWQ9aT09PXRoaXMudHJhY2t9fSx0LmhhbmRsZVRyYWNrc0NoYW5nZT1mdW5jdGlvbihlKXt0aGlzLnNlbGVjdGVkKHRoaXMudHJhY2suZW5hYmxlZCl9LGV9KGVyKTtGZS5yZWdpc3RlckNvbXBvbmVudChcIkF1ZGlvVHJhY2tNZW51SXRlbVwiLGRyKTt2YXIgcHI9ZnVuY3Rpb24obil7ZnVuY3Rpb24gZShlLHQpe3JldHVybiB2b2lkIDA9PT10JiYodD17fSksdC50cmFja3M9ZS5hdWRpb1RyYWNrcygpLG4uY2FsbCh0aGlzLGUsdCl8fHRoaXN9ZihlLG4pO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmJ1aWxkQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1hdWRpby1idXR0b24gXCIrbi5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpfSx0LmJ1aWxkV3JhcHBlckNTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtYXVkaW8tYnV0dG9uIFwiK24ucHJvdG90eXBlLmJ1aWxkV3JhcHBlckNTU0NsYXNzLmNhbGwodGhpcyl9LHQuY3JlYXRlSXRlbXM9ZnVuY3Rpb24oZSl7dm9pZCAwPT09ZSYmKGU9W10pLHRoaXMuaGlkZVRocmVzaG9sZF89MTtmb3IodmFyIHQ9dGhpcy5wbGF5ZXJfLmF1ZGlvVHJhY2tzKCksbj0wO248dC5sZW5ndGg7bisrKXt2YXIgaT10W25dO2UucHVzaChuZXcgZHIodGhpcy5wbGF5ZXJfLHt0cmFjazppLHNlbGVjdGFibGU6ITAsbXVsdGlTZWxlY3RhYmxlOiExfSkpfXJldHVybiBlfSxlfShKaSk7cHIucHJvdG90eXBlLmNvbnRyb2xUZXh0Xz1cIkF1ZGlvIFRyYWNrXCIsRmUucmVnaXN0ZXJDb21wb25lbnQoXCJBdWRpb1RyYWNrQnV0dG9uXCIscHIpO3ZhciBmcj1mdW5jdGlvbihzKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG4saT10LnJhdGUscj1wYXJzZUZsb2F0KGksMTApO3JldHVybiB0LmxhYmVsPWksdC5zZWxlY3RlZD0xPT09cix0LnNlbGVjdGFibGU9ITAsdC5tdWx0aVNlbGVjdGFibGU9ITEsKG49cy5jYWxsKHRoaXMsZSx0KXx8dGhpcykubGFiZWw9aSxuLnJhdGU9cixuLm9uKGUsXCJyYXRlY2hhbmdlXCIsbi51cGRhdGUpLG59ZihlLHMpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmhhbmRsZUNsaWNrPWZ1bmN0aW9uKGUpe3MucHJvdG90eXBlLmhhbmRsZUNsaWNrLmNhbGwodGhpcyksdGhpcy5wbGF5ZXIoKS5wbGF5YmFja1JhdGUodGhpcy5yYXRlKX0sdC51cGRhdGU9ZnVuY3Rpb24oZSl7dGhpcy5zZWxlY3RlZCh0aGlzLnBsYXllcigpLnBsYXliYWNrUmF0ZSgpPT09dGhpcy5yYXRlKX0sZX0oZXIpO2ZyLnByb3RvdHlwZS5jb250ZW50RWxUeXBlPVwiYnV0dG9uXCIsRmUucmVnaXN0ZXJDb21wb25lbnQoXCJQbGF5YmFja1JhdGVNZW51SXRlbVwiLGZyKTt2YXIgdnI9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLnVwZGF0ZVZpc2liaWxpdHkoKSxuLnVwZGF0ZUxhYmVsKCksbi5vbihlLFwibG9hZHN0YXJ0XCIsbi51cGRhdGVWaXNpYmlsaXR5KSxuLm9uKGUsXCJyYXRlY2hhbmdlXCIsbi51cGRhdGVMYWJlbCksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY3JlYXRlRWw9ZnVuY3Rpb24oKXt2YXIgZT1pLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMpO3JldHVybiB0aGlzLmxhYmVsRWxfPXgoXCJkaXZcIix7Y2xhc3NOYW1lOlwidmpzLXBsYXliYWNrLXJhdGUtdmFsdWVcIixpbm5lckhUTUw6XCIxeFwifSksZS5hcHBlbmRDaGlsZCh0aGlzLmxhYmVsRWxfKSxlfSx0LmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmxhYmVsRWxfPW51bGwsaS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpfSx0LmJ1aWxkQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1wbGF5YmFjay1yYXRlIFwiK2kucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sdC5idWlsZFdyYXBwZXJDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLXBsYXliYWNrLXJhdGUgXCIraS5wcm90b3R5cGUuYnVpbGRXcmFwcGVyQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sdC5jcmVhdGVNZW51PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IEdpKHRoaXMucGxheWVyKCkpLHQ9dGhpcy5wbGF5YmFja1JhdGVzKCk7aWYodClmb3IodmFyIG49dC5sZW5ndGgtMTswPD1uO24tLSllLmFkZENoaWxkKG5ldyBmcih0aGlzLnBsYXllcigpLHtyYXRlOnRbbl0rXCJ4XCJ9KSk7cmV0dXJuIGV9LHQudXBkYXRlQVJJQUF0dHJpYnV0ZXM9ZnVuY3Rpb24oKXt0aGlzLmVsKCkuc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW5vd1wiLHRoaXMucGxheWVyKCkucGxheWJhY2tSYXRlKCkpfSx0LmhhbmRsZUNsaWNrPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLnBsYXllcigpLnBsYXliYWNrUmF0ZSgpLG49dGhpcy5wbGF5YmFja1JhdGVzKCksaT1uWzBdLHI9MDtyPG4ubGVuZ3RoO3IrKylpZihuW3JdPnQpe2k9bltyXTticmVha310aGlzLnBsYXllcigpLnBsYXliYWNrUmF0ZShpKX0sdC5wbGF5YmFja1JhdGVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3B0aW9uc18ucGxheWJhY2tSYXRlc3x8dGhpcy5vcHRpb25zXy5wbGF5ZXJPcHRpb25zJiZ0aGlzLm9wdGlvbnNfLnBsYXllck9wdGlvbnMucGxheWJhY2tSYXRlc30sdC5wbGF5YmFja1JhdGVTdXBwb3J0ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wbGF5ZXIoKS50ZWNoXyYmdGhpcy5wbGF5ZXIoKS50ZWNoXy5mZWF0dXJlc1BsYXliYWNrUmF0ZSYmdGhpcy5wbGF5YmFja1JhdGVzKCkmJjA8dGhpcy5wbGF5YmFja1JhdGVzKCkubGVuZ3RofSx0LnVwZGF0ZVZpc2liaWxpdHk9ZnVuY3Rpb24oZSl7dGhpcy5wbGF5YmFja1JhdGVTdXBwb3J0ZWQoKT90aGlzLnJlbW92ZUNsYXNzKFwidmpzLWhpZGRlblwiKTp0aGlzLmFkZENsYXNzKFwidmpzLWhpZGRlblwiKX0sdC51cGRhdGVMYWJlbD1mdW5jdGlvbihlKXt0aGlzLnBsYXliYWNrUmF0ZVN1cHBvcnRlZCgpJiYodGhpcy5sYWJlbEVsXy5pbm5lckhUTUw9dGhpcy5wbGF5ZXIoKS5wbGF5YmFja1JhdGUoKStcInhcIil9LGV9KFFpKTt2ci5wcm90b3R5cGUuY29udHJvbFRleHRfPVwiUGxheWJhY2sgUmF0ZVwiLEZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiUGxheWJhY2tSYXRlTWVudUJ1dHRvblwiLHZyKTt2YXIgZ3I9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31mKHQsZSk7dmFyIG49dC5wcm90b3R5cGU7cmV0dXJuIG4uYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLXNwYWNlciBcIitlLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyl9LG4uY3JlYXRlRWw9ZnVuY3Rpb24oKXtyZXR1cm4gZS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIse2NsYXNzTmFtZTp0aGlzLmJ1aWxkQ1NTQ2xhc3MoKX0pfSx0fShGZSk7RmUucmVnaXN0ZXJDb21wb25lbnQoXCJTcGFjZXJcIixncik7dmFyIHlyPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9ZihlLHQpO3ZhciBuPWUucHJvdG90eXBlO3JldHVybiBuLmJ1aWxkQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1jdXN0b20tY29udHJvbC1zcGFjZXIgXCIrdC5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpfSxuLmNyZWF0ZUVsPWZ1bmN0aW9uKCl7dmFyIGU9dC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLHtjbGFzc05hbWU6dGhpcy5idWlsZENTU0NsYXNzKCl9KTtyZXR1cm4gZS5pbm5lckhUTUw9XCLCoFwiLGV9LGV9KGdyKTtGZS5yZWdpc3RlckNvbXBvbmVudChcIkN1c3RvbUNvbnRyb2xTcGFjZXJcIix5cik7dmFyIG1yPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuIGYodCxlKSx0LnByb3RvdHlwZS5jcmVhdGVFbD1mdW5jdGlvbigpe3JldHVybiBlLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsXCJkaXZcIix7Y2xhc3NOYW1lOlwidmpzLWNvbnRyb2wtYmFyXCIsZGlyOlwibHRyXCJ9KX0sdH0oRmUpO21yLnByb3RvdHlwZS5vcHRpb25zXz17Y2hpbGRyZW46W1wicGxheVRvZ2dsZVwiLFwidm9sdW1lUGFuZWxcIixcImN1cnJlbnRUaW1lRGlzcGxheVwiLFwidGltZURpdmlkZXJcIixcImR1cmF0aW9uRGlzcGxheVwiLFwicHJvZ3Jlc3NDb250cm9sXCIsXCJsaXZlRGlzcGxheVwiLFwic2Vla1RvTGl2ZVwiLFwicmVtYWluaW5nVGltZURpc3BsYXlcIixcImN1c3RvbUNvbnRyb2xTcGFjZXJcIixcInBsYXliYWNrUmF0ZU1lbnVCdXR0b25cIixcImNoYXB0ZXJzQnV0dG9uXCIsXCJkZXNjcmlwdGlvbnNCdXR0b25cIixcInN1YnNDYXBzQnV0dG9uXCIsXCJhdWRpb1RyYWNrQnV0dG9uXCIsXCJmdWxsc2NyZWVuVG9nZ2xlXCJdfSxGZS5yZWdpc3RlckNvbXBvbmVudChcIkNvbnRyb2xCYXJcIixtcik7dmFyIF9yPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbjtyZXR1cm4obj1pLmNhbGwodGhpcyxlLHQpfHx0aGlzKS5vbihlLFwiZXJyb3JcIixuLm9wZW4pLG59ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmJ1aWxkQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1lcnJvci1kaXNwbGF5IFwiK2kucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sdC5jb250ZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wbGF5ZXIoKS5lcnJvcigpO3JldHVybiBlP3RoaXMubG9jYWxpemUoZS5tZXNzYWdlKTpcIlwifSxlfShNdCk7X3IucHJvdG90eXBlLm9wdGlvbnNfPUJlKE10LnByb3RvdHlwZS5vcHRpb25zXyx7cGF1c2VPbk9wZW46ITEsZmlsbEFsd2F5czohMCx0ZW1wb3Jhcnk6ITEsdW5jbG9zZWFibGU6ITB9KSxGZS5yZWdpc3RlckNvbXBvbmVudChcIkVycm9yRGlzcGxheVwiLF9yKTt2YXIgYnI9XCJ2anMtdGV4dC10cmFjay1zZXR0aW5nc1wiLFRyPVtcIiMwMDBcIixcIkJsYWNrXCJdLGtyPVtcIiMwMEZcIixcIkJsdWVcIl0sQ3I9W1wiIzBGRlwiLFwiQ3lhblwiXSxFcj1bXCIjMEYwXCIsXCJHcmVlblwiXSx3cj1bXCIjRjBGXCIsXCJNYWdlbnRhXCJdLFNyPVtcIiNGMDBcIixcIlJlZFwiXSx4cj1bXCIjRkZGXCIsXCJXaGl0ZVwiXSxqcj1bXCIjRkYwXCIsXCJZZWxsb3dcIl0sQXI9W1wiMVwiLFwiT3BhcXVlXCJdLFByPVtcIjAuNVwiLFwiU2VtaS1UcmFuc3BhcmVudFwiXSxMcj1bXCIwXCIsXCJUcmFuc3BhcmVudFwiXSxNcj17YmFja2dyb3VuZENvbG9yOntzZWxlY3RvcjpcIi52anMtYmctY29sb3IgPiBzZWxlY3RcIixpZDpcImNhcHRpb25zLWJhY2tncm91bmQtY29sb3ItJXNcIixsYWJlbDpcIkNvbG9yXCIsb3B0aW9uczpbVHIseHIsU3IsRXIsa3IsanIsd3IsQ3JdfSxiYWNrZ3JvdW5kT3BhY2l0eTp7c2VsZWN0b3I6XCIudmpzLWJnLW9wYWNpdHkgPiBzZWxlY3RcIixpZDpcImNhcHRpb25zLWJhY2tncm91bmQtb3BhY2l0eS0lc1wiLGxhYmVsOlwiVHJhbnNwYXJlbmN5XCIsb3B0aW9uczpbQXIsUHIsTHJdfSxjb2xvcjp7c2VsZWN0b3I6XCIudmpzLWZnLWNvbG9yID4gc2VsZWN0XCIsaWQ6XCJjYXB0aW9ucy1mb3JlZ3JvdW5kLWNvbG9yLSVzXCIsbGFiZWw6XCJDb2xvclwiLG9wdGlvbnM6W3hyLFRyLFNyLEVyLGtyLGpyLHdyLENyXX0sZWRnZVN0eWxlOntzZWxlY3RvcjpcIi52anMtZWRnZS1zdHlsZSA+IHNlbGVjdFwiLGlkOlwiJXNcIixsYWJlbDpcIlRleHQgRWRnZSBTdHlsZVwiLG9wdGlvbnM6W1tcIm5vbmVcIixcIk5vbmVcIl0sW1wicmFpc2VkXCIsXCJSYWlzZWRcIl0sW1wiZGVwcmVzc2VkXCIsXCJEZXByZXNzZWRcIl0sW1widW5pZm9ybVwiLFwiVW5pZm9ybVwiXSxbXCJkcm9wc2hhZG93XCIsXCJEcm9wc2hhZG93XCJdXX0sZm9udEZhbWlseTp7c2VsZWN0b3I6XCIudmpzLWZvbnQtZmFtaWx5ID4gc2VsZWN0XCIsaWQ6XCJjYXB0aW9ucy1mb250LWZhbWlseS0lc1wiLGxhYmVsOlwiRm9udCBGYW1pbHlcIixvcHRpb25zOltbXCJwcm9wb3J0aW9uYWxTYW5zU2VyaWZcIixcIlByb3BvcnRpb25hbCBTYW5zLVNlcmlmXCJdLFtcIm1vbm9zcGFjZVNhbnNTZXJpZlwiLFwiTW9ub3NwYWNlIFNhbnMtU2VyaWZcIl0sW1wicHJvcG9ydGlvbmFsU2VyaWZcIixcIlByb3BvcnRpb25hbCBTZXJpZlwiXSxbXCJtb25vc3BhY2VTZXJpZlwiLFwiTW9ub3NwYWNlIFNlcmlmXCJdLFtcImNhc3VhbFwiLFwiQ2FzdWFsXCJdLFtcInNjcmlwdFwiLFwiU2NyaXB0XCJdLFtcInNtYWxsLWNhcHNcIixcIlNtYWxsIENhcHNcIl1dfSxmb250UGVyY2VudDp7c2VsZWN0b3I6XCIudmpzLWZvbnQtcGVyY2VudCA+IHNlbGVjdFwiLGlkOlwiY2FwdGlvbnMtZm9udC1zaXplLSVzXCIsbGFiZWw6XCJGb250IFNpemVcIixvcHRpb25zOltbXCIwLjUwXCIsXCI1MCVcIl0sW1wiMC43NVwiLFwiNzUlXCJdLFtcIjEuMDBcIixcIjEwMCVcIl0sW1wiMS4yNVwiLFwiMTI1JVwiXSxbXCIxLjUwXCIsXCIxNTAlXCJdLFtcIjEuNzVcIixcIjE3NSVcIl0sW1wiMi4wMFwiLFwiMjAwJVwiXSxbXCIzLjAwXCIsXCIzMDAlXCJdLFtcIjQuMDBcIixcIjQwMCVcIl1dLGRlZmF1bHQ6MixwYXJzZXI6ZnVuY3Rpb24oZSl7cmV0dXJuXCIxLjAwXCI9PT1lP251bGw6TnVtYmVyKGUpfX0sdGV4dE9wYWNpdHk6e3NlbGVjdG9yOlwiLnZqcy10ZXh0LW9wYWNpdHkgPiBzZWxlY3RcIixpZDpcImNhcHRpb25zLWZvcmVncm91bmQtb3BhY2l0eS0lc1wiLGxhYmVsOlwiVHJhbnNwYXJlbmN5XCIsb3B0aW9uczpbQXIsUHJdfSx3aW5kb3dDb2xvcjp7c2VsZWN0b3I6XCIudmpzLXdpbmRvdy1jb2xvciA+IHNlbGVjdFwiLGlkOlwiY2FwdGlvbnMtd2luZG93LWNvbG9yLSVzXCIsbGFiZWw6XCJDb2xvclwifSx3aW5kb3dPcGFjaXR5OntzZWxlY3RvcjpcIi52anMtd2luZG93LW9wYWNpdHkgPiBzZWxlY3RcIixpZDpcImNhcHRpb25zLXdpbmRvdy1vcGFjaXR5LSVzXCIsbGFiZWw6XCJUcmFuc3BhcmVuY3lcIixvcHRpb25zOltMcixQcixBcl19fTtmdW5jdGlvbiBOcihlLHQpe2lmKHQmJihlPXQoZSkpLGUmJlwibm9uZVwiIT09ZSlyZXR1cm4gZX1Nci53aW5kb3dDb2xvci5vcHRpb25zPU1yLmJhY2tncm91bmRDb2xvci5vcHRpb25zO3ZhciBPcj1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuIHQudGVtcG9yYXJ5PSExLChuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLnVwZGF0ZURpc3BsYXk9Q2Uodih2KG4pKSxuLnVwZGF0ZURpc3BsYXkpLG4uZmlsbCgpLG4uaGFzQmVlbk9wZW5lZF89bi5oYXNCZWVuRmlsbGVkXz0hMCxuLmVuZERpYWxvZz14KFwicFwiLHtjbGFzc05hbWU6XCJ2anMtY29udHJvbC10ZXh0XCIsdGV4dENvbnRlbnQ6bi5sb2NhbGl6ZShcIkVuZCBvZiBkaWFsb2cgd2luZG93LlwiKX0pLG4uZWwoKS5hcHBlbmRDaGlsZChuLmVuZERpYWxvZyksbi5zZXREZWZhdWx0cygpLHZvaWQgMD09PXQucGVyc2lzdFRleHRUcmFja1NldHRpbmdzJiYobi5vcHRpb25zXy5wZXJzaXN0VGV4dFRyYWNrU2V0dGluZ3M9bi5vcHRpb25zXy5wbGF5ZXJPcHRpb25zLnBlcnNpc3RUZXh0VHJhY2tTZXR0aW5ncyksbi5vbihuLiQoXCIudmpzLWRvbmUtYnV0dG9uXCIpLFwiY2xpY2tcIixmdW5jdGlvbigpe24uc2F2ZVNldHRpbmdzKCksbi5jbG9zZSgpfSksbi5vbihuLiQoXCIudmpzLWRlZmF1bHQtYnV0dG9uXCIpLFwiY2xpY2tcIixmdW5jdGlvbigpe24uc2V0RGVmYXVsdHMoKSxuLnVwZGF0ZURpc3BsYXkoKX0pLGEoTXIsZnVuY3Rpb24oZSl7bi5vbihuLiQoZS5zZWxlY3RvciksXCJjaGFuZ2VcIixuLnVwZGF0ZURpc3BsYXkpfSksbi5vcHRpb25zXy5wZXJzaXN0VGV4dFRyYWNrU2V0dGluZ3MmJm4ucmVzdG9yZVNldHRpbmdzKCksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuZW5kRGlhbG9nPW51bGwsaS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpfSx0LmNyZWF0ZUVsU2VsZWN0Xz1mdW5jdGlvbihlLHQsbil7dmFyIGk9dGhpczt2b2lkIDA9PT10JiYodD1cIlwiKSx2b2lkIDA9PT1uJiYobj1cImxhYmVsXCIpO3ZhciByPU1yW2VdLHM9ci5pZC5yZXBsYWNlKFwiJXNcIix0aGlzLmlkXyksbz1bdCxzXS5qb2luKFwiIFwiKS50cmltKCk7cmV0dXJuW1wiPFwiK24rJyBpZD1cIicrcysnXCIgY2xhc3M9XCInKyhcImxhYmVsXCI9PT1uP1widmpzLWxhYmVsXCI6XCJcIikrJ1wiPicsdGhpcy5sb2NhbGl6ZShyLmxhYmVsKSxcIjwvXCIrbitcIj5cIiwnPHNlbGVjdCBhcmlhLWxhYmVsbGVkYnk9XCInK28rJ1wiPiddLmNvbmNhdChyLm9wdGlvbnMubWFwKGZ1bmN0aW9uKGUpe3ZhciB0PXMrXCItXCIrZVsxXS5yZXBsYWNlKC9cXFcrL2csXCJcIik7cmV0dXJuWyc8b3B0aW9uIGlkPVwiJyt0KydcIiB2YWx1ZT1cIicrZVswXSsnXCIgJywnYXJpYS1sYWJlbGxlZGJ5PVwiJytvK1wiIFwiK3QrJ1wiPicsaS5sb2NhbGl6ZShlWzFdKSxcIjwvb3B0aW9uPlwiXS5qb2luKFwiXCIpfSkpLmNvbmNhdChcIjwvc2VsZWN0PlwiKS5qb2luKFwiXCIpfSx0LmNyZWF0ZUVsRmdDb2xvcl89ZnVuY3Rpb24oKXt2YXIgZT1cImNhcHRpb25zLXRleHQtbGVnZW5kLVwiK3RoaXMuaWRfO3JldHVyblsnPGZpZWxkc2V0IGNsYXNzPVwidmpzLWZnLWNvbG9yIHZqcy10cmFjay1zZXR0aW5nXCI+JywnPGxlZ2VuZCBpZD1cIicrZSsnXCI+Jyx0aGlzLmxvY2FsaXplKFwiVGV4dFwiKSxcIjwvbGVnZW5kPlwiLHRoaXMuY3JlYXRlRWxTZWxlY3RfKFwiY29sb3JcIixlKSwnPHNwYW4gY2xhc3M9XCJ2anMtdGV4dC1vcGFjaXR5IHZqcy1vcGFjaXR5XCI+Jyx0aGlzLmNyZWF0ZUVsU2VsZWN0XyhcInRleHRPcGFjaXR5XCIsZSksXCI8L3NwYW4+XCIsXCI8L2ZpZWxkc2V0PlwiXS5qb2luKFwiXCIpfSx0LmNyZWF0ZUVsQmdDb2xvcl89ZnVuY3Rpb24oKXt2YXIgZT1cImNhcHRpb25zLWJhY2tncm91bmQtXCIrdGhpcy5pZF87cmV0dXJuWyc8ZmllbGRzZXQgY2xhc3M9XCJ2anMtYmctY29sb3IgdmpzLXRyYWNrLXNldHRpbmdcIj4nLCc8bGVnZW5kIGlkPVwiJytlKydcIj4nLHRoaXMubG9jYWxpemUoXCJCYWNrZ3JvdW5kXCIpLFwiPC9sZWdlbmQ+XCIsdGhpcy5jcmVhdGVFbFNlbGVjdF8oXCJiYWNrZ3JvdW5kQ29sb3JcIixlKSwnPHNwYW4gY2xhc3M9XCJ2anMtYmctb3BhY2l0eSB2anMtb3BhY2l0eVwiPicsdGhpcy5jcmVhdGVFbFNlbGVjdF8oXCJiYWNrZ3JvdW5kT3BhY2l0eVwiLGUpLFwiPC9zcGFuPlwiLFwiPC9maWVsZHNldD5cIl0uam9pbihcIlwiKX0sdC5jcmVhdGVFbFdpbkNvbG9yXz1mdW5jdGlvbigpe3ZhciBlPVwiY2FwdGlvbnMtd2luZG93LVwiK3RoaXMuaWRfO3JldHVyblsnPGZpZWxkc2V0IGNsYXNzPVwidmpzLXdpbmRvdy1jb2xvciB2anMtdHJhY2stc2V0dGluZ1wiPicsJzxsZWdlbmQgaWQ9XCInK2UrJ1wiPicsdGhpcy5sb2NhbGl6ZShcIldpbmRvd1wiKSxcIjwvbGVnZW5kPlwiLHRoaXMuY3JlYXRlRWxTZWxlY3RfKFwid2luZG93Q29sb3JcIixlKSwnPHNwYW4gY2xhc3M9XCJ2anMtd2luZG93LW9wYWNpdHkgdmpzLW9wYWNpdHlcIj4nLHRoaXMuY3JlYXRlRWxTZWxlY3RfKFwid2luZG93T3BhY2l0eVwiLGUpLFwiPC9zcGFuPlwiLFwiPC9maWVsZHNldD5cIl0uam9pbihcIlwiKX0sdC5jcmVhdGVFbENvbG9yc189ZnVuY3Rpb24oKXtyZXR1cm4geChcImRpdlwiLHtjbGFzc05hbWU6XCJ2anMtdHJhY2stc2V0dGluZ3MtY29sb3JzXCIsaW5uZXJIVE1MOlt0aGlzLmNyZWF0ZUVsRmdDb2xvcl8oKSx0aGlzLmNyZWF0ZUVsQmdDb2xvcl8oKSx0aGlzLmNyZWF0ZUVsV2luQ29sb3JfKCldLmpvaW4oXCJcIil9KX0sdC5jcmVhdGVFbEZvbnRfPWZ1bmN0aW9uKCl7cmV0dXJuIHgoXCJkaXZcIix7Y2xhc3NOYW1lOlwidmpzLXRyYWNrLXNldHRpbmdzLWZvbnRcIixpbm5lckhUTUw6Wyc8ZmllbGRzZXQgY2xhc3M9XCJ2anMtZm9udC1wZXJjZW50IHZqcy10cmFjay1zZXR0aW5nXCI+Jyx0aGlzLmNyZWF0ZUVsU2VsZWN0XyhcImZvbnRQZXJjZW50XCIsXCJcIixcImxlZ2VuZFwiKSxcIjwvZmllbGRzZXQ+XCIsJzxmaWVsZHNldCBjbGFzcz1cInZqcy1lZGdlLXN0eWxlIHZqcy10cmFjay1zZXR0aW5nXCI+Jyx0aGlzLmNyZWF0ZUVsU2VsZWN0XyhcImVkZ2VTdHlsZVwiLFwiXCIsXCJsZWdlbmRcIiksXCI8L2ZpZWxkc2V0PlwiLCc8ZmllbGRzZXQgY2xhc3M9XCJ2anMtZm9udC1mYW1pbHkgdmpzLXRyYWNrLXNldHRpbmdcIj4nLHRoaXMuY3JlYXRlRWxTZWxlY3RfKFwiZm9udEZhbWlseVwiLFwiXCIsXCJsZWdlbmRcIiksXCI8L2ZpZWxkc2V0PlwiXS5qb2luKFwiXCIpfSl9LHQuY3JlYXRlRWxDb250cm9sc189ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxvY2FsaXplKFwicmVzdG9yZSBhbGwgc2V0dGluZ3MgdG8gdGhlIGRlZmF1bHQgdmFsdWVzXCIpO3JldHVybiB4KFwiZGl2XCIse2NsYXNzTmFtZTpcInZqcy10cmFjay1zZXR0aW5ncy1jb250cm9sc1wiLGlubmVySFRNTDpbJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwidmpzLWRlZmF1bHQtYnV0dG9uXCIgdGl0bGU9XCInK2UrJ1wiPicsdGhpcy5sb2NhbGl6ZShcIlJlc2V0XCIpLCc8c3BhbiBjbGFzcz1cInZqcy1jb250cm9sLXRleHRcIj4gJytlK1wiPC9zcGFuPlwiLFwiPC9idXR0b24+XCIsJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwidmpzLWRvbmUtYnV0dG9uXCI+Jyt0aGlzLmxvY2FsaXplKFwiRG9uZVwiKStcIjwvYnV0dG9uPlwiXS5qb2luKFwiXCIpfSl9LHQuY29udGVudD1mdW5jdGlvbigpe3JldHVyblt0aGlzLmNyZWF0ZUVsQ29sb3JzXygpLHRoaXMuY3JlYXRlRWxGb250XygpLHRoaXMuY3JlYXRlRWxDb250cm9sc18oKV19LHQubGFiZWw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sb2NhbGl6ZShcIkNhcHRpb24gU2V0dGluZ3MgRGlhbG9nXCIpfSx0LmRlc2NyaXB0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubG9jYWxpemUoXCJCZWdpbm5pbmcgb2YgZGlhbG9nIHdpbmRvdy4gRXNjYXBlIHdpbGwgY2FuY2VsIGFuZCBjbG9zZSB0aGUgd2luZG93LlwiKX0sdC5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGkucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKStcIiB2anMtdGV4dC10cmFjay1zZXR0aW5nc1wifSx0LmdldFZhbHVlcz1mdW5jdGlvbigpe3ZhciBuLGksZSxvPXRoaXM7cmV0dXJuIGk9ZnVuY3Rpb24oZSx0LG4pe3ZhciBpLHIscz0oaT1vLiQodC5zZWxlY3Rvcikscj10LnBhcnNlcixOcihpLm9wdGlvbnNbaS5vcHRpb25zLnNlbGVjdGVkSW5kZXhdLnZhbHVlLHIpKTtyZXR1cm4gdm9pZCAwIT09cyYmKGVbbl09cyksZX0sdm9pZCAwPT09KGU9e30pJiYoZT0wKSxyKG49TXIpLnJlZHVjZShmdW5jdGlvbihlLHQpe3JldHVybiBpKGUsblt0XSx0KX0sZSl9LHQuc2V0VmFsdWVzPWZ1bmN0aW9uKG4pe3ZhciBpPXRoaXM7YShNcixmdW5jdGlvbihlLHQpeyFmdW5jdGlvbihlLHQsbil7aWYodClmb3IodmFyIGk9MDtpPGUub3B0aW9ucy5sZW5ndGg7aSsrKWlmKE5yKGUub3B0aW9uc1tpXS52YWx1ZSxuKT09PXQpe2Uuc2VsZWN0ZWRJbmRleD1pO2JyZWFrfX0oaS4kKGUuc2VsZWN0b3IpLG5bdF0sZS5wYXJzZXIpfSl9LHQuc2V0RGVmYXVsdHM9ZnVuY3Rpb24oKXt2YXIgbj10aGlzO2EoTXIsZnVuY3Rpb24oZSl7dmFyIHQ9ZS5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRcIik/ZS5kZWZhdWx0OjA7bi4kKGUuc2VsZWN0b3IpLnNlbGVjdGVkSW5kZXg9dH0pfSx0LnJlc3RvcmVTZXR0aW5ncz1mdW5jdGlvbigpe3ZhciBlO3RyeXtlPUpTT04ucGFyc2UoaC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShicikpfWNhdGNoKGUpe2cud2FybihlKX1lJiZ0aGlzLnNldFZhbHVlcyhlKX0sdC5zYXZlU2V0dGluZ3M9ZnVuY3Rpb24oKXtpZih0aGlzLm9wdGlvbnNfLnBlcnNpc3RUZXh0VHJhY2tTZXR0aW5ncyl7dmFyIGU9dGhpcy5nZXRWYWx1ZXMoKTt0cnl7T2JqZWN0LmtleXMoZSkubGVuZ3RoP2gubG9jYWxTdG9yYWdlLnNldEl0ZW0oYnIsSlNPTi5zdHJpbmdpZnkoZSkpOmgubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oYnIpfWNhdGNoKGUpe2cud2FybihlKX19fSx0LnVwZGF0ZURpc3BsYXk9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnBsYXllcl8uZ2V0Q2hpbGQoXCJ0ZXh0VHJhY2tEaXNwbGF5XCIpO2UmJmUudXBkYXRlRGlzcGxheSgpfSx0LmNvbmRpdGlvbmFsQmx1cl89ZnVuY3Rpb24oKXt0aGlzLnByZXZpb3VzbHlBY3RpdmVFbF89bnVsbCx0aGlzLm9mZihkLFwia2V5ZG93blwiLHRoaXMuaGFuZGxlS2V5RG93bik7dmFyIGU9dGhpcy5wbGF5ZXJfLmNvbnRyb2xCYXIsdD1lJiZlLnN1YnNDYXBzQnV0dG9uLG49ZSYmZS5jYXB0aW9uc0J1dHRvbjt0P3QuZm9jdXMoKTpuJiZuLmZvY3VzKCl9LGV9KE10KTtGZS5yZWdpc3RlckNvbXBvbmVudChcIlRleHRUcmFja1NldHRpbmdzXCIsT3IpO3ZhciBJcj1mdW5jdGlvbihzKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG4saT10LlJlc2l6ZU9ic2VydmVyfHxoLlJlc2l6ZU9ic2VydmVyO251bGw9PT10LlJlc2l6ZU9ic2VydmVyJiYoaT0hMSk7dmFyIHI9QmUoe2NyZWF0ZUVsOiFpLHJlcG9ydFRvdWNoQWN0aXZpdHk6ITF9LHQpO3JldHVybihuPXMuY2FsbCh0aGlzLGUscil8fHRoaXMpLlJlc2l6ZU9ic2VydmVyPXQuUmVzaXplT2JzZXJ2ZXJ8fGguUmVzaXplT2JzZXJ2ZXIsbi5sb2FkTGlzdGVuZXJfPW51bGwsbi5yZXNpemVPYnNlcnZlcl89bnVsbCxuLmRlYm91bmNlZEhhbmRsZXJfPWZ1bmN0aW9uKGkscixzLG8pe3ZhciBhO3ZvaWQgMD09PW8mJihvPWgpO3ZhciBlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWFyZ3VtZW50cyxuPWZ1bmN0aW9uKCl7bj1hPW51bGwsc3x8aS5hcHBseShlLHQpfTshYSYmcyYmaS5hcHBseShlLHQpLG8uY2xlYXJUaW1lb3V0KGEpLGE9by5zZXRUaW1lb3V0KG4scil9O3JldHVybiBlLmNhbmNlbD1mdW5jdGlvbigpe28uY2xlYXJUaW1lb3V0KGEpLGE9bnVsbH0sZX0oZnVuY3Rpb24oKXtuLnJlc2l6ZUhhbmRsZXIoKX0sMTAwLCExLHYodihuKSkpLGk/KG4ucmVzaXplT2JzZXJ2ZXJfPW5ldyBuLlJlc2l6ZU9ic2VydmVyKG4uZGVib3VuY2VkSGFuZGxlcl8pLG4ucmVzaXplT2JzZXJ2ZXJfLm9ic2VydmUoZS5lbCgpKSk6KG4ubG9hZExpc3RlbmVyXz1mdW5jdGlvbigpe2lmKG4uZWxfJiZuLmVsXy5jb250ZW50V2luZG93KXt2YXIgZT1uLmRlYm91bmNlZEhhbmRsZXJfLHQ9bi51bmxvYWRMaXN0ZW5lcl89ZnVuY3Rpb24oKXtkZSh0aGlzLFwicmVzaXplXCIsZSksZGUodGhpcyxcInVubG9hZFwiLHQpLHQ9bnVsbH07aGUobi5lbF8uY29udGVudFdpbmRvdyxcInVubG9hZFwiLHQpLGhlKG4uZWxfLmNvbnRlbnRXaW5kb3csXCJyZXNpemVcIixlKX19LG4ub25lKFwibG9hZFwiLG4ubG9hZExpc3RlbmVyXykpLG59ZihlLHMpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZUVsPWZ1bmN0aW9uKCl7cmV0dXJuIHMucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImlmcmFtZVwiLHtjbGFzc05hbWU6XCJ2anMtcmVzaXplLW1hbmFnZXJcIix0YWJJbmRleDotMX0se1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIn0pfSx0LnJlc2l6ZUhhbmRsZXI9ZnVuY3Rpb24oKXt0aGlzLnBsYXllcl8mJnRoaXMucGxheWVyXy50cmlnZ2VyJiZ0aGlzLnBsYXllcl8udHJpZ2dlcihcInBsYXllcnJlc2l6ZVwiKX0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5kZWJvdW5jZWRIYW5kbGVyXyYmdGhpcy5kZWJvdW5jZWRIYW5kbGVyXy5jYW5jZWwoKSx0aGlzLnJlc2l6ZU9ic2VydmVyXyYmKHRoaXMucGxheWVyXy5lbCgpJiZ0aGlzLnJlc2l6ZU9ic2VydmVyXy51bm9ic2VydmUodGhpcy5wbGF5ZXJfLmVsKCkpLHRoaXMucmVzaXplT2JzZXJ2ZXJfLmRpc2Nvbm5lY3QoKSksdGhpcy5sb2FkTGlzdGVuZXJfJiZ0aGlzLm9mZihcImxvYWRcIix0aGlzLmxvYWRMaXN0ZW5lcl8pLHRoaXMuZWxfJiZ0aGlzLmVsXy5jb250ZW50V2luZG93JiZ0aGlzLnVubG9hZExpc3RlbmVyXyYmdGhpcy51bmxvYWRMaXN0ZW5lcl8uY2FsbCh0aGlzLmVsXy5jb250ZW50V2luZG93KSx0aGlzLlJlc2l6ZU9ic2VydmVyPW51bGwsdGhpcy5yZXNpemVPYnNlcnZlcj1udWxsLHRoaXMuZGVib3VuY2VkSGFuZGxlcl89bnVsbCx0aGlzLmxvYWRMaXN0ZW5lcl89bnVsbCxzLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyl9LGV9KEZlKTtGZS5yZWdpc3RlckNvbXBvbmVudChcIlJlc2l6ZU1hbmFnZXJcIixJcik7dmFyIERyPWZ1bmN0aW9uKHIpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbixpPUJlKHtjcmVhdGVFbDohMX0sdCk7cmV0dXJuKG49ci5jYWxsKHRoaXMsZSxpKXx8dGhpcykucmVzZXRfKCksbi5vbihuLnBsYXllcl8sXCJkdXJhdGlvbmNoYW5nZVwiLG4uaGFuZGxlRHVyYXRpb25jaGFuZ2UpLHN0JiZcImhpZGRlblwiaW4gZCYmXCJ2aXNpYmlsaXR5U3RhdGVcImluIGQmJm4ub24oZCxcInZpc2liaWxpdHljaGFuZ2VcIixuLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UpLG59ZihlLHIpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmhhbmRsZVZpc2liaWxpdHlDaGFuZ2U9ZnVuY3Rpb24oKXt0aGlzLnBsYXllcl8uZHVyYXRpb24oKT09PTEvMCYmKGQuaGlkZGVuP3RoaXMuc3RvcFRyYWNraW5nKCk6dGhpcy5zdGFydFRyYWNraW5nKCkpfSx0LmlzQmVoaW5kXz1mdW5jdGlvbigpe2lmKCF0aGlzLnRpbWV1cGRhdGVTZWVuXylyZXR1cm4hMTt2YXIgZT10aGlzLmxpdmVDdXJyZW50VGltZSgpLHQ9dGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCksbj10aGlzLnNlZWthYmxlSW5jcmVtZW50XztyZXR1cm4gZSE9PTEvMCYmdDw9ZS0oMipuKy4wNyl9LHQudHJhY2tMaXZlXz1mdW5jdGlvbigpe3RoaXMucGFzdFNlZWtFbmRfPXRoaXMucGFzdFNlZWtFbmRfO3ZhciBlPXRoaXMucGxheWVyXy5zZWVrYWJsZSgpO2lmKGUmJmUubGVuZ3RoKXt2YXIgdD10aGlzLnNlZWthYmxlRW5kKCk7dCE9PXRoaXMubGFzdFNlZWtFbmRfJiYodGhpcy5sYXN0U2Vla0VuZF8mJih0aGlzLnNlZWthYmxlSW5jcmVtZW50Xz1NYXRoLmFicyh0LXRoaXMubGFzdFNlZWtFbmRfKSksdGhpcy5wYXN0U2Vla0VuZF89MCx0aGlzLmxhc3RTZWVrRW5kXz10LHRoaXMudHJpZ2dlcihcInNlZWthYmxlZW5kY2hhbmdlXCIpKSx0aGlzLnBhc3RTZWVrRW5kXz10aGlzLnBhc3RTZWVrRW5kKCkrLjAzLHRoaXMuaXNCZWhpbmRfKCkhPT10aGlzLmJlaGluZExpdmVFZGdlKCkmJih0aGlzLmJlaGluZExpdmVFZGdlXz10aGlzLmlzQmVoaW5kXygpLHRoaXMudHJpZ2dlcihcImxpdmVlZGdlY2hhbmdlXCIpKX19LHQuaGFuZGxlRHVyYXRpb25jaGFuZ2U9ZnVuY3Rpb24oKXt0aGlzLnBsYXllcl8uZHVyYXRpb24oKT09PTEvMD90aGlzLnN0YXJ0VHJhY2tpbmcoKTp0aGlzLnN0b3BUcmFja2luZygpfSx0LnN0YXJ0VHJhY2tpbmc9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuaXNUcmFja2luZygpfHwodGhpcy50cmFja2luZ0ludGVydmFsXz10aGlzLnNldEludGVydmFsKHRoaXMudHJhY2tMaXZlXywzMCksdGhpcy50cmFja0xpdmVfKCksdGhpcy5vbih0aGlzLnBsYXllcl8sXCJwbGF5XCIsdGhpcy50cmFja0xpdmVfKSx0aGlzLm9uKHRoaXMucGxheWVyXyxcInBhdXNlXCIsdGhpcy50cmFja0xpdmVfKSx0aGlzLm9uZSh0aGlzLnBsYXllcl8sXCJwbGF5XCIsdGhpcy5oYW5kbGVQbGF5KSx0aGlzLnRpbWV1cGRhdGVTZWVuX3x8KHRoaXMuaGFuZGxlVGltZXVwZGF0ZT1mdW5jdGlvbigpe2UudGltZXVwZGF0ZVNlZW5fPSEwLGUuaGFuZGxlVGltZXVwZGF0ZT1udWxsfSx0aGlzLm9uZSh0aGlzLnBsYXllcl8sXCJ0aW1ldXBkYXRlXCIsdGhpcy5oYW5kbGVUaW1ldXBkYXRlKSkpfSx0LmhhbmRsZVBsYXk9ZnVuY3Rpb24oKXt0aGlzLm9uZSh0aGlzLnBsYXllcl8sXCJ0aW1ldXBkYXRlXCIsdGhpcy5zZWVrVG9MaXZlRWRnZSl9LHQucmVzZXRfPWZ1bmN0aW9uKCl7dGhpcy5wYXN0U2Vla0VuZF89MCx0aGlzLmxhc3RTZWVrRW5kXz1udWxsLHRoaXMuYmVoaW5kTGl2ZUVkZ2VfPW51bGwsdGhpcy50aW1ldXBkYXRlU2Vlbl89ITEsdGhpcy5jbGVhckludGVydmFsKHRoaXMudHJhY2tpbmdJbnRlcnZhbF8pLHRoaXMudHJhY2tpbmdJbnRlcnZhbF89bnVsbCx0aGlzLnNlZWthYmxlSW5jcmVtZW50Xz0xMix0aGlzLm9mZih0aGlzLnBsYXllcl8sXCJwbGF5XCIsdGhpcy50cmFja0xpdmVfKSx0aGlzLm9mZih0aGlzLnBsYXllcl8sXCJwYXVzZVwiLHRoaXMudHJhY2tMaXZlXyksdGhpcy5vZmYodGhpcy5wbGF5ZXJfLFwicGxheVwiLHRoaXMuaGFuZGxlUGxheSksdGhpcy5vZmYodGhpcy5wbGF5ZXJfLFwidGltZXVwZGF0ZVwiLHRoaXMuc2Vla1RvTGl2ZUVkZ2UpLHRoaXMuaGFuZGxlVGltZXVwZGF0ZSYmKHRoaXMub2ZmKHRoaXMucGxheWVyXyxcInRpbWV1cGRhdGVcIix0aGlzLmhhbmRsZVRpbWV1cGRhdGUpLHRoaXMuaGFuZGxlVGltZXVwZGF0ZT1udWxsKX0sdC5zdG9wVHJhY2tpbmc9ZnVuY3Rpb24oKXt0aGlzLmlzVHJhY2tpbmcoKSYmdGhpcy5yZXNldF8oKX0sdC5zZWVrYWJsZUVuZD1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLnBsYXllcl8uc2Vla2FibGUoKSx0PVtdLG49ZT9lLmxlbmd0aDowO24tLTspdC5wdXNoKGUuZW5kKG4pKTtyZXR1cm4gdC5sZW5ndGg/dC5zb3J0KClbdC5sZW5ndGgtMV06MS8wfSx0LnNlZWthYmxlU3RhcnQ9ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy5wbGF5ZXJfLnNlZWthYmxlKCksdD1bXSxuPWU/ZS5sZW5ndGg6MDtuLS07KXQucHVzaChlLnN0YXJ0KG4pKTtyZXR1cm4gdC5sZW5ndGg/dC5zb3J0KClbMF06MH0sdC5saXZlV2luZG93PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5saXZlQ3VycmVudFRpbWUoKTtyZXR1cm4gZT09PTEvMD8xLzA6ZS10aGlzLnNlZWthYmxlU3RhcnQoKX0sdC5pc0xpdmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc1RyYWNraW5nKCl9LHQuYXRMaXZlRWRnZT1mdW5jdGlvbigpe3JldHVybiF0aGlzLmJlaGluZExpdmVFZGdlKCl9LHQubGl2ZUN1cnJlbnRUaW1lPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFzdFNlZWtFbmQoKSt0aGlzLnNlZWthYmxlRW5kKCl9LHQucGFzdFNlZWtFbmQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXN0U2Vla0VuZF99LHQuYmVoaW5kTGl2ZUVkZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5iZWhpbmRMaXZlRWRnZV99LHQuaXNUcmFja2luZz1mdW5jdGlvbigpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiB0aGlzLnRyYWNraW5nSW50ZXJ2YWxffSx0LnNlZWtUb0xpdmVFZGdlPWZ1bmN0aW9uKCl7dGhpcy5hdExpdmVFZGdlKCl8fCh0aGlzLnBsYXllcl8uY3VycmVudFRpbWUodGhpcy5saXZlQ3VycmVudFRpbWUoKSksdGhpcy5wbGF5ZXJfLnBhdXNlZCgpJiZ0aGlzLnBsYXllcl8ucGxheSgpKX0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5zdG9wVHJhY2tpbmcoKSxyLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyl9LGV9KEZlKTtGZS5yZWdpc3RlckNvbXBvbmVudChcIkxpdmVUcmFja2VyXCIsRHIpO3ZhciBScj1mdW5jdGlvbihlKXt2YXIgdD1lLmVsKCk7aWYodC5oYXNBdHRyaWJ1dGUoXCJzcmNcIikpcmV0dXJuIGUudHJpZ2dlclNvdXJjZXNldCh0LnNyYyksITA7dmFyIG49ZS4kJChcInNvdXJjZVwiKSxpPVtdLHI9XCJcIjtpZighbi5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciBzPTA7czxuLmxlbmd0aDtzKyspe3ZhciBvPW5bc10uc3JjO28mJi0xPT09aS5pbmRleE9mKG8pJiZpLnB1c2gobyl9cmV0dXJuISFpLmxlbmd0aCYmKDE9PT1pLmxlbmd0aCYmKHI9aVswXSksZS50cmlnZ2VyU291cmNlc2V0KHIpLCEwKX0sQnI9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwiaW5uZXJIVE1MXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNsb25lTm9kZSghMCkuaW5uZXJIVE1MfSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZC5jcmVhdGVFbGVtZW50KHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSk7dC5pbm5lckhUTUw9ZTtmb3IodmFyIG49ZC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7dC5jaGlsZE5vZGVzLmxlbmd0aDspbi5hcHBlbmRDaGlsZCh0LmNoaWxkTm9kZXNbMF0pO3JldHVybiB0aGlzLmlubmVyVGV4dD1cIlwiLGguRWxlbWVudC5wcm90b3R5cGUuYXBwZW5kQ2hpbGQuY2FsbCh0aGlzLG4pLHRoaXMuaW5uZXJIVE1MfX0pLEZyPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPXt9LGk9MDtpPGUubGVuZ3RoJiYhKChuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZVtpXSx0KSkmJm4uc2V0JiZuLmdldCk7aSsrKTtyZXR1cm4gbi5lbnVtZXJhYmxlPSEwLG4uY29uZmlndXJhYmxlPSEwLG59LEhyPWZ1bmN0aW9uKHMpe3ZhciBvPXMuZWwoKTtpZighby5yZXNldFNvdXJjZVdhdGNoXyl7dmFyIHQ9e30sZT1Gcihbcy5lbCgpLGguSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUsaC5FbGVtZW50LnByb3RvdHlwZSxCcl0sXCJpbm5lckhUTUxcIiksbj1mdW5jdGlvbihyKXtyZXR1cm4gZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxuPTA7bjxlO24rKyl0W25dPWFyZ3VtZW50c1tuXTt2YXIgaT1yLmFwcGx5KG8sdCk7cmV0dXJuIFJyKHMpLGl9fTtbXCJhcHBlbmRcIixcImFwcGVuZENoaWxkXCIsXCJpbnNlcnRBZGphY2VudEhUTUxcIl0uZm9yRWFjaChmdW5jdGlvbihlKXtvW2VdJiYodFtlXT1vW2VdLG9bZV09bih0W2VdKSl9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcImlubmVySFRNTFwiLEJlKGUse3NldDpuKGUuc2V0KX0pKSxvLnJlc2V0U291cmNlV2F0Y2hfPWZ1bmN0aW9uKCl7by5yZXNldFNvdXJjZVdhdGNoXz1udWxsLE9iamVjdC5rZXlzKHQpLmZvckVhY2goZnVuY3Rpb24oZSl7b1tlXT10W2VdfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJpbm5lckhUTUxcIixlKX0scy5vbmUoXCJzb3VyY2VzZXRcIixvLnJlc2V0U291cmNlV2F0Y2hfKX19LFZyPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcInNyY1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oYXNBdHRyaWJ1dGUoXCJzcmNcIik/JHQoaC5FbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGUuY2FsbCh0aGlzLFwic3JjXCIpKTpcIlwifSxzZXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGguRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlLmNhbGwodGhpcyxcInNyY1wiLGUpLGV9fSksenI9ZnVuY3Rpb24oaSl7aWYoaS5mZWF0dXJlc1NvdXJjZXNldCl7dmFyIHI9aS5lbCgpO2lmKCFyLnJlc2V0U291cmNlc2V0Xyl7dmFyIG49RnIoW2kuZWwoKSxoLkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLFZyXSxcInNyY1wiKSxzPXIuc2V0QXR0cmlidXRlLHQ9ci5sb2FkO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwic3JjXCIsQmUobix7c2V0OmZ1bmN0aW9uKGUpe3ZhciB0PW4uc2V0LmNhbGwocixlKTtyZXR1cm4gaS50cmlnZ2VyU291cmNlc2V0KHIuc3JjKSx0fX0pKSxyLnNldEF0dHJpYnV0ZT1mdW5jdGlvbihlLHQpe3ZhciBuPXMuY2FsbChyLGUsdCk7cmV0dXJuL3NyYy9pLnRlc3QoZSkmJmkudHJpZ2dlclNvdXJjZXNldChyLnNyYyksbn0sci5sb2FkPWZ1bmN0aW9uKCl7dmFyIGU9dC5jYWxsKHIpO3JldHVybiBScihpKXx8KGkudHJpZ2dlclNvdXJjZXNldChcIlwiKSxIcihpKSksZX0sci5jdXJyZW50U3JjP2kudHJpZ2dlclNvdXJjZXNldChyLmN1cnJlbnRTcmMpOlJyKGkpfHxIcihpKSxyLnJlc2V0U291cmNlc2V0Xz1mdW5jdGlvbigpe3IucmVzZXRTb3VyY2VzZXRfPW51bGwsci5sb2FkPXQsci5zZXRBdHRyaWJ1dGU9cyxPYmplY3QuZGVmaW5lUHJvcGVydHkocixcInNyY1wiLG4pLHIucmVzZXRTb3VyY2VXYXRjaF8mJnIucmVzZXRTb3VyY2VXYXRjaF8oKX19fX07ZnVuY3Rpb24gV3IoKXt2YXIgZT10KFtcIlRleHQgVHJhY2tzIGFyZSBiZWluZyBsb2FkZWQgZnJvbSBhbm90aGVyIG9yaWdpbiBidXQgdGhlIGNyb3Nzb3JpZ2luIGF0dHJpYnV0ZSBpc24ndCB1c2VkLlxcbiAgICAgICAgICAgIFRoaXMgbWF5IHByZXZlbnQgdGV4dCB0cmFja3MgZnJvbSBsb2FkaW5nLlwiXSk7cmV0dXJuIFdyPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LGV9dmFyIEtyPWZ1bmN0aW9uKHUpe2Z1bmN0aW9uIGEoZSx0KXt2YXIgbjtuPXUuY2FsbCh0aGlzLGUsdCl8fHRoaXM7dmFyIGk9ZS5zb3VyY2Uscj0hMTtpZihpJiYobi5lbF8uY3VycmVudFNyYyE9PWkuc3JjfHxlLnRhZyYmMz09PWUudGFnLmluaXROZXR3b3JrU3RhdGVfKT9uLnNldFNvdXJjZShpKTpuLmhhbmRsZUxhdGVJbml0XyhuLmVsXyksZS5lbmFibGVTb3VyY2VzZXQmJm4uc2V0dXBTb3VyY2VzZXRIYW5kbGluZ18oKSxuLmVsXy5oYXNDaGlsZE5vZGVzKCkpe2Zvcih2YXIgcz1uLmVsXy5jaGlsZE5vZGVzLG89cy5sZW5ndGgsYT1bXTtvLS07KXt2YXIgbD1zW29dO1widHJhY2tcIj09PWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSYmKG4uZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzPyhuLnJlbW90ZVRleHRUcmFja0VscygpLmFkZFRyYWNrRWxlbWVudF8obCksbi5yZW1vdGVUZXh0VHJhY2tzKCkuYWRkVHJhY2sobC50cmFjayksbi50ZXh0VHJhY2tzKCkuYWRkVHJhY2sobC50cmFjaykscnx8bi5lbF8uaGFzQXR0cmlidXRlKFwiY3Jvc3NvcmlnaW5cIil8fCFHdChsLnNyYyl8fChyPSEwKSk6YS5wdXNoKGwpKX1mb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyluLmVsXy5yZW1vdmVDaGlsZChhW2NdKX1yZXR1cm4gbi5wcm94eU5hdGl2ZVRyYWNrc18oKSxuLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcyYmciYmZy53YXJuKG0oV3IoKSkpLG4ucmVzdG9yZU1ldGFkYXRhVHJhY2tzSW5JT1NOYXRpdmVQbGF5ZXJfKCksKGx0fHwkZXx8ZXQpJiYhMD09PWUubmF0aXZlQ29udHJvbHNGb3JUb3VjaCYmbi5zZXRDb250cm9scyghMCksbi5wcm94eVdlYmtpdEZ1bGxzY3JlZW5fKCksbi50cmlnZ2VyUmVhZHkoKSxufWYoYSx1KTt2YXIgZT1hLnByb3RvdHlwZTtyZXR1cm4gZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5lbF8mJnRoaXMuZWxfLnJlc2V0U291cmNlc2V0XyYmdGhpcy5lbF8ucmVzZXRTb3VyY2VzZXRfKCksYS5kaXNwb3NlTWVkaWFFbGVtZW50KHRoaXMuZWxfKSx0aGlzLm9wdGlvbnNfPW51bGwsdS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpfSxlLnNldHVwU291cmNlc2V0SGFuZGxpbmdfPWZ1bmN0aW9uKCl7enIodGhpcyl9LGUucmVzdG9yZU1ldGFkYXRhVHJhY2tzSW5JT1NOYXRpdmVQbGF5ZXJfPWZ1bmN0aW9uKCl7dmFyIGkscj10aGlzLnRleHRUcmFja3MoKSxlPWZ1bmN0aW9uKCl7aT1bXTtmb3IodmFyIGU9MDtlPHIubGVuZ3RoO2UrKyl7dmFyIHQ9cltlXTtcIm1ldGFkYXRhXCI9PT10LmtpbmQmJmkucHVzaCh7dHJhY2s6dCxzdG9yZWRNb2RlOnQubW9kZX0pfX07ZSgpLHIuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLGUpLHRoaXMub24oXCJkaXNwb3NlXCIsZnVuY3Rpb24oKXtyZXR1cm4gci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsZSl9KTt2YXIgdD1mdW5jdGlvbiBlKCl7Zm9yKHZhciB0PTA7dDxpLmxlbmd0aDt0Kyspe3ZhciBuPWlbdF07XCJkaXNhYmxlZFwiPT09bi50cmFjay5tb2RlJiZuLnRyYWNrLm1vZGUhPT1uLnN0b3JlZE1vZGUmJihuLnRyYWNrLm1vZGU9bi5zdG9yZWRNb2RlKX1yLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIixlKX07dGhpcy5vbihcIndlYmtpdGJlZ2luZnVsbHNjcmVlblwiLGZ1bmN0aW9uKCl7ci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsZSksci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsdCksci5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsdCl9KSx0aGlzLm9uKFwid2Via2l0ZW5kZnVsbHNjcmVlblwiLGZ1bmN0aW9uKCl7ci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsZSksci5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsZSksci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsdCl9KX0sZS5vdmVycmlkZU5hdGl2ZV89ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO2lmKHQ9PT10aGlzW1wiZmVhdHVyZXNOYXRpdmVcIitlK1wiVHJhY2tzXCJdKXt2YXIgaT1lLnRvTG93ZXJDYXNlKCk7dGhpc1tpK1wiVHJhY2tzTGlzdGVuZXJzX1wiXSYmT2JqZWN0LmtleXModGhpc1tpK1wiVHJhY2tzTGlzdGVuZXJzX1wiXSkuZm9yRWFjaChmdW5jdGlvbihlKXtuLmVsKClbaStcIlRyYWNrc1wiXS5yZW1vdmVFdmVudExpc3RlbmVyKGUsbltpK1wiVHJhY2tzTGlzdGVuZXJzX1wiXVtlXSl9KSx0aGlzW1wiZmVhdHVyZXNOYXRpdmVcIitlK1wiVHJhY2tzXCJdPSF0LHRoaXNbaStcIlRyYWNrc0xpc3RlbmVyc19cIl09bnVsbCx0aGlzLnByb3h5TmF0aXZlVHJhY2tzRm9yVHlwZV8oaSl9fSxlLm92ZXJyaWRlTmF0aXZlQXVkaW9UcmFja3M9ZnVuY3Rpb24oZSl7dGhpcy5vdmVycmlkZU5hdGl2ZV8oXCJBdWRpb1wiLGUpfSxlLm92ZXJyaWRlTmF0aXZlVmlkZW9UcmFja3M9ZnVuY3Rpb24oZSl7dGhpcy5vdmVycmlkZU5hdGl2ZV8oXCJWaWRlb1wiLGUpfSxlLnByb3h5TmF0aXZlVHJhY2tzRm9yVHlwZV89ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcyx0PUNuW2VdLHI9dGhpcy5lbCgpW3QuZ2V0dGVyTmFtZV0scz10aGlzW3QuZ2V0dGVyTmFtZV0oKTtpZih0aGlzW1wiZmVhdHVyZXNOYXRpdmVcIit0LmNhcGl0YWxOYW1lK1wiVHJhY2tzXCJdJiZyJiZyLmFkZEV2ZW50TGlzdGVuZXIpe3ZhciBvPXtjaGFuZ2U6ZnVuY3Rpb24oZSl7cy50cmlnZ2VyKHt0eXBlOlwiY2hhbmdlXCIsdGFyZ2V0OnMsY3VycmVudFRhcmdldDpzLHNyY0VsZW1lbnQ6c30pfSxhZGR0cmFjazpmdW5jdGlvbihlKXtzLmFkZFRyYWNrKGUudHJhY2spfSxyZW1vdmV0cmFjazpmdW5jdGlvbihlKXtzLnJlbW92ZVRyYWNrKGUudHJhY2spfX0sbj1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxzLmxlbmd0aDt0Kyspe2Zvcih2YXIgbj0hMSxpPTA7aTxyLmxlbmd0aDtpKyspaWYocltpXT09PXNbdF0pe249ITA7YnJlYWt9bnx8ZS5wdXNoKHNbdF0pfWZvcig7ZS5sZW5ndGg7KXMucmVtb3ZlVHJhY2soZS5zaGlmdCgpKX07dGhpc1t0LmdldHRlck5hbWUrXCJMaXN0ZW5lcnNfXCJdPW8sT2JqZWN0LmtleXMobykuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgbj1vW3RdO3IuYWRkRXZlbnRMaXN0ZW5lcih0LG4pLGkub24oXCJkaXNwb3NlXCIsZnVuY3Rpb24oZSl7cmV0dXJuIHIucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4pfSl9KSx0aGlzLm9uKFwibG9hZHN0YXJ0XCIsbiksdGhpcy5vbihcImRpc3Bvc2VcIixmdW5jdGlvbihlKXtyZXR1cm4gaS5vZmYoXCJsb2Fkc3RhcnRcIixuKX0pfX0sZS5wcm94eU5hdGl2ZVRyYWNrc189ZnVuY3Rpb24oKXt2YXIgdD10aGlzO0NuLm5hbWVzLmZvckVhY2goZnVuY3Rpb24oZSl7dC5wcm94eU5hdGl2ZVRyYWNrc0ZvclR5cGVfKGUpfSl9LGUuY3JlYXRlRWw9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9wdGlvbnNfLnRhZztpZighZXx8IXRoaXMub3B0aW9uc18ucGxheWVyRWxJbmdlc3QmJiF0aGlzLm1vdmluZ01lZGlhRWxlbWVudEluRE9NKXtpZihlKXt2YXIgdD1lLmNsb25lTm9kZSghMCk7ZS5wYXJlbnROb2RlJiZlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsZSksYS5kaXNwb3NlTWVkaWFFbGVtZW50KGUpLGU9dH1lbHNle2U9ZC5jcmVhdGVFbGVtZW50KFwidmlkZW9cIik7dmFyIG49QmUoe30sdGhpcy5vcHRpb25zXy50YWcmJkkodGhpcy5vcHRpb25zXy50YWcpKTtsdCYmITA9PT10aGlzLm9wdGlvbnNfLm5hdGl2ZUNvbnRyb2xzRm9yVG91Y2h8fGRlbGV0ZSBuLmNvbnRyb2xzLE8oZSxfKG4se2lkOnRoaXMub3B0aW9uc18udGVjaElkLGNsYXNzOlwidmpzLXRlY2hcIn0pKX1lLnBsYXllcklkPXRoaXMub3B0aW9uc18ucGxheWVySWR9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHRoaXMub3B0aW9uc18ucHJlbG9hZCYmUihlLFwicHJlbG9hZFwiLHRoaXMub3B0aW9uc18ucHJlbG9hZCk7Zm9yKHZhciBpPVtcImxvb3BcIixcIm11dGVkXCIsXCJwbGF5c2lubGluZVwiLFwiYXV0b3BsYXlcIl0scj0wO3I8aS5sZW5ndGg7cisrKXt2YXIgcz1pW3JdLG89dGhpcy5vcHRpb25zX1tzXTtcInVuZGVmaW5lZFwiIT10eXBlb2YgbyYmKG8/UihlLHMscyk6QihlLHMpLGVbc109byl9cmV0dXJuIGV9LGUuaGFuZGxlTGF0ZUluaXRfPWZ1bmN0aW9uKGUpe2lmKDAhPT1lLm5ldHdvcmtTdGF0ZSYmMyE9PWUubmV0d29ya1N0YXRlKXtpZigwPT09ZS5yZWFkeVN0YXRlKXt2YXIgdD0hMSxuPWZ1bmN0aW9uKCl7dD0hMH07dGhpcy5vbihcImxvYWRzdGFydFwiLG4pO3ZhciBpPWZ1bmN0aW9uKCl7dHx8dGhpcy50cmlnZ2VyKFwibG9hZHN0YXJ0XCIpfTtyZXR1cm4gdGhpcy5vbihcImxvYWRlZG1ldGFkYXRhXCIsaSksdm9pZCB0aGlzLnJlYWR5KGZ1bmN0aW9uKCl7dGhpcy5vZmYoXCJsb2Fkc3RhcnRcIixuKSx0aGlzLm9mZihcImxvYWRlZG1ldGFkYXRhXCIsaSksdHx8dGhpcy50cmlnZ2VyKFwibG9hZHN0YXJ0XCIpfSl9dmFyIHI9W1wibG9hZHN0YXJ0XCJdO3IucHVzaChcImxvYWRlZG1ldGFkYXRhXCIpLDI8PWUucmVhZHlTdGF0ZSYmci5wdXNoKFwibG9hZGVkZGF0YVwiKSwzPD1lLnJlYWR5U3RhdGUmJnIucHVzaChcImNhbnBsYXlcIiksNDw9ZS5yZWFkeVN0YXRlJiZyLnB1c2goXCJjYW5wbGF5dGhyb3VnaFwiKSx0aGlzLnJlYWR5KGZ1bmN0aW9uKCl7ci5mb3JFYWNoKGZ1bmN0aW9uKGUpe3RoaXMudHJpZ2dlcihlKX0sdGhpcyl9KX19LGUuc2V0Q3VycmVudFRpbWU9ZnVuY3Rpb24oZSl7dHJ5e3RoaXMuZWxfLmN1cnJlbnRUaW1lPWV9Y2F0Y2goZSl7ZyhlLFwiVmlkZW8gaXMgbm90IHJlYWR5LiAoVmlkZW8uanMpXCIpfX0sZS5kdXJhdGlvbj1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYodGhpcy5lbF8uZHVyYXRpb249PT0xLzAmJkplJiZpdCYmMD09PXRoaXMuZWxfLmN1cnJlbnRUaW1lKXtyZXR1cm4gdGhpcy5vbihcInRpbWV1cGRhdGVcIixmdW5jdGlvbiBlKCl7MDx0LmVsXy5jdXJyZW50VGltZSYmKHQuZWxfLmR1cmF0aW9uPT09MS8wJiZ0LnRyaWdnZXIoXCJkdXJhdGlvbmNoYW5nZVwiKSx0Lm9mZihcInRpbWV1cGRhdGVcIixlKSl9KSxOYU59cmV0dXJuIHRoaXMuZWxfLmR1cmF0aW9ufHxOYU59LGUud2lkdGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbF8ub2Zmc2V0V2lkdGh9LGUuaGVpZ2h0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWxfLm9mZnNldEhlaWdodH0sZS5wcm94eVdlYmtpdEZ1bGxzY3JlZW5fPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZihcIndlYmtpdERpc3BsYXlpbmdGdWxsc2NyZWVuXCJpbiB0aGlzLmVsXyl7dmFyIHQ9ZnVuY3Rpb24oKXt0aGlzLnRyaWdnZXIoXCJmdWxsc2NyZWVuY2hhbmdlXCIse2lzRnVsbHNjcmVlbjohMX0pfSxuPWZ1bmN0aW9uKCl7XCJ3ZWJraXRQcmVzZW50YXRpb25Nb2RlXCJpbiB0aGlzLmVsXyYmXCJwaWN0dXJlLWluLXBpY3R1cmVcIiE9PXRoaXMuZWxfLndlYmtpdFByZXNlbnRhdGlvbk1vZGUmJih0aGlzLm9uZShcIndlYmtpdGVuZGZ1bGxzY3JlZW5cIix0KSx0aGlzLnRyaWdnZXIoXCJmdWxsc2NyZWVuY2hhbmdlXCIse2lzRnVsbHNjcmVlbjohMH0pKX07dGhpcy5vbihcIndlYmtpdGJlZ2luZnVsbHNjcmVlblwiLG4pLHRoaXMub24oXCJkaXNwb3NlXCIsZnVuY3Rpb24oKXtlLm9mZihcIndlYmtpdGJlZ2luZnVsbHNjcmVlblwiLG4pLGUub2ZmKFwid2Via2l0ZW5kZnVsbHNjcmVlblwiLHQpfSl9fSxlLnN1cHBvcnRzRnVsbFNjcmVlbj1mdW5jdGlvbigpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuZWxfLndlYmtpdEVudGVyRnVsbFNjcmVlbil7dmFyIGU9aC5uYXZpZ2F0b3ImJmgubmF2aWdhdG9yLnVzZXJBZ2VudHx8XCJcIjtpZigvQW5kcm9pZC8udGVzdChlKXx8IS9DaHJvbWV8TWFjIE9TIFggMTAuNS8udGVzdChlKSlyZXR1cm4hMH1yZXR1cm4hMX0sZS5lbnRlckZ1bGxTY3JlZW49ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmVsXztlLnBhdXNlZCYmZS5uZXR3b3JrU3RhdGU8PWUuSEFWRV9NRVRBREFUQT8odGhpcy5lbF8ucGxheSgpLHRoaXMuc2V0VGltZW91dChmdW5jdGlvbigpe2UucGF1c2UoKSxlLndlYmtpdEVudGVyRnVsbFNjcmVlbigpfSwwKSk6ZS53ZWJraXRFbnRlckZ1bGxTY3JlZW4oKX0sZS5leGl0RnVsbFNjcmVlbj1mdW5jdGlvbigpe3RoaXMuZWxfLndlYmtpdEV4aXRGdWxsU2NyZWVuKCl9LGUuc3JjPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuIHRoaXMuZWxfLnNyYzt0aGlzLnNldFNyYyhlKX0sZS5yZXNldD1mdW5jdGlvbigpe2EucmVzZXRNZWRpYUVsZW1lbnQodGhpcy5lbF8pfSxlLmN1cnJlbnRTcmM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdXJyZW50U291cmNlXz90aGlzLmN1cnJlbnRTb3VyY2VfLnNyYzp0aGlzLmVsXy5jdXJyZW50U3JjfSxlLnNldENvbnRyb2xzPWZ1bmN0aW9uKGUpe3RoaXMuZWxfLmNvbnRyb2xzPSEhZX0sZS5hZGRUZXh0VHJhY2s9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcz90aGlzLmVsXy5hZGRUZXh0VHJhY2soZSx0LG4pOnUucHJvdG90eXBlLmFkZFRleHRUcmFjay5jYWxsKHRoaXMsZSx0LG4pfSxlLmNyZWF0ZVJlbW90ZVRleHRUcmFjaz1mdW5jdGlvbihlKXtpZighdGhpcy5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3MpcmV0dXJuIHUucHJvdG90eXBlLmNyZWF0ZVJlbW90ZVRleHRUcmFjay5jYWxsKHRoaXMsZSk7dmFyIHQ9ZC5jcmVhdGVFbGVtZW50KFwidHJhY2tcIik7cmV0dXJuIGUua2luZCYmKHQua2luZD1lLmtpbmQpLGUubGFiZWwmJih0LmxhYmVsPWUubGFiZWwpLChlLmxhbmd1YWdlfHxlLnNyY2xhbmcpJiYodC5zcmNsYW5nPWUubGFuZ3VhZ2V8fGUuc3JjbGFuZyksZS5kZWZhdWx0JiYodC5kZWZhdWx0PWUuZGVmYXVsdCksZS5pZCYmKHQuaWQ9ZS5pZCksZS5zcmMmJih0LnNyYz1lLnNyYyksdH0sZS5hZGRSZW1vdGVUZXh0VHJhY2s9ZnVuY3Rpb24oZSx0KXt2YXIgbj11LnByb3RvdHlwZS5hZGRSZW1vdGVUZXh0VHJhY2suY2FsbCh0aGlzLGUsdCk7cmV0dXJuIHRoaXMuZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzJiZ0aGlzLmVsKCkuYXBwZW5kQ2hpbGQobiksbn0sZS5yZW1vdmVSZW1vdGVUZXh0VHJhY2s9ZnVuY3Rpb24oZSl7aWYodS5wcm90b3R5cGUucmVtb3ZlUmVtb3RlVGV4dFRyYWNrLmNhbGwodGhpcyxlKSx0aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcylmb3IodmFyIHQ9dGhpcy4kJChcInRyYWNrXCIpLG49dC5sZW5ndGg7bi0tOyllIT09dFtuXSYmZSE9PXRbbl0udHJhY2t8fHRoaXMuZWwoKS5yZW1vdmVDaGlsZCh0W25dKX0sZS5nZXRWaWRlb1BsYXliYWNrUXVhbGl0eT1mdW5jdGlvbigpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuZWwoKS5nZXRWaWRlb1BsYXliYWNrUXVhbGl0eSlyZXR1cm4gdGhpcy5lbCgpLmdldFZpZGVvUGxheWJhY2tRdWFsaXR5KCk7dmFyIGU9e307cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHRoaXMuZWwoKS53ZWJraXREcm9wcGVkRnJhbWVDb3VudCYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHRoaXMuZWwoKS53ZWJraXREZWNvZGVkRnJhbWVDb3VudCYmKGUuZHJvcHBlZFZpZGVvRnJhbWVzPXRoaXMuZWwoKS53ZWJraXREcm9wcGVkRnJhbWVDb3VudCxlLnRvdGFsVmlkZW9GcmFtZXM9dGhpcy5lbCgpLndlYmtpdERlY29kZWRGcmFtZUNvdW50KSxoLnBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBoLnBlcmZvcm1hbmNlLm5vdz9lLmNyZWF0aW9uVGltZT1oLnBlcmZvcm1hbmNlLm5vdygpOmgucGVyZm9ybWFuY2UmJmgucGVyZm9ybWFuY2UudGltaW5nJiZcIm51bWJlclwiPT10eXBlb2YgaC5wZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0JiYoZS5jcmVhdGlvblRpbWU9aC5EYXRlLm5vdygpLWgucGVyZm9ybWFuY2UudGltaW5nLm5hdmlnYXRpb25TdGFydCksZX0sYX0oZWkpO2lmKEMoKSl7S3IuVEVTVF9WSUQ9ZC5jcmVhdGVFbGVtZW50KFwidmlkZW9cIik7dmFyIFVyPWQuY3JlYXRlRWxlbWVudChcInRyYWNrXCIpO1VyLmtpbmQ9XCJjYXB0aW9uc1wiLFVyLnNyY2xhbmc9XCJlblwiLFVyLmxhYmVsPVwiRW5nbGlzaFwiLEtyLlRFU1RfVklELmFwcGVuZENoaWxkKFVyKX1Lci5pc1N1cHBvcnRlZD1mdW5jdGlvbigpe3RyeXtLci5URVNUX1ZJRC52b2x1bWU9LjV9Y2F0Y2goZSl7cmV0dXJuITF9cmV0dXJuISghS3IuVEVTVF9WSUR8fCFLci5URVNUX1ZJRC5jYW5QbGF5VHlwZSl9LEtyLmNhblBsYXlUeXBlPWZ1bmN0aW9uKGUpe3JldHVybiBLci5URVNUX1ZJRC5jYW5QbGF5VHlwZShlKX0sS3IuY2FuUGxheVNvdXJjZT1mdW5jdGlvbihlLHQpe3JldHVybiBLci5jYW5QbGF5VHlwZShlLnR5cGUpfSxLci5jYW5Db250cm9sVm9sdW1lPWZ1bmN0aW9uKCl7dHJ5e3ZhciBlPUtyLlRFU1RfVklELnZvbHVtZTtyZXR1cm4gS3IuVEVTVF9WSUQudm9sdW1lPWUvMisuMSxlIT09S3IuVEVTVF9WSUQudm9sdW1lfWNhdGNoKGUpe3JldHVybiExfX0sS3IuY2FuTXV0ZVZvbHVtZT1mdW5jdGlvbigpe3RyeXt2YXIgZT1Lci5URVNUX1ZJRC5tdXRlZDtyZXR1cm4gS3IuVEVTVF9WSUQubXV0ZWQ9IWUsS3IuVEVTVF9WSUQubXV0ZWQ/UihLci5URVNUX1ZJRCxcIm11dGVkXCIsXCJtdXRlZFwiKTpCKEtyLlRFU1RfVklELFwibXV0ZWRcIiksZSE9PUtyLlRFU1RfVklELm11dGVkfWNhdGNoKGUpe3JldHVybiExfX0sS3IuY2FuQ29udHJvbFBsYXliYWNrUmF0ZT1mdW5jdGlvbigpe2lmKEplJiZpdCYmcnQ8NTgpcmV0dXJuITE7dHJ5e3ZhciBlPUtyLlRFU1RfVklELnBsYXliYWNrUmF0ZTtyZXR1cm4gS3IuVEVTVF9WSUQucGxheWJhY2tSYXRlPWUvMisuMSxlIT09S3IuVEVTVF9WSUQucGxheWJhY2tSYXRlfWNhdGNoKGUpe3JldHVybiExfX0sS3IuY2FuT3ZlcnJpZGVBdHRyaWJ1dGVzPWZ1bmN0aW9uKCl7dHJ5e3ZhciBlPWZ1bmN0aW9uKCl7fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZC5jcmVhdGVFbGVtZW50KFwidmlkZW9cIiksXCJzcmNcIix7Z2V0OmUsc2V0OmV9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZC5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIiksXCJzcmNcIix7Z2V0OmUsc2V0OmV9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZC5jcmVhdGVFbGVtZW50KFwidmlkZW9cIiksXCJpbm5lckhUTUxcIix7Z2V0OmUsc2V0OmV9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZC5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIiksXCJpbm5lckhUTUxcIix7Z2V0OmUsc2V0OmV9KX1jYXRjaChlKXtyZXR1cm4hMX1yZXR1cm4hMH0sS3Iuc3VwcG9ydHNOYXRpdmVUZXh0VHJhY2tzPWZ1bmN0aW9uKCl7cmV0dXJuIGF0fHxHZSYmaXR9LEtyLnN1cHBvcnRzTmF0aXZlVmlkZW9UcmFja3M9ZnVuY3Rpb24oKXtyZXR1cm4hKCFLci5URVNUX1ZJRHx8IUtyLlRFU1RfVklELnZpZGVvVHJhY2tzKX0sS3Iuc3VwcG9ydHNOYXRpdmVBdWRpb1RyYWNrcz1mdW5jdGlvbigpe3JldHVybiEoIUtyLlRFU1RfVklEfHwhS3IuVEVTVF9WSUQuYXVkaW9UcmFja3MpfSxLci5FdmVudHM9W1wibG9hZHN0YXJ0XCIsXCJzdXNwZW5kXCIsXCJhYm9ydFwiLFwiZXJyb3JcIixcImVtcHRpZWRcIixcInN0YWxsZWRcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRkYXRhXCIsXCJjYW5wbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwicGxheWluZ1wiLFwid2FpdGluZ1wiLFwic2Vla2luZ1wiLFwic2Vla2VkXCIsXCJlbmRlZFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcInRpbWV1cGRhdGVcIixcInByb2dyZXNzXCIsXCJwbGF5XCIsXCJwYXVzZVwiLFwicmF0ZWNoYW5nZVwiLFwicmVzaXplXCIsXCJ2b2x1bWVjaGFuZ2VcIl0sS3IucHJvdG90eXBlLmZlYXR1cmVzVm9sdW1lQ29udHJvbD1Lci5jYW5Db250cm9sVm9sdW1lKCksS3IucHJvdG90eXBlLmZlYXR1cmVzTXV0ZUNvbnRyb2w9S3IuY2FuTXV0ZVZvbHVtZSgpLEtyLnByb3RvdHlwZS5mZWF0dXJlc1BsYXliYWNrUmF0ZT1Lci5jYW5Db250cm9sUGxheWJhY2tSYXRlKCksS3IucHJvdG90eXBlLmZlYXR1cmVzU291cmNlc2V0PUtyLmNhbk92ZXJyaWRlQXR0cmlidXRlcygpLEtyLnByb3RvdHlwZS5tb3ZpbmdNZWRpYUVsZW1lbnRJbkRPTT0hR2UsS3IucHJvdG90eXBlLmZlYXR1cmVzRnVsbHNjcmVlblJlc2l6ZT0hMCxLci5wcm90b3R5cGUuZmVhdHVyZXNQcm9ncmVzc0V2ZW50cz0hMCxLci5wcm90b3R5cGUuZmVhdHVyZXNUaW1ldXBkYXRlRXZlbnRzPSEwLEtyLnByb3RvdHlwZS5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3M9S3Iuc3VwcG9ydHNOYXRpdmVUZXh0VHJhY2tzKCksS3IucHJvdG90eXBlLmZlYXR1cmVzTmF0aXZlVmlkZW9UcmFja3M9S3Iuc3VwcG9ydHNOYXRpdmVWaWRlb1RyYWNrcygpLEtyLnByb3RvdHlwZS5mZWF0dXJlc05hdGl2ZUF1ZGlvVHJhY2tzPUtyLnN1cHBvcnRzTmF0aXZlQXVkaW9UcmFja3MoKTt2YXIgcXI9S3IuVEVTVF9WSUQmJktyLlRFU1RfVklELmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jYW5QbGF5VHlwZSxYcj0vXmFwcGxpY2F0aW9uXFwvKD86eC18dm5kXFwuYXBwbGVcXC4pbXBlZ3VybC9pO2Z1bmN0aW9uICRyKCl7dmFyIGU9dChbXCJcXG4gICAgICAgIFVzaW5nIHRoZSB0ZWNoIGRpcmVjdGx5IGNhbiBiZSBkYW5nZXJvdXMuIEkgaG9wZSB5b3Uga25vdyB3aGF0IHlvdSdyZSBkb2luZy5cXG4gICAgICAgIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy92aWRlby5qcy9pc3N1ZXMvMjYxNyBmb3IgbW9yZSBpbmZvLlxcbiAgICAgIFwiXSk7cmV0dXJuICRyPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LGV9S3IucGF0Y2hDYW5QbGF5VHlwZT1mdW5jdGlvbigpezQ8PVplJiYhdHQmJiFpdCYmKEtyLlRFU1RfVklELmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jYW5QbGF5VHlwZT1mdW5jdGlvbihlKXtyZXR1cm4gZSYmWHIudGVzdChlKT9cIm1heWJlXCI6cXIuY2FsbCh0aGlzLGUpfSl9LEtyLnVucGF0Y2hDYW5QbGF5VHlwZT1mdW5jdGlvbigpe3ZhciBlPUtyLlRFU1RfVklELmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jYW5QbGF5VHlwZTtyZXR1cm4gS3IuVEVTVF9WSUQuY29uc3RydWN0b3IucHJvdG90eXBlLmNhblBsYXlUeXBlPXFyLGV9LEtyLnBhdGNoQ2FuUGxheVR5cGUoKSxLci5kaXNwb3NlTWVkaWFFbGVtZW50PWZ1bmN0aW9uKGUpe2lmKGUpe2ZvcihlLnBhcmVudE5vZGUmJmUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKTtlLmhhc0NoaWxkTm9kZXMoKTspZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpO2UucmVtb3ZlQXR0cmlidXRlKFwic3JjXCIpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUubG9hZCYmZnVuY3Rpb24oKXt0cnl7ZS5sb2FkKCl9Y2F0Y2goZSl7fX0oKX19LEtyLnJlc2V0TWVkaWFFbGVtZW50PWZ1bmN0aW9uKGUpe2lmKGUpe2Zvcih2YXIgdD1lLnF1ZXJ5U2VsZWN0b3JBbGwoXCJzb3VyY2VcIiksbj10Lmxlbmd0aDtuLS07KWUucmVtb3ZlQ2hpbGQodFtuXSk7ZS5yZW1vdmVBdHRyaWJ1dGUoXCJzcmNcIiksXCJmdW5jdGlvblwiPT10eXBlb2YgZS5sb2FkJiZmdW5jdGlvbigpe3RyeXtlLmxvYWQoKX1jYXRjaChlKXt9fSgpfX0sW1wibXV0ZWRcIixcImRlZmF1bHRNdXRlZFwiLFwiYXV0b3BsYXlcIixcImNvbnRyb2xzXCIsXCJsb29wXCIsXCJwbGF5c2lubGluZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe0tyLnByb3RvdHlwZVtlXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVsX1tlXXx8dGhpcy5lbF8uaGFzQXR0cmlidXRlKGUpfX0pLFtcIm11dGVkXCIsXCJkZWZhdWx0TXV0ZWRcIixcImF1dG9wbGF5XCIsXCJsb29wXCIsXCJwbGF5c2lubGluZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe0tyLnByb3RvdHlwZVtcInNldFwiK1JlKHQpXT1mdW5jdGlvbihlKXsodGhpcy5lbF9bdF09ZSk/dGhpcy5lbF8uc2V0QXR0cmlidXRlKHQsdCk6dGhpcy5lbF8ucmVtb3ZlQXR0cmlidXRlKHQpfX0pLFtcInBhdXNlZFwiLFwiY3VycmVudFRpbWVcIixcImJ1ZmZlcmVkXCIsXCJ2b2x1bWVcIixcInBvc3RlclwiLFwicHJlbG9hZFwiLFwiZXJyb3JcIixcInNlZWtpbmdcIixcInNlZWthYmxlXCIsXCJlbmRlZFwiLFwicGxheWJhY2tSYXRlXCIsXCJkZWZhdWx0UGxheWJhY2tSYXRlXCIsXCJwbGF5ZWRcIixcIm5ldHdvcmtTdGF0ZVwiLFwicmVhZHlTdGF0ZVwiLFwidmlkZW9XaWR0aFwiLFwidmlkZW9IZWlnaHRcIl0uZm9yRWFjaChmdW5jdGlvbihlKXtLci5wcm90b3R5cGVbZV09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbF9bZV19fSksW1widm9sdW1lXCIsXCJzcmNcIixcInBvc3RlclwiLFwicHJlbG9hZFwiLFwicGxheWJhY2tSYXRlXCIsXCJkZWZhdWx0UGxheWJhY2tSYXRlXCJdLmZvckVhY2goZnVuY3Rpb24odCl7S3IucHJvdG90eXBlW1wic2V0XCIrUmUodCldPWZ1bmN0aW9uKGUpe3RoaXMuZWxfW3RdPWV9fSksW1wicGF1c2VcIixcImxvYWRcIixcInBsYXlcIl0uZm9yRWFjaChmdW5jdGlvbihlKXtLci5wcm90b3R5cGVbZV09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbF9bZV0oKX19KSxlaS53aXRoU291cmNlSGFuZGxlcnMoS3IpLEtyLm5hdGl2ZVNvdXJjZUhhbmRsZXI9e30sS3IubmF0aXZlU291cmNlSGFuZGxlci5jYW5QbGF5VHlwZT1mdW5jdGlvbihlKXt0cnl7cmV0dXJuIEtyLlRFU1RfVklELmNhblBsYXlUeXBlKGUpfWNhdGNoKGUpe3JldHVyblwiXCJ9fSxLci5uYXRpdmVTb3VyY2VIYW5kbGVyLmNhbkhhbmRsZVNvdXJjZT1mdW5jdGlvbihlLHQpe2lmKGUudHlwZSlyZXR1cm4gS3IubmF0aXZlU291cmNlSGFuZGxlci5jYW5QbGF5VHlwZShlLnR5cGUpO2lmKGUuc3JjKXt2YXIgbj1ZdChlLnNyYyk7cmV0dXJuIEtyLm5hdGl2ZVNvdXJjZUhhbmRsZXIuY2FuUGxheVR5cGUoXCJ2aWRlby9cIituKX1yZXR1cm5cIlwifSxLci5uYXRpdmVTb3VyY2VIYW5kbGVyLmhhbmRsZVNvdXJjZT1mdW5jdGlvbihlLHQsbil7dC5zZXRTcmMoZS5zcmMpfSxLci5uYXRpdmVTb3VyY2VIYW5kbGVyLmRpc3Bvc2U9ZnVuY3Rpb24oKXt9LEtyLnJlZ2lzdGVyU291cmNlSGFuZGxlcihLci5uYXRpdmVTb3VyY2VIYW5kbGVyKSxlaS5yZWdpc3RlclRlY2goXCJIdG1sNVwiLEtyKTt2YXIgWXI9W1wicHJvZ3Jlc3NcIixcImFib3J0XCIsXCJzdXNwZW5kXCIsXCJlbXB0aWVkXCIsXCJzdGFsbGVkXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkZGF0YVwiLFwidGltZXVwZGF0ZVwiLFwicmVzaXplXCIsXCJ2b2x1bWVjaGFuZ2VcIixcInRleHR0cmFja2NoYW5nZVwiXSxHcj17Y2FucGxheTpcIkNhblBsYXlcIixjYW5wbGF5dGhyb3VnaDpcIkNhblBsYXlUaHJvdWdoXCIscGxheWluZzpcIlBsYXlpbmdcIixzZWVrZWQ6XCJTZWVrZWRcIn0sUXI9W1widGlueVwiLFwieHNtYWxsXCIsXCJzbWFsbFwiLFwibWVkaXVtXCIsXCJsYXJnZVwiLFwieGxhcmdlXCIsXCJodWdlXCJdLEpyPXt9O1FyLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9XCJ4XCI9PT1lLmNoYXJBdCgwKT9cIngtXCIrZS5zdWJzdHJpbmcoMSk6ZTtKcltlXT1cInZqcy1sYXlvdXQtXCIrdH0pO3ZhciBacj17dGlueToyMTAseHNtYWxsOjMyMCxzbWFsbDo0MjUsbWVkaXVtOjc2OCxsYXJnZToxNDQwLHhsYXJnZToyNTYwLGh1Z2U6MS8wfSxlcz1mdW5jdGlvbih1KXtmdW5jdGlvbiBjKGUsdCxuKXt2YXIgaTtpZihlLmlkPWUuaWR8fHQuaWR8fFwidmpzX3ZpZGVvX1wiK2VlKCksKHQ9XyhjLmdldFRhZ1NldHRpbmdzKGUpLHQpKS5pbml0Q2hpbGRyZW49ITEsdC5jcmVhdGVFbD0hMSx0LmV2ZW50ZWQ9ITEsdC5yZXBvcnRUb3VjaEFjdGl2aXR5PSExLCF0Lmxhbmd1YWdlKWlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuY2xvc2VzdCl7dmFyIHI9ZS5jbG9zZXN0KFwiW2xhbmddXCIpO3ImJnIuZ2V0QXR0cmlidXRlJiYodC5sYW5ndWFnZT1yLmdldEF0dHJpYnV0ZShcImxhbmdcIikpfWVsc2UgZm9yKHZhciBzPWU7cyYmMT09PXMubm9kZVR5cGU7KXtpZihJKHMpLmhhc093blByb3BlcnR5KFwibGFuZ1wiKSl7dC5sYW5ndWFnZT1zLmdldEF0dHJpYnV0ZShcImxhbmdcIik7YnJlYWt9cz1zLnBhcmVudE5vZGV9aWYoKGk9dS5jYWxsKHRoaXMsbnVsbCx0LG4pfHx0aGlzKS5ib3VuZERvY3VtZW50RnVsbHNjcmVlbkNoYW5nZV89Q2Uodih2KGkpKSxpLmRvY3VtZW50RnVsbHNjcmVlbkNoYW5nZV8pLGkuYm91bmRGdWxsV2luZG93T25Fc2NLZXlfPUNlKHYodihpKSksaS5mdWxsV2luZG93T25Fc2NLZXkpLGkuYm91bmRIYW5kbGVLZXlQcmVzc189Q2Uodih2KGkpKSxpLmhhbmRsZUtleVByZXNzKSxpLmxvZz15KGkuaWRfKSxpLmlzUG9zdGVyRnJvbVRlY2hfPSExLGkucXVldWVkQ2FsbGJhY2tzXz1bXSxpLmlzUmVhZHlfPSExLGkuaGFzU3RhcnRlZF89ITEsaS51c2VyQWN0aXZlXz0hMSwhaS5vcHRpb25zX3x8IWkub3B0aW9uc18udGVjaE9yZGVyfHwhaS5vcHRpb25zXy50ZWNoT3JkZXIubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIk5vIHRlY2hPcmRlciBzcGVjaWZpZWQuIERpZCB5b3Ugb3ZlcndyaXRlIHZpZGVvanMub3B0aW9ucyBpbnN0ZWFkIG9mIGp1c3QgY2hhbmdpbmcgdGhlIHByb3BlcnRpZXMgeW91IHdhbnQgdG8gb3ZlcnJpZGU/XCIpO2lmKGkudGFnPWUsaS50YWdBdHRyaWJ1dGVzPWUmJkkoZSksaS5sYW5ndWFnZShpLm9wdGlvbnNfLmxhbmd1YWdlKSx0Lmxhbmd1YWdlcyl7dmFyIG89e307T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModC5sYW5ndWFnZXMpLmZvckVhY2goZnVuY3Rpb24oZSl7b1tlLnRvTG93ZXJDYXNlKCldPXQubGFuZ3VhZ2VzW2VdfSksaS5sYW5ndWFnZXNfPW99ZWxzZSBpLmxhbmd1YWdlc189Yy5wcm90b3R5cGUub3B0aW9uc18ubGFuZ3VhZ2VzO2kucmVzZXRDYWNoZV8oKSxpLnBvc3Rlcl89dC5wb3N0ZXJ8fFwiXCIsaS5jb250cm9sc189ISF0LmNvbnRyb2xzLGUuY29udHJvbHM9ITEsZS5yZW1vdmVBdHRyaWJ1dGUoXCJjb250cm9sc1wiKSxpLmNoYW5naW5nU3JjXz0hMSxpLnBsYXlDYWxsYmFja3NfPVtdLGkucGxheVRlcm1pbmF0ZWRRdWV1ZV89W10sZS5oYXNBdHRyaWJ1dGUoXCJhdXRvcGxheVwiKT9pLmF1dG9wbGF5KCEwKTppLmF1dG9wbGF5KGkub3B0aW9uc18uYXV0b3BsYXkpLHQucGx1Z2lucyYmT2JqZWN0LmtleXModC5wbHVnaW5zKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGlbZV0pdGhyb3cgbmV3IEVycm9yKCdwbHVnaW4gXCInK2UrJ1wiIGRvZXMgbm90IGV4aXN0Jyl9KSxpLnNjcnViYmluZ189ITEsaS5lbF89aS5jcmVhdGVFbCgpLE9lKHYodihpKSkse2V2ZW50QnVzS2V5OlwiZWxfXCJ9KSxpLmZsdWlkXyYmaS5vbihcInBsYXllcnJlc2V0XCIsaS51cGRhdGVTdHlsZUVsXyk7dmFyIGE9QmUoaS5vcHRpb25zXyk7dC5wbHVnaW5zJiZPYmplY3Qua2V5cyh0LnBsdWdpbnMpLmZvckVhY2goZnVuY3Rpb24oZSl7aVtlXSh0LnBsdWdpbnNbZV0pfSksaS5vcHRpb25zXy5wbGF5ZXJPcHRpb25zPWEsaS5taWRkbGV3YXJlXz1bXSxpLmluaXRDaGlsZHJlbigpLGkuaXNBdWRpbyhcImF1ZGlvXCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLGkuY29udHJvbHMoKT9pLmFkZENsYXNzKFwidmpzLWNvbnRyb2xzLWVuYWJsZWRcIik6aS5hZGRDbGFzcyhcInZqcy1jb250cm9scy1kaXNhYmxlZFwiKSxpLmVsXy5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsXCJyZWdpb25cIiksaS5pc0F1ZGlvKCk/aS5lbF8uc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLGkubG9jYWxpemUoXCJBdWRpbyBQbGF5ZXJcIikpOmkuZWxfLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIixpLmxvY2FsaXplKFwiVmlkZW8gUGxheWVyXCIpKSxpLmlzQXVkaW8oKSYmaS5hZGRDbGFzcyhcInZqcy1hdWRpb1wiKSxpLmZsZXhOb3RTdXBwb3J0ZWRfKCkmJmkuYWRkQ2xhc3MoXCJ2anMtbm8tZmxleFwiKSxsdCYmaS5hZGRDbGFzcyhcInZqcy10b3VjaC1lbmFibGVkXCIpLEdlfHxpLmFkZENsYXNzKFwidmpzLXdvcmtpbmdob3ZlclwiKSxjLnBsYXllcnNbaS5pZF9dPXYodihpKSk7dmFyIGw9cC5zcGxpdChcIi5cIilbMF07cmV0dXJuIGkuYWRkQ2xhc3MoXCJ2anMtdlwiK2wpLGkudXNlckFjdGl2ZSghMCksaS5yZXBvcnRVc2VyQWN0aXZpdHkoKSxpLm9uZShcInBsYXlcIixpLmxpc3RlbkZvclVzZXJBY3Rpdml0eV8pLGkub24oXCJmb2N1c1wiLGkuaGFuZGxlRm9jdXMpLGkub24oXCJibHVyXCIsaS5oYW5kbGVCbHVyKSxpLm9uKFwic3RhZ2VjbGlja1wiLGkuaGFuZGxlU3RhZ2VDbGlja18pLGkuYnJlYWtwb2ludHMoaS5vcHRpb25zXy5icmVha3BvaW50cyksaS5yZXNwb25zaXZlKGkub3B0aW9uc18ucmVzcG9uc2l2ZSksaX1mKGMsdSk7dmFyIGU9Yy5wcm90b3R5cGU7cmV0dXJuIGUuZGlzcG9zZT1mdW5jdGlvbigpe3ZhciBpPXRoaXM7dGhpcy50cmlnZ2VyKFwiZGlzcG9zZVwiKSx0aGlzLm9mZihcImRpc3Bvc2VcIiksZGUoZCx2dC5mdWxsc2NyZWVuY2hhbmdlLHRoaXMuYm91bmREb2N1bWVudEZ1bGxzY3JlZW5DaGFuZ2VfKSxkZShkLFwia2V5ZG93blwiLHRoaXMuYm91bmRGdWxsV2luZG93T25Fc2NLZXlfKSxkZShkLFwia2V5ZG93blwiLHRoaXMuYm91bmRIYW5kbGVLZXlQcmVzc18pLHRoaXMuc3R5bGVFbF8mJnRoaXMuc3R5bGVFbF8ucGFyZW50Tm9kZSYmKHRoaXMuc3R5bGVFbF8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnN0eWxlRWxfKSx0aGlzLnN0eWxlRWxfPW51bGwpLGMucGxheWVyc1t0aGlzLmlkX109bnVsbCx0aGlzLnRhZyYmdGhpcy50YWcucGxheWVyJiYodGhpcy50YWcucGxheWVyPW51bGwpLHRoaXMuZWxfJiZ0aGlzLmVsXy5wbGF5ZXImJih0aGlzLmVsXy5wbGF5ZXI9bnVsbCksdGhpcy50ZWNoXyYmKHRoaXMudGVjaF8uZGlzcG9zZSgpLHRoaXMuaXNQb3N0ZXJGcm9tVGVjaF89ITEsdGhpcy5wb3N0ZXJfPVwiXCIpLHRoaXMucGxheWVyRWxJbmdlc3RfJiYodGhpcy5wbGF5ZXJFbEluZ2VzdF89bnVsbCksdGhpcy50YWcmJih0aGlzLnRhZz1udWxsKSxuaVt0aGlzLmlkKCldPW51bGwsd24ubmFtZXMuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD13bltlXSxuPWlbdC5nZXR0ZXJOYW1lXSgpO24mJm4ub2ZmJiZuLm9mZigpfSksdS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpfSxlLmNyZWF0ZUVsPWZ1bmN0aW9uKCl7dmFyIHQsbj10aGlzLnRhZyxlPXRoaXMucGxheWVyRWxJbmdlc3RfPW4ucGFyZW50Tm9kZSYmbi5wYXJlbnROb2RlLmhhc0F0dHJpYnV0ZSYmbi5wYXJlbnROb2RlLmhhc0F0dHJpYnV0ZShcImRhdGEtdmpzLXBsYXllclwiKSxpPVwidmlkZW8tanNcIj09PXRoaXMudGFnLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtlP3Q9dGhpcy5lbF89bi5wYXJlbnROb2RlOml8fCh0PXRoaXMuZWxfPXUucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImRpdlwiKSk7dmFyIHI9SShuKTtpZihpKXtmb3IodD10aGlzLmVsXz1uLG49dGhpcy50YWc9ZC5jcmVhdGVFbGVtZW50KFwidmlkZW9cIik7dC5jaGlsZHJlbi5sZW5ndGg7KW4uYXBwZW5kQ2hpbGQodC5maXJzdENoaWxkKTtQKHQsXCJ2aWRlby1qc1wiKXx8TCh0LFwidmlkZW8tanNcIiksdC5hcHBlbmRDaGlsZChuKSxlPXRoaXMucGxheWVyRWxJbmdlc3RfPXQsT2JqZWN0LmtleXModCkuZm9yRWFjaChmdW5jdGlvbihlKXtuW2VdPXRbZV19KX1pZihuLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsXCItMVwiKSxyLnRhYmluZGV4PVwiLTFcIixzdCYmKG4uc2V0QXR0cmlidXRlKFwicm9sZVwiLFwiYXBwbGljYXRpb25cIiksci5yb2xlPVwiYXBwbGljYXRpb25cIiksbi5yZW1vdmVBdHRyaWJ1dGUoXCJ3aWR0aFwiKSxuLnJlbW92ZUF0dHJpYnV0ZShcImhlaWdodFwiKSxcIndpZHRoXCJpbiByJiZkZWxldGUgci53aWR0aCxcImhlaWdodFwiaW4gciYmZGVsZXRlIHIuaGVpZ2h0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHIpLmZvckVhY2goZnVuY3Rpb24oZSl7aSYmXCJjbGFzc1wiPT09ZXx8dC5zZXRBdHRyaWJ1dGUoZSxyW2VdKSxpJiZuLnNldEF0dHJpYnV0ZShlLHJbZV0pfSksbi5wbGF5ZXJJZD1uLmlkLG4uaWQrPVwiX2h0bWw1X2FwaVwiLG4uY2xhc3NOYW1lPVwidmpzLXRlY2hcIixuLnBsYXllcj10LnBsYXllcj10aGlzLHRoaXMuYWRkQ2xhc3MoXCJ2anMtcGF1c2VkXCIpLCEwIT09aC5WSURFT0pTX05PX0RZTkFNSUNfU1RZTEUpe3RoaXMuc3R5bGVFbF89VGUoXCJ2anMtc3R5bGVzLWRpbWVuc2lvbnNcIik7dmFyIHM9RyhcIi52anMtc3R5bGVzLWRlZmF1bHRzXCIpLG89RyhcImhlYWRcIik7by5pbnNlcnRCZWZvcmUodGhpcy5zdHlsZUVsXyxzP3MubmV4dFNpYmxpbmc6by5maXJzdENoaWxkKX10aGlzLmZpbGxfPSExLHRoaXMuZmx1aWRfPSExLHRoaXMud2lkdGgodGhpcy5vcHRpb25zXy53aWR0aCksdGhpcy5oZWlnaHQodGhpcy5vcHRpb25zXy5oZWlnaHQpLHRoaXMuZmlsbCh0aGlzLm9wdGlvbnNfLmZpbGwpLHRoaXMuZmx1aWQodGhpcy5vcHRpb25zXy5mbHVpZCksdGhpcy5hc3BlY3RSYXRpbyh0aGlzLm9wdGlvbnNfLmFzcGVjdFJhdGlvKTtmb3IodmFyIGE9bi5nZXRFbGVtZW50c0J5VGFnTmFtZShcImFcIiksbD0wO2w8YS5sZW5ndGg7bCsrKXt2YXIgYz1hLml0ZW0obCk7TChjLFwidmpzLWhpZGRlblwiKSxjLnNldEF0dHJpYnV0ZShcImhpZGRlblwiLFwiaGlkZGVuXCIpfXJldHVybiBuLmluaXROZXR3b3JrU3RhdGVfPW4ubmV0d29ya1N0YXRlLG4ucGFyZW50Tm9kZSYmIWUmJm4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCxuKSxBKG4sdCksdGhpcy5jaGlsZHJlbl8udW5zaGlmdChuKSx0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoXCJsYW5nXCIsdGhpcy5sYW5ndWFnZV8pLHRoaXMuZWxfPXR9LGUud2lkdGg9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZGltZW5zaW9uKFwid2lkdGhcIixlKX0sZS5oZWlnaHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZGltZW5zaW9uKFwiaGVpZ2h0XCIsZSl9LGUuZGltZW5zaW9uPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZStcIl9cIjtpZih2b2lkIDA9PT10KXJldHVybiB0aGlzW25dfHwwO2lmKFwiXCI9PT10KXJldHVybiB0aGlzW25dPXZvaWQgMCx2b2lkIHRoaXMudXBkYXRlU3R5bGVFbF8oKTt2YXIgaT1wYXJzZUZsb2F0KHQpO2lzTmFOKGkpP2cuZXJyb3IoJ0ltcHJvcGVyIHZhbHVlIFwiJyt0KydcIiBzdXBwbGllZCBmb3IgZm9yICcrZSk6KHRoaXNbbl09aSx0aGlzLnVwZGF0ZVN0eWxlRWxfKCkpfSxlLmZsdWlkPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuISF0aGlzLmZsdWlkXzt2YXIgdCxuO3RoaXMuZmx1aWRfPSEhZSxTZSh0aGlzKSYmdGhpcy5vZmYoXCJwbGF5ZXJyZXNldFwiLHRoaXMudXBkYXRlU3R5bGVFbF8pLGU/KHRoaXMuYWRkQ2xhc3MoXCJ2anMtZmx1aWRcIiksdGhpcy5maWxsKCExKSxTZSh0PWZ1bmN0aW9uKCl7dGhpcy5vbihcInBsYXllcnJlc2V0XCIsdGhpcy51cGRhdGVTdHlsZUVsXyl9KT9uKCk6KHQuZXZlbnRlZENhbGxiYWNrc3x8KHQuZXZlbnRlZENhbGxiYWNrcz1bXSksdC5ldmVudGVkQ2FsbGJhY2tzLnB1c2gobikpKTp0aGlzLnJlbW92ZUNsYXNzKFwidmpzLWZsdWlkXCIpLHRoaXMudXBkYXRlU3R5bGVFbF8oKX0sZS5maWxsPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuISF0aGlzLmZpbGxfO3RoaXMuZmlsbF89ISFlLGU/KHRoaXMuYWRkQ2xhc3MoXCJ2anMtZmlsbFwiKSx0aGlzLmZsdWlkKCExKSk6dGhpcy5yZW1vdmVDbGFzcyhcInZqcy1maWxsXCIpfSxlLmFzcGVjdFJhdGlvPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuIHRoaXMuYXNwZWN0UmF0aW9fO2lmKCEvXlxcZCtcXDpcXGQrJC8udGVzdChlKSl0aHJvdyBuZXcgRXJyb3IoXCJJbXByb3BlciB2YWx1ZSBzdXBwbGllZCBmb3IgYXNwZWN0IHJhdGlvLiBUaGUgZm9ybWF0IHNob3VsZCBiZSB3aWR0aDpoZWlnaHQsIGZvciBleGFtcGxlIDE2OjkuXCIpO3RoaXMuYXNwZWN0UmF0aW9fPWUsdGhpcy5mbHVpZCghMCksdGhpcy51cGRhdGVTdHlsZUVsXygpfSxlLnVwZGF0ZVN0eWxlRWxfPWZ1bmN0aW9uKCl7aWYoITAhPT1oLlZJREVPSlNfTk9fRFlOQU1JQ19TVFlMRSl7dmFyIGUsdCxuLGk9KHZvaWQgMCE9PXRoaXMuYXNwZWN0UmF0aW9fJiZcImF1dG9cIiE9PXRoaXMuYXNwZWN0UmF0aW9fP3RoaXMuYXNwZWN0UmF0aW9fOjA8dGhpcy52aWRlb1dpZHRoKCk/dGhpcy52aWRlb1dpZHRoKCkrXCI6XCIrdGhpcy52aWRlb0hlaWdodCgpOlwiMTY6OVwiKS5zcGxpdChcIjpcIikscj1pWzFdL2lbMF07ZT12b2lkIDAhPT10aGlzLndpZHRoXz90aGlzLndpZHRoXzp2b2lkIDAhPT10aGlzLmhlaWdodF8/dGhpcy5oZWlnaHRfL3I6dGhpcy52aWRlb1dpZHRoKCl8fDMwMCx0PXZvaWQgMCE9PXRoaXMuaGVpZ2h0Xz90aGlzLmhlaWdodF86ZSpyLG49L15bXmEtekEtWl0vLnRlc3QodGhpcy5pZCgpKT9cImRpbWVuc2lvbnMtXCIrdGhpcy5pZCgpOnRoaXMuaWQoKStcIi1kaW1lbnNpb25zXCIsdGhpcy5hZGRDbGFzcyhuKSxrZSh0aGlzLnN0eWxlRWxfLFwiXFxuICAgICAgLlwiK24rXCIge1xcbiAgICAgICAgd2lkdGg6IFwiK2UrXCJweDtcXG4gICAgICAgIGhlaWdodDogXCIrdCtcInB4O1xcbiAgICAgIH1cXG5cXG4gICAgICAuXCIrbitcIi52anMtZmx1aWQge1xcbiAgICAgICAgcGFkZGluZy10b3A6IFwiKzEwMCpyK1wiJTtcXG4gICAgICB9XFxuICAgIFwiKX1lbHNle3ZhciBzPVwibnVtYmVyXCI9PXR5cGVvZiB0aGlzLndpZHRoXz90aGlzLndpZHRoXzp0aGlzLm9wdGlvbnNfLndpZHRoLG89XCJudW1iZXJcIj09dHlwZW9mIHRoaXMuaGVpZ2h0Xz90aGlzLmhlaWdodF86dGhpcy5vcHRpb25zXy5oZWlnaHQsYT10aGlzLnRlY2hfJiZ0aGlzLnRlY2hfLmVsKCk7YSYmKDA8PXMmJihhLndpZHRoPXMpLDA8PW8mJihhLmhlaWdodD1vKSl9fSxlLmxvYWRUZWNoXz1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7dGhpcy50ZWNoXyYmdGhpcy51bmxvYWRUZWNoXygpO3ZhciBpPVJlKGUpLHI9ZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKStlLnNsaWNlKDEpO1wiSHRtbDVcIiE9PWkmJnRoaXMudGFnJiYoZWkuZ2V0VGVjaChcIkh0bWw1XCIpLmRpc3Bvc2VNZWRpYUVsZW1lbnQodGhpcy50YWcpLHRoaXMudGFnLnBsYXllcj1udWxsLHRoaXMudGFnPW51bGwpLHRoaXMudGVjaE5hbWVfPWksdGhpcy5pc1JlYWR5Xz0hMTt2YXIgcz17c291cmNlOnQsYXV0b3BsYXk6XCJzdHJpbmdcIiE9dHlwZW9mIHRoaXMuYXV0b3BsYXkoKSYmdGhpcy5hdXRvcGxheSgpLG5hdGl2ZUNvbnRyb2xzRm9yVG91Y2g6dGhpcy5vcHRpb25zXy5uYXRpdmVDb250cm9sc0ZvclRvdWNoLHBsYXllcklkOnRoaXMuaWQoKSx0ZWNoSWQ6dGhpcy5pZCgpK1wiX1wiK3IrXCJfYXBpXCIscGxheXNpbmxpbmU6dGhpcy5vcHRpb25zXy5wbGF5c2lubGluZSxwcmVsb2FkOnRoaXMub3B0aW9uc18ucHJlbG9hZCxsb29wOnRoaXMub3B0aW9uc18ubG9vcCxtdXRlZDp0aGlzLm9wdGlvbnNfLm11dGVkLHBvc3Rlcjp0aGlzLnBvc3RlcigpLGxhbmd1YWdlOnRoaXMubGFuZ3VhZ2UoKSxwbGF5ZXJFbEluZ2VzdDp0aGlzLnBsYXllckVsSW5nZXN0X3x8ITEsXCJ2dHQuanNcIjp0aGlzLm9wdGlvbnNfW1widnR0LmpzXCJdLGNhbk92ZXJyaWRlUG9zdGVyOiEhdGhpcy5vcHRpb25zXy50ZWNoQ2FuT3ZlcnJpZGVQb3N0ZXIsZW5hYmxlU291cmNlc2V0OnRoaXMub3B0aW9uc18uZW5hYmxlU291cmNlc2V0fTt3bi5uYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PXduW2VdO3NbdC5nZXR0ZXJOYW1lXT1uW3QucHJpdmF0ZU5hbWVdfSksXyhzLHRoaXMub3B0aW9uc19baV0pLF8ocyx0aGlzLm9wdGlvbnNfW3JdKSxfKHMsdGhpcy5vcHRpb25zX1tlLnRvTG93ZXJDYXNlKCldKSx0aGlzLnRhZyYmKHMudGFnPXRoaXMudGFnKSx0JiZ0LnNyYz09PXRoaXMuY2FjaGVfLnNyYyYmMDx0aGlzLmNhY2hlXy5jdXJyZW50VGltZSYmKHMuc3RhcnRUaW1lPXRoaXMuY2FjaGVfLmN1cnJlbnRUaW1lKTt2YXIgbz1laS5nZXRUZWNoKGUpO2lmKCFvKXRocm93IG5ldyBFcnJvcihcIk5vIFRlY2ggbmFtZWQgJ1wiK2krXCInIGV4aXN0cyEgJ1wiK2krXCInIHNob3VsZCBiZSByZWdpc3RlcmVkIHVzaW5nIHZpZGVvanMucmVnaXN0ZXJUZWNoKCknXCIpO3RoaXMudGVjaF89bmV3IG8ocyksdGhpcy50ZWNoXy5yZWFkeShDZSh0aGlzLHRoaXMuaGFuZGxlVGVjaFJlYWR5XyksITApLGp0KHRoaXMudGV4dFRyYWNrc0pzb25ffHxbXSx0aGlzLnRlY2hfKSxZci5mb3JFYWNoKGZ1bmN0aW9uKGUpe24ub24obi50ZWNoXyxlLG5bXCJoYW5kbGVUZWNoXCIrUmUoZSkrXCJfXCJdKX0pLE9iamVjdC5rZXlzKEdyKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe24ub24obi50ZWNoXyx0LGZ1bmN0aW9uKGUpezA9PT1uLnRlY2hfLnBsYXliYWNrUmF0ZSgpJiZuLnRlY2hfLnNlZWtpbmcoKT9uLnF1ZXVlZENhbGxiYWNrc18ucHVzaCh7Y2FsbGJhY2s6bltcImhhbmRsZVRlY2hcIitHclt0XStcIl9cIl0uYmluZChuKSxldmVudDplfSk6bltcImhhbmRsZVRlY2hcIitHclt0XStcIl9cIl0oZSl9KX0pLHRoaXMub24odGhpcy50ZWNoXyxcImxvYWRzdGFydFwiLHRoaXMuaGFuZGxlVGVjaExvYWRTdGFydF8pLHRoaXMub24odGhpcy50ZWNoXyxcInNvdXJjZXNldFwiLHRoaXMuaGFuZGxlVGVjaFNvdXJjZXNldF8pLHRoaXMub24odGhpcy50ZWNoXyxcIndhaXRpbmdcIix0aGlzLmhhbmRsZVRlY2hXYWl0aW5nXyksdGhpcy5vbih0aGlzLnRlY2hfLFwiZW5kZWRcIix0aGlzLmhhbmRsZVRlY2hFbmRlZF8pLHRoaXMub24odGhpcy50ZWNoXyxcInNlZWtpbmdcIix0aGlzLmhhbmRsZVRlY2hTZWVraW5nXyksdGhpcy5vbih0aGlzLnRlY2hfLFwicGxheVwiLHRoaXMuaGFuZGxlVGVjaFBsYXlfKSx0aGlzLm9uKHRoaXMudGVjaF8sXCJmaXJzdHBsYXlcIix0aGlzLmhhbmRsZVRlY2hGaXJzdFBsYXlfKSx0aGlzLm9uKHRoaXMudGVjaF8sXCJwYXVzZVwiLHRoaXMuaGFuZGxlVGVjaFBhdXNlXyksdGhpcy5vbih0aGlzLnRlY2hfLFwiZHVyYXRpb25jaGFuZ2VcIix0aGlzLmhhbmRsZVRlY2hEdXJhdGlvbkNoYW5nZV8pLHRoaXMub24odGhpcy50ZWNoXyxcImZ1bGxzY3JlZW5jaGFuZ2VcIix0aGlzLmhhbmRsZVRlY2hGdWxsc2NyZWVuQ2hhbmdlXyksdGhpcy5vbih0aGlzLnRlY2hfLFwiZXJyb3JcIix0aGlzLmhhbmRsZVRlY2hFcnJvcl8pLHRoaXMub24odGhpcy50ZWNoXyxcImxvYWRlZG1ldGFkYXRhXCIsdGhpcy51cGRhdGVTdHlsZUVsXyksdGhpcy5vbih0aGlzLnRlY2hfLFwicG9zdGVyY2hhbmdlXCIsdGhpcy5oYW5kbGVUZWNoUG9zdGVyQ2hhbmdlXyksdGhpcy5vbih0aGlzLnRlY2hfLFwidGV4dGRhdGFcIix0aGlzLmhhbmRsZVRlY2hUZXh0RGF0YV8pLHRoaXMub24odGhpcy50ZWNoXyxcInJhdGVjaGFuZ2VcIix0aGlzLmhhbmRsZVRlY2hSYXRlQ2hhbmdlXyksdGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzKHRoaXMudGVjaEdldF8oXCJjb250cm9sc1wiKSksdGhpcy5jb250cm9scygpJiYhdGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzKCkmJnRoaXMuYWRkVGVjaENvbnRyb2xzTGlzdGVuZXJzXygpLHRoaXMudGVjaF8uZWwoKS5wYXJlbnROb2RlPT09dGhpcy5lbCgpfHxcIkh0bWw1XCI9PT1pJiZ0aGlzLnRhZ3x8QSh0aGlzLnRlY2hfLmVsKCksdGhpcy5lbCgpKSx0aGlzLnRhZyYmKHRoaXMudGFnLnBsYXllcj1udWxsLHRoaXMudGFnPW51bGwpfSxlLnVubG9hZFRlY2hfPWZ1bmN0aW9uKCl7dmFyIG49dGhpczt3bi5uYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PXduW2VdO25bdC5wcml2YXRlTmFtZV09blt0LmdldHRlck5hbWVdKCl9KSx0aGlzLnRleHRUcmFja3NKc29uXz14dCh0aGlzLnRlY2hfKSx0aGlzLmlzUmVhZHlfPSExLHRoaXMudGVjaF8uZGlzcG9zZSgpLHRoaXMudGVjaF89ITEsdGhpcy5pc1Bvc3RlckZyb21UZWNoXyYmKHRoaXMucG9zdGVyXz1cIlwiLHRoaXMudHJpZ2dlcihcInBvc3RlcmNoYW5nZVwiKSksdGhpcy5pc1Bvc3RlckZyb21UZWNoXz0hMX0sZS50ZWNoPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiZnLndhcm4obSgkcigpKSksdGhpcy50ZWNoX30sZS5hZGRUZWNoQ29udHJvbHNMaXN0ZW5lcnNfPWZ1bmN0aW9uKCl7dGhpcy5yZW1vdmVUZWNoQ29udHJvbHNMaXN0ZW5lcnNfKCksdGhpcy5vbih0aGlzLnRlY2hfLFwibW91c2Vkb3duXCIsdGhpcy5oYW5kbGVUZWNoQ2xpY2tfKSx0aGlzLm9uKHRoaXMudGVjaF8sXCJkYmxjbGlja1wiLHRoaXMuaGFuZGxlVGVjaERvdWJsZUNsaWNrXyksdGhpcy5vbih0aGlzLnRlY2hfLFwidG91Y2hzdGFydFwiLHRoaXMuaGFuZGxlVGVjaFRvdWNoU3RhcnRfKSx0aGlzLm9uKHRoaXMudGVjaF8sXCJ0b3VjaG1vdmVcIix0aGlzLmhhbmRsZVRlY2hUb3VjaE1vdmVfKSx0aGlzLm9uKHRoaXMudGVjaF8sXCJ0b3VjaGVuZFwiLHRoaXMuaGFuZGxlVGVjaFRvdWNoRW5kXyksdGhpcy5vbih0aGlzLnRlY2hfLFwidGFwXCIsdGhpcy5oYW5kbGVUZWNoVGFwXyl9LGUucmVtb3ZlVGVjaENvbnRyb2xzTGlzdGVuZXJzXz1mdW5jdGlvbigpe3RoaXMub2ZmKHRoaXMudGVjaF8sXCJ0YXBcIix0aGlzLmhhbmRsZVRlY2hUYXBfKSx0aGlzLm9mZih0aGlzLnRlY2hfLFwidG91Y2hzdGFydFwiLHRoaXMuaGFuZGxlVGVjaFRvdWNoU3RhcnRfKSx0aGlzLm9mZih0aGlzLnRlY2hfLFwidG91Y2htb3ZlXCIsdGhpcy5oYW5kbGVUZWNoVG91Y2hNb3ZlXyksdGhpcy5vZmYodGhpcy50ZWNoXyxcInRvdWNoZW5kXCIsdGhpcy5oYW5kbGVUZWNoVG91Y2hFbmRfKSx0aGlzLm9mZih0aGlzLnRlY2hfLFwibW91c2Vkb3duXCIsdGhpcy5oYW5kbGVUZWNoQ2xpY2tfKSx0aGlzLm9mZih0aGlzLnRlY2hfLFwiZGJsY2xpY2tcIix0aGlzLmhhbmRsZVRlY2hEb3VibGVDbGlja18pfSxlLmhhbmRsZVRlY2hSZWFkeV89ZnVuY3Rpb24oKXt0aGlzLnRyaWdnZXJSZWFkeSgpLHRoaXMuY2FjaGVfLnZvbHVtZSYmdGhpcy50ZWNoQ2FsbF8oXCJzZXRWb2x1bWVcIix0aGlzLmNhY2hlXy52b2x1bWUpLHRoaXMuaGFuZGxlVGVjaFBvc3RlckNoYW5nZV8oKSx0aGlzLmhhbmRsZVRlY2hEdXJhdGlvbkNoYW5nZV8oKX0sZS5oYW5kbGVUZWNoTG9hZFN0YXJ0Xz1mdW5jdGlvbigpe3RoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtZW5kZWRcIiksdGhpcy5yZW1vdmVDbGFzcyhcInZqcy1zZWVraW5nXCIpLHRoaXMuZXJyb3IobnVsbCksdGhpcy5oYW5kbGVUZWNoRHVyYXRpb25DaGFuZ2VfKCksdGhpcy5wYXVzZWQoKT8odGhpcy5oYXNTdGFydGVkKCExKSx0aGlzLnRyaWdnZXIoXCJsb2Fkc3RhcnRcIikpOih0aGlzLnRyaWdnZXIoXCJsb2Fkc3RhcnRcIiksdGhpcy50cmlnZ2VyKFwiZmlyc3RwbGF5XCIpKSx0aGlzLm1hbnVhbEF1dG9wbGF5Xyh0aGlzLmF1dG9wbGF5KCkpfSxlLm1hbnVhbEF1dG9wbGF5Xz1mdW5jdGlvbih0KXt2YXIgaT10aGlzO2lmKHRoaXMudGVjaF8mJlwic3RyaW5nXCI9PXR5cGVvZiB0KXt2YXIgZSxuPWZ1bmN0aW9uKCl7dmFyIGU9aS5tdXRlZCgpO2kubXV0ZWQoITApO3ZhciB0PWZ1bmN0aW9uKCl7aS5tdXRlZChlKX07aS5wbGF5VGVybWluYXRlZFF1ZXVlXy5wdXNoKHQpO3ZhciBuPWkucGxheSgpO2lmKEV0KG4pKXJldHVybiBuLmNhdGNoKHQpfTtpZihcImFueVwiPT09dCYmITAhPT10aGlzLm11dGVkKCk/RXQoZT10aGlzLnBsYXkoKSkmJihlPWUuY2F0Y2gobikpOmU9XCJtdXRlZFwiPT09dCYmITAhPT10aGlzLm11dGVkKCk/bigpOnRoaXMucGxheSgpLEV0KGUpKXJldHVybiBlLnRoZW4oZnVuY3Rpb24oKXtpLnRyaWdnZXIoe3R5cGU6XCJhdXRvcGxheS1zdWNjZXNzXCIsYXV0b3BsYXk6dH0pfSkuY2F0Y2goZnVuY3Rpb24oZSl7aS50cmlnZ2VyKHt0eXBlOlwiYXV0b3BsYXktZmFpbHVyZVwiLGF1dG9wbGF5OnR9KX0pfX0sZS51cGRhdGVTb3VyY2VDYWNoZXNfPWZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUmJihlPVwiXCIpO3ZhciB0PWUsbj1cIlwiO1wic3RyaW5nXCIhPXR5cGVvZiB0JiYodD1lLnNyYyxuPWUudHlwZSksdGhpcy5jYWNoZV8uc291cmNlPXRoaXMuY2FjaGVfLnNvdXJjZXx8e30sdGhpcy5jYWNoZV8uc291cmNlcz10aGlzLmNhY2hlXy5zb3VyY2VzfHxbXSx0JiYhbiYmKG49ZnVuY3Rpb24oZSx0KXtpZighdClyZXR1cm5cIlwiO2lmKGUuY2FjaGVfLnNvdXJjZS5zcmM9PT10JiZlLmNhY2hlXy5zb3VyY2UudHlwZSlyZXR1cm4gZS5jYWNoZV8uc291cmNlLnR5cGU7dmFyIG49ZS5jYWNoZV8uc291cmNlcy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUuc3JjPT09dH0pO2lmKG4ubGVuZ3RoKXJldHVybiBuWzBdLnR5cGU7Zm9yKHZhciBpPWUuJCQoXCJzb3VyY2VcIikscj0wO3I8aS5sZW5ndGg7cisrKXt2YXIgcz1pW3JdO2lmKHMudHlwZSYmcy5zcmMmJnMuc3JjPT09dClyZXR1cm4gcy50eXBlfXJldHVybiBkaSh0KX0odGhpcyx0KSksdGhpcy5jYWNoZV8uc291cmNlPUJlKHt9LGUse3NyYzp0LHR5cGU6bn0pO2Zvcih2YXIgaT10aGlzLmNhY2hlXy5zb3VyY2VzLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5zcmMmJmUuc3JjPT09dH0pLHI9W10scz10aGlzLiQkKFwic291cmNlXCIpLG89W10sYT0wO2E8cy5sZW5ndGg7YSsrKXt2YXIgbD1JKHNbYV0pO3IucHVzaChsKSxsLnNyYyYmbC5zcmM9PT10JiZvLnB1c2gobC5zcmMpfW8ubGVuZ3RoJiYhaS5sZW5ndGg/dGhpcy5jYWNoZV8uc291cmNlcz1yOmkubGVuZ3RofHwodGhpcy5jYWNoZV8uc291cmNlcz1bdGhpcy5jYWNoZV8uc291cmNlXSksdGhpcy5jYWNoZV8uc3JjPXR9LGUuaGFuZGxlVGVjaFNvdXJjZXNldF89ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcztpZighdGhpcy5jaGFuZ2luZ1NyY18pe3ZhciB0PWZ1bmN0aW9uKGUpe3JldHVybiBpLnVwZGF0ZVNvdXJjZUNhY2hlc18oZSl9LG49dGhpcy5jdXJyZW50U291cmNlKCkuc3JjLHI9ZS5zcmM7aWYobiYmIS9eYmxvYjovLnRlc3QobikmJi9eYmxvYjovLnRlc3QocikmJighdGhpcy5sYXN0U291cmNlX3x8dGhpcy5sYXN0U291cmNlXy50ZWNoIT09ciYmdGhpcy5sYXN0U291cmNlXy5wbGF5ZXIhPT1uKSYmKHQ9ZnVuY3Rpb24oKXt9KSx0KHIpLCFlLnNyYyl7dGhpcy50ZWNoXy5vbmUoW1wic291cmNlc2V0XCIsXCJsb2Fkc3RhcnRcIl0sZnVuY3Rpb24gZSh0KXtpZihcInNvdXJjZXNldFwiIT09dC50eXBlKXt2YXIgbj1pLnRlY2hHZXQoXCJjdXJyZW50U3JjXCIpO2kubGFzdFNvdXJjZV8udGVjaD1uLGkudXBkYXRlU291cmNlQ2FjaGVzXyhuKX1pLnRlY2hfLm9mZihbXCJzb3VyY2VzZXRcIixcImxvYWRzdGFydFwiXSxlKX0pfX10aGlzLmxhc3RTb3VyY2VfPXtwbGF5ZXI6dGhpcy5jdXJyZW50U291cmNlKCkuc3JjLHRlY2g6ZS5zcmN9LHRoaXMudHJpZ2dlcih7c3JjOmUuc3JjLHR5cGU6XCJzb3VyY2VzZXRcIn0pfSxlLmhhc1N0YXJ0ZWQ9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4gdGhpcy5oYXNTdGFydGVkXztlIT09dGhpcy5oYXNTdGFydGVkXyYmKHRoaXMuaGFzU3RhcnRlZF89ZSx0aGlzLmhhc1N0YXJ0ZWRfPyh0aGlzLmFkZENsYXNzKFwidmpzLWhhcy1zdGFydGVkXCIpLHRoaXMudHJpZ2dlcihcImZpcnN0cGxheVwiKSk6dGhpcy5yZW1vdmVDbGFzcyhcInZqcy1oYXMtc3RhcnRlZFwiKSl9LGUuaGFuZGxlVGVjaFBsYXlfPWZ1bmN0aW9uKCl7dGhpcy5yZW1vdmVDbGFzcyhcInZqcy1lbmRlZFwiKSx0aGlzLnJlbW92ZUNsYXNzKFwidmpzLXBhdXNlZFwiKSx0aGlzLmFkZENsYXNzKFwidmpzLXBsYXlpbmdcIiksdGhpcy5oYXNTdGFydGVkKCEwKSx0aGlzLnRyaWdnZXIoXCJwbGF5XCIpfSxlLmhhbmRsZVRlY2hSYXRlQ2hhbmdlXz1mdW5jdGlvbigpezA8dGhpcy50ZWNoXy5wbGF5YmFja1JhdGUoKSYmMD09PXRoaXMuY2FjaGVfLmxhc3RQbGF5YmFja1JhdGUmJih0aGlzLnF1ZXVlZENhbGxiYWNrc18uZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5jYWxsYmFjayhlLmV2ZW50KX0pLHRoaXMucXVldWVkQ2FsbGJhY2tzXz1bXSksdGhpcy5jYWNoZV8ubGFzdFBsYXliYWNrUmF0ZT10aGlzLnRlY2hfLnBsYXliYWNrUmF0ZSgpLHRoaXMudHJpZ2dlcihcInJhdGVjaGFuZ2VcIil9LGUuaGFuZGxlVGVjaFdhaXRpbmdfPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLmFkZENsYXNzKFwidmpzLXdhaXRpbmdcIiksdGhpcy50cmlnZ2VyKFwid2FpdGluZ1wiKTt2YXIgbj10aGlzLmN1cnJlbnRUaW1lKCk7dGhpcy5vbihcInRpbWV1cGRhdGVcIixmdW5jdGlvbiBlKCl7biE9PXQuY3VycmVudFRpbWUoKSYmKHQucmVtb3ZlQ2xhc3MoXCJ2anMtd2FpdGluZ1wiKSx0Lm9mZihcInRpbWV1cGRhdGVcIixlKSl9KX0sZS5oYW5kbGVUZWNoQ2FuUGxheV89ZnVuY3Rpb24oKXt0aGlzLnJlbW92ZUNsYXNzKFwidmpzLXdhaXRpbmdcIiksdGhpcy50cmlnZ2VyKFwiY2FucGxheVwiKX0sZS5oYW5kbGVUZWNoQ2FuUGxheVRocm91Z2hfPWZ1bmN0aW9uKCl7dGhpcy5yZW1vdmVDbGFzcyhcInZqcy13YWl0aW5nXCIpLHRoaXMudHJpZ2dlcihcImNhbnBsYXl0aHJvdWdoXCIpfSxlLmhhbmRsZVRlY2hQbGF5aW5nXz1mdW5jdGlvbigpe3RoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtd2FpdGluZ1wiKSx0aGlzLnRyaWdnZXIoXCJwbGF5aW5nXCIpfSxlLmhhbmRsZVRlY2hTZWVraW5nXz1mdW5jdGlvbigpe3RoaXMuYWRkQ2xhc3MoXCJ2anMtc2Vla2luZ1wiKSx0aGlzLnRyaWdnZXIoXCJzZWVraW5nXCIpfSxlLmhhbmRsZVRlY2hTZWVrZWRfPWZ1bmN0aW9uKCl7dGhpcy5yZW1vdmVDbGFzcyhcInZqcy1zZWVraW5nXCIpLHRoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtZW5kZWRcIiksdGhpcy50cmlnZ2VyKFwic2Vla2VkXCIpfSxlLmhhbmRsZVRlY2hGaXJzdFBsYXlfPWZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zXy5zdGFydHRpbWUmJihnLndhcm4oXCJQYXNzaW5nIHRoZSBgc3RhcnR0aW1lYCBvcHRpb24gdG8gdGhlIHBsYXllciB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gNi4wXCIpLHRoaXMuY3VycmVudFRpbWUodGhpcy5vcHRpb25zXy5zdGFydHRpbWUpKSx0aGlzLmFkZENsYXNzKFwidmpzLWhhcy1zdGFydGVkXCIpLHRoaXMudHJpZ2dlcihcImZpcnN0cGxheVwiKX0sZS5oYW5kbGVUZWNoUGF1c2VfPWZ1bmN0aW9uKCl7dGhpcy5yZW1vdmVDbGFzcyhcInZqcy1wbGF5aW5nXCIpLHRoaXMuYWRkQ2xhc3MoXCJ2anMtcGF1c2VkXCIpLHRoaXMudHJpZ2dlcihcInBhdXNlXCIpfSxlLmhhbmRsZVRlY2hFbmRlZF89ZnVuY3Rpb24oKXt0aGlzLmFkZENsYXNzKFwidmpzLWVuZGVkXCIpLHRoaXMub3B0aW9uc18ubG9vcD8odGhpcy5jdXJyZW50VGltZSgwKSx0aGlzLnBsYXkoKSk6dGhpcy5wYXVzZWQoKXx8dGhpcy5wYXVzZSgpLHRoaXMudHJpZ2dlcihcImVuZGVkXCIpfSxlLmhhbmRsZVRlY2hEdXJhdGlvbkNoYW5nZV89ZnVuY3Rpb24oKXt0aGlzLmR1cmF0aW9uKHRoaXMudGVjaEdldF8oXCJkdXJhdGlvblwiKSl9LGUuaGFuZGxlVGVjaENsaWNrXz1mdW5jdGlvbihlKXtZKGUpJiZ0aGlzLmNvbnRyb2xzXyYmKHRoaXMucGF1c2VkKCk/d3QodGhpcy5wbGF5KCkpOnRoaXMucGF1c2UoKSl9LGUuaGFuZGxlVGVjaERvdWJsZUNsaWNrXz1mdW5jdGlvbih0KXt0aGlzLmNvbnRyb2xzXyYmKEFycmF5LnByb3RvdHlwZS5zb21lLmNhbGwodGhpcy4kJChcIi52anMtY29udHJvbC1iYXIsIC52anMtbW9kYWwtZGlhbG9nXCIpLGZ1bmN0aW9uKGUpe3JldHVybiBlLmNvbnRhaW5zKHQudGFyZ2V0KX0pfHx2b2lkIDAhPT10aGlzLm9wdGlvbnNfJiZ2b2lkIDAhPT10aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zJiZ2b2lkIDAhPT10aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zLmRvdWJsZUNsaWNrJiYhMT09PXRoaXMub3B0aW9uc18udXNlckFjdGlvbnMuZG91YmxlQ2xpY2t8fCh2b2lkIDAhPT10aGlzLm9wdGlvbnNfJiZ2b2lkIDAhPT10aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zLmRvdWJsZUNsaWNrP3RoaXMub3B0aW9uc18udXNlckFjdGlvbnMuZG91YmxlQ2xpY2suY2FsbCh0aGlzLHQpOnRoaXMuaXNGdWxsc2NyZWVuKCk/dGhpcy5leGl0RnVsbHNjcmVlbigpOnRoaXMucmVxdWVzdEZ1bGxzY3JlZW4oKSkpfSxlLmhhbmRsZVRlY2hUYXBfPWZ1bmN0aW9uKCl7dGhpcy51c2VyQWN0aXZlKCF0aGlzLnVzZXJBY3RpdmUoKSl9LGUuaGFuZGxlVGVjaFRvdWNoU3RhcnRfPWZ1bmN0aW9uKCl7dGhpcy51c2VyV2FzQWN0aXZlPXRoaXMudXNlckFjdGl2ZSgpfSxlLmhhbmRsZVRlY2hUb3VjaE1vdmVfPWZ1bmN0aW9uKCl7dGhpcy51c2VyV2FzQWN0aXZlJiZ0aGlzLnJlcG9ydFVzZXJBY3Rpdml0eSgpfSxlLmhhbmRsZVRlY2hUb3VjaEVuZF89ZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpfSxlLmhhbmRsZVN0YWdlQ2xpY2tfPWZ1bmN0aW9uKCl7dGhpcy5yZXBvcnRVc2VyQWN0aXZpdHkoKX0sZS50b2dnbGVGdWxsc2NyZWVuQ2xhc3NfPWZ1bmN0aW9uKCl7dGhpcy5pc0Z1bGxzY3JlZW4oKT90aGlzLmFkZENsYXNzKFwidmpzLWZ1bGxzY3JlZW5cIik6dGhpcy5yZW1vdmVDbGFzcyhcInZqcy1mdWxsc2NyZWVuXCIpfSxlLmRvY3VtZW50RnVsbHNjcmVlbkNoYW5nZV89ZnVuY3Rpb24oZSl7dmFyIHQ9dnQ7dGhpcy5pc0Z1bGxzY3JlZW4oZFt0LmZ1bGxzY3JlZW5FbGVtZW50XT09PXRoaXMuZWwoKXx8dGhpcy5lbCgpLm1hdGNoZXMoXCI6XCIrdC5mdWxsc2NyZWVuKSksITE9PT10aGlzLmlzRnVsbHNjcmVlbigpJiZkZShkLHQuZnVsbHNjcmVlbmNoYW5nZSx0aGlzLmJvdW5kRG9jdW1lbnRGdWxsc2NyZWVuQ2hhbmdlXyksbXR8fHRoaXMudHJpZ2dlcihcImZ1bGxzY3JlZW5jaGFuZ2VcIil9LGUuaGFuZGxlVGVjaEZ1bGxzY3JlZW5DaGFuZ2VfPWZ1bmN0aW9uKGUsdCl7dCYmdGhpcy5pc0Z1bGxzY3JlZW4odC5pc0Z1bGxzY3JlZW4pLHRoaXMudHJpZ2dlcihcImZ1bGxzY3JlZW5jaGFuZ2VcIil9LGUuaGFuZGxlVGVjaEVycm9yXz1mdW5jdGlvbigpe3ZhciBlPXRoaXMudGVjaF8uZXJyb3IoKTt0aGlzLmVycm9yKGUpfSxlLmhhbmRsZVRlY2hUZXh0RGF0YV89ZnVuY3Rpb24oKXt2YXIgZT1udWxsOzE8YXJndW1lbnRzLmxlbmd0aCYmKGU9YXJndW1lbnRzWzFdKSx0aGlzLnRyaWdnZXIoXCJ0ZXh0ZGF0YVwiLGUpfSxlLmdldENhY2hlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2FjaGVffSxlLnJlc2V0Q2FjaGVfPWZ1bmN0aW9uKCl7dGhpcy5jYWNoZV89e2N1cnJlbnRUaW1lOjAsaW5hY3Rpdml0eVRpbWVvdXQ6dGhpcy5vcHRpb25zXy5pbmFjdGl2aXR5VGltZW91dCxkdXJhdGlvbjpOYU4sbGFzdFZvbHVtZToxLGxhc3RQbGF5YmFja1JhdGU6dGhpcy5kZWZhdWx0UGxheWJhY2tSYXRlKCksbWVkaWE6bnVsbCxzcmM6XCJcIixzb3VyY2U6e30sc291cmNlczpbXSx2b2x1bWU6MX19LGUudGVjaENhbGxfPWZ1bmN0aW9uKHIscyl7dGhpcy5yZWFkeShmdW5jdGlvbigpe2lmKHIgaW4gYWkpcmV0dXJuIGU9dGhpcy5taWRkbGV3YXJlXyx0PXRoaXMudGVjaF8saT1zLHRbbj1yXShlLnJlZHVjZShjaShuKSxpKSk7aWYociBpbiBsaSlyZXR1cm4gc2kodGhpcy5taWRkbGV3YXJlXyx0aGlzLnRlY2hfLHIscyk7dmFyIGUsdCxuLGk7dHJ5e3RoaXMudGVjaF8mJnRoaXMudGVjaF9bcl0ocyl9Y2F0Y2goZSl7dGhyb3cgZyhlKSxlfX0sITApfSxlLnRlY2hHZXRfPWZ1bmN0aW9uKHQpe2lmKHRoaXMudGVjaF8mJnRoaXMudGVjaF8uaXNSZWFkeV8pe2lmKHQgaW4gb2kpcmV0dXJuIGU9dGhpcy5taWRkbGV3YXJlXyxuPXRoaXMudGVjaF8saT10LGUucmVkdWNlUmlnaHQoY2koaSksbltpXSgpKTtpZih0IGluIGxpKXJldHVybiBzaSh0aGlzLm1pZGRsZXdhcmVfLHRoaXMudGVjaF8sdCk7dmFyIGUsbixpO3RyeXtyZXR1cm4gdGhpcy50ZWNoX1t0XSgpfWNhdGNoKGUpe2lmKHZvaWQgMD09PXRoaXMudGVjaF9bdF0pdGhyb3cgZyhcIlZpZGVvLmpzOiBcIit0K1wiIG1ldGhvZCBub3QgZGVmaW5lZCBmb3IgXCIrdGhpcy50ZWNoTmFtZV8rXCIgcGxheWJhY2sgdGVjaG5vbG9neS5cIixlKSxlO2lmKFwiVHlwZUVycm9yXCI9PT1lLm5hbWUpdGhyb3cgZyhcIlZpZGVvLmpzOiBcIit0K1wiIHVuYXZhaWxhYmxlIG9uIFwiK3RoaXMudGVjaE5hbWVfK1wiIHBsYXliYWNrIHRlY2hub2xvZ3kgZWxlbWVudC5cIixlKSx0aGlzLnRlY2hfLmlzUmVhZHlfPSExLGU7dGhyb3cgZyhlKSxlfX19LGUucGxheT1mdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10aGlzLm9wdGlvbnNfLlByb21pc2V8fGguUHJvbWlzZTtyZXR1cm4gZT9uZXcgZShmdW5jdGlvbihlKXt0LnBsYXlfKGUpfSk6dGhpcy5wbGF5XygpfSxlLnBsYXlfPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dm9pZCAwPT09ZSYmKGU9d3QpLHRoaXMucGxheUNhbGxiYWNrc18ucHVzaChlKTt2YXIgbj1Cb29sZWFuKCF0aGlzLmNoYW5naW5nU3JjXyYmKHRoaXMuc3JjKCl8fHRoaXMuY3VycmVudFNyYygpKSk7aWYodGhpcy53YWl0VG9QbGF5XyYmKHRoaXMub2ZmKFtcInJlYWR5XCIsXCJsb2Fkc3RhcnRcIl0sdGhpcy53YWl0VG9QbGF5XyksdGhpcy53YWl0VG9QbGF5Xz1udWxsKSwhdGhpcy5pc1JlYWR5X3x8IW4pcmV0dXJuIHRoaXMud2FpdFRvUGxheV89ZnVuY3Rpb24oZSl7dC5wbGF5XygpfSx0aGlzLm9uZShbXCJyZWFkeVwiLFwibG9hZHN0YXJ0XCJdLHRoaXMud2FpdFRvUGxheV8pLHZvaWQobnx8IWF0JiYhR2V8fHRoaXMubG9hZCgpKTt2YXIgaT10aGlzLnRlY2hHZXRfKFwicGxheVwiKTtudWxsPT09aT90aGlzLnJ1blBsYXlUZXJtaW5hdGVkUXVldWVfKCk6dGhpcy5ydW5QbGF5Q2FsbGJhY2tzXyhpKX0sZS5ydW5QbGF5VGVybWluYXRlZFF1ZXVlXz1mdW5jdGlvbigpe3ZhciBlPXRoaXMucGxheVRlcm1pbmF0ZWRRdWV1ZV8uc2xpY2UoMCk7dGhpcy5wbGF5VGVybWluYXRlZFF1ZXVlXz1bXSxlLmZvckVhY2goZnVuY3Rpb24oZSl7ZSgpfSl9LGUucnVuUGxheUNhbGxiYWNrc189ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5wbGF5Q2FsbGJhY2tzXy5zbGljZSgwKTt0aGlzLnBsYXlDYWxsYmFja3NfPVtdLHRoaXMucGxheVRlcm1pbmF0ZWRRdWV1ZV89W10sZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UodCl9KX0sZS5wYXVzZT1mdW5jdGlvbigpe3RoaXMudGVjaENhbGxfKFwicGF1c2VcIil9LGUucGF1c2VkPWZ1bmN0aW9uKCl7cmV0dXJuITEhPT10aGlzLnRlY2hHZXRfKFwicGF1c2VkXCIpfSxlLnBsYXllZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRlY2hHZXRfKFwicGxheWVkXCIpfHxkdCgwLDApfSxlLnNjcnViYmluZz1mdW5jdGlvbihlKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgZSlyZXR1cm4gdGhpcy5zY3J1YmJpbmdfO3RoaXMuc2NydWJiaW5nXz0hIWUsZT90aGlzLmFkZENsYXNzKFwidmpzLXNjcnViYmluZ1wiKTp0aGlzLnJlbW92ZUNsYXNzKFwidmpzLXNjcnViYmluZ1wiKX0sZS5jdXJyZW50VGltZT1mdW5jdGlvbihlKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgZT8oZTwwJiYoZT0wKSx2b2lkIHRoaXMudGVjaENhbGxfKFwic2V0Q3VycmVudFRpbWVcIixlKSk6KHRoaXMuY2FjaGVfLmN1cnJlbnRUaW1lPXRoaXMudGVjaEdldF8oXCJjdXJyZW50VGltZVwiKXx8MCx0aGlzLmNhY2hlXy5jdXJyZW50VGltZSl9LGUuZHVyYXRpb249ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4gdm9pZCAwIT09dGhpcy5jYWNoZV8uZHVyYXRpb24/dGhpcy5jYWNoZV8uZHVyYXRpb246TmFOOyhlPXBhcnNlRmxvYXQoZSkpPDAmJihlPTEvMCksZSE9PXRoaXMuY2FjaGVfLmR1cmF0aW9uJiYoKHRoaXMuY2FjaGVfLmR1cmF0aW9uPWUpPT09MS8wPyh0aGlzLmFkZENsYXNzKFwidmpzLWxpdmVcIiksdGhpcy5vcHRpb25zXy5saXZldWkmJnRoaXMucGxheWVyXy5saXZlVHJhY2tlciYmdGhpcy5hZGRDbGFzcyhcInZqcy1saXZldWlcIikpOih0aGlzLnJlbW92ZUNsYXNzKFwidmpzLWxpdmVcIiksdGhpcy5yZW1vdmVDbGFzcyhcInZqcy1saXZldWlcIikpLGlzTmFOKGUpfHx0aGlzLnRyaWdnZXIoXCJkdXJhdGlvbmNoYW5nZVwiKSl9LGUucmVtYWluaW5nVGltZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmR1cmF0aW9uKCktdGhpcy5jdXJyZW50VGltZSgpfSxlLnJlbWFpbmluZ1RpbWVEaXNwbGF5PWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguZmxvb3IodGhpcy5kdXJhdGlvbigpKS1NYXRoLmZsb29yKHRoaXMuY3VycmVudFRpbWUoKSl9LGUuYnVmZmVyZWQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnRlY2hHZXRfKFwiYnVmZmVyZWRcIik7cmV0dXJuIGUmJmUubGVuZ3RofHwoZT1kdCgwLDApKSxlfSxlLmJ1ZmZlcmVkUGVyY2VudD1mdW5jdGlvbigpe3JldHVybiBwdCh0aGlzLmJ1ZmZlcmVkKCksdGhpcy5kdXJhdGlvbigpKX0sZS5idWZmZXJlZEVuZD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuYnVmZmVyZWQoKSx0PXRoaXMuZHVyYXRpb24oKSxuPWUuZW5kKGUubGVuZ3RoLTEpO3JldHVybiB0PG4mJihuPXQpLG59LGUudm9sdW1lPWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiB2b2lkIDAhPT1lPyh0PU1hdGgubWF4KDAsTWF0aC5taW4oMSxwYXJzZUZsb2F0KGUpKSksdGhpcy5jYWNoZV8udm9sdW1lPXQsdGhpcy50ZWNoQ2FsbF8oXCJzZXRWb2x1bWVcIix0KSx2b2lkKDA8dCYmdGhpcy5sYXN0Vm9sdW1lXyh0KSkpOih0PXBhcnNlRmxvYXQodGhpcy50ZWNoR2V0XyhcInZvbHVtZVwiKSksaXNOYU4odCk/MTp0KX0sZS5tdXRlZD1mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXJldHVybiB0aGlzLnRlY2hHZXRfKFwibXV0ZWRcIil8fCExO3RoaXMudGVjaENhbGxfKFwic2V0TXV0ZWRcIixlKX0sZS5kZWZhdWx0TXV0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMCE9PWU/dGhpcy50ZWNoQ2FsbF8oXCJzZXREZWZhdWx0TXV0ZWRcIixlKTp0aGlzLnRlY2hHZXRfKFwiZGVmYXVsdE11dGVkXCIpfHwhMX0sZS5sYXN0Vm9sdW1lXz1mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lfHwwPT09ZSlyZXR1cm4gdGhpcy5jYWNoZV8ubGFzdFZvbHVtZTt0aGlzLmNhY2hlXy5sYXN0Vm9sdW1lPWV9LGUuc3VwcG9ydHNGdWxsU2NyZWVuPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGVjaEdldF8oXCJzdXBwb3J0c0Z1bGxTY3JlZW5cIil8fCExfSxlLmlzRnVsbHNjcmVlbj1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwIT09ZT8odGhpcy5pc0Z1bGxzY3JlZW5fPSEhZSx2b2lkIHRoaXMudG9nZ2xlRnVsbHNjcmVlbkNsYXNzXygpKTohIXRoaXMuaXNGdWxsc2NyZWVuX30sZS5yZXF1ZXN0RnVsbHNjcmVlbj1mdW5jdGlvbigpe3ZhciBlPXZ0O3RoaXMuaXNGdWxsc2NyZWVuKCEwKSxlLnJlcXVlc3RGdWxsc2NyZWVuPyhoZShkLGUuZnVsbHNjcmVlbmNoYW5nZSx0aGlzLmJvdW5kRG9jdW1lbnRGdWxsc2NyZWVuQ2hhbmdlXyksdGhpcy5lbF9bZS5yZXF1ZXN0RnVsbHNjcmVlbl0oKSk6dGhpcy50ZWNoXy5zdXBwb3J0c0Z1bGxTY3JlZW4oKT90aGlzLnRlY2hDYWxsXyhcImVudGVyRnVsbFNjcmVlblwiKToodGhpcy5lbnRlckZ1bGxXaW5kb3coKSx0aGlzLnRyaWdnZXIoXCJmdWxsc2NyZWVuY2hhbmdlXCIpKX0sZS5leGl0RnVsbHNjcmVlbj1mdW5jdGlvbigpe3ZhciBlPXZ0O3RoaXMuaXNGdWxsc2NyZWVuKCExKSxlLnJlcXVlc3RGdWxsc2NyZWVuP2RbZS5leGl0RnVsbHNjcmVlbl0oKTp0aGlzLnRlY2hfLnN1cHBvcnRzRnVsbFNjcmVlbigpP3RoaXMudGVjaENhbGxfKFwiZXhpdEZ1bGxTY3JlZW5cIik6KHRoaXMuZXhpdEZ1bGxXaW5kb3coKSx0aGlzLnRyaWdnZXIoXCJmdWxsc2NyZWVuY2hhbmdlXCIpKX0sZS5lbnRlckZ1bGxXaW5kb3c9ZnVuY3Rpb24oKXt0aGlzLmlzRnVsbFdpbmRvdz0hMCx0aGlzLmRvY09yaWdPdmVyZmxvdz1kLmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdyxoZShkLFwia2V5ZG93blwiLHRoaXMuYm91bmRGdWxsV2luZG93T25Fc2NLZXlfKSxkLmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdz1cImhpZGRlblwiLEwoZC5ib2R5LFwidmpzLWZ1bGwtd2luZG93XCIpLHRoaXMudHJpZ2dlcihcImVudGVyRnVsbFdpbmRvd1wiKX0sZS5mdWxsV2luZG93T25Fc2NLZXk9ZnVuY3Rpb24oZSl7UHQuaXNFdmVudEtleShlLFwiRXNjXCIpJiYoITA9PT10aGlzLmlzRnVsbHNjcmVlbigpP3RoaXMuZXhpdEZ1bGxzY3JlZW4oKTp0aGlzLmV4aXRGdWxsV2luZG93KCkpfSxlLmV4aXRGdWxsV2luZG93PWZ1bmN0aW9uKCl7dGhpcy5pc0Z1bGxXaW5kb3c9ITEsZGUoZCxcImtleWRvd25cIix0aGlzLmJvdW5kRnVsbFdpbmRvd09uRXNjS2V5XyksZC5kb2N1bWVudEVsZW1lbnQuc3R5bGUub3ZlcmZsb3c9dGhpcy5kb2NPcmlnT3ZlcmZsb3csTShkLmJvZHksXCJ2anMtZnVsbC13aW5kb3dcIiksdGhpcy50cmlnZ2VyKFwiZXhpdEZ1bGxXaW5kb3dcIil9LGUuaGFuZGxlRm9jdXM9ZnVuY3Rpb24oZSl7ZGUoZCxcImtleWRvd25cIix0aGlzLmJvdW5kSGFuZGxlS2V5UHJlc3NfKSxoZShkLFwia2V5ZG93blwiLHRoaXMuYm91bmRIYW5kbGVLZXlQcmVzc18pfSxlLmhhbmRsZUJsdXI9ZnVuY3Rpb24oZSl7ZGUoZCxcImtleWRvd25cIix0aGlzLmJvdW5kSGFuZGxlS2V5UHJlc3NfKX0sZS5oYW5kbGVLZXlQcmVzcz1mdW5jdGlvbihlKXt0aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zJiZ0aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zLmhvdGtleXMmJiExIT09dGhpcy5vcHRpb25zXy51c2VyQWN0aW9ucy5ob3RrZXlzJiYoXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5vcHRpb25zXy51c2VyQWN0aW9ucy5ob3RrZXlzP3RoaXMub3B0aW9uc18udXNlckFjdGlvbnMuaG90a2V5cy5jYWxsKHRoaXMsZSk6dGhpcy5oYW5kbGVIb3RrZXlzKGUpKX0sZS5oYW5kbGVIb3RrZXlzPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMub3B0aW9uc18udXNlckFjdGlvbnM/dGhpcy5vcHRpb25zXy51c2VyQWN0aW9ucy5ob3RrZXlzOnt9LG49dC5mdWxsc2NyZWVuS2V5LGk9dm9pZCAwPT09bj9mdW5jdGlvbihlKXtyZXR1cm4gUHQuaXNFdmVudEtleShlLFwiZlwiKX06bixyPXQubXV0ZUtleSxzPXZvaWQgMD09PXI/ZnVuY3Rpb24oZSl7cmV0dXJuIFB0LmlzRXZlbnRLZXkoZSxcIm1cIil9OnIsbz10LnBsYXlQYXVzZUtleSxhPXZvaWQgMD09PW8/ZnVuY3Rpb24oZSl7cmV0dXJuIFB0LmlzRXZlbnRLZXkoZSxcImtcIil8fFB0LmlzRXZlbnRLZXkoZSxcIlNwYWNlXCIpfTpvO2lmKGkuY2FsbCh0aGlzLGUpKXtlLnByZXZlbnREZWZhdWx0KCk7dmFyIGw9RmUuZ2V0Q29tcG9uZW50KFwiRnVsbHNjcmVlblRvZ2dsZVwiKTshMSE9PWRbdnQuZnVsbHNjcmVlbkVuYWJsZWRdJiZsLnByb3RvdHlwZS5oYW5kbGVDbGljay5jYWxsKHRoaXMpfWVsc2UgaWYocy5jYWxsKHRoaXMsZSkpe2UucHJldmVudERlZmF1bHQoKSxGZS5nZXRDb21wb25lbnQoXCJNdXRlVG9nZ2xlXCIpLnByb3RvdHlwZS5oYW5kbGVDbGljay5jYWxsKHRoaXMpfWVsc2UgaWYoYS5jYWxsKHRoaXMsZSkpe2UucHJldmVudERlZmF1bHQoKSxGZS5nZXRDb21wb25lbnQoXCJQbGF5VG9nZ2xlXCIpLnByb3RvdHlwZS5oYW5kbGVDbGljay5jYWxsKHRoaXMpfX0sZS5jYW5QbGF5VHlwZT1mdW5jdGlvbihlKXtmb3IodmFyIHQsbj0wLGk9dGhpcy5vcHRpb25zXy50ZWNoT3JkZXI7bjxpLmxlbmd0aDtuKyspe3ZhciByPWlbbl0scz1laS5nZXRUZWNoKHIpO2lmKHN8fChzPUZlLmdldENvbXBvbmVudChyKSkscyl7aWYocy5pc1N1cHBvcnRlZCgpJiYodD1zLmNhblBsYXlUeXBlKGUpKSlyZXR1cm4gdH1lbHNlIGcuZXJyb3IoJ1RoZSBcIicrcisnXCIgdGVjaCBpcyB1bmRlZmluZWQuIFNraXBwZWQgYnJvd3NlciBzdXBwb3J0IGNoZWNrIGZvciB0aGF0IHRlY2guJyl9cmV0dXJuXCJcIn0sZS5zZWxlY3RTb3VyY2U9ZnVuY3Rpb24oZSl7dmFyIG4saT10aGlzLHQ9dGhpcy5vcHRpb25zXy50ZWNoT3JkZXIubWFwKGZ1bmN0aW9uKGUpe3JldHVybltlLGVpLmdldFRlY2goZSldfSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3ZhciB0PWVbMF0sbj1lWzFdO3JldHVybiBuP24uaXNTdXBwb3J0ZWQoKTooZy5lcnJvcignVGhlIFwiJyt0KydcIiB0ZWNoIGlzIHVuZGVmaW5lZC4gU2tpcHBlZCBicm93c2VyIHN1cHBvcnQgY2hlY2sgZm9yIHRoYXQgdGVjaC4nKSwhMSl9KSxyPWZ1bmN0aW9uKGUsbixpKXt2YXIgcjtyZXR1cm4gZS5zb21lKGZ1bmN0aW9uKHQpe3JldHVybiBuLnNvbWUoZnVuY3Rpb24oZSl7aWYocj1pKHQsZSkpcmV0dXJuITB9KX0pLHJ9LHM9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lWzBdO2lmKGVbMV0uY2FuUGxheVNvdXJjZSh0LGkub3B0aW9uc19bbi50b0xvd2VyQ2FzZSgpXSkpcmV0dXJue3NvdXJjZTp0LHRlY2g6bn19O3JldHVybih0aGlzLm9wdGlvbnNfLnNvdXJjZU9yZGVyP3IoZSx0LChuPXMsZnVuY3Rpb24oZSx0KXtyZXR1cm4gbih0LGUpfSkpOnIodCxlLHMpKXx8ITF9LGUuc3JjPWZ1bmN0aW9uKGUpe3ZhciByPXRoaXM7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGUpcmV0dXJuIHRoaXMuY2FjaGVfLnNyY3x8XCJcIjt2YXIgcz1mdW5jdGlvbiB0KGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpe3ZhciBuPVtdO2UuZm9yRWFjaChmdW5jdGlvbihlKXtlPXQoZSksQXJyYXkuaXNBcnJheShlKT9uPW4uY29uY2F0KGUpOmIoZSkmJm4ucHVzaChlKX0pLGU9bn1lbHNlIGU9XCJzdHJpbmdcIj09dHlwZW9mIGUmJmUudHJpbSgpP1twaSh7c3JjOmV9KV06YihlKSYmXCJzdHJpbmdcIj09dHlwZW9mIGUuc3JjJiZlLnNyYyYmZS5zcmMudHJpbSgpP1twaShlKV06W107cmV0dXJuIGV9KGUpO3MubGVuZ3RoPyh0aGlzLmNoYW5naW5nU3JjXz0hMCx0aGlzLmNhY2hlXy5zb3VyY2VzPXMsdGhpcy51cGRhdGVTb3VyY2VDYWNoZXNfKHNbMF0pLHJpKHRoaXMsc1swXSxmdW5jdGlvbihlLHQpe3ZhciBuLGk7aWYoci5taWRkbGV3YXJlXz10LHIuY2FjaGVfLnNvdXJjZXM9cyxyLnVwZGF0ZVNvdXJjZUNhY2hlc18oZSksci5zcmNfKGUpKXJldHVybiAxPHMubGVuZ3RoP3Iuc3JjKHMuc2xpY2UoMSkpOihyLmNoYW5naW5nU3JjXz0hMSxyLnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0aGlzLmVycm9yKHtjb2RlOjQsbWVzc2FnZTp0aGlzLmxvY2FsaXplKHRoaXMub3B0aW9uc18ubm90U3VwcG9ydGVkTWVzc2FnZSl9KX0sMCksdm9pZCByLnRyaWdnZXJSZWFkeSgpKTtuPXQsaT1yLnRlY2hfLG4uZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5zZXRUZWNoJiZlLnNldFRlY2goaSl9KX0pKTp0aGlzLnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0aGlzLmVycm9yKHtjb2RlOjQsbWVzc2FnZTp0aGlzLmxvY2FsaXplKHRoaXMub3B0aW9uc18ubm90U3VwcG9ydGVkTWVzc2FnZSl9KX0sMCl9LGUuc3JjXz1mdW5jdGlvbihlKXt2YXIgdCxuLGk9dGhpcyxyPXRoaXMuc2VsZWN0U291cmNlKFtlXSk7cmV0dXJuIXJ8fCh0PXIudGVjaCxuPXRoaXMudGVjaE5hbWVfLFJlKHQpIT09UmUobik/KHRoaXMuY2hhbmdpbmdTcmNfPSEwLHRoaXMubG9hZFRlY2hfKHIudGVjaCxyLnNvdXJjZSksdGhpcy50ZWNoXy5yZWFkeShmdW5jdGlvbigpe2kuY2hhbmdpbmdTcmNfPSExfSkpOnRoaXMucmVhZHkoZnVuY3Rpb24oKXt0aGlzLnRlY2hfLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShcInNldFNvdXJjZVwiKT90aGlzLnRlY2hDYWxsXyhcInNldFNvdXJjZVwiLGUpOnRoaXMudGVjaENhbGxfKFwic3JjXCIsZS5zcmMpLHRoaXMuY2hhbmdpbmdTcmNfPSExfSwhMCksITEpfSxlLmxvYWQ9ZnVuY3Rpb24oKXt0aGlzLnRlY2hDYWxsXyhcImxvYWRcIil9LGUucmVzZXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5vcHRpb25zXy5Qcm9taXNlfHxoLlByb21pc2U7dGhpcy5wYXVzZWQoKXx8IXQ/dGhpcy5kb1Jlc2V0XygpOnd0KHRoaXMucGxheSgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZS5kb1Jlc2V0XygpfSkpfSxlLmRvUmVzZXRfPWZ1bmN0aW9uKCl7dGhpcy50ZWNoXyYmdGhpcy50ZWNoXy5jbGVhclRyYWNrcyhcInRleHRcIiksdGhpcy5yZXNldENhY2hlXygpLHRoaXMucG9zdGVyKFwiXCIpLHRoaXMubG9hZFRlY2hfKHRoaXMub3B0aW9uc18udGVjaE9yZGVyWzBdLG51bGwpLHRoaXMudGVjaENhbGxfKFwicmVzZXRcIiksdGhpcy5yZXNldENvbnRyb2xCYXJVSV8oKSxTZSh0aGlzKSYmdGhpcy50cmlnZ2VyKFwicGxheWVycmVzZXRcIil9LGUucmVzZXRDb250cm9sQmFyVUlfPWZ1bmN0aW9uKCl7dGhpcy5yZXNldFByb2dyZXNzQmFyXygpLHRoaXMucmVzZXRQbGF5YmFja1JhdGVfKCksdGhpcy5yZXNldFZvbHVtZUJhcl8oKX0sZS5yZXNldFByb2dyZXNzQmFyXz1mdW5jdGlvbigpe3RoaXMuY3VycmVudFRpbWUoMCk7dmFyIGU9dGhpcy5jb250cm9sQmFyLHQ9ZS5kdXJhdGlvbkRpc3BsYXksbj1lLnJlbWFpbmluZ1RpbWVEaXNwbGF5O3QmJnQudXBkYXRlQ29udGVudCgpLG4mJm4udXBkYXRlQ29udGVudCgpfSxlLnJlc2V0UGxheWJhY2tSYXRlXz1mdW5jdGlvbigpe3RoaXMucGxheWJhY2tSYXRlKHRoaXMuZGVmYXVsdFBsYXliYWNrUmF0ZSgpKSx0aGlzLmhhbmRsZVRlY2hSYXRlQ2hhbmdlXygpfSxlLnJlc2V0Vm9sdW1lQmFyXz1mdW5jdGlvbigpe3RoaXMudm9sdW1lKDEpLHRoaXMudHJpZ2dlcihcInZvbHVtZWNoYW5nZVwiKX0sZS5jdXJyZW50U291cmNlcz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3VycmVudFNvdXJjZSgpLHQ9W107cmV0dXJuIDAhPT1PYmplY3Qua2V5cyhlKS5sZW5ndGgmJnQucHVzaChlKSx0aGlzLmNhY2hlXy5zb3VyY2VzfHx0fSxlLmN1cnJlbnRTb3VyY2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jYWNoZV8uc291cmNlfHx7fX0sZS5jdXJyZW50U3JjPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3VycmVudFNvdXJjZSgpJiZ0aGlzLmN1cnJlbnRTb3VyY2UoKS5zcmN8fFwiXCJ9LGUuY3VycmVudFR5cGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdXJyZW50U291cmNlKCkmJnRoaXMuY3VycmVudFNvdXJjZSgpLnR5cGV8fFwiXCJ9LGUucHJlbG9hZD1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwIT09ZT8odGhpcy50ZWNoQ2FsbF8oXCJzZXRQcmVsb2FkXCIsZSksdm9pZCh0aGlzLm9wdGlvbnNfLnByZWxvYWQ9ZSkpOnRoaXMudGVjaEdldF8oXCJwcmVsb2FkXCIpfSxlLmF1dG9wbGF5PWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuIHRoaXMub3B0aW9uc18uYXV0b3BsYXl8fCExO3ZhciB0O1wic3RyaW5nXCI9PXR5cGVvZiBlJiYvKGFueXxwbGF5fG11dGVkKS8udGVzdChlKT8odGhpcy5vcHRpb25zXy5hdXRvcGxheT1lLHRoaXMubWFudWFsQXV0b3BsYXlfKGUpLHQ9ITEpOnRoaXMub3B0aW9uc18uYXV0b3BsYXk9ISFlLHQ9XCJ1bmRlZmluZWRcIj09dHlwZW9mIHQ/dGhpcy5vcHRpb25zXy5hdXRvcGxheTp0LHRoaXMudGVjaF8mJnRoaXMudGVjaENhbGxfKFwic2V0QXV0b3BsYXlcIix0KX0sZS5wbGF5c2lubGluZT1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwIT09ZT8odGhpcy50ZWNoQ2FsbF8oXCJzZXRQbGF5c2lubGluZVwiLGUpLHRoaXMub3B0aW9uc18ucGxheXNpbmxpbmU9ZSx0aGlzKTp0aGlzLnRlY2hHZXRfKFwicGxheXNpbmxpbmVcIil9LGUubG9vcD1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwIT09ZT8odGhpcy50ZWNoQ2FsbF8oXCJzZXRMb29wXCIsZSksdm9pZCh0aGlzLm9wdGlvbnNfLmxvb3A9ZSkpOnRoaXMudGVjaEdldF8oXCJsb29wXCIpfSxlLnBvc3Rlcj1mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXJldHVybiB0aGlzLnBvc3Rlcl87ZXx8KGU9XCJcIiksZSE9PXRoaXMucG9zdGVyXyYmKHRoaXMucG9zdGVyXz1lLHRoaXMudGVjaENhbGxfKFwic2V0UG9zdGVyXCIsZSksdGhpcy5pc1Bvc3RlckZyb21UZWNoXz0hMSx0aGlzLnRyaWdnZXIoXCJwb3N0ZXJjaGFuZ2VcIikpfSxlLmhhbmRsZVRlY2hQb3N0ZXJDaGFuZ2VfPWZ1bmN0aW9uKCl7aWYoKCF0aGlzLnBvc3Rlcl98fHRoaXMub3B0aW9uc18udGVjaENhbk92ZXJyaWRlUG9zdGVyKSYmdGhpcy50ZWNoXyYmdGhpcy50ZWNoXy5wb3N0ZXIpe3ZhciBlPXRoaXMudGVjaF8ucG9zdGVyKCl8fFwiXCI7ZSE9PXRoaXMucG9zdGVyXyYmKHRoaXMucG9zdGVyXz1lLHRoaXMuaXNQb3N0ZXJGcm9tVGVjaF89ITAsdGhpcy50cmlnZ2VyKFwicG9zdGVyY2hhbmdlXCIpKX19LGUuY29udHJvbHM9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4hIXRoaXMuY29udHJvbHNfO2U9ISFlLHRoaXMuY29udHJvbHNfIT09ZSYmKHRoaXMuY29udHJvbHNfPWUsdGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzKCkmJnRoaXMudGVjaENhbGxfKFwic2V0Q29udHJvbHNcIixlKSx0aGlzLmNvbnRyb2xzXz8odGhpcy5yZW1vdmVDbGFzcyhcInZqcy1jb250cm9scy1kaXNhYmxlZFwiKSx0aGlzLmFkZENsYXNzKFwidmpzLWNvbnRyb2xzLWVuYWJsZWRcIiksdGhpcy50cmlnZ2VyKFwiY29udHJvbHNlbmFibGVkXCIpLHRoaXMudXNpbmdOYXRpdmVDb250cm9scygpfHx0aGlzLmFkZFRlY2hDb250cm9sc0xpc3RlbmVyc18oKSk6KHRoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtY29udHJvbHMtZW5hYmxlZFwiKSx0aGlzLmFkZENsYXNzKFwidmpzLWNvbnRyb2xzLWRpc2FibGVkXCIpLHRoaXMudHJpZ2dlcihcImNvbnRyb2xzZGlzYWJsZWRcIiksdGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzKCl8fHRoaXMucmVtb3ZlVGVjaENvbnRyb2xzTGlzdGVuZXJzXygpKSl9LGUudXNpbmdOYXRpdmVDb250cm9scz1mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXJldHVybiEhdGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzXztlPSEhZSx0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHNfIT09ZSYmKHRoaXMudXNpbmdOYXRpdmVDb250cm9sc189ZSx0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHNfPyh0aGlzLmFkZENsYXNzKFwidmpzLXVzaW5nLW5hdGl2ZS1jb250cm9sc1wiKSx0aGlzLnRyaWdnZXIoXCJ1c2luZ25hdGl2ZWNvbnRyb2xzXCIpKToodGhpcy5yZW1vdmVDbGFzcyhcInZqcy11c2luZy1uYXRpdmUtY29udHJvbHNcIiksdGhpcy50cmlnZ2VyKFwidXNpbmdjdXN0b21jb250cm9sc1wiKSkpfSxlLmVycm9yPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lP3RoaXMuZXJyb3JffHxudWxsOm51bGw9PT1lPyh0aGlzLmVycm9yXz1lLHRoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtZXJyb3JcIiksdm9pZCh0aGlzLmVycm9yRGlzcGxheSYmdGhpcy5lcnJvckRpc3BsYXkuY2xvc2UoKSkpOih0aGlzLmVycm9yXz1uZXcgVHQoZSksdGhpcy5hZGRDbGFzcyhcInZqcy1lcnJvclwiKSxnLmVycm9yKFwiKENPREU6XCIrdGhpcy5lcnJvcl8uY29kZStcIiBcIitUdC5lcnJvclR5cGVzW3RoaXMuZXJyb3JfLmNvZGVdK1wiKVwiLHRoaXMuZXJyb3JfLm1lc3NhZ2UsdGhpcy5lcnJvcl8pLHZvaWQgdGhpcy50cmlnZ2VyKFwiZXJyb3JcIikpfSxlLnJlcG9ydFVzZXJBY3Rpdml0eT1mdW5jdGlvbihlKXt0aGlzLnVzZXJBY3Rpdml0eV89ITB9LGUudXNlckFjdGl2ZT1mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXJldHVybiB0aGlzLnVzZXJBY3RpdmVfO2lmKChlPSEhZSkhPT10aGlzLnVzZXJBY3RpdmVfKXtpZih0aGlzLnVzZXJBY3RpdmVfPWUsdGhpcy51c2VyQWN0aXZlXylyZXR1cm4gdGhpcy51c2VyQWN0aXZpdHlfPSEwLHRoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtdXNlci1pbmFjdGl2ZVwiKSx0aGlzLmFkZENsYXNzKFwidmpzLXVzZXItYWN0aXZlXCIpLHZvaWQgdGhpcy50cmlnZ2VyKFwidXNlcmFjdGl2ZVwiKTt0aGlzLnRlY2hfJiZ0aGlzLnRlY2hfLm9uZShcIm1vdXNlbW92ZVwiLGZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCksZS5wcmV2ZW50RGVmYXVsdCgpfSksdGhpcy51c2VyQWN0aXZpdHlfPSExLHRoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtdXNlci1hY3RpdmVcIiksdGhpcy5hZGRDbGFzcyhcInZqcy11c2VyLWluYWN0aXZlXCIpLHRoaXMudHJpZ2dlcihcInVzZXJpbmFjdGl2ZVwiKX19LGUubGlzdGVuRm9yVXNlckFjdGl2aXR5Xz1mdW5jdGlvbigpe3ZhciB0LG4saSxyPUNlKHRoaXMsdGhpcy5yZXBvcnRVc2VyQWN0aXZpdHkpO3RoaXMub24oXCJtb3VzZWRvd25cIixmdW5jdGlvbigpe3IoKSx0aGlzLmNsZWFySW50ZXJ2YWwodCksdD10aGlzLnNldEludGVydmFsKHIsMjUwKX0pLHRoaXMub24oXCJtb3VzZW1vdmVcIixmdW5jdGlvbihlKXtlLnNjcmVlblg9PT1uJiZlLnNjcmVlblk9PT1pfHwobj1lLnNjcmVlblgsaT1lLnNjcmVlblkscigpKX0pLHRoaXMub24oXCJtb3VzZXVwXCIsZnVuY3Rpb24oZSl7cigpLHRoaXMuY2xlYXJJbnRlcnZhbCh0KX0pO3ZhciBzLGU9dGhpcy5nZXRDaGlsZChcImNvbnRyb2xCYXJcIik7IWV8fEdlfHxKZXx8KGUub24oXCJtb3VzZWVudGVyXCIsZnVuY3Rpb24oZSl7dGhpcy5wbGF5ZXIoKS5jYWNoZV8uaW5hY3Rpdml0eVRpbWVvdXQ9dGhpcy5wbGF5ZXIoKS5vcHRpb25zXy5pbmFjdGl2aXR5VGltZW91dCx0aGlzLnBsYXllcigpLm9wdGlvbnNfLmluYWN0aXZpdHlUaW1lb3V0PTB9KSxlLm9uKFwibW91c2VsZWF2ZVwiLGZ1bmN0aW9uKGUpe3RoaXMucGxheWVyKCkub3B0aW9uc18uaW5hY3Rpdml0eVRpbWVvdXQ9dGhpcy5wbGF5ZXIoKS5jYWNoZV8uaW5hY3Rpdml0eVRpbWVvdXR9KSksdGhpcy5vbihcImtleWRvd25cIixyKSx0aGlzLm9uKFwia2V5dXBcIixyKSx0aGlzLnNldEludGVydmFsKGZ1bmN0aW9uKCl7aWYodGhpcy51c2VyQWN0aXZpdHlfKXt0aGlzLnVzZXJBY3Rpdml0eV89ITEsdGhpcy51c2VyQWN0aXZlKCEwKSx0aGlzLmNsZWFyVGltZW91dChzKTt2YXIgZT10aGlzLm9wdGlvbnNfLmluYWN0aXZpdHlUaW1lb3V0O2U8PTB8fChzPXRoaXMuc2V0VGltZW91dChmdW5jdGlvbigpe3RoaXMudXNlckFjdGl2aXR5X3x8dGhpcy51c2VyQWN0aXZlKCExKX0sZSkpfX0sMjUwKX0sZS5wbGF5YmFja1JhdGU9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4gdGhpcy50ZWNoXyYmdGhpcy50ZWNoXy5mZWF0dXJlc1BsYXliYWNrUmF0ZT90aGlzLmNhY2hlXy5sYXN0UGxheWJhY2tSYXRlfHx0aGlzLnRlY2hHZXRfKFwicGxheWJhY2tSYXRlXCIpOjE7dGhpcy50ZWNoQ2FsbF8oXCJzZXRQbGF5YmFja1JhdGVcIixlKX0sZS5kZWZhdWx0UGxheWJhY2tSYXRlPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDAhPT1lP3RoaXMudGVjaENhbGxfKFwic2V0RGVmYXVsdFBsYXliYWNrUmF0ZVwiLGUpOnRoaXMudGVjaF8mJnRoaXMudGVjaF8uZmVhdHVyZXNQbGF5YmFja1JhdGU/dGhpcy50ZWNoR2V0XyhcImRlZmF1bHRQbGF5YmFja1JhdGVcIik6MX0sZS5pc0F1ZGlvPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuISF0aGlzLmlzQXVkaW9fO3RoaXMuaXNBdWRpb189ISFlfSxlLmFkZFRleHRUcmFjaz1mdW5jdGlvbihlLHQsbil7aWYodGhpcy50ZWNoXylyZXR1cm4gdGhpcy50ZWNoXy5hZGRUZXh0VHJhY2soZSx0LG4pfSxlLmFkZFJlbW90ZVRleHRUcmFjaz1mdW5jdGlvbihlLHQpe2lmKHRoaXMudGVjaF8pcmV0dXJuIHRoaXMudGVjaF8uYWRkUmVtb3RlVGV4dFRyYWNrKGUsdCl9LGUucmVtb3ZlUmVtb3RlVGV4dFRyYWNrPWZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUmJihlPXt9KTt2YXIgdD1lLnRyYWNrO2lmKHR8fCh0PWUpLHRoaXMudGVjaF8pcmV0dXJuIHRoaXMudGVjaF8ucmVtb3ZlUmVtb3RlVGV4dFRyYWNrKHQpfSxlLmdldFZpZGVvUGxheWJhY2tRdWFsaXR5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGVjaEdldF8oXCJnZXRWaWRlb1BsYXliYWNrUXVhbGl0eVwiKX0sZS52aWRlb1dpZHRoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGVjaF8mJnRoaXMudGVjaF8udmlkZW9XaWR0aCYmdGhpcy50ZWNoXy52aWRlb1dpZHRoKCl8fDB9LGUudmlkZW9IZWlnaHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50ZWNoXyYmdGhpcy50ZWNoXy52aWRlb0hlaWdodCYmdGhpcy50ZWNoXy52aWRlb0hlaWdodCgpfHwwfSxlLmxhbmd1YWdlPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuIHRoaXMubGFuZ3VhZ2VfO3RoaXMubGFuZ3VhZ2VfPVN0cmluZyhlKS50b0xvd2VyQ2FzZSgpfSxlLmxhbmd1YWdlcz1mdW5jdGlvbigpe3JldHVybiBCZShjLnByb3RvdHlwZS5vcHRpb25zXy5sYW5ndWFnZXMsdGhpcy5sYW5ndWFnZXNfKX0sZS50b0pTT049ZnVuY3Rpb24oKXt2YXIgZT1CZSh0aGlzLm9wdGlvbnNfKSx0PWUudHJhY2tzO2UudHJhY2tzPVtdO2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgaT10W25dOyhpPUJlKGkpKS5wbGF5ZXI9dm9pZCAwLGUudHJhY2tzW25dPWl9cmV0dXJuIGV9LGUuY3JlYXRlTW9kYWw9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzOyh0PXR8fHt9KS5jb250ZW50PWV8fFwiXCI7dmFyIGk9bmV3IE10KHRoaXMsdCk7cmV0dXJuIHRoaXMuYWRkQ2hpbGQoaSksaS5vbihcImRpc3Bvc2VcIixmdW5jdGlvbigpe24ucmVtb3ZlQ2hpbGQoaSl9KSxpLm9wZW4oKSxpfSxlLnVwZGF0ZUN1cnJlbnRCcmVha3BvaW50Xz1mdW5jdGlvbigpe2lmKHRoaXMucmVzcG9uc2l2ZSgpKWZvcih2YXIgZT10aGlzLmN1cnJlbnRCcmVha3BvaW50KCksdD10aGlzLmN1cnJlbnRXaWR0aCgpLG49MDtuPFFyLmxlbmd0aDtuKyspe3ZhciBpPVFyW25dO2lmKHQ8PXRoaXMuYnJlYWtwb2ludHNfW2ldKXtpZihlPT09aSlyZXR1cm47ZSYmdGhpcy5yZW1vdmVDbGFzcyhKcltlXSksdGhpcy5hZGRDbGFzcyhKcltpXSksdGhpcy5icmVha3BvaW50Xz1pO2JyZWFrfX19LGUucmVtb3ZlQ3VycmVudEJyZWFrcG9pbnRfPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jdXJyZW50QnJlYWtwb2ludENsYXNzKCk7dGhpcy5icmVha3BvaW50Xz1cIlwiLGUmJnRoaXMucmVtb3ZlQ2xhc3MoZSl9LGUuYnJlYWtwb2ludHM9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWV8fCh0aGlzLmJyZWFrcG9pbnRfPVwiXCIsdGhpcy5icmVha3BvaW50c189Xyh7fSxacixlKSx0aGlzLnVwZGF0ZUN1cnJlbnRCcmVha3BvaW50XygpKSxfKHRoaXMuYnJlYWtwb2ludHNfKX0sZS5yZXNwb25zaXZlPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lP3RoaXMucmVzcG9uc2l2ZV86KGU9Qm9vbGVhbihlKSkhPT10aGlzLnJlc3BvbnNpdmVfPygodGhpcy5yZXNwb25zaXZlXz1lKT8odGhpcy5vbihcInBsYXllcnJlc2l6ZVwiLHRoaXMudXBkYXRlQ3VycmVudEJyZWFrcG9pbnRfKSx0aGlzLnVwZGF0ZUN1cnJlbnRCcmVha3BvaW50XygpKToodGhpcy5vZmYoXCJwbGF5ZXJyZXNpemVcIix0aGlzLnVwZGF0ZUN1cnJlbnRCcmVha3BvaW50XyksdGhpcy5yZW1vdmVDdXJyZW50QnJlYWtwb2ludF8oKSksZSk6dm9pZCAwfSxlLmN1cnJlbnRCcmVha3BvaW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYnJlYWtwb2ludF99LGUuY3VycmVudEJyZWFrcG9pbnRDbGFzcz1mdW5jdGlvbigpe3JldHVybiBKclt0aGlzLmJyZWFrcG9pbnRfXXx8XCJcIn0sZS5sb2FkTWVkaWE9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO2lmKGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlKXt0aGlzLnJlc2V0KCksdGhpcy5jYWNoZV8ubWVkaWE9QmUoZSk7dmFyIGk9dGhpcy5jYWNoZV8ubWVkaWEscj1pLmFydHdvcmsscz1pLnBvc3RlcixvPWkuc3JjLGE9aS50ZXh0VHJhY2tzOyFyJiZzJiYodGhpcy5jYWNoZV8ubWVkaWEuYXJ0d29yaz1be3NyYzpzLHR5cGU6ZGkocyl9XSksbyYmdGhpcy5zcmMobykscyYmdGhpcy5wb3N0ZXIocyksQXJyYXkuaXNBcnJheShhKSYmYS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBuLmFkZFJlbW90ZVRleHRUcmFjayhlLCExKX0pLHRoaXMucmVhZHkodCl9fSxlLmdldE1lZGlhPWZ1bmN0aW9uKCl7aWYodGhpcy5jYWNoZV8ubWVkaWEpcmV0dXJuIEJlKHRoaXMuY2FjaGVfLm1lZGlhKTt2YXIgZT10aGlzLnBvc3RlcigpLHQ9e3NyYzp0aGlzLmN1cnJlbnRTb3VyY2VzKCksdGV4dFRyYWNrczpBcnJheS5wcm90b3R5cGUubWFwLmNhbGwodGhpcy5yZW1vdGVUZXh0VHJhY2tzKCksZnVuY3Rpb24oZSl7cmV0dXJue2tpbmQ6ZS5raW5kLGxhYmVsOmUubGFiZWwsbGFuZ3VhZ2U6ZS5sYW5ndWFnZSxzcmM6ZS5zcmN9fSl9O3JldHVybiBlJiYodC5wb3N0ZXI9ZSx0LmFydHdvcms9W3tzcmM6dC5wb3N0ZXIsdHlwZTpkaSh0LnBvc3Rlcil9XSksdH0sYy5nZXRUYWdTZXR0aW5ncz1mdW5jdGlvbihlKXt2YXIgdD17c291cmNlczpbXSx0cmFja3M6W119LG49SShlKSxpPW5bXCJkYXRhLXNldHVwXCJdO2lmKFAoZSxcInZqcy1maWxsXCIpJiYobi5maWxsPSEwKSxQKGUsXCJ2anMtZmx1aWRcIikmJihuLmZsdWlkPSEwKSxudWxsIT09aSl7dmFyIHI9Q3QoaXx8XCJ7fVwiKSxzPXJbMF0sbz1yWzFdO3MmJmcuZXJyb3IocyksXyhuLG8pfWlmKF8odCxuKSxlLmhhc0NoaWxkTm9kZXMoKSlmb3IodmFyIGE9ZS5jaGlsZE5vZGVzLGw9MCxjPWEubGVuZ3RoO2w8YztsKyspe3ZhciB1PWFbbF0saD11Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzb3VyY2VcIj09PWg/dC5zb3VyY2VzLnB1c2goSSh1KSk6XCJ0cmFja1wiPT09aCYmdC50cmFja3MucHVzaChJKHUpKX1yZXR1cm4gdH0sZS5mbGV4Tm90U3VwcG9ydGVkXz1mdW5jdGlvbigpe3ZhciBlPWQuY3JlYXRlRWxlbWVudChcImlcIik7cmV0dXJuIShcImZsZXhCYXNpc1wiaW4gZS5zdHlsZXx8XCJ3ZWJraXRGbGV4QmFzaXNcImluIGUuc3R5bGV8fFwibW96RmxleEJhc2lzXCJpbiBlLnN0eWxlfHxcIm1zRmxleEJhc2lzXCJpbiBlLnN0eWxlfHxcIm1zRmxleE9yZGVyXCJpbiBlLnN0eWxlKX0sY30oRmUpO3duLm5hbWVzLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9d25bZV07ZXMucHJvdG90eXBlW3QuZ2V0dGVyTmFtZV09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50ZWNoXz90aGlzLnRlY2hfW3QuZ2V0dGVyTmFtZV0oKToodGhpc1t0LnByaXZhdGVOYW1lXT10aGlzW3QucHJpdmF0ZU5hbWVdfHxuZXcgdC5MaXN0Q2xhc3MsdGhpc1t0LnByaXZhdGVOYW1lXSl9fSksZXMucGxheWVycz17fTt2YXIgdHM9aC5uYXZpZ2F0b3I7ZXMucHJvdG90eXBlLm9wdGlvbnNfPXt0ZWNoT3JkZXI6ZWkuZGVmYXVsdFRlY2hPcmRlcl8saHRtbDU6e30sZmxhc2g6e30saW5hY3Rpdml0eVRpbWVvdXQ6MmUzLHBsYXliYWNrUmF0ZXM6W10sbGl2ZXVpOiExLGNoaWxkcmVuOltcIm1lZGlhTG9hZGVyXCIsXCJwb3N0ZXJJbWFnZVwiLFwidGV4dFRyYWNrRGlzcGxheVwiLFwibG9hZGluZ1NwaW5uZXJcIixcImJpZ1BsYXlCdXR0b25cIixcImxpdmVUcmFja2VyXCIsXCJjb250cm9sQmFyXCIsXCJlcnJvckRpc3BsYXlcIixcInRleHRUcmFja1NldHRpbmdzXCIsXCJyZXNpemVNYW5hZ2VyXCJdLGxhbmd1YWdlOnRzJiYodHMubGFuZ3VhZ2VzJiZ0cy5sYW5ndWFnZXNbMF18fHRzLnVzZXJMYW5ndWFnZXx8dHMubGFuZ3VhZ2UpfHxcImVuXCIsbGFuZ3VhZ2VzOnt9LG5vdFN1cHBvcnRlZE1lc3NhZ2U6XCJObyBjb21wYXRpYmxlIHNvdXJjZSB3YXMgZm91bmQgZm9yIHRoaXMgbWVkaWEuXCIsYnJlYWtwb2ludHM6e30scmVzcG9uc2l2ZTohMX0sW1wiZW5kZWRcIixcInNlZWtpbmdcIixcInNlZWthYmxlXCIsXCJuZXR3b3JrU3RhdGVcIixcInJlYWR5U3RhdGVcIl0uZm9yRWFjaChmdW5jdGlvbihlKXtlcy5wcm90b3R5cGVbZV09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50ZWNoR2V0XyhlKX19KSxZci5mb3JFYWNoKGZ1bmN0aW9uKGUpe2VzLnByb3RvdHlwZVtcImhhbmRsZVRlY2hcIitSZShlKStcIl9cIl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50cmlnZ2VyKGUpfX0pLEZlLnJlZ2lzdGVyQ29tcG9uZW50KFwiUGxheWVyXCIsZXMpO3ZhciBucz1cInBsdWdpblwiLGlzPVwiYWN0aXZlUGx1Z2luc19cIixycz17fSxzcz1mdW5jdGlvbihlKXtyZXR1cm4gcnMuaGFzT3duUHJvcGVydHkoZSl9LG9zPWZ1bmN0aW9uKGUpe3JldHVybiBzcyhlKT9yc1tlXTp2b2lkIDB9LGFzPWZ1bmN0aW9uKGUsdCl7ZVtpc109ZVtpc118fHt9LGVbaXNdW3RdPSEwfSxscz1mdW5jdGlvbihlLHQsbil7dmFyIGk9KG4/XCJiZWZvcmVcIjpcIlwiKStcInBsdWdpbnNldHVwXCI7ZS50cmlnZ2VyKGksdCksZS50cmlnZ2VyKGkrXCI6XCIrdC5uYW1lLHQpfSxjcz1mdW5jdGlvbihyLHMpe3JldHVybiBzLnByb3RvdHlwZS5uYW1lPXIsZnVuY3Rpb24oKXtscyh0aGlzLHtuYW1lOnIscGx1Z2luOnMsaW5zdGFuY2U6bnVsbH0sITApO2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLG49MDtuPGU7bisrKXRbbl09YXJndW1lbnRzW25dO3ZhciBpPW8ocyxbdGhpc10uY29uY2F0KHQpKTtyZXR1cm4gdGhpc1tyXT1mdW5jdGlvbigpe3JldHVybiBpfSxscyh0aGlzLGkuZ2V0RXZlbnRIYXNoKCkpLGl9fSx1cz1mdW5jdGlvbigpe2Z1bmN0aW9uIHMoZSl7aWYodGhpcy5jb25zdHJ1Y3Rvcj09PXMpdGhyb3cgbmV3IEVycm9yKFwiUGx1Z2luIG11c3QgYmUgc3ViLWNsYXNzZWQ7IG5vdCBkaXJlY3RseSBpbnN0YW50aWF0ZWQuXCIpO3RoaXMucGxheWVyPWUsT2UodGhpcyksZGVsZXRlIHRoaXMudHJpZ2dlcixEZSh0aGlzLHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdFN0YXRlKSxhcyhlLHRoaXMubmFtZSksdGhpcy5kaXNwb3NlPUNlKHRoaXMsdGhpcy5kaXNwb3NlKSxlLm9uKFwiZGlzcG9zZVwiLHRoaXMuZGlzcG9zZSl9dmFyIGU9cy5wcm90b3R5cGU7cmV0dXJuIGUudmVyc2lvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLlZFUlNJT059LGUuZ2V0RXZlbnRIYXNoPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT17fSksZS5uYW1lPXRoaXMubmFtZSxlLnBsdWdpbj10aGlzLmNvbnN0cnVjdG9yLGUuaW5zdGFuY2U9dGhpcyxlfSxlLnRyaWdnZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9e30pLHBlKHRoaXMuZXZlbnRCdXNFbF8sZSx0aGlzLmdldEV2ZW50SGFzaCh0KSl9LGUuaGFuZGxlU3RhdGVDaGFuZ2VkPWZ1bmN0aW9uKGUpe30sZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5uYW1lLHQ9dGhpcy5wbGF5ZXI7dGhpcy50cmlnZ2VyKFwiZGlzcG9zZVwiKSx0aGlzLm9mZigpLHQub2ZmKFwiZGlzcG9zZVwiLHRoaXMuZGlzcG9zZSksdFtpc11bZV09ITEsdGhpcy5wbGF5ZXI9dGhpcy5zdGF0ZT1udWxsLHRbZV09Y3MoZSxyc1tlXSl9LHMuaXNCYXNpYz1mdW5jdGlvbihlKXt2YXIgdD1cInN0cmluZ1wiPT10eXBlb2YgZT9vcyhlKTplO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJiFzLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKHQucHJvdG90eXBlKX0scy5yZWdpc3RlclBsdWdpbj1mdW5jdGlvbihlLHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcignSWxsZWdhbCBwbHVnaW4gbmFtZSwgXCInK2UrJ1wiLCBtdXN0IGJlIGEgc3RyaW5nLCB3YXMgJyt0eXBlb2YgZStcIi5cIik7aWYoc3MoZSkpZy53YXJuKCdBIHBsdWdpbiBuYW1lZCBcIicrZSsnXCIgYWxyZWFkeSBleGlzdHMuIFlvdSBtYXkgd2FudCB0byBhdm9pZCByZS1yZWdpc3RlcmluZyBwbHVnaW5zIScpO2Vsc2UgaWYoZXMucHJvdG90eXBlLmhhc093blByb3BlcnR5KGUpKXRocm93IG5ldyBFcnJvcignSWxsZWdhbCBwbHVnaW4gbmFtZSwgXCInK2UrJ1wiLCBjYW5ub3Qgc2hhcmUgYSBuYW1lIHdpdGggYW4gZXhpc3RpbmcgcGxheWVyIG1ldGhvZCEnKTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBFcnJvcignSWxsZWdhbCBwbHVnaW4gZm9yIFwiJytlKydcIiwgbXVzdCBiZSBhIGZ1bmN0aW9uLCB3YXMgJyt0eXBlb2YgdCtcIi5cIik7dmFyIG4saSxyO3JldHVybiByc1tlXT10LGUhPT1ucyYmKHMuaXNCYXNpYyh0KT9lcy5wcm90b3R5cGVbZV09KG49ZSxpPXQscj1mdW5jdGlvbigpe2xzKHRoaXMse25hbWU6bixwbHVnaW46aSxpbnN0YW5jZTpudWxsfSwhMCk7dmFyIGU9aS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGFzKHRoaXMsbiksbHModGhpcyx7bmFtZTpuLHBsdWdpbjppLGluc3RhbmNlOmV9KSxlfSxPYmplY3Qua2V5cyhpKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JbZV09aVtlXX0pLHIpOmVzLnByb3RvdHlwZVtlXT1jcyhlLHQpKSx0fSxzLmRlcmVnaXN0ZXJQbHVnaW49ZnVuY3Rpb24oZSl7aWYoZT09PW5zKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBkZS1yZWdpc3RlciBiYXNlIHBsdWdpbi5cIik7c3MoZSkmJihkZWxldGUgcnNbZV0sZGVsZXRlIGVzLnByb3RvdHlwZVtlXSl9LHMuZ2V0UGx1Z2lucz1mdW5jdGlvbihlKXt2YXIgbjtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9T2JqZWN0LmtleXMocnMpKSxlLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9b3MoZSk7dCYmKChuPW58fHt9KVtlXT10KX0pLG59LHMuZ2V0UGx1Z2luVmVyc2lvbj1mdW5jdGlvbihlKXt2YXIgdD1vcyhlKTtyZXR1cm4gdCYmdC5WRVJTSU9OfHxcIlwifSxzfSgpO3VzLmdldFBsdWdpbj1vcyx1cy5CQVNFX1BMVUdJTl9OQU1FPW5zLHVzLnJlZ2lzdGVyUGx1Z2luKG5zLHVzKSxlcy5wcm90b3R5cGUudXNpbmdQbHVnaW49ZnVuY3Rpb24oZSl7cmV0dXJuISF0aGlzW2lzXSYmITA9PT10aGlzW2lzXVtlXX0sZXMucHJvdG90eXBlLmhhc1BsdWdpbj1mdW5jdGlvbihlKXtyZXR1cm4hIXNzKGUpfTt2YXIgaHM9ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PT1lLmluZGV4T2YoXCIjXCIpP2Uuc2xpY2UoMSk6ZX07ZnVuY3Rpb24gZHMoZSxuLHQpe3ZhciBpPWRzLmdldFBsYXllcihlKTtpZihpKXJldHVybiBuJiZnLndhcm4oJ1BsYXllciBcIicrZSsnXCIgaXMgYWxyZWFkeSBpbml0aWFsaXNlZC4gT3B0aW9ucyB3aWxsIG5vdCBiZSBhcHBsaWVkLicpLHQmJmkucmVhZHkodCksaTt2YXIgcj1cInN0cmluZ1wiPT10eXBlb2YgZT9HKFwiI1wiK2hzKGUpKTplO2lmKCFFKHIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgZWxlbWVudCBvciBJRCBzdXBwbGllZCBpcyBub3QgdmFsaWQuICh2aWRlb2pzKVwiKTtyLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcmJnIub3duZXJEb2N1bWVudC5ib2R5LmNvbnRhaW5zKHIpfHxnLndhcm4oXCJUaGUgZWxlbWVudCBzdXBwbGllZCBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIERPTVwiKSxuPW58fHt9LGRzLmhvb2tzKFwiYmVmb3Jlc2V0dXBcIikuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lKHIsQmUobikpO2IodCkmJiFBcnJheS5pc0FycmF5KHQpP249QmUobix0KTpnLmVycm9yKFwicGxlYXNlIHJldHVybiBhbiBvYmplY3QgaW4gYmVmb3Jlc2V0dXAgaG9va3NcIil9KTt2YXIgcz1GZS5nZXRDb21wb25lbnQoXCJQbGF5ZXJcIik7cmV0dXJuIGk9bmV3IHMocixuLHQpLGRzLmhvb2tzKFwic2V0dXBcIikuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZShpKX0pLGl9aWYoZHMuaG9va3NfPXt9LGRzLmhvb2tzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGRzLmhvb2tzX1tlXT1kcy5ob29rc19bZV18fFtdLHQmJihkcy5ob29rc19bZV09ZHMuaG9va3NfW2VdLmNvbmNhdCh0KSksZHMuaG9va3NfW2VdfSxkcy5ob29rPWZ1bmN0aW9uKGUsdCl7ZHMuaG9va3MoZSx0KX0sZHMuaG9va09uY2U9ZnVuY3Rpb24obixlKXtkcy5ob29rcyhuLFtdLmNvbmNhdChlKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uIGUoKXtyZXR1cm4gZHMucmVtb3ZlSG9vayhuLGUpLHQuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9fSkpfSxkcy5yZW1vdmVIb29rPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZHMuaG9va3MoZSkuaW5kZXhPZih0KTtyZXR1cm4hKG48PS0xKSYmKGRzLmhvb2tzX1tlXT1kcy5ob29rc19bZV0uc2xpY2UoKSxkcy5ob29rc19bZV0uc3BsaWNlKG4sMSksITApfSwhMCE9PWguVklERU9KU19OT19EWU5BTUlDX1NUWUxFJiZDKCkpe3ZhciBwcz1HKFwiLnZqcy1zdHlsZXMtZGVmYXVsdHNcIik7aWYoIXBzKXtwcz1UZShcInZqcy1zdHlsZXMtZGVmYXVsdHNcIik7dmFyIGZzPUcoXCJoZWFkXCIpO2ZzJiZmcy5pbnNlcnRCZWZvcmUocHMsZnMuZmlyc3RDaGlsZCksa2UocHMsXCJcXG4gICAgICAudmlkZW8tanMge1xcbiAgICAgICAgd2lkdGg6IDMwMHB4O1xcbiAgICAgICAgaGVpZ2h0OiAxNTBweDtcXG4gICAgICB9XFxuXFxuICAgICAgLnZqcy1mbHVpZCB7XFxuICAgICAgICBwYWRkaW5nLXRvcDogNTYuMjUlXFxuICAgICAgfVxcbiAgICBcIil9fXJldHVybiBfZSgxLGRzKSxkcy5WRVJTSU9OPXAsZHMub3B0aW9ucz1lcy5wcm90b3R5cGUub3B0aW9uc18sZHMuZ2V0UGxheWVycz1mdW5jdGlvbigpe3JldHVybiBlcy5wbGF5ZXJzfSxkcy5nZXRQbGF5ZXI9ZnVuY3Rpb24oZSl7dmFyIHQsbj1lcy5wbGF5ZXJzO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXt2YXIgaT1ocyhlKSxyPW5baV07aWYocilyZXR1cm4gcjt0PUcoXCIjXCIraSl9ZWxzZSB0PWU7aWYoRSh0KSl7dmFyIHM9dCxvPXMucGxheWVyLGE9cy5wbGF5ZXJJZDtpZihvfHxuW2FdKXJldHVybiBvfHxuW2FdfX0sZHMuZ2V0QWxsUGxheWVycz1mdW5jdGlvbigpe3JldHVybiBPYmplY3Qua2V5cyhlcy5wbGF5ZXJzKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGVzLnBsYXllcnNbZV19KS5maWx0ZXIoQm9vbGVhbil9LGRzLnBsYXllcnM9ZXMucGxheWVycyxkcy5nZXRDb21wb25lbnQ9RmUuZ2V0Q29tcG9uZW50LGRzLnJlZ2lzdGVyQ29tcG9uZW50PWZ1bmN0aW9uKGUsdCl7ZWkuaXNUZWNoKHQpJiZnLndhcm4oXCJUaGUgXCIrZStcIiB0ZWNoIHdhcyByZWdpc3RlcmVkIGFzIGEgY29tcG9uZW50LiBJdCBzaG91bGQgaW5zdGVhZCBiZSByZWdpc3RlcmVkIHVzaW5nIHZpZGVvanMucmVnaXN0ZXJUZWNoKG5hbWUsIHRlY2gpXCIpLEZlLnJlZ2lzdGVyQ29tcG9uZW50LmNhbGwoRmUsZSx0KX0sZHMuZ2V0VGVjaD1laS5nZXRUZWNoLGRzLnJlZ2lzdGVyVGVjaD1laS5yZWdpc3RlclRlY2gsZHMudXNlPWZ1bmN0aW9uKGUsdCl7dGlbZV09dGlbZV18fFtdLHRpW2VdLnB1c2godCl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkcyxcIm1pZGRsZXdhcmVcIix7dmFsdWU6e30sd3JpdGVhYmxlOiExLGVudW1lcmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZHMubWlkZGxld2FyZSxcIlRFUk1JTkFUT1JcIix7dmFsdWU6aWksd3JpdGVhYmxlOiExLGVudW1lcmFibGU6ITB9KSxkcy5icm93c2VyPWN0LGRzLlRPVUNIX0VOQUJMRUQ9bHQsZHMuZXh0ZW5kPWZ1bmN0aW9uKGUsdCl7dm9pZCAwPT09dCYmKHQ9e30pO3ZhciBuPWZ1bmN0aW9uKCl7ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGk9e307Zm9yKHZhciByIGluXCJvYmplY3RcIj09dHlwZW9mIHQ/KHQuY29uc3RydWN0b3IhPT1PYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yJiYobj10LmNvbnN0cnVjdG9yKSxpPXQpOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJihuPXQpLGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihlLnN1cGVyXz10KX0obixlKSxpKWkuaGFzT3duUHJvcGVydHkocikmJihuLnByb3RvdHlwZVtyXT1pW3JdKTtyZXR1cm4gbn0sZHMubWVyZ2VPcHRpb25zPUJlLGRzLmJpbmQ9Q2UsZHMucmVnaXN0ZXJQbHVnaW49dXMucmVnaXN0ZXJQbHVnaW4sZHMuZGVyZWdpc3RlclBsdWdpbj11cy5kZXJlZ2lzdGVyUGx1Z2luLGRzLnBsdWdpbj1mdW5jdGlvbihlLHQpe3JldHVybiBnLndhcm4oXCJ2aWRlb2pzLnBsdWdpbigpIGlzIGRlcHJlY2F0ZWQ7IHVzZSB2aWRlb2pzLnJlZ2lzdGVyUGx1Z2luKCkgaW5zdGVhZFwiKSx1cy5yZWdpc3RlclBsdWdpbihlLHQpfSxkcy5nZXRQbHVnaW5zPXVzLmdldFBsdWdpbnMsZHMuZ2V0UGx1Z2luPXVzLmdldFBsdWdpbixkcy5nZXRQbHVnaW5WZXJzaW9uPXVzLmdldFBsdWdpblZlcnNpb24sZHMuYWRkTGFuZ3VhZ2U9ZnVuY3Rpb24oZSx0KXt2YXIgbjtyZXR1cm4gZT0oXCJcIitlKS50b0xvd2VyQ2FzZSgpLGRzLm9wdGlvbnMubGFuZ3VhZ2VzPUJlKGRzLm9wdGlvbnMubGFuZ3VhZ2VzLCgobj17fSlbZV09dCxuKSksZHMub3B0aW9ucy5sYW5ndWFnZXNbZV19LGRzLmxvZz1nLGRzLmNyZWF0ZUxvZ2dlcj15LGRzLmNyZWF0ZVRpbWVSYW5nZT1kcy5jcmVhdGVUaW1lUmFuZ2VzPWR0LGRzLmZvcm1hdFRpbWU9QWksZHMuc2V0Rm9ybWF0VGltZT1mdW5jdGlvbihlKXtqaT1lfSxkcy5yZXNldEZvcm1hdFRpbWU9ZnVuY3Rpb24oKXtqaT14aX0sZHMucGFyc2VVcmw9WHQsZHMuaXNDcm9zc09yaWdpbj1HdCxkcy5FdmVudFRhcmdldD13ZSxkcy5vbj1oZSxkcy5vbmU9ZmUsZHMub2ZmPWRlLGRzLnRyaWdnZXI9cGUsZHMueGhyPWZuLGRzLlRleHRUcmFjaz1fbixkcy5BdWRpb1RyYWNrPWJuLGRzLlZpZGVvVHJhY2s9VG4sW1wiaXNFbFwiLFwiaXNUZXh0Tm9kZVwiLFwiY3JlYXRlRWxcIixcImhhc0NsYXNzXCIsXCJhZGRDbGFzc1wiLFwicmVtb3ZlQ2xhc3NcIixcInRvZ2dsZUNsYXNzXCIsXCJzZXRBdHRyaWJ1dGVzXCIsXCJnZXRBdHRyaWJ1dGVzXCIsXCJlbXB0eUVsXCIsXCJhcHBlbmRDb250ZW50XCIsXCJpbnNlcnRDb250ZW50XCJdLmZvckVhY2goZnVuY3Rpb24oZSl7ZHNbZV09ZnVuY3Rpb24oKXtyZXR1cm4gZy53YXJuKFwidmlkZW9qcy5cIitlK1wiKCkgaXMgZGVwcmVjYXRlZDsgdXNlIHZpZGVvanMuZG9tLlwiK2UrXCIoKSBpbnN0ZWFkXCIpLEpbZV0uYXBwbHkobnVsbCxhcmd1bWVudHMpfX0pLGRzLmNvbXB1dGVkU3R5bGU9aSxkcy5kb209Sixkcy51cmw9UXQsZHN9KTsiXX0=