"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * @license
 * Video.js 7.5.4 <http://videojs.com/>
 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
 * Available under Apache License Version 2.0
 * <https://github.com/videojs/video.js/blob/master/LICENSE>
 *
 * Includes vtt.js <https://github.com/mozilla/vtt.js>
 * Available under Apache License Version 2.0
 * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>
 */
!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = t(require("global/window"), require("global/document")) : "function" == typeof define && define.amd ? define(["global/window", "global/document"], t) : (e = e || self).videojs = t(e.window, e.document);
}(undefined, function (v, d) {
  v = v && v.hasOwnProperty("default") ? v.default : v, d = d && d.hasOwnProperty("default") ? d.default : d;var h = "7.5.4";function p(e, t) {
    e.prototype = Object.create(t.prototype), (e.prototype.constructor = e).__proto__ = t;
  }function a(e, t) {
    return (a = Object.setPrototypeOf || function (e, t) {
      return e.__proto__ = t, e;
    })(e, t);
  }function s(e, t, i) {
    return (s = function () {
      if ("undefined" == typeof Reflect || !Reflect.construct) return !1;if (Reflect.construct.sham) return !1;if ("function" == typeof Proxy) return !0;try {
        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
      } catch (e) {
        return !1;
      }
    }() ? Reflect.construct : function (e, t, i) {
      var n = [null];n.push.apply(n, t);var r = new (Function.bind.apply(e, n))();return i && a(r, i.prototype), r;
    }).apply(null, arguments);
  }function f(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e;
  }function t(e, t) {
    return t || (t = e.slice(0)), e.raw = t, e;
  }var u = [],
      e = function e(s, o) {
    return function (e, t, i) {
      var n = o.levels[t],
          r = new RegExp("^(" + n + ")$");if ("log" !== e && i.unshift(e.toUpperCase() + ":"), i.unshift(s + ":"), u && u.push([].concat(i)), v.console) {
        var a = v.console[e];a || "debug" !== e || (a = v.console.info || v.console.log), a && n && r.test(e) && a[Array.isArray(i) ? "apply" : "call"](v.console, i);
      }
    };
  };var m = function t(i) {
    var n,
        r = "info",
        a = function a() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
        t[i] = arguments[i];
      }n("log", r, t);
    };return n = e(i, a), a.createLogger = function (e) {
      return t(i + ": " + e);
    }, a.levels = { all: "debug|log|warn|error", off: "", debug: "debug|log|warn|error", info: "log|warn|error", warn: "warn|error", error: "error", DEFAULT: r }, a.level = function (e) {
      if ("string" == typeof e) {
        if (!a.levels.hasOwnProperty(e)) throw new Error('"' + e + '" in not a valid log level');r = e;
      }return r;
    }, (a.history = function () {
      return u ? [].concat(u) : [];
    }).filter = function (t) {
      return (u || []).filter(function (e) {
        return new RegExp(".*" + t + ".*").test(e[0]);
      });
    }, a.history.clear = function () {
      u && (u.length = 0);
    }, a.history.disable = function () {
      null !== u && (u.length = 0, u = null);
    }, a.history.enable = function () {
      null === u && (u = []);
    }, a.error = function () {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
        t[i] = arguments[i];
      }return n("error", r, t);
    }, a.warn = function () {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
        t[i] = arguments[i];
      }return n("warn", r, t);
    }, a.debug = function () {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
        t[i] = arguments[i];
      }return n("debug", r, t);
    }, a;
  }("VIDEOJS"),
      g = m.createLogger;var y = function y(e) {
    for (var t = "", i = 0; i < arguments.length; i++) {
      t += e[i].replace(/\n\r?\s*/g, "") + (arguments[i + 1] || "");
    }return t;
  },
      i = Object.prototype.toString,
      r = function r(e) {
    return b(e) ? Object.keys(e) : [];
  };function o(t, i) {
    r(t).forEach(function (e) {
      return i(t[e], e);
    });
  }function _(i) {
    for (var e = arguments.length, t = new Array(1 < e ? e - 1 : 0), n = 1; n < e; n++) {
      t[n - 1] = arguments[n];
    }return Object.assign ? Object.assign.apply(Object, [i].concat(t)) : (t.forEach(function (e) {
      e && o(e, function (e, t) {
        i[t] = e;
      });
    }), i);
  }function b(e) {
    return !!e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e));
  }function l(e) {
    return b(e) && "[object Object]" === i.call(e) && e.constructor === Object;
  }function n(e, t) {
    if (!e || !t) return "";if ("function" != typeof v.getComputedStyle) return "";var i = v.getComputedStyle(e);return i ? i[t] : "";
  }function c() {
    var e = t(["Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ", " to ", "."]);return c = function c() {
      return e;
    }, e;
  }function T(e) {
    return "string" == typeof e && /\S/.test(e);
  }function S(e) {
    if (/\s/.test(e)) throw new Error("class has illegal whitespace characters");
  }function k() {
    return d === v.document;
  }function C(e) {
    return b(e) && 1 === e.nodeType;
  }function w() {
    try {
      return v.parent !== v.self;
    } catch (e) {
      return !0;
    }
  }function E(n) {
    return function (e, t) {
      if (!T(e)) return d[n](null);T(t) && (t = d.querySelector(t));var i = C(t) ? t : d;return i[n] && i[n](e);
    };
  }function A(e, i, t, n) {
    void 0 === e && (e = "div"), void 0 === i && (i = {}), void 0 === t && (t = {});var r = d.createElement(e);return Object.getOwnPropertyNames(i).forEach(function (e) {
      var t = i[e];-1 !== e.indexOf("aria-") || "role" === e || "type" === e ? (m.warn(y(c(), e, t)), r.setAttribute(e, t)) : "textContent" === e ? L(r, t) : r[e] = t;
    }), Object.getOwnPropertyNames(t).forEach(function (e) {
      r.setAttribute(e, t[e]);
    }), n && X(r, n), r;
  }function L(e, t) {
    return "undefined" == typeof e.textContent ? e.innerText = t : e.textContent = t, e;
  }function P(e, t) {
    t.firstChild ? t.insertBefore(e, t.firstChild) : t.appendChild(e);
  }function O(e, t) {
    return S(t), e.classList ? e.classList.contains(t) : (i = t, new RegExp("(^|\\s)" + i + "($|\\s)")).test(e.className);var i;
  }function I(e, t) {
    return e.classList ? e.classList.add(t) : O(e, t) || (e.className = (e.className + " " + t).trim()), e;
  }function U(e, t) {
    return e.classList ? e.classList.remove(t) : (S(t), e.className = e.className.split(/\s+/).filter(function (e) {
      return e !== t;
    }).join(" ")), e;
  }function D(e, t, i) {
    var n = O(e, t);if ("function" == typeof i && (i = i(e, t)), "boolean" != typeof i && (i = !n), i !== n) return i ? I(e, t) : U(e, t), e;
  }function x(i, n) {
    Object.getOwnPropertyNames(n).forEach(function (e) {
      var t = n[e];null === t || "undefined" == typeof t || !1 === t ? i.removeAttribute(e) : i.setAttribute(e, !0 === t ? "" : t);
    });
  }function R(e) {
    var t = {},
        i = ",autoplay,controls,playsinline,loop,muted,default,defaultMuted,";if (e && e.attributes && 0 < e.attributes.length) for (var n = e.attributes, r = n.length - 1; 0 <= r; r--) {
      var a = n[r].name,
          s = n[r].value;"boolean" != typeof e[a] && -1 === i.indexOf("," + a + ",") || (s = null !== s), t[a] = s;
    }return t;
  }function M(e, t) {
    return e.getAttribute(t);
  }function B(e, t, i) {
    e.setAttribute(t, i);
  }function N(e, t) {
    e.removeAttribute(t);
  }function j() {
    d.body.focus(), d.onselectstart = function () {
      return !1;
    };
  }function F() {
    d.onselectstart = function () {
      return !0;
    };
  }function H(e) {
    if (e && e.getBoundingClientRect && e.parentNode) {
      var t = e.getBoundingClientRect(),
          i = {};return ["bottom", "height", "left", "right", "top", "width"].forEach(function (e) {
        void 0 !== t[e] && (i[e] = t[e]);
      }), i.height || (i.height = parseFloat(n(e, "height"))), i.width || (i.width = parseFloat(n(e, "width"))), i;
    }
  }function V(e) {
    var t;if (e.getBoundingClientRect && e.parentNode && (t = e.getBoundingClientRect()), !t) return { left: 0, top: 0 };var i = d.documentElement,
        n = d.body,
        r = i.clientLeft || n.clientLeft || 0,
        a = v.pageXOffset || n.scrollLeft,
        s = t.left + a - r,
        o = i.clientTop || n.clientTop || 0,
        u = v.pageYOffset || n.scrollTop,
        l = t.top + u - o;return { left: Math.round(s), top: Math.round(l) };
  }function q(e, t) {
    var i = {},
        n = V(e),
        r = e.offsetWidth,
        a = e.offsetHeight,
        s = n.top,
        o = n.left,
        u = t.pageY,
        l = t.pageX;return t.changedTouches && (l = t.changedTouches[0].pageX, u = t.changedTouches[0].pageY), i.y = Math.max(0, Math.min(1, (s - u + a) / a)), i.x = Math.max(0, Math.min(1, (l - o) / r)), i;
  }function z(e) {
    return b(e) && 3 === e.nodeType;
  }function W(e) {
    for (; e.firstChild;) {
      e.removeChild(e.firstChild);
    }return e;
  }function G(e) {
    return "function" == typeof e && (e = e()), (Array.isArray(e) ? e : [e]).map(function (e) {
      return "function" == typeof e && (e = e()), C(e) || z(e) ? e : "string" == typeof e && /\S/.test(e) ? d.createTextNode(e) : void 0;
    }).filter(function (e) {
      return e;
    });
  }function X(t, e) {
    return G(e).forEach(function (e) {
      return t.appendChild(e);
    }), t;
  }function K(e, t) {
    return X(W(e), t);
  }function Y(e) {
    return void 0 === e.button && void 0 === e.buttons || 0 === e.button && void 0 === e.buttons || 0 === e.button && 1 === e.buttons;
  }var $ = E("querySelector"),
      Q = E("querySelectorAll"),
      J = Object.freeze({ isReal: k, isEl: C, isInFrame: w, createEl: A, textContent: L, prependTo: P, hasClass: O, addClass: I, removeClass: U, toggleClass: D, setAttributes: x, getAttributes: R, getAttribute: M, setAttribute: B, removeAttribute: N, blockTextSelection: j, unblockTextSelection: F, getBoundingClientRect: H, findPosition: V, getPointerPosition: q, isTextNode: z, emptyEl: W, normalizeContent: G, appendContent: X, insertContent: K, isSingleLeftClick: Y, $: $, $$: Q }),
      Z = 1;function ee() {
    return Z++;
  }var te = {},
      ie = "vdata" + new Date().getTime();function ne(e) {
    var t = e[ie];return t || (t = e[ie] = ee()), te[t] || (te[t] = {}), te[t];
  }function re(e) {
    var t = e[ie];return !!t && !!Object.getOwnPropertyNames(te[t]).length;
  }function ae(t) {
    var e = t[ie];if (e) {
      delete te[e];try {
        delete t[ie];
      } catch (e) {
        t.removeAttribute ? t.removeAttribute(ie) : t[ie] = null;
      }
    }
  }function se(e, t) {
    var i = ne(e);0 === i.handlers[t].length && (delete i.handlers[t], e.removeEventListener ? e.removeEventListener(t, i.dispatcher, !1) : e.detachEvent && e.detachEvent("on" + t, i.dispatcher)), Object.getOwnPropertyNames(i.handlers).length <= 0 && (delete i.handlers, delete i.dispatcher, delete i.disabled), 0 === Object.getOwnPropertyNames(i).length && ae(e);
  }function oe(t, i, e, n) {
    e.forEach(function (e) {
      t(i, e, n);
    });
  }function ue(e) {
    function t() {
      return !0;
    }function i() {
      return !1;
    }if (!e || !e.isPropagationStopped) {
      var n = e || v.event;for (var r in e = {}, n) {
        "layerX" !== r && "layerY" !== r && "keyLocation" !== r && "webkitMovementX" !== r && "webkitMovementY" !== r && ("returnValue" === r && n.preventDefault || (e[r] = n[r]));
      }if (e.target || (e.target = e.srcElement || d), e.relatedTarget || (e.relatedTarget = e.fromElement === e.target ? e.toElement : e.fromElement), e.preventDefault = function () {
        n.preventDefault && n.preventDefault(), e.returnValue = !1, n.returnValue = !1, e.defaultPrevented = !0;
      }, e.defaultPrevented = !1, e.stopPropagation = function () {
        n.stopPropagation && n.stopPropagation(), e.cancelBubble = !0, n.cancelBubble = !0, e.isPropagationStopped = t;
      }, e.isPropagationStopped = i, e.stopImmediatePropagation = function () {
        n.stopImmediatePropagation && n.stopImmediatePropagation(), e.isImmediatePropagationStopped = t, e.stopPropagation();
      }, e.isImmediatePropagationStopped = i, null !== e.clientX && void 0 !== e.clientX) {
        var a = d.documentElement,
            s = d.body;e.pageX = e.clientX + (a && a.scrollLeft || s && s.scrollLeft || 0) - (a && a.clientLeft || s && s.clientLeft || 0), e.pageY = e.clientY + (a && a.scrollTop || s && s.scrollTop || 0) - (a && a.clientTop || s && s.clientTop || 0);
      }e.which = e.charCode || e.keyCode, null !== e.button && void 0 !== e.button && (e.button = 1 & e.button ? 0 : 4 & e.button ? 1 : 2 & e.button ? 2 : 0);
    }return e;
  }var le = !1;!function () {
    try {
      var e = Object.defineProperty({}, "passive", { get: function get() {
          le = !0;
        } });v.addEventListener("test", null, e), v.removeEventListener("test", null, e);
    } catch (e) {}
  }();var ce = ["touchstart", "touchmove"];function de(s, e, t) {
    if (Array.isArray(e)) return oe(de, s, e, t);var o = ne(s);if (o.handlers || (o.handlers = {}), o.handlers[e] || (o.handlers[e] = []), t.guid || (t.guid = ee()), o.handlers[e].push(t), o.dispatcher || (o.disabled = !1, o.dispatcher = function (e, t) {
      if (!o.disabled) {
        e = ue(e);var i = o.handlers[e.type];if (i) for (var n = i.slice(0), r = 0, a = n.length; r < a && !e.isImmediatePropagationStopped(); r++) {
          try {
            n[r].call(s, e, t);
          } catch (e) {
            m.error(e);
          }
        }
      }
    }), 1 === o.handlers[e].length) if (s.addEventListener) {
      var i = !1;le && -1 < ce.indexOf(e) && (i = { passive: !0 }), s.addEventListener(e, o.dispatcher, i);
    } else s.attachEvent && s.attachEvent("on" + e, o.dispatcher);
  }function he(e, t, i) {
    if (re(e)) {
      var n = ne(e);if (n.handlers) {
        if (Array.isArray(t)) return oe(he, e, t, i);var r = function r(e, t) {
          n.handlers[t] = [], se(e, t);
        };if (void 0 !== t) {
          var a = n.handlers[t];if (a) if (i) {
            if (i.guid) for (var s = 0; s < a.length; s++) {
              a[s].guid === i.guid && a.splice(s--, 1);
            }se(e, t);
          } else r(e, t);
        } else for (var o in n.handlers) {
          Object.prototype.hasOwnProperty.call(n.handlers || {}, o) && r(e, o);
        }
      }
    }
  }function pe(e, t, i) {
    var n = re(e) ? ne(e) : {},
        r = e.parentNode || e.ownerDocument;if ("string" == typeof t ? t = { type: t, target: e } : t.target || (t.target = e), t = ue(t), n.dispatcher && n.dispatcher.call(e, t, i), r && !t.isPropagationStopped() && !0 === t.bubbles) pe.call(null, r, t, i);else if (!r && !t.defaultPrevented && t.target && t.target[t.type]) {
      var a = ne(t.target);t.target[t.type] && (a.disabled = !0, "function" == typeof t.target[t.type] && t.target[t.type](), a.disabled = !1);
    }return !t.defaultPrevented;
  }function fe(t, i, n) {
    if (Array.isArray(i)) return oe(fe, t, i, n);var e = function e() {
      he(t, i, e), n.apply(this, arguments);
    };e.guid = n.guid = n.guid || ee(), de(t, i, e);
  }var me,
      ge = Object.freeze({ fixEvent: ue, on: de, off: he, trigger: pe, one: fe }),
      ye = !1,
      ve = function ve() {
    if (k() && !1 !== me.options.autoSetup) {
      var e = Array.prototype.slice.call(d.getElementsByTagName("video")),
          t = Array.prototype.slice.call(d.getElementsByTagName("audio")),
          i = Array.prototype.slice.call(d.getElementsByTagName("video-js")),
          n = e.concat(t, i);if (n && 0 < n.length) for (var r = 0, a = n.length; r < a; r++) {
        var s = n[r];if (!s || !s.getAttribute) {
          _e(1);break;
        }void 0 === s.player && null !== s.getAttribute("data-setup") && me(s);
      } else ye || _e(1);
    }
  };function _e(e, t) {
    t && (me = t), v.setTimeout(ve, e);
  }k() && "complete" === d.readyState ? ye = !0 : fe(v, "load", function () {
    ye = !0;
  });var be,
      Te = function Te(e) {
    var t = d.createElement("style");return t.className = e, t;
  },
      Se = function Se(e, t) {
    e.styleSheet ? e.styleSheet.cssText = t : e.textContent = t;
  },
      ke = function ke(e, t, i) {
    t.guid || (t.guid = ee());var n = function n() {
      return t.apply(e, arguments);
    };return n.guid = i ? i + "_" + t.guid : t.guid, n;
  },
      Ce = function Ce(t, i) {
    var n = Date.now();return function () {
      var e = Date.now();i <= e - n && (t.apply(void 0, arguments), n = e);
    };
  },
      we = function we() {};we.prototype.allowedEvents_ = {}, we.prototype.addEventListener = we.prototype.on = function (e, t) {
    var i = this.addEventListener;this.addEventListener = function () {}, de(this, e, t), this.addEventListener = i;
  }, we.prototype.removeEventListener = we.prototype.off = function (e, t) {
    he(this, e, t);
  }, we.prototype.one = function (e, t) {
    var i = this.addEventListener;this.addEventListener = function () {}, fe(this, e, t), this.addEventListener = i;
  }, we.prototype.dispatchEvent = we.prototype.trigger = function (e) {
    var t = e.type || e;"string" == typeof e && (e = { type: t }), e = ue(e), this.allowedEvents_[t] && this["on" + t] && this["on" + t](e), pe(this, e);
  }, we.prototype.queueTrigger = function (e) {
    var t = this;be || (be = new Map());var i = e.type || e,
        n = be.get(this);n || (n = new Map(), be.set(this, n));var r = n.get(i);n.delete(i), v.clearTimeout(r);var a = v.setTimeout(function () {
      0 === n.size && (n = null, be.delete(t)), t.trigger(e);
    }, 0);n.set(i, a);
  };var Ee = function Ee(t) {
    return t instanceof we || !!t.eventBusEl_ && ["on", "one", "off", "trigger"].every(function (e) {
      return "function" == typeof t[e];
    });
  },
      Ae = function Ae(e) {
    return "string" == typeof e && /\S/.test(e) || Array.isArray(e) && !!e.length;
  },
      Le = function Le(e) {
    if (!e.nodeName && !Ee(e)) throw new Error("Invalid target; must be a DOM node or evented object.");
  },
      Pe = function Pe(e) {
    if (!Ae(e)) throw new Error("Invalid event type; must be a non-empty string or array.");
  },
      Oe = function Oe(e) {
    if ("function" != typeof e) throw new Error("Invalid listener; must be a function.");
  },
      Ie = function Ie(e, t) {
    var i,
        n,
        r,
        a = t.length < 3 || t[0] === e || t[0] === e.eventBusEl_;return r = a ? (i = e.eventBusEl_, 3 <= t.length && t.shift(), n = t[0], t[1]) : (i = t[0], n = t[1], t[2]), Le(i), Pe(n), Oe(r), { isTargetingSelf: a, target: i, type: n, listener: r = ke(e, r) };
  },
      Ue = function Ue(e, t, i, n) {
    Le(e), e.nodeName ? ge[t](e, i, n) : e[t](i, n);
  },
      De = { on: function on() {
      for (var e = this, t = arguments.length, i = new Array(t), n = 0; n < t; n++) {
        i[n] = arguments[n];
      }var r = Ie(this, i),
          a = r.isTargetingSelf,
          s = r.target,
          o = r.type,
          u = r.listener;if (Ue(s, "on", o, u), !a) {
        var l = function l() {
          return e.off(s, o, u);
        };l.guid = u.guid;var c = function c() {
          return e.off("dispose", l);
        };c.guid = u.guid, Ue(this, "on", "dispose", l), Ue(s, "on", "dispose", c);
      }
    }, one: function one() {
      for (var r = this, e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
        t[i] = arguments[i];
      }var n = Ie(this, t),
          a = n.isTargetingSelf,
          s = n.target,
          o = n.type,
          u = n.listener;if (a) Ue(s, "one", o, u);else {
        var l = function e() {
          r.off(s, o, e);for (var t = arguments.length, i = new Array(t), n = 0; n < t; n++) {
            i[n] = arguments[n];
          }u.apply(null, i);
        };l.guid = u.guid, Ue(s, "one", o, l);
      }
    }, off: function off(e, t, i) {
      if (!e || Ae(e)) he(this.eventBusEl_, e, t);else {
        var n = e,
            r = t;Le(n), Pe(r), Oe(i), i = ke(this, i), this.off("dispose", i), n.nodeName ? (he(n, r, i), he(n, "dispose", i)) : Ee(n) && (n.off(r, i), n.off("dispose", i));
      }
    }, trigger: function trigger(e, t) {
      return pe(this.eventBusEl_, e, t);
    } };function xe(e, t) {
    void 0 === t && (t = {});var i = t.eventBusKey;if (i) {
      if (!e[i].nodeName) throw new Error('The eventBusKey "' + i + '" does not refer to an element.');e.eventBusEl_ = e[i];
    } else e.eventBusEl_ = A("span", { className: "vjs-event-bus" });return _(e, De), e.eventedCallbacks && e.eventedCallbacks.forEach(function (e) {
      e();
    }), e.on("dispose", function () {
      e.off(), v.setTimeout(function () {
        e.eventBusEl_ = null;
      }, 0);
    }), e;
  }var Re = { state: {}, setState: function setState(e) {
      var i,
          n = this;return "function" == typeof e && (e = e()), o(e, function (e, t) {
        n.state[t] !== e && ((i = i || {})[t] = { from: n.state[t], to: e }), n.state[t] = e;
      }), i && Ee(this) && this.trigger({ changes: i, type: "statechanged" }), i;
    } };function Me(e, t) {
    return _(e, Re), e.state = _({}, e.state, t), "function" == typeof e.handleStateChanged && Ee(e) && e.on("statechanged", e.handleStateChanged), e;
  }function Be(e) {
    return "string" != typeof e ? e : e.charAt(0).toUpperCase() + e.slice(1);
  }function Ne() {
    for (var i = {}, e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
      t[n] = arguments[n];
    }return t.forEach(function (e) {
      e && o(e, function (e, t) {
        l(e) ? (l(i[t]) || (i[t] = {}), i[t] = Ne(i[t], e)) : i[t] = e;
      });
    }), i;
  }var je = function () {
    function l(e, t, i) {
      if (!e && this.play ? this.player_ = e = this : this.player_ = e, this.parentComponent_ = null, this.options_ = Ne({}, this.options_), t = this.options_ = Ne(this.options_, t), this.id_ = t.id || t.el && t.el.id, !this.id_) {
        var n = e && e.id && e.id() || "no_player";this.id_ = n + "_component_" + ee();
      }this.name_ = t.name || null, t.el ? this.el_ = t.el : !1 !== t.createEl && (this.el_ = this.createEl()), !1 !== t.evented && xe(this, { eventBusKey: this.el_ ? "el_" : null }), Me(this, this.constructor.defaultState), this.children_ = [], this.childIndex_ = {}, !(this.childNameIndex_ = {}) !== t.initChildren && this.initChildren(), this.ready(i), !1 !== t.reportTouchActivity && this.enableTouchActivity();
    }var e = l.prototype;return e.dispose = function () {
      if (this.trigger({ type: "dispose", bubbles: !1 }), this.children_) for (var e = this.children_.length - 1; 0 <= e; e--) {
        this.children_[e].dispose && this.children_[e].dispose();
      }this.children_ = null, this.childIndex_ = null, this.childNameIndex_ = null, this.parentComponent_ = null, this.el_ && (this.el_.parentNode && this.el_.parentNode.removeChild(this.el_), ae(this.el_), this.el_ = null), this.player_ = null;
    }, e.player = function () {
      return this.player_;
    }, e.options = function (e) {
      return m.warn("this.options() has been deprecated and will be moved to the constructor in 6.0"), e && (this.options_ = Ne(this.options_, e)), this.options_;
    }, e.el = function () {
      return this.el_;
    }, e.createEl = function (e, t, i) {
      return A(e, t, i);
    }, e.localize = function (e, r, t) {
      void 0 === t && (t = e);var i = this.player_.language && this.player_.language(),
          n = this.player_.languages && this.player_.languages(),
          a = n && n[i],
          s = i && i.split("-")[0],
          o = n && n[s],
          u = t;return a && a[e] ? u = a[e] : o && o[e] && (u = o[e]), r && (u = u.replace(/\{(\d+)\}/g, function (e, t) {
        var i = r[t - 1],
            n = i;return "undefined" == typeof i && (n = e), n;
      })), u;
    }, e.contentEl = function () {
      return this.contentEl_ || this.el_;
    }, e.id = function () {
      return this.id_;
    }, e.name = function () {
      return this.name_;
    }, e.children = function () {
      return this.children_;
    }, e.getChildById = function (e) {
      return this.childIndex_[e];
    }, e.getChild = function (e) {
      if (e) return e = Be(e), this.childNameIndex_[e];
    }, e.addChild = function (e, t, i) {
      var n, r;if (void 0 === t && (t = {}), void 0 === i && (i = this.children_.length), "string" == typeof e) {
        r = Be(e);var a = t.componentClass || r;t.name = r;var s = l.getComponent(a);if (!s) throw new Error("Component " + a + " does not exist");if ("function" != typeof s) return null;n = new s(this.player_ || this, t);
      } else n = e;if (n.parentComponent_ && n.parentComponent_.removeChild(n), this.children_.splice(i, 0, n), n.parentComponent_ = this, "function" == typeof n.id && (this.childIndex_[n.id()] = n), (r = r || n.name && Be(n.name())) && (this.childNameIndex_[r] = n), "function" == typeof n.el && n.el()) {
        var o = this.contentEl().children[i] || null;this.contentEl().insertBefore(n.el(), o);
      }return n;
    }, e.removeChild = function (e) {
      if ("string" == typeof e && (e = this.getChild(e)), e && this.children_) {
        for (var t = !1, i = this.children_.length - 1; 0 <= i; i--) {
          if (this.children_[i] === e) {
            t = !0, this.children_.splice(i, 1);break;
          }
        }if (t) {
          e.parentComponent_ = null, this.childIndex_[e.id()] = null, this.childNameIndex_[e.name()] = null;var n = e.el();n && n.parentNode === this.contentEl() && this.contentEl().removeChild(e.el());
        }
      }
    }, e.initChildren = function () {
      var r = this,
          n = this.options_.children;if (n) {
        var e,
            a = this.options_,
            i = l.getComponent("Tech");(e = Array.isArray(n) ? n : Object.keys(n)).concat(Object.keys(this.options_).filter(function (t) {
          return !e.some(function (e) {
            return "string" == typeof e ? t === e : t === e.name;
          });
        })).map(function (e) {
          var t, i;return i = "string" == typeof e ? n[t = e] || r.options_[t] || {} : (t = e.name, e), { name: t, opts: i };
        }).filter(function (e) {
          var t = l.getComponent(e.opts.componentClass || Be(e.name));return t && !i.isTech(t);
        }).forEach(function (e) {
          var t = e.name,
              i = e.opts;if (void 0 !== a[t] && (i = a[t]), !1 !== i) {
            !0 === i && (i = {}), i.playerOptions = r.options_.playerOptions;var n = r.addChild(t, i);n && (r[t] = n);
          }
        });
      }
    }, e.buildCSSClass = function () {
      return "";
    }, e.ready = function (e, t) {
      if (void 0 === t && (t = !1), e) return this.isReady_ ? void (t ? e.call(this) : this.setTimeout(e, 1)) : (this.readyQueue_ = this.readyQueue_ || [], void this.readyQueue_.push(e));
    }, e.triggerReady = function () {
      this.isReady_ = !0, this.setTimeout(function () {
        var e = this.readyQueue_;this.readyQueue_ = [], e && 0 < e.length && e.forEach(function (e) {
          e.call(this);
        }, this), this.trigger("ready");
      }, 1);
    }, e.$ = function (e, t) {
      return $(e, t || this.contentEl());
    }, e.$$ = function (e, t) {
      return Q(e, t || this.contentEl());
    }, e.hasClass = function (e) {
      return O(this.el_, e);
    }, e.addClass = function (e) {
      I(this.el_, e);
    }, e.removeClass = function (e) {
      U(this.el_, e);
    }, e.toggleClass = function (e, t) {
      D(this.el_, e, t);
    }, e.show = function () {
      this.removeClass("vjs-hidden");
    }, e.hide = function () {
      this.addClass("vjs-hidden");
    }, e.lockShowing = function () {
      this.addClass("vjs-lock-showing");
    }, e.unlockShowing = function () {
      this.removeClass("vjs-lock-showing");
    }, e.getAttribute = function (e) {
      return M(this.el_, e);
    }, e.setAttribute = function (e, t) {
      B(this.el_, e, t);
    }, e.removeAttribute = function (e) {
      N(this.el_, e);
    }, e.width = function (e, t) {
      return this.dimension("width", e, t);
    }, e.height = function (e, t) {
      return this.dimension("height", e, t);
    }, e.dimensions = function (e, t) {
      this.width(e, !0), this.height(t);
    }, e.dimension = function (e, t, i) {
      if (void 0 !== t) return null !== t && t == t || (t = 0), -1 !== ("" + t).indexOf("%") || -1 !== ("" + t).indexOf("px") ? this.el_.style[e] = t : this.el_.style[e] = "auto" === t ? "" : t + "px", void (i || this.trigger("componentresize"));if (!this.el_) return 0;var n = this.el_.style[e],
          r = n.indexOf("px");return -1 !== r ? parseInt(n.slice(0, r), 10) : parseInt(this.el_["offset" + Be(e)], 10);
    }, e.currentDimension = function (e) {
      var t = 0;if ("width" !== e && "height" !== e) throw new Error("currentDimension only accepts width or height value");if ("function" == typeof v.getComputedStyle) {
        var i = v.getComputedStyle(this.el_);t = i.getPropertyValue(e) || i[e];
      }if (0 === (t = parseFloat(t))) {
        var n = "offset" + Be(e);t = this.el_[n];
      }return t;
    }, e.currentDimensions = function () {
      return { width: this.currentDimension("width"), height: this.currentDimension("height") };
    }, e.currentWidth = function () {
      return this.currentDimension("width");
    }, e.currentHeight = function () {
      return this.currentDimension("height");
    }, e.focus = function () {
      this.el_.focus();
    }, e.blur = function () {
      this.el_.blur();
    }, e.handleKeyPress = function (e) {
      this.player_ && this.player_.handleKeyPress(e);
    }, e.emitTapEvents = function () {
      var n,
          t = 0,
          r = null;this.on("touchstart", function (e) {
        1 === e.touches.length && (r = { pageX: e.touches[0].pageX, pageY: e.touches[0].pageY }, t = new Date().getTime(), n = !0);
      }), this.on("touchmove", function (e) {
        if (1 < e.touches.length) n = !1;else if (r) {
          var t = e.touches[0].pageX - r.pageX,
              i = e.touches[0].pageY - r.pageY;10 < Math.sqrt(t * t + i * i) && (n = !1);
        }
      });var e = function e() {
        n = !1;
      };this.on("touchleave", e), this.on("touchcancel", e), this.on("touchend", function (e) {
        !(r = null) === n && new Date().getTime() - t < 200 && (e.preventDefault(), this.trigger("tap"));
      });
    }, e.enableTouchActivity = function () {
      if (this.player() && this.player().reportUserActivity) {
        var t,
            i = ke(this.player(), this.player().reportUserActivity);this.on("touchstart", function () {
          i(), this.clearInterval(t), t = this.setInterval(i, 250);
        });var e = function e(_e2) {
          i(), this.clearInterval(t);
        };this.on("touchmove", i), this.on("touchend", e), this.on("touchcancel", e);
      }
    }, e.setTimeout = function (e, t) {
      var i,
          n,
          r = this;return e = ke(this, e), i = v.setTimeout(function () {
        r.off("dispose", n), e();
      }, t), (n = function n() {
        return r.clearTimeout(i);
      }).guid = "vjs-timeout-" + i, this.on("dispose", n), i;
    }, e.clearTimeout = function (e) {
      v.clearTimeout(e);var t = function t() {};return t.guid = "vjs-timeout-" + e, this.off("dispose", t), e;
    }, e.setInterval = function (e, t) {
      var i = this;e = ke(this, e);var n = v.setInterval(e, t),
          r = function r() {
        return i.clearInterval(n);
      };return r.guid = "vjs-interval-" + n, this.on("dispose", r), n;
    }, e.clearInterval = function (e) {
      v.clearInterval(e);var t = function t() {};return t.guid = "vjs-interval-" + e, this.off("dispose", t), e;
    }, e.requestAnimationFrame = function (e) {
      var t,
          i,
          n = this;return this.supportsRaf_ ? (e = ke(this, e), t = v.requestAnimationFrame(function () {
        n.off("dispose", i), e();
      }), (i = function i() {
        return n.cancelAnimationFrame(t);
      }).guid = "vjs-raf-" + t, this.on("dispose", i), t) : this.setTimeout(e, 1e3 / 60);
    }, e.cancelAnimationFrame = function (e) {
      if (this.supportsRaf_) {
        v.cancelAnimationFrame(e);var t = function t() {};return t.guid = "vjs-raf-" + e, this.off("dispose", t), e;
      }return this.clearTimeout(e);
    }, l.registerComponent = function (e, t) {
      if ("string" != typeof e || !e) throw new Error('Illegal component name, "' + e + '"; must be a non-empty string.');var i,
          n = l.getComponent("Tech"),
          r = n && n.isTech(t),
          a = l === t || l.prototype.isPrototypeOf(t.prototype);if (r || !a) throw i = r ? "techs must be registered using Tech.registerTech()" : "must be a Component subclass", new Error('Illegal component, "' + e + '"; ' + i + ".");e = Be(e), l.components_ || (l.components_ = {});var s = l.getComponent("Player");if ("Player" === e && s && s.players) {
        var o = s.players,
            u = Object.keys(o);if (o && 0 < u.length && u.map(function (e) {
          return o[e];
        }).every(Boolean)) throw new Error("Can not register Player component after player has been created.");
      }return l.components_[e] = t;
    }, l.getComponent = function (e) {
      if (e) return e = Be(e), l.components_ && l.components_[e] ? l.components_[e] : void 0;
    }, l;
  }();je.prototype.supportsRaf_ = "function" == typeof v.requestAnimationFrame && "function" == typeof v.cancelAnimationFrame, je.registerComponent("Component", je);var Fe,
      He,
      Ve,
      qe,
      ze = v.navigator && v.navigator.userAgent || "",
      We = /AppleWebKit\/([\d.]+)/i.exec(ze),
      Ge = We ? parseFloat(We.pop()) : null,
      Xe = /iPad/i.test(ze),
      Ke = /iPhone/i.test(ze) && !Xe,
      Ye = /iPod/i.test(ze),
      $e = Ke || Xe || Ye,
      Qe = (Fe = ze.match(/OS (\d+)_/i)) && Fe[1] ? Fe[1] : null,
      Je = /Android/i.test(ze),
      Ze = function () {
    var e = ze.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);if (!e) return null;var t = e[1] && parseFloat(e[1]),
        i = e[2] && parseFloat(e[2]);return t && i ? parseFloat(e[1] + "." + e[2]) : t || null;
  }(),
      et = Je && Ze < 5 && Ge < 537,
      tt = /Firefox/i.test(ze),
      it = /Edge/i.test(ze),
      nt = !it && (/Chrome/i.test(ze) || /CriOS/i.test(ze)),
      rt = (He = ze.match(/(Chrome|CriOS)\/(\d+)/)) && He[2] ? parseFloat(He[2]) : null,
      at = (Ve = /MSIE\s(\d+)\.\d/.exec(ze), !(qe = Ve && parseFloat(Ve[1])) && /Trident\/7.0/i.test(ze) && /rv:11.0/.test(ze) && (qe = 11), qe),
      st = /Safari/i.test(ze) && !nt && !Je && !it,
      ot = (st || $e) && !nt,
      ut = k() && ("ontouchstart" in v || v.navigator.maxTouchPoints || v.DocumentTouch && v.document instanceof v.DocumentTouch),
      lt = Object.freeze({ IS_IPAD: Xe, IS_IPHONE: Ke, IS_IPOD: Ye, IS_IOS: $e, IOS_VERSION: Qe, IS_ANDROID: Je, ANDROID_VERSION: Ze, IS_NATIVE_ANDROID: et, IS_FIREFOX: tt, IS_EDGE: it, IS_CHROME: nt, CHROME_VERSION: rt, IE_VERSION: at, IS_SAFARI: st, IS_ANY_SAFARI: ot, TOUCH_ENABLED: ut });function ct(e, t, i, n) {
    return function (e, t, i) {
      if ("number" != typeof t || t < 0 || i < t) throw new Error("Failed to execute '" + e + "' on 'TimeRanges': The index provided (" + t + ") is non-numeric or out of bounds (0-" + i + ").");
    }(e, n, i.length - 1), i[n][t];
  }function dt(e) {
    return void 0 === e || 0 === e.length ? { length: 0, start: function start() {
        throw new Error("This TimeRanges object is empty");
      }, end: function end() {
        throw new Error("This TimeRanges object is empty");
      } } : { length: e.length, start: ct.bind(null, "start", 0, e), end: ct.bind(null, "end", 1, e) };
  }function ht(e, t) {
    return Array.isArray(e) ? dt(e) : void 0 === e || void 0 === t ? dt() : dt([[e, t]]);
  }function pt(e, t) {
    var i,
        n,
        r = 0;if (!t) return 0;e && e.length || (e = ht(0, 0));for (var a = 0; a < e.length; a++) {
      i = e.start(a), t < (n = e.end(a)) && (n = t), r += n - i;
    }return r / t;
  }for (var ft, mt = {}, gt = [["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror", "fullscreen"], ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror", "-webkit-full-screen"], ["mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror", "-moz-full-screen"], ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError", "-ms-fullscreen"]], yt = gt[0], vt = !1, _t = 0; _t < gt.length; _t++) {
    if (gt[_t][1] in d) {
      ft = gt[_t];break;
    }
  }if (ft) {
    for (var bt = 0; bt < ft.length; bt++) {
      mt[yt[bt]] = ft[bt];
    }vt = ft[0] === yt[0];
  }function Tt(e) {
    if (e instanceof Tt) return e;"number" == typeof e ? this.code = e : "string" == typeof e ? this.message = e : b(e) && ("number" == typeof e.code && (this.code = e.code), _(this, e)), this.message || (this.message = Tt.defaultMessages[this.code] || "");
  }Tt.prototype.code = 0, Tt.prototype.message = "", Tt.prototype.status = null, Tt.errorTypes = ["MEDIA_ERR_CUSTOM", "MEDIA_ERR_ABORTED", "MEDIA_ERR_NETWORK", "MEDIA_ERR_DECODE", "MEDIA_ERR_SRC_NOT_SUPPORTED", "MEDIA_ERR_ENCRYPTED"], Tt.defaultMessages = { 1: "You aborted the media playback", 2: "A network error caused the media download to fail part-way.", 3: "The media playback was aborted due to a corruption problem or because the media used features your browser did not support.", 4: "The media could not be loaded, either because the server or network failed or because the format is not supported.", 5: "The media is encrypted and we do not have the keys to decrypt it." };for (var St = 0; St < Tt.errorTypes.length; St++) {
    Tt[Tt.errorTypes[St]] = St, Tt.prototype[Tt.errorTypes[St]] = St;
  }var kt = function kt(e, t) {
    var i,
        n = null;try {
      i = JSON.parse(e, t);
    } catch (e) {
      n = e;
    }return [n, i];
  };function Ct(e) {
    return null != e && "function" == typeof e.then;
  }function wt(e) {
    Ct(e) && e.then(null, function (e) {});
  }var Et = function Et(n) {
    return ["kind", "label", "language", "id", "inBandMetadataTrackDispatchType", "mode", "src"].reduce(function (e, t, i) {
      return n[t] && (e[t] = n[t]), e;
    }, { cues: n.cues && Array.prototype.map.call(n.cues, function (e) {
        return { startTime: e.startTime, endTime: e.endTime, text: e.text, id: e.id };
      }) });
  },
      At = function At(e) {
    var t = e.$$("track"),
        i = Array.prototype.map.call(t, function (e) {
      return e.track;
    });return Array.prototype.map.call(t, function (e) {
      var t = Et(e.track);return e.src && (t.src = e.src), t;
    }).concat(Array.prototype.filter.call(e.textTracks(), function (e) {
      return -1 === i.indexOf(e);
    }).map(Et));
  },
      Lt = function Lt(e, i) {
    return e.forEach(function (e) {
      var t = i.addRemoteTextTrack(e).track;!e.src && e.cues && e.cues.forEach(function (e) {
        return t.addCue(e);
      });
    }), i.textTracks();
  };"undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self && self;function Pt(e, t) {
    return e(t = { exports: {} }, t.exports), t.exports;
  }var Ot = Pt(function (e, t) {
    function i(e) {
      if (e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e))) {
        var t = e.which || e.keyCode || e.charCode;t && (e = t);
      }if ("number" == typeof e) return s[e];var i,
          n = String(e);return (i = r[n.toLowerCase()]) ? i : (i = a[n.toLowerCase()]) || (1 === n.length ? n.charCodeAt(0) : void 0);
    }i.isEventKey = function (e, t) {
      if (e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e))) {
        var i = e.which || e.keyCode || e.charCode;if (null == i) return !1;if ("string" == typeof t) {
          var n;if (n = r[t.toLowerCase()]) return n === i;if (n = a[t.toLowerCase()]) return n === i;
        } else if ("number" == typeof t) return t === i;return !1;
      }
    };var r = (t = e.exports = i).code = t.codes = { backspace: 8, tab: 9, enter: 13, shift: 16, ctrl: 17, alt: 18, "pause/break": 19, "caps lock": 20, esc: 27, space: 32, "page up": 33, "page down": 34, end: 35, home: 36, left: 37, up: 38, right: 39, down: 40, insert: 45, delete: 46, command: 91, "left command": 91, "right command": 93, "numpad *": 106, "numpad +": 107, "numpad -": 109, "numpad .": 110, "numpad /": 111, "num lock": 144, "scroll lock": 145, "my computer": 182, "my calculator": 183, ";": 186, "=": 187, ",": 188, "-": 189, ".": 190, "/": 191, "`": 192, "[": 219, "\\": 220, "]": 221, "'": 222 },
        a = t.aliases = { windows: 91, "⇧": 16, "⌥": 18, "⌃": 17, "⌘": 91, ctl: 17, control: 17, option: 18, pause: 19, break: 19, caps: 20, return: 13, escape: 27, spc: 32, spacebar: 32, pgup: 33, pgdn: 34, ins: 45, del: 46, cmd: 91 };for (n = 97; n < 123; n++) {
      r[String.fromCharCode(n)] = n - 32;
    }for (var n = 48; n < 58; n++) {
      r[n - 48] = n;
    }for (n = 1; n < 13; n++) {
      r["f" + n] = n + 111;
    }for (n = 0; n < 10; n++) {
      r["numpad " + n] = n + 96;
    }var s = t.names = t.title = {};for (n in r) {
      s[r[n]] = n;
    }for (var o in a) {
      r[o] = a[o];
    }
  }),
      It = (Ot.code, Ot.codes, Ot.aliases, Ot.names, Ot.title, "vjs-modal-dialog"),
      Ut = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).opened_ = i.hasBeenOpened_ = i.hasBeenFilled_ = !1, i.closeable(!i.options_.uncloseable), i.content(i.options_.content), i.contentEl_ = A("div", { className: It + "-content" }, { role: "document" }), i.descEl_ = A("p", { className: It + "-description vjs-control-text", id: i.el().getAttribute("aria-describedby") }), L(i.descEl_, i.description()), i.el_.appendChild(i.descEl_), i.el_.appendChild(i.contentEl_), i;
    }p(e, n);var t = e.prototype;return t.createEl = function () {
      return n.prototype.createEl.call(this, "div", { className: this.buildCSSClass(), tabIndex: -1 }, { "aria-describedby": this.id() + "_description", "aria-hidden": "true", "aria-label": this.label(), role: "dialog" });
    }, t.dispose = function () {
      this.contentEl_ = null, this.descEl_ = null, this.previouslyActiveEl_ = null, n.prototype.dispose.call(this);
    }, t.buildCSSClass = function () {
      return It + " vjs-hidden " + n.prototype.buildCSSClass.call(this);
    }, t.handleKeyPress = function (e) {
      Ot.isEventKey(e, "Escape") && this.closeable() && this.close();
    }, t.label = function () {
      return this.localize(this.options_.label || "Modal Window");
    }, t.description = function () {
      var e = this.options_.description || this.localize("This is a modal window.");return this.closeable() && (e += " " + this.localize("This modal can be closed by pressing the Escape key or activating the close button.")), e;
    }, t.open = function () {
      if (!this.opened_) {
        var e = this.player();this.trigger("beforemodalopen"), this.opened_ = !0, (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) && this.fill(), this.wasPlaying_ = !e.paused(), this.options_.pauseOnOpen && this.wasPlaying_ && e.pause(), this.closeable() && this.on(this.el_.ownerDocument, "keydown", ke(this, this.handleKeyPress)), this.hadControls_ = e.controls(), e.controls(!1), this.show(), this.conditionalFocus_(), this.el().setAttribute("aria-hidden", "false"), this.trigger("modalopen"), this.hasBeenOpened_ = !0;
      }
    }, t.opened = function (e) {
      return "boolean" == typeof e && this[e ? "open" : "close"](), this.opened_;
    }, t.close = function () {
      if (this.opened_) {
        var e = this.player();this.trigger("beforemodalclose"), this.opened_ = !1, this.wasPlaying_ && this.options_.pauseOnOpen && e.play(), this.closeable() && this.off(this.el_.ownerDocument, "keydown", ke(this, this.handleKeyPress)), this.hadControls_ && e.controls(!0), this.hide(), this.el().setAttribute("aria-hidden", "true"), this.trigger("modalclose"), this.conditionalBlur_(), this.options_.temporary && this.dispose();
      }
    }, t.closeable = function (e) {
      if ("boolean" == typeof e) {
        var t = this.closeable_ = !!e,
            i = this.getChild("closeButton");if (t && !i) {
          var n = this.contentEl_;this.contentEl_ = this.el_, i = this.addChild("closeButton", { controlText: "Close Modal Dialog" }), this.contentEl_ = n, this.on(i, "close", this.close);
        }!t && i && (this.off(i, "close", this.close), this.removeChild(i), i.dispose());
      }return this.closeable_;
    }, t.fill = function () {
      this.fillWith(this.content());
    }, t.fillWith = function (e) {
      var t = this.contentEl(),
          i = t.parentNode,
          n = t.nextSibling;this.trigger("beforemodalfill"), this.hasBeenFilled_ = !0, i.removeChild(t), this.empty(), K(t, e), this.trigger("modalfill"), n ? i.insertBefore(t, n) : i.appendChild(t);var r = this.getChild("closeButton");r && i.appendChild(r.el_);
    }, t.empty = function () {
      this.trigger("beforemodalempty"), W(this.contentEl()), this.trigger("modalempty");
    }, t.content = function (e) {
      return "undefined" != typeof e && (this.content_ = e), this.content_;
    }, t.conditionalFocus_ = function () {
      var e = d.activeElement,
          t = this.player_.el_;this.previouslyActiveEl_ = null, (t.contains(e) || t === e) && (this.previouslyActiveEl_ = e, this.focus(), this.on(d, "keydown", this.handleKeyDown));
    }, t.conditionalBlur_ = function () {
      this.previouslyActiveEl_ && (this.previouslyActiveEl_.focus(), this.previouslyActiveEl_ = null), this.off(d, "keydown", this.handleKeyDown);
    }, t.handleKeyDown = function (e) {
      if (Ot.isEventKey(e, "Tab")) {
        for (var t, i = this.focusableEls_(), n = this.el_.querySelector(":focus"), r = 0; r < i.length; r++) {
          if (n === i[r]) {
            t = r;break;
          }
        }d.activeElement === this.el_ && (t = 0), e.shiftKey && 0 === t ? (i[i.length - 1].focus(), e.preventDefault()) : e.shiftKey || t !== i.length - 1 || (i[0].focus(), e.preventDefault());
      }
    }, t.focusableEls_ = function () {
      var e = this.el_.querySelectorAll("*");return Array.prototype.filter.call(e, function (e) {
        return (e instanceof v.HTMLAnchorElement || e instanceof v.HTMLAreaElement) && e.hasAttribute("href") || (e instanceof v.HTMLInputElement || e instanceof v.HTMLSelectElement || e instanceof v.HTMLTextAreaElement || e instanceof v.HTMLButtonElement) && !e.hasAttribute("disabled") || e instanceof v.HTMLIFrameElement || e instanceof v.HTMLObjectElement || e instanceof v.HTMLEmbedElement || e.hasAttribute("tabindex") && -1 !== e.getAttribute("tabindex") || e.hasAttribute("contenteditable");
      });
    }, e;
  }(je);Ut.prototype.options_ = { pauseOnOpen: !0, temporary: !0 }, je.registerComponent("ModalDialog", Ut);var Dt = function (n) {
    function e(e) {
      var t;void 0 === e && (e = []), (t = n.call(this) || this).tracks_ = [], Object.defineProperty(f(f(t)), "length", { get: function get() {
          return this.tracks_.length;
        } });for (var i = 0; i < e.length; i++) {
        t.addTrack(e[i]);
      }return t;
    }p(e, n);var t = e.prototype;return t.addTrack = function (e) {
      var t = this.tracks_.length;"" + t in this || Object.defineProperty(this, t, { get: function get() {
          return this.tracks_[t];
        } }), -1 === this.tracks_.indexOf(e) && (this.tracks_.push(e), this.trigger({ track: e, type: "addtrack", target: this }));
    }, t.removeTrack = function (e) {
      for (var t, i = 0, n = this.length; i < n; i++) {
        if (this[i] === e) {
          (t = this[i]).off && t.off(), this.tracks_.splice(i, 1);break;
        }
      }t && this.trigger({ track: t, type: "removetrack", target: this });
    }, t.getTrackById = function (e) {
      for (var t = null, i = 0, n = this.length; i < n; i++) {
        var r = this[i];if (r.id === e) {
          t = r;break;
        }
      }return t;
    }, e;
  }(we);for (var xt in Dt.prototype.allowedEvents_ = { change: "change", addtrack: "addtrack", removetrack: "removetrack" }, Dt.prototype.allowedEvents_) {
    Dt.prototype["on" + xt] = null;
  }var Rt = function Rt(e, t) {
    for (var i = 0; i < e.length; i++) {
      Object.keys(e[i]).length && t.id !== e[i].id && (e[i].enabled = !1);
    }
  },
      Mt = function (n) {
    function e(e) {
      var t;void 0 === e && (e = []);for (var i = e.length - 1; 0 <= i; i--) {
        if (e[i].enabled) {
          Rt(e, e[i]);break;
        }
      }return (t = n.call(this, e) || this).changing_ = !1, t;
    }p(e, n);var t = e.prototype;return t.addTrack = function (e) {
      var t = this;e.enabled && Rt(this, e), n.prototype.addTrack.call(this, e), e.addEventListener && (e.enabledChange_ = function () {
        t.changing_ || (t.changing_ = !0, Rt(t, e), t.changing_ = !1, t.trigger("change"));
      }, e.addEventListener("enabledchange", e.enabledChange_));
    }, t.removeTrack = function (e) {
      n.prototype.removeTrack.call(this, e), e.removeEventListener && e.enabledChange_ && (e.removeEventListener("enabledchange", e.enabledChange_), e.enabledChange_ = null);
    }, e;
  }(Dt),
      Bt = function Bt(e, t) {
    for (var i = 0; i < e.length; i++) {
      Object.keys(e[i]).length && t.id !== e[i].id && (e[i].selected = !1);
    }
  },
      Nt = function (n) {
    function e(e) {
      var t;void 0 === e && (e = []);for (var i = e.length - 1; 0 <= i; i--) {
        if (e[i].selected) {
          Bt(e, e[i]);break;
        }
      }return (t = n.call(this, e) || this).changing_ = !1, Object.defineProperty(f(f(t)), "selectedIndex", { get: function get() {
          for (var e = 0; e < this.length; e++) {
            if (this[e].selected) return e;
          }return -1;
        }, set: function set() {} }), t;
    }p(e, n);var t = e.prototype;return t.addTrack = function (e) {
      var t = this;e.selected && Bt(this, e), n.prototype.addTrack.call(this, e), e.addEventListener && (e.selectedChange_ = function () {
        t.changing_ || (t.changing_ = !0, Bt(t, e), t.changing_ = !1, t.trigger("change"));
      }, e.addEventListener("selectedchange", e.selectedChange_));
    }, t.removeTrack = function (e) {
      n.prototype.removeTrack.call(this, e), e.removeEventListener && e.selectedChange_ && (e.removeEventListener("selectedchange", e.selectedChange_), e.selectedChange_ = null);
    }, e;
  }(Dt),
      jt = function (i) {
    function e() {
      return i.apply(this, arguments) || this;
    }p(e, i);var t = e.prototype;return t.addTrack = function (e) {
      var t = this;i.prototype.addTrack.call(this, e), this.queueChange_ || (this.queueChange_ = function () {
        return t.queueTrigger("change");
      }), this.triggerSelectedlanguagechange || (this.triggerSelectedlanguagechange_ = function () {
        return t.trigger("selectedlanguagechange");
      }), e.addEventListener("modechange", this.queueChange_);-1 === ["metadata", "chapters"].indexOf(e.kind) && e.addEventListener("modechange", this.triggerSelectedlanguagechange_);
    }, t.removeTrack = function (e) {
      i.prototype.removeTrack.call(this, e), e.removeEventListener && (this.queueChange_ && e.removeEventListener("modechange", this.queueChange_), this.selectedlanguagechange_ && e.removeEventListener("modechange", this.triggerSelectedlanguagechange_));
    }, e;
  }(Dt),
      Ft = function () {
    function e(e) {
      void 0 === e && (e = []), this.trackElements_ = [], Object.defineProperty(this, "length", { get: function get() {
          return this.trackElements_.length;
        } });for (var t = 0, i = e.length; t < i; t++) {
        this.addTrackElement_(e[t]);
      }
    }var t = e.prototype;return t.addTrackElement_ = function (e) {
      var t = this.trackElements_.length;"" + t in this || Object.defineProperty(this, t, { get: function get() {
          return this.trackElements_[t];
        } }), -1 === this.trackElements_.indexOf(e) && this.trackElements_.push(e);
    }, t.getTrackElementByTrack_ = function (e) {
      for (var t, i = 0, n = this.trackElements_.length; i < n; i++) {
        if (e === this.trackElements_[i].track) {
          t = this.trackElements_[i];break;
        }
      }return t;
    }, t.removeTrackElement_ = function (e) {
      for (var t = 0, i = this.trackElements_.length; t < i; t++) {
        if (e === this.trackElements_[t]) {
          this.trackElements_[t].track && "function" == typeof this.trackElements_[t].track.off && this.trackElements_[t].track.off(), "function" == typeof this.trackElements_[t].off && this.trackElements_[t].off(), this.trackElements_.splice(t, 1);break;
        }
      }
    }, e;
  }(),
      Ht = function () {
    function t(e) {
      t.prototype.setCues_.call(this, e), Object.defineProperty(this, "length", { get: function get() {
          return this.length_;
        } });
    }var e = t.prototype;return e.setCues_ = function (e) {
      var t = this.length || 0,
          i = 0,
          n = e.length;this.cues_ = e, this.length_ = e.length;var r = function r(e) {
        "" + e in this || Object.defineProperty(this, "" + e, { get: function get() {
            return this.cues_[e];
          } });
      };if (t < n) for (i = t; i < n; i++) {
        r.call(this, i);
      }
    }, e.getCueById = function (e) {
      for (var t = null, i = 0, n = this.length; i < n; i++) {
        var r = this[i];if (r.id === e) {
          t = r;break;
        }
      }return t;
    }, t;
  }(),
      Vt = { alternative: "alternative", captions: "captions", main: "main", sign: "sign", subtitles: "subtitles", commentary: "commentary" },
      qt = { alternative: "alternative", descriptions: "descriptions", main: "main", "main-desc": "main-desc", translation: "translation", commentary: "commentary" },
      zt = { subtitles: "subtitles", captions: "captions", descriptions: "descriptions", chapters: "chapters", metadata: "metadata" },
      Wt = { disabled: "disabled", hidden: "hidden", showing: "showing" },
      Gt = function (a) {
    function e(e) {
      var t;void 0 === e && (e = {}), t = a.call(this) || this;var i = { id: e.id || "vjs_track_" + ee(), kind: e.kind || "", label: e.label || "", language: e.language || "" },
          n = function n(e) {
        Object.defineProperty(f(f(t)), e, { get: function get() {
            return i[e];
          }, set: function set() {} });
      };for (var r in i) {
        n(r);
      }return t;
    }return p(e, a), e;
  }(we),
      Xt = function Xt(e) {
    var t = ["protocol", "hostname", "port", "pathname", "search", "hash", "host"],
        i = d.createElement("a");i.href = e;var n,
        r = "" === i.host && "file:" !== i.protocol;r && ((n = d.createElement("div")).innerHTML = '<a href="' + e + '"></a>', i = n.firstChild, n.setAttribute("style", "display:none; position:absolute;"), d.body.appendChild(n));for (var a = {}, s = 0; s < t.length; s++) {
      a[t[s]] = i[t[s]];
    }return "http:" === a.protocol && (a.host = a.host.replace(/:80$/, "")), "https:" === a.protocol && (a.host = a.host.replace(/:443$/, "")), a.protocol || (a.protocol = v.location.protocol), r && d.body.removeChild(n), a;
  },
      Kt = function Kt(e) {
    if (!e.match(/^https?:\/\//)) {
      var t = d.createElement("div");t.innerHTML = '<a href="' + e + '">x</a>', e = t.firstChild.href;
    }return e;
  },
      Yt = function Yt(e) {
    if ("string" == typeof e) {
      var t = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i.exec(e);if (t) return t.pop().toLowerCase();
    }return "";
  },
      $t = function $t(e) {
    var t = v.location,
        i = Xt(e);return (":" === i.protocol ? t.protocol : i.protocol) + i.host !== t.protocol + t.host;
  },
      Qt = Object.freeze({ parseUrl: Xt, getAbsoluteURL: Kt, getFileExtension: Yt, isCrossOrigin: $t }),
      Jt = function Jt(e) {
    var t = Zt.call(e);return "[object Function]" === t || "function" == typeof e && "[object RegExp]" !== t || "undefined" != typeof window && (e === window.setTimeout || e === window.alert || e === window.confirm || e === window.prompt);
  },
      Zt = Object.prototype.toString;var ei = Pt(function (e, t) {
    (t = e.exports = function (e) {
      return e.replace(/^\s*|\s*$/g, "");
    }).left = function (e) {
      return e.replace(/^\s*/, "");
    }, t.right = function (e) {
      return e.replace(/\s*$/, "");
    };
  }),
      ti = (ei.left, ei.right, Function.prototype.toString),
      ii = /^\s*class\b/,
      ni = function ni(e) {
    try {
      var t = ti.call(e);return ii.test(t);
    } catch (e) {
      return !1;
    }
  },
      ri = Object.prototype.toString,
      ai = "function" == typeof Symbol && "symbol" == _typeof(Symbol.toStringTag),
      si = function si(e) {
    if (!e) return !1;if ("function" != typeof e && "object" != (typeof e === "undefined" ? "undefined" : _typeof(e))) return !1;if ("function" == typeof e && !e.prototype) return !0;if (ai) return function (e) {
      try {
        return !ni(e) && (ti.call(e), !0);
      } catch (e) {
        return !1;
      }
    }(e);if (ni(e)) return !1;var t = ri.call(e);return "[object Function]" === t || "[object GeneratorFunction]" === t;
  },
      oi = Object.prototype.toString,
      ui = Object.prototype.hasOwnProperty,
      li = function li(e, t, i) {
    if (!si(t)) throw new TypeError("iterator must be a function");var n;3 <= arguments.length && (n = i), "[object Array]" === oi.call(e) ? function (e, t, i) {
      for (var n = 0, r = e.length; n < r; n++) {
        ui.call(e, n) && (null == i ? t(e[n], n, e) : t.call(i, e[n], n, e));
      }
    }(e, t, n) : "string" == typeof e ? function (e, t, i) {
      for (var n = 0, r = e.length; n < r; n++) {
        null == i ? t(e.charAt(n), n, e) : t.call(i, e.charAt(n), n, e);
      }
    }(e, t, n) : function (e, t, i) {
      for (var n in e) {
        ui.call(e, n) && (null == i ? t(e[n], n, e) : t.call(i, e[n], n, e));
      }
    }(e, t, n);
  },
      ci = function ci(e) {
    if (!e) return {};var a = {};return li(ei(e).split("\n"), function (e) {
      var t,
          i = e.indexOf(":"),
          n = ei(e.slice(0, i)).toLowerCase(),
          r = ei(e.slice(i + 1));"undefined" == typeof a[n] ? a[n] = r : (t = a[n], "[object Array]" === Object.prototype.toString.call(t) ? a[n].push(r) : a[n] = [a[n], r]);
    }), a;
  },
      di = function di() {
    for (var e = {}, t = 0; t < arguments.length; t++) {
      var i = arguments[t];for (var n in i) {
        hi.call(i, n) && (e[n] = i[n]);
      }
    }return e;
  },
      hi = Object.prototype.hasOwnProperty;var pi = mi;function fi(e, t, i) {
    var n = e;return Jt(t) ? (i = t, "string" == typeof e && (n = { uri: e })) : n = di(t, { uri: e }), n.callback = i, n;
  }function mi(e, t, i) {
    return gi(t = fi(e, t, i));
  }function gi(n) {
    if ("undefined" == typeof n.callback) throw new Error("callback argument missing");var r = !1,
        a = function a(e, t, i) {
      r || (r = !0, n.callback(e, t, i));
    };function t(e) {
      return clearTimeout(u), e instanceof Error || (e = new Error("" + (e || "Unknown XMLHttpRequest Error"))), e.statusCode = 0, a(e, m);
    }function e() {
      if (!s) {
        var e;clearTimeout(u), e = n.useXDR && void 0 === o.status ? 200 : 1223 === o.status ? 204 : o.status;var t = m,
            i = null;return 0 !== e ? (t = { body: function () {
            var e = void 0;if (e = o.response ? o.response : o.responseText || function (e) {
              if ("document" === e.responseType) return e.responseXML;var t = e.responseXML && "parsererror" === e.responseXML.documentElement.nodeName;return "" !== e.responseType || t ? null : e.responseXML;
            }(o), f) try {
              e = JSON.parse(e);
            } catch (e) {}return e;
          }(), statusCode: e, method: c, headers: {}, url: l, rawRequest: o }, o.getAllResponseHeaders && (t.headers = ci(o.getAllResponseHeaders()))) : i = new Error("Internal XMLHttpRequest Error"), a(i, t, t.body);
      }
    }var i,
        s,
        o = n.xhr || null;o || (o = n.cors || n.useXDR ? new mi.XDomainRequest() : new mi.XMLHttpRequest());var u,
        l = o.url = n.uri || n.url,
        c = o.method = n.method || "GET",
        d = n.body || n.data,
        h = o.headers = n.headers || {},
        p = !!n.sync,
        f = !1,
        m = { body: void 0, headers: {}, statusCode: 0, method: c, url: l, rawRequest: o };if ("json" in n && !1 !== n.json && (f = !0, h.accept || h.Accept || (h.Accept = "application/json"), "GET" !== c && "HEAD" !== c && (h["content-type"] || h["Content-Type"] || (h["Content-Type"] = "application/json"), d = JSON.stringify(!0 === n.json ? d : n.json))), o.onreadystatechange = function () {
      4 === o.readyState && setTimeout(e, 0);
    }, o.onload = e, o.onerror = t, o.onprogress = function () {}, o.onabort = function () {
      s = !0;
    }, o.ontimeout = t, o.open(c, l, !p, n.username, n.password), p || (o.withCredentials = !!n.withCredentials), !p && 0 < n.timeout && (u = setTimeout(function () {
      if (!s) {
        s = !0, o.abort("timeout");var e = new Error("XMLHttpRequest timeout");e.code = "ETIMEDOUT", t(e);
      }
    }, n.timeout)), o.setRequestHeader) for (i in h) {
      h.hasOwnProperty(i) && o.setRequestHeader(i, h[i]);
    } else if (n.headers && !function (e) {
      for (var t in e) {
        if (e.hasOwnProperty(t)) return !1;
      }return !0;
    }(n.headers)) throw new Error("Headers cannot be set on an XDomainRequest object");return "responseType" in n && (o.responseType = n.responseType), "beforeSend" in n && "function" == typeof n.beforeSend && n.beforeSend(o), o.send(d || null), o;
  }mi.XMLHttpRequest = v.XMLHttpRequest || function () {}, mi.XDomainRequest = "withCredentials" in new mi.XMLHttpRequest() ? mi.XMLHttpRequest : v.XDomainRequest, function (e, t) {
    for (var i = 0; i < e.length; i++) {
      t(e[i]);
    }
  }(["get", "put", "post", "patch", "head", "delete"], function (n) {
    mi["delete" === n ? "del" : n] = function (e, t, i) {
      return (t = fi(e, t, i)).method = n.toUpperCase(), gi(t);
    };
  });var yi = function yi(e, t) {
    var i = new v.WebVTT.Parser(v, v.vttjs, v.WebVTT.StringDecoder()),
        n = [];i.oncue = function (e) {
      t.addCue(e);
    }, i.onparsingerror = function (e) {
      n.push(e);
    }, i.onflush = function () {
      t.trigger({ type: "loadeddata", target: t });
    }, i.parse(e), 0 < n.length && (v.console && v.console.groupCollapsed && v.console.groupCollapsed("Text Track parsing errors for " + t.src), n.forEach(function (e) {
      return m.error(e);
    }), v.console && v.console.groupEnd && v.console.groupEnd()), i.flush();
  },
      vi = function (l) {
    function e(e) {
      var t;if (void 0 === e && (e = {}), !e.tech) throw new Error("A tech was not provided.");var i = Ne(e, { kind: zt[e.kind] || "subtitles", language: e.language || e.srclang || "" }),
          n = Wt[i.mode] || "disabled",
          r = i.default;"metadata" !== i.kind && "chapters" !== i.kind || (n = "hidden"), (t = l.call(this, i) || this).tech_ = i.tech, t.cues_ = [], t.activeCues_ = [];var a = new Ht(t.cues_),
          s = new Ht(t.activeCues_),
          o = !1,
          u = ke(f(f(t)), function () {
        this.activeCues = this.activeCues, o && (this.trigger("cuechange"), o = !1);
      });return "disabled" !== n && t.tech_.ready(function () {
        t.tech_.on("timeupdate", u);
      }, !0), Object.defineProperties(f(f(t)), { default: { get: function get() {
            return r;
          }, set: function set() {} }, mode: { get: function get() {
            return n;
          }, set: function set(e) {
            var t = this;Wt[e] && ("disabled" !== (n = e) ? this.tech_.ready(function () {
              t.tech_.on("timeupdate", u);
            }, !0) : this.tech_.off("timeupdate", u), this.trigger("modechange"));
          } }, cues: { get: function get() {
            return this.loaded_ ? a : null;
          }, set: function set() {} }, activeCues: { get: function get() {
            if (!this.loaded_) return null;if (0 === this.cues.length) return s;for (var e = this.tech_.currentTime(), t = [], i = 0, n = this.cues.length; i < n; i++) {
              var r = this.cues[i];r.startTime <= e && r.endTime >= e ? t.push(r) : r.startTime === r.endTime && r.startTime <= e && r.startTime + .5 >= e && t.push(r);
            }if (o = !1, t.length !== this.activeCues_.length) o = !0;else for (var a = 0; a < t.length; a++) {
              -1 === this.activeCues_.indexOf(t[a]) && (o = !0);
            }return this.activeCues_ = t, s.setCues_(this.activeCues_), s;
          }, set: function set() {} } }), i.src ? (t.src = i.src, function (e, a) {
        var t = { uri: e },
            i = $t(e);i && (t.cors = i), pi(t, ke(this, function (e, t, i) {
          if (e) return m.error(e, t);if (a.loaded_ = !0, "function" != typeof v.WebVTT) {
            if (a.tech_) {
              var n,
                  r = function r() {
                m.error("vttjs failed to load, stopping trying to process " + a.src), a.tech_.off("vttjsloaded", n);
              };n = function n() {
                return a.tech_.off("vttjserror", r), yi(i, a);
              }, a.tech_.one("vttjsloaded", n), a.tech_.one("vttjserror", r);
            }
          } else yi(i, a);
        }));
      }(i.src, f(f(t)))) : t.loaded_ = !0, t;
    }p(e, l);var t = e.prototype;return t.addCue = function (e) {
      var t = e;if (v.vttjs && !(e instanceof v.vttjs.VTTCue)) {
        for (var i in t = new v.vttjs.VTTCue(e.startTime, e.endTime, e.text), e) {
          i in t || (t[i] = e[i]);
        }t.id = e.id, t.originalCue_ = e;
      }for (var n = this.tech_.textTracks(), r = 0; r < n.length; r++) {
        n[r] !== this && n[r].removeCue(t);
      }this.cues_.push(t), this.cues.setCues_(this.cues_);
    }, t.removeCue = function (e) {
      for (var t = this.cues_.length; t--;) {
        var i = this.cues_[t];if (i === e || i.originalCue_ && i.originalCue_ === e) {
          this.cues_.splice(t, 1), this.cues.setCues_(this.cues_);break;
        }
      }
    }, e;
  }(Gt);vi.prototype.allowedEvents_ = { cuechange: "cuechange" };var _i = function (r) {
    function e(e) {
      var t;void 0 === e && (e = {});var i = Ne(e, { kind: qt[e.kind] || "" });t = r.call(this, i) || this;var n = !1;return Object.defineProperty(f(f(t)), "enabled", { get: function get() {
          return n;
        }, set: function set(e) {
          "boolean" == typeof e && e !== n && (n = e, this.trigger("enabledchange"));
        } }), i.enabled && (t.enabled = i.enabled), t.loaded_ = !0, t;
    }return p(e, r), e;
  }(Gt),
      bi = function (r) {
    function e(e) {
      var t;void 0 === e && (e = {});var i = Ne(e, { kind: Vt[e.kind] || "" });t = r.call(this, i) || this;var n = !1;return Object.defineProperty(f(f(t)), "selected", { get: function get() {
          return n;
        }, set: function set(e) {
          "boolean" == typeof e && e !== n && (n = e, this.trigger("selectedchange"));
        } }), i.selected && (t.selected = i.selected), t;
    }return p(e, r), e;
  }(Gt),
      Ti = function (r) {
    function e(e) {
      var t, i;void 0 === e && (e = {}), t = r.call(this) || this;var n = new vi(e);return t.kind = n.kind, t.src = n.src, t.srclang = n.language, t.label = n.label, t.default = n.default, Object.defineProperties(f(f(t)), { readyState: { get: function get() {
            return i;
          } }, track: { get: function get() {
            return n;
          } } }), i = 0, n.addEventListener("loadeddata", function () {
        i = 2, t.trigger({ type: "load", target: f(f(t)) });
      }), t;
    }return p(e, r), e;
  }(we);Ti.prototype.allowedEvents_ = { load: "load" }, Ti.NONE = 0, Ti.LOADING = 1, Ti.LOADED = 2, Ti.ERROR = 3;var Si = { audio: { ListClass: Mt, TrackClass: _i, capitalName: "Audio" }, video: { ListClass: Nt, TrackClass: bi, capitalName: "Video" }, text: { ListClass: jt, TrackClass: vi, capitalName: "Text" } };Object.keys(Si).forEach(function (e) {
    Si[e].getterName = e + "Tracks", Si[e].privateName = e + "Tracks_";
  });var ki = { remoteText: { ListClass: jt, TrackClass: vi, capitalName: "RemoteText", getterName: "remoteTextTracks", privateName: "remoteTextTracks_" }, remoteTextEl: { ListClass: Ft, TrackClass: Ti, capitalName: "RemoteTextTrackEls", getterName: "remoteTextTrackEls", privateName: "remoteTextTrackEls_" } },
      Ci = Ne(Si, ki);ki.names = Object.keys(ki), Si.names = Object.keys(Si), Ci.names = [].concat(ki.names).concat(Si.names);var wi = {};var Ei = function (t) {
    function i(i, e) {
      var n;return void 0 === i && (i = {}), void 0 === e && (e = function e() {}), i.reportTouchActivity = !1, (n = t.call(this, null, i, e) || this).hasStarted_ = !1, n.on("playing", function () {
        this.hasStarted_ = !0;
      }), n.on("loadstart", function () {
        this.hasStarted_ = !1;
      }), Ci.names.forEach(function (e) {
        var t = Ci[e];i && i[t.getterName] && (n[t.privateName] = i[t.getterName]);
      }), n.featuresProgressEvents || n.manualProgressOn(), n.featuresTimeupdateEvents || n.manualTimeUpdatesOn(), ["Text", "Audio", "Video"].forEach(function (e) {
        !1 === i["native" + e + "Tracks"] && (n["featuresNative" + e + "Tracks"] = !1);
      }), !1 === i.nativeCaptions || !1 === i.nativeTextTracks ? n.featuresNativeTextTracks = !1 : !0 !== i.nativeCaptions && !0 !== i.nativeTextTracks || (n.featuresNativeTextTracks = !0), n.featuresNativeTextTracks || n.emulateTextTracks(), n.autoRemoteTextTracks_ = new Ci.text.ListClass(), n.initTrackListeners(), i.nativeControlsForTouch || n.emitTapEvents(), n.constructor && (n.name_ = n.constructor.name || "Unknown Tech"), n;
    }p(i, t);var e = i.prototype;return e.triggerSourceset = function (e) {
      var t = this;this.isReady_ || this.one("ready", function () {
        return t.setTimeout(function () {
          return t.triggerSourceset(e);
        }, 1);
      }), this.trigger({ src: e, type: "sourceset" });
    }, e.manualProgressOn = function () {
      this.on("durationchange", this.onDurationChange), this.manualProgress = !0, this.one("ready", this.trackProgress);
    }, e.manualProgressOff = function () {
      this.manualProgress = !1, this.stopTrackingProgress(), this.off("durationchange", this.onDurationChange);
    }, e.trackProgress = function (e) {
      this.stopTrackingProgress(), this.progressInterval = this.setInterval(ke(this, function () {
        var e = this.bufferedPercent();this.bufferedPercent_ !== e && this.trigger("progress"), 1 === (this.bufferedPercent_ = e) && this.stopTrackingProgress();
      }), 500);
    }, e.onDurationChange = function (e) {
      this.duration_ = this.duration();
    }, e.buffered = function () {
      return ht(0, 0);
    }, e.bufferedPercent = function () {
      return pt(this.buffered(), this.duration_);
    }, e.stopTrackingProgress = function () {
      this.clearInterval(this.progressInterval);
    }, e.manualTimeUpdatesOn = function () {
      this.manualTimeUpdates = !0, this.on("play", this.trackCurrentTime), this.on("pause", this.stopTrackingCurrentTime);
    }, e.manualTimeUpdatesOff = function () {
      this.manualTimeUpdates = !1, this.stopTrackingCurrentTime(), this.off("play", this.trackCurrentTime), this.off("pause", this.stopTrackingCurrentTime);
    }, e.trackCurrentTime = function () {
      this.currentTimeInterval && this.stopTrackingCurrentTime(), this.currentTimeInterval = this.setInterval(function () {
        this.trigger({ type: "timeupdate", target: this, manuallyTriggered: !0 });
      }, 250);
    }, e.stopTrackingCurrentTime = function () {
      this.clearInterval(this.currentTimeInterval), this.trigger({ type: "timeupdate", target: this, manuallyTriggered: !0 });
    }, e.dispose = function () {
      this.clearTracks(Si.names), this.manualProgress && this.manualProgressOff(), this.manualTimeUpdates && this.manualTimeUpdatesOff(), t.prototype.dispose.call(this);
    }, e.clearTracks = function (e) {
      var r = this;(e = [].concat(e)).forEach(function (e) {
        for (var t = r[e + "Tracks"]() || [], i = t.length; i--;) {
          var n = t[i];"text" === e && r.removeRemoteTextTrack(n), t.removeTrack(n);
        }
      });
    }, e.cleanupAutoTextTracks = function () {
      for (var e = this.autoRemoteTextTracks_ || [], t = e.length; t--;) {
        var i = e[t];this.removeRemoteTextTrack(i);
      }
    }, e.reset = function () {}, e.error = function (e) {
      return void 0 !== e && (this.error_ = new Tt(e), this.trigger("error")), this.error_;
    }, e.played = function () {
      return this.hasStarted_ ? ht(0, 0) : ht();
    }, e.setCurrentTime = function () {
      this.manualTimeUpdates && this.trigger({ type: "timeupdate", target: this, manuallyTriggered: !0 });
    }, e.initTrackListeners = function () {
      var r = this;Si.names.forEach(function (e) {
        var t = Si[e],
            i = function i() {
          r.trigger(e + "trackchange");
        },
            n = r[t.getterName]();n.addEventListener("removetrack", i), n.addEventListener("addtrack", i), r.on("dispose", function () {
          n.removeEventListener("removetrack", i), n.removeEventListener("addtrack", i);
        });
      });
    }, e.addWebVttScript_ = function () {
      var e = this;if (!v.WebVTT) if (d.body.contains(this.el())) {
        if (!this.options_["vtt.js"] && l(wi) && 0 < Object.keys(wi).length) return void this.trigger("vttjsloaded");var t = d.createElement("script");t.src = this.options_["vtt.js"] || "https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js", t.onload = function () {
          e.trigger("vttjsloaded");
        }, t.onerror = function () {
          e.trigger("vttjserror");
        }, this.on("dispose", function () {
          t.onload = null, t.onerror = null;
        }), v.WebVTT = !0, this.el().parentNode.appendChild(t);
      } else this.ready(this.addWebVttScript_);
    }, e.emulateTextTracks = function () {
      var e = this,
          i = this.textTracks(),
          t = this.remoteTextTracks(),
          n = function n(e) {
        return i.addTrack(e.track);
      },
          r = function r(e) {
        return i.removeTrack(e.track);
      };t.on("addtrack", n), t.on("removetrack", r), this.addWebVttScript_();var a = function a() {
        return e.trigger("texttrackchange");
      },
          s = function s() {
        a();for (var e = 0; e < i.length; e++) {
          var t = i[e];t.removeEventListener("cuechange", a), "showing" === t.mode && t.addEventListener("cuechange", a);
        }
      };s(), i.addEventListener("change", s), i.addEventListener("addtrack", s), i.addEventListener("removetrack", s), this.on("dispose", function () {
        t.off("addtrack", n), t.off("removetrack", r), i.removeEventListener("change", s), i.removeEventListener("addtrack", s), i.removeEventListener("removetrack", s);for (var e = 0; e < i.length; e++) {
          i[e].removeEventListener("cuechange", a);
        }
      });
    }, e.addTextTrack = function (e, t, i) {
      if (!e) throw new Error("TextTrack kind is required but was not provided");return function (e, t, i, n, r) {
        void 0 === r && (r = {});var a = e.textTracks();r.kind = t, i && (r.label = i), n && (r.language = n), r.tech = e;var s = new Ci.text.TrackClass(r);return a.addTrack(s), s;
      }(this, e, t, i);
    }, e.createRemoteTextTrack = function (e) {
      var t = Ne(e, { tech: this });return new ki.remoteTextEl.TrackClass(t);
    }, e.addRemoteTextTrack = function (e, t) {
      var i = this;void 0 === e && (e = {});var n = this.createRemoteTextTrack(e);return !0 !== t && !1 !== t && (m.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js'), t = !0), this.remoteTextTrackEls().addTrackElement_(n), this.remoteTextTracks().addTrack(n.track), !0 !== t && this.ready(function () {
        return i.autoRemoteTextTracks_.addTrack(n.track);
      }), n;
    }, e.removeRemoteTextTrack = function (e) {
      var t = this.remoteTextTrackEls().getTrackElementByTrack_(e);this.remoteTextTrackEls().removeTrackElement_(t), this.remoteTextTracks().removeTrack(e), this.autoRemoteTextTracks_.removeTrack(e);
    }, e.getVideoPlaybackQuality = function () {
      return {};
    }, e.setPoster = function () {}, e.playsinline = function () {}, e.setPlaysinline = function () {}, e.overrideNativeAudioTracks = function () {}, e.overrideNativeVideoTracks = function () {}, e.canPlayType = function () {
      return "";
    }, i.canPlayType = function () {
      return "";
    }, i.canPlaySource = function (e, t) {
      return i.canPlayType(e.type);
    }, i.isTech = function (e) {
      return e.prototype instanceof i || e instanceof i || e === i;
    }, i.registerTech = function (e, t) {
      if (i.techs_ || (i.techs_ = {}), !i.isTech(t)) throw new Error("Tech " + e + " must be a Tech");if (!i.canPlayType) throw new Error("Techs must have a static canPlayType method on them");if (!i.canPlaySource) throw new Error("Techs must have a static canPlaySource method on them");return e = Be(e), i.techs_[e] = t, "Tech" !== e && i.defaultTechOrder_.push(e), t;
    }, i.getTech = function (e) {
      if (e) return e = Be(e), i.techs_ && i.techs_[e] ? i.techs_[e] : v && v.videojs && v.videojs[e] ? (m.warn("The " + e + " tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)"), v.videojs[e]) : void 0;
    }, i;
  }(je);Ci.names.forEach(function (e) {
    var t = Ci[e];Ei.prototype[t.getterName] = function () {
      return this[t.privateName] = this[t.privateName] || new t.ListClass(), this[t.privateName];
    };
  }), Ei.prototype.featuresVolumeControl = !0, Ei.prototype.featuresMuteControl = !0, Ei.prototype.featuresFullscreenResize = !1, Ei.prototype.featuresPlaybackRate = !1, Ei.prototype.featuresProgressEvents = !1, Ei.prototype.featuresSourceset = !1, Ei.prototype.featuresTimeupdateEvents = !1, Ei.prototype.featuresNativeTextTracks = !1, Ei.withSourceHandlers = function (r) {
    r.registerSourceHandler = function (e, t) {
      var i = r.sourceHandlers;i || (i = r.sourceHandlers = []), void 0 === t && (t = i.length), i.splice(t, 0, e);
    }, r.canPlayType = function (e) {
      for (var t, i = r.sourceHandlers || [], n = 0; n < i.length; n++) {
        if (t = i[n].canPlayType(e)) return t;
      }return "";
    }, r.selectSourceHandler = function (e, t) {
      for (var i = r.sourceHandlers || [], n = 0; n < i.length; n++) {
        if (i[n].canHandleSource(e, t)) return i[n];
      }return null;
    }, r.canPlaySource = function (e, t) {
      var i = r.selectSourceHandler(e, t);return i ? i.canHandleSource(e, t) : "";
    };["seekable", "seeking", "duration"].forEach(function (e) {
      var t = this[e];"function" == typeof t && (this[e] = function () {
        return this.sourceHandler_ && this.sourceHandler_[e] ? this.sourceHandler_[e].apply(this.sourceHandler_, arguments) : t.apply(this, arguments);
      });
    }, r.prototype), r.prototype.setSource = function (e) {
      var t = r.selectSourceHandler(e, this.options_);t || (r.nativeSourceHandler ? t = r.nativeSourceHandler : m.error("No source handler found for the current source.")), this.disposeSourceHandler(), this.off("dispose", this.disposeSourceHandler), t !== r.nativeSourceHandler && (this.currentSource_ = e), this.sourceHandler_ = t.handleSource(e, this, this.options_), this.one("dispose", this.disposeSourceHandler);
    }, r.prototype.disposeSourceHandler = function () {
      this.currentSource_ && (this.clearTracks(["audio", "video"]), this.currentSource_ = null), this.cleanupAutoTextTracks(), this.sourceHandler_ && (this.sourceHandler_.dispose && this.sourceHandler_.dispose(), this.sourceHandler_ = null);
    };
  }, je.registerComponent("Tech", Ei), Ei.registerTech("Tech", Ei), Ei.defaultTechOrder_ = [];var Ai = {},
      Li = {},
      Pi = {};function Oi(e, t, i) {
    e.setTimeout(function () {
      return function i(n, e, r, a, s, o) {
        void 0 === n && (n = {});void 0 === e && (e = []);void 0 === s && (s = []);void 0 === o && (o = !1);var t = e,
            u = t[0],
            l = t.slice(1);if ("string" == typeof u) i(n, Ai[u], r, a, s, o);else if (u) {
          var c = Mi(a, u);if (!c.setSource) return s.push(c), i(n, l, r, a, s, o);c.setSource(_({}, n), function (e, t) {
            if (e) return i(n, l, r, a, s, o);s.push(c), i(t, n.type === t.type ? l : Ai[t.type], r, a, s, o);
          });
        } else l.length ? i(n, l, r, a, s, o) : o ? r(n, s) : i(n, Ai["*"], r, a, s, !0);
      }(t, Ai[t.type], i, e);
    }, 1);
  }function Ii(e, t, i, n) {
    void 0 === n && (n = null);var r = "call" + Be(i),
        a = e.reduce(Ri(r), n),
        s = a === Pi,
        o = s ? null : t[i](a);return function (e, t, i, n) {
      for (var r = e.length - 1; 0 <= r; r--) {
        var a = e[r];a[t] && a[t](n, i);
      }
    }(e, i, o, s), o;
  }var Ui = { buffered: 1, currentTime: 1, duration: 1, seekable: 1, played: 1, paused: 1 },
      Di = { setCurrentTime: 1 },
      xi = { play: 1, pause: 1 };function Ri(i) {
    return function (e, t) {
      return e === Pi ? Pi : t[i] ? t[i](e) : e;
    };
  }function Mi(e, t) {
    var i = Li[e.id()],
        n = null;if (null == i) return n = t(e), Li[e.id()] = [[t, n]], n;for (var r = 0; r < i.length; r++) {
      var a = i[r],
          s = a[0],
          o = a[1];s === t && (n = o);
    }return null === n && (n = t(e), i.push([t, n])), n;
  }var Bi = { opus: "video/ogg", ogv: "video/ogg", mp4: "video/mp4", mov: "video/mp4", m4v: "video/mp4", mkv: "video/x-matroska", mp3: "audio/mpeg", aac: "audio/aac", oga: "audio/ogg", m3u8: "application/x-mpegURL", jpg: "image/jpeg", jpeg: "image/jpeg", gif: "image/gif", png: "image/png", svg: "image/svg+xml", webp: "image/webp" },
      Ni = function Ni(e) {
    void 0 === e && (e = "");var t = Yt(e);return Bi[t.toLowerCase()] || "";
  };function ji(e) {
    var t = Ni(e.src);return !e.type && t && (e.type = t), e;
  }var Fi = function (l) {
    function e(e, t, i) {
      var n,
          r = Ne({ createEl: !1 }, t);if (n = l.call(this, e, r, i) || this, t.playerOptions.sources && 0 !== t.playerOptions.sources.length) e.src(t.playerOptions.sources);else for (var a = 0, s = t.playerOptions.techOrder; a < s.length; a++) {
        var o = Be(s[a]),
            u = Ei.getTech(o);if (o || (u = je.getComponent(o)), u && u.isSupported()) {
          e.loadTech_(o);break;
        }
      }return n;
    }return p(e, l), e;
  }(je);je.registerComponent("MediaLoader", Fi);var Hi = function (r) {
    function e(e, t) {
      var i;return (i = r.call(this, e, t) || this).emitTapEvents(), i.enable(), i;
    }p(e, r);var t = e.prototype;return t.createEl = function (e, t, i) {
      void 0 === e && (e = "div"), void 0 === t && (t = {}), void 0 === i && (i = {}), t = _({ innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>', className: this.buildCSSClass(), tabIndex: 0 }, t), "button" === e && m.error("Creating a ClickableComponent with an HTML element of " + e + " is not supported; use a Button instead."), i = _({ role: "button" }, i), this.tabIndex_ = t.tabIndex;var n = r.prototype.createEl.call(this, e, t, i);return this.createControlTextEl(n), n;
    }, t.dispose = function () {
      this.controlTextEl_ = null, r.prototype.dispose.call(this);
    }, t.createControlTextEl = function (e) {
      return this.controlTextEl_ = A("span", { className: "vjs-control-text" }, { "aria-live": "polite" }), e && e.appendChild(this.controlTextEl_), this.controlText(this.controlText_, e), this.controlTextEl_;
    }, t.controlText = function (e, t) {
      if (void 0 === t && (t = this.el()), void 0 === e) return this.controlText_ || "Need Text";var i = this.localize(e);this.controlText_ = e, L(this.controlTextEl_, i), this.nonIconControl || t.setAttribute("title", i);
    }, t.buildCSSClass = function () {
      return "vjs-control vjs-button " + r.prototype.buildCSSClass.call(this);
    }, t.enable = function () {
      this.enabled_ || (this.enabled_ = !0, this.removeClass("vjs-disabled"), this.el_.setAttribute("aria-disabled", "false"), "undefined" != typeof this.tabIndex_ && this.el_.setAttribute("tabIndex", this.tabIndex_), this.on(["tap", "click"], this.handleClick), this.on("focus", this.handleFocus), this.on("blur", this.handleBlur));
    }, t.disable = function () {
      this.enabled_ = !1, this.addClass("vjs-disabled"), this.el_.setAttribute("aria-disabled", "true"), "undefined" != typeof this.tabIndex_ && this.el_.removeAttribute("tabIndex"), this.off(["tap", "click"], this.handleClick), this.off("focus", this.handleFocus), this.off("blur", this.handleBlur);
    }, t.handleClick = function (e) {}, t.handleFocus = function (e) {
      de(d, "keydown", ke(this, this.handleKeyPress));
    }, t.handleKeyPress = function (e) {
      Ot.isEventKey(e, "Space") || Ot.isEventKey(e, "Enter") ? (e.preventDefault(), this.trigger("click")) : r.prototype.handleKeyPress.call(this, e);
    }, t.handleBlur = function (e) {
      he(d, "keydown", ke(this, this.handleKeyPress));
    }, e;
  }(je);je.registerComponent("ClickableComponent", Hi);var Vi = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).update(), e.on("posterchange", ke(f(f(i)), i.update)), i;
    }p(e, n);var t = e.prototype;return t.dispose = function () {
      this.player().off("posterchange", this.update), n.prototype.dispose.call(this);
    }, t.createEl = function () {
      return A("div", { className: "vjs-poster", tabIndex: -1 });
    }, t.update = function (e) {
      var t = this.player().poster();this.setSrc(t), t ? this.show() : this.hide();
    }, t.setSrc = function (e) {
      var t = "";e && (t = 'url("' + e + '")'), this.el_.style.backgroundImage = t;
    }, t.handleClick = function (e) {
      this.player_.controls() && (this.player_.paused() ? wt(this.player_.play()) : this.player_.pause(), this.player_.handleFocus({}));
    }, e;
  }(Hi);je.registerComponent("PosterImage", Vi);var qi = "#222",
      zi = { monospace: "monospace", sansSerif: "sans-serif", serif: "serif", monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace', monospaceSerif: '"Courier New", monospace', proportionalSansSerif: "sans-serif", proportionalSerif: "serif", casual: '"Comic Sans MS", Impact, fantasy', script: '"Monotype Corsiva", cursive', smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif' };function Wi(e, t) {
    var i;if (4 === e.length) i = e[1] + e[1] + e[2] + e[2] + e[3] + e[3];else {
      if (7 !== e.length) throw new Error("Invalid color code provided, " + e + "; must be formatted as e.g. #f0e or #f604e2.");i = e.slice(1);
    }return "rgba(" + parseInt(i.slice(0, 2), 16) + "," + parseInt(i.slice(2, 4), 16) + "," + parseInt(i.slice(4, 6), 16) + "," + t + ")";
  }function Gi(e, t, i) {
    try {
      e.style[t] = i;
    } catch (e) {
      return;
    }
  }var Xi = function (a) {
    function e(i, e, t) {
      var n;n = a.call(this, i, e, t) || this;var r = ke(f(f(n)), n.updateDisplay);return i.on("loadstart", ke(f(f(n)), n.toggleDisplay)), i.on("texttrackchange", r), i.on("loadedmetadata", ke(f(f(n)), n.preselectTrack)), i.ready(ke(f(f(n)), function () {
        if (i.tech_ && i.tech_.featuresNativeTextTracks) this.hide();else {
          i.on("fullscreenchange", r), i.on("playerresize", r), v.addEventListener("orientationchange", r), i.on("dispose", function () {
            return v.removeEventListener("orientationchange", r);
          });for (var e = this.options_.playerOptions.tracks || [], t = 0; t < e.length; t++) {
            this.player_.addRemoteTextTrack(e[t], !0);
          }this.preselectTrack();
        }
      })), n;
    }p(e, a);var t = e.prototype;return t.preselectTrack = function () {
      for (var e, t, i, n = { captions: 1, subtitles: 1 }, r = this.player_.textTracks(), a = this.player_.cache_.selectedLanguage, s = 0; s < r.length; s++) {
        var o = r[s];a && a.enabled && a.language && a.language === o.language && o.kind in n ? o.kind === a.kind ? i = o : i || (i = o) : a && !a.enabled ? t = e = i = null : o.default && ("descriptions" !== o.kind || e ? o.kind in n && !t && (t = o) : e = o);
      }i ? i.mode = "showing" : t ? t.mode = "showing" : e && (e.mode = "showing");
    }, t.toggleDisplay = function () {
      this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks ? this.hide() : this.show();
    }, t.createEl = function () {
      return a.prototype.createEl.call(this, "div", { className: "vjs-text-track-display" }, { "aria-live": "off", "aria-atomic": "true" });
    }, t.clearDisplay = function () {
      "function" == typeof v.WebVTT && v.WebVTT.processCues(v, [], this.el_);
    }, t.updateDisplay = function () {
      var e = this.player_.textTracks();this.clearDisplay();for (var t = null, i = null, n = e.length; n--;) {
        var r = e[n];"showing" === r.mode && ("descriptions" === r.kind ? t = r : i = r);
      }i ? ("off" !== this.getAttribute("aria-live") && this.setAttribute("aria-live", "off"), this.updateForTrack(i)) : t && ("assertive" !== this.getAttribute("aria-live") && this.setAttribute("aria-live", "assertive"), this.updateForTrack(t));
    }, t.updateForTrack = function (e) {
      if ("function" == typeof v.WebVTT && e.activeCues) {
        for (var t = [], i = 0; i < e.activeCues.length; i++) {
          t.push(e.activeCues[i]);
        }if (v.WebVTT.processCues(v, t, this.el_), this.player_.textTrackSettings) for (var n = this.player_.textTrackSettings.getValues(), r = t.length; r--;) {
          var a = t[r];if (a) {
            var s = a.displayState;if (n.color && (s.firstChild.style.color = n.color), n.textOpacity && Gi(s.firstChild, "color", Wi(n.color || "#fff", n.textOpacity)), n.backgroundColor && (s.firstChild.style.backgroundColor = n.backgroundColor), n.backgroundOpacity && Gi(s.firstChild, "backgroundColor", Wi(n.backgroundColor || "#000", n.backgroundOpacity)), n.windowColor && (n.windowOpacity ? Gi(s, "backgroundColor", Wi(n.windowColor, n.windowOpacity)) : s.style.backgroundColor = n.windowColor), n.edgeStyle && ("dropshadow" === n.edgeStyle ? s.firstChild.style.textShadow = "2px 2px 3px #222, 2px 2px 4px #222, 2px 2px 5px " + qi : "raised" === n.edgeStyle ? s.firstChild.style.textShadow = "1px 1px #222, 2px 2px #222, 3px 3px " + qi : "depressed" === n.edgeStyle ? s.firstChild.style.textShadow = "1px 1px #ccc, 0 1px #ccc, -1px -1px #222, 0 -1px " + qi : "uniform" === n.edgeStyle && (s.firstChild.style.textShadow = "0 0 4px #222, 0 0 4px #222, 0 0 4px #222, 0 0 4px " + qi)), n.fontPercent && 1 !== n.fontPercent) {
              var o = v.parseFloat(s.style.fontSize);s.style.fontSize = o * n.fontPercent + "px", s.style.height = "auto", s.style.top = "auto", s.style.bottom = "2px";
            }n.fontFamily && "default" !== n.fontFamily && ("small-caps" === n.fontFamily ? s.firstChild.style.fontVariant = "small-caps" : s.firstChild.style.fontFamily = zi[n.fontFamily]);
          }
        }
      }
    }, e;
  }(je);je.registerComponent("TextTrackDisplay", Xi);var Ki = function (r) {
    function e() {
      return r.apply(this, arguments) || this;
    }return p(e, r), e.prototype.createEl = function () {
      var e = this.player_.isAudio(),
          t = this.localize(e ? "Audio Player" : "Video Player"),
          i = A("span", { className: "vjs-control-text", innerHTML: this.localize("{1} is loading.", [t]) }),
          n = r.prototype.createEl.call(this, "div", { className: "vjs-loading-spinner", dir: "ltr" });return n.appendChild(i), n;
    }, e;
  }(je);je.registerComponent("LoadingSpinner", Ki);var Yi = function (t) {
    function e() {
      return t.apply(this, arguments) || this;
    }p(e, t);var i = e.prototype;return i.createEl = function (e, t, i) {
      void 0 === t && (t = {}), void 0 === i && (i = {}), t = _({ innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>', className: this.buildCSSClass() }, t), i = _({ type: "button" }, i);var n = je.prototype.createEl.call(this, "button", t, i);return this.createControlTextEl(n), n;
    }, i.addChild = function (e, t) {
      void 0 === t && (t = {});var i = this.constructor.name;return m.warn("Adding an actionable (user controllable) child to a Button (" + i + ") is not supported; use a ClickableComponent instead."), je.prototype.addChild.call(this, e, t);
    }, i.enable = function () {
      t.prototype.enable.call(this), this.el_.removeAttribute("disabled");
    }, i.disable = function () {
      t.prototype.disable.call(this), this.el_.setAttribute("disabled", "disabled");
    }, i.handleKeyPress = function (e) {
      Ot.isEventKey(e, "Space") || Ot.isEventKey(e, "Enter") || t.prototype.handleKeyPress.call(this, e);
    }, e;
  }(Hi);je.registerComponent("Button", Yi);var $i = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).mouseused_ = !1, i.on("mousedown", i.handleMouseDown), i;
    }p(e, n);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-big-play-button";
    }, t.handleClick = function (e) {
      var t = this.player_.play();if (this.mouseused_ && e.clientX && e.clientY) return wt(t), void this.player_.handleFocus({});var i = this.player_.getChild("controlBar"),
          n = i && i.getChild("playToggle");if (n) {
        var r = function r() {
          return n.focus();
        };Ct(t) ? t.then(r, function () {}) : this.setTimeout(r, 1);
      } else this.player_.focus();
    }, t.handleKeyPress = function (e) {
      this.mouseused_ = !1, n.prototype.handleKeyPress.call(this, e);
    }, t.handleMouseDown = function (e) {
      this.mouseused_ = !0;
    }, e;
  }(Yi);$i.prototype.controlText_ = "Play Video", je.registerComponent("BigPlayButton", $i);var Qi = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).controlText(t && t.controlText || i.localize("Close")), i;
    }p(e, n);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-close-button " + n.prototype.buildCSSClass.call(this);
    }, t.handleKeyPress = function (e) {}, t.handleClick = function (e) {
      this.trigger({ type: "close", bubbles: !1 });
    }, e;
  }(Yi);je.registerComponent("CloseButton", Qi);var Ji = function (n) {
    function e(e, t) {
      var i;return void 0 === t && (t = {}), i = n.call(this, e, t) || this, t.replay = void 0 === t.replay || t.replay, i.on(e, "play", i.handlePlay), i.on(e, "pause", i.handlePause), t.replay && i.on(e, "ended", i.handleEnded), i;
    }p(e, n);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-play-control " + n.prototype.buildCSSClass.call(this);
    }, t.handleClick = function (e) {
      this.player_.paused() ? this.player_.play() : this.player_.pause();
    }, t.handleSeeked = function (e) {
      this.removeClass("vjs-ended"), this.player_.paused() ? this.handlePause(e) : this.handlePlay(e);
    }, t.handlePlay = function (e) {
      this.removeClass("vjs-ended"), this.removeClass("vjs-paused"), this.addClass("vjs-playing"), this.controlText("Pause");
    }, t.handlePause = function (e) {
      this.removeClass("vjs-playing"), this.addClass("vjs-paused"), this.controlText("Play");
    }, t.handleEnded = function (e) {
      this.removeClass("vjs-playing"), this.addClass("vjs-ended"), this.controlText("Replay"), this.one(this.player_, "seeked", this.handleSeeked);
    }, e;
  }(Yi);Ji.prototype.controlText_ = "Play", je.registerComponent("PlayToggle", Ji);var Zi = function Zi(e, t) {
    e = e < 0 ? 0 : e;var i = Math.floor(e % 60),
        n = Math.floor(e / 60 % 60),
        r = Math.floor(e / 3600),
        a = Math.floor(t / 60 % 60),
        s = Math.floor(t / 3600);return (isNaN(e) || e === 1 / 0) && (r = n = i = "-"), (r = 0 < r || 0 < s ? r + ":" : "") + (n = ((r || 10 <= a) && n < 10 ? "0" + n : n) + ":") + (i = i < 10 ? "0" + i : i);
  },
      en = Zi;function tn(e, t) {
    return void 0 === t && (t = e), en(e, t);
  }var nn = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).throttledUpdateContent = Ce(ke(f(f(i)), i.updateContent), 25), i.on(e, "timeupdate", i.throttledUpdateContent), i;
    }p(e, n);var t = e.prototype;return t.createEl = function () {
      var e = this.buildCSSClass(),
          t = n.prototype.createEl.call(this, "div", { className: e + " vjs-time-control vjs-control", innerHTML: '<span class="vjs-control-text" role="presentation">' + this.localize(this.labelText_) + " </span>" });return this.contentEl_ = A("span", { className: e + "-display" }, { "aria-live": "off", role: "presentation" }), this.updateTextNode_(), t.appendChild(this.contentEl_), t;
    }, t.dispose = function () {
      this.contentEl_ = null, this.textNode_ = null, n.prototype.dispose.call(this);
    }, t.updateTextNode_ = function () {
      if (this.contentEl_) {
        for (; this.contentEl_.firstChild;) {
          this.contentEl_.removeChild(this.contentEl_.firstChild);
        }this.textNode_ = d.createTextNode(this.formattedTime_ || this.formatTime_(0)), this.contentEl_.appendChild(this.textNode_);
      }
    }, t.formatTime_ = function (e) {
      return tn(e);
    }, t.updateFormattedTime_ = function (e) {
      var t = this.formatTime_(e);t !== this.formattedTime_ && (this.formattedTime_ = t, this.requestAnimationFrame(this.updateTextNode_));
    }, t.updateContent = function (e) {}, e;
  }(je);nn.prototype.labelText_ = "Time", nn.prototype.controlText_ = "Time", je.registerComponent("TimeDisplay", nn);var rn = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).on(e, "ended", i.handleEnded), i;
    }p(e, n);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-current-time";
    }, t.updateContent = function (e) {
      var t = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();this.updateFormattedTime_(t);
    }, t.handleEnded = function (e) {
      this.player_.duration() && this.updateFormattedTime_(this.player_.duration());
    }, e;
  }(nn);rn.prototype.labelText_ = "Current Time", rn.prototype.controlText_ = "Current Time", je.registerComponent("CurrentTimeDisplay", rn);var an = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).on(e, "durationchange", i.updateContent), i.on(e, "loadstart", i.updateContent), i.on(e, "loadedmetadata", i.throttledUpdateContent), i;
    }p(e, n);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-duration";
    }, t.updateContent = function (e) {
      var t = this.player_.duration();this.duration_ !== t && (this.duration_ = t, this.updateFormattedTime_(t));
    }, e;
  }(nn);an.prototype.labelText_ = "Duration", an.prototype.controlText_ = "Duration", je.registerComponent("DurationDisplay", an);var sn = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }return p(t, e), t.prototype.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: "vjs-time-control vjs-time-divider", innerHTML: "<div><span>/</span></div>" }, { "aria-hidden": !0 });
    }, t;
  }(je);je.registerComponent("TimeDivider", sn);var on = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).on(e, "durationchange", i.throttledUpdateContent), i.on(e, "ended", i.handleEnded), i;
    }p(e, n);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-remaining-time";
    }, t.createEl = function () {
      var e = n.prototype.createEl.call(this);return e.insertBefore(A("span", {}, { "aria-hidden": !0 }, "-"), this.contentEl_), e;
    }, t.updateContent = function (e) {
      "number" == typeof this.player_.duration() && (this.player_.remainingTimeDisplay ? this.updateFormattedTime_(this.player_.remainingTimeDisplay()) : this.updateFormattedTime_(this.player_.remainingTime()));
    }, t.handleEnded = function (e) {
      this.player_.duration() && this.updateFormattedTime_(0);
    }, e;
  }(nn);on.prototype.labelText_ = "Remaining Time", on.prototype.controlText_ = "Remaining Time", je.registerComponent("RemainingTimeDisplay", on);var un = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).updateShowing(), i.on(i.player(), "durationchange", i.updateShowing), i;
    }p(e, n);var t = e.prototype;return t.createEl = function () {
      var e = n.prototype.createEl.call(this, "div", { className: "vjs-live-control vjs-control" });return this.contentEl_ = A("div", { className: "vjs-live-display", innerHTML: '<span class="vjs-control-text">' + this.localize("Stream Type") + " </span>" + this.localize("LIVE") }, { "aria-live": "off" }), e.appendChild(this.contentEl_), e;
    }, t.dispose = function () {
      this.contentEl_ = null, n.prototype.dispose.call(this);
    }, t.updateShowing = function (e) {
      this.player().duration() === 1 / 0 ? this.show() : this.hide();
    }, e;
  }(je);je.registerComponent("LiveDisplay", un);var ln = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).updateLiveEdgeStatus(), i.player_.liveTracker && i.on(i.player_.liveTracker, "liveedgechange", i.updateLiveEdgeStatus), i;
    }p(e, n);var t = e.prototype;return t.createEl = function () {
      var e = n.prototype.createEl.call(this, "button", { className: "vjs-seek-to-live-control vjs-control" });return this.textEl_ = A("span", { className: "vjs-seek-to-live-text", innerHTML: this.localize("LIVE") }, { "aria-hidden": "true" }), e.appendChild(this.textEl_), e;
    }, t.updateLiveEdgeStatus = function (e) {
      !this.player_.liveTracker || this.player_.liveTracker.atLiveEdge() ? (this.setAttribute("aria-disabled", !0), this.addClass("vjs-at-live-edge"), this.controlText("Seek to live, currently playing live")) : (this.setAttribute("aria-disabled", !1), this.removeClass("vjs-at-live-edge"), this.controlText("Seek to live, currently behind live"));
    }, t.handleClick = function () {
      this.player_.liveTracker.seekToLiveEdge();
    }, t.dispose = function () {
      this.player_.liveTracker && this.off(this.player_.liveTracker, "liveedgechange", this.updateLiveEdgeStatus), this.textEl_ = null, n.prototype.dispose.call(this);
    }, e;
  }(Yi);ln.prototype.controlText_ = "Seek to live, currently playing live", je.registerComponent("SeekToLive", ln);var cn = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).bar = i.getChild(i.options_.barName), i.vertical(!!i.options_.vertical), i.enable(), i;
    }p(e, n);var t = e.prototype;return t.enabled = function () {
      return this.enabled_;
    }, t.enable = function () {
      this.enabled() || (this.on("mousedown", this.handleMouseDown), this.on("touchstart", this.handleMouseDown), this.on("focus", this.handleFocus), this.on("blur", this.handleBlur), this.on("click", this.handleClick), this.on(this.player_, "controlsvisible", this.update), this.playerEvent && this.on(this.player_, this.playerEvent, this.update), this.removeClass("disabled"), this.setAttribute("tabindex", 0), this.enabled_ = !0);
    }, t.disable = function () {
      if (this.enabled()) {
        var e = this.bar.el_.ownerDocument;this.off("mousedown", this.handleMouseDown), this.off("touchstart", this.handleMouseDown), this.off("focus", this.handleFocus), this.off("blur", this.handleBlur), this.off("click", this.handleClick), this.off(this.player_, "controlsvisible", this.update), this.off(e, "mousemove", this.handleMouseMove), this.off(e, "mouseup", this.handleMouseUp), this.off(e, "touchmove", this.handleMouseMove), this.off(e, "touchend", this.handleMouseUp), this.removeAttribute("tabindex"), this.addClass("disabled"), this.playerEvent && this.off(this.player_, this.playerEvent, this.update), this.enabled_ = !1;
      }
    }, t.createEl = function (e, t, i) {
      return void 0 === t && (t = {}), void 0 === i && (i = {}), t.className = t.className + " vjs-slider", t = _({ tabIndex: 0 }, t), i = _({ role: "slider", "aria-valuenow": 0, "aria-valuemin": 0, "aria-valuemax": 100, tabIndex: 0 }, i), n.prototype.createEl.call(this, e, t, i);
    }, t.handleMouseDown = function (e) {
      var t = this.bar.el_.ownerDocument;"mousedown" === e.type && e.preventDefault(), "touchstart" !== e.type || nt || e.preventDefault(), j(), this.addClass("vjs-sliding"), this.trigger("slideractive"), this.on(t, "mousemove", this.handleMouseMove), this.on(t, "mouseup", this.handleMouseUp), this.on(t, "touchmove", this.handleMouseMove), this.on(t, "touchend", this.handleMouseUp), this.handleMouseMove(e);
    }, t.handleMouseMove = function (e) {}, t.handleMouseUp = function () {
      var e = this.bar.el_.ownerDocument;F(), this.removeClass("vjs-sliding"), this.trigger("sliderinactive"), this.off(e, "mousemove", this.handleMouseMove), this.off(e, "mouseup", this.handleMouseUp), this.off(e, "touchmove", this.handleMouseMove), this.off(e, "touchend", this.handleMouseUp), this.update();
    }, t.update = function () {
      if (this.el_) {
        var e = this.getPercent(),
            t = this.bar;if (t) {
          ("number" != typeof e || e != e || e < 0 || e === 1 / 0) && (e = 0);var i = (100 * e).toFixed(2) + "%",
              n = t.el().style;return this.vertical() ? n.height = i : n.width = i, e;
        }
      }
    }, t.calculateDistance = function (e) {
      var t = q(this.el_, e);return this.vertical() ? t.y : t.x;
    }, t.handleFocus = function () {
      this.on(this.bar.el_.ownerDocument, "keydown", this.handleKeyPress);
    }, t.handleKeyPress = function (e) {
      Ot.isEventKey(e, "Left") || Ot.isEventKey(e, "Down") ? (e.preventDefault(), this.stepBack()) : Ot.isEventKey(e, "Right") || Ot.isEventKey(e, "Up") ? (e.preventDefault(), this.stepForward()) : n.prototype.handleKeyPress.call(this, e);
    }, t.handleBlur = function () {
      this.off(this.bar.el_.ownerDocument, "keydown", this.handleKeyPress);
    }, t.handleClick = function (e) {
      e.stopImmediatePropagation(), e.preventDefault();
    }, t.vertical = function (e) {
      if (void 0 === e) return this.vertical_ || !1;this.vertical_ = !!e, this.vertical_ ? this.addClass("vjs-slider-vertical") : this.addClass("vjs-slider-horizontal");
    }, e;
  }(je);je.registerComponent("Slider", cn);var dn = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).partEls_ = [], i.on(e, "progress", i.update), i;
    }p(e, n);var t = e.prototype;return t.createEl = function () {
      return n.prototype.createEl.call(this, "div", { className: "vjs-load-progress", innerHTML: '<span class="vjs-control-text"><span>' + this.localize("Loaded") + '</span>: <span class="vjs-control-text-loaded-percentage">0%</span></span>' });
    }, t.dispose = function () {
      this.partEls_ = null, n.prototype.dispose.call(this);
    }, t.update = function (e) {
      var t = this.player_.liveTracker,
          i = this.player_.buffered(),
          n = t && t.isLive() ? t.seekableEnd() : this.player_.duration(),
          r = this.player_.bufferedEnd(),
          a = this.partEls_,
          s = this.$(".vjs-control-text-loaded-percentage"),
          o = function o(e, t, i) {
        var n = e / t || 0;return n = 100 * (1 <= n ? 1 : n), i && (n = n.toFixed(2)), n + "%";
      };this.el_.style.width = o(r, n), L(s, o(r, n, !0));for (var u = 0; u < i.length; u++) {
        var l = i.start(u),
            c = i.end(u),
            d = a[u];d || (d = this.el_.appendChild(A()), a[u] = d), d.style.left = o(l, r), d.style.width = o(c - l, r);
      }for (var h = a.length; h > i.length; h--) {
        this.el_.removeChild(a[h - 1]);
      }a.length = i.length;
    }, e;
  }(je);je.registerComponent("LoadProgressBar", dn);var hn = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }p(t, e);var i = t.prototype;return i.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: "vjs-time-tooltip" }, { "aria-hidden": "true" });
    }, i.update = function (e, t, i) {
      var n = H(this.el_),
          r = H(this.player_.el()),
          a = e.width * t;if (r && n) {
        var s = e.left - r.left + a,
            o = e.width - a + (r.right - e.right),
            u = n.width / 2;s < u ? u += u - s : o < u && (u = o), u < 0 ? u = 0 : u > n.width && (u = n.width), this.el_.style.right = "-" + u + "px", L(this.el_, i);
      }
    }, i.updateTime = function (r, a, s, o) {
      var u = this;this.rafId_ && this.cancelAnimationFrame(this.rafId_), this.rafId_ = this.requestAnimationFrame(function () {
        var e,
            t = u.player_.duration();if (u.player_.liveTracker && u.player_.liveTracker.isLive()) {
          var i = u.player_.liveTracker.liveWindow(),
              n = i - a * i;e = (n < 1 ? "" : "-") + tn(n, i);
        } else e = tn(s, t);u.update(r, a, e), o && o();
      });
    }, t;
  }(je);je.registerComponent("TimeTooltip", hn);var pn = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }p(t, e);var i = t.prototype;return i.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: "vjs-play-progress vjs-slider-bar" }, { "aria-hidden": "true" });
    }, i.update = function (e, t) {
      var i = this.getChild("timeTooltip");if (i) {
        var n = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();i.updateTime(e, t, n);
      }
    }, t;
  }(je);pn.prototype.options_ = { children: [] }, $e || Je || pn.prototype.options_.children.push("timeTooltip"), je.registerComponent("PlayProgressBar", pn);var fn = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).update = Ce(ke(f(f(i)), i.update), 25), i;
    }p(e, n);var t = e.prototype;return t.createEl = function () {
      return n.prototype.createEl.call(this, "div", { className: "vjs-mouse-display" });
    }, t.update = function (e, t) {
      var i = this,
          n = t * this.player_.duration();this.getChild("timeTooltip").updateTime(e, t, n, function () {
        i.el_.style.left = e.width * t + "px";
      });
    }, e;
  }(je);fn.prototype.options_ = { children: ["timeTooltip"] }, je.registerComponent("MouseTimeDisplay", fn);var mn = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).setEventHandlers_(), i;
    }p(e, n);var t = e.prototype;return t.setEventHandlers_ = function () {
      this.update = Ce(ke(this, this.update), 30), this.on(this.player_, "timeupdate", this.update), this.on(this.player_, "ended", this.handleEnded), this.on(this.player_, "durationchange", this.update), this.player_.liveTracker && this.on(this.player_.liveTracker, "liveedgechange", this.update), this.updateInterval = null, this.on(this.player_, ["playing"], this.enableInterval_), this.on(this.player_, ["ended", "pause", "waiting"], this.disableInterval_), "hidden" in d && "visibilityState" in d && this.on(d, "visibilitychange", this.toggleVisibility_);
    }, t.toggleVisibility_ = function (e) {
      d.hidden ? this.disableInterval_(e) : (this.enableInterval_(), this.requestAnimationFrame(this.update));
    }, t.enableInterval_ = function () {
      var e = this;this.clearInterval(this.updateInterval), this.updateInterval = this.setInterval(function () {
        e.requestAnimationFrame(e.update);
      }, 30);
    }, t.disableInterval_ = function (e) {
      this.player_.liveTracker && this.player_.liveTracker.isLive() && "ended" !== e.type || this.clearInterval(this.updateInterval);
    }, t.createEl = function () {
      return n.prototype.createEl.call(this, "div", { className: "vjs-progress-holder" }, { "aria-label": this.localize("Progress Bar") });
    }, t.update_ = function (e, t) {
      var i = this.player_.liveTracker,
          n = this.player_.duration();i && i.isLive() && (n = this.player_.liveTracker.liveCurrentTime()), this.el_.setAttribute("aria-valuenow", (100 * t).toFixed(2)), this.el_.setAttribute("aria-valuetext", this.localize("progress bar timing: currentTime={1} duration={2}", [tn(e, n), tn(n, n)], "{1} of {2}")), this.bar && this.bar.update(H(this.el_), t);
    }, t.update = function (e) {
      if (null !== this.el().offsetParent) {
        var t = n.prototype.update.call(this);return this.update_(this.getCurrentTime_(), t), t;
      }
    }, t.getCurrentTime_ = function () {
      return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
    }, t.handleEnded = function (e) {
      this.update_(this.player_.duration(), 1);
    }, t.getPercent = function () {
      var e,
          t = this.getCurrentTime_(),
          i = this.player_.liveTracker;return i && i.isLive() ? (e = (t - i.seekableStart()) / i.liveWindow(), i.atLiveEdge() && (e = 1)) : e = t / this.player_.duration(), 1 <= e ? 1 : e || 0;
    }, t.handleMouseDown = function (e) {
      Y(e) && (e.stopPropagation(), this.player_.scrubbing(!0), this.videoWasPlaying = !this.player_.paused(), this.player_.pause(), n.prototype.handleMouseDown.call(this, e));
    }, t.handleMouseMove = function (e) {
      if (Y(e)) {
        var t,
            i = this.calculateDistance(e),
            n = this.player_.liveTracker;if (n && n.isLive()) {
          var r = n.seekableStart(),
              a = n.liveCurrentTime();if (a <= (t = r + i * n.liveWindow()) && (t = a), t <= r && (t = r + .1), t === 1 / 0) return;
        } else (t = i * this.player_.duration()) === this.player_.duration() && (t -= .1);this.player_.currentTime(t);
      }
    }, t.enable = function () {
      n.prototype.enable.call(this);var e = this.getChild("mouseTimeDisplay");e && e.show();
    }, t.disable = function () {
      n.prototype.disable.call(this);var e = this.getChild("mouseTimeDisplay");e && e.hide();
    }, t.handleMouseUp = function (e) {
      n.prototype.handleMouseUp.call(this, e), e && e.stopPropagation(), this.player_.scrubbing(!1), this.player_.trigger({ type: "timeupdate", target: this, manuallyTriggered: !0 }), this.videoWasPlaying && wt(this.player_.play());
    }, t.stepForward = function () {
      this.player_.currentTime(this.player_.currentTime() + 5);
    }, t.stepBack = function () {
      this.player_.currentTime(this.player_.currentTime() - 5);
    }, t.handleAction = function (e) {
      this.player_.paused() ? this.player_.play() : this.player_.pause();
    }, t.handleKeyPress = function (e) {
      if (Ot.isEventKey(e, "Space") || Ot.isEventKey(e, "Enter")) e.preventDefault(), this.handleAction(e);else if (Ot.isEventKey(e, "Home")) e.preventDefault(), this.player_.currentTime(0);else if (Ot.isEventKey(e, "End")) e.preventDefault(), this.player_.currentTime(this.player_.duration());else if (/^[0-9]$/.test(Ot(e))) {
        e.preventDefault();var t = 10 * (Ot.codes[Ot(e)] - Ot.codes[0]) / 100;this.player_.currentTime(this.player_.duration() * t);
      } else Ot.isEventKey(e, "PgDn") ? (e.preventDefault(), this.player_.currentTime(this.player_.currentTime() - 60)) : Ot.isEventKey(e, "PgUp") ? (e.preventDefault(), this.player_.currentTime(this.player_.currentTime() + 60)) : n.prototype.handleKeyPress.call(this, e);
    }, e;
  }(cn);mn.prototype.options_ = { children: ["loadProgressBar", "playProgressBar"], barName: "playProgressBar" }, $e || Je || mn.prototype.options_.children.splice(1, 0, "mouseTimeDisplay"), je.registerComponent("SeekBar", mn);var gn = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).handleMouseMove = Ce(ke(f(f(i)), i.handleMouseMove), 25), i.throttledHandleMouseSeek = Ce(ke(f(f(i)), i.handleMouseSeek), 25), i.enable(), i;
    }p(e, n);var t = e.prototype;return t.createEl = function () {
      return n.prototype.createEl.call(this, "div", { className: "vjs-progress-control vjs-control" });
    }, t.handleMouseMove = function (e) {
      var t = this.getChild("seekBar");if (t) {
        var i = t.getChild("mouseTimeDisplay"),
            n = t.el(),
            r = H(n),
            a = q(n, e).x;1 < a ? a = 1 : a < 0 && (a = 0), i && i.update(r, a);
      }
    }, t.handleMouseSeek = function (e) {
      var t = this.getChild("seekBar");t && t.handleMouseMove(e);
    }, t.enabled = function () {
      return this.enabled_;
    }, t.disable = function () {
      this.children().forEach(function (e) {
        return e.disable && e.disable();
      }), this.enabled() && (this.off(["mousedown", "touchstart"], this.handleMouseDown), this.off(this.el_, "mousemove", this.handleMouseMove), this.handleMouseUp(), this.addClass("disabled"), this.enabled_ = !1);
    }, t.enable = function () {
      this.children().forEach(function (e) {
        return e.enable && e.enable();
      }), this.enabled() || (this.on(["mousedown", "touchstart"], this.handleMouseDown), this.on(this.el_, "mousemove", this.handleMouseMove), this.removeClass("disabled"), this.enabled_ = !0);
    }, t.handleMouseDown = function (e) {
      var t = this.el_.ownerDocument,
          i = this.getChild("seekBar");i && i.handleMouseDown(e), this.on(t, "mousemove", this.throttledHandleMouseSeek), this.on(t, "touchmove", this.throttledHandleMouseSeek), this.on(t, "mouseup", this.handleMouseUp), this.on(t, "touchend", this.handleMouseUp);
    }, t.handleMouseUp = function (e) {
      var t = this.el_.ownerDocument,
          i = this.getChild("seekBar");i && i.handleMouseUp(e), this.off(t, "mousemove", this.throttledHandleMouseSeek), this.off(t, "touchmove", this.throttledHandleMouseSeek), this.off(t, "mouseup", this.handleMouseUp), this.off(t, "touchend", this.handleMouseUp);
    }, e;
  }(je);gn.prototype.options_ = { children: ["seekBar"] }, je.registerComponent("ProgressControl", gn);var yn = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).on(e, "fullscreenchange", i.handleFullscreenChange), !1 === d[mt.fullscreenEnabled] && i.disable(), i;
    }p(e, n);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-fullscreen-control " + n.prototype.buildCSSClass.call(this);
    }, t.handleFullscreenChange = function (e) {
      this.player_.isFullscreen() ? this.controlText("Non-Fullscreen") : this.controlText("Fullscreen");
    }, t.handleClick = function (e) {
      this.player_.isFullscreen() ? this.player_.exitFullscreen() : this.player_.requestFullscreen();
    }, e;
  }(Yi);yn.prototype.controlText_ = "Fullscreen", je.registerComponent("FullscreenToggle", yn);var vn = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }return p(t, e), t.prototype.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: "vjs-volume-level", innerHTML: '<span class="vjs-control-text"></span>' });
    }, t;
  }(je);je.registerComponent("VolumeLevel", vn);var _n = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).on("slideractive", i.updateLastVolume_), i.on(e, "volumechange", i.updateARIAAttributes), e.ready(function () {
        return i.updateARIAAttributes();
      }), i;
    }p(e, n);var t = e.prototype;return t.createEl = function () {
      return n.prototype.createEl.call(this, "div", { className: "vjs-volume-bar vjs-slider-bar" }, { "aria-label": this.localize("Volume Level"), "aria-live": "polite" });
    }, t.handleMouseDown = function (e) {
      Y(e) && n.prototype.handleMouseDown.call(this, e);
    }, t.handleMouseMove = function (e) {
      Y(e) && (this.checkMuted(), this.player_.volume(this.calculateDistance(e)));
    }, t.checkMuted = function () {
      this.player_.muted() && this.player_.muted(!1);
    }, t.getPercent = function () {
      return this.player_.muted() ? 0 : this.player_.volume();
    }, t.stepForward = function () {
      this.checkMuted(), this.player_.volume(this.player_.volume() + .1);
    }, t.stepBack = function () {
      this.checkMuted(), this.player_.volume(this.player_.volume() - .1);
    }, t.updateARIAAttributes = function (e) {
      var t = this.player_.muted() ? 0 : this.volumeAsPercentage_();this.el_.setAttribute("aria-valuenow", t), this.el_.setAttribute("aria-valuetext", t + "%");
    }, t.volumeAsPercentage_ = function () {
      return Math.round(100 * this.player_.volume());
    }, t.updateLastVolume_ = function () {
      var e = this,
          t = this.player_.volume();this.one("sliderinactive", function () {
        0 === e.player_.volume() && e.player_.lastVolume_(t);
      });
    }, e;
  }(cn);_n.prototype.options_ = { children: ["volumeLevel"], barName: "volumeLevel" }, _n.prototype.playerEvent = "volumechange", je.registerComponent("VolumeBar", _n);var bn = function (a) {
    function e(e, t) {
      var i, n, r;return void 0 === t && (t = {}), t.vertical = t.vertical || !1, ("undefined" == typeof t.volumeBar || l(t.volumeBar)) && (t.volumeBar = t.volumeBar || {}, t.volumeBar.vertical = t.vertical), i = a.call(this, e, t) || this, n = f(f(i)), (r = e).tech_ && !r.tech_.featuresVolumeControl && n.addClass("vjs-hidden"), n.on(r, "loadstart", function () {
        r.tech_.featuresVolumeControl ? n.removeClass("vjs-hidden") : n.addClass("vjs-hidden");
      }), i.throttledHandleMouseMove = Ce(ke(f(f(i)), i.handleMouseMove), 25), i.on("mousedown", i.handleMouseDown), i.on("touchstart", i.handleMouseDown), i.on(i.volumeBar, ["focus", "slideractive"], function () {
        i.volumeBar.addClass("vjs-slider-active"), i.addClass("vjs-slider-active"), i.trigger("slideractive");
      }), i.on(i.volumeBar, ["blur", "sliderinactive"], function () {
        i.volumeBar.removeClass("vjs-slider-active"), i.removeClass("vjs-slider-active"), i.trigger("sliderinactive");
      }), i;
    }p(e, a);var t = e.prototype;return t.createEl = function () {
      var e = "vjs-volume-horizontal";return this.options_.vertical && (e = "vjs-volume-vertical"), a.prototype.createEl.call(this, "div", { className: "vjs-volume-control vjs-control " + e });
    }, t.handleMouseDown = function (e) {
      var t = this.el_.ownerDocument;this.on(t, "mousemove", this.throttledHandleMouseMove), this.on(t, "touchmove", this.throttledHandleMouseMove), this.on(t, "mouseup", this.handleMouseUp), this.on(t, "touchend", this.handleMouseUp);
    }, t.handleMouseUp = function (e) {
      var t = this.el_.ownerDocument;this.off(t, "mousemove", this.throttledHandleMouseMove), this.off(t, "touchmove", this.throttledHandleMouseMove), this.off(t, "mouseup", this.handleMouseUp), this.off(t, "touchend", this.handleMouseUp);
    }, t.handleMouseMove = function (e) {
      this.volumeBar.handleMouseMove(e);
    }, e;
  }(je);bn.prototype.options_ = { children: ["volumeBar"] }, je.registerComponent("VolumeControl", bn);var Tn = function (a) {
    function e(e, t) {
      var i, n, r;return i = a.call(this, e, t) || this, n = f(f(i)), (r = e).tech_ && !r.tech_.featuresMuteControl && n.addClass("vjs-hidden"), n.on(r, "loadstart", function () {
        r.tech_.featuresMuteControl ? n.removeClass("vjs-hidden") : n.addClass("vjs-hidden");
      }), i.on(e, ["loadstart", "volumechange"], i.update), i;
    }p(e, a);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-mute-control " + a.prototype.buildCSSClass.call(this);
    }, t.handleClick = function (e) {
      var t = this.player_.volume(),
          i = this.player_.lastVolume_();if (0 === t) {
        var n = i < .1 ? .1 : i;this.player_.volume(n), this.player_.muted(!1);
      } else this.player_.muted(!this.player_.muted());
    }, t.update = function (e) {
      this.updateIcon_(), this.updateControlText_();
    }, t.updateIcon_ = function () {
      var e = this.player_.volume(),
          t = 3;$e && this.player_.tech_ && this.player_.tech_.el_ && this.player_.muted(this.player_.tech_.el_.muted), 0 === e || this.player_.muted() ? t = 0 : e < .33 ? t = 1 : e < .67 && (t = 2);for (var i = 0; i < 4; i++) {
        U(this.el_, "vjs-vol-" + i);
      }I(this.el_, "vjs-vol-" + t);
    }, t.updateControlText_ = function () {
      var e = this.player_.muted() || 0 === this.player_.volume() ? "Unmute" : "Mute";this.controlText() !== e && this.controlText(e);
    }, e;
  }(Yi);Tn.prototype.controlText_ = "Mute", je.registerComponent("MuteToggle", Tn);var Sn = function (n) {
    function e(e, t) {
      var i;return void 0 === t && (t = {}), "undefined" != typeof t.inline ? t.inline = t.inline : t.inline = !0, ("undefined" == typeof t.volumeControl || l(t.volumeControl)) && (t.volumeControl = t.volumeControl || {}, t.volumeControl.vertical = !t.inline), (i = n.call(this, e, t) || this).on(e, ["loadstart"], i.volumePanelState_), i.on(i.volumeControl, ["slideractive"], i.sliderActive_), i.on(i.volumeControl, ["sliderinactive"], i.sliderInactive_), i;
    }p(e, n);var t = e.prototype;return t.sliderActive_ = function () {
      this.addClass("vjs-slider-active");
    }, t.sliderInactive_ = function () {
      this.removeClass("vjs-slider-active");
    }, t.volumePanelState_ = function () {
      this.volumeControl.hasClass("vjs-hidden") && this.muteToggle.hasClass("vjs-hidden") && this.addClass("vjs-hidden"), this.volumeControl.hasClass("vjs-hidden") && !this.muteToggle.hasClass("vjs-hidden") && this.addClass("vjs-mute-toggle-only");
    }, t.createEl = function () {
      var e = "vjs-volume-panel-horizontal";return this.options_.inline || (e = "vjs-volume-panel-vertical"), n.prototype.createEl.call(this, "div", { className: "vjs-volume-panel vjs-control " + e });
    }, e;
  }(je);Sn.prototype.options_ = { children: ["muteToggle", "volumeControl"] }, je.registerComponent("VolumePanel", Sn);var kn = function (n) {
    function e(e, t) {
      var i;return i = n.call(this, e, t) || this, t && (i.menuButton_ = t.menuButton), i.focusedChild_ = -1, i.on("keydown", i.handleKeyPress), i.boundHandleBlur_ = ke(f(f(i)), i.handleBlur), i.boundHandleTapClick_ = ke(f(f(i)), i.handleTapClick), i;
    }p(e, n);var t = e.prototype;return t.addEventListenerForItem = function (e) {
      e instanceof je && (this.on(e, "blur", this.boundHandleBlur_), this.on(e, ["tap", "click"], this.boundHandleTapClick_));
    }, t.removeEventListenerForItem = function (e) {
      e instanceof je && (this.off(e, "blur", this.boundHandleBlur_), this.off(e, ["tap", "click"], this.boundHandleTapClick_));
    }, t.removeChild = function (e) {
      "string" == typeof e && (e = this.getChild(e)), this.removeEventListenerForItem(e), n.prototype.removeChild.call(this, e);
    }, t.addItem = function (e) {
      var t = this.addChild(e);t && this.addEventListenerForItem(t);
    }, t.createEl = function () {
      var e = this.options_.contentElType || "ul";this.contentEl_ = A(e, { className: "vjs-menu-content" }), this.contentEl_.setAttribute("role", "menu");var t = n.prototype.createEl.call(this, "div", { append: this.contentEl_, className: "vjs-menu" });return t.appendChild(this.contentEl_), de(t, "click", function (e) {
        e.preventDefault(), e.stopImmediatePropagation();
      }), t;
    }, t.dispose = function () {
      this.contentEl_ = null, this.boundHandleBlur_ = null, this.boundHandleTapClick_ = null, n.prototype.dispose.call(this);
    }, t.handleBlur = function (e) {
      var t = e.relatedTarget || d.activeElement;if (!this.children().some(function (e) {
        return e.el() === t;
      })) {
        var i = this.menuButton_;i && i.buttonPressed_ && t !== i.el().firstChild && i.unpressButton();
      }
    }, t.handleTapClick = function (t) {
      if (this.menuButton_) {
        this.menuButton_.unpressButton();var e = this.children();if (!Array.isArray(e)) return;var i = e.filter(function (e) {
          return e.el() === t.target;
        })[0];if (!i) return;"CaptionSettingsMenuItem" !== i.name() && this.menuButton_.focus();
      }
    }, t.handleKeyPress = function (e) {
      Ot.isEventKey(e, "Left") || Ot.isEventKey(e, "Down") ? (e.preventDefault(), this.stepForward()) : (Ot.isEventKey(e, "Right") || Ot.isEventKey(e, "Up")) && (e.preventDefault(), this.stepBack());
    }, t.stepForward = function () {
      var e = 0;void 0 !== this.focusedChild_ && (e = this.focusedChild_ + 1), this.focus(e);
    }, t.stepBack = function () {
      var e = 0;void 0 !== this.focusedChild_ && (e = this.focusedChild_ - 1), this.focus(e);
    }, t.focus = function (e) {
      void 0 === e && (e = 0);var t = this.children().slice();t.length && t[0].className && /vjs-menu-title/.test(t[0].className) && t.shift(), 0 < t.length && (e < 0 ? e = 0 : e >= t.length && (e = t.length - 1), t[this.focusedChild_ = e].el_.focus());
    }, e;
  }(je);je.registerComponent("Menu", kn);var Cn = function (r) {
    function e(e, t) {
      var i;void 0 === t && (t = {}), (i = r.call(this, e, t) || this).menuButton_ = new Yi(e, t), i.menuButton_.controlText(i.controlText_), i.menuButton_.el_.setAttribute("aria-haspopup", "true");var n = Yi.prototype.buildCSSClass();return i.menuButton_.el_.className = i.buildCSSClass() + " " + n, i.menuButton_.removeClass("vjs-control"), i.addChild(i.menuButton_), i.update(), i.enabled_ = !0, i.on(i.menuButton_, "tap", i.handleClick), i.on(i.menuButton_, "click", i.handleClick), i.on(i.menuButton_, "focus", i.handleFocus), i.on(i.menuButton_, "blur", i.handleBlur), i.on(i.menuButton_, "mouseenter", function () {
        i.menu.show();
      }), i.on("keydown", i.handleSubmenuKeyPress), i;
    }p(e, r);var t = e.prototype;return t.update = function () {
      var e = this.createMenu();this.menu && (this.menu.dispose(), this.removeChild(this.menu)), this.menu = e, this.addChild(e), this.buttonPressed_ = !1, this.menuButton_.el_.setAttribute("aria-expanded", "false"), this.items && this.items.length <= this.hideThreshold_ ? this.hide() : this.show();
    }, t.createMenu = function () {
      var e = new kn(this.player_, { menuButton: this });if (this.hideThreshold_ = 0, this.options_.title) {
        var t = A("li", { className: "vjs-menu-title", innerHTML: Be(this.options_.title), tabIndex: -1 });this.hideThreshold_ += 1;var i = new je(this.player_, { el: t });e.addItem(i);
      }if (this.items = this.createItems(), this.items) for (var n = 0; n < this.items.length; n++) {
        e.addItem(this.items[n]);
      }return e;
    }, t.createItems = function () {}, t.createEl = function () {
      return r.prototype.createEl.call(this, "div", { className: this.buildWrapperCSSClass() }, {});
    }, t.buildWrapperCSSClass = function () {
      var e = "vjs-menu-button";return !0 === this.options_.inline ? e += "-inline" : e += "-popup", "vjs-menu-button " + e + " " + Yi.prototype.buildCSSClass() + " " + r.prototype.buildCSSClass.call(this);
    }, t.buildCSSClass = function () {
      var e = "vjs-menu-button";return !0 === this.options_.inline ? e += "-inline" : e += "-popup", "vjs-menu-button " + e + " " + r.prototype.buildCSSClass.call(this);
    }, t.controlText = function (e, t) {
      return void 0 === t && (t = this.menuButton_.el()), this.menuButton_.controlText(e, t);
    }, t.handleClick = function (e) {
      this.buttonPressed_ ? this.unpressButton() : this.pressButton();
    }, t.focus = function () {
      this.menuButton_.focus();
    }, t.blur = function () {
      this.menuButton_.blur();
    }, t.handleFocus = function () {
      de(d, "keydown", ke(this, this.handleKeyPress));
    }, t.handleBlur = function () {
      he(d, "keydown", ke(this, this.handleKeyPress));
    }, t.handleKeyPress = function (e) {
      Ot.isEventKey(e, "Esc") || Ot.isEventKey(e, "Tab") ? (this.buttonPressed_ && this.unpressButton(), Ot.isEventKey(e, "Tab") || (e.preventDefault(), this.menuButton_.focus())) : (Ot.isEventKey(e, "Up") || Ot.isEventKey(e, "Down")) && (this.buttonPressed_ || (e.preventDefault(), this.pressButton()));
    }, t.handleSubmenuKeyPress = function (e) {
      (Ot.isEventKey(e, "Esc") || Ot.isEventKey(e, "Tab")) && (this.buttonPressed_ && this.unpressButton(), Ot.isEventKey(e, "Tab") || (e.preventDefault(), this.menuButton_.focus()));
    }, t.pressButton = function () {
      if (this.enabled_) {
        if (this.buttonPressed_ = !0, this.menu.show(), this.menu.lockShowing(), this.menuButton_.el_.setAttribute("aria-expanded", "true"), $e && w()) return;this.menu.focus();
      }
    }, t.unpressButton = function () {
      this.enabled_ && (this.buttonPressed_ = !1, this.menu.unlockShowing(), this.menu.hide(), this.menuButton_.el_.setAttribute("aria-expanded", "false"));
    }, t.disable = function () {
      this.unpressButton(), this.enabled_ = !1, this.addClass("vjs-disabled"), this.menuButton_.disable();
    }, t.enable = function () {
      this.enabled_ = !0, this.removeClass("vjs-disabled"), this.menuButton_.enable();
    }, e;
  }(je);je.registerComponent("MenuButton", Cn);var wn = function (a) {
    function e(e, t) {
      var i,
          n = t.tracks;if ((i = a.call(this, e, t) || this).items.length <= 1 && i.hide(), !n) return f(i);var r = ke(f(f(i)), i.update);return n.addEventListener("removetrack", r), n.addEventListener("addtrack", r), i.player_.on("ready", r), i.player_.on("dispose", function () {
        n.removeEventListener("removetrack", r), n.removeEventListener("addtrack", r);
      }), i;
    }return p(e, a), e;
  }(Cn);je.registerComponent("TrackButton", wn);var En = ["Tab", "Esc", "Up", "Down", "Right", "Left"],
      An = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).selectable = t.selectable, i.isSelected_ = t.selected || !1, i.multiSelectable = t.multiSelectable, i.selected(i.isSelected_), i.selectable ? i.multiSelectable ? i.el_.setAttribute("role", "menuitemcheckbox") : i.el_.setAttribute("role", "menuitemradio") : i.el_.setAttribute("role", "menuitem"), i;
    }p(e, n);var t = e.prototype;return t.createEl = function (e, t, i) {
      return this.nonIconControl = !0, n.prototype.createEl.call(this, "li", _({ className: "vjs-menu-item", innerHTML: '<span class="vjs-menu-item-text">' + this.localize(this.options_.label) + "</span>", tabIndex: -1 }, t), i);
    }, t.handleKeyPress = function (t) {
      En.some(function (e) {
        return Ot.isEventKey(t, e);
      }) || n.prototype.handleKeyPress.call(this, t);
    }, t.handleClick = function (e) {
      this.selected(!0);
    }, t.selected = function (e) {
      this.selectable && (this.isSelected_ = e ? (this.addClass("vjs-selected"), this.el_.setAttribute("aria-checked", "true"), this.controlText(", selected"), !0) : (this.removeClass("vjs-selected"), this.el_.setAttribute("aria-checked", "false"), this.controlText(""), !1));
    }, e;
  }(Hi);je.registerComponent("MenuItem", An);var Ln = function (u) {
    function e(e, t) {
      var n,
          i = t.track,
          r = e.textTracks();t.label = i.label || i.language || "Unknown", t.selected = "showing" === i.mode, (n = u.call(this, e, t) || this).track = i;var a,
          s = function s() {
        for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
          t[i] = arguments[i];
        }n.handleTracksChange.apply(f(f(n)), t);
      },
          o = function o() {
        for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
          t[i] = arguments[i];
        }n.handleSelectedLanguageChange.apply(f(f(n)), t);
      };(e.on(["loadstart", "texttrackchange"], s), r.addEventListener("change", s), r.addEventListener("selectedlanguagechange", o), n.on("dispose", function () {
        e.off(["loadstart", "texttrackchange"], s), r.removeEventListener("change", s), r.removeEventListener("selectedlanguagechange", o);
      }), void 0 === r.onchange) && n.on(["tap", "click"], function () {
        if ("object" != _typeof(v.Event)) try {
          a = new v.Event("change");
        } catch (e) {}a || (a = d.createEvent("Event")).initEvent("change", !0, !0), r.dispatchEvent(a);
      });return n.handleTracksChange(), n;
    }p(e, u);var t = e.prototype;return t.handleClick = function (e) {
      var t = this.track,
          i = this.player_.textTracks();if (u.prototype.handleClick.call(this, e), i) for (var n = (t.kinds || [t.kind]).filter(Boolean), r = 0; r < i.length; r++) {
        var a = i[r];-1 !== n.indexOf(a.kind) && (a === t ? "showing" !== a.mode && (a.mode = "showing") : "disabled" !== a.mode && (a.mode = "disabled"));
      }
    }, t.handleTracksChange = function (e) {
      var t = "showing" === this.track.mode;t !== this.isSelected_ && this.selected(t);
    }, t.handleSelectedLanguageChange = function (e) {
      if ("showing" === this.track.mode) {
        var t = this.player_.cache_.selectedLanguage;if (t && t.enabled && t.language === this.track.language && t.kind !== this.track.kind) return;this.player_.cache_.selectedLanguage = { enabled: !0, language: this.track.language, kind: this.track.kind };
      }
    }, t.dispose = function () {
      this.track = null, u.prototype.dispose.call(this);
    }, e;
  }(An);je.registerComponent("TextTrackMenuItem", Ln);var Pn = function (i) {
    function e(e, t) {
      return t.track = { player: e, kind: t.kind, kinds: t.kinds, default: !1, mode: "disabled" }, t.kinds || (t.kinds = [t.kind]), t.label ? t.track.label = t.label : t.track.label = t.kinds.join(" and ") + " off", t.selectable = !0, t.multiSelectable = !1, i.call(this, e, t) || this;
    }p(e, i);var t = e.prototype;return t.handleTracksChange = function (e) {
      for (var t = this.player().textTracks(), i = !0, n = 0, r = t.length; n < r; n++) {
        var a = t[n];if (-1 < this.options_.kinds.indexOf(a.kind) && "showing" === a.mode) {
          i = !1;break;
        }
      }i !== this.isSelected_ && this.selected(i);
    }, t.handleSelectedLanguageChange = function (e) {
      for (var t = this.player().textTracks(), i = !0, n = 0, r = t.length; n < r; n++) {
        var a = t[n];if (-1 < ["captions", "descriptions", "subtitles"].indexOf(a.kind) && "showing" === a.mode) {
          i = !1;break;
        }
      }i && (this.player_.cache_.selectedLanguage = { enabled: !1 });
    }, e;
  }(Ln);je.registerComponent("OffTextTrackMenuItem", Pn);var On = function (i) {
    function e(e, t) {
      return void 0 === t && (t = {}), t.tracks = e.textTracks(), i.call(this, e, t) || this;
    }return p(e, i), e.prototype.createItems = function (e, t) {
      var i;void 0 === e && (e = []), void 0 === t && (t = Ln), this.label_ && (i = this.label_ + " off"), e.push(new Pn(this.player_, { kinds: this.kinds_, kind: this.kind_, label: i })), this.hideThreshold_ += 1;var n = this.player_.textTracks();Array.isArray(this.kinds_) || (this.kinds_ = [this.kind_]);for (var r = 0; r < n.length; r++) {
        var a = n[r];if (-1 < this.kinds_.indexOf(a.kind)) {
          var s = new t(this.player_, { track: a, selectable: !0, multiSelectable: !1 });s.addClass("vjs-" + a.kind + "-menu-item"), e.push(s);
        }
      }return e;
    }, e;
  }(wn);je.registerComponent("TextTrackButton", On);var In = function (s) {
    function e(e, t) {
      var i,
          n = t.track,
          r = t.cue,
          a = e.currentTime();return t.selectable = !0, t.multiSelectable = !1, t.label = r.text, t.selected = r.startTime <= a && a < r.endTime, (i = s.call(this, e, t) || this).track = n, i.cue = r, n.addEventListener("cuechange", ke(f(f(i)), i.update)), i;
    }p(e, s);var t = e.prototype;return t.handleClick = function (e) {
      s.prototype.handleClick.call(this), this.player_.currentTime(this.cue.startTime), this.update(this.cue.startTime);
    }, t.update = function (e) {
      var t = this.cue,
          i = this.player_.currentTime();this.selected(t.startTime <= i && i < t.endTime);
    }, e;
  }(An);je.registerComponent("ChaptersTrackMenuItem", In);var Un = function (n) {
    function e(e, t, i) {
      return n.call(this, e, t, i) || this;
    }p(e, n);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-chapters-button " + n.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-chapters-button " + n.prototype.buildWrapperCSSClass.call(this);
    }, t.update = function (e) {
      this.track_ && (!e || "addtrack" !== e.type && "removetrack" !== e.type) || this.setTrack(this.findChaptersTrack()), n.prototype.update.call(this);
    }, t.setTrack = function (e) {
      if (this.track_ !== e) {
        if (this.updateHandler_ || (this.updateHandler_ = this.update.bind(this)), this.track_) {
          var t = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);t && t.removeEventListener("load", this.updateHandler_), this.track_ = null;
        }if (this.track_ = e, this.track_) {
          this.track_.mode = "hidden";var i = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);i && i.addEventListener("load", this.updateHandler_);
        }
      }
    }, t.findChaptersTrack = function () {
      for (var e = this.player_.textTracks() || [], t = e.length - 1; 0 <= t; t--) {
        var i = e[t];if (i.kind === this.kind_) return i;
      }
    }, t.getMenuCaption = function () {
      return this.track_ && this.track_.label ? this.track_.label : this.localize(Be(this.kind_));
    }, t.createMenu = function () {
      return this.options_.title = this.getMenuCaption(), n.prototype.createMenu.call(this);
    }, t.createItems = function () {
      var e = [];if (!this.track_) return e;var t = this.track_.cues;if (!t) return e;for (var i = 0, n = t.length; i < n; i++) {
        var r = t[i],
            a = new In(this.player_, { track: this.track_, cue: r });e.push(a);
      }return e;
    }, e;
  }(On);Un.prototype.kind_ = "chapters", Un.prototype.controlText_ = "Chapters", je.registerComponent("ChaptersButton", Un);var Dn = function (s) {
    function e(e, t, i) {
      var n;n = s.call(this, e, t, i) || this;var r = e.textTracks(),
          a = ke(f(f(n)), n.handleTracksChange);return r.addEventListener("change", a), n.on("dispose", function () {
        r.removeEventListener("change", a);
      }), n;
    }p(e, s);var t = e.prototype;return t.handleTracksChange = function (e) {
      for (var t = this.player().textTracks(), i = !1, n = 0, r = t.length; n < r; n++) {
        var a = t[n];if (a.kind !== this.kind_ && "showing" === a.mode) {
          i = !0;break;
        }
      }i ? this.disable() : this.enable();
    }, t.buildCSSClass = function () {
      return "vjs-descriptions-button " + s.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-descriptions-button " + s.prototype.buildWrapperCSSClass.call(this);
    }, e;
  }(On);Dn.prototype.kind_ = "descriptions", Dn.prototype.controlText_ = "Descriptions", je.registerComponent("DescriptionsButton", Dn);var xn = function (n) {
    function e(e, t, i) {
      return n.call(this, e, t, i) || this;
    }p(e, n);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-subtitles-button " + n.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-subtitles-button " + n.prototype.buildWrapperCSSClass.call(this);
    }, e;
  }(On);xn.prototype.kind_ = "subtitles", xn.prototype.controlText_ = "Subtitles", je.registerComponent("SubtitlesButton", xn);var Rn = function (n) {
    function e(e, t) {
      var i;return t.track = { player: e, kind: t.kind, label: t.kind + " settings", selectable: !1, default: !1, mode: "disabled" }, t.selectable = !1, t.name = "CaptionSettingsMenuItem", (i = n.call(this, e, t) || this).addClass("vjs-texttrack-settings"), i.controlText(", opens " + t.kind + " settings dialog"), i;
    }return p(e, n), e.prototype.handleClick = function (e) {
      this.player().getChild("textTrackSettings").open();
    }, e;
  }(Ln);je.registerComponent("CaptionSettingsMenuItem", Rn);var Mn = function (n) {
    function e(e, t, i) {
      return n.call(this, e, t, i) || this;
    }p(e, n);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-captions-button " + n.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-captions-button " + n.prototype.buildWrapperCSSClass.call(this);
    }, t.createItems = function () {
      var e = [];return this.player().tech_ && this.player().tech_.featuresNativeTextTracks || !this.player().getChild("textTrackSettings") || (e.push(new Rn(this.player_, { kind: this.kind_ })), this.hideThreshold_ += 1), n.prototype.createItems.call(this, e);
    }, e;
  }(On);Mn.prototype.kind_ = "captions", Mn.prototype.controlText_ = "Captions", je.registerComponent("CaptionsButton", Mn);var Bn = function (r) {
    function e() {
      return r.apply(this, arguments) || this;
    }return p(e, r), e.prototype.createEl = function (e, t, i) {
      var n = '<span class="vjs-menu-item-text">' + this.localize(this.options_.label);return "captions" === this.options_.track.kind && (n += '\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> ' + this.localize("Captions") + "</span>\n      "), n += "</span>", r.prototype.createEl.call(this, e, _({ innerHTML: n }, t), i);
    }, e;
  }(Ln);je.registerComponent("SubsCapsMenuItem", Bn);var Nn = function (n) {
    function e(e, t) {
      var i;return void 0 === t && (t = {}), (i = n.call(this, e, t) || this).label_ = "subtitles", -1 < ["en", "en-us", "en-ca", "fr-ca"].indexOf(i.player_.language_) && (i.label_ = "captions"), i.menuButton_.controlText(Be(i.label_)), i;
    }p(e, n);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-subs-caps-button " + n.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-subs-caps-button " + n.prototype.buildWrapperCSSClass.call(this);
    }, t.createItems = function () {
      var e = [];return this.player().tech_ && this.player().tech_.featuresNativeTextTracks || !this.player().getChild("textTrackSettings") || (e.push(new Rn(this.player_, { kind: this.label_ })), this.hideThreshold_ += 1), e = n.prototype.createItems.call(this, e, Bn);
    }, e;
  }(On);Nn.prototype.kinds_ = ["captions", "subtitles"], Nn.prototype.controlText_ = "Subtitles", je.registerComponent("SubsCapsButton", Nn);var jn = function (s) {
    function e(e, t) {
      var n,
          i = t.track,
          r = e.audioTracks();t.label = i.label || i.language || "Unknown", t.selected = i.enabled, (n = s.call(this, e, t) || this).track = i, n.addClass("vjs-" + i.kind + "-menu-item");var a = function a() {
        for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
          t[i] = arguments[i];
        }n.handleTracksChange.apply(f(f(n)), t);
      };return r.addEventListener("change", a), n.on("dispose", function () {
        r.removeEventListener("change", a);
      }), n;
    }p(e, s);var t = e.prototype;return t.createEl = function (e, t, i) {
      var n = '<span class="vjs-menu-item-text">' + this.localize(this.options_.label);return "main-desc" === this.options_.track.kind && (n += '\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> ' + this.localize("Descriptions") + "</span>\n      "), n += "</span>", s.prototype.createEl.call(this, e, _({ innerHTML: n }, t), i);
    }, t.handleClick = function (e) {
      var t = this.player_.audioTracks();s.prototype.handleClick.call(this, e);for (var i = 0; i < t.length; i++) {
        var n = t[i];n.enabled = n === this.track;
      }
    }, t.handleTracksChange = function (e) {
      this.selected(this.track.enabled);
    }, e;
  }(An);je.registerComponent("AudioTrackMenuItem", jn);var Fn = function (i) {
    function e(e, t) {
      return void 0 === t && (t = {}), t.tracks = e.audioTracks(), i.call(this, e, t) || this;
    }p(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-audio-button " + i.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-audio-button " + i.prototype.buildWrapperCSSClass.call(this);
    }, t.createItems = function (e) {
      void 0 === e && (e = []), this.hideThreshold_ = 1;for (var t = this.player_.audioTracks(), i = 0; i < t.length; i++) {
        var n = t[i];e.push(new jn(this.player_, { track: n, selectable: !0, multiSelectable: !1 }));
      }return e;
    }, e;
  }(wn);Fn.prototype.controlText_ = "Audio Track", je.registerComponent("AudioTrackButton", Fn);var Hn = function (a) {
    function e(e, t) {
      var i,
          n = t.rate,
          r = parseFloat(n, 10);return t.label = n, t.selected = 1 === r, t.selectable = !0, t.multiSelectable = !1, (i = a.call(this, e, t) || this).label = n, i.rate = r, i.on(e, "ratechange", i.update), i;
    }p(e, a);var t = e.prototype;return t.handleClick = function (e) {
      a.prototype.handleClick.call(this), this.player().playbackRate(this.rate);
    }, t.update = function (e) {
      this.selected(this.player().playbackRate() === this.rate);
    }, e;
  }(An);Hn.prototype.contentElType = "button", je.registerComponent("PlaybackRateMenuItem", Hn);var Vn = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).updateVisibility(), i.updateLabel(), i.on(e, "loadstart", i.updateVisibility), i.on(e, "ratechange", i.updateLabel), i;
    }p(e, n);var t = e.prototype;return t.createEl = function () {
      var e = n.prototype.createEl.call(this);return this.labelEl_ = A("div", { className: "vjs-playback-rate-value", innerHTML: "1x" }), e.appendChild(this.labelEl_), e;
    }, t.dispose = function () {
      this.labelEl_ = null, n.prototype.dispose.call(this);
    }, t.buildCSSClass = function () {
      return "vjs-playback-rate " + n.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-playback-rate " + n.prototype.buildWrapperCSSClass.call(this);
    }, t.createMenu = function () {
      var e = new kn(this.player()),
          t = this.playbackRates();if (t) for (var i = t.length - 1; 0 <= i; i--) {
        e.addChild(new Hn(this.player(), { rate: t[i] + "x" }));
      }return e;
    }, t.updateARIAAttributes = function () {
      this.el().setAttribute("aria-valuenow", this.player().playbackRate());
    }, t.handleClick = function (e) {
      for (var t = this.player().playbackRate(), i = this.playbackRates(), n = i[0], r = 0; r < i.length; r++) {
        if (i[r] > t) {
          n = i[r];break;
        }
      }this.player().playbackRate(n);
    }, t.playbackRates = function () {
      return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;
    }, t.playbackRateSupported = function () {
      return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && 0 < this.playbackRates().length;
    }, t.updateVisibility = function (e) {
      this.playbackRateSupported() ? this.removeClass("vjs-hidden") : this.addClass("vjs-hidden");
    }, t.updateLabel = function (e) {
      this.playbackRateSupported() && (this.labelEl_.innerHTML = this.player().playbackRate() + "x");
    }, e;
  }(Cn);Vn.prototype.controlText_ = "Playback Rate", je.registerComponent("PlaybackRateMenuButton", Vn);var qn = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }p(t, e);var i = t.prototype;return i.buildCSSClass = function () {
      return "vjs-spacer " + e.prototype.buildCSSClass.call(this);
    }, i.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: this.buildCSSClass() });
    }, t;
  }(je);je.registerComponent("Spacer", qn);var zn = function (t) {
    function e() {
      return t.apply(this, arguments) || this;
    }p(e, t);var i = e.prototype;return i.buildCSSClass = function () {
      return "vjs-custom-control-spacer " + t.prototype.buildCSSClass.call(this);
    }, i.createEl = function () {
      var e = t.prototype.createEl.call(this, { className: this.buildCSSClass() });return e.innerHTML = " ", e;
    }, e;
  }(qn);je.registerComponent("CustomControlSpacer", zn);var Wn = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }return p(t, e), t.prototype.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: "vjs-control-bar", dir: "ltr" });
    }, t;
  }(je);Wn.prototype.options_ = { children: ["playToggle", "volumePanel", "currentTimeDisplay", "timeDivider", "durationDisplay", "progressControl", "liveDisplay", "seekToLive", "remainingTimeDisplay", "customControlSpacer", "playbackRateMenuButton", "chaptersButton", "descriptionsButton", "subsCapsButton", "audioTrackButton", "fullscreenToggle"] }, je.registerComponent("ControlBar", Wn);var Gn = function (n) {
    function e(e, t) {
      var i;return (i = n.call(this, e, t) || this).on(e, "error", i.open), i;
    }p(e, n);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-error-display " + n.prototype.buildCSSClass.call(this);
    }, t.content = function () {
      var e = this.player().error();return e ? this.localize(e.message) : "";
    }, e;
  }(Ut);Gn.prototype.options_ = Ne(Ut.prototype.options_, { pauseOnOpen: !1, fillAlways: !0, temporary: !1, uncloseable: !0 }), je.registerComponent("ErrorDisplay", Gn);var Xn = "vjs-text-track-settings",
      Kn = ["#000", "Black"],
      Yn = ["#00F", "Blue"],
      $n = ["#0FF", "Cyan"],
      Qn = ["#0F0", "Green"],
      Jn = ["#F0F", "Magenta"],
      Zn = ["#F00", "Red"],
      er = ["#FFF", "White"],
      tr = ["#FF0", "Yellow"],
      ir = ["1", "Opaque"],
      nr = ["0.5", "Semi-Transparent"],
      rr = ["0", "Transparent"],
      ar = { backgroundColor: { selector: ".vjs-bg-color > select", id: "captions-background-color-%s", label: "Color", options: [Kn, er, Zn, Qn, Yn, tr, Jn, $n] }, backgroundOpacity: { selector: ".vjs-bg-opacity > select", id: "captions-background-opacity-%s", label: "Transparency", options: [ir, nr, rr] }, color: { selector: ".vjs-fg-color > select", id: "captions-foreground-color-%s", label: "Color", options: [er, Kn, Zn, Qn, Yn, tr, Jn, $n] }, edgeStyle: { selector: ".vjs-edge-style > select", id: "%s", label: "Text Edge Style", options: [["none", "None"], ["raised", "Raised"], ["depressed", "Depressed"], ["uniform", "Uniform"], ["dropshadow", "Dropshadow"]] }, fontFamily: { selector: ".vjs-font-family > select", id: "captions-font-family-%s", label: "Font Family", options: [["proportionalSansSerif", "Proportional Sans-Serif"], ["monospaceSansSerif", "Monospace Sans-Serif"], ["proportionalSerif", "Proportional Serif"], ["monospaceSerif", "Monospace Serif"], ["casual", "Casual"], ["script", "Script"], ["small-caps", "Small Caps"]] }, fontPercent: { selector: ".vjs-font-percent > select", id: "captions-font-size-%s", label: "Font Size", options: [["0.50", "50%"], ["0.75", "75%"], ["1.00", "100%"], ["1.25", "125%"], ["1.50", "150%"], ["1.75", "175%"], ["2.00", "200%"], ["3.00", "300%"], ["4.00", "400%"]], default: 2, parser: function parser(e) {
        return "1.00" === e ? null : Number(e);
      } }, textOpacity: { selector: ".vjs-text-opacity > select", id: "captions-foreground-opacity-%s", label: "Transparency", options: [ir, nr] }, windowColor: { selector: ".vjs-window-color > select", id: "captions-window-color-%s", label: "Color" }, windowOpacity: { selector: ".vjs-window-opacity > select", id: "captions-window-opacity-%s", label: "Transparency", options: [rr, nr, ir] } };function sr(e, t) {
    if (t && (e = t(e)), e && "none" !== e) return e;
  }ar.windowColor.options = ar.backgroundColor.options;var or = function (n) {
    function e(e, t) {
      var i;return t.temporary = !1, (i = n.call(this, e, t) || this).updateDisplay = ke(f(f(i)), i.updateDisplay), i.fill(), i.hasBeenOpened_ = i.hasBeenFilled_ = !0, i.endDialog = A("p", { className: "vjs-control-text", textContent: i.localize("End of dialog window.") }), i.el().appendChild(i.endDialog), i.setDefaults(), void 0 === t.persistTextTrackSettings && (i.options_.persistTextTrackSettings = i.options_.playerOptions.persistTextTrackSettings), i.on(i.$(".vjs-done-button"), "click", function () {
        i.saveSettings(), i.close();
      }), i.on(i.$(".vjs-default-button"), "click", function () {
        i.setDefaults(), i.updateDisplay();
      }), o(ar, function (e) {
        i.on(i.$(e.selector), "change", i.updateDisplay);
      }), i.options_.persistTextTrackSettings && i.restoreSettings(), i;
    }p(e, n);var t = e.prototype;return t.dispose = function () {
      this.endDialog = null, n.prototype.dispose.call(this);
    }, t.createElSelect_ = function (e, t, i) {
      var n = this;void 0 === t && (t = ""), void 0 === i && (i = "label");var r = ar[e],
          a = r.id.replace("%s", this.id_),
          s = [t, a].join(" ").trim();return ["<" + i + ' id="' + a + '" class="' + ("label" === i ? "vjs-label" : "") + '">', this.localize(r.label), "</" + i + ">", '<select aria-labelledby="' + s + '">'].concat(r.options.map(function (e) {
        var t = a + "-" + e[1].replace(/\W+/g, "");return ['<option id="' + t + '" value="' + e[0] + '" ', 'aria-labelledby="' + s + " " + t + '">', n.localize(e[1]), "</option>"].join("");
      })).concat("</select>").join("");
    }, t.createElFgColor_ = function () {
      var e = "captions-text-legend-" + this.id_;return ['<fieldset class="vjs-fg-color vjs-track-setting">', '<legend id="' + e + '">', this.localize("Text"), "</legend>", this.createElSelect_("color", e), '<span class="vjs-text-opacity vjs-opacity">', this.createElSelect_("textOpacity", e), "</span>", "</fieldset>"].join("");
    }, t.createElBgColor_ = function () {
      var e = "captions-background-" + this.id_;return ['<fieldset class="vjs-bg-color vjs-track-setting">', '<legend id="' + e + '">', this.localize("Background"), "</legend>", this.createElSelect_("backgroundColor", e), '<span class="vjs-bg-opacity vjs-opacity">', this.createElSelect_("backgroundOpacity", e), "</span>", "</fieldset>"].join("");
    }, t.createElWinColor_ = function () {
      var e = "captions-window-" + this.id_;return ['<fieldset class="vjs-window-color vjs-track-setting">', '<legend id="' + e + '">', this.localize("Window"), "</legend>", this.createElSelect_("windowColor", e), '<span class="vjs-window-opacity vjs-opacity">', this.createElSelect_("windowOpacity", e), "</span>", "</fieldset>"].join("");
    }, t.createElColors_ = function () {
      return A("div", { className: "vjs-track-settings-colors", innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join("") });
    }, t.createElFont_ = function () {
      return A("div", { className: "vjs-track-settings-font", innerHTML: ['<fieldset class="vjs-font-percent vjs-track-setting">', this.createElSelect_("fontPercent", "", "legend"), "</fieldset>", '<fieldset class="vjs-edge-style vjs-track-setting">', this.createElSelect_("edgeStyle", "", "legend"), "</fieldset>", '<fieldset class="vjs-font-family vjs-track-setting">', this.createElSelect_("fontFamily", "", "legend"), "</fieldset>"].join("") });
    }, t.createElControls_ = function () {
      var e = this.localize("restore all settings to the default values");return A("div", { className: "vjs-track-settings-controls", innerHTML: ['<button type="button" class="vjs-default-button" title="' + e + '">', this.localize("Reset"), '<span class="vjs-control-text"> ' + e + "</span>", "</button>", '<button type="button" class="vjs-done-button">' + this.localize("Done") + "</button>"].join("") });
    }, t.content = function () {
      return [this.createElColors_(), this.createElFont_(), this.createElControls_()];
    }, t.label = function () {
      return this.localize("Caption Settings Dialog");
    }, t.description = function () {
      return this.localize("Beginning of dialog window. Escape will cancel and close the window.");
    }, t.buildCSSClass = function () {
      return n.prototype.buildCSSClass.call(this) + " vjs-text-track-settings";
    }, t.getValues = function () {
      var i,
          n,
          e,
          s = this;return n = function n(e, t, i) {
        var n,
            r,
            a = (n = s.$(t.selector), r = t.parser, sr(n.options[n.options.selectedIndex].value, r));return void 0 !== a && (e[i] = a), e;
      }, void 0 === (e = {}) && (e = 0), r(i = ar).reduce(function (e, t) {
        return n(e, i[t], t);
      }, e);
    }, t.setValues = function (i) {
      var n = this;o(ar, function (e, t) {
        !function (e, t, i) {
          if (t) for (var n = 0; n < e.options.length; n++) {
            if (sr(e.options[n].value, i) === t) {
              e.selectedIndex = n;break;
            }
          }
        }(n.$(e.selector), i[t], e.parser);
      });
    }, t.setDefaults = function () {
      var i = this;o(ar, function (e) {
        var t = e.hasOwnProperty("default") ? e.default : 0;i.$(e.selector).selectedIndex = t;
      });
    }, t.restoreSettings = function () {
      var e;try {
        e = JSON.parse(v.localStorage.getItem(Xn));
      } catch (e) {
        m.warn(e);
      }e && this.setValues(e);
    }, t.saveSettings = function () {
      if (this.options_.persistTextTrackSettings) {
        var e = this.getValues();try {
          Object.keys(e).length ? v.localStorage.setItem(Xn, JSON.stringify(e)) : v.localStorage.removeItem(Xn);
        } catch (e) {
          m.warn(e);
        }
      }
    }, t.updateDisplay = function () {
      var e = this.player_.getChild("textTrackDisplay");e && e.updateDisplay();
    }, t.conditionalBlur_ = function () {
      this.previouslyActiveEl_ = null, this.off(d, "keydown", this.handleKeyDown);var e = this.player_.controlBar,
          t = e && e.subsCapsButton,
          i = e && e.captionsButton;t ? t.focus() : i && i.focus();
    }, e;
  }(Ut);je.registerComponent("TextTrackSettings", or);var ur = function (a) {
    function e(e, t) {
      var i,
          n = t.ResizeObserver || v.ResizeObserver;null === t.ResizeObserver && (n = !1);var r = Ne({ createEl: !n, reportTouchActivity: !1 }, t);return (i = a.call(this, e, r) || this).ResizeObserver = t.ResizeObserver || v.ResizeObserver, i.loadListener_ = null, i.resizeObserver_ = null, i.debouncedHandler_ = function (n, r, a, s) {
        var o;void 0 === s && (s = v);var e = function e() {
          var e = this,
              t = arguments,
              _i2 = function i() {
            _i2 = o = null, a || n.apply(e, t);
          };!o && a && n.apply(e, t), s.clearTimeout(o), o = s.setTimeout(_i2, r);
        };return e.cancel = function () {
          s.clearTimeout(o), o = null;
        }, e;
      }(function () {
        i.resizeHandler();
      }, 100, !1, f(f(i))), n ? (i.resizeObserver_ = new i.ResizeObserver(i.debouncedHandler_), i.resizeObserver_.observe(e.el())) : (i.loadListener_ = function () {
        if (i.el_ && i.el_.contentWindow) {
          var e = i.debouncedHandler_,
              t = i.unloadListener_ = function () {
            he(this, "resize", e), he(this, "unload", t), t = null;
          };de(i.el_.contentWindow, "unload", t), de(i.el_.contentWindow, "resize", e);
        }
      }, i.one("load", i.loadListener_)), i;
    }p(e, a);var t = e.prototype;return t.createEl = function () {
      return a.prototype.createEl.call(this, "iframe", { className: "vjs-resize-manager", tabIndex: -1 }, { "aria-hidden": "true" });
    }, t.resizeHandler = function () {
      this.player_ && this.player_.trigger && this.player_.trigger("playerresize");
    }, t.dispose = function () {
      this.debouncedHandler_ && this.debouncedHandler_.cancel(), this.resizeObserver_ && (this.player_.el() && this.resizeObserver_.unobserve(this.player_.el()), this.resizeObserver_.disconnect()), this.loadListener_ && this.off("load", this.loadListener_), this.el_ && this.el_.contentWindow && this.unloadListener_ && this.unloadListener_.call(this.el_.contentWindow), this.ResizeObserver = null, this.resizeObserver = null, this.debouncedHandler_ = null, this.loadListener_ = null, a.prototype.dispose.call(this);
    }, e;
  }(je);je.registerComponent("ResizeManager", ur);var lr = function (r) {
    function e(e, t) {
      var i,
          n = Ne({ createEl: !1 }, t);return (i = r.call(this, e, n) || this).reset_(), i.on(i.player_, "durationchange", i.handleDurationchange), at && "hidden" in d && "visibilityState" in d && i.on(d, "visibilitychange", i.handleVisibilityChange), i;
    }p(e, r);var t = e.prototype;return t.handleVisibilityChange = function () {
      this.player_.duration() === 1 / 0 && (d.hidden ? this.stopTracking() : this.startTracking());
    }, t.isBehind_ = function () {
      if (!this.timeupdateSeen_) return !1;var e = this.liveCurrentTime(),
          t = this.player_.currentTime(),
          i = this.seekableIncrement_;return e !== 1 / 0 && t <= e - (2 * i + .07);
    }, t.trackLive_ = function () {
      this.pastSeekEnd_ = this.pastSeekEnd_;var e = this.player_.seekable();if (e && e.length) {
        var t = this.seekableEnd();t !== this.lastSeekEnd_ && (this.lastSeekEnd_ && (this.seekableIncrement_ = Math.abs(t - this.lastSeekEnd_)), this.pastSeekEnd_ = 0, this.lastSeekEnd_ = t, this.trigger("seekableendchange")), this.pastSeekEnd_ = this.pastSeekEnd() + .03, this.isBehind_() !== this.behindLiveEdge() && (this.behindLiveEdge_ = this.isBehind_(), this.trigger("liveedgechange"));
      }
    }, t.handleDurationchange = function () {
      this.player_.duration() === 1 / 0 ? this.startTracking() : this.stopTracking();
    }, t.startTracking = function () {
      var e = this;this.isTracking() || (this.trackingInterval_ = this.setInterval(this.trackLive_, 30), this.trackLive_(), this.on(this.player_, "play", this.trackLive_), this.on(this.player_, "pause", this.trackLive_), this.one(this.player_, "play", this.handlePlay), this.timeupdateSeen_ || (this.handleTimeupdate = function () {
        e.timeupdateSeen_ = !0, e.handleTimeupdate = null;
      }, this.one(this.player_, "timeupdate", this.handleTimeupdate)));
    }, t.handlePlay = function () {
      this.one(this.player_, "timeupdate", this.seekToLiveEdge);
    }, t.reset_ = function () {
      this.pastSeekEnd_ = 0, this.lastSeekEnd_ = null, this.behindLiveEdge_ = null, this.timeupdateSeen_ = !1, this.clearInterval(this.trackingInterval_), this.trackingInterval_ = null, this.seekableIncrement_ = 12, this.off(this.player_, "play", this.trackLive_), this.off(this.player_, "pause", this.trackLive_), this.off(this.player_, "play", this.handlePlay), this.off(this.player_, "timeupdate", this.seekToLiveEdge), this.handleTimeupdate && (this.off(this.player_, "timeupdate", this.handleTimeupdate), this.handleTimeupdate = null);
    }, t.stopTracking = function () {
      this.isTracking() && this.reset_();
    }, t.seekableEnd = function () {
      for (var e = this.player_.seekable(), t = [], i = e ? e.length : 0; i--;) {
        t.push(e.end(i));
      }return t.length ? t.sort()[t.length - 1] : 1 / 0;
    }, t.seekableStart = function () {
      for (var e = this.player_.seekable(), t = [], i = e ? e.length : 0; i--;) {
        t.push(e.start(i));
      }return t.length ? t.sort()[0] : 0;
    }, t.liveWindow = function () {
      var e = this.liveCurrentTime();return e === 1 / 0 ? 1 / 0 : e - this.seekableStart();
    }, t.isLive = function () {
      return this.isTracking();
    }, t.atLiveEdge = function () {
      return !this.behindLiveEdge();
    }, t.liveCurrentTime = function () {
      return this.pastSeekEnd() + this.seekableEnd();
    }, t.pastSeekEnd = function () {
      return this.pastSeekEnd_;
    }, t.behindLiveEdge = function () {
      return this.behindLiveEdge_;
    }, t.isTracking = function () {
      return "number" == typeof this.trackingInterval_;
    }, t.seekToLiveEdge = function () {
      this.atLiveEdge() || (this.player_.currentTime(this.liveCurrentTime()), this.player_.paused() && this.player_.play());
    }, t.dispose = function () {
      this.stopTracking(), r.prototype.dispose.call(this);
    }, e;
  }(je);je.registerComponent("LiveTracker", lr);var cr = function cr(e) {
    var t = e.el();if (t.hasAttribute("src")) return e.triggerSourceset(t.src), !0;var i = e.$$("source"),
        n = [],
        r = "";if (!i.length) return !1;for (var a = 0; a < i.length; a++) {
      var s = i[a].src;s && -1 === n.indexOf(s) && n.push(s);
    }return !!n.length && (1 === n.length && (r = n[0]), e.triggerSourceset(r), !0);
  },
      dr = Object.defineProperty({}, "innerHTML", { get: function get() {
      return this.cloneNode(!0).innerHTML;
    }, set: function set(e) {
      var t = d.createElement(this.nodeName.toLowerCase());t.innerHTML = e;for (var i = d.createDocumentFragment(); t.childNodes.length;) {
        i.appendChild(t.childNodes[0]);
      }return this.innerText = "", v.Element.prototype.appendChild.call(this, i), this.innerHTML;
    } }),
      hr = function hr(e, t) {
    for (var i = {}, n = 0; n < e.length && !((i = Object.getOwnPropertyDescriptor(e[n], t)) && i.set && i.get); n++) {}return i.enumerable = !0, i.configurable = !0, i;
  },
      pr = function pr(a) {
    var s = a.el();if (!s.resetSourceWatch_) {
      var t = {},
          e = hr([a.el(), v.HTMLMediaElement.prototype, v.Element.prototype, dr], "innerHTML"),
          i = function i(r) {
        return function () {
          for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
            t[i] = arguments[i];
          }var n = r.apply(s, t);return cr(a), n;
        };
      };["append", "appendChild", "insertAdjacentHTML"].forEach(function (e) {
        s[e] && (t[e] = s[e], s[e] = i(t[e]));
      }), Object.defineProperty(s, "innerHTML", Ne(e, { set: i(e.set) })), s.resetSourceWatch_ = function () {
        s.resetSourceWatch_ = null, Object.keys(t).forEach(function (e) {
          s[e] = t[e];
        }), Object.defineProperty(s, "innerHTML", e);
      }, a.one("sourceset", s.resetSourceWatch_);
    }
  },
      fr = Object.defineProperty({}, "src", { get: function get() {
      return this.hasAttribute("src") ? Kt(v.Element.prototype.getAttribute.call(this, "src")) : "";
    }, set: function set(e) {
      return v.Element.prototype.setAttribute.call(this, "src", e), e;
    } }),
      mr = function mr(n) {
    if (n.featuresSourceset) {
      var r = n.el();if (!r.resetSourceset_) {
        var i = hr([n.el(), v.HTMLMediaElement.prototype, fr], "src"),
            a = r.setAttribute,
            t = r.load;Object.defineProperty(r, "src", Ne(i, { set: function set(e) {
            var t = i.set.call(r, e);return n.triggerSourceset(r.src), t;
          } })), r.setAttribute = function (e, t) {
          var i = a.call(r, e, t);return (/src/i.test(e) && n.triggerSourceset(r.src), i
          );
        }, r.load = function () {
          var e = t.call(r);return cr(n) || (n.triggerSourceset(""), pr(n)), e;
        }, r.currentSrc ? n.triggerSourceset(r.currentSrc) : cr(n) || pr(n), r.resetSourceset_ = function () {
          r.resetSourceset_ = null, r.load = t, r.setAttribute = a, Object.defineProperty(r, "src", i), r.resetSourceWatch_ && r.resetSourceWatch_();
        };
      }
    }
  };function gr() {
    var e = t(["Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\n            This may prevent text tracks from loading."]);return gr = function gr() {
      return e;
    }, e;
  }var yr = function (c) {
    function o(e, t) {
      var i;i = c.call(this, e, t) || this;var n = e.source,
          r = !1;if (n && (i.el_.currentSrc !== n.src || e.tag && 3 === e.tag.initNetworkState_) ? i.setSource(n) : i.handleLateInit_(i.el_), e.enableSourceset && i.setupSourcesetHandling_(), i.el_.hasChildNodes()) {
        for (var a = i.el_.childNodes, s = a.length, o = []; s--;) {
          var u = a[s];"track" === u.nodeName.toLowerCase() && (i.featuresNativeTextTracks ? (i.remoteTextTrackEls().addTrackElement_(u), i.remoteTextTracks().addTrack(u.track), i.textTracks().addTrack(u.track), r || i.el_.hasAttribute("crossorigin") || !$t(u.src) || (r = !0)) : o.push(u));
        }for (var l = 0; l < o.length; l++) {
          i.el_.removeChild(o[l]);
        }
      }return i.proxyNativeTracks_(), i.featuresNativeTextTracks && r && m.warn(y(gr())), i.restoreMetadataTracksInIOSNativePlayer_(), (ut || Ke || et) && !0 === e.nativeControlsForTouch && i.setControls(!0), i.proxyWebkitFullscreen_(), i.triggerReady(), i;
    }p(o, c);var e = o.prototype;return e.dispose = function () {
      this.el_ && this.el_.resetSourceset_ && this.el_.resetSourceset_(), o.disposeMediaElement(this.el_), this.options_ = null, c.prototype.dispose.call(this);
    }, e.setupSourcesetHandling_ = function () {
      mr(this);
    }, e.restoreMetadataTracksInIOSNativePlayer_ = function () {
      var n,
          r = this.textTracks(),
          e = function e() {
        n = [];for (var e = 0; e < r.length; e++) {
          var t = r[e];"metadata" === t.kind && n.push({ track: t, storedMode: t.mode });
        }
      };e(), r.addEventListener("change", e), this.on("dispose", function () {
        return r.removeEventListener("change", e);
      });var t = function e() {
        for (var t = 0; t < n.length; t++) {
          var i = n[t];"disabled" === i.track.mode && i.track.mode !== i.storedMode && (i.track.mode = i.storedMode);
        }r.removeEventListener("change", e);
      };this.on("webkitbeginfullscreen", function () {
        r.removeEventListener("change", e), r.removeEventListener("change", t), r.addEventListener("change", t);
      }), this.on("webkitendfullscreen", function () {
        r.removeEventListener("change", e), r.addEventListener("change", e), r.removeEventListener("change", t);
      });
    }, e.overrideNative_ = function (e, t) {
      var i = this;if (t === this["featuresNative" + e + "Tracks"]) {
        var n = e.toLowerCase();this[n + "TracksListeners_"] && Object.keys(this[n + "TracksListeners_"]).forEach(function (e) {
          i.el()[n + "Tracks"].removeEventListener(e, i[n + "TracksListeners_"][e]);
        }), this["featuresNative" + e + "Tracks"] = !t, this[n + "TracksListeners_"] = null, this.proxyNativeTracksForType_(n);
      }
    }, e.overrideNativeAudioTracks = function (e) {
      this.overrideNative_("Audio", e);
    }, e.overrideNativeVideoTracks = function (e) {
      this.overrideNative_("Video", e);
    }, e.proxyNativeTracksForType_ = function (e) {
      var n = this,
          t = Si[e],
          r = this.el()[t.getterName],
          a = this[t.getterName]();if (this["featuresNative" + t.capitalName + "Tracks"] && r && r.addEventListener) {
        var s = { change: function change(e) {
            a.trigger({ type: "change", target: a, currentTarget: a, srcElement: a });
          }, addtrack: function addtrack(e) {
            a.addTrack(e.track);
          }, removetrack: function removetrack(e) {
            a.removeTrack(e.track);
          } },
            i = function i() {
          for (var e = [], t = 0; t < a.length; t++) {
            for (var i = !1, n = 0; n < r.length; n++) {
              if (r[n] === a[t]) {
                i = !0;break;
              }
            }i || e.push(a[t]);
          }for (; e.length;) {
            a.removeTrack(e.shift());
          }
        };this[t.getterName + "Listeners_"] = s, Object.keys(s).forEach(function (t) {
          var i = s[t];r.addEventListener(t, i), n.on("dispose", function (e) {
            return r.removeEventListener(t, i);
          });
        }), this.on("loadstart", i), this.on("dispose", function (e) {
          return n.off("loadstart", i);
        });
      }
    }, e.proxyNativeTracks_ = function () {
      var t = this;Si.names.forEach(function (e) {
        t.proxyNativeTracksForType_(e);
      });
    }, e.createEl = function () {
      var e = this.options_.tag;if (!e || !this.options_.playerElIngest && !this.movingMediaElementInDOM) {
        if (e) {
          var t = e.cloneNode(!0);e.parentNode && e.parentNode.insertBefore(t, e), o.disposeMediaElement(e), e = t;
        } else {
          e = d.createElement("video");var i = Ne({}, this.options_.tag && R(this.options_.tag));ut && !0 === this.options_.nativeControlsForTouch || delete i.controls, x(e, _(i, { id: this.options_.techId, class: "vjs-tech" }));
        }e.playerId = this.options_.playerId;
      }"undefined" != typeof this.options_.preload && B(e, "preload", this.options_.preload);for (var n = ["loop", "muted", "playsinline", "autoplay"], r = 0; r < n.length; r++) {
        var a = n[r],
            s = this.options_[a];"undefined" != typeof s && (s ? B(e, a, a) : N(e, a), e[a] = s);
      }return e;
    }, e.handleLateInit_ = function (e) {
      if (0 !== e.networkState && 3 !== e.networkState) {
        if (0 === e.readyState) {
          var t = !1,
              i = function i() {
            t = !0;
          };this.on("loadstart", i);var n = function n() {
            t || this.trigger("loadstart");
          };return this.on("loadedmetadata", n), void this.ready(function () {
            this.off("loadstart", i), this.off("loadedmetadata", n), t || this.trigger("loadstart");
          });
        }var r = ["loadstart"];r.push("loadedmetadata"), 2 <= e.readyState && r.push("loadeddata"), 3 <= e.readyState && r.push("canplay"), 4 <= e.readyState && r.push("canplaythrough"), this.ready(function () {
          r.forEach(function (e) {
            this.trigger(e);
          }, this);
        });
      }
    }, e.setCurrentTime = function (e) {
      try {
        this.el_.currentTime = e;
      } catch (e) {
        m(e, "Video is not ready. (Video.js)");
      }
    }, e.duration = function () {
      var t = this;if (this.el_.duration === 1 / 0 && Je && nt && 0 === this.el_.currentTime) {
        return this.on("timeupdate", function e() {
          0 < t.el_.currentTime && (t.el_.duration === 1 / 0 && t.trigger("durationchange"), t.off("timeupdate", e));
        }), NaN;
      }return this.el_.duration || NaN;
    }, e.width = function () {
      return this.el_.offsetWidth;
    }, e.height = function () {
      return this.el_.offsetHeight;
    }, e.proxyWebkitFullscreen_ = function () {
      var e = this;if ("webkitDisplayingFullscreen" in this.el_) {
        var t = function t() {
          this.trigger("fullscreenchange", { isFullscreen: !1 });
        },
            i = function i() {
          "webkitPresentationMode" in this.el_ && "picture-in-picture" !== this.el_.webkitPresentationMode && (this.one("webkitendfullscreen", t), this.trigger("fullscreenchange", { isFullscreen: !0 }));
        };this.on("webkitbeginfullscreen", i), this.on("dispose", function () {
          e.off("webkitbeginfullscreen", i), e.off("webkitendfullscreen", t);
        });
      }
    }, e.supportsFullScreen = function () {
      if ("function" == typeof this.el_.webkitEnterFullScreen) {
        var e = v.navigator && v.navigator.userAgent || "";if (/Android/.test(e) || !/Chrome|Mac OS X 10.5/.test(e)) return !0;
      }return !1;
    }, e.enterFullScreen = function () {
      var e = this.el_;e.paused && e.networkState <= e.HAVE_METADATA ? (this.el_.play(), this.setTimeout(function () {
        e.pause(), e.webkitEnterFullScreen();
      }, 0)) : e.webkitEnterFullScreen();
    }, e.exitFullScreen = function () {
      this.el_.webkitExitFullScreen();
    }, e.src = function (e) {
      if (void 0 === e) return this.el_.src;this.setSrc(e);
    }, e.reset = function () {
      o.resetMediaElement(this.el_);
    }, e.currentSrc = function () {
      return this.currentSource_ ? this.currentSource_.src : this.el_.currentSrc;
    }, e.setControls = function (e) {
      this.el_.controls = !!e;
    }, e.addTextTrack = function (e, t, i) {
      return this.featuresNativeTextTracks ? this.el_.addTextTrack(e, t, i) : c.prototype.addTextTrack.call(this, e, t, i);
    }, e.createRemoteTextTrack = function (e) {
      if (!this.featuresNativeTextTracks) return c.prototype.createRemoteTextTrack.call(this, e);var t = d.createElement("track");return e.kind && (t.kind = e.kind), e.label && (t.label = e.label), (e.language || e.srclang) && (t.srclang = e.language || e.srclang), e.default && (t.default = e.default), e.id && (t.id = e.id), e.src && (t.src = e.src), t;
    }, e.addRemoteTextTrack = function (e, t) {
      var i = c.prototype.addRemoteTextTrack.call(this, e, t);return this.featuresNativeTextTracks && this.el().appendChild(i), i;
    }, e.removeRemoteTextTrack = function (e) {
      if (c.prototype.removeRemoteTextTrack.call(this, e), this.featuresNativeTextTracks) for (var t = this.$$("track"), i = t.length; i--;) {
        e !== t[i] && e !== t[i].track || this.el().removeChild(t[i]);
      }
    }, e.getVideoPlaybackQuality = function () {
      if ("function" == typeof this.el().getVideoPlaybackQuality) return this.el().getVideoPlaybackQuality();var e = {};return "undefined" != typeof this.el().webkitDroppedFrameCount && "undefined" != typeof this.el().webkitDecodedFrameCount && (e.droppedVideoFrames = this.el().webkitDroppedFrameCount, e.totalVideoFrames = this.el().webkitDecodedFrameCount), v.performance && "function" == typeof v.performance.now ? e.creationTime = v.performance.now() : v.performance && v.performance.timing && "number" == typeof v.performance.timing.navigationStart && (e.creationTime = v.Date.now() - v.performance.timing.navigationStart), e;
    }, o;
  }(Ei);if (k()) {
    yr.TEST_VID = d.createElement("video");var vr = d.createElement("track");vr.kind = "captions", vr.srclang = "en", vr.label = "English", yr.TEST_VID.appendChild(vr);
  }yr.isSupported = function () {
    try {
      yr.TEST_VID.volume = .5;
    } catch (e) {
      return !1;
    }return !(!yr.TEST_VID || !yr.TEST_VID.canPlayType);
  }, yr.canPlayType = function (e) {
    return yr.TEST_VID.canPlayType(e);
  }, yr.canPlaySource = function (e, t) {
    return yr.canPlayType(e.type);
  }, yr.canControlVolume = function () {
    try {
      var e = yr.TEST_VID.volume;return yr.TEST_VID.volume = e / 2 + .1, e !== yr.TEST_VID.volume;
    } catch (e) {
      return !1;
    }
  }, yr.canMuteVolume = function () {
    try {
      var e = yr.TEST_VID.muted;return yr.TEST_VID.muted = !e, yr.TEST_VID.muted ? B(yr.TEST_VID, "muted", "muted") : N(yr.TEST_VID, "muted"), e !== yr.TEST_VID.muted;
    } catch (e) {
      return !1;
    }
  }, yr.canControlPlaybackRate = function () {
    if (Je && nt && rt < 58) return !1;try {
      var e = yr.TEST_VID.playbackRate;return yr.TEST_VID.playbackRate = e / 2 + .1, e !== yr.TEST_VID.playbackRate;
    } catch (e) {
      return !1;
    }
  }, yr.canOverrideAttributes = function () {
    try {
      var e = function e() {};Object.defineProperty(d.createElement("video"), "src", { get: e, set: e }), Object.defineProperty(d.createElement("audio"), "src", { get: e, set: e }), Object.defineProperty(d.createElement("video"), "innerHTML", { get: e, set: e }), Object.defineProperty(d.createElement("audio"), "innerHTML", { get: e, set: e });
    } catch (e) {
      return !1;
    }return !0;
  }, yr.supportsNativeTextTracks = function () {
    return ot || $e && nt;
  }, yr.supportsNativeVideoTracks = function () {
    return !(!yr.TEST_VID || !yr.TEST_VID.videoTracks);
  }, yr.supportsNativeAudioTracks = function () {
    return !(!yr.TEST_VID || !yr.TEST_VID.audioTracks);
  }, yr.Events = ["loadstart", "suspend", "abort", "error", "emptied", "stalled", "loadedmetadata", "loadeddata", "canplay", "canplaythrough", "playing", "waiting", "seeking", "seeked", "ended", "durationchange", "timeupdate", "progress", "play", "pause", "ratechange", "resize", "volumechange"], yr.prototype.featuresVolumeControl = yr.canControlVolume(), yr.prototype.featuresMuteControl = yr.canMuteVolume(), yr.prototype.featuresPlaybackRate = yr.canControlPlaybackRate(), yr.prototype.featuresSourceset = yr.canOverrideAttributes(), yr.prototype.movingMediaElementInDOM = !$e, yr.prototype.featuresFullscreenResize = !0, yr.prototype.featuresProgressEvents = !0, yr.prototype.featuresTimeupdateEvents = !0, yr.prototype.featuresNativeTextTracks = yr.supportsNativeTextTracks(), yr.prototype.featuresNativeVideoTracks = yr.supportsNativeVideoTracks(), yr.prototype.featuresNativeAudioTracks = yr.supportsNativeAudioTracks();var _r = yr.TEST_VID && yr.TEST_VID.constructor.prototype.canPlayType,
      br = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;function Tr() {
    var e = t(["\n        Using the tech directly can be dangerous. I hope you know what you're doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      "]);return Tr = function Tr() {
      return e;
    }, e;
  }yr.patchCanPlayType = function () {
    4 <= Ze && !tt && !nt && (yr.TEST_VID.constructor.prototype.canPlayType = function (e) {
      return e && br.test(e) ? "maybe" : _r.call(this, e);
    });
  }, yr.unpatchCanPlayType = function () {
    var e = yr.TEST_VID.constructor.prototype.canPlayType;return yr.TEST_VID.constructor.prototype.canPlayType = _r, e;
  }, yr.patchCanPlayType(), yr.disposeMediaElement = function (e) {
    if (e) {
      for (e.parentNode && e.parentNode.removeChild(e); e.hasChildNodes();) {
        e.removeChild(e.firstChild);
      }e.removeAttribute("src"), "function" == typeof e.load && function () {
        try {
          e.load();
        } catch (e) {}
      }();
    }
  }, yr.resetMediaElement = function (e) {
    if (e) {
      for (var t = e.querySelectorAll("source"), i = t.length; i--;) {
        e.removeChild(t[i]);
      }e.removeAttribute("src"), "function" == typeof e.load && function () {
        try {
          e.load();
        } catch (e) {}
      }();
    }
  }, ["muted", "defaultMuted", "autoplay", "controls", "loop", "playsinline"].forEach(function (e) {
    yr.prototype[e] = function () {
      return this.el_[e] || this.el_.hasAttribute(e);
    };
  }), ["muted", "defaultMuted", "autoplay", "loop", "playsinline"].forEach(function (t) {
    yr.prototype["set" + Be(t)] = function (e) {
      (this.el_[t] = e) ? this.el_.setAttribute(t, t) : this.el_.removeAttribute(t);
    };
  }), ["paused", "currentTime", "buffered", "volume", "poster", "preload", "error", "seeking", "seekable", "ended", "playbackRate", "defaultPlaybackRate", "played", "networkState", "readyState", "videoWidth", "videoHeight"].forEach(function (e) {
    yr.prototype[e] = function () {
      return this.el_[e];
    };
  }), ["volume", "src", "poster", "preload", "playbackRate", "defaultPlaybackRate"].forEach(function (t) {
    yr.prototype["set" + Be(t)] = function (e) {
      this.el_[t] = e;
    };
  }), ["pause", "load", "play"].forEach(function (e) {
    yr.prototype[e] = function () {
      return this.el_[e]();
    };
  }), Ei.withSourceHandlers(yr), yr.nativeSourceHandler = {}, yr.nativeSourceHandler.canPlayType = function (e) {
    try {
      return yr.TEST_VID.canPlayType(e);
    } catch (e) {
      return "";
    }
  }, yr.nativeSourceHandler.canHandleSource = function (e, t) {
    if (e.type) return yr.nativeSourceHandler.canPlayType(e.type);if (e.src) {
      var i = Yt(e.src);return yr.nativeSourceHandler.canPlayType("video/" + i);
    }return "";
  }, yr.nativeSourceHandler.handleSource = function (e, t, i) {
    t.setSrc(e.src);
  }, yr.nativeSourceHandler.dispose = function () {}, yr.registerSourceHandler(yr.nativeSourceHandler), Ei.registerTech("Html5", yr);var Sr = ["progress", "abort", "suspend", "emptied", "stalled", "loadedmetadata", "loadeddata", "timeupdate", "resize", "volumechange", "texttrackchange"],
      kr = { canplay: "CanPlay", canplaythrough: "CanPlayThrough", playing: "Playing", seeked: "Seeked" },
      Cr = ["tiny", "xsmall", "small", "medium", "large", "xlarge", "huge"],
      wr = {};Cr.forEach(function (e) {
    var t = "x" === e.charAt(0) ? "x-" + e.substring(1) : e;wr[e] = "vjs-layout-" + t;
  });var Er = { tiny: 210, xsmall: 320, small: 425, medium: 768, large: 1440, xlarge: 2560, huge: 1 / 0 },
      Ar = function (c) {
    function l(e, t, i) {
      var n;if (e.id = e.id || t.id || "vjs_video_" + ee(), (t = _(l.getTagSettings(e), t)).initChildren = !1, t.createEl = !1, t.evented = !1, t.reportTouchActivity = !1, !t.language) if ("function" == typeof e.closest) {
        var r = e.closest("[lang]");r && r.getAttribute && (t.language = r.getAttribute("lang"));
      } else for (var a = e; a && 1 === a.nodeType;) {
        if (R(a).hasOwnProperty("lang")) {
          t.language = a.getAttribute("lang");break;
        }a = a.parentNode;
      }if ((n = c.call(this, null, t, i) || this).boundDocumentFullscreenChange_ = ke(f(f(n)), n.documentFullscreenChange_), n.boundFullWindowOnEscKey_ = ke(f(f(n)), n.fullWindowOnEscKey), n.boundHandleKeyPress_ = ke(f(f(n)), n.handleKeyPress), n.log = g(n.id_), n.isPosterFromTech_ = !1, n.queuedCallbacks_ = [], n.isReady_ = !1, n.hasStarted_ = !1, n.userActive_ = !1, !n.options_ || !n.options_.techOrder || !n.options_.techOrder.length) throw new Error("No techOrder specified. Did you overwrite videojs.options instead of just changing the properties you want to override?");if (n.tag = e, n.tagAttributes = e && R(e), n.language(n.options_.language), t.languages) {
        var s = {};Object.getOwnPropertyNames(t.languages).forEach(function (e) {
          s[e.toLowerCase()] = t.languages[e];
        }), n.languages_ = s;
      } else n.languages_ = l.prototype.options_.languages;n.resetCache_(), n.poster_ = t.poster || "", n.controls_ = !!t.controls, e.controls = !1, e.removeAttribute("controls"), n.changingSrc_ = !1, n.playCallbacks_ = [], n.playTerminatedQueue_ = [], e.hasAttribute("autoplay") ? n.autoplay(!0) : n.autoplay(n.options_.autoplay), t.plugins && Object.keys(t.plugins).forEach(function (e) {
        if ("function" != typeof n[e]) throw new Error('plugin "' + e + '" does not exist');
      }), n.scrubbing_ = !1, n.el_ = n.createEl(), xe(f(f(n)), { eventBusKey: "el_" }), n.fluid_ && n.on("playerreset", n.updateStyleEl_);var o = Ne(n.options_);t.plugins && Object.keys(t.plugins).forEach(function (e) {
        n[e](t.plugins[e]);
      }), n.options_.playerOptions = o, n.middleware_ = [], n.initChildren(), n.isAudio("audio" === e.nodeName.toLowerCase()), n.controls() ? n.addClass("vjs-controls-enabled") : n.addClass("vjs-controls-disabled"), n.el_.setAttribute("role", "region"), n.isAudio() ? n.el_.setAttribute("aria-label", n.localize("Audio Player")) : n.el_.setAttribute("aria-label", n.localize("Video Player")), n.isAudio() && n.addClass("vjs-audio"), n.flexNotSupported_() && n.addClass("vjs-no-flex"), ut && n.addClass("vjs-touch-enabled"), $e || n.addClass("vjs-workinghover"), l.players[n.id_] = f(f(n));var u = h.split(".")[0];return n.addClass("vjs-v" + u), n.userActive(!0), n.reportUserActivity(), n.one("play", n.listenForUserActivity_), n.on("focus", n.handleFocus), n.on("blur", n.handleBlur), n.on("stageclick", n.handleStageClick_), n.breakpoints(n.options_.breakpoints), n.responsive(n.options_.responsive), n;
    }p(l, c);var e = l.prototype;return e.dispose = function () {
      var n = this;this.trigger("dispose"), this.off("dispose"), he(d, mt.fullscreenchange, this.boundDocumentFullscreenChange_), he(d, "keydown", this.boundFullWindowOnEscKey_), he(d, "keydown", this.boundHandleKeyPress_), this.styleEl_ && this.styleEl_.parentNode && (this.styleEl_.parentNode.removeChild(this.styleEl_), this.styleEl_ = null), l.players[this.id_] = null, this.tag && this.tag.player && (this.tag.player = null), this.el_ && this.el_.player && (this.el_.player = null), this.tech_ && (this.tech_.dispose(), this.isPosterFromTech_ = !1, this.poster_ = ""), this.playerElIngest_ && (this.playerElIngest_ = null), this.tag && (this.tag = null), Li[this.id()] = null, Ci.names.forEach(function (e) {
        var t = Ci[e],
            i = n[t.getterName]();i && i.off && i.off();
      }), c.prototype.dispose.call(this);
    }, e.createEl = function () {
      var t,
          i = this.tag,
          e = this.playerElIngest_ = i.parentNode && i.parentNode.hasAttribute && i.parentNode.hasAttribute("data-vjs-player"),
          n = "video-js" === this.tag.tagName.toLowerCase();e ? t = this.el_ = i.parentNode : n || (t = this.el_ = c.prototype.createEl.call(this, "div"));var r = R(i);if (n) {
        for (t = this.el_ = i, i = this.tag = d.createElement("video"); t.children.length;) {
          i.appendChild(t.firstChild);
        }O(t, "video-js") || I(t, "video-js"), t.appendChild(i), e = this.playerElIngest_ = t, Object.keys(t).forEach(function (e) {
          i[e] = t[e];
        });
      }if (i.setAttribute("tabindex", "-1"), r.tabindex = "-1", at && (i.setAttribute("role", "application"), r.role = "application"), i.removeAttribute("width"), i.removeAttribute("height"), "width" in r && delete r.width, "height" in r && delete r.height, Object.getOwnPropertyNames(r).forEach(function (e) {
        n && "class" === e || t.setAttribute(e, r[e]), n && i.setAttribute(e, r[e]);
      }), i.playerId = i.id, i.id += "_html5_api", i.className = "vjs-tech", i.player = t.player = this, this.addClass("vjs-paused"), !0 !== v.VIDEOJS_NO_DYNAMIC_STYLE) {
        this.styleEl_ = Te("vjs-styles-dimensions");var a = $(".vjs-styles-defaults"),
            s = $("head");s.insertBefore(this.styleEl_, a ? a.nextSibling : s.firstChild);
      }this.fill_ = !1, this.fluid_ = !1, this.width(this.options_.width), this.height(this.options_.height), this.fill(this.options_.fill), this.fluid(this.options_.fluid), this.aspectRatio(this.options_.aspectRatio);for (var o = i.getElementsByTagName("a"), u = 0; u < o.length; u++) {
        var l = o.item(u);I(l, "vjs-hidden"), l.setAttribute("hidden", "hidden");
      }return i.initNetworkState_ = i.networkState, i.parentNode && !e && i.parentNode.insertBefore(t, i), P(i, t), this.children_.unshift(i), this.el_.setAttribute("lang", this.language_), this.el_ = t;
    }, e.width = function (e) {
      return this.dimension("width", e);
    }, e.height = function (e) {
      return this.dimension("height", e);
    }, e.dimension = function (e, t) {
      var i = e + "_";if (void 0 === t) return this[i] || 0;if ("" === t) return this[i] = void 0, void this.updateStyleEl_();var n = parseFloat(t);isNaN(n) ? m.error('Improper value "' + t + '" supplied for for ' + e) : (this[i] = n, this.updateStyleEl_());
    }, e.fluid = function (e) {
      if (void 0 === e) return !!this.fluid_;var t, i;this.fluid_ = !!e, Ee(this) && this.off("playerreset", this.updateStyleEl_), e ? (this.addClass("vjs-fluid"), this.fill(!1), Ee(t = function t() {
        this.on("playerreset", this.updateStyleEl_);
      }) ? i() : (t.eventedCallbacks || (t.eventedCallbacks = []), t.eventedCallbacks.push(i))) : this.removeClass("vjs-fluid"), this.updateStyleEl_();
    }, e.fill = function (e) {
      if (void 0 === e) return !!this.fill_;this.fill_ = !!e, e ? (this.addClass("vjs-fill"), this.fluid(!1)) : this.removeClass("vjs-fill");
    }, e.aspectRatio = function (e) {
      if (void 0 === e) return this.aspectRatio_;if (!/^\d+\:\d+$/.test(e)) throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");this.aspectRatio_ = e, this.fluid(!0), this.updateStyleEl_();
    }, e.updateStyleEl_ = function () {
      if (!0 !== v.VIDEOJS_NO_DYNAMIC_STYLE) {
        var e,
            t,
            i,
            n = (void 0 !== this.aspectRatio_ && "auto" !== this.aspectRatio_ ? this.aspectRatio_ : 0 < this.videoWidth() ? this.videoWidth() + ":" + this.videoHeight() : "16:9").split(":"),
            r = n[1] / n[0];e = void 0 !== this.width_ ? this.width_ : void 0 !== this.height_ ? this.height_ / r : this.videoWidth() || 300, t = void 0 !== this.height_ ? this.height_ : e * r, i = /^[^a-zA-Z]/.test(this.id()) ? "dimensions-" + this.id() : this.id() + "-dimensions", this.addClass(i), Se(this.styleEl_, "\n      ." + i + " {\n        width: " + e + "px;\n        height: " + t + "px;\n      }\n\n      ." + i + ".vjs-fluid {\n        padding-top: " + 100 * r + "%;\n      }\n    ");
      } else {
        var a = "number" == typeof this.width_ ? this.width_ : this.options_.width,
            s = "number" == typeof this.height_ ? this.height_ : this.options_.height,
            o = this.tech_ && this.tech_.el();o && (0 <= a && (o.width = a), 0 <= s && (o.height = s));
      }
    }, e.loadTech_ = function (e, t) {
      var i = this;this.tech_ && this.unloadTech_();var n = Be(e),
          r = e.charAt(0).toLowerCase() + e.slice(1);"Html5" !== n && this.tag && (Ei.getTech("Html5").disposeMediaElement(this.tag), this.tag.player = null, this.tag = null), this.techName_ = n, this.isReady_ = !1;var a = { source: t, autoplay: "string" != typeof this.autoplay() && this.autoplay(), nativeControlsForTouch: this.options_.nativeControlsForTouch, playerId: this.id(), techId: this.id() + "_" + r + "_api", playsinline: this.options_.playsinline, preload: this.options_.preload, loop: this.options_.loop, muted: this.options_.muted, poster: this.poster(), language: this.language(), playerElIngest: this.playerElIngest_ || !1, "vtt.js": this.options_["vtt.js"], canOverridePoster: !!this.options_.techCanOverridePoster, enableSourceset: this.options_.enableSourceset };Ci.names.forEach(function (e) {
        var t = Ci[e];a[t.getterName] = i[t.privateName];
      }), _(a, this.options_[n]), _(a, this.options_[r]), _(a, this.options_[e.toLowerCase()]), this.tag && (a.tag = this.tag), t && t.src === this.cache_.src && 0 < this.cache_.currentTime && (a.startTime = this.cache_.currentTime);var s = Ei.getTech(e);if (!s) throw new Error("No Tech named '" + n + "' exists! '" + n + "' should be registered using videojs.registerTech()'");this.tech_ = new s(a), this.tech_.ready(ke(this, this.handleTechReady_), !0), Lt(this.textTracksJson_ || [], this.tech_), Sr.forEach(function (e) {
        i.on(i.tech_, e, i["handleTech" + Be(e) + "_"]);
      }), Object.keys(kr).forEach(function (t) {
        i.on(i.tech_, t, function (e) {
          0 === i.tech_.playbackRate() && i.tech_.seeking() ? i.queuedCallbacks_.push({ callback: i["handleTech" + kr[t] + "_"].bind(i), event: e }) : i["handleTech" + kr[t] + "_"](e);
        });
      }), this.on(this.tech_, "loadstart", this.handleTechLoadStart_), this.on(this.tech_, "sourceset", this.handleTechSourceset_), this.on(this.tech_, "waiting", this.handleTechWaiting_), this.on(this.tech_, "ended", this.handleTechEnded_), this.on(this.tech_, "seeking", this.handleTechSeeking_), this.on(this.tech_, "play", this.handleTechPlay_), this.on(this.tech_, "firstplay", this.handleTechFirstPlay_), this.on(this.tech_, "pause", this.handleTechPause_), this.on(this.tech_, "durationchange", this.handleTechDurationChange_), this.on(this.tech_, "fullscreenchange", this.handleTechFullscreenChange_), this.on(this.tech_, "error", this.handleTechError_), this.on(this.tech_, "loadedmetadata", this.updateStyleEl_), this.on(this.tech_, "posterchange", this.handleTechPosterChange_), this.on(this.tech_, "textdata", this.handleTechTextData_), this.on(this.tech_, "ratechange", this.handleTechRateChange_), this.usingNativeControls(this.techGet_("controls")), this.controls() && !this.usingNativeControls() && this.addTechControlsListeners_(), this.tech_.el().parentNode === this.el() || "Html5" === n && this.tag || P(this.tech_.el(), this.el()), this.tag && (this.tag.player = null, this.tag = null);
    }, e.unloadTech_ = function () {
      var i = this;Ci.names.forEach(function (e) {
        var t = Ci[e];i[t.privateName] = i[t.getterName]();
      }), this.textTracksJson_ = At(this.tech_), this.isReady_ = !1, this.tech_.dispose(), this.tech_ = !1, this.isPosterFromTech_ && (this.poster_ = "", this.trigger("posterchange")), this.isPosterFromTech_ = !1;
    }, e.tech = function (e) {
      return void 0 === e && m.warn(y(Tr())), this.tech_;
    }, e.addTechControlsListeners_ = function () {
      this.removeTechControlsListeners_(), this.on(this.tech_, "mousedown", this.handleTechClick_), this.on(this.tech_, "dblclick", this.handleTechDoubleClick_), this.on(this.tech_, "touchstart", this.handleTechTouchStart_), this.on(this.tech_, "touchmove", this.handleTechTouchMove_), this.on(this.tech_, "touchend", this.handleTechTouchEnd_), this.on(this.tech_, "tap", this.handleTechTap_);
    }, e.removeTechControlsListeners_ = function () {
      this.off(this.tech_, "tap", this.handleTechTap_), this.off(this.tech_, "touchstart", this.handleTechTouchStart_), this.off(this.tech_, "touchmove", this.handleTechTouchMove_), this.off(this.tech_, "touchend", this.handleTechTouchEnd_), this.off(this.tech_, "mousedown", this.handleTechClick_), this.off(this.tech_, "dblclick", this.handleTechDoubleClick_);
    }, e.handleTechReady_ = function () {
      this.triggerReady(), this.cache_.volume && this.techCall_("setVolume", this.cache_.volume), this.handleTechPosterChange_(), this.handleTechDurationChange_();
    }, e.handleTechLoadStart_ = function () {
      this.removeClass("vjs-ended"), this.removeClass("vjs-seeking"), this.error(null), this.handleTechDurationChange_(), this.paused() ? (this.hasStarted(!1), this.trigger("loadstart")) : (this.trigger("loadstart"), this.trigger("firstplay")), this.manualAutoplay_(this.autoplay());
    }, e.manualAutoplay_ = function (t) {
      var n = this;if (this.tech_ && "string" == typeof t) {
        var e,
            i = function i() {
          var e = n.muted();n.muted(!0);var t = function t() {
            n.muted(e);
          };n.playTerminatedQueue_.push(t);var i = n.play();if (Ct(i)) return i.catch(t);
        };if ("any" === t && !0 !== this.muted() ? Ct(e = this.play()) && (e = e.catch(i)) : e = "muted" === t && !0 !== this.muted() ? i() : this.play(), Ct(e)) return e.then(function () {
          n.trigger({ type: "autoplay-success", autoplay: t });
        }).catch(function (e) {
          n.trigger({ type: "autoplay-failure", autoplay: t });
        });
      }
    }, e.updateSourceCaches_ = function (e) {
      void 0 === e && (e = "");var t = e,
          i = "";"string" != typeof t && (t = e.src, i = e.type), this.cache_.source = this.cache_.source || {}, this.cache_.sources = this.cache_.sources || [], t && !i && (i = function (e, t) {
        if (!t) return "";if (e.cache_.source.src === t && e.cache_.source.type) return e.cache_.source.type;var i = e.cache_.sources.filter(function (e) {
          return e.src === t;
        });if (i.length) return i[0].type;for (var n = e.$$("source"), r = 0; r < n.length; r++) {
          var a = n[r];if (a.type && a.src && a.src === t) return a.type;
        }return Ni(t);
      }(this, t)), this.cache_.source = Ne({}, e, { src: t, type: i });for (var n = this.cache_.sources.filter(function (e) {
        return e.src && e.src === t;
      }), r = [], a = this.$$("source"), s = [], o = 0; o < a.length; o++) {
        var u = R(a[o]);r.push(u), u.src && u.src === t && s.push(u.src);
      }s.length && !n.length ? this.cache_.sources = r : n.length || (this.cache_.sources = [this.cache_.source]), this.cache_.src = t;
    }, e.handleTechSourceset_ = function (e) {
      var n = this;if (!this.changingSrc_) {
        var t = function t(e) {
          return n.updateSourceCaches_(e);
        },
            i = this.currentSource().src,
            r = e.src;if (i && !/^blob:/.test(i) && /^blob:/.test(r) && (!this.lastSource_ || this.lastSource_.tech !== r && this.lastSource_.player !== i) && (t = function t() {}), t(r), !e.src) {
          this.tech_.one(["sourceset", "loadstart"], function e(t) {
            if ("sourceset" !== t.type) {
              var i = n.techGet("currentSrc");n.lastSource_.tech = i, n.updateSourceCaches_(i);
            }n.tech_.off(["sourceset", "loadstart"], e);
          });
        }
      }this.lastSource_ = { player: this.currentSource().src, tech: e.src }, this.trigger({ src: e.src, type: "sourceset" });
    }, e.hasStarted = function (e) {
      if (void 0 === e) return this.hasStarted_;e !== this.hasStarted_ && (this.hasStarted_ = e, this.hasStarted_ ? (this.addClass("vjs-has-started"), this.trigger("firstplay")) : this.removeClass("vjs-has-started"));
    }, e.handleTechPlay_ = function () {
      this.removeClass("vjs-ended"), this.removeClass("vjs-paused"), this.addClass("vjs-playing"), this.hasStarted(!0), this.trigger("play");
    }, e.handleTechRateChange_ = function () {
      0 < this.tech_.playbackRate() && 0 === this.cache_.lastPlaybackRate && (this.queuedCallbacks_.forEach(function (e) {
        return e.callback(e.event);
      }), this.queuedCallbacks_ = []), this.cache_.lastPlaybackRate = this.tech_.playbackRate(), this.trigger("ratechange");
    }, e.handleTechWaiting_ = function () {
      var t = this;this.addClass("vjs-waiting"), this.trigger("waiting");var i = this.currentTime();this.on("timeupdate", function e() {
        i !== t.currentTime() && (t.removeClass("vjs-waiting"), t.off("timeupdate", e));
      });
    }, e.handleTechCanPlay_ = function () {
      this.removeClass("vjs-waiting"), this.trigger("canplay");
    }, e.handleTechCanPlayThrough_ = function () {
      this.removeClass("vjs-waiting"), this.trigger("canplaythrough");
    }, e.handleTechPlaying_ = function () {
      this.removeClass("vjs-waiting"), this.trigger("playing");
    }, e.handleTechSeeking_ = function () {
      this.addClass("vjs-seeking"), this.trigger("seeking");
    }, e.handleTechSeeked_ = function () {
      this.removeClass("vjs-seeking"), this.removeClass("vjs-ended"), this.trigger("seeked");
    }, e.handleTechFirstPlay_ = function () {
      this.options_.starttime && (m.warn("Passing the `starttime` option to the player will be deprecated in 6.0"), this.currentTime(this.options_.starttime)), this.addClass("vjs-has-started"), this.trigger("firstplay");
    }, e.handleTechPause_ = function () {
      this.removeClass("vjs-playing"), this.addClass("vjs-paused"), this.trigger("pause");
    }, e.handleTechEnded_ = function () {
      this.addClass("vjs-ended"), this.options_.loop ? (this.currentTime(0), this.play()) : this.paused() || this.pause(), this.trigger("ended");
    }, e.handleTechDurationChange_ = function () {
      this.duration(this.techGet_("duration"));
    }, e.handleTechClick_ = function (e) {
      Y(e) && this.controls_ && (this.paused() ? wt(this.play()) : this.pause());
    }, e.handleTechDoubleClick_ = function (t) {
      this.controls_ && (Array.prototype.some.call(this.$$(".vjs-control-bar, .vjs-modal-dialog"), function (e) {
        return e.contains(t.target);
      }) || void 0 !== this.options_ && void 0 !== this.options_.userActions && void 0 !== this.options_.userActions.doubleClick && !1 === this.options_.userActions.doubleClick || (void 0 !== this.options_ && void 0 !== this.options_.userActions && "function" == typeof this.options_.userActions.doubleClick ? this.options_.userActions.doubleClick.call(this, t) : this.isFullscreen() ? this.exitFullscreen() : this.requestFullscreen()));
    }, e.handleTechTap_ = function () {
      this.userActive(!this.userActive());
    }, e.handleTechTouchStart_ = function () {
      this.userWasActive = this.userActive();
    }, e.handleTechTouchMove_ = function () {
      this.userWasActive && this.reportUserActivity();
    }, e.handleTechTouchEnd_ = function (e) {
      e.preventDefault();
    }, e.handleStageClick_ = function () {
      this.reportUserActivity();
    }, e.toggleFullscreenClass_ = function () {
      this.isFullscreen() ? this.addClass("vjs-fullscreen") : this.removeClass("vjs-fullscreen");
    }, e.documentFullscreenChange_ = function (e) {
      var t = mt;this.isFullscreen(d[t.fullscreenElement] === this.el() || this.el().matches(":" + t.fullscreen)), !1 === this.isFullscreen() && he(d, t.fullscreenchange, this.boundDocumentFullscreenChange_), vt || this.trigger("fullscreenchange");
    }, e.handleTechFullscreenChange_ = function (e, t) {
      t && this.isFullscreen(t.isFullscreen), this.trigger("fullscreenchange");
    }, e.handleTechError_ = function () {
      var e = this.tech_.error();this.error(e);
    }, e.handleTechTextData_ = function () {
      var e = null;1 < arguments.length && (e = arguments[1]), this.trigger("textdata", e);
    }, e.getCache = function () {
      return this.cache_;
    }, e.resetCache_ = function () {
      this.cache_ = { currentTime: 0, inactivityTimeout: this.options_.inactivityTimeout, duration: NaN, lastVolume: 1, lastPlaybackRate: this.defaultPlaybackRate(), media: null, src: "", source: {}, sources: [], volume: 1 };
    }, e.techCall_ = function (r, a) {
      this.ready(function () {
        if (r in Di) return e = this.middleware_, t = this.tech_, n = a, t[i = r](e.reduce(Ri(i), n));if (r in xi) return Ii(this.middleware_, this.tech_, r, a);var e, t, i, n;try {
          this.tech_ && this.tech_[r](a);
        } catch (e) {
          throw m(e), e;
        }
      }, !0);
    }, e.techGet_ = function (t) {
      if (this.tech_ && this.tech_.isReady_) {
        if (t in Ui) return e = this.middleware_, i = this.tech_, n = t, e.reduceRight(Ri(n), i[n]());if (t in xi) return Ii(this.middleware_, this.tech_, t);var e, i, n;try {
          return this.tech_[t]();
        } catch (e) {
          if (void 0 === this.tech_[t]) throw m("Video.js: " + t + " method not defined for " + this.techName_ + " playback technology.", e), e;if ("TypeError" === e.name) throw m("Video.js: " + t + " unavailable on " + this.techName_ + " playback technology element.", e), this.tech_.isReady_ = !1, e;throw m(e), e;
        }
      }
    }, e.play = function () {
      var t = this,
          e = this.options_.Promise || v.Promise;return e ? new e(function (e) {
        t.play_(e);
      }) : this.play_();
    }, e.play_ = function (e) {
      var t = this;void 0 === e && (e = wt), this.playCallbacks_.push(e);var i = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc()));if (this.waitToPlay_ && (this.off(["ready", "loadstart"], this.waitToPlay_), this.waitToPlay_ = null), !this.isReady_ || !i) return this.waitToPlay_ = function (e) {
        t.play_();
      }, this.one(["ready", "loadstart"], this.waitToPlay_), void (i || !ot && !$e || this.load());var n = this.techGet_("play");null === n ? this.runPlayTerminatedQueue_() : this.runPlayCallbacks_(n);
    }, e.runPlayTerminatedQueue_ = function () {
      var e = this.playTerminatedQueue_.slice(0);this.playTerminatedQueue_ = [], e.forEach(function (e) {
        e();
      });
    }, e.runPlayCallbacks_ = function (t) {
      var e = this.playCallbacks_.slice(0);this.playCallbacks_ = [], this.playTerminatedQueue_ = [], e.forEach(function (e) {
        e(t);
      });
    }, e.pause = function () {
      this.techCall_("pause");
    }, e.paused = function () {
      return !1 !== this.techGet_("paused");
    }, e.played = function () {
      return this.techGet_("played") || ht(0, 0);
    }, e.scrubbing = function (e) {
      if ("undefined" == typeof e) return this.scrubbing_;this.scrubbing_ = !!e, e ? this.addClass("vjs-scrubbing") : this.removeClass("vjs-scrubbing");
    }, e.currentTime = function (e) {
      return "undefined" != typeof e ? (e < 0 && (e = 0), void this.techCall_("setCurrentTime", e)) : (this.cache_.currentTime = this.techGet_("currentTime") || 0, this.cache_.currentTime);
    }, e.duration = function (e) {
      if (void 0 === e) return void 0 !== this.cache_.duration ? this.cache_.duration : NaN;(e = parseFloat(e)) < 0 && (e = 1 / 0), e !== this.cache_.duration && ((this.cache_.duration = e) === 1 / 0 ? (this.addClass("vjs-live"), this.options_.liveui && this.player_.liveTracker && this.addClass("vjs-liveui")) : (this.removeClass("vjs-live"), this.removeClass("vjs-liveui")), isNaN(e) || this.trigger("durationchange"));
    }, e.remainingTime = function () {
      return this.duration() - this.currentTime();
    }, e.remainingTimeDisplay = function () {
      return Math.floor(this.duration()) - Math.floor(this.currentTime());
    }, e.buffered = function () {
      var e = this.techGet_("buffered");return e && e.length || (e = ht(0, 0)), e;
    }, e.bufferedPercent = function () {
      return pt(this.buffered(), this.duration());
    }, e.bufferedEnd = function () {
      var e = this.buffered(),
          t = this.duration(),
          i = e.end(e.length - 1);return t < i && (i = t), i;
    }, e.volume = function (e) {
      var t;return void 0 !== e ? (t = Math.max(0, Math.min(1, parseFloat(e))), this.cache_.volume = t, this.techCall_("setVolume", t), void (0 < t && this.lastVolume_(t))) : (t = parseFloat(this.techGet_("volume")), isNaN(t) ? 1 : t);
    }, e.muted = function (e) {
      if (void 0 === e) return this.techGet_("muted") || !1;this.techCall_("setMuted", e);
    }, e.defaultMuted = function (e) {
      return void 0 !== e ? this.techCall_("setDefaultMuted", e) : this.techGet_("defaultMuted") || !1;
    }, e.lastVolume_ = function (e) {
      if (void 0 === e || 0 === e) return this.cache_.lastVolume;this.cache_.lastVolume = e;
    }, e.supportsFullScreen = function () {
      return this.techGet_("supportsFullScreen") || !1;
    }, e.isFullscreen = function (e) {
      return void 0 !== e ? (this.isFullscreen_ = !!e, void this.toggleFullscreenClass_()) : !!this.isFullscreen_;
    }, e.requestFullscreen = function () {
      var e = mt;this.isFullscreen(!0), e.requestFullscreen ? (de(d, e.fullscreenchange, this.boundDocumentFullscreenChange_), this.el_[e.requestFullscreen]()) : this.tech_.supportsFullScreen() ? this.techCall_("enterFullScreen") : (this.enterFullWindow(), this.trigger("fullscreenchange"));
    }, e.exitFullscreen = function () {
      var e = mt;this.isFullscreen(!1), e.requestFullscreen ? d[e.exitFullscreen]() : this.tech_.supportsFullScreen() ? this.techCall_("exitFullScreen") : (this.exitFullWindow(), this.trigger("fullscreenchange"));
    }, e.enterFullWindow = function () {
      this.isFullWindow = !0, this.docOrigOverflow = d.documentElement.style.overflow, de(d, "keydown", this.boundFullWindowOnEscKey_), d.documentElement.style.overflow = "hidden", I(d.body, "vjs-full-window"), this.trigger("enterFullWindow");
    }, e.fullWindowOnEscKey = function (e) {
      Ot.isEventKey(e, "Esc") && (!0 === this.isFullscreen() ? this.exitFullscreen() : this.exitFullWindow());
    }, e.exitFullWindow = function () {
      this.isFullWindow = !1, he(d, "keydown", this.boundFullWindowOnEscKey_), d.documentElement.style.overflow = this.docOrigOverflow, U(d.body, "vjs-full-window"), this.trigger("exitFullWindow");
    }, e.handleFocus = function (e) {
      he(d, "keydown", this.boundHandleKeyPress_), de(d, "keydown", this.boundHandleKeyPress_);
    }, e.handleBlur = function (e) {
      he(d, "keydown", this.boundHandleKeyPress_);
    }, e.handleKeyPress = function (e) {
      this.options_.userActions && this.options_.userActions.hotkeys && !1 !== this.options_.userActions.hotkeys && ("function" == typeof this.options_.userActions.hotkeys ? this.options_.userActions.hotkeys.call(this, e) : this.handleHotkeys(e));
    }, e.handleHotkeys = function (e) {
      var t = this.options_.userActions ? this.options_.userActions.hotkeys : {},
          i = t.fullscreenKey,
          n = void 0 === i ? function (e) {
        return Ot.isEventKey(e, "f");
      } : i,
          r = t.muteKey,
          a = void 0 === r ? function (e) {
        return Ot.isEventKey(e, "m");
      } : r,
          s = t.playPauseKey,
          o = void 0 === s ? function (e) {
        return Ot.isEventKey(e, "k") || Ot.isEventKey(e, "Space");
      } : s;if (n.call(this, e)) {
        e.preventDefault();var u = je.getComponent("FullscreenToggle");!1 !== d[mt.fullscreenEnabled] && u.prototype.handleClick.call(this);
      } else if (a.call(this, e)) {
        e.preventDefault(), je.getComponent("MuteToggle").prototype.handleClick.call(this);
      } else if (o.call(this, e)) {
        e.preventDefault(), je.getComponent("PlayToggle").prototype.handleClick.call(this);
      }
    }, e.canPlayType = function (e) {
      for (var t, i = 0, n = this.options_.techOrder; i < n.length; i++) {
        var r = n[i],
            a = Ei.getTech(r);if (a || (a = je.getComponent(r)), a) {
          if (a.isSupported() && (t = a.canPlayType(e))) return t;
        } else m.error('The "' + r + '" tech is undefined. Skipped browser support check for that tech.');
      }return "";
    }, e.selectSource = function (e) {
      var i,
          n = this,
          t = this.options_.techOrder.map(function (e) {
        return [e, Ei.getTech(e)];
      }).filter(function (e) {
        var t = e[0],
            i = e[1];return i ? i.isSupported() : (m.error('The "' + t + '" tech is undefined. Skipped browser support check for that tech.'), !1);
      }),
          r = function r(e, i, n) {
        var r;return e.some(function (t) {
          return i.some(function (e) {
            if (r = n(t, e)) return !0;
          });
        }), r;
      },
          a = function a(e, t) {
        var i = e[0];if (e[1].canPlaySource(t, n.options_[i.toLowerCase()])) return { source: t, tech: i };
      };return (this.options_.sourceOrder ? r(e, t, (i = a, function (e, t) {
        return i(t, e);
      })) : r(t, e, a)) || !1;
    }, e.src = function (e) {
      var r = this;if ("undefined" == typeof e) return this.cache_.src || "";var a = function t(e) {
        if (Array.isArray(e)) {
          var i = [];e.forEach(function (e) {
            e = t(e), Array.isArray(e) ? i = i.concat(e) : b(e) && i.push(e);
          }), e = i;
        } else e = "string" == typeof e && e.trim() ? [ji({ src: e })] : b(e) && "string" == typeof e.src && e.src && e.src.trim() ? [ji(e)] : [];return e;
      }(e);a.length ? (this.changingSrc_ = !0, this.cache_.sources = a, this.updateSourceCaches_(a[0]), Oi(this, a[0], function (e, t) {
        var i, n;if (r.middleware_ = t, r.cache_.sources = a, r.updateSourceCaches_(e), r.src_(e)) return 1 < a.length ? r.src(a.slice(1)) : (r.changingSrc_ = !1, r.setTimeout(function () {
          this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
        }, 0), void r.triggerReady());i = t, n = r.tech_, i.forEach(function (e) {
          return e.setTech && e.setTech(n);
        });
      })) : this.setTimeout(function () {
        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
      }, 0);
    }, e.src_ = function (e) {
      var t,
          i,
          n = this,
          r = this.selectSource([e]);return !r || (t = r.tech, i = this.techName_, Be(t) !== Be(i) ? (this.changingSrc_ = !0, this.loadTech_(r.tech, r.source), this.tech_.ready(function () {
        n.changingSrc_ = !1;
      })) : this.ready(function () {
        this.tech_.constructor.prototype.hasOwnProperty("setSource") ? this.techCall_("setSource", e) : this.techCall_("src", e.src), this.changingSrc_ = !1;
      }, !0), !1);
    }, e.load = function () {
      this.techCall_("load");
    }, e.reset = function () {
      var e = this,
          t = this.options_.Promise || v.Promise;this.paused() || !t ? this.doReset_() : wt(this.play().then(function () {
        return e.doReset_();
      }));
    }, e.doReset_ = function () {
      this.tech_ && this.tech_.clearTracks("text"), this.resetCache_(), this.poster(""), this.loadTech_(this.options_.techOrder[0], null), this.techCall_("reset"), this.resetControlBarUI_(), Ee(this) && this.trigger("playerreset");
    }, e.resetControlBarUI_ = function () {
      this.resetProgressBar_(), this.resetPlaybackRate_(), this.resetVolumeBar_();
    }, e.resetProgressBar_ = function () {
      this.currentTime(0);var e = this.controlBar,
          t = e.durationDisplay,
          i = e.remainingTimeDisplay;t && t.updateContent(), i && i.updateContent();
    }, e.resetPlaybackRate_ = function () {
      this.playbackRate(this.defaultPlaybackRate()), this.handleTechRateChange_();
    }, e.resetVolumeBar_ = function () {
      this.volume(1), this.trigger("volumechange");
    }, e.currentSources = function () {
      var e = this.currentSource(),
          t = [];return 0 !== Object.keys(e).length && t.push(e), this.cache_.sources || t;
    }, e.currentSource = function () {
      return this.cache_.source || {};
    }, e.currentSrc = function () {
      return this.currentSource() && this.currentSource().src || "";
    }, e.currentType = function () {
      return this.currentSource() && this.currentSource().type || "";
    }, e.preload = function (e) {
      return void 0 !== e ? (this.techCall_("setPreload", e), void (this.options_.preload = e)) : this.techGet_("preload");
    }, e.autoplay = function (e) {
      if (void 0 === e) return this.options_.autoplay || !1;var t;"string" == typeof e && /(any|play|muted)/.test(e) ? (this.options_.autoplay = e, this.manualAutoplay_(e), t = !1) : this.options_.autoplay = !!e, t = "undefined" == typeof t ? this.options_.autoplay : t, this.tech_ && this.techCall_("setAutoplay", t);
    }, e.playsinline = function (e) {
      return void 0 !== e ? (this.techCall_("setPlaysinline", e), this.options_.playsinline = e, this) : this.techGet_("playsinline");
    }, e.loop = function (e) {
      return void 0 !== e ? (this.techCall_("setLoop", e), void (this.options_.loop = e)) : this.techGet_("loop");
    }, e.poster = function (e) {
      if (void 0 === e) return this.poster_;e || (e = ""), e !== this.poster_ && (this.poster_ = e, this.techCall_("setPoster", e), this.isPosterFromTech_ = !1, this.trigger("posterchange"));
    }, e.handleTechPosterChange_ = function () {
      if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {
        var e = this.tech_.poster() || "";e !== this.poster_ && (this.poster_ = e, this.isPosterFromTech_ = !0, this.trigger("posterchange"));
      }
    }, e.controls = function (e) {
      if (void 0 === e) return !!this.controls_;e = !!e, this.controls_ !== e && (this.controls_ = e, this.usingNativeControls() && this.techCall_("setControls", e), this.controls_ ? (this.removeClass("vjs-controls-disabled"), this.addClass("vjs-controls-enabled"), this.trigger("controlsenabled"), this.usingNativeControls() || this.addTechControlsListeners_()) : (this.removeClass("vjs-controls-enabled"), this.addClass("vjs-controls-disabled"), this.trigger("controlsdisabled"), this.usingNativeControls() || this.removeTechControlsListeners_()));
    }, e.usingNativeControls = function (e) {
      if (void 0 === e) return !!this.usingNativeControls_;e = !!e, this.usingNativeControls_ !== e && (this.usingNativeControls_ = e, this.usingNativeControls_ ? (this.addClass("vjs-using-native-controls"), this.trigger("usingnativecontrols")) : (this.removeClass("vjs-using-native-controls"), this.trigger("usingcustomcontrols")));
    }, e.error = function (e) {
      return void 0 === e ? this.error_ || null : null === e ? (this.error_ = e, this.removeClass("vjs-error"), void (this.errorDisplay && this.errorDisplay.close())) : (this.error_ = new Tt(e), this.addClass("vjs-error"), m.error("(CODE:" + this.error_.code + " " + Tt.errorTypes[this.error_.code] + ")", this.error_.message, this.error_), void this.trigger("error"));
    }, e.reportUserActivity = function (e) {
      this.userActivity_ = !0;
    }, e.userActive = function (e) {
      if (void 0 === e) return this.userActive_;if ((e = !!e) !== this.userActive_) {
        if (this.userActive_ = e, this.userActive_) return this.userActivity_ = !0, this.removeClass("vjs-user-inactive"), this.addClass("vjs-user-active"), void this.trigger("useractive");this.tech_ && this.tech_.one("mousemove", function (e) {
          e.stopPropagation(), e.preventDefault();
        }), this.userActivity_ = !1, this.removeClass("vjs-user-active"), this.addClass("vjs-user-inactive"), this.trigger("userinactive");
      }
    }, e.listenForUserActivity_ = function () {
      var t,
          i,
          n,
          r = ke(this, this.reportUserActivity);this.on("mousedown", function () {
        r(), this.clearInterval(t), t = this.setInterval(r, 250);
      }), this.on("mousemove", function (e) {
        e.screenX === i && e.screenY === n || (i = e.screenX, n = e.screenY, r());
      }), this.on("mouseup", function (e) {
        r(), this.clearInterval(t);
      });var a,
          e = this.getChild("controlBar");!e || $e || Je || (e.on("mouseenter", function (e) {
        this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout, this.player().options_.inactivityTimeout = 0;
      }), e.on("mouseleave", function (e) {
        this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;
      })), this.on("keydown", r), this.on("keyup", r), this.setInterval(function () {
        if (this.userActivity_) {
          this.userActivity_ = !1, this.userActive(!0), this.clearTimeout(a);var e = this.options_.inactivityTimeout;e <= 0 || (a = this.setTimeout(function () {
            this.userActivity_ || this.userActive(!1);
          }, e));
        }
      }, 250);
    }, e.playbackRate = function (e) {
      if (void 0 === e) return this.tech_ && this.tech_.featuresPlaybackRate ? this.cache_.lastPlaybackRate || this.techGet_("playbackRate") : 1;this.techCall_("setPlaybackRate", e);
    }, e.defaultPlaybackRate = function (e) {
      return void 0 !== e ? this.techCall_("setDefaultPlaybackRate", e) : this.tech_ && this.tech_.featuresPlaybackRate ? this.techGet_("defaultPlaybackRate") : 1;
    }, e.isAudio = function (e) {
      if (void 0 === e) return !!this.isAudio_;this.isAudio_ = !!e;
    }, e.addTextTrack = function (e, t, i) {
      if (this.tech_) return this.tech_.addTextTrack(e, t, i);
    }, e.addRemoteTextTrack = function (e, t) {
      if (this.tech_) return this.tech_.addRemoteTextTrack(e, t);
    }, e.removeRemoteTextTrack = function (e) {
      void 0 === e && (e = {});var t = e.track;if (t || (t = e), this.tech_) return this.tech_.removeRemoteTextTrack(t);
    }, e.getVideoPlaybackQuality = function () {
      return this.techGet_("getVideoPlaybackQuality");
    }, e.videoWidth = function () {
      return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
    }, e.videoHeight = function () {
      return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
    }, e.language = function (e) {
      if (void 0 === e) return this.language_;this.language_ = String(e).toLowerCase();
    }, e.languages = function () {
      return Ne(l.prototype.options_.languages, this.languages_);
    }, e.toJSON = function () {
      var e = Ne(this.options_),
          t = e.tracks;e.tracks = [];for (var i = 0; i < t.length; i++) {
        var n = t[i];(n = Ne(n)).player = void 0, e.tracks[i] = n;
      }return e;
    }, e.createModal = function (e, t) {
      var i = this;(t = t || {}).content = e || "";var n = new Ut(this, t);return this.addChild(n), n.on("dispose", function () {
        i.removeChild(n);
      }), n.open(), n;
    }, e.updateCurrentBreakpoint_ = function () {
      if (this.responsive()) for (var e = this.currentBreakpoint(), t = this.currentWidth(), i = 0; i < Cr.length; i++) {
        var n = Cr[i];if (t <= this.breakpoints_[n]) {
          if (e === n) return;e && this.removeClass(wr[e]), this.addClass(wr[n]), this.breakpoint_ = n;break;
        }
      }
    }, e.removeCurrentBreakpoint_ = function () {
      var e = this.currentBreakpointClass();this.breakpoint_ = "", e && this.removeClass(e);
    }, e.breakpoints = function (e) {
      return void 0 === e || (this.breakpoint_ = "", this.breakpoints_ = _({}, Er, e), this.updateCurrentBreakpoint_()), _(this.breakpoints_);
    }, e.responsive = function (e) {
      return void 0 === e ? this.responsive_ : (e = Boolean(e)) !== this.responsive_ ? ((this.responsive_ = e) ? (this.on("playerresize", this.updateCurrentBreakpoint_), this.updateCurrentBreakpoint_()) : (this.off("playerresize", this.updateCurrentBreakpoint_), this.removeCurrentBreakpoint_()), e) : void 0;
    }, e.currentBreakpoint = function () {
      return this.breakpoint_;
    }, e.currentBreakpointClass = function () {
      return wr[this.breakpoint_] || "";
    }, e.loadMedia = function (e, t) {
      var i = this;if (e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e))) {
        this.reset(), this.cache_.media = Ne(e);var n = this.cache_.media,
            r = n.artwork,
            a = n.poster,
            s = n.src,
            o = n.textTracks;!r && a && (this.cache_.media.artwork = [{ src: a, type: Ni(a) }]), s && this.src(s), a && this.poster(a), Array.isArray(o) && o.forEach(function (e) {
          return i.addRemoteTextTrack(e, !1);
        }), this.ready(t);
      }
    }, e.getMedia = function () {
      if (this.cache_.media) return Ne(this.cache_.media);var e = this.poster(),
          t = { src: this.currentSources(), textTracks: Array.prototype.map.call(this.remoteTextTracks(), function (e) {
          return { kind: e.kind, label: e.label, language: e.language, src: e.src };
        }) };return e && (t.poster = e, t.artwork = [{ src: t.poster, type: Ni(t.poster) }]), t;
    }, l.getTagSettings = function (e) {
      var t = { sources: [], tracks: [] },
          i = R(e),
          n = i["data-setup"];if (O(e, "vjs-fill") && (i.fill = !0), O(e, "vjs-fluid") && (i.fluid = !0), null !== n) {
        var r = kt(n || "{}"),
            a = r[0],
            s = r[1];a && m.error(a), _(i, s);
      }if (_(t, i), e.hasChildNodes()) for (var o = e.childNodes, u = 0, l = o.length; u < l; u++) {
        var c = o[u],
            d = c.nodeName.toLowerCase();"source" === d ? t.sources.push(R(c)) : "track" === d && t.tracks.push(R(c));
      }return t;
    }, e.flexNotSupported_ = function () {
      var e = d.createElement("i");return !("flexBasis" in e.style || "webkitFlexBasis" in e.style || "mozFlexBasis" in e.style || "msFlexBasis" in e.style || "msFlexOrder" in e.style);
    }, l;
  }(je);Ci.names.forEach(function (e) {
    var t = Ci[e];Ar.prototype[t.getterName] = function () {
      return this.tech_ ? this.tech_[t.getterName]() : (this[t.privateName] = this[t.privateName] || new t.ListClass(), this[t.privateName]);
    };
  }), Ar.players = {};var Lr = v.navigator;Ar.prototype.options_ = { techOrder: Ei.defaultTechOrder_, html5: {}, flash: {}, inactivityTimeout: 2e3, playbackRates: [], liveui: !1, children: ["mediaLoader", "posterImage", "textTrackDisplay", "loadingSpinner", "bigPlayButton", "liveTracker", "controlBar", "errorDisplay", "textTrackSettings", "resizeManager"], language: Lr && (Lr.languages && Lr.languages[0] || Lr.userLanguage || Lr.language) || "en", languages: {}, notSupportedMessage: "No compatible source was found for this media.", breakpoints: {}, responsive: !1 }, ["ended", "seeking", "seekable", "networkState", "readyState"].forEach(function (e) {
    Ar.prototype[e] = function () {
      return this.techGet_(e);
    };
  }), Sr.forEach(function (e) {
    Ar.prototype["handleTech" + Be(e) + "_"] = function () {
      return this.trigger(e);
    };
  }), je.registerComponent("Player", Ar);var Pr = "plugin",
      Or = "activePlugins_",
      Ir = {},
      Ur = function Ur(e) {
    return Ir.hasOwnProperty(e);
  },
      Dr = function Dr(e) {
    return Ur(e) ? Ir[e] : void 0;
  },
      xr = function xr(e, t) {
    e[Or] = e[Or] || {}, e[Or][t] = !0;
  },
      Rr = function Rr(e, t, i) {
    var n = (i ? "before" : "") + "pluginsetup";e.trigger(n, t), e.trigger(n + ":" + t.name, t);
  },
      Mr = function Mr(r, a) {
    return a.prototype.name = r, function () {
      Rr(this, { name: r, plugin: a, instance: null }, !0);for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
        t[i] = arguments[i];
      }var n = s(a, [this].concat(t));return this[r] = function () {
        return n;
      }, Rr(this, n.getEventHash()), n;
    };
  },
      Br = function () {
    function a(e) {
      if (this.constructor === a) throw new Error("Plugin must be sub-classed; not directly instantiated.");this.player = e, xe(this), delete this.trigger, Me(this, this.constructor.defaultState), xr(e, this.name), this.dispose = ke(this, this.dispose), e.on("dispose", this.dispose);
    }var e = a.prototype;return e.version = function () {
      return this.constructor.VERSION;
    }, e.getEventHash = function (e) {
      return void 0 === e && (e = {}), e.name = this.name, e.plugin = this.constructor, e.instance = this, e;
    }, e.trigger = function (e, t) {
      return void 0 === t && (t = {}), pe(this.eventBusEl_, e, this.getEventHash(t));
    }, e.handleStateChanged = function (e) {}, e.dispose = function () {
      var e = this.name,
          t = this.player;this.trigger("dispose"), this.off(), t.off("dispose", this.dispose), t[Or][e] = !1, this.player = this.state = null, t[e] = Mr(e, Ir[e]);
    }, a.isBasic = function (e) {
      var t = "string" == typeof e ? Dr(e) : e;return "function" == typeof t && !a.prototype.isPrototypeOf(t.prototype);
    }, a.registerPlugin = function (e, t) {
      if ("string" != typeof e) throw new Error('Illegal plugin name, "' + e + '", must be a string, was ' + (typeof e === "undefined" ? "undefined" : _typeof(e)) + ".");if (Ur(e)) m.warn('A plugin named "' + e + '" already exists. You may want to avoid re-registering plugins!');else if (Ar.prototype.hasOwnProperty(e)) throw new Error('Illegal plugin name, "' + e + '", cannot share a name with an existing player method!');if ("function" != typeof t) throw new Error('Illegal plugin for "' + e + '", must be a function, was ' + (typeof t === "undefined" ? "undefined" : _typeof(t)) + ".");var i, n, r;return Ir[e] = t, e !== Pr && (a.isBasic(t) ? Ar.prototype[e] = (i = e, n = t, r = function r() {
        Rr(this, { name: i, plugin: n, instance: null }, !0);var e = n.apply(this, arguments);return xr(this, i), Rr(this, { name: i, plugin: n, instance: e }), e;
      }, Object.keys(n).forEach(function (e) {
        r[e] = n[e];
      }), r) : Ar.prototype[e] = Mr(e, t)), t;
    }, a.deregisterPlugin = function (e) {
      if (e === Pr) throw new Error("Cannot de-register base plugin.");Ur(e) && (delete Ir[e], delete Ar.prototype[e]);
    }, a.getPlugins = function (e) {
      var i;return void 0 === e && (e = Object.keys(Ir)), e.forEach(function (e) {
        var t = Dr(e);t && ((i = i || {})[e] = t);
      }), i;
    }, a.getPluginVersion = function (e) {
      var t = Dr(e);return t && t.VERSION || "";
    }, a;
  }();Br.getPlugin = Dr, Br.BASE_PLUGIN_NAME = Pr, Br.registerPlugin(Pr, Br), Ar.prototype.usingPlugin = function (e) {
    return !!this[Or] && !0 === this[Or][e];
  }, Ar.prototype.hasPlugin = function (e) {
    return !!Ur(e);
  };var Nr = function Nr(e) {
    return 0 === e.indexOf("#") ? e.slice(1) : e;
  };function jr(e, i, t) {
    var n = jr.getPlayer(e);if (n) return i && m.warn('Player "' + e + '" is already initialised. Options will not be applied.'), t && n.ready(t), n;var r = "string" == typeof e ? $("#" + Nr(e)) : e;if (!C(r)) throw new TypeError("The element or ID supplied is not valid. (videojs)");r.ownerDocument.defaultView && r.ownerDocument.body.contains(r) || m.warn("The element supplied is not included in the DOM"), i = i || {}, jr.hooks("beforesetup").forEach(function (e) {
      var t = e(r, Ne(i));b(t) && !Array.isArray(t) ? i = Ne(i, t) : m.error("please return an object in beforesetup hooks");
    });var a = je.getComponent("Player");return n = new a(r, i, t), jr.hooks("setup").forEach(function (e) {
      return e(n);
    }), n;
  }if (jr.hooks_ = {}, jr.hooks = function (e, t) {
    return jr.hooks_[e] = jr.hooks_[e] || [], t && (jr.hooks_[e] = jr.hooks_[e].concat(t)), jr.hooks_[e];
  }, jr.hook = function (e, t) {
    jr.hooks(e, t);
  }, jr.hookOnce = function (i, e) {
    jr.hooks(i, [].concat(e).map(function (t) {
      return function e() {
        return jr.removeHook(i, e), t.apply(void 0, arguments);
      };
    }));
  }, jr.removeHook = function (e, t) {
    var i = jr.hooks(e).indexOf(t);return !(i <= -1) && (jr.hooks_[e] = jr.hooks_[e].slice(), jr.hooks_[e].splice(i, 1), !0);
  }, !0 !== v.VIDEOJS_NO_DYNAMIC_STYLE && k()) {
    var Fr = $(".vjs-styles-defaults");if (!Fr) {
      Fr = Te("vjs-styles-defaults");var Hr = $("head");Hr && Hr.insertBefore(Fr, Hr.firstChild), Se(Fr, "\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ");
    }
  }_e(1, jr), jr.VERSION = h, jr.options = Ar.prototype.options_, jr.getPlayers = function () {
    return Ar.players;
  }, jr.getPlayer = function (e) {
    var t,
        i = Ar.players;if ("string" == typeof e) {
      var n = Nr(e),
          r = i[n];if (r) return r;t = $("#" + n);
    } else t = e;if (C(t)) {
      var a = t,
          s = a.player,
          o = a.playerId;if (s || i[o]) return s || i[o];
    }
  }, jr.getAllPlayers = function () {
    return Object.keys(Ar.players).map(function (e) {
      return Ar.players[e];
    }).filter(Boolean);
  }, jr.players = Ar.players, jr.getComponent = je.getComponent, jr.registerComponent = function (e, t) {
    Ei.isTech(t) && m.warn("The " + e + " tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)"), je.registerComponent.call(je, e, t);
  }, jr.getTech = Ei.getTech, jr.registerTech = Ei.registerTech, jr.use = function (e, t) {
    Ai[e] = Ai[e] || [], Ai[e].push(t);
  }, Object.defineProperty(jr, "middleware", { value: {}, writeable: !1, enumerable: !0 }), Object.defineProperty(jr.middleware, "TERMINATOR", { value: Pi, writeable: !1, enumerable: !0 }), jr.browser = lt, jr.TOUCH_ENABLED = ut, jr.extend = function (e, t) {
    void 0 === t && (t = {});var i = function i() {
      e.apply(this, arguments);
    },
        n = {};for (var r in "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? (t.constructor !== Object.prototype.constructor && (i = t.constructor), n = t) : "function" == typeof t && (i = t), function (e, t) {
      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (e.super_ = t);
    }(i, e), n) {
      n.hasOwnProperty(r) && (i.prototype[r] = n[r]);
    }return i;
  }, jr.mergeOptions = Ne, jr.bind = ke, jr.registerPlugin = Br.registerPlugin, jr.deregisterPlugin = Br.deregisterPlugin, jr.plugin = function (e, t) {
    return m.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead"), Br.registerPlugin(e, t);
  }, jr.getPlugins = Br.getPlugins, jr.getPlugin = Br.getPlugin, jr.getPluginVersion = Br.getPluginVersion, jr.addLanguage = function (e, t) {
    var i;return e = ("" + e).toLowerCase(), jr.options.languages = Ne(jr.options.languages, ((i = {})[e] = t, i)), jr.options.languages[e];
  }, jr.log = m, jr.createLogger = g, jr.createTimeRange = jr.createTimeRanges = ht, jr.formatTime = tn, jr.setFormatTime = function (e) {
    en = e;
  }, jr.resetFormatTime = function () {
    en = Zi;
  }, jr.parseUrl = Xt, jr.isCrossOrigin = $t, jr.EventTarget = we, jr.on = de, jr.one = fe, jr.off = he, jr.trigger = pe, jr.xhr = pi, jr.TextTrack = vi, jr.AudioTrack = _i, jr.VideoTrack = bi, ["isEl", "isTextNode", "createEl", "hasClass", "addClass", "removeClass", "toggleClass", "setAttributes", "getAttributes", "emptyEl", "appendContent", "insertContent"].forEach(function (e) {
    jr[e] = function () {
      return m.warn("videojs." + e + "() is deprecated; use videojs.dom." + e + "() instead"), J[e].apply(null, arguments);
    };
  }), jr.computedStyle = n, jr.dom = J, jr.url = Qt;var Vr = Pt(function (e, t) {
    var i, c, n, r, d;i = /^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/\?#]*\/)*.*?)??(;.*?)?(\?.*?)?(#.*?)?$/, c = /^([^\/?#]*)(.*)$/, n = /(?:\/|^)\.(?=\/)/g, r = /(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g, d = { buildAbsoluteURL: function buildAbsoluteURL(e, t, i) {
        if (i = i || {}, e = e.trim(), !(t = t.trim())) {
          if (!i.alwaysNormalize) return e;var n = d.parseURL(e);if (!n) throw new Error("Error trying to parse base URL.");return n.path = d.normalizePath(n.path), d.buildURLFromParts(n);
        }var r = d.parseURL(t);if (!r) throw new Error("Error trying to parse relative URL.");if (r.scheme) return i.alwaysNormalize ? (r.path = d.normalizePath(r.path), d.buildURLFromParts(r)) : t;var a = d.parseURL(e);if (!a) throw new Error("Error trying to parse base URL.");if (!a.netLoc && a.path && "/" !== a.path[0]) {
          var s = c.exec(a.path);a.netLoc = s[1], a.path = s[2];
        }a.netLoc && !a.path && (a.path = "/");var o = { scheme: a.scheme, netLoc: r.netLoc, path: null, params: r.params, query: r.query, fragment: r.fragment };if (!r.netLoc && (o.netLoc = a.netLoc, "/" !== r.path[0])) if (r.path) {
          var u = a.path,
              l = u.substring(0, u.lastIndexOf("/") + 1) + r.path;o.path = d.normalizePath(l);
        } else o.path = a.path, r.params || (o.params = a.params, r.query || (o.query = a.query));return null === o.path && (o.path = i.alwaysNormalize ? d.normalizePath(r.path) : r.path), d.buildURLFromParts(o);
      }, parseURL: function parseURL(e) {
        var t = i.exec(e);return t ? { scheme: t[1] || "", netLoc: t[2] || "", path: t[3] || "", params: t[4] || "", query: t[5] || "", fragment: t[6] || "" } : null;
      }, normalizePath: function normalizePath(e) {
        for (e = e.split("").reverse().join("").replace(n, ""); e.length !== (e = e.replace(r, "")).length;) {}return e.split("").reverse().join("");
      }, buildURLFromParts: function buildURLFromParts(e) {
        return e.scheme + e.netLoc + e.path + e.params + e.query + e.fragment;
      } }, e.exports = d;
  });
  /*! @name m3u8-parser @version 4.3.0 @license Apache-2.0 */function qr() {
    return (qr = Object.assign || function (e) {
      for (var t = 1; t < arguments.length; t++) {
        var i = arguments[t];for (var n in i) {
          Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n]);
        }
      }return e;
    }).apply(this, arguments);
  }function zr(e, t) {
    e.prototype = Object.create(t.prototype), (e.prototype.constructor = e).__proto__ = t;
  }function Wr(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e;
  }var Gr = function () {
    function e() {
      this.listeners = {};
    }var t = e.prototype;return t.on = function (e, t) {
      this.listeners[e] || (this.listeners[e] = []), this.listeners[e].push(t);
    }, t.off = function (e, t) {
      if (!this.listeners[e]) return !1;var i = this.listeners[e].indexOf(t);return this.listeners[e].splice(i, 1), -1 < i;
    }, t.trigger = function (e) {
      var t,
          i,
          n,
          r = this.listeners[e];if (r) if (2 === arguments.length) for (i = r.length, t = 0; t < i; ++t) {
        r[t].call(this, arguments[1]);
      } else for (n = Array.prototype.slice.call(arguments, 1), i = r.length, t = 0; t < i; ++t) {
        r[t].apply(this, n);
      }
    }, t.dispose = function () {
      this.listeners = {};
    }, t.pipe = function (t) {
      this.on("data", function (e) {
        t.push(e);
      });
    }, e;
  }(),
      Xr = function (t) {
    function e() {
      var e;return (e = t.call(this) || this).buffer = "", e;
    }return zr(e, t), e.prototype.push = function (e) {
      var t;for (this.buffer += e, t = this.buffer.indexOf("\n"); -1 < t; t = this.buffer.indexOf("\n")) {
        this.trigger("data", this.buffer.substring(0, t)), this.buffer = this.buffer.substring(t + 1);
      }
    }, e;
  }(Gr),
      Kr = function Kr(e) {
    for (var t, i = e.split(new RegExp('(?:^|,)((?:[^=]*)=(?:"[^"]*"|[^,]*))')), n = {}, r = i.length; r--;) {
      "" !== i[r] && ((t = /([^=]*)=(.*)/.exec(i[r]).slice(1))[0] = t[0].replace(/^\s+|\s+$/g, ""), t[1] = t[1].replace(/^\s+|\s+$/g, ""), t[1] = t[1].replace(/^['"](.*)['"]$/g, "$1"), n[t[0]] = t[1]);
    }return n;
  },
      Yr = function (t) {
    function e() {
      var e;return (e = t.call(this) || this).customParsers = [], e.tagMappers = [], e;
    }zr(e, t);var i = e.prototype;return i.push = function (n) {
      var u,
          l,
          c = this;0 !== (n = n.trim()).length && ("#" === n[0] ? this.tagMappers.reduce(function (e, t) {
        var i = t(n);return i === n ? e : e.concat([i]);
      }, [n]).forEach(function (e) {
        for (var t = 0; t < c.customParsers.length; t++) {
          if (c.customParsers[t].call(c, e)) return;
        }if (0 === e.indexOf("#EXT")) {
          if (e = e.replace("\r", ""), u = /^#EXTM3U/.exec(e)) c.trigger("data", { type: "tag", tagType: "m3u" });else {
            if (u = /^#EXTINF:?([0-9\.]*)?,?(.*)?$/.exec(e)) return l = { type: "tag", tagType: "inf" }, u[1] && (l.duration = parseFloat(u[1])), u[2] && (l.title = u[2]), void c.trigger("data", l);if (u = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(e)) return l = { type: "tag", tagType: "targetduration" }, u[1] && (l.duration = parseInt(u[1], 10)), void c.trigger("data", l);if (u = /^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(e)) return l = { type: "tag", tagType: "totalduration" }, u[1] && (l.duration = parseInt(u[1], 10)), void c.trigger("data", l);if (u = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(e)) return l = { type: "tag", tagType: "version" }, u[1] && (l.version = parseInt(u[1], 10)), void c.trigger("data", l);if (u = /^#EXT-X-MEDIA-SEQUENCE:?(\-?[0-9.]*)?/.exec(e)) return l = { type: "tag", tagType: "media-sequence" }, u[1] && (l.number = parseInt(u[1], 10)), void c.trigger("data", l);if (u = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\-?[0-9.]*)?/.exec(e)) return l = { type: "tag", tagType: "discontinuity-sequence" }, u[1] && (l.number = parseInt(u[1], 10)), void c.trigger("data", l);if (u = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(e)) return l = { type: "tag", tagType: "playlist-type" }, u[1] && (l.playlistType = u[1]), void c.trigger("data", l);if (u = /^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(e)) return l = { type: "tag", tagType: "byterange" }, u[1] && (l.length = parseInt(u[1], 10)), u[2] && (l.offset = parseInt(u[2], 10)), void c.trigger("data", l);if (u = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(e)) return l = { type: "tag", tagType: "allow-cache" }, u[1] && (l.allowed = !/NO/.test(u[1])), void c.trigger("data", l);if (u = /^#EXT-X-MAP:?(.*)$/.exec(e)) {
              if (l = { type: "tag", tagType: "map" }, u[1]) {
                var i = Kr(u[1]);if (i.URI && (l.uri = i.URI), i.BYTERANGE) {
                  var n = i.BYTERANGE.split("@"),
                      r = n[0],
                      a = n[1];l.byterange = {}, r && (l.byterange.length = parseInt(r, 10)), a && (l.byterange.offset = parseInt(a, 10));
                }
              }c.trigger("data", l);
            } else if (u = /^#EXT-X-STREAM-INF:?(.*)$/.exec(e)) {
              if (l = { type: "tag", tagType: "stream-inf" }, u[1]) {
                if (l.attributes = Kr(u[1]), l.attributes.RESOLUTION) {
                  var s = l.attributes.RESOLUTION.split("x"),
                      o = {};s[0] && (o.width = parseInt(s[0], 10)), s[1] && (o.height = parseInt(s[1], 10)), l.attributes.RESOLUTION = o;
                }l.attributes.BANDWIDTH && (l.attributes.BANDWIDTH = parseInt(l.attributes.BANDWIDTH, 10)), l.attributes["PROGRAM-ID"] && (l.attributes["PROGRAM-ID"] = parseInt(l.attributes["PROGRAM-ID"], 10));
              }c.trigger("data", l);
            } else {
              if (u = /^#EXT-X-MEDIA:?(.*)$/.exec(e)) return l = { type: "tag", tagType: "media" }, u[1] && (l.attributes = Kr(u[1])), void c.trigger("data", l);if (u = /^#EXT-X-ENDLIST/.exec(e)) c.trigger("data", { type: "tag", tagType: "endlist" });else if (u = /^#EXT-X-DISCONTINUITY/.exec(e)) c.trigger("data", { type: "tag", tagType: "discontinuity" });else {
                if (u = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(e)) return l = { type: "tag", tagType: "program-date-time" }, u[1] && (l.dateTimeString = u[1], l.dateTimeObject = new Date(u[1])), void c.trigger("data", l);if (u = /^#EXT-X-KEY:?(.*)$/.exec(e)) return l = { type: "tag", tagType: "key" }, u[1] && (l.attributes = Kr(u[1]), l.attributes.IV && ("0x" === l.attributes.IV.substring(0, 2).toLowerCase() && (l.attributes.IV = l.attributes.IV.substring(2)), l.attributes.IV = l.attributes.IV.match(/.{8}/g), l.attributes.IV[0] = parseInt(l.attributes.IV[0], 16), l.attributes.IV[1] = parseInt(l.attributes.IV[1], 16), l.attributes.IV[2] = parseInt(l.attributes.IV[2], 16), l.attributes.IV[3] = parseInt(l.attributes.IV[3], 16), l.attributes.IV = new Uint32Array(l.attributes.IV))), void c.trigger("data", l);if (u = /^#EXT-X-START:?(.*)$/.exec(e)) return l = { type: "tag", tagType: "start" }, u[1] && (l.attributes = Kr(u[1]), l.attributes["TIME-OFFSET"] = parseFloat(l.attributes["TIME-OFFSET"]), l.attributes.PRECISE = /YES/.test(l.attributes.PRECISE)), void c.trigger("data", l);if (u = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(e)) return l = { type: "tag", tagType: "cue-out-cont" }, u[1] ? l.data = u[1] : l.data = "", void c.trigger("data", l);if (u = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(e)) return l = { type: "tag", tagType: "cue-out" }, u[1] ? l.data = u[1] : l.data = "", void c.trigger("data", l);if (u = /^#EXT-X-CUE-IN:?(.*)?$/.exec(e)) return l = { type: "tag", tagType: "cue-in" }, u[1] ? l.data = u[1] : l.data = "", void c.trigger("data", l);c.trigger("data", { type: "tag", data: e.slice(4) });
              }
            }
          }
        } else c.trigger("data", { type: "comment", text: e.slice(1) });
      }) : this.trigger("data", { type: "uri", uri: n }));
    }, i.addParser = function (e) {
      var t = this,
          i = e.expression,
          n = e.customType,
          r = e.dataParser,
          a = e.segment;"function" != typeof r && (r = function r(e) {
        return e;
      }), this.customParsers.push(function (e) {
        if (i.exec(e)) return t.trigger("data", { type: "custom", data: r(e), customType: n, segment: a }), !0;
      });
    }, i.addTagMapper = function (e) {
      var t = e.expression,
          i = e.map;this.tagMappers.push(function (e) {
        return t.test(e) ? i(e) : e;
      });
    }, e;
  }(Gr),
      $r = function (t) {
    function e() {
      var e;(e = t.call(this) || this).lineStream = new Xr(), e.parseStream = new Yr(), e.lineStream.pipe(e.parseStream);var r,
          a,
          s = Wr(Wr(e)),
          o = [],
          u = {},
          l = { AUDIO: {}, VIDEO: {}, "CLOSED-CAPTIONS": {}, SUBTITLES: {} },
          c = 0;return e.manifest = { allowCache: !0, discontinuityStarts: [], segments: [] }, e.parseStream.on("data", function (t) {
        var i, n;({ tag: function tag() {
            (({ "allow-cache": function allowCache() {
                this.manifest.allowCache = t.allowed, "allowed" in t || (this.trigger("info", { message: "defaulting allowCache to YES" }), this.manifest.allowCache = !0);
              }, byterange: function byterange() {
                var e = {};"length" in t && ((u.byterange = e).length = t.length, "offset" in t || (this.trigger("info", { message: "defaulting offset to zero" }), t.offset = 0)), "offset" in t && ((u.byterange = e).offset = t.offset);
              }, endlist: function endlist() {
                this.manifest.endList = !0;
              }, inf: function inf() {
                "mediaSequence" in this.manifest || (this.manifest.mediaSequence = 0, this.trigger("info", { message: "defaulting media sequence to zero" })), "discontinuitySequence" in this.manifest || (this.manifest.discontinuitySequence = 0, this.trigger("info", { message: "defaulting discontinuity sequence to zero" })), 0 < t.duration && (u.duration = t.duration), 0 === t.duration && (u.duration = .01, this.trigger("info", { message: "updating zero segment duration to a small value" })), this.manifest.segments = o;
              }, key: function key() {
                t.attributes ? "NONE" !== t.attributes.METHOD ? t.attributes.URI ? (t.attributes.METHOD || this.trigger("warn", { message: "defaulting key method to AES-128" }), a = { method: t.attributes.METHOD || "AES-128", uri: t.attributes.URI }, "undefined" != typeof t.attributes.IV && (a.iv = t.attributes.IV)) : this.trigger("warn", { message: "ignoring key declaration without URI" }) : a = null : this.trigger("warn", { message: "ignoring key declaration without attribute list" });
              }, "media-sequence": function mediaSequence() {
                isFinite(t.number) ? this.manifest.mediaSequence = t.number : this.trigger("warn", { message: "ignoring invalid media sequence: " + t.number });
              }, "discontinuity-sequence": function discontinuitySequence() {
                isFinite(t.number) ? (this.manifest.discontinuitySequence = t.number, c = t.number) : this.trigger("warn", { message: "ignoring invalid discontinuity sequence: " + t.number });
              }, "playlist-type": function playlistType() {
                /VOD|EVENT/.test(t.playlistType) ? this.manifest.playlistType = t.playlistType : this.trigger("warn", { message: "ignoring unknown playlist type: " + t.playlist });
              }, map: function map() {
                r = {}, t.uri && (r.uri = t.uri), t.byterange && (r.byterange = t.byterange);
              }, "stream-inf": function streamInf() {
                this.manifest.playlists = o, this.manifest.mediaGroups = this.manifest.mediaGroups || l, t.attributes ? (u.attributes || (u.attributes = {}), qr(u.attributes, t.attributes)) : this.trigger("warn", { message: "ignoring empty stream-inf attributes" });
              }, media: function media() {
                if (this.manifest.mediaGroups = this.manifest.mediaGroups || l, t.attributes && t.attributes.TYPE && t.attributes["GROUP-ID"] && t.attributes.NAME) {
                  var e = this.manifest.mediaGroups[t.attributes.TYPE];e[t.attributes["GROUP-ID"]] = e[t.attributes["GROUP-ID"]] || {}, i = e[t.attributes["GROUP-ID"]], (n = { default: /yes/i.test(t.attributes.DEFAULT) }).default ? n.autoselect = !0 : n.autoselect = /yes/i.test(t.attributes.AUTOSELECT), t.attributes.LANGUAGE && (n.language = t.attributes.LANGUAGE), t.attributes.URI && (n.uri = t.attributes.URI), t.attributes["INSTREAM-ID"] && (n.instreamId = t.attributes["INSTREAM-ID"]), t.attributes.CHARACTERISTICS && (n.characteristics = t.attributes.CHARACTERISTICS), t.attributes.FORCED && (n.forced = /yes/i.test(t.attributes.FORCED)), i[t.attributes.NAME] = n;
                } else this.trigger("warn", { message: "ignoring incomplete or missing media group" });
              }, discontinuity: function discontinuity() {
                c += 1, u.discontinuity = !0, this.manifest.discontinuityStarts.push(o.length);
              }, "program-date-time": function programDateTime() {
                "undefined" == typeof this.manifest.dateTimeString && (this.manifest.dateTimeString = t.dateTimeString, this.manifest.dateTimeObject = t.dateTimeObject), u.dateTimeString = t.dateTimeString, u.dateTimeObject = t.dateTimeObject;
              }, targetduration: function targetduration() {
                !isFinite(t.duration) || t.duration < 0 ? this.trigger("warn", { message: "ignoring invalid target duration: " + t.duration }) : this.manifest.targetDuration = t.duration;
              }, totalduration: function totalduration() {
                !isFinite(t.duration) || t.duration < 0 ? this.trigger("warn", { message: "ignoring invalid total duration: " + t.duration }) : this.manifest.totalDuration = t.duration;
              }, start: function start() {
                t.attributes && !isNaN(t.attributes["TIME-OFFSET"]) ? this.manifest.start = { timeOffset: t.attributes["TIME-OFFSET"], precise: t.attributes.PRECISE } : this.trigger("warn", { message: "ignoring start declaration without appropriate attribute list" });
              }, "cue-out": function cueOut() {
                u.cueOut = t.data;
              }, "cue-out-cont": function cueOutCont() {
                u.cueOutCont = t.data;
              }, "cue-in": function cueIn() {
                u.cueIn = t.data;
              } })[t.tagType] || function () {}).call(s);
          }, uri: function uri() {
            u.uri = t.uri, o.push(u), !this.manifest.targetDuration || "duration" in u || (this.trigger("warn", { message: "defaulting segment duration to the target duration" }), u.duration = this.manifest.targetDuration), a && (u.key = a), u.timeline = c, r && (u.map = r), u = {};
          }, comment: function comment() {}, custom: function custom() {
            t.segment ? (u.custom = u.custom || {}, u.custom[t.customType] = t.data) : (this.manifest.custom = this.manifest.custom || {}, this.manifest.custom[t.customType] = t.data);
          } })[t.type].call(s);
      }), e;
    }zr(e, t);var i = e.prototype;return i.push = function (e) {
      this.lineStream.push(e);
    }, i.end = function () {
      this.lineStream.push("\n");
    }, i.addParser = function (e) {
      this.parseStream.addParser(e);
    }, i.addTagMapper = function (e) {
      this.parseStream.addTagMapper(e);
    }, e;
  }(Gr),
      Qr = function Qr(e) {
    return !!e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e));
  },
      Jr = function n() {
    for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
      t[i] = arguments[i];
    }return t.reduce(function (t, i) {
      return Object.keys(i).forEach(function (e) {
        Array.isArray(t[e]) && Array.isArray(i[e]) ? t[e] = t[e].concat(i[e]) : Qr(t[e]) && Qr(i[e]) ? t[e] = n(t[e], i[e]) : t[e] = i[e];
      }), t;
    }, {});
  },
      Zr = function Zr(e) {
    return e.reduce(function (e, t) {
      return e.concat(t);
    }, []);
  },
      ea = function ea(e) {
    if (!e.length) return [];for (var t = [], i = 0; i < e.length; i++) {
      t.push(e[i]);
    }return t;
  },
      ta = function ta(e) {
    var t;return (t = e.reduce(function (e, t) {
      var i,
          n = t.attributes.id + (t.attributes.lang || "");e[n] ? (t.segments[0].discontinuity = !0, (i = e[n].segments).push.apply(i, t.segments), t.attributes.contentProtection && (e[n].attributes.contentProtection = t.attributes.contentProtection)) : e[n] = t;return e;
    }, {}), Object.keys(t).map(function (e) {
      return t[e];
    })).map(function (e) {
      var t, n;return e.discontinuityStarts = (t = e.segments, n = "discontinuity", t.reduce(function (e, t, i) {
        return t[n] && e.push(i), e;
      }, [])), e;
    });
  },
      ia = function ia(e) {
    var t,
        i = e.attributes,
        n = e.segments,
        r = { attributes: (t = { NAME: i.id, AUDIO: "audio", SUBTITLES: "subs", RESOLUTION: { width: i.width, height: i.height }, CODECS: i.codecs, BANDWIDTH: i.bandwidth }, t["PROGRAM-ID"] = 1, t), uri: "", endList: "static" === (i.type || "static"), timeline: i.periodIndex, resolvedUri: "", targetDuration: i.duration, segments: n, mediaSequence: n.length ? n[0].number : 1 };return i.contentProtection && (r.contentProtection = i.contentProtection), r;
  };"undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self && self;var na,
      ra = (function (e, t) {
    var i, c, n, r, d;i = /^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/\?#]*\/)*.*?)??(;.*?)?(\?.*?)?(#.*?)?$/, c = /^([^\/?#]*)(.*)$/, n = /(?:\/|^)\.(?=\/)/g, r = /(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g, d = { buildAbsoluteURL: function buildAbsoluteURL(e, t, i) {
        if (i = i || {}, e = e.trim(), !(t = t.trim())) {
          if (!i.alwaysNormalize) return e;var n = d.parseURL(e);if (!n) throw new Error("Error trying to parse base URL.");return n.path = d.normalizePath(n.path), d.buildURLFromParts(n);
        }var r = d.parseURL(t);if (!r) throw new Error("Error trying to parse relative URL.");if (r.scheme) return i.alwaysNormalize ? (r.path = d.normalizePath(r.path), d.buildURLFromParts(r)) : t;var a = d.parseURL(e);if (!a) throw new Error("Error trying to parse base URL.");if (!a.netLoc && a.path && "/" !== a.path[0]) {
          var s = c.exec(a.path);a.netLoc = s[1], a.path = s[2];
        }a.netLoc && !a.path && (a.path = "/");var o = { scheme: a.scheme, netLoc: r.netLoc, path: null, params: r.params, query: r.query, fragment: r.fragment };if (!r.netLoc && (o.netLoc = a.netLoc, "/" !== r.path[0])) if (r.path) {
          var u = a.path,
              l = u.substring(0, u.lastIndexOf("/") + 1) + r.path;o.path = d.normalizePath(l);
        } else o.path = a.path, r.params || (o.params = a.params, r.query || (o.query = a.query));return null === o.path && (o.path = i.alwaysNormalize ? d.normalizePath(r.path) : r.path), d.buildURLFromParts(o);
      }, parseURL: function parseURL(e) {
        var t = i.exec(e);return t ? { scheme: t[1] || "", netLoc: t[2] || "", path: t[3] || "", params: t[4] || "", query: t[5] || "", fragment: t[6] || "" } : null;
      }, normalizePath: function normalizePath(e) {
        for (e = e.split("").reverse().join("").replace(n, ""); e.length !== (e = e.replace(r, "")).length;) {}return e.split("").reverse().join("");
      }, buildURLFromParts: function buildURLFromParts(e) {
        return e.scheme + e.netLoc + e.path + e.params + e.query + e.fragment;
      } }, e.exports = d;
  }(na = { exports: {} }, na.exports), na.exports),
      aa = function aa(e, t) {
    return (/^[a-z]+:/i.test(t) ? t : (/\/\//i.test(e) || (e = ra.buildAbsoluteURL(v.location.href, e)), ra.buildAbsoluteURL(e, t))
    );
  },
      sa = function sa(e) {
    var t = e.baseUrl,
        i = void 0 === t ? "" : t,
        n = e.source,
        r = void 0 === n ? "" : n,
        a = e.range,
        s = void 0 === a ? "" : a,
        o = { uri: r, resolvedUri: aa(i || "", r) };if (s) {
      var u = s.split("-"),
          l = parseInt(u[0], 10),
          c = parseInt(u[1], 10);o.byterange = { length: c - l, offset: l };
    }return o;
  },
      oa = function oa(e, t) {
    for (var i, n, r, a, s, o, u, l, c, d, h, p, f = e.type, m = void 0 === f ? "static" : f, g = e.minimumUpdatePeriod, y = void 0 === g ? 0 : g, v = e.media, _ = void 0 === v ? "" : v, b = e.sourceDuration, T = e.timescale, S = void 0 === T ? 1 : T, k = e.startNumber, C = void 0 === k ? 1 : k, w = e.periodIndex, E = [], A = -1, L = 0; L < t.length; L++) {
      var P = t[L],
          O = P.d,
          I = P.r || 0,
          U = P.t || 0;A < 0 && (A = U), U && A < U && (A = U);var D = void 0;if (I < 0) {
        var x = L + 1;D = x === t.length ? "dynamic" === m && 0 < y && 0 < _.indexOf("$Number$") ? (n = A, r = O, void 0, a = (i = e).NOW, s = i.clientOffset, o = i.availabilityStartTime, u = i.timescale, l = void 0 === u ? 1 : u, c = i.start, d = void 0 === c ? 0 : c, h = i.minimumUpdatePeriod, p = (a + s) / 1e3 + (void 0 === h ? 0 : h) - (o + d), Math.ceil((p * l - n) / r)) : (b * S - A) / O : (t[x].t - A) / O;
      } else D = I + 1;for (var R = C + E.length + D, M = C + E.length; M < R;) {
        E.push({ number: M, duration: O / S, time: A, timeline: w }), A += O, M++;
      }
    }return E;
  },
      ua = { static: function _static(e) {
      var t = e.duration,
          i = e.timescale,
          n = void 0 === i ? 1 : i,
          r = e.sourceDuration;return { start: 0, end: Math.ceil(r / (t / n)) };
    }, dynamic: function dynamic(e) {
      var t = e.NOW,
          i = e.clientOffset,
          n = e.availabilityStartTime,
          r = e.timescale,
          a = void 0 === r ? 1 : r,
          s = e.duration,
          o = e.start,
          u = void 0 === o ? 0 : o,
          l = e.minimumUpdatePeriod,
          c = void 0 === l ? 0 : l,
          d = e.timeShiftBufferDepth,
          h = void 0 === d ? 1 / 0 : d,
          p = (t + i) / 1e3,
          f = n + u,
          m = p + c - f,
          g = Math.ceil(m * a / s),
          y = Math.floor((p - f - h) * a / s),
          v = Math.floor((p - f) * a / s);return { start: Math.max(0, y), end: Math.min(g, v) };
    } },
      la = function la(e) {
    var o,
        t = e.type,
        i = void 0 === t ? "static" : t,
        n = e.duration,
        r = e.timescale,
        a = void 0 === r ? 1 : r,
        s = e.sourceDuration,
        u = ua[i](e),
        l = function (e, t) {
      for (var i = [], n = e; n < t; n++) {
        i.push(n);
      }return i;
    }(u.start, u.end).map((o = e, function (e, t) {
      var i = o.duration,
          n = o.timescale,
          r = void 0 === n ? 1 : n,
          a = o.periodIndex,
          s = o.startNumber;return { number: (void 0 === s ? 1 : s) + e, duration: i / r, timeline: a, time: t * i };
    }));if ("static" === i) {
      var c = l.length - 1;l[c].duration = s - n / a * c;
    }return l;
  },
      ca = /\$([A-z]*)(?:(%0)([0-9]+)d)?\$/g,
      da = function da(e, t) {
    return e.replace(ca, (a = t, function (e, t, i, n) {
      if ("$$" === e) return "$";if ("undefined" == typeof a[t]) return e;var r = "" + a[t];return "RepresentationID" === t ? r : (n = i ? parseInt(n, 10) : 1) <= r.length ? r : "" + new Array(n - r.length + 1).join("0") + r;
    }));var a;
  },
      ha = function ha(i, e) {
    var t,
        n,
        r = { RepresentationID: i.id, Bandwidth: i.bandwidth || 0 },
        a = i.initialization,
        s = void 0 === a ? { sourceURL: "", range: "" } : a,
        o = sa({ baseUrl: i.baseUrl, source: da(s.sourceURL, r), range: s.range });return (n = e, (t = i).duration || n ? t.duration ? la(t) : oa(t, n) : [{ number: t.startNumber || 1, duration: t.sourceDuration, time: 0, timeline: t.periodIndex }]).map(function (e) {
      r.Number = e.number, r.Time = e.time;var t = da(i.media || "", r);return { uri: t, timeline: e.timeline, duration: e.duration, resolvedUri: aa(i.baseUrl || "", t), map: o, number: e.number };
    });
  },
      pa = "INVALID_NUMBER_OF_PERIOD",
      fa = "DASH_EMPTY_MANIFEST",
      ma = "DASH_INVALID_XML",
      ga = "NO_BASE_URL",
      ya = "SEGMENT_TIME_UNSPECIFIED",
      va = "UNSUPPORTED_UTC_TIMING_SCHEME",
      _a = function _a(u, e) {
    var t = u.duration,
        i = u.segmentUrls,
        n = void 0 === i ? [] : i;if (!t && !e || t && e) throw new Error(ya);var r,
        a = n.map(function (e) {
      return i = e, n = (t = u).baseUrl, r = t.initialization, s = sa({ baseUrl: n, source: (a = void 0 === r ? {} : r).sourceURL, range: a.range }), (o = sa({ baseUrl: n, source: i.media, range: i.mediaRange })).map = s, o;var t, i, n, r, a, s, o;
    });return t && (r = la(u)), e && (r = oa(u, e)), r.map(function (e, t) {
      if (a[t]) {
        var i = a[t];return i.timeline = e.timeline, i.duration = e.duration, i.number = e.number, i;
      }
    }).filter(function (e) {
      return e;
    });
  },
      ba = function ba(e) {
    var t = e.baseUrl,
        i = e.initialization,
        n = void 0 === i ? {} : i,
        r = e.sourceDuration,
        a = e.timescale,
        s = void 0 === a ? 1 : a,
        o = e.indexRange,
        u = void 0 === o ? "" : o,
        l = e.duration;if (!t) throw new Error(ga);var c = sa({ baseUrl: t, source: n.sourceURL, range: n.range }),
        d = sa({ baseUrl: t, source: t, range: u });if (d.map = c, l) {
      var h = la(e);h.length && (d.duration = h[0].duration, d.timeline = h[0].timeline);
    } else r && (d.duration = r / s, d.timeline = 0);return d.number = 0, [d];
  },
      Ta = function Ta(e) {
    var t,
        i,
        n = e.attributes,
        r = e.segmentInfo;if (r.template ? (i = ha, t = Jr(n, r.template)) : r.base ? (i = ba, t = Jr(n, r.base)) : r.list && (i = _a, t = Jr(n, r.list)), !i) return { attributes: n };var a = i(t, r.timeline);if (t.duration) {
      var s = t,
          o = s.duration,
          u = s.timescale,
          l = void 0 === u ? 1 : u;t.duration = o / l;
    } else a.length ? t.duration = a.reduce(function (e, t) {
      return Math.max(e, Math.ceil(t.duration));
    }, 0) : t.duration = 0;return { attributes: t, segments: a };
  },
      Sa = function Sa(e, t) {
    return ea(e.childNodes).filter(function (e) {
      return e.tagName === t;
    });
  },
      ka = function ka(e) {
    return e.textContent.trim();
  },
      Ca = function Ca(e) {
    var t = /P(?:(\d*)Y)?(?:(\d*)M)?(?:(\d*)D)?(?:T(?:(\d*)H)?(?:(\d*)M)?(?:([\d.]*)S)?)?/.exec(e);if (!t) return 0;var i = t.slice(1),
        n = i[0],
        r = i[1],
        a = i[2],
        s = i[3],
        o = i[4],
        u = i[5];return 31536e3 * parseFloat(n || 0) + 2592e3 * parseFloat(r || 0) + 86400 * parseFloat(a || 0) + 3600 * parseFloat(s || 0) + 60 * parseFloat(o || 0) + parseFloat(u || 0);
  },
      wa = { mediaPresentationDuration: function mediaPresentationDuration(e) {
      return Ca(e);
    }, availabilityStartTime: function availabilityStartTime(e) {
      return (/^\d+-\d+-\d+T\d+:\d+:\d+(\.\d+)?$/.test(t = e) && (t += "Z"), Date.parse(t) / 1e3
      );var t;
    }, minimumUpdatePeriod: function minimumUpdatePeriod(e) {
      return Ca(e);
    }, timeShiftBufferDepth: function timeShiftBufferDepth(e) {
      return Ca(e);
    }, start: function start(e) {
      return Ca(e);
    }, width: function width(e) {
      return parseInt(e, 10);
    }, height: function height(e) {
      return parseInt(e, 10);
    }, bandwidth: function bandwidth(e) {
      return parseInt(e, 10);
    }, startNumber: function startNumber(e) {
      return parseInt(e, 10);
    }, timescale: function timescale(e) {
      return parseInt(e, 10);
    }, duration: function duration(e) {
      var t = parseInt(e, 10);return isNaN(t) ? Ca(e) : t;
    }, d: function d(e) {
      return parseInt(e, 10);
    }, t: function t(e) {
      return parseInt(e, 10);
    }, r: function r(e) {
      return parseInt(e, 10);
    }, DEFAULT: function DEFAULT(e) {
      return e;
    } },
      Ea = function Ea(e) {
    return e && e.attributes ? ea(e.attributes).reduce(function (e, t) {
      var i = wa[t.name] || wa.DEFAULT;return e[t.name] = i(t.value), e;
    }, {}) : {};
  };var _Aa,
      La,
      Pa,
      Oa,
      Ia,
      Ua = { "urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b": "org.w3.clearkey", "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed": "com.widevine.alpha", "urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95": "com.microsoft.playready", "urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb": "com.adobe.primetime" },
      Da = function Da(e, i) {
    return i.length ? Zr(e.map(function (t) {
      return i.map(function (e) {
        return aa(t, ka(e));
      });
    })) : e;
  },
      xa = function xa(e) {
    var t = Sa(e, "SegmentTemplate")[0],
        i = Sa(e, "SegmentList")[0],
        n = i && Sa(i, "SegmentURL").map(function (e) {
      return Jr({ tag: "SegmentURL" }, Ea(e));
    }),
        r = Sa(e, "SegmentBase")[0],
        a = i || t,
        s = a && Sa(a, "SegmentTimeline")[0],
        o = i || r || t,
        u = o && Sa(o, "Initialization")[0],
        l = t && Ea(t);l && u ? l.initialization = u && Ea(u) : l && l.initialization && (l.initialization = { sourceURL: l.initialization });var c = { template: l, timeline: s && Sa(s, "S").map(function (e) {
        return Ea(e);
      }), list: i && Jr(Ea(i), { segmentUrls: n, initialization: Ea(u) }), base: r && Jr(Ea(r), { initialization: Ea(u) }) };return Object.keys(c).forEach(function (e) {
      c[e] || delete c[e];
    }), c;
  },
      Ra = function Ra(e) {
    return e.reduce(function (e, t) {
      var i = Ea(t),
          n = Ua[i.schemeIdUri];if (n) {
        e[n] = { attributes: i };var r = Sa(t, "cenc:pssh")[0];if (r) {
          var a = ka(r),
              s = a && function (e) {
            for (var t = v.atob(e), i = new Uint8Array(t.length), n = 0; n < t.length; n++) {
              i[n] = t.charCodeAt(n);
            }return i;
          }(a);e[n].pssh = s;
        }
      }return e;
    }, {});
  },
      Ma = function Ma(p, f, m) {
    return function (e) {
      var t = Ea(e),
          i = Da(f, Sa(e, "BaseURL")),
          n = Sa(e, "Role")[0],
          r = { role: Ea(n) },
          a = Jr(p, t, r),
          s = Ra(Sa(e, "ContentProtection"));Object.keys(s).length && (a = Jr(a, { contentProtection: s }));var o,
          u,
          l,
          c = xa(e),
          d = Sa(e, "Representation"),
          h = Jr(m, c);return Zr(d.map((o = a, u = i, l = h, function (e) {
        var t = Sa(e, "BaseURL"),
            i = Da(u, t),
            n = Jr(o, Ea(e)),
            r = xa(e);return i.map(function (e) {
          return { segmentInfo: Jr(l, r), attributes: Jr(n, { baseUrl: e }) };
        });
      })));
    };
  },
      Ba = function Ba(e, t) {
    void 0 === t && (t = {});var i = t,
        n = i.manifestUri,
        r = void 0 === n ? "" : n,
        a = i.NOW,
        s = void 0 === a ? Date.now() : a,
        o = i.clientOffset,
        u = void 0 === o ? 0 : o,
        l = Sa(e, "Period");if (!l.length) throw new Error(pa);var c,
        d,
        h = Ea(e),
        p = Da([r], Sa(e, "BaseURL"));return h.sourceDuration = h.mediaPresentationDuration || 0, h.NOW = s, h.clientOffset = u, Zr(l.map((c = h, d = p, function (e, t) {
      var i = Da(d, Sa(e, "BaseURL")),
          n = Ea(e),
          r = parseInt(n.id, 10),
          a = v.isNaN(r) ? t : r,
          s = Jr(c, { periodIndex: a }),
          o = Sa(e, "AdaptationSet"),
          u = xa(e);return Zr(o.map(Ma(s, i, u)));
    })));
  },
      Na = function Na(e) {
    if ("" === e) throw new Error(fa);var t = new v.DOMParser().parseFromString(e, "application/xml"),
        i = t && "MPD" === t.documentElement.tagName ? t.documentElement : null;if (!i || i && 0 < i.getElementsByTagName("parsererror").length) throw new Error(ma);return i;
  },
      ja = function ja(e, t) {
    return function (e) {
      var t;if (!e.length) return {};var i = e[0].attributes,
          n = i.sourceDuration,
          r = i.minimumUpdatePeriod,
          a = void 0 === r ? 0 : r,
          s = ta(e.filter(function (e) {
        var t = e.attributes;return "video/mp4" === t.mimeType || "video" === t.contentType;
      })).map(ia),
          o = ta(e.filter(function (e) {
        var t = e.attributes;return "audio/mp4" === t.mimeType || "audio" === t.contentType;
      })),
          u = e.filter(function (e) {
        var t = e.attributes;return "text/vtt" === t.mimeType || "text" === t.contentType;
      }),
          l = { allowCache: !0, discontinuityStarts: [], segments: [], endList: !0, mediaGroups: (t = { AUDIO: {}, VIDEO: {} }, t["CLOSED-CAPTIONS"] = {}, t.SUBTITLES = {}, t), uri: "", duration: n, playlists: s, minimumUpdatePeriod: 1e3 * a };return o.length && (l.mediaGroups.AUDIO.audio = o.reduce(function (e, t) {
        var i,
            n,
            r,
            a,
            s,
            o = t.attributes.role && t.attributes.role.value || "main",
            u = t.attributes.lang || "",
            l = "main";return u && (l = t.attributes.lang + " (" + o + ")"), e[l] && e[l].playlists[0].attributes.BANDWIDTH > t.attributes.bandwidth || (e[l] = { language: u, autoselect: !0, default: "main" === o, playlists: [(i = t, r = i.attributes, a = i.segments, s = { attributes: (n = { NAME: r.id, BANDWIDTH: r.bandwidth, CODECS: r.codecs }, n["PROGRAM-ID"] = 1, n), uri: "", endList: "static" === (r.type || "static"), timeline: r.periodIndex, resolvedUri: "", targetDuration: r.duration, segments: a, mediaSequence: a.length ? a[0].number : 1 }, r.contentProtection && (s.contentProtection = r.contentProtection), s)], uri: "" }), e;
      }, {})), u.length && (l.mediaGroups.SUBTITLES.subs = u.reduce(function (e, t) {
        var i,
            n,
            r,
            a,
            s = t.attributes.lang || "text";return e[s] || (e[s] = { language: s, default: !1, autoselect: !1, playlists: [(i = t, r = i.attributes, a = i.segments, "undefined" == typeof a && (a = [{ uri: r.baseUrl, timeline: r.periodIndex, resolvedUri: r.baseUrl || "", duration: r.sourceDuration, number: 0 }], r.duration = r.sourceDuration), { attributes: (n = { NAME: r.id, BANDWIDTH: r.bandwidth }, n["PROGRAM-ID"] = 1, n), uri: "", endList: "static" === (r.type || "static"), timeline: r.periodIndex, resolvedUri: r.baseUrl || "", targetDuration: r.duration, segments: a, mediaSequence: a.length ? a[0].number : 1 })], uri: "" }), e;
      }, {})), l;
    }(Ba(Na(e), t).map(Ta));
  },
      Fa = function Fa(e) {
    return function (e) {
      var t = Sa(e, "UTCTiming")[0];if (!t) return null;var i = Ea(t);switch (i.schemeIdUri) {case "urn:mpeg:dash:utc:http-head:2014":case "urn:mpeg:dash:utc:http-head:2012":
          i.method = "HEAD";break;case "urn:mpeg:dash:utc:http-xsdate:2014":case "urn:mpeg:dash:utc:http-iso:2014":case "urn:mpeg:dash:utc:http-xsdate:2012":case "urn:mpeg:dash:utc:http-iso:2012":
          i.method = "GET";break;case "urn:mpeg:dash:utc:direct:2014":case "urn:mpeg:dash:utc:direct:2012":
          i.method = "DIRECT", i.value = Date.parse(i.value);break;case "urn:mpeg:dash:utc:http-ntp:2014":case "urn:mpeg:dash:utc:ntp:2014":case "urn:mpeg:dash:utc:sntp:2014":default:
          throw new Error(va);}return i;
    }(Na(e));
  },
      Ha = function Ha(e) {
    return e >>> 0;
  };Pa = function Pa(e) {
    return _Aa(e, ["moov", "trak"]).reduce(function (e, t) {
      var i, n, r, a, s;return (i = _Aa(t, ["tkhd"])[0]) ? (n = i[0], a = Ha(i[r = 0 === n ? 12 : 20] << 24 | i[r + 1] << 16 | i[r + 2] << 8 | i[r + 3]), (s = _Aa(t, ["mdia", "mdhd"])[0]) ? (r = 0 === (n = s[0]) ? 12 : 20, e[a] = Ha(s[r] << 24 | s[r + 1] << 16 | s[r + 2] << 8 | s[r + 3]), e) : null) : null;
    }, {});
  }, Oa = function Oa(r, e) {
    var t, i, n;return t = _Aa(e, ["moof", "traf"]), i = [].concat.apply([], t.map(function (n) {
      return _Aa(n, ["tfhd"]).map(function (e) {
        var t, i;return t = Ha(e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7]), i = r[t] || 9e4, (_Aa(n, ["tfdt"]).map(function (e) {
          var t, i;return t = e[0], i = Ha(e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7]), 1 === t && (i *= Math.pow(2, 32), i += Ha(e[8] << 24 | e[9] << 16 | e[10] << 8 | e[11])), i;
        })[0] || 1 / 0) / i;
      });
    })), n = Math.min.apply(null, i), isFinite(n) ? n : 0;
  }, Ia = function Ia(e) {
    var t = _Aa(e, ["moov", "trak"]),
        o = [];return t.forEach(function (e) {
      var t = _Aa(e, ["mdia", "hdlr"]),
          s = _Aa(e, ["tkhd"]);t.forEach(function (e, t) {
        var i,
            n,
            r = La(e.subarray(8, 12)),
            a = s[t];"vide" === r && (n = 0 === (i = new DataView(a.buffer, a.byteOffset, a.byteLength)).getUint8(0) ? i.getUint32(12) : i.getUint32(20), o.push(n));
      });
    }), o;
  };var Va,
      qa,
      za,
      Wa,
      Ga,
      Xa,
      Ka,
      Ya,
      $a,
      Qa,
      Ja,
      Za,
      es,
      ts,
      is,
      ns,
      rs,
      as,
      ss,
      os,
      us,
      ls,
      cs,
      ds,
      hs,
      ps,
      fs,
      ms,
      gs,
      ys,
      vs,
      _s,
      bs,
      Ts,
      Ss,
      ks,
      Cs,
      ws,
      Es,
      As,
      Ls = { findBox: _Aa = function Aa(e, t) {
      var i,
          n,
          r,
          a,
          s,
          o = [];if (!t.length) return null;for (i = 0; i < e.byteLength;) {
        n = Ha(e[i] << 24 | e[i + 1] << 16 | e[i + 2] << 8 | e[i + 3]), r = La(e.subarray(i + 4, i + 8)), a = 1 < n ? i + n : e.byteLength, r === t[0] && (1 === t.length ? o.push(e.subarray(i + 8, a)) : (s = _Aa(e.subarray(i + 8, a), t.slice(1))).length && (o = o.concat(s))), i = a;
      }return o;
    }, parseType: La = function La(e) {
      var t = "";return t += String.fromCharCode(e[0]), t += String.fromCharCode(e[1]), t += String.fromCharCode(e[2]), t += String.fromCharCode(e[3]);
    }, timescale: Pa, startTime: Oa, videoTrackIds: Ia },
      Ps = Math.pow(2, 32) - 1;!function () {
    var e;if (ls = { avc1: [], avcC: [], btrt: [], dinf: [], dref: [], esds: [], ftyp: [], hdlr: [], mdat: [], mdhd: [], mdia: [], mfhd: [], minf: [], moof: [], moov: [], mp4a: [], mvex: [], mvhd: [], sdtp: [], smhd: [], stbl: [], stco: [], stsc: [], stsd: [], stsz: [], stts: [], styp: [], tfdt: [], tfhd: [], traf: [], trak: [], trun: [], trex: [], tkhd: [], vmhd: [] }, "undefined" != typeof Uint8Array) {
      for (e in ls) {
        ls.hasOwnProperty(e) && (ls[e] = [e.charCodeAt(0), e.charCodeAt(1), e.charCodeAt(2), e.charCodeAt(3)]);
      }cs = new Uint8Array(["i".charCodeAt(0), "s".charCodeAt(0), "o".charCodeAt(0), "m".charCodeAt(0)]), hs = new Uint8Array(["a".charCodeAt(0), "v".charCodeAt(0), "c".charCodeAt(0), "1".charCodeAt(0)]), ds = new Uint8Array([0, 0, 0, 1]), ps = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0]), fs = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]), ms = { video: ps, audio: fs }, vs = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1]), ys = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), _s = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), bs = _s, Ts = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), Ss = _s, gs = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]);
    }
  }(), Va = function Va(e) {
    var t,
        i,
        n = [],
        r = 0;for (t = 1; t < arguments.length; t++) {
      n.push(arguments[t]);
    }for (t = n.length; t--;) {
      r += n[t].byteLength;
    }for (i = new Uint8Array(r + 8), new DataView(i.buffer, i.byteOffset, i.byteLength).setUint32(0, i.byteLength), i.set(e, 4), t = 0, r = 8; t < n.length; t++) {
      i.set(n[t], r), r += n[t].byteLength;
    }return i;
  }, qa = function qa() {
    return Va(ls.dinf, Va(ls.dref, vs));
  }, za = function za(e) {
    return Va(ls.esds, new Uint8Array([0, 0, 0, 0, 3, 25, 0, 0, 0, 4, 17, 64, 21, 0, 6, 0, 0, 0, 218, 192, 0, 0, 218, 192, 5, 2, e.audioobjecttype << 3 | e.samplingfrequencyindex >>> 1, e.samplingfrequencyindex << 7 | e.channelcount << 3, 6, 1, 2]));
  }, is = function is(e) {
    return Va(ls.hdlr, ms[e]);
  }, ts = function ts(e) {
    var t = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 1, 95, 144, e.duration >>> 24 & 255, e.duration >>> 16 & 255, e.duration >>> 8 & 255, 255 & e.duration, 85, 196, 0, 0]);return e.samplerate && (t[12] = e.samplerate >>> 24 & 255, t[13] = e.samplerate >>> 16 & 255, t[14] = e.samplerate >>> 8 & 255, t[15] = 255 & e.samplerate), Va(ls.mdhd, t);
  }, es = function es(e) {
    return Va(ls.mdia, ts(e), is(e.type), Xa(e));
  }, Ga = function Ga(e) {
    return Va(ls.mfhd, new Uint8Array([0, 0, 0, 0, (4278190080 & e) >> 24, (16711680 & e) >> 16, (65280 & e) >> 8, 255 & e]));
  }, Xa = function Xa(e) {
    return Va(ls.minf, "video" === e.type ? Va(ls.vmhd, gs) : Va(ls.smhd, ys), qa(), rs(e));
  }, Ka = function Ka(e, t) {
    for (var i = [], n = t.length; n--;) {
      i[n] = ss(t[n]);
    }return Va.apply(null, [ls.moof, Ga(e)].concat(i));
  }, Ya = function Ya(e) {
    for (var t = e.length, i = []; t--;) {
      i[t] = Ja(e[t]);
    }return Va.apply(null, [ls.moov, Qa(4294967295)].concat(i).concat($a(e)));
  }, $a = function $a(e) {
    for (var t = e.length, i = []; t--;) {
      i[t] = os(e[t]);
    }return Va.apply(null, [ls.mvex].concat(i));
  }, Qa = function Qa(e) {
    var t = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 1, 95, 144, (4278190080 & e) >> 24, (16711680 & e) >> 16, (65280 & e) >> 8, 255 & e, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]);return Va(ls.mvhd, t);
  }, ns = function ns(e) {
    var t,
        i,
        n = e.samples || [],
        r = new Uint8Array(4 + n.length);for (i = 0; i < n.length; i++) {
      t = n[i].flags, r[i + 4] = t.dependsOn << 4 | t.isDependedOn << 2 | t.hasRedundancy;
    }return Va(ls.sdtp, r);
  }, rs = function rs(e) {
    return Va(ls.stbl, as(e), Va(ls.stts, Ss), Va(ls.stsc, bs), Va(ls.stsz, Ts), Va(ls.stco, _s));
  }, as = function as(e) {
    return Va(ls.stsd, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]), "video" === e.type ? ks(e) : Cs(e));
  }, ks = function ks(e) {
    var t,
        i = e.sps || [],
        n = e.pps || [],
        r = [],
        a = [];for (t = 0; t < i.length; t++) {
      r.push((65280 & i[t].byteLength) >>> 8), r.push(255 & i[t].byteLength), r = r.concat(Array.prototype.slice.call(i[t]));
    }for (t = 0; t < n.length; t++) {
      a.push((65280 & n[t].byteLength) >>> 8), a.push(255 & n[t].byteLength), a = a.concat(Array.prototype.slice.call(n[t]));
    }return Va(ls.avc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (65280 & e.width) >> 8, 255 & e.width, (65280 & e.height) >> 8, 255 & e.height, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 19, 118, 105, 100, 101, 111, 106, 115, 45, 99, 111, 110, 116, 114, 105, 98, 45, 104, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 17, 17]), Va(ls.avcC, new Uint8Array([1, e.profileIdc, e.profileCompatibility, e.levelIdc, 255].concat([i.length]).concat(r).concat([n.length]).concat(a))), Va(ls.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])));
  }, Cs = function Cs(e) {
    return Va(ls.mp4a, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, (65280 & e.channelcount) >> 8, 255 & e.channelcount, (65280 & e.samplesize) >> 8, 255 & e.samplesize, 0, 0, 0, 0, (65280 & e.samplerate) >> 8, 255 & e.samplerate, 0, 0]), za(e));
  }, Za = function Za(e) {
    var t = new Uint8Array([0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, (4278190080 & e.id) >> 24, (16711680 & e.id) >> 16, (65280 & e.id) >> 8, 255 & e.id, 0, 0, 0, 0, (4278190080 & e.duration) >> 24, (16711680 & e.duration) >> 16, (65280 & e.duration) >> 8, 255 & e.duration, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, (65280 & e.width) >> 8, 255 & e.width, 0, 0, (65280 & e.height) >> 8, 255 & e.height, 0, 0]);return Va(ls.tkhd, t);
  }, ss = function ss(e) {
    var t, i, n, r, a, s;return t = Va(ls.tfhd, new Uint8Array([0, 0, 0, 58, (4278190080 & e.id) >> 24, (16711680 & e.id) >> 16, (65280 & e.id) >> 8, 255 & e.id, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])), a = Math.floor(e.baseMediaDecodeTime / (Ps + 1)), s = Math.floor(e.baseMediaDecodeTime % (Ps + 1)), i = Va(ls.tfdt, new Uint8Array([1, 0, 0, 0, a >>> 24 & 255, a >>> 16 & 255, a >>> 8 & 255, 255 & a, s >>> 24 & 255, s >>> 16 & 255, s >>> 8 & 255, 255 & s])), 92, "audio" === e.type ? (n = us(e, 92), Va(ls.traf, t, i, n)) : (r = ns(e), n = us(e, r.length + 92), Va(ls.traf, t, i, n, r));
  }, Ja = function Ja(e) {
    return e.duration = e.duration || 4294967295, Va(ls.trak, Za(e), es(e));
  }, os = function os(e) {
    var t = new Uint8Array([0, 0, 0, 0, (4278190080 & e.id) >> 24, (16711680 & e.id) >> 16, (65280 & e.id) >> 8, 255 & e.id, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]);return "video" !== e.type && (t[t.length - 1] = 0), Va(ls.trex, t);
  }, As = function As(e, t) {
    var i = 0,
        n = 0,
        r = 0,
        a = 0;return e.length && (void 0 !== e[0].duration && (i = 1), void 0 !== e[0].size && (n = 2), void 0 !== e[0].flags && (r = 4), void 0 !== e[0].compositionTimeOffset && (a = 8)), [0, 0, i | n | r | a, 1, (4278190080 & e.length) >>> 24, (16711680 & e.length) >>> 16, (65280 & e.length) >>> 8, 255 & e.length, (4278190080 & t) >>> 24, (16711680 & t) >>> 16, (65280 & t) >>> 8, 255 & t];
  }, Es = function Es(e, t) {
    var i, n, r, a;for (t += 20 + 16 * (n = e.samples || []).length, i = As(n, t), a = 0; a < n.length; a++) {
      r = n[a], i = i.concat([(4278190080 & r.duration) >>> 24, (16711680 & r.duration) >>> 16, (65280 & r.duration) >>> 8, 255 & r.duration, (4278190080 & r.size) >>> 24, (16711680 & r.size) >>> 16, (65280 & r.size) >>> 8, 255 & r.size, r.flags.isLeading << 2 | r.flags.dependsOn, r.flags.isDependedOn << 6 | r.flags.hasRedundancy << 4 | r.flags.paddingValue << 1 | r.flags.isNonSyncSample, 61440 & r.flags.degradationPriority, 15 & r.flags.degradationPriority, (4278190080 & r.compositionTimeOffset) >>> 24, (16711680 & r.compositionTimeOffset) >>> 16, (65280 & r.compositionTimeOffset) >>> 8, 255 & r.compositionTimeOffset]);
    }return Va(ls.trun, new Uint8Array(i));
  }, ws = function ws(e, t) {
    var i, n, r, a;for (t += 20 + 8 * (n = e.samples || []).length, i = As(n, t), a = 0; a < n.length; a++) {
      r = n[a], i = i.concat([(4278190080 & r.duration) >>> 24, (16711680 & r.duration) >>> 16, (65280 & r.duration) >>> 8, 255 & r.duration, (4278190080 & r.size) >>> 24, (16711680 & r.size) >>> 16, (65280 & r.size) >>> 8, 255 & r.size]);
    }return Va(ls.trun, new Uint8Array(i));
  }, us = function us(e, t) {
    return "audio" === e.type ? ws(e, t) : Es(e, t);
  };var Os = { ftyp: Wa = function Wa() {
      return Va(ls.ftyp, cs, ds, cs, hs);
    }, mdat: function mdat(e) {
      return Va(ls.mdat, e);
    }, moof: Ka, moov: Ya, initSegment: function initSegment(e) {
      var t,
          i = Wa(),
          n = Ya(e);return (t = new Uint8Array(i.byteLength + n.byteLength)).set(i), t.set(n, i.byteLength), t;
    } },
      Is = function Is() {
    this.init = function () {
      var a = {};this.on = function (e, t) {
        a[e] || (a[e] = []), a[e] = a[e].concat(t);
      }, this.off = function (e, t) {
        var i;return !!a[e] && (i = a[e].indexOf(t), a[e] = a[e].slice(), a[e].splice(i, 1), -1 < i);
      }, this.trigger = function (e) {
        var t, i, n, r;if (t = a[e]) if (2 === arguments.length) for (n = t.length, i = 0; i < n; ++i) {
          t[i].call(this, arguments[1]);
        } else {
          for (r = [], i = arguments.length, i = 1; i < arguments.length; ++i) {
            r.push(arguments[i]);
          }for (n = t.length, i = 0; i < n; ++i) {
            t[i].apply(this, r);
          }
        }
      }, this.dispose = function () {
        a = {};
      };
    };
  };Is.prototype.pipe = function (t) {
    return this.on("data", function (e) {
      t.push(e);
    }), this.on("done", function (e) {
      t.flush(e);
    }), t;
  }, Is.prototype.push = function (e) {
    this.trigger("data", e);
  }, Is.prototype.flush = function (e) {
    this.trigger("done", e);
  };var Us,
      Ds,
      xs,
      Rs,
      Ms,
      Bs,
      Ns,
      js = Is,
      Fs = function Fs(e) {
    var t,
        i,
        n = [],
        r = [];for (t = n.byteLength = 0; t < e.length; t++) {
      "access_unit_delimiter_rbsp" === (i = e[t]).nalUnitType ? (n.length && (n.duration = i.dts - n.dts, r.push(n)), (n = [i]).byteLength = i.data.byteLength, n.pts = i.pts, n.dts = i.dts) : ("slice_layer_without_partitioning_rbsp_idr" === i.nalUnitType && (n.keyFrame = !0), n.duration = i.dts - n.dts, n.byteLength += i.data.byteLength, n.push(i));
    }return r.length && (!n.duration || n.duration <= 0) && (n.duration = r[r.length - 1].duration), r.push(n), r;
  },
      Hs = function Hs(e) {
    var t,
        i,
        n = [],
        r = [];for (n.byteLength = 0, n.nalCount = 0, n.duration = 0, n.pts = e[0].pts, n.dts = e[0].dts, r.byteLength = 0, r.nalCount = 0, r.duration = 0, r.pts = e[0].pts, r.dts = e[0].dts, t = 0; t < e.length; t++) {
      (i = e[t]).keyFrame ? (n.length && (r.push(n), r.byteLength += n.byteLength, r.nalCount += n.nalCount, r.duration += n.duration), (n = [i]).nalCount = i.length, n.byteLength = i.byteLength, n.pts = i.pts, n.dts = i.dts, n.duration = i.duration) : (n.duration += i.duration, n.nalCount += i.length, n.byteLength += i.byteLength, n.push(i));
    }return r.length && n.duration <= 0 && (n.duration = r[r.length - 1].duration), r.byteLength += n.byteLength, r.nalCount += n.nalCount, r.duration += n.duration, r.push(n), r;
  },
      Vs = function Vs(e) {
    var t;return !e[0][0].keyFrame && 1 < e.length && (t = e.shift(), e.byteLength -= t.byteLength, e.nalCount -= t.nalCount, e[0][0].dts = t.dts, e[0][0].pts = t.pts, e[0][0].duration += t.duration), e;
  },
      qs = function qs(e, t) {
    var i,
        n,
        r,
        a,
        s,
        o,
        u,
        l = t || 0,
        c = [];for (i = 0; i < e.length; i++) {
      for (a = e[i], n = 0; n < a.length; n++) {
        s = a[n], o = s, u = void 0, (u = { size: 0, flags: { isLeading: 0, dependsOn: 1, isDependedOn: 0, hasRedundancy: 0, degradationPriority: 0, isNonSyncSample: 1 } }).dataOffset = l, u.compositionTimeOffset = o.pts - o.dts, u.duration = o.duration, u.size = 4 * o.length, u.size += o.byteLength, o.keyFrame && (u.flags.dependsOn = 2, u.flags.isNonSyncSample = 0), l += (r = u).size, c.push(r);
      }
    }return c;
  },
      zs = function zs(e) {
    var t,
        i,
        n,
        r,
        a,
        s,
        o = 0,
        u = e.byteLength,
        l = e.nalCount,
        c = new Uint8Array(u + 4 * l),
        d = new DataView(c.buffer);for (t = 0; t < e.length; t++) {
      for (r = e[t], i = 0; i < r.length; i++) {
        for (a = r[i], n = 0; n < a.length; n++) {
          s = a[n], d.setUint32(o, s.data.byteLength), o += 4, c.set(s.data, o), o += s.data.byteLength;
        }
      }
    }return c;
  },
      Ws = [33, 16, 5, 32, 164, 27],
      Gs = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252],
      Xs = function Xs(e) {
    for (var t = []; e--;) {
      t.push(0);
    }return t;
  },
      Ks = { 96e3: [Ws, [227, 64], Xs(154), [56]], 88200: [Ws, [231], Xs(170), [56]], 64e3: [Ws, [248, 192], Xs(240), [56]], 48e3: [Ws, [255, 192], Xs(268), [55, 148, 128], Xs(54), [112]], 44100: [Ws, [255, 192], Xs(268), [55, 163, 128], Xs(84), [112]], 32e3: [Ws, [255, 192], Xs(268), [55, 234], Xs(226), [112]], 24e3: [Ws, [255, 192], Xs(268), [55, 255, 128], Xs(268), [111, 112], Xs(126), [224]], 16e3: [Ws, [255, 192], Xs(268), [55, 255, 128], Xs(268), [111, 255], Xs(269), [223, 108], Xs(195), [1, 192]], 12e3: [Gs, Xs(268), [3, 127, 248], Xs(268), [6, 255, 240], Xs(268), [13, 255, 224], Xs(268), [27, 253, 128], Xs(259), [56]], 11025: [Gs, Xs(268), [3, 127, 248], Xs(268), [6, 255, 240], Xs(268), [13, 255, 224], Xs(268), [27, 255, 192], Xs(268), [55, 175, 128], Xs(108), [112]], 8e3: [Gs, Xs(268), [3, 121, 16], Xs(47), [7]] },
      Ys = (Us = Ks, Object.keys(Us).reduce(function (e, t) {
    return e[t] = new Uint8Array(Us[t].reduce(function (e, t) {
      return e.concat(t);
    }, [])), e;
  }, {}));Bs = function Bs(e, t) {
    return Ds(Ms(e, t));
  }, Ns = function Ns(e, t) {
    return xs(Rs(e), t);
  };Ds = function Ds(e) {
    return 9e4 * e;
  }, xs = function xs(e, t) {
    return e * t;
  }, Rs = function Rs(e) {
    return e / 9e4;
  }, Ms = function Ms(e, t) {
    return e / t;
  };var $s = Bs,
      Qs = Ns,
      Js = function Js(e, t, i, n) {
    var r,
        a,
        s,
        o,
        u = 0,
        l = 0,
        c = 0;if (t.length && (r = $s(e.baseMediaDecodeTime, e.samplerate), a = Math.ceil(9e4 / (e.samplerate / 1024)), i && n && (u = r - Math.max(i, n), c = (l = Math.floor(u / a)) * a), !(l < 1 || 45e3 < c))) {
      for ((s = Ys[e.samplerate]) || (s = t[0].data), o = 0; o < l; o++) {
        t.splice(o, 0, { data: s });
      }e.baseMediaDecodeTime -= Math.floor(Qs(c, e.samplerate));
    }
  },
      Zs = function Zs(e, t, i) {
    return t.minSegmentDts >= i ? e : (t.minSegmentDts = 1 / 0, e.filter(function (e) {
      return e.dts >= i && (t.minSegmentDts = Math.min(t.minSegmentDts, e.dts), t.minSegmentPts = t.minSegmentDts, !0);
    }));
  },
      eo = function eo(e) {
    var t,
        i,
        n = [];for (t = 0; t < e.length; t++) {
      i = e[t], n.push({ size: i.data.byteLength, duration: 1024 });
    }return n;
  },
      to = function to(e) {
    var t,
        i,
        n = 0,
        r = new Uint8Array(function (e) {
      var t,
          i = 0;for (t = 0; t < e.length; t++) {
        i += e[t].data.byteLength;
      }return i;
    }(e));for (t = 0; t < e.length; t++) {
      i = e[t], r.set(i.data, n), n += i.data.byteLength;
    }return r;
  },
      io = function io(e) {
    delete e.minSegmentDts, delete e.maxSegmentDts, delete e.minSegmentPts, delete e.maxSegmentPts;
  },
      no = function no(e, t) {
    var i,
        n = e.minSegmentDts;return t || (n -= e.timelineStartInfo.dts), i = e.timelineStartInfo.baseMediaDecodeTime, i += n, i = Math.max(0, i), "audio" === e.type && (i *= e.samplerate / 9e4, i = Math.floor(i)), i;
  },
      ro = function ro(e, t) {
    "number" == typeof t.pts && (void 0 === e.timelineStartInfo.pts && (e.timelineStartInfo.pts = t.pts), void 0 === e.minSegmentPts ? e.minSegmentPts = t.pts : e.minSegmentPts = Math.min(e.minSegmentPts, t.pts), void 0 === e.maxSegmentPts ? e.maxSegmentPts = t.pts : e.maxSegmentPts = Math.max(e.maxSegmentPts, t.pts)), "number" == typeof t.dts && (void 0 === e.timelineStartInfo.dts && (e.timelineStartInfo.dts = t.dts), void 0 === e.minSegmentDts ? e.minSegmentDts = t.dts : e.minSegmentDts = Math.min(e.minSegmentDts, t.dts), void 0 === e.maxSegmentDts ? e.maxSegmentDts = t.dts : e.maxSegmentDts = Math.max(e.maxSegmentDts, t.dts));
  },
      ao = function ao(e) {
    for (var t = 0, i = { payloadType: -1, payloadSize: 0 }, n = 0, r = 0; t < e.byteLength && 128 !== e[t];) {
      for (; 255 === e[t];) {
        n += 255, t++;
      }for (n += e[t++]; 255 === e[t];) {
        r += 255, t++;
      }if (r += e[t++], !i.payload && 4 === n) {
        i.payloadType = n, i.payloadSize = r, i.payload = e.subarray(t, t + r);break;
      }t += r, r = n = 0;
    }return i;
  },
      so = function so(e) {
    return 181 !== e.payload[0] ? null : 49 != (e.payload[1] << 8 | e.payload[2]) ? null : "GA94" !== String.fromCharCode(e.payload[3], e.payload[4], e.payload[5], e.payload[6]) ? null : 3 !== e.payload[7] ? null : e.payload.subarray(8, e.payload.length - 1);
  },
      oo = function oo(e, t) {
    var i,
        n,
        r,
        a,
        s = [];if (!(64 & t[0])) return s;for (n = 31 & t[0], i = 0; i < n; i++) {
      a = { type: 3 & t[2 + (r = 3 * i)], pts: e }, 4 & t[r + 2] && (a.ccData = t[r + 3] << 8 | t[r + 4], s.push(a));
    }return s;
  },
      uo = function uo(e) {
    for (var t, i, n = e.byteLength, r = [], a = 1; a < n - 2;) {
      0 === e[a] && 0 === e[a + 1] && 3 === e[a + 2] ? (r.push(a + 2), a += 2) : a++;
    }if (0 === r.length) return e;t = n - r.length, i = new Uint8Array(t);var s = 0;for (a = 0; a < t; s++, a++) {
      s === r[0] && (s++, r.shift()), i[a] = e[s];
    }return i;
  },
      lo = 4,
      co = function e() {
    e.prototype.init.call(this), this.captionPackets_ = [], this.ccStreams_ = [new go(0, 0), new go(0, 1), new go(1, 0), new go(1, 1)], this.reset(), this.ccStreams_.forEach(function (e) {
      e.on("data", this.trigger.bind(this, "data")), e.on("done", this.trigger.bind(this, "done"));
    }, this);
  };(co.prototype = new js()).push = function (e) {
    var t, i, n;if ("sei_rbsp" === e.nalUnitType && (t = ao(e.escapedRBSP)).payloadType === lo && (i = so(t))) if (e.dts < this.latestDts_) this.ignoreNextEqualDts_ = !0;else {
      if (e.dts === this.latestDts_ && this.ignoreNextEqualDts_) return this.numSameDts_--, void (this.numSameDts_ || (this.ignoreNextEqualDts_ = !1));n = oo(e.pts, i), this.captionPackets_ = this.captionPackets_.concat(n), this.latestDts_ !== e.dts && (this.numSameDts_ = 0), this.numSameDts_++, this.latestDts_ = e.dts;
    }
  }, co.prototype.flush = function () {
    this.captionPackets_.length ? (this.captionPackets_.forEach(function (e, t) {
      e.presortIndex = t;
    }), this.captionPackets_.sort(function (e, t) {
      return e.pts === t.pts ? e.presortIndex - t.presortIndex : e.pts - t.pts;
    }), this.captionPackets_.forEach(function (e) {
      e.type < 2 && this.dispatchCea608Packet(e);
    }, this), this.captionPackets_.length = 0, this.ccStreams_.forEach(function (e) {
      e.flush();
    }, this)) : this.ccStreams_.forEach(function (e) {
      e.flush();
    }, this);
  }, co.prototype.reset = function () {
    this.latestDts_ = null, this.ignoreNextEqualDts_ = !1, this.numSameDts_ = 0, this.activeCea608Channel_ = [null, null], this.ccStreams_.forEach(function (e) {
      e.reset();
    });
  }, co.prototype.dispatchCea608Packet = function (e) {
    this.setsChannel1Active(e) ? this.activeCea608Channel_[e.type] = 0 : this.setsChannel2Active(e) && (this.activeCea608Channel_[e.type] = 1), null !== this.activeCea608Channel_[e.type] && this.ccStreams_[(e.type << 1) + this.activeCea608Channel_[e.type]].push(e);
  }, co.prototype.setsChannel1Active = function (e) {
    return 4096 == (30720 & e.ccData);
  }, co.prototype.setsChannel2Active = function (e) {
    return 6144 == (30720 & e.ccData);
  };var ho = { 42: 225, 92: 233, 94: 237, 95: 243, 96: 250, 123: 231, 124: 247, 125: 209, 126: 241, 127: 9608, 304: 174, 305: 176, 306: 189, 307: 191, 308: 8482, 309: 162, 310: 163, 311: 9834, 312: 224, 313: 160, 314: 232, 315: 226, 316: 234, 317: 238, 318: 244, 319: 251, 544: 193, 545: 201, 546: 211, 547: 218, 548: 220, 549: 252, 550: 8216, 551: 161, 552: 42, 553: 39, 554: 8212, 555: 169, 556: 8480, 557: 8226, 558: 8220, 559: 8221, 560: 192, 561: 194, 562: 199, 563: 200, 564: 202, 565: 203, 566: 235, 567: 206, 568: 207, 569: 239, 570: 212, 571: 217, 572: 249, 573: 219, 574: 171, 575: 187, 800: 195, 801: 227, 802: 205, 803: 204, 804: 236, 805: 210, 806: 242, 807: 213, 808: 245, 809: 123, 810: 125, 811: 92, 812: 94, 813: 95, 814: 124, 815: 126, 816: 196, 817: 228, 818: 214, 819: 246, 820: 223, 821: 165, 822: 164, 823: 9474, 824: 197, 825: 229, 826: 216, 827: 248, 828: 9484, 829: 9488, 830: 9492, 831: 9496 },
      po = function po(e) {
    return null === e ? "" : (e = ho[e] || e, String.fromCharCode(e));
  },
      fo = [4352, 4384, 4608, 4640, 5376, 5408, 5632, 5664, 5888, 5920, 4096, 4864, 4896, 5120, 5152],
      mo = function mo() {
    for (var e = [], t = 15; t--;) {
      e.push("");
    }return e;
  },
      go = function e(t, i) {
    e.prototype.init.call(this), this.field_ = t || 0, this.dataChannel_ = i || 0, this.name_ = "CC" + (1 + (this.field_ << 1 | this.dataChannel_)), this.setConstants(), this.reset(), this.push = function (e) {
      var t, i, n, r, a;if ((t = 32639 & e.ccData) !== this.lastControlCode_) {
        if (4096 == (61440 & t) ? this.lastControlCode_ = t : t !== this.PADDING_ && (this.lastControlCode_ = null), n = t >>> 8, r = 255 & t, t !== this.PADDING_) if (t === this.RESUME_CAPTION_LOADING_) this.mode_ = "popOn";else if (t === this.END_OF_CAPTION_) this.mode_ = "popOn", this.clearFormatting(e.pts), this.flushDisplayed(e.pts), i = this.displayed_, this.displayed_ = this.nonDisplayed_, this.nonDisplayed_ = i, this.startPts_ = e.pts;else if (t === this.ROLL_UP_2_ROWS_) this.rollUpRows_ = 2, this.setRollUp(e.pts);else if (t === this.ROLL_UP_3_ROWS_) this.rollUpRows_ = 3, this.setRollUp(e.pts);else if (t === this.ROLL_UP_4_ROWS_) this.rollUpRows_ = 4, this.setRollUp(e.pts);else if (t === this.CARRIAGE_RETURN_) this.clearFormatting(e.pts), this.flushDisplayed(e.pts), this.shiftRowsUp_(), this.startPts_ = e.pts;else if (t === this.BACKSPACE_) "popOn" === this.mode_ ? this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1) : this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);else if (t === this.ERASE_DISPLAYED_MEMORY_) this.flushDisplayed(e.pts), this.displayed_ = mo();else if (t === this.ERASE_NON_DISPLAYED_MEMORY_) this.nonDisplayed_ = mo();else if (t === this.RESUME_DIRECT_CAPTIONING_) "paintOn" !== this.mode_ && (this.flushDisplayed(e.pts), this.displayed_ = mo()), this.mode_ = "paintOn", this.startPts_ = e.pts;else if (this.isSpecialCharacter(n, r)) a = po((n = (3 & n) << 8) | r), this[this.mode_](e.pts, a), this.column_++;else if (this.isExtCharacter(n, r)) "popOn" === this.mode_ ? this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1) : this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1), a = po((n = (3 & n) << 8) | r), this[this.mode_](e.pts, a), this.column_++;else if (this.isMidRowCode(n, r)) this.clearFormatting(e.pts), this[this.mode_](e.pts, " "), this.column_++, 14 == (14 & r) && this.addFormatting(e.pts, ["i"]), 1 == (1 & r) && this.addFormatting(e.pts, ["u"]);else if (this.isOffsetControlCode(n, r)) this.column_ += 3 & r;else if (this.isPAC(n, r)) {
          var s = fo.indexOf(7968 & t);"rollUp" === this.mode_ && (s - this.rollUpRows_ + 1 < 0 && (s = this.rollUpRows_ - 1), this.setRollUp(e.pts, s)), s !== this.row_ && (this.clearFormatting(e.pts), this.row_ = s), 1 & r && -1 === this.formatting_.indexOf("u") && this.addFormatting(e.pts, ["u"]), 16 == (16 & t) && (this.column_ = 4 * ((14 & t) >> 1)), this.isColorPAC(r) && 14 == (14 & r) && this.addFormatting(e.pts, ["i"]);
        } else this.isNormalChar(n) && (0 === r && (r = null), a = po(n), a += po(r), this[this.mode_](e.pts, a), this.column_ += a.length);
      } else this.lastControlCode_ = null;
    };
  };go.prototype = new js(), go.prototype.flushDisplayed = function (e) {
    var t = this.displayed_.map(function (e) {
      try {
        return e.trim();
      } catch (e) {
        return "";
      }
    }).join("\n").replace(/^\n+|\n+$/g, "");t.length && this.trigger("data", { startPts: this.startPts_, endPts: e, text: t, stream: this.name_ });
  }, go.prototype.reset = function () {
    this.mode_ = "popOn", this.topRow_ = 0, this.startPts_ = 0, this.displayed_ = mo(), this.nonDisplayed_ = mo(), this.lastControlCode_ = null, this.column_ = 0, this.row_ = 14, this.rollUpRows_ = 2, this.formatting_ = [];
  }, go.prototype.setConstants = function () {
    0 === this.dataChannel_ ? (this.BASE_ = 16, this.EXT_ = 17, this.CONTROL_ = (20 | this.field_) << 8, this.OFFSET_ = 23) : 1 === this.dataChannel_ && (this.BASE_ = 24, this.EXT_ = 25, this.CONTROL_ = (28 | this.field_) << 8, this.OFFSET_ = 31), this.PADDING_ = 0, this.RESUME_CAPTION_LOADING_ = 32 | this.CONTROL_, this.END_OF_CAPTION_ = 47 | this.CONTROL_, this.ROLL_UP_2_ROWS_ = 37 | this.CONTROL_, this.ROLL_UP_3_ROWS_ = 38 | this.CONTROL_, this.ROLL_UP_4_ROWS_ = 39 | this.CONTROL_, this.CARRIAGE_RETURN_ = 45 | this.CONTROL_, this.RESUME_DIRECT_CAPTIONING_ = 41 | this.CONTROL_, this.BACKSPACE_ = 33 | this.CONTROL_, this.ERASE_DISPLAYED_MEMORY_ = 44 | this.CONTROL_, this.ERASE_NON_DISPLAYED_MEMORY_ = 46 | this.CONTROL_;
  }, go.prototype.isSpecialCharacter = function (e, t) {
    return e === this.EXT_ && 48 <= t && t <= 63;
  }, go.prototype.isExtCharacter = function (e, t) {
    return (e === this.EXT_ + 1 || e === this.EXT_ + 2) && 32 <= t && t <= 63;
  }, go.prototype.isMidRowCode = function (e, t) {
    return e === this.EXT_ && 32 <= t && t <= 47;
  }, go.prototype.isOffsetControlCode = function (e, t) {
    return e === this.OFFSET_ && 33 <= t && t <= 35;
  }, go.prototype.isPAC = function (e, t) {
    return e >= this.BASE_ && e < this.BASE_ + 8 && 64 <= t && t <= 127;
  }, go.prototype.isColorPAC = function (e) {
    return 64 <= e && e <= 79 || 96 <= e && e <= 127;
  }, go.prototype.isNormalChar = function (e) {
    return 32 <= e && e <= 127;
  }, go.prototype.setRollUp = function (e, t) {
    if ("rollUp" !== this.mode_ && (this.row_ = 14, this.mode_ = "rollUp", this.flushDisplayed(e), this.nonDisplayed_ = mo(), this.displayed_ = mo()), void 0 !== t && t !== this.row_) for (var i = 0; i < this.rollUpRows_; i++) {
      this.displayed_[t - i] = this.displayed_[this.row_ - i], this.displayed_[this.row_ - i] = "";
    }void 0 === t && (t = this.row_), this.topRow_ = t - this.rollUpRows_ + 1;
  }, go.prototype.addFormatting = function (e, t) {
    this.formatting_ = this.formatting_.concat(t);var i = t.reduce(function (e, t) {
      return e + "<" + t + ">";
    }, "");this[this.mode_](e, i);
  }, go.prototype.clearFormatting = function (e) {
    if (this.formatting_.length) {
      var t = this.formatting_.reverse().reduce(function (e, t) {
        return e + "</" + t + ">";
      }, "");this.formatting_ = [], this[this.mode_](e, t);
    }
  }, go.prototype.popOn = function (e, t) {
    var i = this.nonDisplayed_[this.row_];i += t, this.nonDisplayed_[this.row_] = i;
  }, go.prototype.rollUp = function (e, t) {
    var i = this.displayed_[this.row_];i += t, this.displayed_[this.row_] = i;
  }, go.prototype.shiftRowsUp_ = function () {
    var e;for (e = 0; e < this.topRow_; e++) {
      this.displayed_[e] = "";
    }for (e = this.row_ + 1; e < 15; e++) {
      this.displayed_[e] = "";
    }for (e = this.topRow_; e < this.row_; e++) {
      this.displayed_[e] = this.displayed_[e + 1];
    }this.displayed_[this.row_] = "";
  }, go.prototype.paintOn = function (e, t) {
    var i = this.displayed_[this.row_];i += t, this.displayed_[this.row_] = i;
  };var yo = { CaptionStream: co, Cea608Stream: go },
      vo = { H264_STREAM_TYPE: 27, ADTS_STREAM_TYPE: 15, METADATA_STREAM_TYPE: 21 },
      _o = function _o(e, t) {
    var i = 1;for (t < e && (i = -1); 4294967296 < Math.abs(t - e);) {
      e += 8589934592 * i;
    }return e;
  },
      bo = function e(t) {
    var i, n;e.prototype.init.call(this), this.type_ = t, this.push = function (e) {
      e.type === this.type_ && (void 0 === n && (n = e.dts), e.dts = _o(e.dts, n), e.pts = _o(e.pts, n), i = e.dts, this.trigger("data", e));
    }, this.flush = function () {
      n = i, this.trigger("done");
    }, this.discontinuity = function () {
      i = n = void 0;
    };
  };bo.prototype = new js();var _To,
      So = bo,
      ko = _o,
      Co = function Co(e, t, i) {
    var n,
        r = "";for (n = t; n < i; n++) {
      r += "%" + ("00" + e[n].toString(16)).slice(-2);
    }return r;
  },
      wo = function wo(e, t, i) {
    return decodeURIComponent(Co(e, t, i));
  },
      Eo = function Eo(e) {
    return e[0] << 21 | e[1] << 14 | e[2] << 7 | e[3];
  },
      Ao = { TXXX: function TXXX(e) {
      var t;if (3 === e.data[0]) {
        for (t = 1; t < e.data.length; t++) {
          if (0 === e.data[t]) {
            e.description = wo(e.data, 1, t), e.value = wo(e.data, t + 1, e.data.length).replace(/\0*$/, "");break;
          }
        }e.data = e.value;
      }
    }, WXXX: function WXXX(e) {
      var t;if (3 === e.data[0]) for (t = 1; t < e.data.length; t++) {
        if (0 === e.data[t]) {
          e.description = wo(e.data, 1, t), e.url = wo(e.data, t + 1, e.data.length);break;
        }
      }
    }, PRIV: function PRIV(e) {
      var t, i;for (t = 0; t < e.data.length; t++) {
        if (0 === e.data[t]) {
          e.owner = (i = e.data, unescape(Co(i, 0, t)));break;
        }
      }e.privateData = e.data.subarray(t + 1), e.data = e.privateData;
    } };(_To = function To(e) {
    var t,
        u = { debug: !(!e || !e.debug), descriptor: e && e.descriptor },
        l = 0,
        c = [],
        d = 0;if (_To.prototype.init.call(this), this.dispatchType = vo.METADATA_STREAM_TYPE.toString(16), u.descriptor) for (t = 0; t < u.descriptor.length; t++) {
      this.dispatchType += ("00" + u.descriptor[t].toString(16)).slice(-2);
    }this.push = function (e) {
      var t, i, n, r, a;if ("timed-metadata" === e.type) if (e.dataAlignmentIndicator && (d = 0, c.length = 0), 0 === c.length && (e.data.length < 10 || e.data[0] !== "I".charCodeAt(0) || e.data[1] !== "D".charCodeAt(0) || e.data[2] !== "3".charCodeAt(0))) u.debug;else if (c.push(e), d += e.data.byteLength, 1 === c.length && (l = Eo(e.data.subarray(6, 10)), l += 10), !(d < l)) {
        for (t = { data: new Uint8Array(l), frames: [], pts: c[0].pts, dts: c[0].dts }, a = 0; a < l;) {
          t.data.set(c[0].data.subarray(0, l - a), a), a += c[0].data.byteLength, d -= c[0].data.byteLength, c.shift();
        }i = 10, 64 & t.data[5] && (i += 4, i += Eo(t.data.subarray(10, 14)), l -= Eo(t.data.subarray(16, 20)));do {
          if ((n = Eo(t.data.subarray(i + 4, i + 8))) < 1) return;if ((r = { id: String.fromCharCode(t.data[i], t.data[i + 1], t.data[i + 2], t.data[i + 3]), data: t.data.subarray(i + 10, i + n + 10) }).key = r.id, Ao[r.id] && (Ao[r.id](r), "com.apple.streaming.transportStreamTimestamp" === r.owner)) {
            var s = r.data,
                o = (1 & s[3]) << 30 | s[4] << 22 | s[5] << 14 | s[6] << 6 | s[7] >>> 2;o *= 4, o += 3 & s[7], r.timeStamp = o, void 0 === t.pts && void 0 === t.dts && (t.pts = r.timeStamp, t.dts = r.timeStamp), this.trigger("timestamp", r);
          }t.frames.push(r), i += 10, i += n;
        } while (i < l);this.trigger("data", t);
      }
    };
  }).prototype = new js();var _Lo,
      _Po,
      _Oo,
      Io = _To,
      Uo = So;(_Lo = function Lo() {
    var r = new Uint8Array(188),
        a = 0;_Lo.prototype.init.call(this), this.push = function (e) {
      var t,
          i = 0,
          n = 188;for (a ? ((t = new Uint8Array(e.byteLength + a)).set(r.subarray(0, a)), t.set(e, a), a = 0) : t = e; n < t.byteLength;) {
        71 !== t[i] || 71 !== t[n] ? (i++, n++) : (this.trigger("data", t.subarray(i, n)), i += 188, n += 188);
      }i < t.byteLength && (r.set(t.subarray(i), 0), a = t.byteLength - i);
    }, this.flush = function () {
      188 === a && 71 === r[0] && (this.trigger("data", r), a = 0), this.trigger("done");
    };
  }).prototype = new js(), (_Po = function Po() {
    var n, r, a, s;_Po.prototype.init.call(this), (s = this).packetsWaitingForPmt = [], this.programMapTable = void 0, n = function n(e, t) {
      var i = 0;t.payloadUnitStartIndicator && (i += e[i] + 1), "pat" === t.type ? r(e.subarray(i), t) : a(e.subarray(i), t);
    }, r = function r(e, t) {
      t.section_number = e[7], t.last_section_number = e[8], s.pmtPid = (31 & e[10]) << 8 | e[11], t.pmtPid = s.pmtPid;
    }, a = function a(e, t) {
      var i, n;if (1 & e[5]) {
        for (s.programMapTable = { video: null, audio: null, "timed-metadata": {} }, i = 3 + ((15 & e[1]) << 8 | e[2]) - 4, n = 12 + ((15 & e[10]) << 8 | e[11]); n < i;) {
          var r = e[n],
              a = (31 & e[n + 1]) << 8 | e[n + 2];r === vo.H264_STREAM_TYPE && null === s.programMapTable.video ? s.programMapTable.video = a : r === vo.ADTS_STREAM_TYPE && null === s.programMapTable.audio ? s.programMapTable.audio = a : r === vo.METADATA_STREAM_TYPE && (s.programMapTable["timed-metadata"][a] = r), n += 5 + ((15 & e[n + 3]) << 8 | e[n + 4]);
        }t.programMapTable = s.programMapTable;
      }
    }, this.push = function (e) {
      var t = {},
          i = 4;if (t.payloadUnitStartIndicator = !!(64 & e[1]), t.pid = 31 & e[1], t.pid <<= 8, t.pid |= e[2], 1 < (48 & e[3]) >>> 4 && (i += e[i] + 1), 0 === t.pid) t.type = "pat", n(e.subarray(i), t), this.trigger("data", t);else if (t.pid === this.pmtPid) for (t.type = "pmt", n(e.subarray(i), t), this.trigger("data", t); this.packetsWaitingForPmt.length;) {
        this.processPes_.apply(this, this.packetsWaitingForPmt.shift());
      } else void 0 === this.programMapTable ? this.packetsWaitingForPmt.push([e, i, t]) : this.processPes_(e, i, t);
    }, this.processPes_ = function (e, t, i) {
      i.pid === this.programMapTable.video ? i.streamType = vo.H264_STREAM_TYPE : i.pid === this.programMapTable.audio ? i.streamType = vo.ADTS_STREAM_TYPE : i.streamType = this.programMapTable["timed-metadata"][i.pid], i.type = "pes", i.data = e.subarray(t), this.trigger("data", i);
    };
  }).prototype = new js(), _Po.STREAM_TYPES = { h264: 27, adts: 15 }, (_Oo = function Oo() {
    var h = this,
        n = { data: [], size: 0 },
        r = { data: [], size: 0 },
        a = { data: [], size: 0 },
        s = function s(e, t, i) {
      var n,
          r,
          a = new Uint8Array(e.size),
          s = { type: t },
          o = 0,
          u = 0;if (e.data.length && !(e.size < 9)) {
        for (s.trackId = e.data[0].pid, o = 0; o < e.data.length; o++) {
          r = e.data[o], a.set(r.data, u), u += r.data.byteLength;
        }var l, c, d;l = a, (c = s).packetLength = 6 + (l[4] << 8 | l[5]), c.dataAlignmentIndicator = 0 != (4 & l[6]), 192 & (d = l[7]) && (c.pts = (14 & l[9]) << 27 | (255 & l[10]) << 20 | (254 & l[11]) << 12 | (255 & l[12]) << 5 | (254 & l[13]) >>> 3, c.pts *= 4, c.pts += (6 & l[13]) >>> 1, c.dts = c.pts, 64 & d && (c.dts = (14 & l[14]) << 27 | (255 & l[15]) << 20 | (254 & l[16]) << 12 | (255 & l[17]) << 5 | (254 & l[18]) >>> 3, c.dts *= 4, c.dts += (6 & l[18]) >>> 1)), c.data = l.subarray(9 + l[8]), n = "video" === t || s.packetLength <= e.size, (i || n) && (e.size = 0, e.data.length = 0), n && h.trigger("data", s);
      }
    };_Oo.prototype.init.call(this), this.push = function (i) {
      ({ pat: function pat() {}, pes: function pes() {
          var e, t;switch (i.streamType) {case vo.H264_STREAM_TYPE:case vo.H264_STREAM_TYPE:
              e = n, t = "video";break;case vo.ADTS_STREAM_TYPE:
              e = r, t = "audio";break;case vo.METADATA_STREAM_TYPE:
              e = a, t = "timed-metadata";break;default:
              return;}i.payloadUnitStartIndicator && s(e, t, !0), e.data.push(i), e.size += i.data.byteLength;
        }, pmt: function pmt() {
          var e = { type: "metadata", tracks: [] },
              t = i.programMapTable;null !== t.video && e.tracks.push({ timelineStartInfo: { baseMediaDecodeTime: 0 }, id: +t.video, codec: "avc", type: "video" }), null !== t.audio && e.tracks.push({ timelineStartInfo: { baseMediaDecodeTime: 0 }, id: +t.audio, codec: "adts", type: "audio" }), h.trigger("data", e);
        } })[i.type]();
    }, this.flush = function () {
      s(n, "video"), s(r, "audio"), s(a, "timed-metadata"), this.trigger("done");
    };
  }).prototype = new js();var Do = { PAT_PID: 0, MP2T_PACKET_LENGTH: 188, TransportPacketStream: _Lo, TransportParseStream: _Po, ElementaryStream: _Oo, TimestampRolloverStream: Uo, CaptionStream: yo.CaptionStream, Cea608Stream: yo.Cea608Stream, MetadataStream: Io };for (var xo in vo) {
    vo.hasOwnProperty(xo) && (Do[xo] = vo[xo]);
  }var _Ro,
      Mo = Do,
      Bo = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];(_Ro = function Ro() {
    var l;_Ro.prototype.init.call(this), this.push = function (e) {
      var t,
          i,
          n,
          r,
          a,
          s,
          o = 0,
          u = 0;if ("audio" === e.type) for (l ? (r = l, (l = new Uint8Array(r.byteLength + e.data.byteLength)).set(r), l.set(e.data, r.byteLength)) : l = e.data; o + 5 < l.length;) {
        if (255 === l[o] && 240 == (246 & l[o + 1])) {
          if (i = 2 * (1 & ~l[o + 1]), t = (3 & l[o + 3]) << 11 | l[o + 4] << 3 | (224 & l[o + 5]) >> 5, s = 9e4 * (a = 1024 * (1 + (3 & l[o + 6]))) / Bo[(60 & l[o + 2]) >>> 2], n = o + t, l.byteLength < n) return;if (this.trigger("data", { pts: e.pts + u * s, dts: e.dts + u * s, sampleCount: a, audioobjecttype: 1 + (l[o + 2] >>> 6 & 3), channelcount: (1 & l[o + 2]) << 2 | (192 & l[o + 3]) >>> 6, samplerate: Bo[(60 & l[o + 2]) >>> 2], samplingfrequencyindex: (60 & l[o + 2]) >>> 2, samplesize: 16, data: l.subarray(o + 7 + i, n) }), l.byteLength === n) return void (l = void 0);u++, l = l.subarray(n);
        } else o++;
      }
    }, this.flush = function () {
      this.trigger("done");
    };
  }).prototype = new js();var _No,
      _jo,
      Fo,
      Ho = _Ro,
      Vo = function Vo(n) {
    var r = n.byteLength,
        a = 0,
        s = 0;this.length = function () {
      return 8 * r;
    }, this.bitsAvailable = function () {
      return 8 * r + s;
    }, this.loadWord = function () {
      var e = n.byteLength - r,
          t = new Uint8Array(4),
          i = Math.min(4, r);if (0 === i) throw new Error("no bytes available");t.set(n.subarray(e, e + i)), a = new DataView(t.buffer).getUint32(0), s = 8 * i, r -= i;
    }, this.skipBits = function (e) {
      var t;e < s || (e -= s, e -= 8 * (t = Math.floor(e / 8)), r -= t, this.loadWord()), a <<= e, s -= e;
    }, this.readBits = function (e) {
      var t = Math.min(s, e),
          i = a >>> 32 - t;return 0 < (s -= t) ? a <<= t : 0 < r && this.loadWord(), 0 < (t = e - t) ? i << t | this.readBits(t) : i;
    }, this.skipLeadingZeros = function () {
      var e;for (e = 0; e < s; ++e) {
        if (0 != (a & 2147483648 >>> e)) return a <<= e, s -= e, e;
      }return this.loadWord(), e + this.skipLeadingZeros();
    }, this.skipUnsignedExpGolomb = function () {
      this.skipBits(1 + this.skipLeadingZeros());
    }, this.skipExpGolomb = function () {
      this.skipBits(1 + this.skipLeadingZeros());
    }, this.readUnsignedExpGolomb = function () {
      var e = this.skipLeadingZeros();return this.readBits(e + 1) - 1;
    }, this.readExpGolomb = function () {
      var e = this.readUnsignedExpGolomb();return 1 & e ? 1 + e >>> 1 : -1 * (e >>> 1);
    }, this.readBoolean = function () {
      return 1 === this.readBits(1);
    }, this.readUnsignedByte = function () {
      return this.readBits(8);
    }, this.loadWord();
  };(_jo = function jo() {
    var i,
        n,
        r = 0;_jo.prototype.init.call(this), this.push = function (e) {
      var t;for (n = n ? ((t = new Uint8Array(n.byteLength + e.data.byteLength)).set(n), t.set(e.data, n.byteLength), t) : e.data; r < n.byteLength - 3; r++) {
        if (1 === n[r + 2]) {
          i = r + 5;break;
        }
      }for (; i < n.byteLength;) {
        switch (n[i]) {case 0:
            if (0 !== n[i - 1]) {
              i += 2;break;
            }if (0 !== n[i - 2]) {
              i++;break;
            }for (r + 3 !== i - 2 && this.trigger("data", n.subarray(r + 3, i - 2)); 1 !== n[++i] && i < n.length;) {}r = i - 2, i += 3;break;case 1:
            if (0 !== n[i - 1] || 0 !== n[i - 2]) {
              i += 3;break;
            }this.trigger("data", n.subarray(r + 3, i - 2)), r = i - 2, i += 3;break;default:
            i += 3;}
      }n = n.subarray(r), i -= r, r = 0;
    }, this.flush = function () {
      n && 3 < n.byteLength && this.trigger("data", n.subarray(r + 3)), n = null, r = 0, this.trigger("done");
    };
  }).prototype = new js(), Fo = { 100: !0, 110: !0, 122: !0, 244: !0, 44: !0, 83: !0, 86: !0, 118: !0, 128: !0, 138: !0, 139: !0, 134: !0 }, (_No = function No() {
    var i,
        n,
        r,
        a,
        s,
        o,
        _,
        t = new _jo();_No.prototype.init.call(this), (i = this).push = function (e) {
      "video" === e.type && (n = e.trackId, r = e.pts, a = e.dts, t.push(e));
    }, t.on("data", function (e) {
      var t = { trackId: n, pts: r, dts: a, data: e };switch (31 & e[0]) {case 5:
          t.nalUnitType = "slice_layer_without_partitioning_rbsp_idr";break;case 6:
          t.nalUnitType = "sei_rbsp", t.escapedRBSP = s(e.subarray(1));break;case 7:
          t.nalUnitType = "seq_parameter_set_rbsp", t.escapedRBSP = s(e.subarray(1)), t.config = o(t.escapedRBSP);break;case 8:
          t.nalUnitType = "pic_parameter_set_rbsp";break;case 9:
          t.nalUnitType = "access_unit_delimiter_rbsp";}i.trigger("data", t);
    }), t.on("done", function () {
      i.trigger("done");
    }), this.flush = function () {
      t.flush();
    }, _ = function _(e, t) {
      var i,
          n = 8,
          r = 8;for (i = 0; i < e; i++) {
        0 !== r && (r = (n + t.readExpGolomb() + 256) % 256), n = 0 === r ? n : r;
      }
    }, s = function s(e) {
      for (var t, i, n = e.byteLength, r = [], a = 1; a < n - 2;) {
        0 === e[a] && 0 === e[a + 1] && 3 === e[a + 2] ? (r.push(a + 2), a += 2) : a++;
      }if (0 === r.length) return e;t = n - r.length, i = new Uint8Array(t);var s = 0;for (a = 0; a < t; s++, a++) {
        s === r[0] && (s++, r.shift()), i[a] = e[s];
      }return i;
    }, o = function o(e) {
      var t,
          i,
          n,
          r,
          a,
          s,
          o,
          u,
          l,
          c,
          d,
          h,
          p,
          f = 0,
          m = 0,
          g = 0,
          y = 0,
          v = 1;if (i = (t = new Vo(e)).readUnsignedByte(), r = t.readUnsignedByte(), n = t.readUnsignedByte(), t.skipUnsignedExpGolomb(), Fo[i] && (3 === (a = t.readUnsignedExpGolomb()) && t.skipBits(1), t.skipUnsignedExpGolomb(), t.skipUnsignedExpGolomb(), t.skipBits(1), t.readBoolean())) for (d = 3 !== a ? 8 : 12, p = 0; p < d; p++) {
        t.readBoolean() && _(p < 6 ? 16 : 64, t);
      }if (t.skipUnsignedExpGolomb(), 0 === (s = t.readUnsignedExpGolomb())) t.readUnsignedExpGolomb();else if (1 === s) for (t.skipBits(1), t.skipExpGolomb(), t.skipExpGolomb(), o = t.readUnsignedExpGolomb(), p = 0; p < o; p++) {
        t.skipExpGolomb();
      }if (t.skipUnsignedExpGolomb(), t.skipBits(1), u = t.readUnsignedExpGolomb(), l = t.readUnsignedExpGolomb(), 0 === (c = t.readBits(1)) && t.skipBits(1), t.skipBits(1), t.readBoolean() && (f = t.readUnsignedExpGolomb(), m = t.readUnsignedExpGolomb(), g = t.readUnsignedExpGolomb(), y = t.readUnsignedExpGolomb()), t.readBoolean() && t.readBoolean()) {
        switch (t.readUnsignedByte()) {case 1:
            h = [1, 1];break;case 2:
            h = [12, 11];break;case 3:
            h = [10, 11];break;case 4:
            h = [16, 11];break;case 5:
            h = [40, 33];break;case 6:
            h = [24, 11];break;case 7:
            h = [20, 11];break;case 8:
            h = [32, 11];break;case 9:
            h = [80, 33];break;case 10:
            h = [18, 11];break;case 11:
            h = [15, 11];break;case 12:
            h = [64, 33];break;case 13:
            h = [160, 99];break;case 14:
            h = [4, 3];break;case 15:
            h = [3, 2];break;case 16:
            h = [2, 1];break;case 255:
            h = [t.readUnsignedByte() << 8 | t.readUnsignedByte(), t.readUnsignedByte() << 8 | t.readUnsignedByte()];}h && (v = h[0] / h[1]);
      }return { profileIdc: i, levelIdc: n, profileCompatibility: r, width: Math.ceil((16 * (u + 1) - 2 * f - 2 * m) * v), height: (2 - c) * (l + 1) * 16 - 2 * g - 2 * y };
    };
  }).prototype = new js();var _qo,
      zo = { H264Stream: _No, NalByteStream: _jo },
      Wo = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350],
      Go = function Go(e) {
    return e[0] << 21 | e[1] << 14 | e[2] << 7 | e[3];
  },
      Xo = { isLikelyAacData: function isLikelyAacData(e) {
      return e[0] === "I".charCodeAt(0) && e[1] === "D".charCodeAt(0) && e[2] === "3".charCodeAt(0);
    }, parseId3TagSize: function parseId3TagSize(e, t) {
      var i = e[t + 6] << 21 | e[t + 7] << 14 | e[t + 8] << 7 | e[t + 9];return (16 & e[t + 5]) >> 4 ? i + 20 : i + 10;
    }, parseAdtsSize: function parseAdtsSize(e, t) {
      var i = (224 & e[t + 5]) >> 5,
          n = e[t + 4] << 3;return 6144 & e[t + 3] | n | i;
    }, parseType: function parseType(e, t) {
      return e[t] === "I".charCodeAt(0) && e[t + 1] === "D".charCodeAt(0) && e[t + 2] === "3".charCodeAt(0) ? "timed-metadata" : !0 & e[t] && 240 == (240 & e[t + 1]) ? "audio" : null;
    }, parseSampleRate: function parseSampleRate(e) {
      for (var t = 0; t + 5 < e.length;) {
        if (255 === e[t] && 240 == (246 & e[t + 1])) return Wo[(60 & e[t + 2]) >>> 2];t++;
      }return null;
    }, parseAacTimestamp: function parseAacTimestamp(e) {
      var t, i, n;t = 10, 64 & e[5] && (t += 4, t += Go(e.subarray(10, 14)));do {
        if ((i = Go(e.subarray(t + 4, t + 8))) < 1) return null;if ("PRIV" === String.fromCharCode(e[t], e[t + 1], e[t + 2], e[t + 3])) {
          n = e.subarray(t + 10, t + i + 10);for (var r = 0; r < n.byteLength; r++) {
            if (0 === n[r]) {
              if ("com.apple.streaming.transportStreamTimestamp" !== unescape(function (e, t, i) {
                var n,
                    r = "";for (n = t; n < i; n++) {
                  r += "%" + ("00" + e[n].toString(16)).slice(-2);
                }return r;
              }(n, 0, r))) break;var a = n.subarray(r + 1),
                  s = (1 & a[3]) << 30 | a[4] << 22 | a[5] << 14 | a[6] << 6 | a[7] >>> 2;return s *= 4, s += 3 & a[7];
            }
          }
        }t += 10, t += i;
      } while (t < e.byteLength);return null;
    } };(_qo = function qo() {
    var o = new Uint8Array(),
        u = 0;_qo.prototype.init.call(this), this.setTimestamp = function (e) {
      u = e;
    }, this.push = function (e) {
      var t,
          i,
          n,
          r,
          a = 0,
          s = 0;for (o.length ? (r = o.length, (o = new Uint8Array(e.byteLength + r)).set(o.subarray(0, r)), o.set(e, r)) : o = e; 3 <= o.length - s;) {
        if (o[s] !== "I".charCodeAt(0) || o[s + 1] !== "D".charCodeAt(0) || o[s + 2] !== "3".charCodeAt(0)) {
          if (255 != (255 & o[s]) || 240 != (240 & o[s + 1])) s++;else {
            if (o.length - s < 7) break;if (s + (a = Xo.parseAdtsSize(o, s)) > o.length) break;n = { type: "audio", data: o.subarray(s, s + a), pts: u, dts: u }, this.trigger("data", n), s += a;
          }
        } else {
          if (o.length - s < 10) break;if (s + (a = Xo.parseId3TagSize(o, s)) > o.length) break;i = { type: "timed-metadata", data: o.subarray(s, s + a) }, this.trigger("data", i), s += a;
        }
      }t = o.length - s, o = 0 < t ? o.subarray(s) : new Uint8Array();
    };
  }).prototype = new js();var _Ko,
      _Yo,
      _$o,
      _Qo,
      Jo = _qo,
      Zo = zo.H264Stream,
      eu = Xo.isLikelyAacData,
      tu = ["audioobjecttype", "channelcount", "samplerate", "samplingfrequencyindex", "samplesize"],
      iu = ["width", "height", "profileIdc", "levelIdc", "profileCompatibility"],
      nu = function nu(e, t) {
    var i;if (e.length !== t.length) return !1;for (i = 0; i < e.length; i++) {
      if (e[i] !== t[i]) return !1;
    }return !0;
  },
      ru = function ru(e, t, i, n, r, a) {
    return { start: { dts: e, pts: e + (i - t) }, end: { dts: e + (n - t), pts: e + (r - i) }, prependedContentDuration: a, baseMediaDecodeTime: e };
  };(_Yo = function Yo(r, a) {
    var s = [],
        o = 0,
        u = 0,
        l = 0,
        c = 1 / 0;a = a || {}, _Yo.prototype.init.call(this), this.push = function (t) {
      ro(r, t), r && tu.forEach(function (e) {
        r[e] = t[e];
      }), s.push(t);
    }, this.setEarliestDts = function (e) {
      u = e - r.timelineStartInfo.baseMediaDecodeTime;
    }, this.setVideoBaseMediaDecodeTime = function (e) {
      c = e;
    }, this.setAudioAppendStart = function (e) {
      l = e;
    }, this.flush = function () {
      var e, t, i, n;0 !== s.length && (e = Zs(s, r, u), r.baseMediaDecodeTime = no(r, a.keepOriginalTimestamps), Js(r, e, l, c), r.samples = eo(e), i = Os.mdat(to(e)), s = [], t = Os.moof(o, [r]), n = new Uint8Array(t.byteLength + i.byteLength), o++, n.set(t), n.set(i, t.byteLength), io(r), this.trigger("data", { track: r, boxes: n })), this.trigger("done", "AudioSegmentStream");
    };
  }).prototype = new js(), (_Ko = function Ko(c, d) {
    var t,
        i,
        h = 0,
        p = [],
        f = [];d = d || {}, _Ko.prototype.init.call(this), delete c.minPTS, this.gopCache_ = [], this.push = function (e) {
      ro(c, e), "seq_parameter_set_rbsp" !== e.nalUnitType || t || (t = e.config, c.sps = [e.data], iu.forEach(function (e) {
        c[e] = t[e];
      }, this)), "pic_parameter_set_rbsp" !== e.nalUnitType || i || (i = e.data, c.pps = [e.data]), p.push(e);
    }, this.flush = function () {
      for (var e, t, i, n, r, a, s, o, u = 0; p.length && "access_unit_delimiter_rbsp" !== p[0].nalUnitType;) {
        p.shift();
      }if (0 === p.length) return this.resetStream_(), void this.trigger("done", "VideoSegmentStream");if (e = Fs(p), (i = Hs(e))[0][0].keyFrame || ((t = this.getGopForFusion_(p[0], c)) ? (u = t.duration, i.unshift(t), i.byteLength += t.byteLength, i.nalCount += t.nalCount, i.pts = t.pts, i.dts = t.dts, i.duration += t.duration) : i = Vs(i)), f.length) {
        var l;if (!(l = d.alignGopsAtEnd ? this.alignGopsAtEnd_(i) : this.alignGopsAtStart_(i))) return this.gopCache_.unshift({ gop: i.pop(), pps: c.pps, sps: c.sps }), this.gopCache_.length = Math.min(6, this.gopCache_.length), p = [], this.resetStream_(), void this.trigger("done", "VideoSegmentStream");io(c), i = l;
      }ro(c, i), c.samples = qs(i), r = Os.mdat(zs(i)), c.baseMediaDecodeTime = no(c, d.keepOriginalTimestamps), this.trigger("processedGopsInfo", i.map(function (e) {
        return { pts: e.pts, dts: e.dts, byteLength: e.byteLength };
      })), s = i[0], o = i[i.length - 1], this.trigger("segmentTimingInfo", ru(c.baseMediaDecodeTime, s.dts, s.pts, o.dts + o.duration, o.pts + o.duration, u)), this.gopCache_.unshift({ gop: i.pop(), pps: c.pps, sps: c.sps }), this.gopCache_.length = Math.min(6, this.gopCache_.length), p = [], this.trigger("baseMediaDecodeTime", c.baseMediaDecodeTime), this.trigger("timelineStartInfo", c.timelineStartInfo), n = Os.moof(h, [c]), a = new Uint8Array(n.byteLength + r.byteLength), h++, a.set(n), a.set(r, n.byteLength), this.trigger("data", { track: c, boxes: a }), this.resetStream_(), this.trigger("done", "VideoSegmentStream");
    }, this.resetStream_ = function () {
      io(c), i = t = void 0;
    }, this.getGopForFusion_ = function (e) {
      var t,
          i,
          n,
          r,
          a,
          s = 1 / 0;for (a = 0; a < this.gopCache_.length; a++) {
        n = (r = this.gopCache_[a]).gop, c.pps && nu(c.pps[0], r.pps[0]) && c.sps && nu(c.sps[0], r.sps[0]) && (n.dts < c.timelineStartInfo.dts || -1e4 <= (t = e.dts - n.dts - n.duration) && t <= 45e3 && (!i || t < s) && (i = r, s = t));
      }return i ? i.gop : null;
    }, this.alignGopsAtStart_ = function (e) {
      var t, i, n, r, a, s, o, u;for (a = e.byteLength, s = e.nalCount, o = e.duration, t = i = 0; t < f.length && i < e.length && (n = f[t], r = e[i], n.pts !== r.pts);) {
        r.pts > n.pts ? t++ : (i++, a -= r.byteLength, s -= r.nalCount, o -= r.duration);
      }return 0 === i ? e : i === e.length ? null : ((u = e.slice(i)).byteLength = a, u.duration = o, u.nalCount = s, u.pts = u[0].pts, u.dts = u[0].dts, u);
    }, this.alignGopsAtEnd_ = function (e) {
      var t, i, n, r, a, s, o;for (t = f.length - 1, i = e.length - 1, a = null, s = !1; 0 <= t && 0 <= i;) {
        if (n = f[t], r = e[i], n.pts === r.pts) {
          s = !0;break;
        }n.pts > r.pts ? t-- : (t === f.length - 1 && (a = i), i--);
      }if (!s && null === a) return null;if (0 === (o = s ? i : a)) return e;var u = e.slice(o),
          l = u.reduce(function (e, t) {
        return e.byteLength += t.byteLength, e.duration += t.duration, e.nalCount += t.nalCount, e;
      }, { byteLength: 0, duration: 0, nalCount: 0 });return u.byteLength = l.byteLength, u.duration = l.duration, u.nalCount = l.nalCount, u.pts = u[0].pts, u.dts = u[0].dts, u;
    }, this.alignGopsWith = function (e) {
      f = e;
    };
  }).prototype = new js(), (_Qo = function Qo(e, t) {
    this.numberOfTracks = 0, this.metadataStream = t, "undefined" != typeof (e = e || {}).remux ? this.remuxTracks = !!e.remux : this.remuxTracks = !0, "boolean" == typeof e.keepOriginalTimestamps && (this.keepOriginalTimestamps = e.keepOriginalTimestamps), this.pendingTracks = [], this.videoTrack = null, this.pendingBoxes = [], this.pendingCaptions = [], this.pendingMetadata = [], this.pendingBytes = 0, this.emittedTracks = 0, _Qo.prototype.init.call(this), this.push = function (e) {
      return e.text ? this.pendingCaptions.push(e) : e.frames ? this.pendingMetadata.push(e) : (this.pendingTracks.push(e.track), this.pendingBoxes.push(e.boxes), this.pendingBytes += e.boxes.byteLength, "video" === e.track.type && (this.videoTrack = e.track), void ("audio" === e.track.type && (this.audioTrack = e.track)));
    };
  }).prototype = new js(), _Qo.prototype.flush = function (e) {
    var t,
        i,
        n,
        r,
        a = 0,
        s = { captions: [], captionStreams: {}, metadata: [], info: {} },
        o = 0;if (this.pendingTracks.length < this.numberOfTracks) {
      if ("VideoSegmentStream" !== e && "AudioSegmentStream" !== e) return;if (this.remuxTracks) return;if (0 === this.pendingTracks.length) return this.emittedTracks++, void (this.emittedTracks >= this.numberOfTracks && (this.trigger("done"), this.emittedTracks = 0));
    }for (this.videoTrack ? (o = this.videoTrack.timelineStartInfo.pts, iu.forEach(function (e) {
      s.info[e] = this.videoTrack[e];
    }, this)) : this.audioTrack && (o = this.audioTrack.timelineStartInfo.pts, tu.forEach(function (e) {
      s.info[e] = this.audioTrack[e];
    }, this)), 1 === this.pendingTracks.length ? s.type = this.pendingTracks[0].type : s.type = "combined", this.emittedTracks += this.pendingTracks.length, n = Os.initSegment(this.pendingTracks), s.initSegment = new Uint8Array(n.byteLength), s.initSegment.set(n), s.data = new Uint8Array(this.pendingBytes), r = 0; r < this.pendingBoxes.length; r++) {
      s.data.set(this.pendingBoxes[r], a), a += this.pendingBoxes[r].byteLength;
    }for (r = 0; r < this.pendingCaptions.length; r++) {
      (t = this.pendingCaptions[r]).startTime = t.startPts, this.keepOriginalTimestamps || (t.startTime -= o), t.startTime /= 9e4, t.endTime = t.endPts, this.keepOriginalTimestamps || (t.endTime -= o), t.endTime /= 9e4, s.captionStreams[t.stream] = !0, s.captions.push(t);
    }for (r = 0; r < this.pendingMetadata.length; r++) {
      (i = this.pendingMetadata[r]).cueTime = i.pts, this.keepOriginalTimestamps || (i.cueTime -= o), i.cueTime /= 9e4, s.metadata.push(i);
    }s.metadata.dispatchType = this.metadataStream.dispatchType, this.pendingTracks.length = 0, this.videoTrack = null, this.pendingBoxes.length = 0, this.pendingCaptions.length = 0, this.pendingBytes = 0, this.pendingMetadata.length = 0, this.trigger("data", s), this.emittedTracks >= this.numberOfTracks && (this.trigger("done"), this.emittedTracks = 0);
  }, (_$o = function $o(n) {
    var r,
        a,
        s = this,
        i = !0;_$o.prototype.init.call(this), n = n || {}, this.baseMediaDecodeTime = n.baseMediaDecodeTime || 0, this.transmuxPipeline_ = {}, this.setupAacPipeline = function () {
      var t = {};(this.transmuxPipeline_ = t).type = "aac", t.metadataStream = new Mo.MetadataStream(), t.aacStream = new Jo(), t.audioTimestampRolloverStream = new Mo.TimestampRolloverStream("audio"), t.timedMetadataTimestampRolloverStream = new Mo.TimestampRolloverStream("timed-metadata"), t.adtsStream = new Ho(), t.coalesceStream = new _Qo(n, t.metadataStream), t.headOfPipeline = t.aacStream, t.aacStream.pipe(t.audioTimestampRolloverStream).pipe(t.adtsStream), t.aacStream.pipe(t.timedMetadataTimestampRolloverStream).pipe(t.metadataStream).pipe(t.coalesceStream), t.metadataStream.on("timestamp", function (e) {
        t.aacStream.setTimestamp(e.timeStamp);
      }), t.aacStream.on("data", function (e) {
        "timed-metadata" !== e.type || t.audioSegmentStream || (a = a || { timelineStartInfo: { baseMediaDecodeTime: s.baseMediaDecodeTime }, codec: "adts", type: "audio" }, t.coalesceStream.numberOfTracks++, t.audioSegmentStream = new _Yo(a, n), t.adtsStream.pipe(t.audioSegmentStream).pipe(t.coalesceStream));
      }), t.coalesceStream.on("data", this.trigger.bind(this, "data")), t.coalesceStream.on("done", this.trigger.bind(this, "done"));
    }, this.setupTsPipeline = function () {
      var i = {};(this.transmuxPipeline_ = i).type = "ts", i.metadataStream = new Mo.MetadataStream(), i.packetStream = new Mo.TransportPacketStream(), i.parseStream = new Mo.TransportParseStream(), i.elementaryStream = new Mo.ElementaryStream(), i.videoTimestampRolloverStream = new Mo.TimestampRolloverStream("video"), i.audioTimestampRolloverStream = new Mo.TimestampRolloverStream("audio"), i.timedMetadataTimestampRolloverStream = new Mo.TimestampRolloverStream("timed-metadata"), i.adtsStream = new Ho(), i.h264Stream = new Zo(), i.captionStream = new Mo.CaptionStream(), i.coalesceStream = new _Qo(n, i.metadataStream), i.headOfPipeline = i.packetStream, i.packetStream.pipe(i.parseStream).pipe(i.elementaryStream), i.elementaryStream.pipe(i.videoTimestampRolloverStream).pipe(i.h264Stream), i.elementaryStream.pipe(i.audioTimestampRolloverStream).pipe(i.adtsStream), i.elementaryStream.pipe(i.timedMetadataTimestampRolloverStream).pipe(i.metadataStream).pipe(i.coalesceStream), i.h264Stream.pipe(i.captionStream).pipe(i.coalesceStream), i.elementaryStream.on("data", function (e) {
        var t;if ("metadata" === e.type) {
          for (t = e.tracks.length; t--;) {
            r || "video" !== e.tracks[t].type ? a || "audio" !== e.tracks[t].type || ((a = e.tracks[t]).timelineStartInfo.baseMediaDecodeTime = s.baseMediaDecodeTime) : (r = e.tracks[t]).timelineStartInfo.baseMediaDecodeTime = s.baseMediaDecodeTime;
          }r && !i.videoSegmentStream && (i.coalesceStream.numberOfTracks++, i.videoSegmentStream = new _Ko(r, n), i.videoSegmentStream.on("timelineStartInfo", function (e) {
            a && (a.timelineStartInfo = e, i.audioSegmentStream.setEarliestDts(e.dts));
          }), i.videoSegmentStream.on("processedGopsInfo", s.trigger.bind(s, "gopInfo")), i.videoSegmentStream.on("segmentTimingInfo", s.trigger.bind(s, "videoSegmentTimingInfo")), i.videoSegmentStream.on("baseMediaDecodeTime", function (e) {
            a && i.audioSegmentStream.setVideoBaseMediaDecodeTime(e);
          }), i.h264Stream.pipe(i.videoSegmentStream).pipe(i.coalesceStream)), a && !i.audioSegmentStream && (i.coalesceStream.numberOfTracks++, i.audioSegmentStream = new _Yo(a, n), i.adtsStream.pipe(i.audioSegmentStream).pipe(i.coalesceStream));
        }
      }), i.coalesceStream.on("data", this.trigger.bind(this, "data")), i.coalesceStream.on("done", this.trigger.bind(this, "done"));
    }, this.setBaseMediaDecodeTime = function (e) {
      var t = this.transmuxPipeline_;n.keepOriginalTimestamps || (this.baseMediaDecodeTime = e), a && (a.timelineStartInfo.dts = void 0, a.timelineStartInfo.pts = void 0, io(a), n.keepOriginalTimestamps || (a.timelineStartInfo.baseMediaDecodeTime = e), t.audioTimestampRolloverStream && t.audioTimestampRolloverStream.discontinuity()), r && (t.videoSegmentStream && (t.videoSegmentStream.gopCache_ = [], t.videoTimestampRolloverStream.discontinuity()), r.timelineStartInfo.dts = void 0, r.timelineStartInfo.pts = void 0, io(r), t.captionStream.reset(), n.keepOriginalTimestamps || (r.timelineStartInfo.baseMediaDecodeTime = e)), t.timedMetadataTimestampRolloverStream && t.timedMetadataTimestampRolloverStream.discontinuity();
    }, this.setAudioAppendStart = function (e) {
      a && this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(e);
    }, this.alignGopsWith = function (e) {
      r && this.transmuxPipeline_.videoSegmentStream && this.transmuxPipeline_.videoSegmentStream.alignGopsWith(e);
    }, this.push = function (e) {
      if (i) {
        var t = eu(e);t && "aac" !== this.transmuxPipeline_.type ? this.setupAacPipeline() : t || "ts" === this.transmuxPipeline_.type || this.setupTsPipeline(), i = !1;
      }this.transmuxPipeline_.headOfPipeline.push(e);
    }, this.flush = function () {
      i = !0, this.transmuxPipeline_.headOfPipeline.flush();
    }, this.resetCaptions = function () {
      this.transmuxPipeline_.captionStream && this.transmuxPipeline_.captionStream.reset();
    };
  }).prototype = new js();var au,
      _su,
      ou = { Transmuxer: _$o, VideoSegmentStream: _Ko, AudioSegmentStream: _Yo, AUDIO_PROPERTIES: tu, VIDEO_PROPERTIES: iu, generateVideoSegmentTimingInfo: ru },
      uu = Ls.parseType,
      lu = function lu(e) {
    return new Date(1e3 * e - 20828448e5);
  },
      cu = function cu(e) {
    return { isLeading: (12 & e[0]) >>> 2, dependsOn: 3 & e[0], isDependedOn: (192 & e[1]) >>> 6, hasRedundancy: (48 & e[1]) >>> 4, paddingValue: (14 & e[1]) >>> 1, isNonSyncSample: 1 & e[1], degradationPriority: e[2] << 8 | e[3] };
  },
      du = { avc1: function avc1(e) {
      var t = new DataView(e.buffer, e.byteOffset, e.byteLength);return { dataReferenceIndex: t.getUint16(6), width: t.getUint16(24), height: t.getUint16(26), horizresolution: t.getUint16(28) + t.getUint16(30) / 16, vertresolution: t.getUint16(32) + t.getUint16(34) / 16, frameCount: t.getUint16(40), depth: t.getUint16(74), config: au(e.subarray(78, e.byteLength)) };
    }, avcC: function avcC(e) {
      var t,
          i,
          n,
          r,
          a = new DataView(e.buffer, e.byteOffset, e.byteLength),
          s = { configurationVersion: e[0], avcProfileIndication: e[1], profileCompatibility: e[2], avcLevelIndication: e[3], lengthSizeMinusOne: 3 & e[4], sps: [], pps: [] },
          o = 31 & e[5];for (n = 6, r = 0; r < o; r++) {
        i = a.getUint16(n), n += 2, s.sps.push(new Uint8Array(e.subarray(n, n + i))), n += i;
      }for (t = e[n], n++, r = 0; r < t; r++) {
        i = a.getUint16(n), n += 2, s.pps.push(new Uint8Array(e.subarray(n, n + i))), n += i;
      }return s;
    }, btrt: function btrt(e) {
      var t = new DataView(e.buffer, e.byteOffset, e.byteLength);return { bufferSizeDB: t.getUint32(0), maxBitrate: t.getUint32(4), avgBitrate: t.getUint32(8) };
    }, esds: function esds(e) {
      return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), esId: e[6] << 8 | e[7], streamPriority: 31 & e[8], decoderConfig: { objectProfileIndication: e[11], streamType: e[12] >>> 2 & 63, bufferSize: e[13] << 16 | e[14] << 8 | e[15], maxBitrate: e[16] << 24 | e[17] << 16 | e[18] << 8 | e[19], avgBitrate: e[20] << 24 | e[21] << 16 | e[22] << 8 | e[23], decoderConfigDescriptor: { tag: e[24], length: e[25], audioObjectType: e[26] >>> 3 & 31, samplingFrequencyIndex: (7 & e[26]) << 1 | e[27] >>> 7 & 1, channelConfiguration: e[27] >>> 3 & 15 } } };
    }, ftyp: function ftyp(e) {
      for (var t = new DataView(e.buffer, e.byteOffset, e.byteLength), i = { majorBrand: uu(e.subarray(0, 4)), minorVersion: t.getUint32(4), compatibleBrands: [] }, n = 8; n < e.byteLength;) {
        i.compatibleBrands.push(uu(e.subarray(n, n + 4))), n += 4;
      }return i;
    }, dinf: function dinf(e) {
      return { boxes: au(e) };
    }, dref: function dref(e) {
      return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), dataReferences: au(e.subarray(8)) };
    }, hdlr: function hdlr(e) {
      var t = { version: new DataView(e.buffer, e.byteOffset, e.byteLength).getUint8(0), flags: new Uint8Array(e.subarray(1, 4)), handlerType: uu(e.subarray(8, 12)), name: "" },
          i = 8;for (i = 24; i < e.byteLength; i++) {
        if (0 === e[i]) {
          i++;break;
        }t.name += String.fromCharCode(e[i]);
      }return t.name = decodeURIComponent(escape(t.name)), t;
    }, mdat: function mdat(e) {
      return { byteLength: e.byteLength, nals: function (e) {
          var t,
              i,
              n = new DataView(e.buffer, e.byteOffset, e.byteLength),
              r = [];for (t = 0; t + 4 < e.length; t += i) {
            if (i = n.getUint32(t), t += 4, i <= 0) r.push("<span style='color:red;'>MALFORMED DATA</span>");else switch (31 & e[t]) {case 1:
                r.push("slice_layer_without_partitioning_rbsp");break;case 5:
                r.push("slice_layer_without_partitioning_rbsp_idr");break;case 6:
                r.push("sei_rbsp");break;case 7:
                r.push("seq_parameter_set_rbsp");break;case 8:
                r.push("pic_parameter_set_rbsp");break;case 9:
                r.push("access_unit_delimiter_rbsp");break;default:
                r.push("UNKNOWN NAL - " + e[t] & 31);}
          }return r;
        }(e) };
    }, mdhd: function mdhd(e) {
      var t,
          i = new DataView(e.buffer, e.byteOffset, e.byteLength),
          n = 4,
          r = { version: i.getUint8(0), flags: new Uint8Array(e.subarray(1, 4)), language: "" };return 1 === r.version ? (n += 4, r.creationTime = lu(i.getUint32(n)), n += 8, r.modificationTime = lu(i.getUint32(n)), n += 4, r.timescale = i.getUint32(n), n += 8) : (r.creationTime = lu(i.getUint32(n)), n += 4, r.modificationTime = lu(i.getUint32(n)), n += 4, r.timescale = i.getUint32(n), n += 4), r.duration = i.getUint32(n), n += 4, t = i.getUint16(n), r.language += String.fromCharCode(96 + (t >> 10)), r.language += String.fromCharCode(96 + ((992 & t) >> 5)), r.language += String.fromCharCode(96 + (31 & t)), r;
    }, mdia: function mdia(e) {
      return { boxes: au(e) };
    }, mfhd: function mfhd(e) {
      return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), sequenceNumber: e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7] };
    }, minf: function minf(e) {
      return { boxes: au(e) };
    }, mp4a: function mp4a(e) {
      var t = new DataView(e.buffer, e.byteOffset, e.byteLength),
          i = { dataReferenceIndex: t.getUint16(6), channelcount: t.getUint16(16), samplesize: t.getUint16(18), samplerate: t.getUint16(24) + t.getUint16(26) / 65536 };return 28 < e.byteLength && (i.streamDescriptor = au(e.subarray(28))[0]), i;
    }, moof: function moof(e) {
      return { boxes: au(e) };
    }, moov: function moov(e) {
      return { boxes: au(e) };
    }, mvex: function mvex(e) {
      return { boxes: au(e) };
    }, mvhd: function mvhd(e) {
      var t = new DataView(e.buffer, e.byteOffset, e.byteLength),
          i = 4,
          n = { version: t.getUint8(0), flags: new Uint8Array(e.subarray(1, 4)) };return 1 === n.version ? (i += 4, n.creationTime = lu(t.getUint32(i)), i += 8, n.modificationTime = lu(t.getUint32(i)), i += 4, n.timescale = t.getUint32(i), i += 8) : (n.creationTime = lu(t.getUint32(i)), i += 4, n.modificationTime = lu(t.getUint32(i)), i += 4, n.timescale = t.getUint32(i), i += 4), n.duration = t.getUint32(i), i += 4, n.rate = t.getUint16(i) + t.getUint16(i + 2) / 16, i += 4, n.volume = t.getUint8(i) + t.getUint8(i + 1) / 8, i += 2, i += 2, i += 8, n.matrix = new Uint32Array(e.subarray(i, i + 36)), i += 36, i += 24, n.nextTrackId = t.getUint32(i), n;
    }, pdin: function pdin(e) {
      var t = new DataView(e.buffer, e.byteOffset, e.byteLength);return { version: t.getUint8(0), flags: new Uint8Array(e.subarray(1, 4)), rate: t.getUint32(4), initialDelay: t.getUint32(8) };
    }, sdtp: function sdtp(e) {
      var t,
          i = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), samples: [] };for (t = 4; t < e.byteLength; t++) {
        i.samples.push({ dependsOn: (48 & e[t]) >> 4, isDependedOn: (12 & e[t]) >> 2, hasRedundancy: 3 & e[t] });
      }return i;
    }, sidx: function sidx(e) {
      var t,
          i = new DataView(e.buffer, e.byteOffset, e.byteLength),
          n = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), references: [], referenceId: i.getUint32(4), timescale: i.getUint32(8), earliestPresentationTime: i.getUint32(12), firstOffset: i.getUint32(16) },
          r = i.getUint16(22);for (t = 24; r; t += 12, r--) {
        n.references.push({ referenceType: (128 & e[t]) >>> 7, referencedSize: 2147483647 & i.getUint32(t), subsegmentDuration: i.getUint32(t + 4), startsWithSap: !!(128 & e[t + 8]), sapType: (112 & e[t + 8]) >>> 4, sapDeltaTime: 268435455 & i.getUint32(t + 8) });
      }return n;
    }, smhd: function smhd(e) {
      return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), balance: e[4] + e[5] / 256 };
    }, stbl: function stbl(e) {
      return { boxes: au(e) };
    }, stco: function stco(e) {
      var t,
          i = new DataView(e.buffer, e.byteOffset, e.byteLength),
          n = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), chunkOffsets: [] },
          r = i.getUint32(4);for (t = 8; r; t += 4, r--) {
        n.chunkOffsets.push(i.getUint32(t));
      }return n;
    }, stsc: function stsc(e) {
      var t,
          i = new DataView(e.buffer, e.byteOffset, e.byteLength),
          n = i.getUint32(4),
          r = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), sampleToChunks: [] };for (t = 8; n; t += 12, n--) {
        r.sampleToChunks.push({ firstChunk: i.getUint32(t), samplesPerChunk: i.getUint32(t + 4), sampleDescriptionIndex: i.getUint32(t + 8) });
      }return r;
    }, stsd: function stsd(e) {
      return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), sampleDescriptions: au(e.subarray(8)) };
    }, stsz: function stsz(e) {
      var t,
          i = new DataView(e.buffer, e.byteOffset, e.byteLength),
          n = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), sampleSize: i.getUint32(4), entries: [] };for (t = 12; t < e.byteLength; t += 4) {
        n.entries.push(i.getUint32(t));
      }return n;
    }, stts: function stts(e) {
      var t,
          i = new DataView(e.buffer, e.byteOffset, e.byteLength),
          n = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), timeToSamples: [] },
          r = i.getUint32(4);for (t = 8; r; t += 8, r--) {
        n.timeToSamples.push({ sampleCount: i.getUint32(t), sampleDelta: i.getUint32(t + 4) });
      }return n;
    }, styp: function styp(e) {
      return du.ftyp(e);
    }, tfdt: function tfdt(e) {
      var t = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), baseMediaDecodeTime: e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7] };return 1 === t.version && (t.baseMediaDecodeTime *= Math.pow(2, 32), t.baseMediaDecodeTime += e[8] << 24 | e[9] << 16 | e[10] << 8 | e[11]), t;
    }, tfhd: function tfhd(e) {
      var t,
          i = new DataView(e.buffer, e.byteOffset, e.byteLength),
          n = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), trackId: i.getUint32(4) },
          r = 1 & n.flags[2],
          a = 2 & n.flags[2],
          s = 8 & n.flags[2],
          o = 16 & n.flags[2],
          u = 32 & n.flags[2],
          l = 65536 & n.flags[0],
          c = 131072 & n.flags[0];return t = 8, r && (t += 4, n.baseDataOffset = i.getUint32(12), t += 4), a && (n.sampleDescriptionIndex = i.getUint32(t), t += 4), s && (n.defaultSampleDuration = i.getUint32(t), t += 4), o && (n.defaultSampleSize = i.getUint32(t), t += 4), u && (n.defaultSampleFlags = i.getUint32(t)), l && (n.durationIsEmpty = !0), !r && c && (n.baseDataOffsetIsMoof = !0), n;
    }, tkhd: function tkhd(e) {
      var t = new DataView(e.buffer, e.byteOffset, e.byteLength),
          i = 4,
          n = { version: t.getUint8(0), flags: new Uint8Array(e.subarray(1, 4)) };return 1 === n.version ? (i += 4, n.creationTime = lu(t.getUint32(i)), i += 8, n.modificationTime = lu(t.getUint32(i)), i += 4, n.trackId = t.getUint32(i), i += 4, i += 8) : (n.creationTime = lu(t.getUint32(i)), i += 4, n.modificationTime = lu(t.getUint32(i)), i += 4, n.trackId = t.getUint32(i), i += 4, i += 4), n.duration = t.getUint32(i), i += 4, i += 8, n.layer = t.getUint16(i), i += 2, n.alternateGroup = t.getUint16(i), i += 2, n.volume = t.getUint8(i) + t.getUint8(i + 1) / 8, i += 2, i += 2, n.matrix = new Uint32Array(e.subarray(i, i + 36)), i += 36, n.width = t.getUint16(i) + t.getUint16(i + 2) / 16, i += 4, n.height = t.getUint16(i) + t.getUint16(i + 2) / 16, n;
    }, traf: function traf(e) {
      return { boxes: au(e) };
    }, trak: function trak(e) {
      return { boxes: au(e) };
    }, trex: function trex(e) {
      var t = new DataView(e.buffer, e.byteOffset, e.byteLength);return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), trackId: t.getUint32(4), defaultSampleDescriptionIndex: t.getUint32(8), defaultSampleDuration: t.getUint32(12), defaultSampleSize: t.getUint32(16), sampleDependsOn: 3 & e[20], sampleIsDependedOn: (192 & e[21]) >> 6, sampleHasRedundancy: (48 & e[21]) >> 4, samplePaddingValue: (14 & e[21]) >> 1, sampleIsDifferenceSample: !!(1 & e[21]), sampleDegradationPriority: t.getUint16(22) };
    }, trun: function trun(e) {
      var t,
          i = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), samples: [] },
          n = new DataView(e.buffer, e.byteOffset, e.byteLength),
          r = 1 & i.flags[2],
          a = 4 & i.flags[2],
          s = 1 & i.flags[1],
          o = 2 & i.flags[1],
          u = 4 & i.flags[1],
          l = 8 & i.flags[1],
          c = n.getUint32(4),
          d = 8;for (r && (i.dataOffset = n.getInt32(d), d += 4), a && c && (t = { flags: cu(e.subarray(d, d + 4)) }, d += 4, s && (t.duration = n.getUint32(d), d += 4), o && (t.size = n.getUint32(d), d += 4), l && (t.compositionTimeOffset = n.getUint32(d), d += 4), i.samples.push(t), c--); c--;) {
        t = {}, s && (t.duration = n.getUint32(d), d += 4), o && (t.size = n.getUint32(d), d += 4), u && (t.flags = cu(e.subarray(d, d + 4)), d += 4), l && (t.compositionTimeOffset = n.getUint32(d), d += 4), i.samples.push(t);
      }return i;
    }, "url ": function url(e) {
      return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)) };
    }, vmhd: function vmhd(e) {
      var t = new DataView(e.buffer, e.byteOffset, e.byteLength);return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), graphicsmode: t.getUint16(4), opcolor: new Uint16Array([t.getUint16(6), t.getUint16(8), t.getUint16(10)]) };
    } },
      hu = { inspect: au = function au(e) {
      for (var t, i, n, r, a, s = 0, o = [], u = new ArrayBuffer(e.length), l = new Uint8Array(u), c = 0; c < e.length; ++c) {
        l[c] = e[c];
      }for (t = new DataView(u); s < e.byteLength;) {
        i = t.getUint32(s), n = uu(e.subarray(s + 4, s + 8)), r = 1 < i ? s + i : e.byteLength, (a = (du[n] || function (e) {
          return { data: e };
        })(e.subarray(s + 8, r))).size = i, a.type = n, o.push(a), s = r;
      }return o;
    }, textify: _su = function su(e, t) {
      var a;return t = t || 0, a = new Array(2 * t + 1).join(" "), e.map(function (r, e) {
        return a + r.type + "\n" + Object.keys(r).filter(function (e) {
          return "type" !== e && "boxes" !== e;
        }).map(function (e) {
          var t = a + "  " + e + ": ",
              i = r[e];if (i instanceof Uint8Array || i instanceof Uint32Array) {
            var n = Array.prototype.slice.call(new Uint8Array(i.buffer, i.byteOffset, i.byteLength)).map(function (e) {
              return " " + ("00" + e.toString(16)).slice(-2);
            }).join("").match(/.{1,24}/g);return n ? 1 === n.length ? t + "<" + n.join("").slice(1) + ">" : t + "<\n" + n.map(function (e) {
              return a + "  " + e;
            }).join("\n") + "\n" + a + "  >" : t + "<>";
          }return t + JSON.stringify(i, null, 2).split("\n").map(function (e, t) {
            return 0 === t ? e : a + "  " + e;
          }).join("\n");
        }).join("\n") + (r.boxes ? "\n" + _su(r.boxes, t + 1) : "");
      }).join("\n");
    }, parseTfdt: du.tfdt, parseHdlr: du.hdlr, parseTfhd: du.tfhd, parseTrun: du.trun, parseSidx: du.sidx },
      pu = uo,
      fu = yo.CaptionStream,
      mu = function mu(e, t) {
    for (var i = e, n = 0; n < t.length; n++) {
      var r = t[n];if (i < r.size) return r;i -= r.size;
    }return null;
  },
      gu = function gu(e, y) {
    var n = Ls.findBox(e, ["moof", "traf"]),
        t = Ls.findBox(e, ["mdat"]),
        v = {},
        r = [];return t.forEach(function (e, t) {
      var i = n[t];r.push({ mdat: e, traf: i });
    }), r.forEach(function (e) {
      var t,
          i,
          n,
          r,
          a,
          s,
          o,
          u,
          l = e.mdat,
          c = e.traf,
          d = Ls.findBox(c, ["tfhd"]),
          h = hu.parseTfhd(d[0]),
          p = h.trackId,
          f = Ls.findBox(c, ["tfdt"]),
          m = 0 < f.length ? hu.parseTfdt(f[0]).baseMediaDecodeTime : 0,
          g = Ls.findBox(c, ["trun"]);y === p && 0 < g.length && (i = g, r = m, a = (n = h).defaultSampleDuration || 0, s = n.defaultSampleSize || 0, o = n.trackId, u = [], i.forEach(function (e) {
        var t = hu.parseTrun(e).samples;t.forEach(function (e) {
          void 0 === e.duration && (e.duration = a), void 0 === e.size && (e.size = s), e.trackId = o, e.dts = r, void 0 === e.compositionTimeOffset && (e.compositionTimeOffset = 0), e.pts = r + e.compositionTimeOffset, r += e.duration;
        }), u = u.concat(t);
      }), t = function (e, t, i) {
        var n,
            r,
            a,
            s,
            o = new DataView(e.buffer, e.byteOffset, e.byteLength),
            u = [];for (r = 0; r + 4 < e.length; r += a) {
          if (a = o.getUint32(r), r += 4, !(a <= 0)) switch (31 & e[r]) {case 6:
              var l = e.subarray(r + 1, r + 1 + a),
                  c = mu(r, t);n = { nalUnitType: "sei_rbsp", size: a, data: l, escapedRBSP: pu(l), trackId: i }, c ? (n.pts = c.pts, n.dts = c.dts, s = c) : (n.pts = s.pts, n.dts = s.dts), u.push(n);}
        }return u;
      }(l, u, p), v[p] || (v[p] = []), v[p] = v[p].concat(t));
    }), v;
  },
      yu = { generator: Os, probe: Ls, Transmuxer: ou.Transmuxer, AudioSegmentStream: ou.AudioSegmentStream, VideoSegmentStream: ou.VideoSegmentStream, CaptionParser: function CaptionParser() {
      var t,
          u,
          l,
          c,
          d,
          e = !1;this.isInitialized = function () {
        return e;
      }, this.init = function () {
        t = new fu(), e = !0, t.on("data", function (e) {
          e.startTime = e.startPts / c, e.endTime = e.endPts / c, d.captions.push(e), d.captionStreams[e.stream] = !0;
        });
      }, this.isNewInit = function (e, t) {
        return !(e && 0 === e.length || t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && 0 === Object.keys(t).length || l === e[0] && c === t[l]);
      }, this.parse = function (e, t, i) {
        var n, r, a, s;if (!this.isInitialized()) return null;if (!t || !i) return null;if (this.isNewInit(t, i)) l = t[0], c = i[l];else if (!l || !c) return u.push(e), null;for (; 0 < u.length;) {
          var o = u.shift();this.parse(o, t, i);
        }return r = e, s = c, null !== (n = (a = l) ? { seiNals: gu(r, a)[a], timescale: s } : null) && n.seiNals ? (this.pushNals(n.seiNals), this.flushStream(), d) : null;
      }, this.pushNals = function (e) {
        if (!this.isInitialized() || !e || 0 === e.length) return null;e.forEach(function (e) {
          t.push(e);
        });
      }, this.flushStream = function () {
        if (!this.isInitialized()) return null;t.flush();
      }, this.clearParsedCaptions = function () {
        d.captions = [], d.captionStreams = {};
      }, this.resetCaptionStream = function () {
        if (!this.isInitialized()) return null;t.reset();
      }, this.clearAllCaptions = function () {
        this.clearParsedCaptions(), this.resetCaptionStream();
      }, this.reset = function () {
        u = [], c = l = null, d ? this.clearParsedCaptions() : d = { captions: [], captionStreams: {} }, this.resetCaptionStream();
      }, this.reset();
    } }.CaptionParser,
      vu = function vu(e) {
    var t = 31 & e[1];return t <<= 8, t |= e[2];
  },
      _u = function _u(e) {
    return !!(64 & e[1]);
  },
      bu = function bu(e) {
    var t = 0;return 1 < (48 & e[3]) >>> 4 && (t += e[4] + 1), t;
  },
      Tu = function Tu(e) {
    switch (e) {case 5:
        return "slice_layer_without_partitioning_rbsp_idr";case 6:
        return "sei_rbsp";case 7:
        return "seq_parameter_set_rbsp";case 8:
        return "pic_parameter_set_rbsp";case 9:
        return "access_unit_delimiter_rbsp";default:
        return null;}
  },
      Su = { parseType: function parseType(e, t) {
      var i = vu(e);return 0 === i ? "pat" : i === t ? "pmt" : t ? "pes" : null;
    }, parsePat: function parsePat(e) {
      var t = _u(e),
          i = 4 + bu(e);return t && (i += e[i] + 1), (31 & e[i + 10]) << 8 | e[i + 11];
    }, parsePmt: function parsePmt(e) {
      var t = {},
          i = _u(e),
          n = 4 + bu(e);if (i && (n += e[n] + 1), 1 & e[n + 5]) {
        var r;r = 3 + ((15 & e[n + 1]) << 8 | e[n + 2]) - 4;for (var a = 12 + ((15 & e[n + 10]) << 8 | e[n + 11]); a < r;) {
          var s = n + a;t[(31 & e[s + 1]) << 8 | e[s + 2]] = e[s], a += 5 + ((15 & e[s + 3]) << 8 | e[s + 4]);
        }return t;
      }
    }, parsePayloadUnitStartIndicator: _u, parsePesType: function parsePesType(e, t) {
      switch (t[vu(e)]) {case vo.H264_STREAM_TYPE:
          return "video";case vo.ADTS_STREAM_TYPE:
          return "audio";case vo.METADATA_STREAM_TYPE:
          return "timed-metadata";default:
          return null;}
    }, parsePesTime: function parsePesTime(e) {
      if (!_u(e)) return null;var t = 4 + bu(e);if (t >= e.byteLength) return null;var i,
          n = null;return 192 & (i = e[t + 7]) && ((n = {}).pts = (14 & e[t + 9]) << 27 | (255 & e[t + 10]) << 20 | (254 & e[t + 11]) << 12 | (255 & e[t + 12]) << 5 | (254 & e[t + 13]) >>> 3, n.pts *= 4, n.pts += (6 & e[t + 13]) >>> 1, n.dts = n.pts, 64 & i && (n.dts = (14 & e[t + 14]) << 27 | (255 & e[t + 15]) << 20 | (254 & e[t + 16]) << 12 | (255 & e[t + 17]) << 5 | (254 & e[t + 18]) >>> 3, n.dts *= 4, n.dts += (6 & e[t + 18]) >>> 1)), n;
    }, videoPacketContainsKeyFrame: function videoPacketContainsKeyFrame(e) {
      for (var t = 4 + bu(e), i = e.subarray(t), n = 0, r = 0, a = !1; r < i.byteLength - 3; r++) {
        if (1 === i[r + 2]) {
          n = r + 5;break;
        }
      }for (; n < i.byteLength;) {
        switch (i[n]) {case 0:
            if (0 !== i[n - 1]) {
              n += 2;break;
            }if (0 !== i[n - 2]) {
              n++;break;
            }for (r + 3 !== n - 2 && "slice_layer_without_partitioning_rbsp_idr" === Tu(31 & i[r + 3]) && (a = !0); 1 !== i[++n] && n < i.length;) {}r = n - 2, n += 3;break;case 1:
            if (0 !== i[n - 1] || 0 !== i[n - 2]) {
              n += 3;break;
            }"slice_layer_without_partitioning_rbsp_idr" === Tu(31 & i[r + 3]) && (a = !0), r = n - 2, n += 3;break;default:
            n += 3;}
      }return i = i.subarray(r), n -= r, r = 0, i && 3 < i.byteLength && "slice_layer_without_partitioning_rbsp_idr" === Tu(31 & i[r + 3]) && (a = !0), a;
    } },
      ku = ko,
      Cu = {};Cu.ts = Su, Cu.aac = Xo;var wu = 188,
      Eu = function Eu(e, t, i) {
    for (var n, r, a, s, o = 0, u = wu, l = !1; u <= e.byteLength;) {
      if (71 !== e[o] || 71 !== e[u] && u !== e.byteLength) o++, u++;else {
        switch (n = e.subarray(o, u), Cu.ts.parseType(n, t.pid)) {case "pes":
            r = Cu.ts.parsePesType(n, t.table), a = Cu.ts.parsePayloadUnitStartIndicator(n), "audio" === r && a && (s = Cu.ts.parsePesTime(n)) && (s.type = "audio", i.audio.push(s), l = !0);}if (l) break;o += wu, u += wu;
      }
    }for (o = (u = e.byteLength) - wu, l = !1; 0 <= o;) {
      if (71 !== e[o] || 71 !== e[u] && u !== e.byteLength) o--, u--;else {
        switch (n = e.subarray(o, u), Cu.ts.parseType(n, t.pid)) {case "pes":
            r = Cu.ts.parsePesType(n, t.table), a = Cu.ts.parsePayloadUnitStartIndicator(n), "audio" === r && a && (s = Cu.ts.parsePesTime(n)) && (s.type = "audio", i.audio.push(s), l = !0);}if (l) break;o -= wu, u -= wu;
      }
    }
  },
      Au = function Au(e, t, i) {
    for (var n, r, a, s, o, u, l, c = 0, d = wu, h = !1, p = { data: [], size: 0 }; d < e.byteLength;) {
      if (71 !== e[c] || 71 !== e[d]) c++, d++;else {
        switch (n = e.subarray(c, d), Cu.ts.parseType(n, t.pid)) {case "pes":
            if (r = Cu.ts.parsePesType(n, t.table), a = Cu.ts.parsePayloadUnitStartIndicator(n), "video" === r && (a && !h && (s = Cu.ts.parsePesTime(n)) && (s.type = "video", i.video.push(s), h = !0), !i.firstKeyFrame)) {
              if (a && 0 !== p.size) {
                for (o = new Uint8Array(p.size), u = 0; p.data.length;) {
                  l = p.data.shift(), o.set(l, u), u += l.byteLength;
                }Cu.ts.videoPacketContainsKeyFrame(o) && (i.firstKeyFrame = Cu.ts.parsePesTime(o), i.firstKeyFrame.type = "video"), p.size = 0;
              }p.data.push(n), p.size += n.byteLength;
            }}if (h && i.firstKeyFrame) break;c += wu, d += wu;
      }
    }for (c = (d = e.byteLength) - wu, h = !1; 0 <= c;) {
      if (71 !== e[c] || 71 !== e[d]) c--, d--;else {
        switch (n = e.subarray(c, d), Cu.ts.parseType(n, t.pid)) {case "pes":
            r = Cu.ts.parsePesType(n, t.table), a = Cu.ts.parsePayloadUnitStartIndicator(n), "video" === r && a && (s = Cu.ts.parsePesTime(n)) && (s.type = "video", i.video.push(s), h = !0);}if (h) break;c -= wu, d -= wu;
      }
    }
  },
      Lu = function Lu(e) {
    var t = { pid: null, table: null },
        i = {};for (var n in function (e, t) {
      for (var i, n = 0, r = wu; r < e.byteLength;) {
        if (71 !== e[n] || 71 !== e[r]) n++, r++;else {
          switch (i = e.subarray(n, r), Cu.ts.parseType(i, t.pid)) {case "pat":
              t.pid || (t.pid = Cu.ts.parsePat(i));break;case "pmt":
              t.table || (t.table = Cu.ts.parsePmt(i));}if (t.pid && t.table) return;n += wu, r += wu;
        }
      }
    }(e, t), t.table) {
      if (t.table.hasOwnProperty(n)) switch (t.table[n]) {case vo.H264_STREAM_TYPE:
          i.video = [], Au(e, t, i), 0 === i.video.length && delete i.video;break;case vo.ADTS_STREAM_TYPE:
          i.audio = [], Eu(e, t, i), 0 === i.audio.length && delete i.audio;}
    }return i;
  },
      Pu = function Pu(e, t) {
    var i;return (i = Cu.aac.isLikelyAacData(e) ? function (e) {
      for (var t, i = !1, n = 0, r = null, a = null, s = 0, o = 0; 3 <= e.length - o;) {
        switch (Cu.aac.parseType(e, o)) {case "timed-metadata":
            if (e.length - o < 10) {
              i = !0;break;
            }if ((s = Cu.aac.parseId3TagSize(e, o)) > e.length) {
              i = !0;break;
            }null === a && (t = e.subarray(o, o + s), a = Cu.aac.parseAacTimestamp(t)), o += s;break;case "audio":
            if (e.length - o < 7) {
              i = !0;break;
            }if ((s = Cu.aac.parseAdtsSize(e, o)) > e.length) {
              i = !0;break;
            }null === r && (t = e.subarray(o, o + s), r = Cu.aac.parseSampleRate(t)), n++, o += s;break;default:
            o++;}if (i) return null;
      }if (null === r || null === a) return null;var u = 9e4 / r;return { audio: [{ type: "audio", dts: a, pts: a }, { type: "audio", dts: a + 1024 * n * u, pts: a + 1024 * n * u }] };
    }(e) : Lu(e)) && (i.audio || i.video) ? (function (e, t) {
      if (e.audio && e.audio.length) {
        var i = t;"undefined" == typeof i && (i = e.audio[0].dts), e.audio.forEach(function (e) {
          e.dts = ku(e.dts, i), e.pts = ku(e.pts, i), e.dtsTime = e.dts / 9e4, e.ptsTime = e.pts / 9e4;
        });
      }if (e.video && e.video.length) {
        var n = t;if ("undefined" == typeof n && (n = e.video[0].dts), e.video.forEach(function (e) {
          e.dts = ku(e.dts, n), e.pts = ku(e.pts, n), e.dtsTime = e.dts / 9e4, e.ptsTime = e.pts / 9e4;
        }), e.firstKeyFrame) {
          var r = e.firstKeyFrame;r.dts = ku(r.dts, n), r.pts = ku(r.pts, n), r.dtsTime = r.dts / 9e4, r.ptsTime = r.dts / 9e4;
        }
      }
    }(i, t), i) : null;
  };var Ou = function Ou(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  },
      Iu = function () {
    function n(e, t) {
      for (var i = 0; i < t.length; i++) {
        var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
      }
    }return function (e, t, i) {
      return t && n(e.prototype, t), i && n(e, i), e;
    };
  }(),
      Uu = null,
      Du = function () {
    function c(e) {
      Ou(this, c), Uu || (Uu = function () {
        var e = [[[], [], [], [], []], [[], [], [], [], []]],
            t = e[0],
            i = e[1],
            n = t[4],
            r = i[4],
            a = void 0,
            s = void 0,
            o = void 0,
            u = [],
            l = [],
            c = void 0,
            d = void 0,
            h = void 0,
            p = void 0,
            f = void 0;for (a = 0; a < 256; a++) {
          l[(u[a] = a << 1 ^ 283 * (a >> 7)) ^ a] = a;
        }for (s = o = 0; !n[s]; s ^= c || 1, o = l[o] || 1) {
          for (h = (h = o ^ o << 1 ^ o << 2 ^ o << 3 ^ o << 4) >> 8 ^ 255 & h ^ 99, f = 16843009 * u[d = u[c = u[r[n[s] = h] = s]]] ^ 65537 * d ^ 257 * c ^ 16843008 * s, p = 257 * u[h] ^ 16843008 * h, a = 0; a < 4; a++) {
            t[a][s] = p = p << 24 ^ p >>> 8, i[a][h] = f = f << 24 ^ f >>> 8;
          }
        }for (a = 0; a < 5; a++) {
          t[a] = t[a].slice(0), i[a] = i[a].slice(0);
        }return e;
      }()), this._tables = [[Uu[0][0].slice(), Uu[0][1].slice(), Uu[0][2].slice(), Uu[0][3].slice(), Uu[0][4].slice()], [Uu[1][0].slice(), Uu[1][1].slice(), Uu[1][2].slice(), Uu[1][3].slice(), Uu[1][4].slice()]];var t = void 0,
          i = void 0,
          n = void 0,
          r = void 0,
          a = void 0,
          s = this._tables[0][4],
          o = this._tables[1],
          u = e.length,
          l = 1;if (4 !== u && 6 !== u && 8 !== u) throw new Error("Invalid aes key size");for (r = e.slice(0), a = [], this._key = [r, a], t = u; t < 4 * u + 28; t++) {
        n = r[t - 1], (t % u == 0 || 8 === u && t % u == 4) && (n = s[n >>> 24] << 24 ^ s[n >> 16 & 255] << 16 ^ s[n >> 8 & 255] << 8 ^ s[255 & n], t % u == 0 && (n = n << 8 ^ n >>> 24 ^ l << 24, l = l << 1 ^ 283 * (l >> 7))), r[t] = r[t - u] ^ n;
      }for (i = 0; t; i++, t--) {
        n = r[3 & i ? t : t - 4], a[i] = t <= 4 || i < 4 ? n : o[0][s[n >>> 24]] ^ o[1][s[n >> 16 & 255]] ^ o[2][s[n >> 8 & 255]] ^ o[3][s[255 & n]];
      }
    }return c.prototype.decrypt = function (e, t, i, n, r, a) {
      var s = this._key[1],
          o = e ^ s[0],
          u = n ^ s[1],
          l = i ^ s[2],
          c = t ^ s[3],
          d = void 0,
          h = void 0,
          p = void 0,
          f = s.length / 4 - 2,
          m = void 0,
          g = 4,
          y = this._tables[1],
          v = y[0],
          _ = y[1],
          b = y[2],
          T = y[3],
          S = y[4];for (m = 0; m < f; m++) {
        d = v[o >>> 24] ^ _[u >> 16 & 255] ^ b[l >> 8 & 255] ^ T[255 & c] ^ s[g], h = v[u >>> 24] ^ _[l >> 16 & 255] ^ b[c >> 8 & 255] ^ T[255 & o] ^ s[g + 1], p = v[l >>> 24] ^ _[c >> 16 & 255] ^ b[o >> 8 & 255] ^ T[255 & u] ^ s[g + 2], c = v[c >>> 24] ^ _[o >> 16 & 255] ^ b[u >> 8 & 255] ^ T[255 & l] ^ s[g + 3], g += 4, o = d, u = h, l = p;
      }for (m = 0; m < 4; m++) {
        r[(3 & -m) + a] = S[o >>> 24] << 24 ^ S[u >> 16 & 255] << 16 ^ S[l >> 8 & 255] << 8 ^ S[255 & c] ^ s[g++], d = o, o = u, u = l, l = c, c = d;
      }
    }, c;
  }(),
      xu = function () {
    function e() {
      Ou(this, e), this.listeners = {};
    }return e.prototype.on = function (e, t) {
      this.listeners[e] || (this.listeners[e] = []), this.listeners[e].push(t);
    }, e.prototype.off = function (e, t) {
      if (!this.listeners[e]) return !1;var i = this.listeners[e].indexOf(t);return this.listeners[e].splice(i, 1), -1 < i;
    }, e.prototype.trigger = function (e) {
      var t = this.listeners[e];if (t) if (2 === arguments.length) for (var i = t.length, n = 0; n < i; ++n) {
        t[n].call(this, arguments[1]);
      } else for (var r = Array.prototype.slice.call(arguments, 1), a = t.length, s = 0; s < a; ++s) {
        t[s].apply(this, r);
      }
    }, e.prototype.dispose = function () {
      this.listeners = {};
    }, e.prototype.pipe = function (t) {
      this.on("data", function (e) {
        t.push(e);
      });
    }, e;
  }(),
      Ru = function (t) {
    function i() {
      Ou(this, i);var e = function (e, t) {
        if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
      }(this, t.call(this, xu));return e.jobs = [], e.delay = 1, e.timeout_ = null, e;
    }return function (e, t) {
      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
    }(i, t), i.prototype.processJob_ = function () {
      this.jobs.shift()(), this.jobs.length ? this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay) : this.timeout_ = null;
    }, i.prototype.push = function (e) {
      this.jobs.push(e), this.timeout_ || (this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay));
    }, i;
  }(xu),
      Mu = function Mu(e) {
    return e << 24 | (65280 & e) << 8 | (16711680 & e) >> 8 | e >>> 24;
  },
      Bu = function Bu(e, t, i) {
    var n = new Int32Array(e.buffer, e.byteOffset, e.byteLength >> 2),
        r = new Du(Array.prototype.slice.call(t)),
        a = new Uint8Array(e.byteLength),
        s = new Int32Array(a.buffer),
        o = void 0,
        u = void 0,
        l = void 0,
        c = void 0,
        d = void 0,
        h = void 0,
        p = void 0,
        f = void 0,
        m = void 0;for (o = i[0], u = i[1], l = i[2], c = i[3], m = 0; m < n.length; m += 4) {
      d = Mu(n[m]), h = Mu(n[m + 1]), p = Mu(n[m + 2]), f = Mu(n[m + 3]), r.decrypt(d, h, p, f, s, m), s[m] = Mu(s[m] ^ o), s[m + 1] = Mu(s[m + 1] ^ u), s[m + 2] = Mu(s[m + 2] ^ l), s[m + 3] = Mu(s[m + 3] ^ c), o = d, u = h, l = p, c = f;
    }return a;
  },
      Nu = function () {
    function u(e, t, i, n) {
      Ou(this, u);var r = u.STEP,
          a = new Int32Array(e.buffer),
          s = new Uint8Array(e.byteLength),
          o = 0;for (this.asyncStream_ = new Ru(), this.asyncStream_.push(this.decryptChunk_(a.subarray(o, o + r), t, i, s)), o = r; o < a.length; o += r) {
        i = new Uint32Array([Mu(a[o - 4]), Mu(a[o - 3]), Mu(a[o - 2]), Mu(a[o - 1])]), this.asyncStream_.push(this.decryptChunk_(a.subarray(o, o + r), t, i, s));
      }this.asyncStream_.push(function () {
        var e;n(null, (e = s).subarray(0, e.byteLength - e[e.byteLength - 1]));
      });
    }return u.prototype.decryptChunk_ = function (t, i, n, r) {
      return function () {
        var e = Bu(t, i, n);r.set(e, t.byteOffset);
      };
    }, Iu(u, null, [{ key: "STEP", get: function get() {
        return 32e3;
      } }]), u;
  }(),
      ju = function ju(e, t) {
    return (/^[a-z]+:/i.test(t) ? t : (/\/\//i.test(e) || (e = Vr.buildAbsoluteURL(v.location.href, e)), Vr.buildAbsoluteURL(e, t))
    );
  },
      Fu = function Fu(e, t, i) {
    return e && i.responseURL && t !== i.responseURL ? i.responseURL : t;
  },
      Hu = function Hu(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  },
      Vu = function () {
    function n(e, t) {
      for (var i = 0; i < t.length; i++) {
        var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
      }
    }return function (e, t, i) {
      return t && n(e.prototype, t), i && n(e, i), e;
    };
  }(),
      qu = function qu(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  },
      zu = function zu(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
  },
      Wu = function Wu(e, t) {
    if (Array.isArray(e)) return e;if (Symbol.iterator in Object(e)) return function (e, t) {
      var i = [],
          n = !0,
          r = !1,
          a = void 0;try {
        for (var s, o = e[Symbol.iterator](); !(n = (s = o.next()).done) && (i.push(s.value), !t || i.length !== t); n = !0) {}
      } catch (e) {
        r = !0, a = e;
      } finally {
        try {
          !n && o.return && o.return();
        } finally {
          if (r) throw a;
        }
      }return i;
    }(e, t);throw new TypeError("Invalid attempt to destructure non-iterable instance");
  },
      Gu = jr.mergeOptions,
      Xu = jr.EventTarget,
      Ku = jr.log,
      Yu = function Yu(r, a) {
    ["AUDIO", "SUBTITLES"].forEach(function (e) {
      for (var t in r.mediaGroups[e]) {
        for (var i in r.mediaGroups[e][t]) {
          var n = r.mediaGroups[e][t][i];a(n, e, t, i);
        }
      }
    });
  },
      $u = function $u(e, t) {
    var i = Gu(e, {}),
        n = i.playlists[t.uri];if (!n) return null;if (n.segments && t.segments && n.segments.length === t.segments.length && n.endList === t.endList && n.mediaSequence === t.mediaSequence) return null;var r = Gu(n, t);n.segments && (r.segments = function (e, t, i) {
      var n = t.slice();i = i || 0;for (var r = Math.min(e.length, t.length + i), a = i; a < r; a++) {
        n[a - i] = Gu(e[a], n[a - i]);
      }return n;
    }(n.segments, t.segments, t.mediaSequence - n.mediaSequence)), r.segments.forEach(function (e) {
      var t, i;t = e, i = r.resolvedUri, t.resolvedUri || (t.resolvedUri = ju(i, t.uri)), t.key && !t.key.resolvedUri && (t.key.resolvedUri = ju(i, t.key.uri)), t.map && !t.map.resolvedUri && (t.map.resolvedUri = ju(i, t.map.uri));
    });for (var a = 0; a < i.playlists.length; a++) {
      i.playlists[a].uri === t.uri && (i.playlists[a] = r);
    }return i.playlists[t.uri] = r, i;
  },
      Qu = function Qu(e) {
    for (var t = e.playlists.length; t--;) {
      var i = e.playlists[t];(e.playlists[i.uri] = i).resolvedUri = ju(e.uri, i.uri), i.id = t, i.attributes || (i.attributes = {}, Ku.warn("Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute."));
    }
  },
      Ju = function Ju(t) {
    Yu(t, function (e) {
      e.uri && (e.resolvedUri = ju(t.uri, e.uri));
    });
  },
      Zu = function Zu(e, t) {
    var i = e.segments[e.segments.length - 1];return t && i && i.duration ? 1e3 * i.duration : 500 * (e.targetDuration || 10);
  },
      el = function (e) {
    function l(e, t) {
      var i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};Hu(this, l);var n = zu(this, (l.__proto__ || Object.getPrototypeOf(l)).call(this)),
          r = i.withCredentials,
          a = void 0 !== r && r,
          s = i.handleManifestRedirects,
          o = void 0 !== s && s;n.srcUrl = e, n.hls_ = t, n.withCredentials = a, n.handleManifestRedirects = o;var u = t.options_;if (n.customTagParsers = u && u.customTagParsers || [], n.customTagMappers = u && u.customTagMappers || [], !n.srcUrl) throw new Error("A non-empty playlist URL is required");return n.state = "HAVE_NOTHING", n.on("mediaupdatetimeout", function () {
        "HAVE_METADATA" === n.state && (n.state = "HAVE_CURRENT_METADATA", n.request = n.hls_.xhr({ uri: ju(n.master.uri, n.media().uri), withCredentials: n.withCredentials }, function (e, t) {
          if (n.request) return e ? n.playlistRequestError(n.request, n.media().uri, "HAVE_METADATA") : void n.haveMetadata(n.request, n.media().uri);
        }));
      }), n;
    }return qu(l, Xu), Vu(l, [{ key: "playlistRequestError", value: function value(e, t, i) {
        this.request = null, i && (this.state = i), this.error = { playlist: this.master.playlists[t], status: e.status, message: "HLS playlist request error at URL: " + t, responseText: e.responseText, code: 500 <= e.status ? 4 : 2 }, this.trigger("error");
      } }, { key: "haveMetadata", value: function value(e, t) {
        var i = this;this.request = null, this.state = "HAVE_METADATA";var n = new $r();this.customTagParsers.forEach(function (e) {
          return n.addParser(e);
        }), this.customTagMappers.forEach(function (e) {
          return n.addTagMapper(e);
        }), n.push(e.responseText), n.end(), n.manifest.uri = t, n.manifest.attributes = n.manifest.attributes || {};var r = $u(this.master, n.manifest);this.targetDuration = n.manifest.targetDuration, r ? (this.master = r, this.media_ = this.master.playlists[n.manifest.uri]) : this.trigger("playlistunchanged"), this.media().endList || (v.clearTimeout(this.mediaUpdateTimeout), this.mediaUpdateTimeout = v.setTimeout(function () {
          i.trigger("mediaupdatetimeout");
        }, Zu(this.media(), !!r))), this.trigger("loadedplaylist");
      } }, { key: "dispose", value: function value() {
        this.stopRequest(), v.clearTimeout(this.mediaUpdateTimeout);
      } }, { key: "stopRequest", value: function value() {
        if (this.request) {
          var e = this.request;this.request = null, e.onreadystatechange = null, e.abort();
        }
      } }, { key: "media", value: function value(i) {
        var n = this;if (!i) return this.media_;if ("HAVE_NOTHING" === this.state) throw new Error("Cannot switch media playlist from " + this.state);var r = this.state;if ("string" == typeof i) {
          if (!this.master.playlists[i]) throw new Error("Unknown playlist URI: " + i);i = this.master.playlists[i];
        }var e = !this.media_ || i.uri !== this.media_.uri;if (this.master.playlists[i.uri].endList) return this.request && (this.request.onreadystatechange = null, this.request.abort(), this.request = null), this.state = "HAVE_METADATA", this.media_ = i, void (e && (this.trigger("mediachanging"), this.trigger("mediachange")));if (e) {
          if (this.state = "SWITCHING_MEDIA", this.request) {
            if (i.resolvedUri === this.request.url) return;this.request.onreadystatechange = null, this.request.abort(), this.request = null;
          }this.media_ && this.trigger("mediachanging"), this.request = this.hls_.xhr({ uri: i.resolvedUri, withCredentials: this.withCredentials }, function (e, t) {
            if (n.request) {
              if (i.resolvedUri = Fu(n.handleManifestRedirects, i.resolvedUri, t), e) return n.playlistRequestError(n.request, i.uri, r);n.haveMetadata(t, i.uri), "HAVE_MASTER" === r ? n.trigger("loadedmetadata") : n.trigger("mediachange");
            }
          });
        }
      } }, { key: "pause", value: function value() {
        this.stopRequest(), v.clearTimeout(this.mediaUpdateTimeout), "HAVE_NOTHING" === this.state && (this.started = !1), "SWITCHING_MEDIA" === this.state ? this.media_ ? this.state = "HAVE_METADATA" : this.state = "HAVE_MASTER" : "HAVE_CURRENT_METADATA" === this.state && (this.state = "HAVE_METADATA");
      } }, { key: "load", value: function value(e) {
        var t = this;v.clearTimeout(this.mediaUpdateTimeout);var i = this.media();if (e) {
          var n = i ? i.targetDuration / 2 * 1e3 : 5e3;this.mediaUpdateTimeout = v.setTimeout(function () {
            return t.load();
          }, n);
        } else this.started ? i && !i.endList ? this.trigger("mediaupdatetimeout") : this.trigger("loadedplaylist") : this.start();
      } }, { key: "start", value: function value() {
        var n = this;this.started = !0, this.request = this.hls_.xhr({ uri: this.srcUrl, withCredentials: this.withCredentials }, function (e, t) {
          if (n.request) {
            if (n.request = null, e) return n.error = { status: t.status, message: "HLS playlist request error at URL: " + n.srcUrl, responseText: t.responseText, code: 2 }, "HAVE_NOTHING" === n.state && (n.started = !1), n.trigger("error");var i = new $r();return n.customTagParsers.forEach(function (e) {
              return i.addParser(e);
            }), n.customTagMappers.forEach(function (e) {
              return i.addTagMapper(e);
            }), i.push(t.responseText), i.end(), n.state = "HAVE_MASTER", n.srcUrl = Fu(n.handleManifestRedirects, n.srcUrl, t), i.manifest.uri = n.srcUrl, i.manifest.playlists ? (n.master = i.manifest, Qu(n.master), Ju(n.master), n.trigger("loadedplaylist"), void (n.request || n.media(i.manifest.playlists[0]))) : (n.master = { mediaGroups: { AUDIO: {}, VIDEO: {}, "CLOSED-CAPTIONS": {}, SUBTITLES: {} }, uri: v.location.href, playlists: [{ uri: n.srcUrl, id: 0, resolvedUri: n.srcUrl, attributes: {} }] }, n.master.playlists[n.srcUrl] = n.master.playlists[0], n.haveMetadata(t, n.srcUrl), n.trigger("loadedmetadata"));
          }
        });
      } }]), l;
  }(),
      tl = jr.createTimeRange,
      il = function il(e, t, i) {
    var n, r;return "undefined" == typeof t && (t = e.mediaSequence + e.segments.length), t < e.mediaSequence ? 0 : (n = function (e, t) {
      var i = 0,
          n = t - e.mediaSequence,
          r = e.segments[n];if (r) {
        if ("undefined" != typeof r.start) return { result: r.start, precise: !0 };if ("undefined" != typeof r.end) return { result: r.end - r.duration, precise: !0 };
      }for (; n--;) {
        if ("undefined" != typeof (r = e.segments[n]).end) return { result: i + r.end, precise: !0 };if (i += r.duration, "undefined" != typeof r.start) return { result: i + r.start, precise: !0 };
      }return { result: i, precise: !1 };
    }(e, t)).precise ? n.result : (r = function (e, t) {
      for (var i = 0, n = void 0, r = t - e.mediaSequence; r < e.segments.length; r++) {
        if ("undefined" != typeof (n = e.segments[r]).start) return { result: n.start - i, precise: !0 };if (i += n.duration, "undefined" != typeof n.end) return { result: n.end - i, precise: !0 };
      }return { result: -1, precise: !1 };
    }(e, t)).precise ? r.result : n.result + i;
  },
      nl = function nl(e, t, i) {
    if (!e) return 0;if ("number" != typeof i && (i = 0), "undefined" == typeof t) {
      if (e.totalDuration) return e.totalDuration;if (!e.endList) return v.Infinity;
    }return il(e, t, i);
  },
      rl = function rl(e, t, i) {
    var n = 0;if (i < t) {
      var r = [i, t];t = r[0], i = r[1];
    }if (t < 0) {
      for (var a = t; a < Math.min(0, i); a++) {
        n += e.targetDuration;
      }t = 0;
    }for (var s = t; s < i; s++) {
      n += e.segments[s].duration;
    }return n;
  },
      al = function al(e) {
    if (!e.segments.length) return 0;for (var t = e.segments.length - 1, i = e.segments[t].duration || e.targetDuration, n = i + 2 * e.targetDuration; t-- && !(n <= (i += e.segments[t].duration));) {}return Math.max(0, t);
  },
      sl = function sl(e, t, i) {
    if (!e || !e.segments) return null;if (e.endList) return nl(e);if (null === t) return null;t = t || 0;var n = i ? al(e) : e.segments.length;return il(e, e.mediaSequence + n, t);
  },
      ol = function ol(e) {
    return e - Math.floor(e) == 0;
  },
      ul = function ul(e, t) {
    if (ol(t)) return t + .1 * e;for (var i = t.toString().split(".")[1].length, n = 1; n <= i; n++) {
      var r = Math.pow(10, n),
          a = t * r;if (ol(a) || n === i) return (a + e) / r;
    }
  },
      ll = ul.bind(null, 1),
      cl = ul.bind(null, -1),
      dl = function dl(e) {
    return e.excludeUntil && e.excludeUntil > Date.now();
  },
      hl = function hl(e) {
    return e.excludeUntil && e.excludeUntil === 1 / 0;
  },
      pl = function pl(e) {
    var t = dl(e);return !e.disabled && !t;
  },
      fl = function fl(e, t) {
    return t.attributes && t.attributes[e];
  },
      ml = function ml(e, t) {
    if (1 === e.playlists.length) return !0;var i = t.attributes.BANDWIDTH || Number.MAX_VALUE;return 0 === e.playlists.filter(function (e) {
      return !!pl(e) && (e.attributes.BANDWIDTH || 0) < i;
    }).length;
  },
      gl = { duration: nl, seekable: function seekable(e, t) {
      var i = t || 0,
          n = sl(e, t, !0);return null === n ? tl() : tl(i, n);
    }, safeLiveIndex: al, getMediaInfoForTime: function getMediaInfoForTime(e, t, i, n) {
      var r = void 0,
          a = void 0,
          s = e.segments.length,
          o = t - n;if (o < 0) {
        if (0 < i) for (r = i - 1; 0 <= r; r--) {
          if (a = e.segments[r], 0 < (o += cl(a.duration))) return { mediaIndex: r, startTime: n - rl(e, i, r) };
        }return { mediaIndex: 0, startTime: t };
      }if (i < 0) {
        for (r = i; r < 0; r++) {
          if ((o -= e.targetDuration) < 0) return { mediaIndex: 0, startTime: t };
        }i = 0;
      }for (r = i; r < s; r++) {
        if (a = e.segments[r], (o -= ll(a.duration)) < 0) return { mediaIndex: r, startTime: n + rl(e, i, r) };
      }return { mediaIndex: s - 1, startTime: t };
    }, isEnabled: pl, isDisabled: function isDisabled(e) {
      return e.disabled;
    }, isBlacklisted: dl, isIncompatible: hl, playlistEnd: sl, isAes: function isAes(e) {
      for (var t = 0; t < e.segments.length; t++) {
        if (e.segments[t].key) return !0;
      }return !1;
    }, isFmp4: function isFmp4(e) {
      for (var t = 0; t < e.segments.length; t++) {
        if (e.segments[t].map) return !0;
      }return !1;
    }, hasAttribute: fl, estimateSegmentRequestTime: function estimateSegmentRequestTime(e, t, i) {
      var n = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : 0;return fl("BANDWIDTH", i) ? (e * i.attributes.BANDWIDTH - 8 * n) / t : NaN;
    }, isLowestEnabledRendition: ml },
      yl = jr.xhr,
      vl = jr.mergeOptions,
      _l = function _l() {
    return function e(t, n) {
      t = vl({ timeout: 45e3 }, t);var i = e.beforeRequest || jr.Hls.xhr.beforeRequest;if (i && "function" == typeof i) {
        var r = i(t);r && (t = r);
      }var a = yl(t, function (e, t) {
        var i = a.response;!e && i && (a.responseTime = Date.now(), a.roundTripTime = a.responseTime - a.requestTime, a.bytesReceived = i.byteLength || i.length, a.bandwidth || (a.bandwidth = Math.floor(a.bytesReceived / a.roundTripTime * 8 * 1e3))), t.headers && (a.responseHeaders = t.headers), e && "ETIMEDOUT" === e.code && (a.timedout = !0), e || a.aborted || 200 === t.statusCode || 206 === t.statusCode || 0 === t.statusCode || (e = new Error("XHR Failed with a response of: " + (a && (i || a.responseText)))), n(e, a);
      }),
          s = a.abort;return a.abort = function () {
        return a.aborted = !0, s.apply(a, arguments);
      }, a.uri = t.uri, a.requestTime = Date.now(), a;
    };
  },
      bl = function bl(e, t) {
    var i = e.toString(16);return "00".substring(0, 2 - i.length) + i + (t % 2 ? " " : "");
  },
      Tl = function Tl(e) {
    return 32 <= e && e < 126 ? String.fromCharCode(e) : ".";
  },
      Sl = function Sl(i) {
    var n = {};return Object.keys(i).forEach(function (e) {
      var t = i[e];ArrayBuffer.isView(t) ? n[e] = { bytes: t.buffer, byteOffset: t.byteOffset, byteLength: t.byteLength } : n[e] = t;
    }), n;
  },
      kl = function kl(e) {
    var t = e.byterange || { length: 1 / 0, offset: 0 };return [t.length, t.offset, e.resolvedUri].join(",");
  },
      Cl = function Cl(e) {
    for (var t = Array.prototype.slice.call(e), i = "", n = 0; n < t.length / 16; n++) {
      i += t.slice(16 * n, 16 * n + 16).map(bl).join("") + " " + t.slice(16 * n, 16 * n + 16).map(Tl).join("") + "\n";
    }return i;
  },
      wl = Object.freeze({ createTransferableMessage: Sl, initSegmentId: kl, hexDump: Cl, tagDump: function tagDump(e) {
      var t = e.bytes;return Cl(t);
    }, textRanges: function textRanges(e) {
      var t,
          i,
          n = "",
          r = void 0;for (r = 0; r < e.length; r++) {
        n += (i = r, (t = e).start(i) + "-" + t.end(i) + " ");
      }return n;
    } }),
      El = function El(e) {
    var t = e.playlist,
        i = e.time,
        n = void 0 === i ? void 0 : i,
        r = e.callback;if (!r) throw new Error("getProgramTime: callback must be provided");if (!t || void 0 === n) return r({ message: "getProgramTime: playlist and time must be provided" });var a = function (e, t) {
      if (!t || !t.segments || 0 === t.segments.length) return null;for (var i = 0, n = void 0, r = 0; r < t.segments.length && !(e <= (i = (n = t.segments[r]).videoTimingInfo ? n.videoTimingInfo.transmuxedPresentationEnd : i + n.duration)); r++) {}var a = t.segments[t.segments.length - 1];if (a.videoTimingInfo && a.videoTimingInfo.transmuxedPresentationEnd < e) return null;if (i < e) {
        if (e > i + .25 * a.duration) return null;n = a;
      }return { segment: n, estimatedStart: n.videoTimingInfo ? n.videoTimingInfo.transmuxedPresentationStart : i - n.duration, type: n.videoTimingInfo ? "accurate" : "estimate" };
    }(n, t);if (!a) return r({ message: "valid programTime was not found" });if ("estimate" === a.type) return r({ message: "Accurate programTime could not be determined. Please seek to e.seekTime and try again", seekTime: a.estimatedStart });var s = { mediaSeconds: n },
        o = function (e, t) {
      if (!t.dateTimeObject) return null;var i = t.videoTimingInfo.transmuxerPrependedSeconds,
          n = e - (t.videoTimingInfo.transmuxedPresentationStart + i);return new Date(t.dateTimeObject.getTime() + 1e3 * n);
    }(n, a.segment);return o && (s.programDateTime = o.toISOString()), r(null, s);
  },
      Al = function e(t) {
    var i = t.programTime,
        n = t.playlist,
        r = t.retryCount,
        a = void 0 === r ? 2 : r,
        s = t.seekTo,
        o = t.pauseAfterSeek,
        u = void 0 === o || o,
        l = t.tech,
        c = t.callback;if (!c) throw new Error("seekToProgramTime: callback must be provided");if ("undefined" == typeof i || !n || !s) return c({ message: "seekToProgramTime: programTime, seekTo and playlist must be provided" });if (!n.endList && !l.hasStarted_) return c({ message: "player must be playing a live stream to start buffering" });if (!function (e) {
      if (!e.segments || 0 === e.segments.length) return !1;for (var t = 0; t < e.segments.length; t++) {
        if (!e.segments[t].dateTimeObject) return !1;
      }return !0;
    }(n)) return c({ message: "programDateTime tags must be provided in the manifest " + n.resolvedUri });var d = function (e, t) {
      var i = void 0;try {
        i = new Date(e);
      } catch (e) {
        return null;
      }if (!t || !t.segments || 0 === t.segments.length) return null;var n = t.segments[0];if (i < n.dateTimeObject) return null;for (var r = 0; r < t.segments.length - 1 && (n = t.segments[r], !(i < t.segments[r + 1].dateTimeObject)); r++) {}var a,
          s = t.segments[t.segments.length - 1],
          o = s.dateTimeObject,
          u = s.videoTimingInfo ? (a = s.videoTimingInfo).transmuxedPresentationEnd - a.transmuxedPresentationStart - a.transmuxerPrependedSeconds : s.duration + .25 * s.duration;return new Date(o.getTime() + 1e3 * u) < i ? null : (o < i && (n = s), { segment: n, estimatedStart: n.videoTimingInfo ? n.videoTimingInfo.transmuxedPresentationStart : gl.duration(t, t.mediaSequence + t.segments.indexOf(n)), type: n.videoTimingInfo ? "accurate" : "estimate" });
    }(i, n);if (!d) return c({ message: i + " was not found in the stream" });var h = d.segment,
        p = function (e, t) {
      var i = void 0,
          n = void 0;try {
        i = new Date(e), n = new Date(t);
      } catch (e) {}var r = i.getTime();return (n.getTime() - r) / 1e3;
    }(h.dateTimeObject, i);if ("estimate" === d.type) return 0 === a ? c({ message: i + " is not buffered yet. Try again" }) : (s(d.estimatedStart + p), void l.one("seeked", function () {
      e({ programTime: i, playlist: n, retryCount: a - 1, seekTo: s, pauseAfterSeek: u, tech: l, callback: c });
    }));var f = h.start + p;l.one("seeked", function () {
      return c(null, l.currentTime());
    }), u && l.pause(), s(f);
  },
      Ll = 1 / 30,
      Pl = function Pl(e, t) {
    var i = [],
        n = void 0;if (e && e.length) for (n = 0; n < e.length; n++) {
      t(e.start(n), e.end(n)) && i.push([e.start(n), e.end(n)]);
    }return jr.createTimeRanges(i);
  },
      Ol = function Ol(e, i) {
    return Pl(e, function (e, t) {
      return e - Ll <= i && i <= t + Ll;
    });
  },
      Il = function Il(e, t) {
    return Pl(e, function (e) {
      return t <= e - Ll;
    });
  },
      Ul = function Ul(e) {
    var t = [];if (!e || !e.length) return "";for (var i = 0; i < e.length; i++) {
      t.push(e.start(i) + " => " + e.end(i));
    }return t.join(", ");
  },
      Dl = function Dl(e) {
    for (var t = [], i = 0; i < e.length; i++) {
      t.push({ start: e.start(i), end: e.end(i) });
    }return t;
  },
      xl = function xl(e, t, i) {
    var n = void 0,
        r = void 0;if (i && i.cues) for (n = i.cues.length; n--;) {
      (r = i.cues[n]).startTime <= t && r.endTime >= e && i.removeCue(r);
    }
  },
      Rl = function Rl(e) {
    return isNaN(e) || Math.abs(e) === 1 / 0 ? Number.MAX_VALUE : e;
  },
      Ml = function Ml(e, t, i) {
    var r = v.WebKitDataCue || v.VTTCue;if (t && t.forEach(function (e) {
      var t = e.stream;this.inbandTextTracks_[t].addCue(new r(e.startTime + this.timestampOffset, e.endTime + this.timestampOffset, e.text));
    }, e), i) {
      var a = Rl(e.mediaSource_.duration);if (i.forEach(function (e) {
        var n = e.cueTime + this.timestampOffset;!("number" != typeof n || v.isNaN(n) || n < 0) && n < 1 / 0 && e.frames.forEach(function (e) {
          var t,
              i = new r(n, n, e.value || e.url || e.data || "");i.frame = e, i.value = e, t = i, Object.defineProperties(t.frame, { id: { get: function get() {
                return jr.log.warn("cue.frame.id is deprecated. Use cue.value.key instead."), t.value.key;
              } }, value: { get: function get() {
                return jr.log.warn("cue.frame.value is deprecated. Use cue.value.data instead."), t.value.data;
              } }, privateData: { get: function get() {
                return jr.log.warn("cue.frame.privateData is deprecated. Use cue.value.data instead."), t.value.data;
              } } }), this.metadataTrack_.addCue(i);
        }, this);
      }, e), e.metadataTrack_ && e.metadataTrack_.cues && e.metadataTrack_.cues.length) {
        for (var n = e.metadataTrack_.cues, s = [], o = 0; o < n.length; o++) {
          n[o] && s.push(n[o]);
        }var u = s.reduce(function (e, t) {
          var i = e[t.startTime] || [];return i.push(t), e[t.startTime] = i, e;
        }, {}),
            l = Object.keys(u).sort(function (e, t) {
          return Number(e) - Number(t);
        });l.forEach(function (e, t) {
          var i = u[e],
              n = Number(l[t + 1]) || a;i.forEach(function (e) {
            e.endTime = n;
          });
        });
      }
    }
  },
      Bl = "undefined" != typeof window ? window : {},
      Nl = "undefined" == typeof Symbol ? "__target" : Symbol(),
      jl = "application/javascript",
      Fl = Bl.BlobBuilder || Bl.WebKitBlobBuilder || Bl.MozBlobBuilder || Bl.MSBlobBuilder,
      Hl = Bl.URL || Bl.webkitURL || Hl && Hl.msURL,
      Vl = Bl.Worker;function ql(r, a) {
    return function (e) {
      var t = this;if (!a) return new Vl(r);if (Vl && !e) {
        var i = Xl(a.toString().replace(/^function.+?{/, "").slice(0, -1));return this[Nl] = new Vl(i), function (e, t) {
          if (!e || !t) return;var i = e.terminate;e.objURL = t, e.terminate = function () {
            e.objURL && Hl.revokeObjectURL(e.objURL), i.call(e);
          };
        }(this[Nl], i), this[Nl];
      }var n = { postMessage: function postMessage(e) {
          t.onmessage && setTimeout(function () {
            t.onmessage({ data: e, target: n });
          });
        } };a.call(n), this.postMessage = function (e) {
        setTimeout(function () {
          n.onmessage({ data: e, target: t });
        });
      }, this.isThisThread = !0;
    };
  }if (Vl) {
    var zl,
        Wl = Xl("self.onmessage = function () {}"),
        Gl = new Uint8Array(1);try {
      (zl = new Vl(Wl)).postMessage(Gl, [Gl.buffer]);
    } catch (e) {
      Vl = null;
    } finally {
      Hl.revokeObjectURL(Wl), zl && zl.terminate();
    }
  }function Xl(t) {
    try {
      return Hl.createObjectURL(new Blob([t], { type: jl }));
    } catch (e) {
      var i = new Fl();return i.append(t), Hl.createObjectURL(i.getBlob(type));
    }
  }var Kl = new ql("./transmuxer-worker.worker.js", function (e, t) {
    var Mt = this;!function () {
      var o,
          t,
          i,
          r,
          a,
          n,
          e,
          s,
          u,
          l,
          c,
          d,
          h,
          p,
          f,
          m,
          g,
          y,
          v,
          _,
          b,
          T,
          S,
          k,
          C,
          w,
          E,
          A,
          L,
          P,
          O,
          I,
          U,
          D,
          x,
          R,
          M,
          B,
          N,
          j,
          F = Math.pow(2, 32) - 1;!function () {
        var e;if (T = { avc1: [], avcC: [], btrt: [], dinf: [], dref: [], esds: [], ftyp: [], hdlr: [], mdat: [], mdhd: [], mdia: [], mfhd: [], minf: [], moof: [], moov: [], mp4a: [], mvex: [], mvhd: [], sdtp: [], smhd: [], stbl: [], stco: [], stsc: [], stsd: [], stsz: [], stts: [], styp: [], tfdt: [], tfhd: [], traf: [], trak: [], trun: [], trex: [], tkhd: [], vmhd: [] }, "undefined" != typeof Uint8Array) {
          for (e in T) {
            T.hasOwnProperty(e) && (T[e] = [e.charCodeAt(0), e.charCodeAt(1), e.charCodeAt(2), e.charCodeAt(3)]);
          }S = new Uint8Array(["i".charCodeAt(0), "s".charCodeAt(0), "o".charCodeAt(0), "m".charCodeAt(0)]), C = new Uint8Array(["a".charCodeAt(0), "v".charCodeAt(0), "c".charCodeAt(0), "1".charCodeAt(0)]), k = new Uint8Array([0, 0, 0, 1]), w = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0]), E = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]), A = { video: w, audio: E }, O = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1]), P = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), I = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), U = I, D = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), x = I, L = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]);
        }
      }(), o = function o(e) {
        var t,
            i,
            n = [],
            r = 0;for (t = 1; t < arguments.length; t++) {
          n.push(arguments[t]);
        }for (t = n.length; t--;) {
          r += n[t].byteLength;
        }for (i = new Uint8Array(r + 8), new DataView(i.buffer, i.byteOffset, i.byteLength).setUint32(0, i.byteLength), i.set(e, 4), t = 0, r = 8; t < n.length; t++) {
          i.set(n[t], r), r += n[t].byteLength;
        }return i;
      }, t = function t() {
        return o(T.dinf, o(T.dref, O));
      }, i = function i(e) {
        return o(T.esds, new Uint8Array([0, 0, 0, 0, 3, 25, 0, 0, 0, 4, 17, 64, 21, 0, 6, 0, 0, 0, 218, 192, 0, 0, 218, 192, 5, 2, e.audioobjecttype << 3 | e.samplingfrequencyindex >>> 1, e.samplingfrequencyindex << 7 | e.channelcount << 3, 6, 1, 2]));
      }, f = function f(e) {
        return o(T.hdlr, A[e]);
      }, p = function p(e) {
        var t = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 1, 95, 144, e.duration >>> 24 & 255, e.duration >>> 16 & 255, e.duration >>> 8 & 255, 255 & e.duration, 85, 196, 0, 0]);return e.samplerate && (t[12] = e.samplerate >>> 24 & 255, t[13] = e.samplerate >>> 16 & 255, t[14] = e.samplerate >>> 8 & 255, t[15] = 255 & e.samplerate), o(T.mdhd, t);
      }, h = function h(e) {
        return o(T.mdia, p(e), f(e.type), n(e));
      }, a = function a(e) {
        return o(T.mfhd, new Uint8Array([0, 0, 0, 0, (4278190080 & e) >> 24, (16711680 & e) >> 16, (65280 & e) >> 8, 255 & e]));
      }, n = function n(e) {
        return o(T.minf, "video" === e.type ? o(T.vmhd, L) : o(T.smhd, P), t(), g(e));
      }, e = function e(_e3, t) {
        for (var i = [], n = t.length; n--;) {
          i[n] = v(t[n]);
        }return o.apply(null, [T.moof, a(_e3)].concat(i));
      }, s = function s(e) {
        for (var t = e.length, i = []; t--;) {
          i[t] = c(e[t]);
        }return o.apply(null, [T.moov, l(4294967295)].concat(i).concat(u(e)));
      }, u = function u(e) {
        for (var t = e.length, i = []; t--;) {
          i[t] = _(e[t]);
        }return o.apply(null, [T.mvex].concat(i));
      }, l = function l(e) {
        var t = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 1, 95, 144, (4278190080 & e) >> 24, (16711680 & e) >> 16, (65280 & e) >> 8, 255 & e, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]);return o(T.mvhd, t);
      }, m = function m(e) {
        var t,
            i,
            n = e.samples || [],
            r = new Uint8Array(4 + n.length);for (i = 0; i < n.length; i++) {
          t = n[i].flags, r[i + 4] = t.dependsOn << 4 | t.isDependedOn << 2 | t.hasRedundancy;
        }return o(T.sdtp, r);
      }, g = function g(e) {
        return o(T.stbl, y(e), o(T.stts, x), o(T.stsc, U), o(T.stsz, D), o(T.stco, I));
      }, y = function y(e) {
        return o(T.stsd, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]), "video" === e.type ? R(e) : M(e));
      }, R = function R(e) {
        var t,
            i = e.sps || [],
            n = e.pps || [],
            r = [],
            a = [];for (t = 0; t < i.length; t++) {
          r.push((65280 & i[t].byteLength) >>> 8), r.push(255 & i[t].byteLength), r = r.concat(Array.prototype.slice.call(i[t]));
        }for (t = 0; t < n.length; t++) {
          a.push((65280 & n[t].byteLength) >>> 8), a.push(255 & n[t].byteLength), a = a.concat(Array.prototype.slice.call(n[t]));
        }return o(T.avc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (65280 & e.width) >> 8, 255 & e.width, (65280 & e.height) >> 8, 255 & e.height, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 19, 118, 105, 100, 101, 111, 106, 115, 45, 99, 111, 110, 116, 114, 105, 98, 45, 104, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 17, 17]), o(T.avcC, new Uint8Array([1, e.profileIdc, e.profileCompatibility, e.levelIdc, 255].concat([i.length]).concat(r).concat([n.length]).concat(a))), o(T.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])));
      }, M = function M(e) {
        return o(T.mp4a, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, (65280 & e.channelcount) >> 8, 255 & e.channelcount, (65280 & e.samplesize) >> 8, 255 & e.samplesize, 0, 0, 0, 0, (65280 & e.samplerate) >> 8, 255 & e.samplerate, 0, 0]), i(e));
      }, d = function d(e) {
        var t = new Uint8Array([0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, (4278190080 & e.id) >> 24, (16711680 & e.id) >> 16, (65280 & e.id) >> 8, 255 & e.id, 0, 0, 0, 0, (4278190080 & e.duration) >> 24, (16711680 & e.duration) >> 16, (65280 & e.duration) >> 8, 255 & e.duration, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, (65280 & e.width) >> 8, 255 & e.width, 0, 0, (65280 & e.height) >> 8, 255 & e.height, 0, 0]);return o(T.tkhd, t);
      }, v = function v(e) {
        var t, i, n, r, a, s;return t = o(T.tfhd, new Uint8Array([0, 0, 0, 58, (4278190080 & e.id) >> 24, (16711680 & e.id) >> 16, (65280 & e.id) >> 8, 255 & e.id, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])), a = Math.floor(e.baseMediaDecodeTime / (F + 1)), s = Math.floor(e.baseMediaDecodeTime % (F + 1)), i = o(T.tfdt, new Uint8Array([1, 0, 0, 0, a >>> 24 & 255, a >>> 16 & 255, a >>> 8 & 255, 255 & a, s >>> 24 & 255, s >>> 16 & 255, s >>> 8 & 255, 255 & s])), 92, "audio" === e.type ? (n = b(e, 92), o(T.traf, t, i, n)) : (r = m(e), n = b(e, r.length + 92), o(T.traf, t, i, n, r));
      }, c = function c(e) {
        return e.duration = e.duration || 4294967295, o(T.trak, d(e), h(e));
      }, _ = function _(e) {
        var t = new Uint8Array([0, 0, 0, 0, (4278190080 & e.id) >> 24, (16711680 & e.id) >> 16, (65280 & e.id) >> 8, 255 & e.id, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]);return "video" !== e.type && (t[t.length - 1] = 0), o(T.trex, t);
      }, j = function j(e, t) {
        var i = 0,
            n = 0,
            r = 0,
            a = 0;return e.length && (void 0 !== e[0].duration && (i = 1), void 0 !== e[0].size && (n = 2), void 0 !== e[0].flags && (r = 4), void 0 !== e[0].compositionTimeOffset && (a = 8)), [0, 0, i | n | r | a, 1, (4278190080 & e.length) >>> 24, (16711680 & e.length) >>> 16, (65280 & e.length) >>> 8, 255 & e.length, (4278190080 & t) >>> 24, (16711680 & t) >>> 16, (65280 & t) >>> 8, 255 & t];
      }, N = function N(e, t) {
        var i, n, r, a;for (t += 20 + 16 * (n = e.samples || []).length, i = j(n, t), a = 0; a < n.length; a++) {
          r = n[a], i = i.concat([(4278190080 & r.duration) >>> 24, (16711680 & r.duration) >>> 16, (65280 & r.duration) >>> 8, 255 & r.duration, (4278190080 & r.size) >>> 24, (16711680 & r.size) >>> 16, (65280 & r.size) >>> 8, 255 & r.size, r.flags.isLeading << 2 | r.flags.dependsOn, r.flags.isDependedOn << 6 | r.flags.hasRedundancy << 4 | r.flags.paddingValue << 1 | r.flags.isNonSyncSample, 61440 & r.flags.degradationPriority, 15 & r.flags.degradationPriority, (4278190080 & r.compositionTimeOffset) >>> 24, (16711680 & r.compositionTimeOffset) >>> 16, (65280 & r.compositionTimeOffset) >>> 8, 255 & r.compositionTimeOffset]);
        }return o(T.trun, new Uint8Array(i));
      }, B = function B(e, t) {
        var i, n, r, a;for (t += 20 + 8 * (n = e.samples || []).length, i = j(n, t), a = 0; a < n.length; a++) {
          r = n[a], i = i.concat([(4278190080 & r.duration) >>> 24, (16711680 & r.duration) >>> 16, (65280 & r.duration) >>> 8, 255 & r.duration, (4278190080 & r.size) >>> 24, (16711680 & r.size) >>> 16, (65280 & r.size) >>> 8, 255 & r.size]);
        }return o(T.trun, new Uint8Array(i));
      }, b = function b(e, t) {
        return "audio" === e.type ? B(e, t) : N(e, t);
      };var _H,
          V,
          q,
          z,
          W,
          G = { ftyp: r = function r() {
          return o(T.ftyp, S, k, S, C);
        }, mdat: function mdat(e) {
          return o(T.mdat, e);
        }, moof: e, moov: s, initSegment: function initSegment(e) {
          var t,
              i = r(),
              n = s(e);return (t = new Uint8Array(i.byteLength + n.byteLength)).set(i), t.set(n, i.byteLength), t;
        } },
          X = function X(e) {
        return e >>> 0;
      };q = function q(e) {
        return _H(e, ["moov", "trak"]).reduce(function (e, t) {
          var i, n, r, a, s;return (i = _H(t, ["tkhd"])[0]) ? (n = i[0], a = X(i[r = 0 === n ? 12 : 20] << 24 | i[r + 1] << 16 | i[r + 2] << 8 | i[r + 3]), (s = _H(t, ["mdia", "mdhd"])[0]) ? (r = 0 === (n = s[0]) ? 12 : 20, e[a] = X(s[r] << 24 | s[r + 1] << 16 | s[r + 2] << 8 | s[r + 3]), e) : null) : null;
        }, {});
      }, z = function z(r, e) {
        var t, i, n;return t = _H(e, ["moof", "traf"]), i = [].concat.apply([], t.map(function (n) {
          return _H(n, ["tfhd"]).map(function (e) {
            var t, i;return t = X(e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7]), i = r[t] || 9e4, (_H(n, ["tfdt"]).map(function (e) {
              var t, i;return t = e[0], i = X(e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7]), 1 === t && (i *= Math.pow(2, 32), i += X(e[8] << 24 | e[9] << 16 | e[10] << 8 | e[11])), i;
            })[0] || 1 / 0) / i;
          });
        })), n = Math.min.apply(null, i), isFinite(n) ? n : 0;
      }, W = function W(e) {
        var t = _H(e, ["moov", "trak"]),
            o = [];return t.forEach(function (e) {
          var t = _H(e, ["mdia", "hdlr"]),
              s = _H(e, ["tkhd"]);t.forEach(function (e, t) {
            var i,
                n,
                r = V(e.subarray(8, 12)),
                a = s[t];"vide" === r && (n = 0 === (i = new DataView(a.buffer, a.byteOffset, a.byteLength)).getUint8(0) ? i.getUint32(12) : i.getUint32(20), o.push(n));
          });
        }), o;
      };var K = { findBox: _H = function H(e, t) {
          var i,
              n,
              r,
              a,
              s,
              o = [];if (!t.length) return null;for (i = 0; i < e.byteLength;) {
            n = X(e[i] << 24 | e[i + 1] << 16 | e[i + 2] << 8 | e[i + 3]), r = V(e.subarray(i + 4, i + 8)), a = 1 < n ? i + n : e.byteLength, r === t[0] && (1 === t.length ? o.push(e.subarray(i + 8, a)) : (s = _H(e.subarray(i + 8, a), t.slice(1))).length && (o = o.concat(s))), i = a;
          }return o;
        }, parseType: V = function V(e) {
          var t = "";return t += String.fromCharCode(e[0]), t += String.fromCharCode(e[1]), t += String.fromCharCode(e[2]), t += String.fromCharCode(e[3]);
        }, timescale: q, startTime: z, videoTrackIds: W },
          Y = function Y() {
        this.init = function () {
          var a = {};this.on = function (e, t) {
            a[e] || (a[e] = []), a[e] = a[e].concat(t);
          }, this.off = function (e, t) {
            var i;return !!a[e] && (i = a[e].indexOf(t), a[e] = a[e].slice(), a[e].splice(i, 1), -1 < i);
          }, this.trigger = function (e) {
            var t, i, n, r;if (t = a[e]) if (2 === arguments.length) for (n = t.length, i = 0; i < n; ++i) {
              t[i].call(this, arguments[1]);
            } else {
              for (r = [], i = arguments.length, i = 1; i < arguments.length; ++i) {
                r.push(arguments[i]);
              }for (n = t.length, i = 0; i < n; ++i) {
                t[i].apply(this, r);
              }
            }
          }, this.dispose = function () {
            a = {};
          };
        };
      };Y.prototype.pipe = function (t) {
        return this.on("data", function (e) {
          t.push(e);
        }), this.on("done", function (e) {
          t.flush(e);
        }), t;
      }, Y.prototype.push = function (e) {
        this.trigger("data", e);
      }, Y.prototype.flush = function (e) {
        this.trigger("done", e);
      };var $,
          Q,
          J,
          Z,
          ee,
          te,
          ie,
          ne = Y,
          re = function re(e) {
        var t,
            i,
            n = [],
            r = [];for (t = n.byteLength = 0; t < e.length; t++) {
          "access_unit_delimiter_rbsp" === (i = e[t]).nalUnitType ? (n.length && (n.duration = i.dts - n.dts, r.push(n)), (n = [i]).byteLength = i.data.byteLength, n.pts = i.pts, n.dts = i.dts) : ("slice_layer_without_partitioning_rbsp_idr" === i.nalUnitType && (n.keyFrame = !0), n.duration = i.dts - n.dts, n.byteLength += i.data.byteLength, n.push(i));
        }return r.length && (!n.duration || n.duration <= 0) && (n.duration = r[r.length - 1].duration), r.push(n), r;
      },
          ae = function ae(e) {
        var t,
            i,
            n = [],
            r = [];for (n.byteLength = 0, n.nalCount = 0, n.duration = 0, n.pts = e[0].pts, n.dts = e[0].dts, r.byteLength = 0, r.nalCount = 0, r.duration = 0, r.pts = e[0].pts, r.dts = e[0].dts, t = 0; t < e.length; t++) {
          (i = e[t]).keyFrame ? (n.length && (r.push(n), r.byteLength += n.byteLength, r.nalCount += n.nalCount, r.duration += n.duration), (n = [i]).nalCount = i.length, n.byteLength = i.byteLength, n.pts = i.pts, n.dts = i.dts, n.duration = i.duration) : (n.duration += i.duration, n.nalCount += i.length, n.byteLength += i.byteLength, n.push(i));
        }return r.length && n.duration <= 0 && (n.duration = r[r.length - 1].duration), r.byteLength += n.byteLength, r.nalCount += n.nalCount, r.duration += n.duration, r.push(n), r;
      },
          se = function se(e) {
        var t;return !e[0][0].keyFrame && 1 < e.length && (t = e.shift(), e.byteLength -= t.byteLength, e.nalCount -= t.nalCount, e[0][0].dts = t.dts, e[0][0].pts = t.pts, e[0][0].duration += t.duration), e;
      },
          oe = function oe(e, t) {
        var i,
            n,
            r,
            a,
            s,
            o,
            u,
            l = t || 0,
            c = [];for (i = 0; i < e.length; i++) {
          for (a = e[i], n = 0; n < a.length; n++) {
            s = a[n], o = s, u = void 0, (u = { size: 0, flags: { isLeading: 0, dependsOn: 1, isDependedOn: 0, hasRedundancy: 0, degradationPriority: 0, isNonSyncSample: 1 } }).dataOffset = l, u.compositionTimeOffset = o.pts - o.dts, u.duration = o.duration, u.size = 4 * o.length, u.size += o.byteLength, o.keyFrame && (u.flags.dependsOn = 2, u.flags.isNonSyncSample = 0), l += (r = u).size, c.push(r);
          }
        }return c;
      },
          ue = function ue(e) {
        var t,
            i,
            n,
            r,
            a,
            s,
            o = 0,
            u = e.byteLength,
            l = e.nalCount,
            c = new Uint8Array(u + 4 * l),
            d = new DataView(c.buffer);for (t = 0; t < e.length; t++) {
          for (r = e[t], i = 0; i < r.length; i++) {
            for (a = r[i], n = 0; n < a.length; n++) {
              s = a[n], d.setUint32(o, s.data.byteLength), o += 4, c.set(s.data, o), o += s.data.byteLength;
            }
          }
        }return c;
      },
          le = [33, 16, 5, 32, 164, 27],
          ce = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252],
          de = function de(e) {
        for (var t = []; e--;) {
          t.push(0);
        }return t;
      },
          he = { 96e3: [le, [227, 64], de(154), [56]], 88200: [le, [231], de(170), [56]], 64e3: [le, [248, 192], de(240), [56]], 48e3: [le, [255, 192], de(268), [55, 148, 128], de(54), [112]], 44100: [le, [255, 192], de(268), [55, 163, 128], de(84), [112]], 32e3: [le, [255, 192], de(268), [55, 234], de(226), [112]], 24e3: [le, [255, 192], de(268), [55, 255, 128], de(268), [111, 112], de(126), [224]], 16e3: [le, [255, 192], de(268), [55, 255, 128], de(268), [111, 255], de(269), [223, 108], de(195), [1, 192]], 12e3: [ce, de(268), [3, 127, 248], de(268), [6, 255, 240], de(268), [13, 255, 224], de(268), [27, 253, 128], de(259), [56]], 11025: [ce, de(268), [3, 127, 248], de(268), [6, 255, 240], de(268), [13, 255, 224], de(268), [27, 255, 192], de(268), [55, 175, 128], de(108), [112]], 8e3: [ce, de(268), [3, 121, 16], de(47), [7]] },
          pe = ($ = he, Object.keys($).reduce(function (e, t) {
        return e[t] = new Uint8Array($[t].reduce(function (e, t) {
          return e.concat(t);
        }, [])), e;
      }, {}));te = function te(e, t) {
        return Q(ee(e, t));
      }, ie = function ie(e, t) {
        return J(Z(e), t);
      };Q = function Q(e) {
        return 9e4 * e;
      }, J = function J(e, t) {
        return e * t;
      }, Z = function Z(e) {
        return e / 9e4;
      }, ee = function ee(e, t) {
        return e / t;
      };var fe = te,
          me = ie,
          ge = function ge(e, t, i, n) {
        var r,
            a,
            s,
            o,
            u = 0,
            l = 0,
            c = 0;if (t.length && (r = fe(e.baseMediaDecodeTime, e.samplerate), a = Math.ceil(9e4 / (e.samplerate / 1024)), i && n && (u = r - Math.max(i, n), c = (l = Math.floor(u / a)) * a), !(l < 1 || 45e3 < c))) {
          for ((s = pe[e.samplerate]) || (s = t[0].data), o = 0; o < l; o++) {
            t.splice(o, 0, { data: s });
          }e.baseMediaDecodeTime -= Math.floor(me(c, e.samplerate));
        }
      },
          ye = function ye(e, t, i) {
        return t.minSegmentDts >= i ? e : (t.minSegmentDts = 1 / 0, e.filter(function (e) {
          return e.dts >= i && (t.minSegmentDts = Math.min(t.minSegmentDts, e.dts), t.minSegmentPts = t.minSegmentDts, !0);
        }));
      },
          ve = function ve(e) {
        var t,
            i,
            n = [];for (t = 0; t < e.length; t++) {
          i = e[t], n.push({ size: i.data.byteLength, duration: 1024 });
        }return n;
      },
          _e = function _e(e) {
        var t,
            i,
            n = 0,
            r = new Uint8Array(function (e) {
          var t,
              i = 0;for (t = 0; t < e.length; t++) {
            i += e[t].data.byteLength;
          }return i;
        }(e));for (t = 0; t < e.length; t++) {
          i = e[t], r.set(i.data, n), n += i.data.byteLength;
        }return r;
      },
          be = function be(e) {
        delete e.minSegmentDts, delete e.maxSegmentDts, delete e.minSegmentPts, delete e.maxSegmentPts;
      },
          Te = function Te(e, t) {
        var i,
            n = e.minSegmentDts;return t || (n -= e.timelineStartInfo.dts), i = e.timelineStartInfo.baseMediaDecodeTime, i += n, i = Math.max(0, i), "audio" === e.type && (i *= e.samplerate / 9e4, i = Math.floor(i)), i;
      },
          Se = function Se(e, t) {
        "number" == typeof t.pts && (void 0 === e.timelineStartInfo.pts && (e.timelineStartInfo.pts = t.pts), void 0 === e.minSegmentPts ? e.minSegmentPts = t.pts : e.minSegmentPts = Math.min(e.minSegmentPts, t.pts), void 0 === e.maxSegmentPts ? e.maxSegmentPts = t.pts : e.maxSegmentPts = Math.max(e.maxSegmentPts, t.pts)), "number" == typeof t.dts && (void 0 === e.timelineStartInfo.dts && (e.timelineStartInfo.dts = t.dts), void 0 === e.minSegmentDts ? e.minSegmentDts = t.dts : e.minSegmentDts = Math.min(e.minSegmentDts, t.dts), void 0 === e.maxSegmentDts ? e.maxSegmentDts = t.dts : e.maxSegmentDts = Math.max(e.maxSegmentDts, t.dts));
      },
          ke = function ke(e) {
        for (var t = 0, i = { payloadType: -1, payloadSize: 0 }, n = 0, r = 0; t < e.byteLength && 128 !== e[t];) {
          for (; 255 === e[t];) {
            n += 255, t++;
          }for (n += e[t++]; 255 === e[t];) {
            r += 255, t++;
          }if (r += e[t++], !i.payload && 4 === n) {
            i.payloadType = n, i.payloadSize = r, i.payload = e.subarray(t, t + r);break;
          }t += r, r = n = 0;
        }return i;
      },
          Ce = function Ce(e) {
        return 181 !== e.payload[0] ? null : 49 != (e.payload[1] << 8 | e.payload[2]) ? null : "GA94" !== String.fromCharCode(e.payload[3], e.payload[4], e.payload[5], e.payload[6]) ? null : 3 !== e.payload[7] ? null : e.payload.subarray(8, e.payload.length - 1);
      },
          we = function we(e, t) {
        var i,
            n,
            r,
            a,
            s = [];if (!(64 & t[0])) return s;for (n = 31 & t[0], i = 0; i < n; i++) {
          a = { type: 3 & t[2 + (r = 3 * i)], pts: e }, 4 & t[r + 2] && (a.ccData = t[r + 3] << 8 | t[r + 4], s.push(a));
        }return s;
      },
          Ee = function Ee(e) {
        for (var t, i, n = e.byteLength, r = [], a = 1; a < n - 2;) {
          0 === e[a] && 0 === e[a + 1] && 3 === e[a + 2] ? (r.push(a + 2), a += 2) : a++;
        }if (0 === r.length) return e;t = n - r.length, i = new Uint8Array(t);var s = 0;for (a = 0; a < t; s++, a++) {
          s === r[0] && (s++, r.shift()), i[a] = e[s];
        }return i;
      },
          Ae = 4,
          Le = function e() {
        e.prototype.init.call(this), this.captionPackets_ = [], this.ccStreams_ = [new De(0, 0), new De(0, 1), new De(1, 0), new De(1, 1)], this.reset(), this.ccStreams_.forEach(function (e) {
          e.on("data", this.trigger.bind(this, "data")), e.on("done", this.trigger.bind(this, "done"));
        }, this);
      };(Le.prototype = new ne()).push = function (e) {
        var t, i, n;if ("sei_rbsp" === e.nalUnitType && (t = ke(e.escapedRBSP)).payloadType === Ae && (i = Ce(t))) if (e.dts < this.latestDts_) this.ignoreNextEqualDts_ = !0;else {
          if (e.dts === this.latestDts_ && this.ignoreNextEqualDts_) return this.numSameDts_--, void (this.numSameDts_ || (this.ignoreNextEqualDts_ = !1));n = we(e.pts, i), this.captionPackets_ = this.captionPackets_.concat(n), this.latestDts_ !== e.dts && (this.numSameDts_ = 0), this.numSameDts_++, this.latestDts_ = e.dts;
        }
      }, Le.prototype.flush = function () {
        this.captionPackets_.length ? (this.captionPackets_.forEach(function (e, t) {
          e.presortIndex = t;
        }), this.captionPackets_.sort(function (e, t) {
          return e.pts === t.pts ? e.presortIndex - t.presortIndex : e.pts - t.pts;
        }), this.captionPackets_.forEach(function (e) {
          e.type < 2 && this.dispatchCea608Packet(e);
        }, this), this.captionPackets_.length = 0, this.ccStreams_.forEach(function (e) {
          e.flush();
        }, this)) : this.ccStreams_.forEach(function (e) {
          e.flush();
        }, this);
      }, Le.prototype.reset = function () {
        this.latestDts_ = null, this.ignoreNextEqualDts_ = !1, this.numSameDts_ = 0, this.activeCea608Channel_ = [null, null], this.ccStreams_.forEach(function (e) {
          e.reset();
        });
      }, Le.prototype.dispatchCea608Packet = function (e) {
        this.setsChannel1Active(e) ? this.activeCea608Channel_[e.type] = 0 : this.setsChannel2Active(e) && (this.activeCea608Channel_[e.type] = 1), null !== this.activeCea608Channel_[e.type] && this.ccStreams_[(e.type << 1) + this.activeCea608Channel_[e.type]].push(e);
      }, Le.prototype.setsChannel1Active = function (e) {
        return 4096 == (30720 & e.ccData);
      }, Le.prototype.setsChannel2Active = function (e) {
        return 6144 == (30720 & e.ccData);
      };var Pe = { 42: 225, 92: 233, 94: 237, 95: 243, 96: 250, 123: 231, 124: 247, 125: 209, 126: 241, 127: 9608, 304: 174, 305: 176, 306: 189, 307: 191, 308: 8482, 309: 162, 310: 163, 311: 9834, 312: 224, 313: 160, 314: 232, 315: 226, 316: 234, 317: 238, 318: 244, 319: 251, 544: 193, 545: 201, 546: 211, 547: 218, 548: 220, 549: 252, 550: 8216, 551: 161, 552: 42, 553: 39, 554: 8212, 555: 169, 556: 8480, 557: 8226, 558: 8220, 559: 8221, 560: 192, 561: 194, 562: 199, 563: 200, 564: 202, 565: 203, 566: 235, 567: 206, 568: 207, 569: 239, 570: 212, 571: 217, 572: 249, 573: 219, 574: 171, 575: 187, 800: 195, 801: 227, 802: 205, 803: 204, 804: 236, 805: 210, 806: 242, 807: 213, 808: 245, 809: 123, 810: 125, 811: 92, 812: 94, 813: 95, 814: 124, 815: 126, 816: 196, 817: 228, 818: 214, 819: 246, 820: 223, 821: 165, 822: 164, 823: 9474, 824: 197, 825: 229, 826: 216, 827: 248, 828: 9484, 829: 9488, 830: 9492, 831: 9496 },
          Oe = function Oe(e) {
        return null === e ? "" : (e = Pe[e] || e, String.fromCharCode(e));
      },
          Ie = [4352, 4384, 4608, 4640, 5376, 5408, 5632, 5664, 5888, 5920, 4096, 4864, 4896, 5120, 5152],
          Ue = function Ue() {
        for (var e = [], t = 15; t--;) {
          e.push("");
        }return e;
      },
          De = function e(t, i) {
        e.prototype.init.call(this), this.field_ = t || 0, this.dataChannel_ = i || 0, this.name_ = "CC" + (1 + (this.field_ << 1 | this.dataChannel_)), this.setConstants(), this.reset(), this.push = function (e) {
          var t, i, n, r, a;if ((t = 32639 & e.ccData) !== this.lastControlCode_) {
            if (4096 == (61440 & t) ? this.lastControlCode_ = t : t !== this.PADDING_ && (this.lastControlCode_ = null), n = t >>> 8, r = 255 & t, t !== this.PADDING_) if (t === this.RESUME_CAPTION_LOADING_) this.mode_ = "popOn";else if (t === this.END_OF_CAPTION_) this.mode_ = "popOn", this.clearFormatting(e.pts), this.flushDisplayed(e.pts), i = this.displayed_, this.displayed_ = this.nonDisplayed_, this.nonDisplayed_ = i, this.startPts_ = e.pts;else if (t === this.ROLL_UP_2_ROWS_) this.rollUpRows_ = 2, this.setRollUp(e.pts);else if (t === this.ROLL_UP_3_ROWS_) this.rollUpRows_ = 3, this.setRollUp(e.pts);else if (t === this.ROLL_UP_4_ROWS_) this.rollUpRows_ = 4, this.setRollUp(e.pts);else if (t === this.CARRIAGE_RETURN_) this.clearFormatting(e.pts), this.flushDisplayed(e.pts), this.shiftRowsUp_(), this.startPts_ = e.pts;else if (t === this.BACKSPACE_) "popOn" === this.mode_ ? this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1) : this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);else if (t === this.ERASE_DISPLAYED_MEMORY_) this.flushDisplayed(e.pts), this.displayed_ = Ue();else if (t === this.ERASE_NON_DISPLAYED_MEMORY_) this.nonDisplayed_ = Ue();else if (t === this.RESUME_DIRECT_CAPTIONING_) "paintOn" !== this.mode_ && (this.flushDisplayed(e.pts), this.displayed_ = Ue()), this.mode_ = "paintOn", this.startPts_ = e.pts;else if (this.isSpecialCharacter(n, r)) a = Oe((n = (3 & n) << 8) | r), this[this.mode_](e.pts, a), this.column_++;else if (this.isExtCharacter(n, r)) "popOn" === this.mode_ ? this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1) : this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1), a = Oe((n = (3 & n) << 8) | r), this[this.mode_](e.pts, a), this.column_++;else if (this.isMidRowCode(n, r)) this.clearFormatting(e.pts), this[this.mode_](e.pts, " "), this.column_++, 14 == (14 & r) && this.addFormatting(e.pts, ["i"]), 1 == (1 & r) && this.addFormatting(e.pts, ["u"]);else if (this.isOffsetControlCode(n, r)) this.column_ += 3 & r;else if (this.isPAC(n, r)) {
              var s = Ie.indexOf(7968 & t);"rollUp" === this.mode_ && (s - this.rollUpRows_ + 1 < 0 && (s = this.rollUpRows_ - 1), this.setRollUp(e.pts, s)), s !== this.row_ && (this.clearFormatting(e.pts), this.row_ = s), 1 & r && -1 === this.formatting_.indexOf("u") && this.addFormatting(e.pts, ["u"]), 16 == (16 & t) && (this.column_ = 4 * ((14 & t) >> 1)), this.isColorPAC(r) && 14 == (14 & r) && this.addFormatting(e.pts, ["i"]);
            } else this.isNormalChar(n) && (0 === r && (r = null), a = Oe(n), a += Oe(r), this[this.mode_](e.pts, a), this.column_ += a.length);
          } else this.lastControlCode_ = null;
        };
      };De.prototype = new ne(), De.prototype.flushDisplayed = function (e) {
        var t = this.displayed_.map(function (e) {
          try {
            return e.trim();
          } catch (e) {
            return "";
          }
        }).join("\n").replace(/^\n+|\n+$/g, "");t.length && this.trigger("data", { startPts: this.startPts_, endPts: e, text: t, stream: this.name_ });
      }, De.prototype.reset = function () {
        this.mode_ = "popOn", this.topRow_ = 0, this.startPts_ = 0, this.displayed_ = Ue(), this.nonDisplayed_ = Ue(), this.lastControlCode_ = null, this.column_ = 0, this.row_ = 14, this.rollUpRows_ = 2, this.formatting_ = [];
      }, De.prototype.setConstants = function () {
        0 === this.dataChannel_ ? (this.BASE_ = 16, this.EXT_ = 17, this.CONTROL_ = (20 | this.field_) << 8, this.OFFSET_ = 23) : 1 === this.dataChannel_ && (this.BASE_ = 24, this.EXT_ = 25, this.CONTROL_ = (28 | this.field_) << 8, this.OFFSET_ = 31), this.PADDING_ = 0, this.RESUME_CAPTION_LOADING_ = 32 | this.CONTROL_, this.END_OF_CAPTION_ = 47 | this.CONTROL_, this.ROLL_UP_2_ROWS_ = 37 | this.CONTROL_, this.ROLL_UP_3_ROWS_ = 38 | this.CONTROL_, this.ROLL_UP_4_ROWS_ = 39 | this.CONTROL_, this.CARRIAGE_RETURN_ = 45 | this.CONTROL_, this.RESUME_DIRECT_CAPTIONING_ = 41 | this.CONTROL_, this.BACKSPACE_ = 33 | this.CONTROL_, this.ERASE_DISPLAYED_MEMORY_ = 44 | this.CONTROL_, this.ERASE_NON_DISPLAYED_MEMORY_ = 46 | this.CONTROL_;
      }, De.prototype.isSpecialCharacter = function (e, t) {
        return e === this.EXT_ && 48 <= t && t <= 63;
      }, De.prototype.isExtCharacter = function (e, t) {
        return (e === this.EXT_ + 1 || e === this.EXT_ + 2) && 32 <= t && t <= 63;
      }, De.prototype.isMidRowCode = function (e, t) {
        return e === this.EXT_ && 32 <= t && t <= 47;
      }, De.prototype.isOffsetControlCode = function (e, t) {
        return e === this.OFFSET_ && 33 <= t && t <= 35;
      }, De.prototype.isPAC = function (e, t) {
        return e >= this.BASE_ && e < this.BASE_ + 8 && 64 <= t && t <= 127;
      }, De.prototype.isColorPAC = function (e) {
        return 64 <= e && e <= 79 || 96 <= e && e <= 127;
      }, De.prototype.isNormalChar = function (e) {
        return 32 <= e && e <= 127;
      }, De.prototype.setRollUp = function (e, t) {
        if ("rollUp" !== this.mode_ && (this.row_ = 14, this.mode_ = "rollUp", this.flushDisplayed(e), this.nonDisplayed_ = Ue(), this.displayed_ = Ue()), void 0 !== t && t !== this.row_) for (var i = 0; i < this.rollUpRows_; i++) {
          this.displayed_[t - i] = this.displayed_[this.row_ - i], this.displayed_[this.row_ - i] = "";
        }void 0 === t && (t = this.row_), this.topRow_ = t - this.rollUpRows_ + 1;
      }, De.prototype.addFormatting = function (e, t) {
        this.formatting_ = this.formatting_.concat(t);var i = t.reduce(function (e, t) {
          return e + "<" + t + ">";
        }, "");this[this.mode_](e, i);
      }, De.prototype.clearFormatting = function (e) {
        if (this.formatting_.length) {
          var t = this.formatting_.reverse().reduce(function (e, t) {
            return e + "</" + t + ">";
          }, "");this.formatting_ = [], this[this.mode_](e, t);
        }
      }, De.prototype.popOn = function (e, t) {
        var i = this.nonDisplayed_[this.row_];i += t, this.nonDisplayed_[this.row_] = i;
      }, De.prototype.rollUp = function (e, t) {
        var i = this.displayed_[this.row_];i += t, this.displayed_[this.row_] = i;
      }, De.prototype.shiftRowsUp_ = function () {
        var e;for (e = 0; e < this.topRow_; e++) {
          this.displayed_[e] = "";
        }for (e = this.row_ + 1; e < 15; e++) {
          this.displayed_[e] = "";
        }for (e = this.topRow_; e < this.row_; e++) {
          this.displayed_[e] = this.displayed_[e + 1];
        }this.displayed_[this.row_] = "";
      }, De.prototype.paintOn = function (e, t) {
        var i = this.displayed_[this.row_];i += t, this.displayed_[this.row_] = i;
      };var xe = { CaptionStream: Le, Cea608Stream: De },
          Re = { H264_STREAM_TYPE: 27, ADTS_STREAM_TYPE: 15, METADATA_STREAM_TYPE: 21 },
          Me = function Me(e, t) {
        var i = 1;for (t < e && (i = -1); 4294967296 < Math.abs(t - e);) {
          e += 8589934592 * i;
        }return e;
      },
          Be = function e(t) {
        var i, n;e.prototype.init.call(this), this.type_ = t, this.push = function (e) {
          e.type === this.type_ && (void 0 === n && (n = e.dts), e.dts = Me(e.dts, n), e.pts = Me(e.pts, n), i = e.dts, this.trigger("data", e));
        }, this.flush = function () {
          n = i, this.trigger("done");
        }, this.discontinuity = function () {
          i = n = void 0;
        };
      };Be.prototype = new ne();var _Ne,
          je = Be,
          Fe = function Fe(e, t, i) {
        var n,
            r = "";for (n = t; n < i; n++) {
          r += "%" + ("00" + e[n].toString(16)).slice(-2);
        }return r;
      },
          He = function He(e, t, i) {
        return decodeURIComponent(Fe(e, t, i));
      },
          Ve = function Ve(e) {
        return e[0] << 21 | e[1] << 14 | e[2] << 7 | e[3];
      },
          qe = { TXXX: function TXXX(e) {
          var t;if (3 === e.data[0]) {
            for (t = 1; t < e.data.length; t++) {
              if (0 === e.data[t]) {
                e.description = He(e.data, 1, t), e.value = He(e.data, t + 1, e.data.length).replace(/\0*$/, "");break;
              }
            }e.data = e.value;
          }
        }, WXXX: function WXXX(e) {
          var t;if (3 === e.data[0]) for (t = 1; t < e.data.length; t++) {
            if (0 === e.data[t]) {
              e.description = He(e.data, 1, t), e.url = He(e.data, t + 1, e.data.length);break;
            }
          }
        }, PRIV: function PRIV(e) {
          var t, i;for (t = 0; t < e.data.length; t++) {
            if (0 === e.data[t]) {
              e.owner = (i = e.data, unescape(Fe(i, 0, t)));break;
            }
          }e.privateData = e.data.subarray(t + 1), e.data = e.privateData;
        } };(_Ne = function Ne(e) {
        var t,
            u = { debug: !(!e || !e.debug), descriptor: e && e.descriptor },
            l = 0,
            c = [],
            d = 0;if (_Ne.prototype.init.call(this), this.dispatchType = Re.METADATA_STREAM_TYPE.toString(16), u.descriptor) for (t = 0; t < u.descriptor.length; t++) {
          this.dispatchType += ("00" + u.descriptor[t].toString(16)).slice(-2);
        }this.push = function (e) {
          var t, i, n, r, a;if ("timed-metadata" === e.type) if (e.dataAlignmentIndicator && (d = 0, c.length = 0), 0 === c.length && (e.data.length < 10 || e.data[0] !== "I".charCodeAt(0) || e.data[1] !== "D".charCodeAt(0) || e.data[2] !== "3".charCodeAt(0))) u.debug;else if (c.push(e), d += e.data.byteLength, 1 === c.length && (l = Ve(e.data.subarray(6, 10)), l += 10), !(d < l)) {
            for (t = { data: new Uint8Array(l), frames: [], pts: c[0].pts, dts: c[0].dts }, a = 0; a < l;) {
              t.data.set(c[0].data.subarray(0, l - a), a), a += c[0].data.byteLength, d -= c[0].data.byteLength, c.shift();
            }i = 10, 64 & t.data[5] && (i += 4, i += Ve(t.data.subarray(10, 14)), l -= Ve(t.data.subarray(16, 20)));do {
              if ((n = Ve(t.data.subarray(i + 4, i + 8))) < 1) return;if ((r = { id: String.fromCharCode(t.data[i], t.data[i + 1], t.data[i + 2], t.data[i + 3]), data: t.data.subarray(i + 10, i + n + 10) }).key = r.id, qe[r.id] && (qe[r.id](r), "com.apple.streaming.transportStreamTimestamp" === r.owner)) {
                var s = r.data,
                    o = (1 & s[3]) << 30 | s[4] << 22 | s[5] << 14 | s[6] << 6 | s[7] >>> 2;o *= 4, o += 3 & s[7], r.timeStamp = o, void 0 === t.pts && void 0 === t.dts && (t.pts = r.timeStamp, t.dts = r.timeStamp), this.trigger("timestamp", r);
              }t.frames.push(r), i += 10, i += n;
            } while (i < l);this.trigger("data", t);
          }
        };
      }).prototype = new ne();var _ze,
          _We,
          _Ge,
          Xe = _Ne,
          Ke = je;(_ze = function ze() {
        var r = new Uint8Array(188),
            a = 0;_ze.prototype.init.call(this), this.push = function (e) {
          var t,
              i = 0,
              n = 188;for (a ? ((t = new Uint8Array(e.byteLength + a)).set(r.subarray(0, a)), t.set(e, a), a = 0) : t = e; n < t.byteLength;) {
            71 !== t[i] || 71 !== t[n] ? (i++, n++) : (this.trigger("data", t.subarray(i, n)), i += 188, n += 188);
          }i < t.byteLength && (r.set(t.subarray(i), 0), a = t.byteLength - i);
        }, this.flush = function () {
          188 === a && 71 === r[0] && (this.trigger("data", r), a = 0), this.trigger("done");
        };
      }).prototype = new ne(), (_We = function We() {
        var n, r, a, s;_We.prototype.init.call(this), (s = this).packetsWaitingForPmt = [], this.programMapTable = void 0, n = function n(e, t) {
          var i = 0;t.payloadUnitStartIndicator && (i += e[i] + 1), "pat" === t.type ? r(e.subarray(i), t) : a(e.subarray(i), t);
        }, r = function r(e, t) {
          t.section_number = e[7], t.last_section_number = e[8], s.pmtPid = (31 & e[10]) << 8 | e[11], t.pmtPid = s.pmtPid;
        }, a = function a(e, t) {
          var i, n;if (1 & e[5]) {
            for (s.programMapTable = { video: null, audio: null, "timed-metadata": {} }, i = 3 + ((15 & e[1]) << 8 | e[2]) - 4, n = 12 + ((15 & e[10]) << 8 | e[11]); n < i;) {
              var r = e[n],
                  a = (31 & e[n + 1]) << 8 | e[n + 2];r === Re.H264_STREAM_TYPE && null === s.programMapTable.video ? s.programMapTable.video = a : r === Re.ADTS_STREAM_TYPE && null === s.programMapTable.audio ? s.programMapTable.audio = a : r === Re.METADATA_STREAM_TYPE && (s.programMapTable["timed-metadata"][a] = r), n += 5 + ((15 & e[n + 3]) << 8 | e[n + 4]);
            }t.programMapTable = s.programMapTable;
          }
        }, this.push = function (e) {
          var t = {},
              i = 4;if (t.payloadUnitStartIndicator = !!(64 & e[1]), t.pid = 31 & e[1], t.pid <<= 8, t.pid |= e[2], 1 < (48 & e[3]) >>> 4 && (i += e[i] + 1), 0 === t.pid) t.type = "pat", n(e.subarray(i), t), this.trigger("data", t);else if (t.pid === this.pmtPid) for (t.type = "pmt", n(e.subarray(i), t), this.trigger("data", t); this.packetsWaitingForPmt.length;) {
            this.processPes_.apply(this, this.packetsWaitingForPmt.shift());
          } else void 0 === this.programMapTable ? this.packetsWaitingForPmt.push([e, i, t]) : this.processPes_(e, i, t);
        }, this.processPes_ = function (e, t, i) {
          i.pid === this.programMapTable.video ? i.streamType = Re.H264_STREAM_TYPE : i.pid === this.programMapTable.audio ? i.streamType = Re.ADTS_STREAM_TYPE : i.streamType = this.programMapTable["timed-metadata"][i.pid], i.type = "pes", i.data = e.subarray(t), this.trigger("data", i);
        };
      }).prototype = new ne(), _We.STREAM_TYPES = { h264: 27, adts: 15 }, (_Ge = function Ge() {
        var h = this,
            n = { data: [], size: 0 },
            r = { data: [], size: 0 },
            a = { data: [], size: 0 },
            s = function s(e, t, i) {
          var n,
              r,
              a = new Uint8Array(e.size),
              s = { type: t },
              o = 0,
              u = 0;if (e.data.length && !(e.size < 9)) {
            for (s.trackId = e.data[0].pid, o = 0; o < e.data.length; o++) {
              r = e.data[o], a.set(r.data, u), u += r.data.byteLength;
            }var l, c, d;l = a, (c = s).packetLength = 6 + (l[4] << 8 | l[5]), c.dataAlignmentIndicator = 0 != (4 & l[6]), 192 & (d = l[7]) && (c.pts = (14 & l[9]) << 27 | (255 & l[10]) << 20 | (254 & l[11]) << 12 | (255 & l[12]) << 5 | (254 & l[13]) >>> 3, c.pts *= 4, c.pts += (6 & l[13]) >>> 1, c.dts = c.pts, 64 & d && (c.dts = (14 & l[14]) << 27 | (255 & l[15]) << 20 | (254 & l[16]) << 12 | (255 & l[17]) << 5 | (254 & l[18]) >>> 3, c.dts *= 4, c.dts += (6 & l[18]) >>> 1)), c.data = l.subarray(9 + l[8]), n = "video" === t || s.packetLength <= e.size, (i || n) && (e.size = 0, e.data.length = 0), n && h.trigger("data", s);
          }
        };_Ge.prototype.init.call(this), this.push = function (i) {
          ({ pat: function pat() {}, pes: function pes() {
              var e, t;switch (i.streamType) {case Re.H264_STREAM_TYPE:case Re.H264_STREAM_TYPE:
                  e = n, t = "video";break;case Re.ADTS_STREAM_TYPE:
                  e = r, t = "audio";break;case Re.METADATA_STREAM_TYPE:
                  e = a, t = "timed-metadata";break;default:
                  return;}i.payloadUnitStartIndicator && s(e, t, !0), e.data.push(i), e.size += i.data.byteLength;
            }, pmt: function pmt() {
              var e = { type: "metadata", tracks: [] },
                  t = i.programMapTable;null !== t.video && e.tracks.push({ timelineStartInfo: { baseMediaDecodeTime: 0 }, id: +t.video, codec: "avc", type: "video" }), null !== t.audio && e.tracks.push({ timelineStartInfo: { baseMediaDecodeTime: 0 }, id: +t.audio, codec: "adts", type: "audio" }), h.trigger("data", e);
            } })[i.type]();
        }, this.flush = function () {
          s(n, "video"), s(r, "audio"), s(a, "timed-metadata"), this.trigger("done");
        };
      }).prototype = new ne();var Ye = { PAT_PID: 0, MP2T_PACKET_LENGTH: 188, TransportPacketStream: _ze, TransportParseStream: _We, ElementaryStream: _Ge, TimestampRolloverStream: Ke, CaptionStream: xe.CaptionStream, Cea608Stream: xe.Cea608Stream, MetadataStream: Xe };for (var $e in Re) {
        Re.hasOwnProperty($e) && (Ye[$e] = Re[$e]);
      }var _Qe,
          Je = Ye,
          Ze = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];(_Qe = function Qe() {
        var l;_Qe.prototype.init.call(this), this.push = function (e) {
          var t,
              i,
              n,
              r,
              a,
              s,
              o = 0,
              u = 0;if ("audio" === e.type) for (l ? (r = l, (l = new Uint8Array(r.byteLength + e.data.byteLength)).set(r), l.set(e.data, r.byteLength)) : l = e.data; o + 5 < l.length;) {
            if (255 === l[o] && 240 == (246 & l[o + 1])) {
              if (i = 2 * (1 & ~l[o + 1]), t = (3 & l[o + 3]) << 11 | l[o + 4] << 3 | (224 & l[o + 5]) >> 5, s = 9e4 * (a = 1024 * (1 + (3 & l[o + 6]))) / Ze[(60 & l[o + 2]) >>> 2], n = o + t, l.byteLength < n) return;if (this.trigger("data", { pts: e.pts + u * s, dts: e.dts + u * s, sampleCount: a, audioobjecttype: 1 + (l[o + 2] >>> 6 & 3), channelcount: (1 & l[o + 2]) << 2 | (192 & l[o + 3]) >>> 6, samplerate: Ze[(60 & l[o + 2]) >>> 2], samplingfrequencyindex: (60 & l[o + 2]) >>> 2, samplesize: 16, data: l.subarray(o + 7 + i, n) }), l.byteLength === n) return void (l = void 0);u++, l = l.subarray(n);
            } else o++;
          }
        }, this.flush = function () {
          this.trigger("done");
        };
      }).prototype = new ne();var _et,
          _tt,
          it,
          nt = _Qe,
          rt = function rt(n) {
        var r = n.byteLength,
            a = 0,
            s = 0;this.length = function () {
          return 8 * r;
        }, this.bitsAvailable = function () {
          return 8 * r + s;
        }, this.loadWord = function () {
          var e = n.byteLength - r,
              t = new Uint8Array(4),
              i = Math.min(4, r);if (0 === i) throw new Error("no bytes available");t.set(n.subarray(e, e + i)), a = new DataView(t.buffer).getUint32(0), s = 8 * i, r -= i;
        }, this.skipBits = function (e) {
          var t;e < s || (e -= s, e -= 8 * (t = Math.floor(e / 8)), r -= t, this.loadWord()), a <<= e, s -= e;
        }, this.readBits = function (e) {
          var t = Math.min(s, e),
              i = a >>> 32 - t;return 0 < (s -= t) ? a <<= t : 0 < r && this.loadWord(), 0 < (t = e - t) ? i << t | this.readBits(t) : i;
        }, this.skipLeadingZeros = function () {
          var e;for (e = 0; e < s; ++e) {
            if (0 != (a & 2147483648 >>> e)) return a <<= e, s -= e, e;
          }return this.loadWord(), e + this.skipLeadingZeros();
        }, this.skipUnsignedExpGolomb = function () {
          this.skipBits(1 + this.skipLeadingZeros());
        }, this.skipExpGolomb = function () {
          this.skipBits(1 + this.skipLeadingZeros());
        }, this.readUnsignedExpGolomb = function () {
          var e = this.skipLeadingZeros();return this.readBits(e + 1) - 1;
        }, this.readExpGolomb = function () {
          var e = this.readUnsignedExpGolomb();return 1 & e ? 1 + e >>> 1 : -1 * (e >>> 1);
        }, this.readBoolean = function () {
          return 1 === this.readBits(1);
        }, this.readUnsignedByte = function () {
          return this.readBits(8);
        }, this.loadWord();
      };(_tt = function tt() {
        var i,
            n,
            r = 0;_tt.prototype.init.call(this), this.push = function (e) {
          var t;for (n = n ? ((t = new Uint8Array(n.byteLength + e.data.byteLength)).set(n), t.set(e.data, n.byteLength), t) : e.data; r < n.byteLength - 3; r++) {
            if (1 === n[r + 2]) {
              i = r + 5;break;
            }
          }for (; i < n.byteLength;) {
            switch (n[i]) {case 0:
                if (0 !== n[i - 1]) {
                  i += 2;break;
                }if (0 !== n[i - 2]) {
                  i++;break;
                }for (r + 3 !== i - 2 && this.trigger("data", n.subarray(r + 3, i - 2)); 1 !== n[++i] && i < n.length;) {}r = i - 2, i += 3;break;case 1:
                if (0 !== n[i - 1] || 0 !== n[i - 2]) {
                  i += 3;break;
                }this.trigger("data", n.subarray(r + 3, i - 2)), r = i - 2, i += 3;break;default:
                i += 3;}
          }n = n.subarray(r), i -= r, r = 0;
        }, this.flush = function () {
          n && 3 < n.byteLength && this.trigger("data", n.subarray(r + 3)), n = null, r = 0, this.trigger("done");
        };
      }).prototype = new ne(), it = { 100: !0, 110: !0, 122: !0, 244: !0, 44: !0, 83: !0, 86: !0, 118: !0, 128: !0, 138: !0, 139: !0, 134: !0 }, (_et = function et() {
        var i,
            n,
            r,
            a,
            s,
            o,
            _,
            t = new _tt();_et.prototype.init.call(this), (i = this).push = function (e) {
          "video" === e.type && (n = e.trackId, r = e.pts, a = e.dts, t.push(e));
        }, t.on("data", function (e) {
          var t = { trackId: n, pts: r, dts: a, data: e };switch (31 & e[0]) {case 5:
              t.nalUnitType = "slice_layer_without_partitioning_rbsp_idr";break;case 6:
              t.nalUnitType = "sei_rbsp", t.escapedRBSP = s(e.subarray(1));break;case 7:
              t.nalUnitType = "seq_parameter_set_rbsp", t.escapedRBSP = s(e.subarray(1)), t.config = o(t.escapedRBSP);break;case 8:
              t.nalUnitType = "pic_parameter_set_rbsp";break;case 9:
              t.nalUnitType = "access_unit_delimiter_rbsp";}i.trigger("data", t);
        }), t.on("done", function () {
          i.trigger("done");
        }), this.flush = function () {
          t.flush();
        }, _ = function _(e, t) {
          var i,
              n = 8,
              r = 8;for (i = 0; i < e; i++) {
            0 !== r && (r = (n + t.readExpGolomb() + 256) % 256), n = 0 === r ? n : r;
          }
        }, s = function s(e) {
          for (var t, i, n = e.byteLength, r = [], a = 1; a < n - 2;) {
            0 === e[a] && 0 === e[a + 1] && 3 === e[a + 2] ? (r.push(a + 2), a += 2) : a++;
          }if (0 === r.length) return e;t = n - r.length, i = new Uint8Array(t);var s = 0;for (a = 0; a < t; s++, a++) {
            s === r[0] && (s++, r.shift()), i[a] = e[s];
          }return i;
        }, o = function o(e) {
          var t,
              i,
              n,
              r,
              a,
              s,
              o,
              u,
              l,
              c,
              d,
              h,
              p,
              f = 0,
              m = 0,
              g = 0,
              y = 0,
              v = 1;if (i = (t = new rt(e)).readUnsignedByte(), r = t.readUnsignedByte(), n = t.readUnsignedByte(), t.skipUnsignedExpGolomb(), it[i] && (3 === (a = t.readUnsignedExpGolomb()) && t.skipBits(1), t.skipUnsignedExpGolomb(), t.skipUnsignedExpGolomb(), t.skipBits(1), t.readBoolean())) for (d = 3 !== a ? 8 : 12, p = 0; p < d; p++) {
            t.readBoolean() && _(p < 6 ? 16 : 64, t);
          }if (t.skipUnsignedExpGolomb(), 0 === (s = t.readUnsignedExpGolomb())) t.readUnsignedExpGolomb();else if (1 === s) for (t.skipBits(1), t.skipExpGolomb(), t.skipExpGolomb(), o = t.readUnsignedExpGolomb(), p = 0; p < o; p++) {
            t.skipExpGolomb();
          }if (t.skipUnsignedExpGolomb(), t.skipBits(1), u = t.readUnsignedExpGolomb(), l = t.readUnsignedExpGolomb(), 0 === (c = t.readBits(1)) && t.skipBits(1), t.skipBits(1), t.readBoolean() && (f = t.readUnsignedExpGolomb(), m = t.readUnsignedExpGolomb(), g = t.readUnsignedExpGolomb(), y = t.readUnsignedExpGolomb()), t.readBoolean() && t.readBoolean()) {
            switch (t.readUnsignedByte()) {case 1:
                h = [1, 1];break;case 2:
                h = [12, 11];break;case 3:
                h = [10, 11];break;case 4:
                h = [16, 11];break;case 5:
                h = [40, 33];break;case 6:
                h = [24, 11];break;case 7:
                h = [20, 11];break;case 8:
                h = [32, 11];break;case 9:
                h = [80, 33];break;case 10:
                h = [18, 11];break;case 11:
                h = [15, 11];break;case 12:
                h = [64, 33];break;case 13:
                h = [160, 99];break;case 14:
                h = [4, 3];break;case 15:
                h = [3, 2];break;case 16:
                h = [2, 1];break;case 255:
                h = [t.readUnsignedByte() << 8 | t.readUnsignedByte(), t.readUnsignedByte() << 8 | t.readUnsignedByte()];}h && (v = h[0] / h[1]);
          }return { profileIdc: i, levelIdc: n, profileCompatibility: r, width: Math.ceil((16 * (u + 1) - 2 * f - 2 * m) * v), height: (2 - c) * (l + 1) * 16 - 2 * g - 2 * y };
        };
      }).prototype = new ne();var _at,
          st = { H264Stream: _et, NalByteStream: _tt },
          ot = function ot(e) {
        return e[0] === "I".charCodeAt(0) && e[1] === "D".charCodeAt(0) && e[2] === "3".charCodeAt(0);
      },
          ut = function ut(e, t) {
        var i = e[t + 6] << 21 | e[t + 7] << 14 | e[t + 8] << 7 | e[t + 9];return (16 & e[t + 5]) >> 4 ? i + 20 : i + 10;
      },
          lt = function lt(e, t) {
        var i = (224 & e[t + 5]) >> 5,
            n = e[t + 4] << 3;return 6144 & e[t + 3] | n | i;
      };(_at = function at() {
        var o = new Uint8Array(),
            u = 0;_at.prototype.init.call(this), this.setTimestamp = function (e) {
          u = e;
        }, this.push = function (e) {
          var t,
              i,
              n,
              r,
              a = 0,
              s = 0;for (o.length ? (r = o.length, (o = new Uint8Array(e.byteLength + r)).set(o.subarray(0, r)), o.set(e, r)) : o = e; 3 <= o.length - s;) {
            if (o[s] !== "I".charCodeAt(0) || o[s + 1] !== "D".charCodeAt(0) || o[s + 2] !== "3".charCodeAt(0)) {
              if (255 != (255 & o[s]) || 240 != (240 & o[s + 1])) s++;else {
                if (o.length - s < 7) break;if (s + (a = lt(o, s)) > o.length) break;n = { type: "audio", data: o.subarray(s, s + a), pts: u, dts: u }, this.trigger("data", n), s += a;
              }
            } else {
              if (o.length - s < 10) break;if (s + (a = ut(o, s)) > o.length) break;i = { type: "timed-metadata", data: o.subarray(s, s + a) }, this.trigger("data", i), s += a;
            }
          }t = o.length - s, o = 0 < t ? o.subarray(s) : new Uint8Array();
        };
      }).prototype = new ne();var _ct,
          _dt,
          _ht,
          _pt,
          ft = _at,
          mt = st.H264Stream,
          gt = ot,
          yt = ["audioobjecttype", "channelcount", "samplerate", "samplingfrequencyindex", "samplesize"],
          vt = ["width", "height", "profileIdc", "levelIdc", "profileCompatibility"],
          _t = function _t(e, t) {
        var i;if (e.length !== t.length) return !1;for (i = 0; i < e.length; i++) {
          if (e[i] !== t[i]) return !1;
        }return !0;
      },
          bt = function bt(e, t, i, n, r, a) {
        return { start: { dts: e, pts: e + (i - t) }, end: { dts: e + (n - t), pts: e + (r - i) }, prependedContentDuration: a, baseMediaDecodeTime: e };
      };(_dt = function dt(r, a) {
        var s = [],
            o = 0,
            u = 0,
            l = 0,
            c = 1 / 0;a = a || {}, _dt.prototype.init.call(this), this.push = function (t) {
          Se(r, t), r && yt.forEach(function (e) {
            r[e] = t[e];
          }), s.push(t);
        }, this.setEarliestDts = function (e) {
          u = e - r.timelineStartInfo.baseMediaDecodeTime;
        }, this.setVideoBaseMediaDecodeTime = function (e) {
          c = e;
        }, this.setAudioAppendStart = function (e) {
          l = e;
        }, this.flush = function () {
          var e, t, i, n;0 !== s.length && (e = ye(s, r, u), r.baseMediaDecodeTime = Te(r, a.keepOriginalTimestamps), ge(r, e, l, c), r.samples = ve(e), i = G.mdat(_e(e)), s = [], t = G.moof(o, [r]), n = new Uint8Array(t.byteLength + i.byteLength), o++, n.set(t), n.set(i, t.byteLength), be(r), this.trigger("data", { track: r, boxes: n })), this.trigger("done", "AudioSegmentStream");
        };
      }).prototype = new ne(), (_ct = function ct(c, d) {
        var t,
            i,
            h = 0,
            p = [],
            f = [];d = d || {}, _ct.prototype.init.call(this), delete c.minPTS, this.gopCache_ = [], this.push = function (e) {
          Se(c, e), "seq_parameter_set_rbsp" !== e.nalUnitType || t || (t = e.config, c.sps = [e.data], vt.forEach(function (e) {
            c[e] = t[e];
          }, this)), "pic_parameter_set_rbsp" !== e.nalUnitType || i || (i = e.data, c.pps = [e.data]), p.push(e);
        }, this.flush = function () {
          for (var e, t, i, n, r, a, s, o, u = 0; p.length && "access_unit_delimiter_rbsp" !== p[0].nalUnitType;) {
            p.shift();
          }if (0 === p.length) return this.resetStream_(), void this.trigger("done", "VideoSegmentStream");if (e = re(p), (i = ae(e))[0][0].keyFrame || ((t = this.getGopForFusion_(p[0], c)) ? (u = t.duration, i.unshift(t), i.byteLength += t.byteLength, i.nalCount += t.nalCount, i.pts = t.pts, i.dts = t.dts, i.duration += t.duration) : i = se(i)), f.length) {
            var l;if (!(l = d.alignGopsAtEnd ? this.alignGopsAtEnd_(i) : this.alignGopsAtStart_(i))) return this.gopCache_.unshift({ gop: i.pop(), pps: c.pps, sps: c.sps }), this.gopCache_.length = Math.min(6, this.gopCache_.length), p = [], this.resetStream_(), void this.trigger("done", "VideoSegmentStream");be(c), i = l;
          }Se(c, i), c.samples = oe(i), r = G.mdat(ue(i)), c.baseMediaDecodeTime = Te(c, d.keepOriginalTimestamps), this.trigger("processedGopsInfo", i.map(function (e) {
            return { pts: e.pts, dts: e.dts, byteLength: e.byteLength };
          })), s = i[0], o = i[i.length - 1], this.trigger("segmentTimingInfo", bt(c.baseMediaDecodeTime, s.dts, s.pts, o.dts + o.duration, o.pts + o.duration, u)), this.gopCache_.unshift({ gop: i.pop(), pps: c.pps, sps: c.sps }), this.gopCache_.length = Math.min(6, this.gopCache_.length), p = [], this.trigger("baseMediaDecodeTime", c.baseMediaDecodeTime), this.trigger("timelineStartInfo", c.timelineStartInfo), n = G.moof(h, [c]), a = new Uint8Array(n.byteLength + r.byteLength), h++, a.set(n), a.set(r, n.byteLength), this.trigger("data", { track: c, boxes: a }), this.resetStream_(), this.trigger("done", "VideoSegmentStream");
        }, this.resetStream_ = function () {
          be(c), i = t = void 0;
        }, this.getGopForFusion_ = function (e) {
          var t,
              i,
              n,
              r,
              a,
              s = 1 / 0;for (a = 0; a < this.gopCache_.length; a++) {
            n = (r = this.gopCache_[a]).gop, c.pps && _t(c.pps[0], r.pps[0]) && c.sps && _t(c.sps[0], r.sps[0]) && (n.dts < c.timelineStartInfo.dts || -1e4 <= (t = e.dts - n.dts - n.duration) && t <= 45e3 && (!i || t < s) && (i = r, s = t));
          }return i ? i.gop : null;
        }, this.alignGopsAtStart_ = function (e) {
          var t, i, n, r, a, s, o, u;for (a = e.byteLength, s = e.nalCount, o = e.duration, t = i = 0; t < f.length && i < e.length && (n = f[t], r = e[i], n.pts !== r.pts);) {
            r.pts > n.pts ? t++ : (i++, a -= r.byteLength, s -= r.nalCount, o -= r.duration);
          }return 0 === i ? e : i === e.length ? null : ((u = e.slice(i)).byteLength = a, u.duration = o, u.nalCount = s, u.pts = u[0].pts, u.dts = u[0].dts, u);
        }, this.alignGopsAtEnd_ = function (e) {
          var t, i, n, r, a, s, o;for (t = f.length - 1, i = e.length - 1, a = null, s = !1; 0 <= t && 0 <= i;) {
            if (n = f[t], r = e[i], n.pts === r.pts) {
              s = !0;break;
            }n.pts > r.pts ? t-- : (t === f.length - 1 && (a = i), i--);
          }if (!s && null === a) return null;if (0 === (o = s ? i : a)) return e;var u = e.slice(o),
              l = u.reduce(function (e, t) {
            return e.byteLength += t.byteLength, e.duration += t.duration, e.nalCount += t.nalCount, e;
          }, { byteLength: 0, duration: 0, nalCount: 0 });return u.byteLength = l.byteLength, u.duration = l.duration, u.nalCount = l.nalCount, u.pts = u[0].pts, u.dts = u[0].dts, u;
        }, this.alignGopsWith = function (e) {
          f = e;
        };
      }).prototype = new ne(), (_pt = function pt(e, t) {
        this.numberOfTracks = 0, this.metadataStream = t, "undefined" != typeof (e = e || {}).remux ? this.remuxTracks = !!e.remux : this.remuxTracks = !0, "boolean" == typeof e.keepOriginalTimestamps && (this.keepOriginalTimestamps = e.keepOriginalTimestamps), this.pendingTracks = [], this.videoTrack = null, this.pendingBoxes = [], this.pendingCaptions = [], this.pendingMetadata = [], this.pendingBytes = 0, this.emittedTracks = 0, _pt.prototype.init.call(this), this.push = function (e) {
          return e.text ? this.pendingCaptions.push(e) : e.frames ? this.pendingMetadata.push(e) : (this.pendingTracks.push(e.track), this.pendingBoxes.push(e.boxes), this.pendingBytes += e.boxes.byteLength, "video" === e.track.type && (this.videoTrack = e.track), void ("audio" === e.track.type && (this.audioTrack = e.track)));
        };
      }).prototype = new ne(), _pt.prototype.flush = function (e) {
        var t,
            i,
            n,
            r,
            a = 0,
            s = { captions: [], captionStreams: {}, metadata: [], info: {} },
            o = 0;if (this.pendingTracks.length < this.numberOfTracks) {
          if ("VideoSegmentStream" !== e && "AudioSegmentStream" !== e) return;if (this.remuxTracks) return;if (0 === this.pendingTracks.length) return this.emittedTracks++, void (this.emittedTracks >= this.numberOfTracks && (this.trigger("done"), this.emittedTracks = 0));
        }for (this.videoTrack ? (o = this.videoTrack.timelineStartInfo.pts, vt.forEach(function (e) {
          s.info[e] = this.videoTrack[e];
        }, this)) : this.audioTrack && (o = this.audioTrack.timelineStartInfo.pts, yt.forEach(function (e) {
          s.info[e] = this.audioTrack[e];
        }, this)), 1 === this.pendingTracks.length ? s.type = this.pendingTracks[0].type : s.type = "combined", this.emittedTracks += this.pendingTracks.length, n = G.initSegment(this.pendingTracks), s.initSegment = new Uint8Array(n.byteLength), s.initSegment.set(n), s.data = new Uint8Array(this.pendingBytes), r = 0; r < this.pendingBoxes.length; r++) {
          s.data.set(this.pendingBoxes[r], a), a += this.pendingBoxes[r].byteLength;
        }for (r = 0; r < this.pendingCaptions.length; r++) {
          (t = this.pendingCaptions[r]).startTime = t.startPts, this.keepOriginalTimestamps || (t.startTime -= o), t.startTime /= 9e4, t.endTime = t.endPts, this.keepOriginalTimestamps || (t.endTime -= o), t.endTime /= 9e4, s.captionStreams[t.stream] = !0, s.captions.push(t);
        }for (r = 0; r < this.pendingMetadata.length; r++) {
          (i = this.pendingMetadata[r]).cueTime = i.pts, this.keepOriginalTimestamps || (i.cueTime -= o), i.cueTime /= 9e4, s.metadata.push(i);
        }s.metadata.dispatchType = this.metadataStream.dispatchType, this.pendingTracks.length = 0, this.videoTrack = null, this.pendingBoxes.length = 0, this.pendingCaptions.length = 0, this.pendingBytes = 0, this.pendingMetadata.length = 0, this.trigger("data", s), this.emittedTracks >= this.numberOfTracks && (this.trigger("done"), this.emittedTracks = 0);
      }, (_ht = function ht(n) {
        var r,
            a,
            s = this,
            i = !0;_ht.prototype.init.call(this), n = n || {}, this.baseMediaDecodeTime = n.baseMediaDecodeTime || 0, this.transmuxPipeline_ = {}, this.setupAacPipeline = function () {
          var t = {};(this.transmuxPipeline_ = t).type = "aac", t.metadataStream = new Je.MetadataStream(), t.aacStream = new ft(), t.audioTimestampRolloverStream = new Je.TimestampRolloverStream("audio"), t.timedMetadataTimestampRolloverStream = new Je.TimestampRolloverStream("timed-metadata"), t.adtsStream = new nt(), t.coalesceStream = new _pt(n, t.metadataStream), t.headOfPipeline = t.aacStream, t.aacStream.pipe(t.audioTimestampRolloverStream).pipe(t.adtsStream), t.aacStream.pipe(t.timedMetadataTimestampRolloverStream).pipe(t.metadataStream).pipe(t.coalesceStream), t.metadataStream.on("timestamp", function (e) {
            t.aacStream.setTimestamp(e.timeStamp);
          }), t.aacStream.on("data", function (e) {
            "timed-metadata" !== e.type || t.audioSegmentStream || (a = a || { timelineStartInfo: { baseMediaDecodeTime: s.baseMediaDecodeTime }, codec: "adts", type: "audio" }, t.coalesceStream.numberOfTracks++, t.audioSegmentStream = new _dt(a, n), t.adtsStream.pipe(t.audioSegmentStream).pipe(t.coalesceStream));
          }), t.coalesceStream.on("data", this.trigger.bind(this, "data")), t.coalesceStream.on("done", this.trigger.bind(this, "done"));
        }, this.setupTsPipeline = function () {
          var i = {};(this.transmuxPipeline_ = i).type = "ts", i.metadataStream = new Je.MetadataStream(), i.packetStream = new Je.TransportPacketStream(), i.parseStream = new Je.TransportParseStream(), i.elementaryStream = new Je.ElementaryStream(), i.videoTimestampRolloverStream = new Je.TimestampRolloverStream("video"), i.audioTimestampRolloverStream = new Je.TimestampRolloverStream("audio"), i.timedMetadataTimestampRolloverStream = new Je.TimestampRolloverStream("timed-metadata"), i.adtsStream = new nt(), i.h264Stream = new mt(), i.captionStream = new Je.CaptionStream(), i.coalesceStream = new _pt(n, i.metadataStream), i.headOfPipeline = i.packetStream, i.packetStream.pipe(i.parseStream).pipe(i.elementaryStream), i.elementaryStream.pipe(i.videoTimestampRolloverStream).pipe(i.h264Stream), i.elementaryStream.pipe(i.audioTimestampRolloverStream).pipe(i.adtsStream), i.elementaryStream.pipe(i.timedMetadataTimestampRolloverStream).pipe(i.metadataStream).pipe(i.coalesceStream), i.h264Stream.pipe(i.captionStream).pipe(i.coalesceStream), i.elementaryStream.on("data", function (e) {
            var t;if ("metadata" === e.type) {
              for (t = e.tracks.length; t--;) {
                r || "video" !== e.tracks[t].type ? a || "audio" !== e.tracks[t].type || ((a = e.tracks[t]).timelineStartInfo.baseMediaDecodeTime = s.baseMediaDecodeTime) : (r = e.tracks[t]).timelineStartInfo.baseMediaDecodeTime = s.baseMediaDecodeTime;
              }r && !i.videoSegmentStream && (i.coalesceStream.numberOfTracks++, i.videoSegmentStream = new _ct(r, n), i.videoSegmentStream.on("timelineStartInfo", function (e) {
                a && (a.timelineStartInfo = e, i.audioSegmentStream.setEarliestDts(e.dts));
              }), i.videoSegmentStream.on("processedGopsInfo", s.trigger.bind(s, "gopInfo")), i.videoSegmentStream.on("segmentTimingInfo", s.trigger.bind(s, "videoSegmentTimingInfo")), i.videoSegmentStream.on("baseMediaDecodeTime", function (e) {
                a && i.audioSegmentStream.setVideoBaseMediaDecodeTime(e);
              }), i.h264Stream.pipe(i.videoSegmentStream).pipe(i.coalesceStream)), a && !i.audioSegmentStream && (i.coalesceStream.numberOfTracks++, i.audioSegmentStream = new _dt(a, n), i.adtsStream.pipe(i.audioSegmentStream).pipe(i.coalesceStream));
            }
          }), i.coalesceStream.on("data", this.trigger.bind(this, "data")), i.coalesceStream.on("done", this.trigger.bind(this, "done"));
        }, this.setBaseMediaDecodeTime = function (e) {
          var t = this.transmuxPipeline_;n.keepOriginalTimestamps || (this.baseMediaDecodeTime = e), a && (a.timelineStartInfo.dts = void 0, a.timelineStartInfo.pts = void 0, be(a), n.keepOriginalTimestamps || (a.timelineStartInfo.baseMediaDecodeTime = e), t.audioTimestampRolloverStream && t.audioTimestampRolloverStream.discontinuity()), r && (t.videoSegmentStream && (t.videoSegmentStream.gopCache_ = [], t.videoTimestampRolloverStream.discontinuity()), r.timelineStartInfo.dts = void 0, r.timelineStartInfo.pts = void 0, be(r), t.captionStream.reset(), n.keepOriginalTimestamps || (r.timelineStartInfo.baseMediaDecodeTime = e)), t.timedMetadataTimestampRolloverStream && t.timedMetadataTimestampRolloverStream.discontinuity();
        }, this.setAudioAppendStart = function (e) {
          a && this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(e);
        }, this.alignGopsWith = function (e) {
          r && this.transmuxPipeline_.videoSegmentStream && this.transmuxPipeline_.videoSegmentStream.alignGopsWith(e);
        }, this.push = function (e) {
          if (i) {
            var t = gt(e);t && "aac" !== this.transmuxPipeline_.type ? this.setupAacPipeline() : t || "ts" === this.transmuxPipeline_.type || this.setupTsPipeline(), i = !1;
          }this.transmuxPipeline_.headOfPipeline.push(e);
        }, this.flush = function () {
          i = !0, this.transmuxPipeline_.headOfPipeline.flush();
        }, this.resetCaptions = function () {
          this.transmuxPipeline_.captionStream && this.transmuxPipeline_.captionStream.reset();
        };
      }).prototype = new ne();var Tt,
          _St,
          kt = { Transmuxer: _ht, VideoSegmentStream: _ct, AudioSegmentStream: _dt, AUDIO_PROPERTIES: yt, VIDEO_PROPERTIES: vt, generateVideoSegmentTimingInfo: bt },
          Ct = K.parseType,
          wt = function wt(e) {
        return new Date(1e3 * e - 20828448e5);
      },
          Et = function Et(e) {
        return { isLeading: (12 & e[0]) >>> 2, dependsOn: 3 & e[0], isDependedOn: (192 & e[1]) >>> 6, hasRedundancy: (48 & e[1]) >>> 4, paddingValue: (14 & e[1]) >>> 1, isNonSyncSample: 1 & e[1], degradationPriority: e[2] << 8 | e[3] };
      },
          At = { avc1: function avc1(e) {
          var t = new DataView(e.buffer, e.byteOffset, e.byteLength);return { dataReferenceIndex: t.getUint16(6), width: t.getUint16(24), height: t.getUint16(26), horizresolution: t.getUint16(28) + t.getUint16(30) / 16, vertresolution: t.getUint16(32) + t.getUint16(34) / 16, frameCount: t.getUint16(40), depth: t.getUint16(74), config: Tt(e.subarray(78, e.byteLength)) };
        }, avcC: function avcC(e) {
          var t,
              i,
              n,
              r,
              a = new DataView(e.buffer, e.byteOffset, e.byteLength),
              s = { configurationVersion: e[0], avcProfileIndication: e[1], profileCompatibility: e[2], avcLevelIndication: e[3], lengthSizeMinusOne: 3 & e[4], sps: [], pps: [] },
              o = 31 & e[5];for (n = 6, r = 0; r < o; r++) {
            i = a.getUint16(n), n += 2, s.sps.push(new Uint8Array(e.subarray(n, n + i))), n += i;
          }for (t = e[n], n++, r = 0; r < t; r++) {
            i = a.getUint16(n), n += 2, s.pps.push(new Uint8Array(e.subarray(n, n + i))), n += i;
          }return s;
        }, btrt: function btrt(e) {
          var t = new DataView(e.buffer, e.byteOffset, e.byteLength);return { bufferSizeDB: t.getUint32(0), maxBitrate: t.getUint32(4), avgBitrate: t.getUint32(8) };
        }, esds: function esds(e) {
          return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), esId: e[6] << 8 | e[7], streamPriority: 31 & e[8], decoderConfig: { objectProfileIndication: e[11], streamType: e[12] >>> 2 & 63, bufferSize: e[13] << 16 | e[14] << 8 | e[15], maxBitrate: e[16] << 24 | e[17] << 16 | e[18] << 8 | e[19], avgBitrate: e[20] << 24 | e[21] << 16 | e[22] << 8 | e[23], decoderConfigDescriptor: { tag: e[24], length: e[25], audioObjectType: e[26] >>> 3 & 31, samplingFrequencyIndex: (7 & e[26]) << 1 | e[27] >>> 7 & 1, channelConfiguration: e[27] >>> 3 & 15 } } };
        }, ftyp: function ftyp(e) {
          for (var t = new DataView(e.buffer, e.byteOffset, e.byteLength), i = { majorBrand: Ct(e.subarray(0, 4)), minorVersion: t.getUint32(4), compatibleBrands: [] }, n = 8; n < e.byteLength;) {
            i.compatibleBrands.push(Ct(e.subarray(n, n + 4))), n += 4;
          }return i;
        }, dinf: function dinf(e) {
          return { boxes: Tt(e) };
        }, dref: function dref(e) {
          return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), dataReferences: Tt(e.subarray(8)) };
        }, hdlr: function hdlr(e) {
          var t = { version: new DataView(e.buffer, e.byteOffset, e.byteLength).getUint8(0), flags: new Uint8Array(e.subarray(1, 4)), handlerType: Ct(e.subarray(8, 12)), name: "" },
              i = 8;for (i = 24; i < e.byteLength; i++) {
            if (0 === e[i]) {
              i++;break;
            }t.name += String.fromCharCode(e[i]);
          }return t.name = decodeURIComponent(escape(t.name)), t;
        }, mdat: function mdat(e) {
          return { byteLength: e.byteLength, nals: function (e) {
              var t,
                  i,
                  n = new DataView(e.buffer, e.byteOffset, e.byteLength),
                  r = [];for (t = 0; t + 4 < e.length; t += i) {
                if (i = n.getUint32(t), t += 4, i <= 0) r.push("<span style='color:red;'>MALFORMED DATA</span>");else switch (31 & e[t]) {case 1:
                    r.push("slice_layer_without_partitioning_rbsp");break;case 5:
                    r.push("slice_layer_without_partitioning_rbsp_idr");break;case 6:
                    r.push("sei_rbsp");break;case 7:
                    r.push("seq_parameter_set_rbsp");break;case 8:
                    r.push("pic_parameter_set_rbsp");break;case 9:
                    r.push("access_unit_delimiter_rbsp");break;default:
                    r.push("UNKNOWN NAL - " + e[t] & 31);}
              }return r;
            }(e) };
        }, mdhd: function mdhd(e) {
          var t,
              i = new DataView(e.buffer, e.byteOffset, e.byteLength),
              n = 4,
              r = { version: i.getUint8(0), flags: new Uint8Array(e.subarray(1, 4)), language: "" };return 1 === r.version ? (n += 4, r.creationTime = wt(i.getUint32(n)), n += 8, r.modificationTime = wt(i.getUint32(n)), n += 4, r.timescale = i.getUint32(n), n += 8) : (r.creationTime = wt(i.getUint32(n)), n += 4, r.modificationTime = wt(i.getUint32(n)), n += 4, r.timescale = i.getUint32(n), n += 4), r.duration = i.getUint32(n), n += 4, t = i.getUint16(n), r.language += String.fromCharCode(96 + (t >> 10)), r.language += String.fromCharCode(96 + ((992 & t) >> 5)), r.language += String.fromCharCode(96 + (31 & t)), r;
        }, mdia: function mdia(e) {
          return { boxes: Tt(e) };
        }, mfhd: function mfhd(e) {
          return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), sequenceNumber: e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7] };
        }, minf: function minf(e) {
          return { boxes: Tt(e) };
        }, mp4a: function mp4a(e) {
          var t = new DataView(e.buffer, e.byteOffset, e.byteLength),
              i = { dataReferenceIndex: t.getUint16(6), channelcount: t.getUint16(16), samplesize: t.getUint16(18), samplerate: t.getUint16(24) + t.getUint16(26) / 65536 };return 28 < e.byteLength && (i.streamDescriptor = Tt(e.subarray(28))[0]), i;
        }, moof: function moof(e) {
          return { boxes: Tt(e) };
        }, moov: function moov(e) {
          return { boxes: Tt(e) };
        }, mvex: function mvex(e) {
          return { boxes: Tt(e) };
        }, mvhd: function mvhd(e) {
          var t = new DataView(e.buffer, e.byteOffset, e.byteLength),
              i = 4,
              n = { version: t.getUint8(0), flags: new Uint8Array(e.subarray(1, 4)) };return 1 === n.version ? (i += 4, n.creationTime = wt(t.getUint32(i)), i += 8, n.modificationTime = wt(t.getUint32(i)), i += 4, n.timescale = t.getUint32(i), i += 8) : (n.creationTime = wt(t.getUint32(i)), i += 4, n.modificationTime = wt(t.getUint32(i)), i += 4, n.timescale = t.getUint32(i), i += 4), n.duration = t.getUint32(i), i += 4, n.rate = t.getUint16(i) + t.getUint16(i + 2) / 16, i += 4, n.volume = t.getUint8(i) + t.getUint8(i + 1) / 8, i += 2, i += 2, i += 8, n.matrix = new Uint32Array(e.subarray(i, i + 36)), i += 36, i += 24, n.nextTrackId = t.getUint32(i), n;
        }, pdin: function pdin(e) {
          var t = new DataView(e.buffer, e.byteOffset, e.byteLength);return { version: t.getUint8(0), flags: new Uint8Array(e.subarray(1, 4)), rate: t.getUint32(4), initialDelay: t.getUint32(8) };
        }, sdtp: function sdtp(e) {
          var t,
              i = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), samples: [] };for (t = 4; t < e.byteLength; t++) {
            i.samples.push({ dependsOn: (48 & e[t]) >> 4, isDependedOn: (12 & e[t]) >> 2, hasRedundancy: 3 & e[t] });
          }return i;
        }, sidx: function sidx(e) {
          var t,
              i = new DataView(e.buffer, e.byteOffset, e.byteLength),
              n = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), references: [], referenceId: i.getUint32(4), timescale: i.getUint32(8), earliestPresentationTime: i.getUint32(12), firstOffset: i.getUint32(16) },
              r = i.getUint16(22);for (t = 24; r; t += 12, r--) {
            n.references.push({ referenceType: (128 & e[t]) >>> 7, referencedSize: 2147483647 & i.getUint32(t), subsegmentDuration: i.getUint32(t + 4), startsWithSap: !!(128 & e[t + 8]), sapType: (112 & e[t + 8]) >>> 4, sapDeltaTime: 268435455 & i.getUint32(t + 8) });
          }return n;
        }, smhd: function smhd(e) {
          return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), balance: e[4] + e[5] / 256 };
        }, stbl: function stbl(e) {
          return { boxes: Tt(e) };
        }, stco: function stco(e) {
          var t,
              i = new DataView(e.buffer, e.byteOffset, e.byteLength),
              n = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), chunkOffsets: [] },
              r = i.getUint32(4);for (t = 8; r; t += 4, r--) {
            n.chunkOffsets.push(i.getUint32(t));
          }return n;
        }, stsc: function stsc(e) {
          var t,
              i = new DataView(e.buffer, e.byteOffset, e.byteLength),
              n = i.getUint32(4),
              r = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), sampleToChunks: [] };for (t = 8; n; t += 12, n--) {
            r.sampleToChunks.push({ firstChunk: i.getUint32(t), samplesPerChunk: i.getUint32(t + 4), sampleDescriptionIndex: i.getUint32(t + 8) });
          }return r;
        }, stsd: function stsd(e) {
          return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), sampleDescriptions: Tt(e.subarray(8)) };
        }, stsz: function stsz(e) {
          var t,
              i = new DataView(e.buffer, e.byteOffset, e.byteLength),
              n = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), sampleSize: i.getUint32(4), entries: [] };for (t = 12; t < e.byteLength; t += 4) {
            n.entries.push(i.getUint32(t));
          }return n;
        }, stts: function stts(e) {
          var t,
              i = new DataView(e.buffer, e.byteOffset, e.byteLength),
              n = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), timeToSamples: [] },
              r = i.getUint32(4);for (t = 8; r; t += 8, r--) {
            n.timeToSamples.push({ sampleCount: i.getUint32(t), sampleDelta: i.getUint32(t + 4) });
          }return n;
        }, styp: function styp(e) {
          return At.ftyp(e);
        }, tfdt: function tfdt(e) {
          var t = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), baseMediaDecodeTime: e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7] };return 1 === t.version && (t.baseMediaDecodeTime *= Math.pow(2, 32), t.baseMediaDecodeTime += e[8] << 24 | e[9] << 16 | e[10] << 8 | e[11]), t;
        }, tfhd: function tfhd(e) {
          var t,
              i = new DataView(e.buffer, e.byteOffset, e.byteLength),
              n = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), trackId: i.getUint32(4) },
              r = 1 & n.flags[2],
              a = 2 & n.flags[2],
              s = 8 & n.flags[2],
              o = 16 & n.flags[2],
              u = 32 & n.flags[2],
              l = 65536 & n.flags[0],
              c = 131072 & n.flags[0];return t = 8, r && (t += 4, n.baseDataOffset = i.getUint32(12), t += 4), a && (n.sampleDescriptionIndex = i.getUint32(t), t += 4), s && (n.defaultSampleDuration = i.getUint32(t), t += 4), o && (n.defaultSampleSize = i.getUint32(t), t += 4), u && (n.defaultSampleFlags = i.getUint32(t)), l && (n.durationIsEmpty = !0), !r && c && (n.baseDataOffsetIsMoof = !0), n;
        }, tkhd: function tkhd(e) {
          var t = new DataView(e.buffer, e.byteOffset, e.byteLength),
              i = 4,
              n = { version: t.getUint8(0), flags: new Uint8Array(e.subarray(1, 4)) };return 1 === n.version ? (i += 4, n.creationTime = wt(t.getUint32(i)), i += 8, n.modificationTime = wt(t.getUint32(i)), i += 4, n.trackId = t.getUint32(i), i += 4, i += 8) : (n.creationTime = wt(t.getUint32(i)), i += 4, n.modificationTime = wt(t.getUint32(i)), i += 4, n.trackId = t.getUint32(i), i += 4, i += 4), n.duration = t.getUint32(i), i += 4, i += 8, n.layer = t.getUint16(i), i += 2, n.alternateGroup = t.getUint16(i), i += 2, n.volume = t.getUint8(i) + t.getUint8(i + 1) / 8, i += 2, i += 2, n.matrix = new Uint32Array(e.subarray(i, i + 36)), i += 36, n.width = t.getUint16(i) + t.getUint16(i + 2) / 16, i += 4, n.height = t.getUint16(i) + t.getUint16(i + 2) / 16, n;
        }, traf: function traf(e) {
          return { boxes: Tt(e) };
        }, trak: function trak(e) {
          return { boxes: Tt(e) };
        }, trex: function trex(e) {
          var t = new DataView(e.buffer, e.byteOffset, e.byteLength);return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), trackId: t.getUint32(4), defaultSampleDescriptionIndex: t.getUint32(8), defaultSampleDuration: t.getUint32(12), defaultSampleSize: t.getUint32(16), sampleDependsOn: 3 & e[20], sampleIsDependedOn: (192 & e[21]) >> 6, sampleHasRedundancy: (48 & e[21]) >> 4, samplePaddingValue: (14 & e[21]) >> 1, sampleIsDifferenceSample: !!(1 & e[21]), sampleDegradationPriority: t.getUint16(22) };
        }, trun: function trun(e) {
          var t,
              i = { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), samples: [] },
              n = new DataView(e.buffer, e.byteOffset, e.byteLength),
              r = 1 & i.flags[2],
              a = 4 & i.flags[2],
              s = 1 & i.flags[1],
              o = 2 & i.flags[1],
              u = 4 & i.flags[1],
              l = 8 & i.flags[1],
              c = n.getUint32(4),
              d = 8;for (r && (i.dataOffset = n.getInt32(d), d += 4), a && c && (t = { flags: Et(e.subarray(d, d + 4)) }, d += 4, s && (t.duration = n.getUint32(d), d += 4), o && (t.size = n.getUint32(d), d += 4), l && (t.compositionTimeOffset = n.getUint32(d), d += 4), i.samples.push(t), c--); c--;) {
            t = {}, s && (t.duration = n.getUint32(d), d += 4), o && (t.size = n.getUint32(d), d += 4), u && (t.flags = Et(e.subarray(d, d + 4)), d += 4), l && (t.compositionTimeOffset = n.getUint32(d), d += 4), i.samples.push(t);
          }return i;
        }, "url ": function url(e) {
          return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)) };
        }, vmhd: function vmhd(e) {
          var t = new DataView(e.buffer, e.byteOffset, e.byteLength);return { version: e[0], flags: new Uint8Array(e.subarray(1, 4)), graphicsmode: t.getUint16(4), opcolor: new Uint16Array([t.getUint16(6), t.getUint16(8), t.getUint16(10)]) };
        } },
          Lt = { inspect: Tt = function Tt(e) {
          for (var t, i, n, r, a, s = 0, o = [], u = new ArrayBuffer(e.length), l = new Uint8Array(u), c = 0; c < e.length; ++c) {
            l[c] = e[c];
          }for (t = new DataView(u); s < e.byteLength;) {
            i = t.getUint32(s), n = Ct(e.subarray(s + 4, s + 8)), r = 1 < i ? s + i : e.byteLength, (a = (At[n] || function (e) {
              return { data: e };
            })(e.subarray(s + 8, r))).size = i, a.type = n, o.push(a), s = r;
          }return o;
        }, textify: _St = function St(e, t) {
          var a;return t = t || 0, a = new Array(2 * t + 1).join(" "), e.map(function (r, e) {
            return a + r.type + "\n" + Object.keys(r).filter(function (e) {
              return "type" !== e && "boxes" !== e;
            }).map(function (e) {
              var t = a + "  " + e + ": ",
                  i = r[e];if (i instanceof Uint8Array || i instanceof Uint32Array) {
                var n = Array.prototype.slice.call(new Uint8Array(i.buffer, i.byteOffset, i.byteLength)).map(function (e) {
                  return " " + ("00" + e.toString(16)).slice(-2);
                }).join("").match(/.{1,24}/g);return n ? 1 === n.length ? t + "<" + n.join("").slice(1) + ">" : t + "<\n" + n.map(function (e) {
                  return a + "  " + e;
                }).join("\n") + "\n" + a + "  >" : t + "<>";
              }return t + JSON.stringify(i, null, 2).split("\n").map(function (e, t) {
                return 0 === t ? e : a + "  " + e;
              }).join("\n");
            }).join("\n") + (r.boxes ? "\n" + _St(r.boxes, t + 1) : "");
          }).join("\n");
        }, parseTfdt: At.tfdt, parseHdlr: At.hdlr, parseTfhd: At.tfhd, parseTrun: At.trun, parseSidx: At.sidx },
          Pt = Ee,
          Ot = xe.CaptionStream,
          It = function It(e, t) {
        for (var i = e, n = 0; n < t.length; n++) {
          var r = t[n];if (i < r.size) return r;i -= r.size;
        }return null;
      },
          Ut = function Ut(e, y) {
        var n = K.findBox(e, ["moof", "traf"]),
            t = K.findBox(e, ["mdat"]),
            v = {},
            r = [];return t.forEach(function (e, t) {
          var i = n[t];r.push({ mdat: e, traf: i });
        }), r.forEach(function (e) {
          var t,
              i,
              n,
              r,
              a,
              s,
              o,
              u,
              l = e.mdat,
              c = e.traf,
              d = K.findBox(c, ["tfhd"]),
              h = Lt.parseTfhd(d[0]),
              p = h.trackId,
              f = K.findBox(c, ["tfdt"]),
              m = 0 < f.length ? Lt.parseTfdt(f[0]).baseMediaDecodeTime : 0,
              g = K.findBox(c, ["trun"]);y === p && 0 < g.length && (i = g, r = m, a = (n = h).defaultSampleDuration || 0, s = n.defaultSampleSize || 0, o = n.trackId, u = [], i.forEach(function (e) {
            var t = Lt.parseTrun(e).samples;t.forEach(function (e) {
              void 0 === e.duration && (e.duration = a), void 0 === e.size && (e.size = s), e.trackId = o, e.dts = r, void 0 === e.compositionTimeOffset && (e.compositionTimeOffset = 0), e.pts = r + e.compositionTimeOffset, r += e.duration;
            }), u = u.concat(t);
          }), t = function (e, t, i) {
            var n,
                r,
                a,
                s,
                o = new DataView(e.buffer, e.byteOffset, e.byteLength),
                u = [];for (r = 0; r + 4 < e.length; r += a) {
              if (a = o.getUint32(r), r += 4, !(a <= 0)) switch (31 & e[r]) {case 6:
                  var l = e.subarray(r + 1, r + 1 + a),
                      c = It(r, t);n = { nalUnitType: "sei_rbsp", size: a, data: l, escapedRBSP: Pt(l), trackId: i }, c ? (n.pts = c.pts, n.dts = c.dts, s = c) : (n.pts = s.pts, n.dts = s.dts), u.push(n);}
            }return u;
          }(l, u, p), v[p] || (v[p] = []), v[p] = v[p].concat(t));
        }), v;
      },
          Dt = { generator: G, probe: K, Transmuxer: kt.Transmuxer, AudioSegmentStream: kt.AudioSegmentStream, VideoSegmentStream: kt.VideoSegmentStream, CaptionParser: function CaptionParser() {
          var t,
              u,
              l,
              c,
              d,
              e = !1;this.isInitialized = function () {
            return e;
          }, this.init = function () {
            t = new Ot(), e = !0, t.on("data", function (e) {
              e.startTime = e.startPts / c, e.endTime = e.endPts / c, d.captions.push(e), d.captionStreams[e.stream] = !0;
            });
          }, this.isNewInit = function (e, t) {
            return !(e && 0 === e.length || t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && 0 === Object.keys(t).length || l === e[0] && c === t[l]);
          }, this.parse = function (e, t, i) {
            var n, r, a, s;if (!this.isInitialized()) return null;if (!t || !i) return null;if (this.isNewInit(t, i)) l = t[0], c = i[l];else if (!l || !c) return u.push(e), null;for (; 0 < u.length;) {
              var o = u.shift();this.parse(o, t, i);
            }return r = e, s = c, null !== (n = (a = l) ? { seiNals: Ut(r, a)[a], timescale: s } : null) && n.seiNals ? (this.pushNals(n.seiNals), this.flushStream(), d) : null;
          }, this.pushNals = function (e) {
            if (!this.isInitialized() || !e || 0 === e.length) return null;e.forEach(function (e) {
              t.push(e);
            });
          }, this.flushStream = function () {
            if (!this.isInitialized()) return null;t.flush();
          }, this.clearParsedCaptions = function () {
            d.captions = [], d.captionStreams = {};
          }, this.resetCaptionStream = function () {
            if (!this.isInitialized()) return null;t.reset();
          }, this.clearAllCaptions = function () {
            this.clearParsedCaptions(), this.resetCaptionStream();
          }, this.reset = function () {
            u = [], c = l = null, d ? this.clearParsedCaptions() : d = { captions: [], captionStreams: {} }, this.resetCaptionStream();
          }, this.reset();
        } },
          xt = function () {
        function n(e, t) {
          for (var i = 0; i < t.length; i++) {
            var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
          }
        }return function (e, t, i) {
          return t && n(e.prototype, t), i && n(e, i), e;
        };
      }(),
          Rt = function () {
        function i(e, t) {
          !function (e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
          }(this, i), this.options = t || {}, this.self = e, this.init();
        }return xt(i, [{ key: "init", value: function value() {
            var n, e;this.transmuxer && this.transmuxer.dispose(), this.transmuxer = new Dt.Transmuxer(this.options), n = this.self, (e = this.transmuxer).on("data", function (e) {
              var t = e.initSegment;e.initSegment = { data: t.buffer, byteOffset: t.byteOffset, byteLength: t.byteLength };var i = e.data;e.data = i.buffer, n.postMessage({ action: "data", segment: e, byteOffset: i.byteOffset, byteLength: i.byteLength }, [e.data]);
            }), e.captionStream && e.captionStream.on("data", function (e) {
              n.postMessage({ action: "caption", data: e });
            }), e.on("done", function (e) {
              n.postMessage({ action: "done" });
            }), e.on("gopInfo", function (e) {
              n.postMessage({ action: "gopInfo", gopInfo: e });
            }), e.on("videoSegmentTimingInfo", function (e) {
              n.postMessage({ action: "videoSegmentTimingInfo", videoSegmentTimingInfo: e });
            });
          } }, { key: "push", value: function value(e) {
            var t = new Uint8Array(e.data, e.byteOffset, e.byteLength);this.transmuxer.push(t);
          } }, { key: "reset", value: function value() {
            this.init();
          } }, { key: "setTimestampOffset", value: function value(e) {
            var t = e.timestampOffset || 0;this.transmuxer.setBaseMediaDecodeTime(Math.round(9e4 * t));
          } }, { key: "setAudioAppendStart", value: function value(e) {
            this.transmuxer.setAudioAppendStart(Math.ceil(9e4 * e.appendStart));
          } }, { key: "flush", value: function value(e) {
            this.transmuxer.flush();
          } }, { key: "resetCaptions", value: function value() {
            this.transmuxer.resetCaptions();
          } }, { key: "alignGopsWith", value: function value(e) {
            this.transmuxer.alignGopsWith(e.gopsToAlignWith.slice());
          } }]), i;
      }();new function (t) {
        t.onmessage = function (e) {
          "init" === e.data.action && e.data.options ? this.messageHandlers = new Rt(t, e.data.options) : (this.messageHandlers || (this.messageHandlers = new Rt(t)), e.data && e.data.action && "init" !== e.data.action && this.messageHandlers[e.data.action] && this.messageHandlers[e.data.action](e.data));
        };
      }(Mt);
    }();
  }),
      Yl = { videoCodec: "avc1", videoObjectTypeIndicator: ".4d400d", audioProfile: "2" },
      $l = function $l(e) {
    return e.map(function (e) {
      return e.replace(/avc1\.(\d+)\.(\d+)/i, function (e, t, i) {
        return "avc1." + ("00" + Number(t).toString(16)).slice(-2) + "00" + ("00" + Number(i).toString(16)).slice(-2);
      });
    });
  },
      Ql = function Ql() {
    var e,
        t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "",
        i = { codecCount: 0 };return i.codecCount = t.split(",").length, i.codecCount = i.codecCount || 2, (e = /(^|\s|,)+(avc[13])([^ ,]*)/i.exec(t)) && (i.videoCodec = e[2], i.videoObjectTypeIndicator = e[3]), i.audioProfile = /(^|\s|,)+mp4a.[0-9A-Fa-f]+\.([0-9A-Fa-f]+)/i.exec(t), i.audioProfile = i.audioProfile && i.audioProfile[2], i;
  },
      Jl = function Jl(e, t, i) {
    return e + "/" + t + '; codecs="' + i.filter(function (e) {
      return !!e;
    }).join(", ") + '"';
  },
      Zl = function Zl(e, t) {
    var i,
        n,
        r = (i = t).segments && i.segments.length && i.segments[0].map ? "mp4" : "mp2t",
        a = (n = t.attributes || {}).CODECS ? Ql(n.CODECS) : Yl,
        s = t.attributes || {},
        o = !0,
        u = !1;if (!t) return [];if (e.mediaGroups.AUDIO && s.AUDIO) {
      var l = e.mediaGroups.AUDIO[s.AUDIO];if (l) for (var c in o = !(u = !0), l) {
        if (!l[c].uri && !l[c].playlists) {
          o = !0;break;
        }
      }
    }u && !a.audioProfile && (o || (a.audioProfile = function (e, t) {
      if (!e.mediaGroups.AUDIO || !t) return null;var i = e.mediaGroups.AUDIO[t];if (!i) return null;for (var n in i) {
        var r = i[n];if (r.default && r.playlists) return Ql(r.playlists[0].attributes.CODECS).audioProfile;
      }return null;
    }(e, s.AUDIO)), a.audioProfile || (jr.log.warn("Multiple audio tracks present but no audio codec string is specified. Attempting to use the default audio codec (mp4a.40.2)"), a.audioProfile = Yl.audioProfile));var d = {};a.videoCodec && (d.video = "" + a.videoCodec + a.videoObjectTypeIndicator), a.audioProfile && (d.audio = "mp4a.40." + a.audioProfile);var h = Jl("audio", r, [d.audio]),
        p = Jl("video", r, [d.video]),
        f = Jl("video", r, [d.video, d.audio]);return u ? !o && d.video ? [p, h] : o || d.video ? [f, h] : [h, h] : d.video ? [f] : [h];
  },
      ec = function ec(e) {
    return (/mp4a\.\d+.\d+/i.test(e)
    );
  },
      tc = function tc(e) {
    return (/avc1\.[\da-f]+/i.test(e)
    );
  },
      ic = function (e) {
    function r(e, t) {
      Hu(this, r);var i = zu(this, (r.__proto__ || Object.getPrototypeOf(r)).call(this, jr.EventTarget));i.timestampOffset_ = 0, i.pendingBuffers_ = [], i.bufferUpdating_ = !1, i.mediaSource_ = e, i.codecs_ = t, i.audioCodec_ = null, i.videoCodec_ = null, i.audioDisabled_ = !1, i.appendAudioInitSegment_ = !0, i.gopBuffer_ = [], i.timeMapping_ = 0, i.safeAppend_ = 11 <= jr.browser.IE_VERSION;var n = { remux: !1, alignGopsAtEnd: i.safeAppend_ };return i.codecs_.forEach(function (e) {
        ec(e) ? i.audioCodec_ = e : tc(e) && (i.videoCodec_ = e);
      }), i.transmuxer_ = new Kl(), i.transmuxer_.postMessage({ action: "init", options: n }), i.transmuxer_.onmessage = function (e) {
        return "data" === e.data.action ? i.data_(e) : "done" === e.data.action ? i.done_(e) : "gopInfo" === e.data.action ? i.appendGopInfo_(e) : "videoSegmentTimingInfo" === e.data.action ? i.videoSegmentTimingInfo_(e.data.videoSegmentTimingInfo) : void 0;
      }, Object.defineProperty(i, "timestampOffset", { get: function get() {
          return this.timestampOffset_;
        }, set: function set(e) {
          "number" == typeof e && 0 <= e && (this.timestampOffset_ = e, this.appendAudioInitSegment_ = !0, this.gopBuffer_.length = 0, this.timeMapping_ = 0, this.transmuxer_.postMessage({ action: "setTimestampOffset", timestampOffset: e }));
        } }), Object.defineProperty(i, "appendWindowStart", { get: function get() {
          return (this.videoBuffer_ || this.audioBuffer_).appendWindowStart;
        }, set: function set(e) {
          this.videoBuffer_ && (this.videoBuffer_.appendWindowStart = e), this.audioBuffer_ && (this.audioBuffer_.appendWindowStart = e);
        } }), Object.defineProperty(i, "updating", { get: function get() {
          return !!(this.bufferUpdating_ || !this.audioDisabled_ && this.audioBuffer_ && this.audioBuffer_.updating || this.videoBuffer_ && this.videoBuffer_.updating);
        } }), Object.defineProperty(i, "buffered", { get: function get() {
          return function (e, t, i) {
            var n = null,
                r = null,
                a = 0,
                s = [],
                o = [];if (!e && !t) return jr.createTimeRange();if (!e) return t.buffered;if (!t) return e.buffered;if (i) return e.buffered;if (0 === e.buffered.length && 0 === t.buffered.length) return jr.createTimeRange();for (var u = e.buffered, l = t.buffered, c = u.length; c--;) {
              s.push({ time: u.start(c), type: "start" }), s.push({ time: u.end(c), type: "end" });
            }for (c = l.length; c--;) {
              s.push({ time: l.start(c), type: "start" }), s.push({ time: l.end(c), type: "end" });
            }for (s.sort(function (e, t) {
              return e.time - t.time;
            }), c = 0; c < s.length; c++) {
              "start" === s[c].type ? 2 == ++a && (n = s[c].time) : "end" === s[c].type && 1 == --a && (r = s[c].time), null !== n && null !== r && (o.push([n, r]), r = n = null);
            }return jr.createTimeRanges(o);
          }(this.videoBuffer_, this.audioBuffer_, this.audioDisabled_);
        } }), i;
    }return qu(r, jr.EventTarget), Vu(r, [{ key: "data_", value: function value(e) {
        var t = e.data.segment;t.data = new Uint8Array(t.data, e.data.byteOffset, e.data.byteLength), t.initSegment = new Uint8Array(t.initSegment.data, t.initSegment.byteOffset, t.initSegment.byteLength), function (e, t, i) {
          var n = t.player_;if (i.captions && i.captions.length) for (var r in e.inbandTextTracks_ || (e.inbandTextTracks_ = {}), i.captionStreams) {
            if (!e.inbandTextTracks_[r]) {
              n.tech_.trigger({ type: "usage", name: "hls-608" });var a = n.textTracks().getTrackById(r);e.inbandTextTracks_[r] = a || n.addRemoteTextTrack({ kind: "captions", id: r, label: r }, !1).track;
            }
          }i.metadata && i.metadata.length && !e.metadataTrack_ && (e.metadataTrack_ = n.addRemoteTextTrack({ kind: "metadata", label: "Timed Metadata" }, !1).track, e.metadataTrack_.inBandMetadataTrackDispatchType = i.metadata.dispatchType);
        }(this, this.mediaSource_, t), this.pendingBuffers_.push(t);
      } }, { key: "done_", value: function value(e) {
        "closed" !== this.mediaSource_.readyState ? this.processPendingSegments_() : this.pendingBuffers_.length = 0;
      } }, { key: "videoSegmentTimingInfo_", value: function value(e) {
        var t = { start: { decode: e.start.dts / 9e4, presentation: e.start.pts / 9e4 }, end: { decode: e.end.dts / 9e4, presentation: e.end.pts / 9e4 }, baseMediaDecodeTime: e.baseMediaDecodeTime / 9e4 };e.prependedContentDuration && (t.prependedContentDuration = e.prependedContentDuration / 9e4), this.trigger({ type: "videoSegmentTimingInfo", videoSegmentTimingInfo: t });
      } }, { key: "createRealSourceBuffers_", value: function value() {
        var n = this,
            r = ["audio", "video"];r.forEach(function (t) {
          if (n[t + "Codec_"] && !n[t + "Buffer_"]) {
            var i = null;if (n.mediaSource_[t + "Buffer_"]) (i = n.mediaSource_[t + "Buffer_"]).updating = !1;else {
              var e = t + '/mp4;codecs="' + n[t + "Codec_"] + '"';i = function (e, t) {
                var i = e.addSourceBuffer(t),
                    n = Object.create(null);n.updating = !1, n.realBuffer_ = i;var r = function r(t) {
                  "function" == typeof i[t] ? n[t] = function () {
                    return i[t].apply(i, arguments);
                  } : "undefined" == typeof n[t] && Object.defineProperty(n, t, { get: function get() {
                      return i[t];
                    }, set: function set(e) {
                      return i[t] = e;
                    } });
                };for (var a in i) {
                  r(a);
                }return n;
              }(n.mediaSource_.nativeMediaSource_, e), n.mediaSource_[t + "Buffer_"] = i;
            }n[t + "Buffer_"] = i, ["update", "updatestart", "updateend"].forEach(function (e) {
              i.addEventListener(e, function () {
                if ("audio" !== t || !n.audioDisabled_) return "updateend" === e && (n[t + "Buffer_"].updating = !1), r.every(function (e) {
                  return !("audio" !== e || !n.audioDisabled_) || t === e || !n[e + "Buffer_"] || !n[e + "Buffer_"].updating;
                }) ? n.trigger(e) : void 0;
              });
            });
          }
        });
      } }, { key: "appendBuffer", value: function value(e) {
        if (this.bufferUpdating_ = !0, this.audioBuffer_ && this.audioBuffer_.buffered.length) {
          var t = this.audioBuffer_.buffered;this.transmuxer_.postMessage({ action: "setAudioAppendStart", appendStart: t.end(t.length - 1) });
        }this.videoBuffer_ && this.transmuxer_.postMessage({ action: "alignGopsWith", gopsToAlignWith: function (e, t, i) {
            if ("undefined" == typeof t || null === t || !e.length) return [];var n = Math.ceil(9e4 * (t - i + 3)),
                r = void 0;for (r = 0; r < e.length && !(e[r].pts > n); r++) {}return e.slice(r);
          }(this.gopBuffer_, this.mediaSource_.player_ ? this.mediaSource_.player_.currentTime() : null, this.timeMapping_) }), this.transmuxer_.postMessage({ action: "push", data: e.buffer, byteOffset: e.byteOffset, byteLength: e.byteLength }, [e.buffer]), this.transmuxer_.postMessage({ action: "flush" });
      } }, { key: "appendGopInfo_", value: function value(e) {
        this.gopBuffer_ = function (e, t, i) {
          if (!t.length) return e;if (i) return t.slice();for (var n = t[0].pts, r = 0; r < e.length && !(e[r].pts >= n); r++) {}return e.slice(0, r).concat(t);
        }(this.gopBuffer_, e.data.gopInfo, this.safeAppend_);
      } }, { key: "remove", value: function value(e, t) {
        if (this.videoBuffer_ && (this.videoBuffer_.updating = !0, this.videoBuffer_.remove(e, t), this.gopBuffer_ = function (e, t, i, n) {
          for (var r = Math.ceil(9e4 * (t - n)), a = Math.ceil(9e4 * (i - n)), s = e.slice(), o = e.length; o-- && !(e[o].pts <= a);) {}if (-1 === o) return s;for (var u = o + 1; u-- && !(e[u].pts <= r);) {}return u = Math.max(u, 0), s.splice(u, o - u + 1), s;
        }(this.gopBuffer_, e, t, this.timeMapping_)), !this.audioDisabled_ && this.audioBuffer_ && (this.audioBuffer_.updating = !0, this.audioBuffer_.remove(e, t)), xl(e, t, this.metadataTrack_), this.inbandTextTracks_) for (var i in this.inbandTextTracks_) {
          xl(e, t, this.inbandTextTracks_[i]);
        }
      } }, { key: "processPendingSegments_", value: function value() {
        var e = { video: { segments: [], bytes: 0 }, audio: { segments: [], bytes: 0 }, captions: [], metadata: [] };e = this.pendingBuffers_.reduce(function (e, t) {
          var i = t.type,
              n = t.data,
              r = t.initSegment;return e[i].segments.push(n), e[i].bytes += n.byteLength, e[i].initSegment = r, t.captions && (e.captions = e.captions.concat(t.captions)), t.info && (e[i].info = t.info), t.metadata && (e.metadata = e.metadata.concat(t.metadata)), e;
        }, e), this.videoBuffer_ || this.audioBuffer_ || (0 === e.video.bytes && (this.videoCodec_ = null), 0 === e.audio.bytes && (this.audioCodec_ = null), this.createRealSourceBuffers_()), e.audio.info && this.mediaSource_.trigger({ type: "audioinfo", info: e.audio.info }), e.video.info && this.mediaSource_.trigger({ type: "videoinfo", info: e.video.info }), this.appendAudioInitSegment_ && (!this.audioDisabled_ && this.audioBuffer_ && (e.audio.segments.unshift(e.audio.initSegment), e.audio.bytes += e.audio.initSegment.byteLength), this.appendAudioInitSegment_ = !1);var t = !1;this.videoBuffer_ && e.video.bytes ? (e.video.segments.unshift(e.video.initSegment), e.video.bytes += e.video.initSegment.byteLength, this.concatAndAppendSegments_(e.video, this.videoBuffer_)) : !this.videoBuffer_ || !this.audioDisabled_ && this.audioBuffer_ || (t = !0), Ml(this, e.captions, e.metadata), !this.audioDisabled_ && this.audioBuffer_ && this.concatAndAppendSegments_(e.audio, this.audioBuffer_), this.pendingBuffers_.length = 0, t && this.trigger("updateend"), this.bufferUpdating_ = !1;
      } }, { key: "concatAndAppendSegments_", value: function value(e, t) {
        var i = 0,
            n = void 0;if (e.bytes) {
          n = new Uint8Array(e.bytes), e.segments.forEach(function (e) {
            n.set(e, i), i += e.byteLength;
          });try {
            t.updating = !0, t.appendBuffer(n);
          } catch (e) {
            this.mediaSource_.player_ && this.mediaSource_.player_.error({ code: -3, type: "APPEND_BUFFER_ERR", message: e.message, originalError: e });
          }
        }
      } }, { key: "abort", value: function value() {
        this.videoBuffer_ && this.videoBuffer_.abort(), !this.audioDisabled_ && this.audioBuffer_ && this.audioBuffer_.abort(), this.transmuxer_ && this.transmuxer_.postMessage({ action: "reset" }), this.pendingBuffers_.length = 0, this.bufferUpdating_ = !1;
      } }]), r;
  }(),
      nc = function (e) {
    function t() {
      Hu(this, t);var a = zu(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this)),
          e = void 0;for (e in a.nativeMediaSource_ = new v.MediaSource(), a.nativeMediaSource_) {
        e in t.prototype || "function" != typeof a.nativeMediaSource_[e] || (a[e] = a.nativeMediaSource_[e].bind(a.nativeMediaSource_));
      }return a.duration_ = NaN, Object.defineProperty(a, "duration", { get: function get() {
          return this.duration_ === 1 / 0 ? this.duration_ : this.nativeMediaSource_.duration;
        }, set: function set(e) {
          (this.duration_ = e) === 1 / 0 || (this.nativeMediaSource_.duration = e);
        } }), Object.defineProperty(a, "seekable", { get: function get() {
          return this.duration_ === 1 / 0 ? jr.createTimeRanges([[0, this.nativeMediaSource_.duration]]) : this.nativeMediaSource_.seekable;
        } }), Object.defineProperty(a, "readyState", { get: function get() {
          return this.nativeMediaSource_.readyState;
        } }), Object.defineProperty(a, "activeSourceBuffers", { get: function get() {
          return this.activeSourceBuffers_;
        } }), a.sourceBuffers = [], a.activeSourceBuffers_ = [], a.updateActiveSourceBuffers_ = function () {
        if (a.activeSourceBuffers_.length = 0, 1 === a.sourceBuffers.length) {
          var e = a.sourceBuffers[0];return e.appendAudioInitSegment_ = !0, e.audioDisabled_ = !e.audioCodec_, void a.activeSourceBuffers_.push(e);
        }for (var i = !1, n = !0, t = 0; t < a.player_.audioTracks().length; t++) {
          var r = a.player_.audioTracks()[t];if (r.enabled && "main" !== r.kind) {
            n = !(i = !0);break;
          }
        }a.sourceBuffers.forEach(function (e, t) {
          if (e.appendAudioInitSegment_ = !0, e.videoCodec_ && e.audioCodec_) e.audioDisabled_ = i;else if (e.videoCodec_ && !e.audioCodec_) e.audioDisabled_ = !0, n = !1;else if (!e.videoCodec_ && e.audioCodec_ && (e.audioDisabled_ = t ? n : !n, e.audioDisabled_)) return;a.activeSourceBuffers_.push(e);
        });
      }, a.onPlayerMediachange_ = function () {
        a.sourceBuffers.forEach(function (e) {
          e.appendAudioInitSegment_ = !0;
        });
      }, a.onHlsReset_ = function () {
        a.sourceBuffers.forEach(function (e) {
          e.transmuxer_ && e.transmuxer_.postMessage({ action: "resetCaptions" });
        });
      }, a.onHlsSegmentTimeMapping_ = function (t) {
        a.sourceBuffers.forEach(function (e) {
          return e.timeMapping_ = t.mapping;
        });
      }, ["sourceopen", "sourceclose", "sourceended"].forEach(function (e) {
        this.nativeMediaSource_.addEventListener(e, this.trigger.bind(this));
      }, a), a.on("sourceopen", function (e) {
        var t = d.querySelector('[src="' + a.url_ + '"]');t && (a.player_ = jr(t.parentNode), a.player_ && (a.player_.tech_.on("hls-reset", a.onHlsReset_), a.player_.tech_.on("hls-segment-time-mapping", a.onHlsSegmentTimeMapping_), a.player_.audioTracks && a.player_.audioTracks() && (a.player_.audioTracks().on("change", a.updateActiveSourceBuffers_), a.player_.audioTracks().on("addtrack", a.updateActiveSourceBuffers_), a.player_.audioTracks().on("removetrack", a.updateActiveSourceBuffers_)), a.player_.on("mediachange", a.onPlayerMediachange_)));
      }), a.on("sourceended", function (e) {
        for (var t = Rl(a.duration), i = 0; i < a.sourceBuffers.length; i++) {
          var n = a.sourceBuffers[i],
              r = n.metadataTrack_ && n.metadataTrack_.cues;r && r.length && (r[r.length - 1].endTime = t);
        }
      }), a.on("sourceclose", function (e) {
        this.sourceBuffers.forEach(function (e) {
          e.transmuxer_ && e.transmuxer_.terminate();
        }), this.sourceBuffers.length = 0, this.player_ && (this.player_.audioTracks && this.player_.audioTracks() && (this.player_.audioTracks().off("change", this.updateActiveSourceBuffers_), this.player_.audioTracks().off("addtrack", this.updateActiveSourceBuffers_), this.player_.audioTracks().off("removetrack", this.updateActiveSourceBuffers_)), this.player_.el_ && this.player_.off("mediachange", this.onPlayerMediachange_), this.player_.tech_ && this.player_.tech_.el_ && (this.player_.tech_.off("hls-reset", this.onHlsReset_), this.player_.tech_.off("hls-segment-time-mapping", this.onHlsSegmentTimeMapping_)));
      }), a;
    }return qu(t, jr.EventTarget), Vu(t, [{ key: "addSeekableRange_", value: function value(e, t) {
        var i = void 0;if (this.duration !== 1 / 0) throw (i = new Error("MediaSource.addSeekableRange() can only be invoked when the duration is Infinity")).name = "InvalidStateError", i.code = 11, i;(t > this.nativeMediaSource_.duration || isNaN(this.nativeMediaSource_.duration)) && (this.nativeMediaSource_.duration = t);
      } }, { key: "addSourceBuffer", value: function value(e) {
        var r,
            t,
            i = void 0,
            n = (r = { type: "", parameters: {} }, t = e.trim().split(";"), r.type = t.shift().trim(), t.forEach(function (e) {
          var t = e.trim().split("=");if (1 < t.length) {
            var i = t[0].replace(/"/g, "").trim(),
                n = t[1].replace(/"/g, "").trim();r.parameters[i] = n;
          }
        }), r);if (/^(video|audio)\/mp2t$/i.test(n.type)) {
          var a = [];n.parameters && n.parameters.codecs && (a = n.parameters.codecs.split(","), a = (a = $l(a)).filter(function (e) {
            return ec(e) || tc(e);
          })), 0 === a.length && (a = ["avc1.4d400d", "mp4a.40.2"]), i = new ic(this, a), 0 !== this.sourceBuffers.length && (this.sourceBuffers[0].createRealSourceBuffers_(), i.createRealSourceBuffers_(), this.sourceBuffers[0].audioDisabled_ = !0);
        } else i = this.nativeMediaSource_.addSourceBuffer(e);return this.sourceBuffers.push(i), i;
      } }]), t;
  }(),
      rc = 0;jr.mediaSources = {};var ac = function ac(e, t) {
    var i = jr.mediaSources[e];if (!i) throw new Error("Media Source not found (Video.js)");i.trigger({ type: "sourceopen", swfId: t });
  },
      sc = function sc() {
    return !!v.MediaSource && !!v.MediaSource.isTypeSupported && v.MediaSource.isTypeSupported('video/mp4;codecs="avc1.4d400d,mp4a.40.2"');
  },
      oc = function oc() {
    if (this.MediaSource = { open: ac, supportsNativeMediaSources: sc }, sc()) return new nc();throw new Error("Cannot use create a virtual MediaSource for this video");
  };oc.open = ac, oc.supportsNativeMediaSources = sc;var uc = { createObjectURL: function createObjectURL(e) {
      var t = void 0;return e instanceof nc ? (t = v.URL.createObjectURL(e.nativeMediaSource_), e.url_ = t) : e instanceof nc ? (t = "blob:vjs-media-source/" + rc, rc++, jr.mediaSources[t] = e, t) : (t = v.URL.createObjectURL(e), e.url_ = t);
    } };jr.MediaSource = oc, jr.URL = uc;var lc = jr.EventTarget,
      cc = jr.mergeOptions,
      dc = function dc(e, t) {
    for (var s = void 0, o = cc(e, { duration: t.duration, minimumUpdatePeriod: t.minimumUpdatePeriod }), i = 0; i < t.playlists.length; i++) {
      var n = $u(o, t.playlists[i]);n ? o = n : s = !0;
    }return Yu(t, function (e, t, i, n) {
      if (e.playlists && e.playlists.length) {
        var r = e.playlists[0].uri,
            a = $u(o, e.playlists[0]);a && ((o = a).mediaGroups[t][i][n].playlists[0] = o.playlists[r], s = !1);
      }
    }), s ? null : o;
  },
      hc = function (e) {
    function l(e, t) {
      var i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {},
          n = arguments[3];Hu(this, l);var r = zu(this, (l.__proto__ || Object.getPrototypeOf(l)).call(this)),
          a = i.withCredentials,
          s = void 0 !== a && a,
          o = i.handleManifestRedirects,
          u = void 0 !== o && o;if (r.hls_ = t, r.withCredentials = s, r.handleManifestRedirects = u, !e) throw new Error("A non-empty playlist URL or playlist is required");return r.on("minimumUpdatePeriod", function () {
        r.refreshXml_();
      }), r.on("mediaupdatetimeout", function () {
        r.refreshMedia_();
      }), r.state = "HAVE_NOTHING", r.loadedPlaylists_ = {}, "string" == typeof e ? (r.srcUrl = e, zu(r)) : (r.setupChildLoader(n, e), r);
    }return qu(l, lc), Vu(l, [{ key: "setupChildLoader", value: function value(e, t) {
        this.masterPlaylistLoader_ = e, this.childPlaylist_ = t;
      } }, { key: "dispose", value: function value() {
        this.stopRequest(), this.loadedPlaylists_ = {}, v.clearTimeout(this.mediaUpdateTimeout);
      } }, { key: "hasPendingRequest", value: function value() {
        return this.request || this.mediaRequest_;
      } }, { key: "stopRequest", value: function value() {
        if (this.request) {
          var e = this.request;this.request = null, e.onreadystatechange = null, e.abort();
        }
      } }, { key: "media", value: function value(e) {
        if (!e) return this.media_;if ("HAVE_NOTHING" === this.state) throw new Error("Cannot switch media playlist from " + this.state);var t = this.state;if ("string" == typeof e) {
          if (!this.master.playlists[e]) throw new Error("Unknown playlist URI: " + e);e = this.master.playlists[e];
        }var i = !this.media_ || e.uri !== this.media_.uri;if (i && this.loadedPlaylists_[e.uri] && this.loadedPlaylists_[e.uri].endList) return this.state = "HAVE_METADATA", this.media_ = e, void (i && (this.trigger("mediachanging"), this.trigger("mediachange")));i && (this.media_ && this.trigger("mediachanging"), this.mediaRequest_ = v.setTimeout(this.haveMetadata.bind(this, { startingState: t, playlist: e }), 0));
      } }, { key: "haveMetadata", value: function value(e) {
        var t = e.startingState,
            i = e.playlist;this.state = "HAVE_METADATA", this.media_ = i, this.loadedPlaylists_[i.uri] = i, this.mediaRequest_ = null, this.refreshMedia_(), "HAVE_MASTER" === t ? this.trigger("loadedmetadata") : this.trigger("mediachange");
      } }, { key: "pause", value: function value() {
        this.stopRequest(), v.clearTimeout(this.mediaUpdateTimeout), "HAVE_NOTHING" === this.state && (this.started = !1);
      } }, { key: "load", value: function value(e) {
        var t = this;v.clearTimeout(this.mediaUpdateTimeout);var i = this.media();if (e) {
          var n = i ? i.targetDuration / 2 * 1e3 : 5e3;this.mediaUpdateTimeout = v.setTimeout(function () {
            return t.load();
          }, n);
        } else this.started ? this.trigger("loadedplaylist") : this.start();
      } }, { key: "parseMasterXml", value: function value() {
        var a = ja(this.masterXml_, { manifestUri: this.srcUrl, clientOffset: this.clientOffset_ });a.uri = this.srcUrl;for (var e = 0; e < a.playlists.length; e++) {
          var t = "placeholder-uri-" + e;a.playlists[e].uri = t, a.playlists[t] = a.playlists[e];
        }return Yu(a, function (e, t, i, n) {
          if (e.playlists && e.playlists.length) {
            var r = "placeholder-uri-" + t + "-" + i + "-" + n;e.playlists[0].uri = r, a.playlists[r] = e.playlists[0];
          }
        }), Qu(a), Ju(a), a;
      } }, { key: "start", value: function value() {
        var i = this;this.started = !0, this.masterPlaylistLoader_ ? this.mediaRequest_ = v.setTimeout(this.haveMaster_.bind(this), 0) : this.request = this.hls_.xhr({ uri: this.srcUrl, withCredentials: this.withCredentials }, function (e, t) {
          if (i.request) {
            if (i.request = null, e) return i.error = { status: t.status, message: "DASH playlist request error at URL: " + i.srcUrl, responseText: t.responseText, code: 2 }, "HAVE_NOTHING" === i.state && (i.started = !1), i.trigger("error");i.masterXml_ = t.responseText, t.responseHeaders && t.responseHeaders.date ? i.masterLoaded_ = Date.parse(t.responseHeaders.date) : i.masterLoaded_ = Date.now(), i.srcUrl = Fu(i.handleManifestRedirects, i.srcUrl, t), i.syncClientServerClock_(i.onClientServerClockSync_.bind(i));
          }
        });
      } }, { key: "syncClientServerClock_", value: function value(n) {
        var r = this,
            a = Fa(this.masterXml_);return null === a ? (this.clientOffset_ = this.masterLoaded_ - Date.now(), n()) : "DIRECT" === a.method ? (this.clientOffset_ = a.value - Date.now(), n()) : void (this.request = this.hls_.xhr({ uri: ju(this.srcUrl, a.value), method: a.method, withCredentials: this.withCredentials }, function (e, t) {
          if (r.request) {
            if (e) return r.clientOffset_ = r.masterLoaded_ - Date.now(), n();var i = void 0;i = "HEAD" === a.method ? t.responseHeaders && t.responseHeaders.date ? Date.parse(t.responseHeaders.date) : r.masterLoaded_ : Date.parse(t.responseText), r.clientOffset_ = i - Date.now(), n();
          }
        }));
      } }, { key: "haveMaster_", value: function value() {
        this.state = "HAVE_MASTER", this.mediaRequest_ = null, this.masterPlaylistLoader_ ? this.media_ || this.media(this.childPlaylist_) : (this.master = this.parseMasterXml(), this.trigger("loadedplaylist"));
      } }, { key: "onClientServerClockSync_", value: function value() {
        var e = this;this.haveMaster_(), this.hasPendingRequest() || this.media_ || this.media(this.master.playlists[0]), this.master && this.master.minimumUpdatePeriod && v.setTimeout(function () {
          e.trigger("minimumUpdatePeriod");
        }, this.master.minimumUpdatePeriod);
      } }, { key: "refreshXml_", value: function value() {
        var r = this;this.request = this.hls_.xhr({ uri: this.srcUrl, withCredentials: this.withCredentials }, function (e, t) {
          if (r.request) {
            if (r.request = null, e) return r.error = { status: t.status, message: "DASH playlist request error at URL: " + r.srcUrl, responseText: t.responseText, code: 2 }, "HAVE_NOTHING" === r.state && (r.started = !1), r.trigger("error");r.masterXml_ = t.responseText;var i = r.parseMasterXml(),
                n = dc(r.master, i);n && (r.master = n), v.setTimeout(function () {
              r.trigger("minimumUpdatePeriod");
            }, r.master.minimumUpdatePeriod);
          }
        });
      } }, { key: "refreshMedia_", value: function value() {
        var e = this,
            t = void 0,
            i = void 0;i = this.masterPlaylistLoader_ ? (t = this.masterPlaylistLoader_.master, this.masterPlaylistLoader_.parseMasterXml()) : (t = this.master, this.parseMasterXml());var n = dc(t, i);n ? (this.masterPlaylistLoader_ ? this.masterPlaylistLoader_.master = n : this.master = n, this.media_ = n.playlists[this.media_.uri]) : this.trigger("playlistunchanged"), this.media().endList || (this.mediaUpdateTimeout = v.setTimeout(function () {
          e.trigger("mediaupdatetimeout");
        }, Zu(this.media(), !!n))), this.trigger("loadedplaylist");
      } }]), l;
  }(),
      pc = function pc(e) {
    return jr.log.debug ? jr.log.debug.bind(jr, "VHS:", e + " >") : function () {};
  };function fc() {}var mc = function () {
    function r(e, t, i, n) {
      Hu(this, r), this.callbacks_ = [], this.pendingCallback_ = null, this.timestampOffset_ = 0, this.mediaSource = e, this.processedAppend_ = !1, this.type_ = i, this.mimeType_ = t, this.logger_ = pc("SourceUpdater[" + i + "][" + t + "]"), "closed" === e.readyState ? e.addEventListener("sourceopen", this.createSourceBuffer_.bind(this, t, n)) : this.createSourceBuffer_(t, n);
    }return Vu(r, [{ key: "createSourceBuffer_", value: function value(e, t) {
        var i = this;this.sourceBuffer_ = this.mediaSource.addSourceBuffer(e), this.logger_("created SourceBuffer"), t && (t.trigger("sourcebufferadded"), this.mediaSource.sourceBuffers.length < 2) ? t.on("sourcebufferadded", function () {
          i.start_();
        }) : this.start_();
      } }, { key: "start_", value: function value() {
        var t = this;this.started_ = !0, this.onUpdateendCallback_ = function () {
          var e = t.pendingCallback_;t.pendingCallback_ = null, t.logger_("buffered [" + Ul(t.buffered()) + "]"), e && e(), t.runCallback_();
        }, this.sourceBuffer_.addEventListener("updateend", this.onUpdateendCallback_), this.runCallback_();
      } }, { key: "abort", value: function value(e) {
        var t = this;this.processedAppend_ && this.queueCallback_(function () {
          t.sourceBuffer_.abort();
        }, e);
      } }, { key: "appendBuffer", value: function value(e, t) {
        var i = this;this.processedAppend_ = !0, this.queueCallback_(function () {
          e.videoSegmentTimingInfoCallback && i.sourceBuffer_.addEventListener("videoSegmentTimingInfo", e.videoSegmentTimingInfoCallback), i.sourceBuffer_.appendBuffer(e.bytes);
        }, function () {
          e.videoSegmentTimingInfoCallback && i.sourceBuffer_.removeEventListener("videoSegmentTimingInfo", e.videoSegmentTimingInfoCallback), t();
        });
      } }, { key: "buffered", value: function value() {
        return this.sourceBuffer_ ? this.sourceBuffer_.buffered : jr.createTimeRanges();
      } }, { key: "remove", value: function value(e, t) {
        var i = this,
            n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : fc;this.processedAppend_ && this.queueCallback_(function () {
          i.logger_("remove [" + e + " => " + t + "]"), i.sourceBuffer_.remove(e, t);
        }, n);
      } }, { key: "updating", value: function value() {
        return !this.sourceBuffer_ || this.sourceBuffer_.updating || !!this.pendingCallback_ && this.pendingCallback_ !== fc;
      } }, { key: "timestampOffset", value: function value(e) {
        var t = this;return "undefined" != typeof e && (this.queueCallback_(function () {
          t.sourceBuffer_.timestampOffset = e;
        }), this.timestampOffset_ = e), this.timestampOffset_;
      } }, { key: "queueCallback_", value: function value(e, t) {
        this.callbacks_.push([e.bind(this), t]), this.runCallback_();
      } }, { key: "runCallback_", value: function value() {
        var e = void 0;!this.updating() && this.callbacks_.length && this.started_ && (e = this.callbacks_.shift(), this.pendingCallback_ = e[1], e[0]());
      } }, { key: "dispose", value: function value() {
        this.sourceBuffer_.removeEventListener("updateend", this.onUpdateendCallback_), this.sourceBuffer_ && "open" === this.mediaSource.readyState && this.sourceBuffer_.abort();
      } }]), r;
  }(),
      gc = { GOAL_BUFFER_LENGTH: 30, MAX_GOAL_BUFFER_LENGTH: 60, GOAL_BUFFER_LENGTH_RATE: 1, INITIAL_BANDWIDTH: 4194304, BANDWIDTH_VARIANCE: 1.2, BUFFER_LOW_WATER_LINE: 0, MAX_BUFFER_LOW_WATER_LINE: 30, BUFFER_LOW_WATER_LINE_RATE: 1 },
      yc = 2,
      vc = -101,
      _c = -102,
      bc = function bc(e) {
    var t,
        i,
        n = {};return e.byterange && (n.Range = (t = e.byterange, i = t.offset + t.length - 1, "bytes=" + t.offset + "-" + i)), n;
  },
      Tc = function Tc(e) {
    e.forEach(function (e) {
      e.abort();
    });
  },
      Sc = function Sc(e, t) {
    return t.timedout ? { status: t.status, message: "HLS request timed-out at URL: " + t.uri, code: vc, xhr: t } : t.aborted ? { status: t.status, message: "HLS request aborted at URL: " + t.uri, code: _c, xhr: t } : e ? { status: t.status, message: "HLS request errored at URL: " + t.uri, code: yc, xhr: t } : null;
  },
      kc = function kc(i, s, o) {
    var u = 0,
        l = !1;return function (e, t) {
      var n, r, a;if (!l) return e ? (l = !0, Tc(i), o(e, t)) : (u += 1) === i.length ? (t.endOfAllRequests = Date.now(), t.encryptedBytes ? (r = t, a = o, (n = s).addEventListener("message", function e(t) {
        if (t.data.source === r.requestId) {
          n.removeEventListener("message", e);var i = t.data.decrypted;return r.bytes = new Uint8Array(i.bytes, i.byteOffset, i.byteLength), a(null, r);
        }
      }), void n.postMessage(Sl({ source: r.requestId, encrypted: r.encryptedBytes, key: r.key.bytes, iv: r.key.iv }), [r.encryptedBytes.buffer, r.key.bytes.buffer])) : o(null, t)) : void 0;
    };
  },
      Cc = function Cc(r, a) {
    return function (e) {
      var t, i, n;return r.stats = jr.mergeOptions(r.stats, (i = (t = e).target, (n = { bandwidth: 1 / 0, bytesReceived: 0, roundTripTime: Date.now() - i.requestTime || 0 }).bytesReceived = t.loaded, n.bandwidth = Math.floor(n.bytesReceived / n.roundTripTime * 8 * 1e3), n)), !r.stats.firstBytesReceivedAt && r.stats.bytesReceived && (r.stats.firstBytesReceivedAt = Date.now()), a(e, r);
    };
  },
      wc = function wc(e, t, i, n, r, a, s) {
    var o,
        u,
        l,
        c,
        d,
        h = [],
        p = kc(h, i, s);if (r.key) {
      var f = e(jr.mergeOptions(t, { uri: r.key.resolvedUri, responseType: "arraybuffer" }), (o = r, u = p, function (e, t) {
        var i = t.response,
            n = Sc(e, t);if (n) return u(n, o);if (16 !== i.byteLength) return u({ status: t.status, message: "Invalid HLS key at URL: " + t.uri, code: yc, xhr: t }, o);var r = new DataView(i);return o.key.bytes = new Uint32Array([r.getUint32(0), r.getUint32(4), r.getUint32(8), r.getUint32(12)]), u(null, o);
      }));h.push(f);
    }if (r.map && !r.map.bytes) {
      var m = e(jr.mergeOptions(t, { uri: r.map.resolvedUri, responseType: "arraybuffer", headers: bc(r.map) }), (l = r, c = n, d = p, function (e, t) {
        var i = t.response,
            n = Sc(e, t);return n ? d(n, l) : 0 === i.byteLength ? d({ status: t.status, message: "Empty HLS segment content at URL: " + t.uri, code: yc, xhr: t }, l) : (l.map.bytes = new Uint8Array(t.response), c.isInitialized() || c.init(), l.map.timescales = Ls.timescale(l.map.bytes), l.map.videoTrackIds = Ls.videoTrackIds(l.map.bytes), d(null, l));
      }));h.push(m);
    }var g,
        y,
        v,
        _ = e(jr.mergeOptions(t, { uri: r.resolvedUri, responseType: "arraybuffer", headers: bc(r) }), (g = r, y = n, v = p, function (e, t) {
      var i,
          n = t.response,
          r = Sc(e, t),
          a = void 0;return r ? v(r, g) : 0 === n.byteLength ? v({ status: t.status, message: "Empty HLS segment content at URL: " + t.uri, code: yc, xhr: t }, g) : (g.stats = { bandwidth: (i = t).bandwidth, bytesReceived: i.bytesReceived || 0, roundTripTime: i.roundTripTime || 0 }, g.key ? g.encryptedBytes = new Uint8Array(t.response) : g.bytes = new Uint8Array(t.response), g.map && g.map.bytes && (y.isInitialized() || y.init(), (a = y.parse(g.bytes, g.map.videoTrackIds, g.map.timescales)) && a.captions && (g.captionStreams = a.captionStreams, g.fmp4Captions = a.captions)), v(null, g));
    }));return _.addEventListener("progress", Cc(r, a)), h.push(_), function () {
      return Tc(h);
    };
  },
      Ec = function Ec(e, t) {
    var i;return e && (i = v.getComputedStyle(e)) ? i[t] : "";
  },
      Ac = function Ac(e, n) {
    var r = e.slice();e.sort(function (e, t) {
      var i = n(e, t);return 0 === i ? r.indexOf(e) - r.indexOf(t) : i;
    });
  },
      Lc = function Lc(e, t) {
    var i = void 0,
        n = void 0;return e.attributes.BANDWIDTH && (i = e.attributes.BANDWIDTH), i = i || v.Number.MAX_VALUE, t.attributes.BANDWIDTH && (n = t.attributes.BANDWIDTH), i - (n = n || v.Number.MAX_VALUE);
  },
      Pc = function Pc(e) {
    return "number" == typeof e && isFinite(e);
  },
      Oc = function (e) {
    function i(e) {
      Hu(this, i);var t = zu(this, (i.__proto__ || Object.getPrototypeOf(i)).call(this));if (!e) throw new TypeError("Initialization settings are required");if ("function" != typeof e.currentTime) throw new TypeError("No currentTime getter specified");if (!e.mediaSource) throw new TypeError("No MediaSource specified");return t.bandwidth = e.bandwidth, t.throughput = { rate: 0, count: 0 }, t.roundTrip = NaN, t.resetStats_(), t.mediaIndex = null, t.hasPlayed_ = e.hasPlayed, t.currentTime_ = e.currentTime, t.seekable_ = e.seekable, t.seeking_ = e.seeking, t.duration_ = e.duration, t.mediaSource_ = e.mediaSource, t.hls_ = e.hls, t.loaderType_ = e.loaderType, t.startingMedia_ = void 0, t.segmentMetadataTrack_ = e.segmentMetadataTrack, t.goalBufferLength_ = e.goalBufferLength, t.sourceType_ = e.sourceType, t.inbandTextTracks_ = e.inbandTextTracks, t.state_ = "INIT", t.checkBufferTimeout_ = null, t.error_ = void 0, t.currentTimeline_ = -1, t.pendingSegment_ = null, t.mimeType_ = null, t.sourceUpdater_ = null, t.xhrOptions_ = null, t.activeInitSegmentId_ = null, t.initSegments_ = {}, t.captionParser_ = new yu(), t.decrypter_ = e.decrypter, t.syncController_ = e.syncController, t.syncPoint_ = { segmentIndex: 0, time: 0 }, t.syncController_.on("syncinfoupdate", function () {
        return t.trigger("syncinfoupdate");
      }), t.mediaSource_.addEventListener("sourceopen", function () {
        return t.ended_ = !1;
      }), t.fetchAtBuffer_ = !1, t.logger_ = pc("SegmentLoader[" + t.loaderType_ + "]"), Object.defineProperty(t, "state", { get: function get() {
          return this.state_;
        }, set: function set(e) {
          e !== this.state_ && (this.logger_(this.state_ + " -> " + e), this.state_ = e);
        } }), t;
    }return qu(i, jr.EventTarget), Vu(i, [{ key: "resetStats_", value: function value() {
        this.mediaBytesTransferred = 0, this.mediaRequests = 0, this.mediaRequestsAborted = 0, this.mediaRequestsTimedout = 0, this.mediaRequestsErrored = 0, this.mediaTransferDuration = 0, this.mediaSecondsLoaded = 0;
      } }, { key: "dispose", value: function value() {
        this.state = "DISPOSED", this.pause(), this.abort_(), this.sourceUpdater_ && this.sourceUpdater_.dispose(), this.resetStats_(), this.captionParser_.reset();
      } }, { key: "abort", value: function value() {
        "WAITING" === this.state ? (this.abort_(), this.state = "READY", this.paused() || this.monitorBuffer_()) : this.pendingSegment_ && (this.pendingSegment_ = null);
      } }, { key: "abort_", value: function value() {
        this.pendingSegment_ && this.pendingSegment_.abortRequests(), this.pendingSegment_ = null;
      } }, { key: "error", value: function value(e) {
        return "undefined" != typeof e && (this.error_ = e), this.pendingSegment_ = null, this.error_;
      } }, { key: "endOfStream", value: function value() {
        this.ended_ = !0, this.pause(), this.trigger("ended");
      } }, { key: "buffered_", value: function value() {
        return this.sourceUpdater_ ? this.sourceUpdater_.buffered() : jr.createTimeRanges();
      } }, { key: "initSegment", value: function value(e) {
        var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];if (!e) return null;var i = kl(e),
            n = this.initSegments_[i];return t && !n && e.bytes && (this.initSegments_[i] = n = { resolvedUri: e.resolvedUri, byterange: e.byterange, bytes: e.bytes, timescales: e.timescales, videoTrackIds: e.videoTrackIds }), n || e;
      } }, { key: "couldBeginLoading_", value: function value() {
        return this.playlist_ && (this.sourceUpdater_ || this.mimeType_ && "INIT" === this.state) && !this.paused();
      } }, { key: "load", value: function value() {
        if (this.monitorBuffer_(), this.playlist_) {
          if (this.syncController_.setDateTimeMapping(this.playlist_), "INIT" === this.state && this.couldBeginLoading_()) return this.init_();!this.couldBeginLoading_() || "READY" !== this.state && "INIT" !== this.state || (this.state = "READY");
        }
      } }, { key: "init_", value: function value() {
        return this.state = "READY", this.sourceUpdater_ = new mc(this.mediaSource_, this.mimeType_, this.loaderType_, this.sourceBufferEmitter_), this.resetEverything(), this.monitorBuffer_();
      } }, { key: "playlist", value: function value(e) {
        var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};if (e) {
          var i = this.playlist_,
              n = this.pendingSegment_;this.playlist_ = e, this.xhrOptions_ = t, this.hasPlayed_() || (e.syncInfo = { mediaSequence: e.mediaSequence, time: 0 });var r = null;if (i && (i.id ? r = i.id : i.uri && (r = i.uri)), this.logger_("playlist update [" + r + " => " + (e.id || e.uri) + "]"), this.trigger("syncinfoupdate"), "INIT" === this.state && this.couldBeginLoading_()) return this.init_();if (i && i.uri === e.uri) {
            var a = e.mediaSequence - i.mediaSequence;this.logger_("live window shift [" + a + "]"), null !== this.mediaIndex && (this.mediaIndex -= a), n && (n.mediaIndex -= a, 0 <= n.mediaIndex && (n.segment = e.segments[n.mediaIndex])), this.syncController_.saveExpiredSegmentInfo(i, e);
          } else null !== this.mediaIndex && this.resyncLoader();
        }
      } }, { key: "pause", value: function value() {
        this.checkBufferTimeout_ && (v.clearTimeout(this.checkBufferTimeout_), this.checkBufferTimeout_ = null);
      } }, { key: "paused", value: function value() {
        return null === this.checkBufferTimeout_;
      } }, { key: "mimeType", value: function value(e, t) {
        this.mimeType_ || (this.mimeType_ = e, this.sourceBufferEmitter_ = t, "INIT" === this.state && this.couldBeginLoading_() && this.init_());
      } }, { key: "resetEverything", value: function value(e) {
        this.ended_ = !1, this.resetLoader(), this.remove(0, this.duration_(), e), this.captionParser_.clearAllCaptions(), this.trigger("reseteverything");
      } }, { key: "resetLoader", value: function value() {
        this.fetchAtBuffer_ = !1, this.resyncLoader();
      } }, { key: "resyncLoader", value: function value() {
        this.mediaIndex = null, this.syncPoint_ = null, this.abort();
      } }, { key: "remove", value: function value(e, t, i) {
        if (this.sourceUpdater_ && this.sourceUpdater_.remove(e, t, i), xl(e, t, this.segmentMetadataTrack_), this.inbandTextTracks_) for (var n in this.inbandTextTracks_) {
          xl(e, t, this.inbandTextTracks_[n]);
        }
      } }, { key: "monitorBuffer_", value: function value() {
        this.checkBufferTimeout_ && v.clearTimeout(this.checkBufferTimeout_), this.checkBufferTimeout_ = v.setTimeout(this.monitorBufferTick_.bind(this), 1);
      } }, { key: "monitorBufferTick_", value: function value() {
        "READY" === this.state && this.fillBuffer_(), this.checkBufferTimeout_ && v.clearTimeout(this.checkBufferTimeout_), this.checkBufferTimeout_ = v.setTimeout(this.monitorBufferTick_.bind(this), 500);
      } }, { key: "fillBuffer_", value: function value() {
        if (!this.sourceUpdater_.updating()) {
          this.syncPoint_ || (this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_()));var e = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);e && (this.isEndOfStream_(e.mediaIndex) ? this.endOfStream() : (e.mediaIndex !== this.playlist_.segments.length - 1 || "ended" !== this.mediaSource_.readyState || this.seeking_()) && ((e.timeline !== this.currentTimeline_ || null !== e.startOfSegment && e.startOfSegment < this.sourceUpdater_.timestampOffset()) && (this.syncController_.reset(), e.timestampOffset = e.startOfSegment, this.captionParser_.clearAllCaptions()), this.loadSegment_(e)));
        }
      } }, { key: "isEndOfStream_", value: function value(e) {
        return function (e, t, i) {
          if (!e || !t) return !1;var n = i === e.segments.length;return e.endList && "open" === t.readyState && n;
        }(1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : this.playlist_, this.mediaSource_, e) && !this.sourceUpdater_.updating();
      } }, { key: "checkBuffer_", value: function value(e, t, i, n, r, a) {
        var s = 0,
            o = void 0;e.length && (s = e.end(e.length - 1));var u = Math.max(0, s - r);if (!t.segments.length) return null;if (u >= this.goalBufferLength_()) return null;if (!n && 1 <= u) return null;if (null === a) return i = this.getSyncSegmentCandidate_(t), this.generateSegmentInfo_(t, i, null, !0);if (null !== i) {
          var l = t.segments[i];return o = l && l.end ? l.end : s, this.generateSegmentInfo_(t, i + 1, o, !1);
        }if (this.fetchAtBuffer_) {
          var c = gl.getMediaInfoForTime(t, s, a.segmentIndex, a.time);i = c.mediaIndex, o = c.startTime;
        } else {
          var d = gl.getMediaInfoForTime(t, r, a.segmentIndex, a.time);i = d.mediaIndex, o = d.startTime;
        }return this.generateSegmentInfo_(t, i, o, !1);
      } }, { key: "getSyncSegmentCandidate_", value: function value(e) {
        var t = this;if (-1 === this.currentTimeline_) return 0;var i = e.segments.map(function (e, t) {
          return { timeline: e.timeline, segmentIndex: t };
        }).filter(function (e) {
          return e.timeline === t.currentTimeline_;
        });return i.length ? i[Math.min(i.length - 1, 1)].segmentIndex : Math.max(e.segments.length - 1, 0);
      } }, { key: "generateSegmentInfo_", value: function value(e, t, i, n) {
        if (t < 0 || t >= e.segments.length) return null;var r = e.segments[t];return { requestId: "segment-loader-" + Math.random(), uri: r.resolvedUri, mediaIndex: t, isSyncRequest: n, startOfSegment: i, playlist: e, bytes: null, encryptedBytes: null, timestampOffset: null, timeline: r.timeline, duration: r.duration, segment: r };
      } }, { key: "abortRequestEarly_", value: function value(e) {
        if (this.hls_.tech_.paused() || !this.xhrOptions_.timeout || !this.playlist_.attributes.BANDWIDTH) return !1;if (Date.now() - (e.firstBytesReceivedAt || Date.now()) < 1e3) return !1;var t = this.currentTime_(),
            i = e.bandwidth,
            n = this.pendingSegment_.duration,
            r = gl.estimateSegmentRequestTime(n, i, this.playlist_, e.bytesReceived),
            a = function (e, t) {
          var i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 1;return ((e.length ? e.end(e.length - 1) : 0) - t) / i;
        }(this.buffered_(), t, this.hls_.tech_.playbackRate()) - 1;if (r <= a) return !1;var s = function (e) {
          var t = e.master,
              i = e.currentTime,
              n = e.bandwidth,
              r = e.duration,
              a = e.segmentDuration,
              s = e.timeUntilRebuffer,
              o = e.currentTimeline,
              u = e.syncController,
              l = t.playlists.filter(function (e) {
            return !gl.isIncompatible(e);
          }),
              c = l.filter(gl.isEnabled);c.length || (c = l.filter(function (e) {
            return !gl.isDisabled(e);
          }));var d = c.filter(gl.hasAttribute.bind(null, "BANDWIDTH")).map(function (e) {
            var t = u.getSyncPoint(e, r, o, i) ? 1 : 2;return { playlist: e, rebufferingImpact: gl.estimateSegmentRequestTime(a, n, e) * t - s };
          }),
              h = d.filter(function (e) {
            return e.rebufferingImpact <= 0;
          });return Ac(h, function (e, t) {
            return Lc(t.playlist, e.playlist);
          }), h.length ? h[0] : (Ac(d, function (e, t) {
            return e.rebufferingImpact - t.rebufferingImpact;
          }), d[0] || null);
        }({ master: this.hls_.playlists.master, currentTime: t, bandwidth: i, duration: this.duration_(), segmentDuration: n, timeUntilRebuffer: a, currentTimeline: this.currentTimeline_, syncController: this.syncController_ });if (s) {
          var o = r - a - s.rebufferingImpact,
              u = .5;return a <= Ll && (u = 1), !s.playlist || s.playlist.uri === this.playlist_.uri || o < u ? !1 : (this.bandwidth = s.playlist.attributes.BANDWIDTH * gc.BANDWIDTH_VARIANCE + 1, this.abort(), this.trigger("earlyabort"), !0);
        }
      } }, { key: "handleProgress_", value: function value(e, t) {
        this.pendingSegment_ && t.requestId === this.pendingSegment_.requestId && !this.abortRequestEarly_(t.stats) && this.trigger("progress");
      } }, { key: "loadSegment_", value: function value(e) {
        this.state = "WAITING", this.pendingSegment_ = e, this.trimBackBuffer_(e), e.abortRequests = wc(this.hls_.xhr, this.xhrOptions_, this.decrypter_, this.captionParser_, this.createSimplifiedSegmentObj_(e), this.handleProgress_.bind(this), this.segmentRequestFinished_.bind(this));
      } }, { key: "trimBackBuffer_", value: function value(e) {
        var t,
            i,
            n,
            r,
            a = (t = this.seekable_(), i = this.currentTime_(), n = this.playlist_.targetDuration || 10, r = void 0, r = t.length && 0 < t.start(0) && t.start(0) < i ? t.start(0) : i - 30, Math.min(r, i - n));0 < a && this.remove(0, a);
      } }, { key: "createSimplifiedSegmentObj_", value: function value(e) {
        var t = e.segment,
            i = { resolvedUri: t.resolvedUri, byterange: t.byterange, requestId: e.requestId };if (t.key) {
          var n = t.key.iv || new Uint32Array([0, 0, 0, e.mediaIndex + e.playlist.mediaSequence]);i.key = { resolvedUri: t.key.resolvedUri, iv: n };
        }return t.map && (i.map = this.initSegment(t.map)), i;
      } }, { key: "segmentRequestFinished_", value: function value(e, t) {
        if (this.mediaRequests += 1, t.stats && (this.mediaBytesTransferred += t.stats.bytesReceived, this.mediaTransferDuration += t.stats.roundTripTime), this.pendingSegment_) {
          if (t.requestId === this.pendingSegment_.requestId) {
            if (e) return this.pendingSegment_ = null, this.state = "READY", e.code === _c ? void (this.mediaRequestsAborted += 1) : (this.pause(), e.code === vc ? (this.mediaRequestsTimedout += 1, this.bandwidth = 1, this.roundTrip = NaN, void this.trigger("bandwidthupdate")) : (this.mediaRequestsErrored += 1, this.error(e), void this.trigger("error")));this.bandwidth = t.stats.bandwidth, this.roundTrip = t.stats.roundTripTime, t.map && (t.map = this.initSegment(t.map, !0)), this.processSegmentResponse_(t);
          }
        } else this.mediaRequestsAborted += 1;
      } }, { key: "processSegmentResponse_", value: function value(e) {
        var t = this.pendingSegment_;t.bytes = e.bytes, e.map && (t.segment.map.bytes = e.map.bytes), t.endOfAllRequests = e.endOfAllRequests, e.fmp4Captions && (!function (e, t, i) {
          for (var n in i) {
            if (!e[n]) {
              t.trigger({ type: "usage", name: "hls-608" });var r = t.textTracks().getTrackById(n);e[n] = r || t.addRemoteTextTrack({ kind: "captions", id: n, label: n }, !1).track;
            }
          }
        }(this.inbandTextTracks_, this.hls_.tech_, e.captionStreams), function (e) {
          var r = e.inbandTextTracks,
              t = e.captionArray,
              a = e.timestampOffset;if (t) {
            var s = window.WebKitDataCue || window.VTTCue;t.forEach(function (e) {
              var t = e.stream,
                  i = e.startTime,
                  n = e.endTime;r[t] && (i += a, n += a, r[t].addCue(new s(i, n, e.text)));
            });
          }
        }({ inbandTextTracks: this.inbandTextTracks_, captionArray: e.fmp4Captions, timestampOffset: 0 }), this.captionParser_.clearParsedCaptions()), this.handleSegment_();
      } }, { key: "handleSegment_", value: function value() {
        var e = this;if (this.pendingSegment_) {
          var t = this.pendingSegment_,
              i = t.segment,
              n = this.syncController_.probeSegmentInfo(t);"undefined" == typeof this.startingMedia_ && n && (n.containsAudio || n.containsVideo) && (this.startingMedia_ = { containsAudio: n.containsAudio, containsVideo: n.containsVideo });var r,
              a,
              s,
              o = (r = this.loaderType_, a = this.startingMedia_, s = n, "main" === r && a && s ? s.containsAudio || s.containsVideo ? a.containsVideo && !s.containsVideo ? "Only audio found in segment when we expected video. We can't switch to audio only from a stream that had video. To get rid of this message, please add codec information to the manifest." : !a.containsVideo && s.containsVideo ? "Video found in segment when we expected only audio. We can't switch to a stream with video from an audio only stream. To get rid of this message, please add codec information to the manifest." : null : "Neither audio nor video found in segment." : null);if (o) return this.error({ message: o, blacklistDuration: 1 / 0 }), void this.trigger("error");if (t.isSyncRequest) return this.trigger("syncinfoupdate"), this.pendingSegment_ = null, void (this.state = "READY");null !== t.timestampOffset && t.timestampOffset !== this.sourceUpdater_.timestampOffset() && (this.sourceUpdater_.timestampOffset(t.timestampOffset), this.trigger("timestampoffset"));var u,
              l,
              c,
              d,
              h,
              p,
              f,
              m,
              g,
              y,
              v,
              _ = this.syncController_.mappingForTimeline(t.timeline);if (null !== _ && this.trigger({ type: "segmenttimemapping", mapping: _ }), this.state = "APPENDING", i.map) {
            var b = kl(i.map);if (!this.activeInitSegmentId_ || this.activeInitSegmentId_ !== b) {
              var T = this.initSegment(i.map);this.sourceUpdater_.appendBuffer({ bytes: T.bytes }, function () {
                e.activeInitSegmentId_ = b;
              });
            }
          }t.byteLength = t.bytes.byteLength, "number" == typeof i.start && "number" == typeof i.end ? this.mediaSecondsLoaded += i.end - i.start : this.mediaSecondsLoaded += i.duration, this.logger_((l = (u = t).segment, c = l.start, d = l.end, h = u.playlist, p = h.mediaSequence, f = h.id, m = h.segments, g = void 0 === m ? [] : m, y = u.mediaIndex, v = u.timeline, ["appending [" + y + "] of [" + p + ", " + (p + g.length) + "] from playlist [" + f + "]", "[" + c + " => " + d + "] in timeline [" + v + "]"].join(" "))), this.sourceUpdater_.appendBuffer({ bytes: t.bytes, videoSegmentTimingInfoCallback: this.handleVideoSegmentTimingInfo_.bind(this, t.requestId) }, this.handleUpdateEnd_.bind(this));
        } else this.state = "READY";
      } }, { key: "handleVideoSegmentTimingInfo_", value: function value(e, t) {
        if (this.pendingSegment_ && e === this.pendingSegment_.requestId) {
          var i = this.pendingSegment_.segment;i.videoTimingInfo || (i.videoTimingInfo = {}), i.videoTimingInfo.transmuxerPrependedSeconds = t.videoSegmentTimingInfo.prependedContentDuration || 0, i.videoTimingInfo.transmuxedPresentationStart = t.videoSegmentTimingInfo.start.presentation, i.videoTimingInfo.transmuxedPresentationEnd = t.videoSegmentTimingInfo.end.presentation, i.videoTimingInfo.baseMediaDecodeTime = t.videoSegmentTimingInfo.baseMediaDecodeTime;
        }
      } }, { key: "handleUpdateEnd_", value: function value() {
        if (!this.pendingSegment_) return this.state = "READY", void (this.paused() || this.monitorBuffer_());var e = this.pendingSegment_,
            t = e.segment,
            i = null !== this.mediaIndex;this.pendingSegment_ = null, this.recordThroughput_(e), this.addSegmentMetadataCue_(e), this.state = "READY", this.mediaIndex = e.mediaIndex, this.fetchAtBuffer_ = !0, this.currentTimeline_ = e.timeline, this.trigger("syncinfoupdate"), t.end && this.currentTime_() - t.end > 3 * e.playlist.targetDuration ? this.resetEverything() : (i && this.trigger("bandwidthupdate"), this.trigger("progress"), this.isEndOfStream_(e.mediaIndex + 1, e.playlist) && this.endOfStream(), this.paused() || this.monitorBuffer_());
      } }, { key: "recordThroughput_", value: function value(e) {
        var t = this.throughput.rate,
            i = Date.now() - e.endOfAllRequests + 1,
            n = Math.floor(e.byteLength / i * 8 * 1e3);this.throughput.rate += (n - t) / ++this.throughput.count;
      } }, { key: "addSegmentMetadataCue_", value: function value(e) {
        if (this.segmentMetadataTrack_) {
          var t = e.segment,
              i = t.start,
              n = t.end;if (Pc(i) && Pc(n)) {
            xl(i, n, this.segmentMetadataTrack_);var r = v.WebKitDataCue || v.VTTCue,
                a = { custom: t.custom, dateTimeObject: t.dateTimeObject, dateTimeString: t.dateTimeString, bandwidth: e.playlist.attributes.BANDWIDTH, resolution: e.playlist.attributes.RESOLUTION, codecs: e.playlist.attributes.CODECS, byteLength: e.byteLength, uri: e.uri, timeline: e.timeline, playlist: e.playlist.uri, start: i, end: n },
                s = new r(i, n, JSON.stringify(a));s.value = a, this.segmentMetadataTrack_.addCue(s);
          }
        }
      } }]), i;
  }(),
      Ic = function Ic(e) {
    return decodeURIComponent(escape(String.fromCharCode.apply(null, e)));
  },
      Uc = new Uint8Array("\n\n".split("").map(function (e) {
    return e.charCodeAt(0);
  })),
      Dc = function (e) {
    function n(e) {
      var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};Hu(this, n);var i = zu(this, (n.__proto__ || Object.getPrototypeOf(n)).call(this, e, t));return i.mediaSource_ = null, i.subtitlesTrack_ = null, i;
    }return qu(n, Oc), Vu(n, [{ key: "buffered_", value: function value() {
        if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues.length) return jr.createTimeRanges();var e = this.subtitlesTrack_.cues,
            t = e[0].startTime,
            i = e[e.length - 1].startTime;return jr.createTimeRanges([[t, i]]);
      } }, { key: "initSegment", value: function value(e) {
        var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];if (!e) return null;var i = kl(e),
            n = this.initSegments_[i];if (t && !n && e.bytes) {
          var r = Uc.byteLength + e.bytes.byteLength,
              a = new Uint8Array(r);a.set(e.bytes), a.set(Uc, e.bytes.byteLength), this.initSegments_[i] = n = { resolvedUri: e.resolvedUri, byterange: e.byterange, bytes: a };
        }return n || e;
      } }, { key: "couldBeginLoading_", value: function value() {
        return this.playlist_ && this.subtitlesTrack_ && !this.paused();
      } }, { key: "init_", value: function value() {
        return this.state = "READY", this.resetEverything(), this.monitorBuffer_();
      } }, { key: "track", value: function value(e) {
        return "undefined" == typeof e || (this.subtitlesTrack_ = e, "INIT" === this.state && this.couldBeginLoading_() && this.init_()), this.subtitlesTrack_;
      } }, { key: "remove", value: function value(e, t) {
        xl(e, t, this.subtitlesTrack_);
      } }, { key: "fillBuffer_", value: function value() {
        var e = this;this.syncPoint_ || (this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_()));var t = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);if (t = this.skipEmptySegments_(t)) {
          if (null === this.syncController_.timestampOffsetForTimeline(t.timeline)) {
            return this.syncController_.one("timestampoffset", function () {
              e.state = "READY", e.paused() || e.monitorBuffer_();
            }), void (this.state = "WAITING_ON_TIMELINE");
          }this.loadSegment_(t);
        }
      } }, { key: "skipEmptySegments_", value: function value(e) {
        for (; e && e.segment.empty;) {
          e = this.generateSegmentInfo_(e.playlist, e.mediaIndex + 1, e.startOfSegment + e.duration, e.isSyncRequest);
        }return e;
      } }, { key: "handleSegment_", value: function value() {
        var t = this;if (this.pendingSegment_ && this.subtitlesTrack_) {
          this.state = "APPENDING";var e = this.pendingSegment_,
              i = e.segment;if ("function" != typeof v.WebVTT && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {
            var n = function n() {
              t.handleSegment_();
            };return this.state = "WAITING_ON_VTTJS", this.subtitlesTrack_.tech_.one("vttjsloaded", n), void this.subtitlesTrack_.tech_.one("vttjserror", function () {
              t.subtitlesTrack_.tech_.off("vttjsloaded", n), t.error({ message: "Error loading vtt.js" }), t.state = "READY", t.pause(), t.trigger("error");
            });
          }i.requested = !0;try {
            this.parseVTTCues_(e);
          } catch (e) {
            return this.error({ message: e.message }), this.state = "READY", this.pause(), this.trigger("error");
          }if (this.updateTimeMapping_(e, this.syncController_.timelines[e.timeline], this.playlist_), e.isSyncRequest) return this.trigger("syncinfoupdate"), this.pendingSegment_ = null, void (this.state = "READY");e.byteLength = e.bytes.byteLength, this.mediaSecondsLoaded += i.duration, e.cues.length && this.remove(e.cues[0].endTime, e.cues[e.cues.length - 1].endTime), e.cues.forEach(function (e) {
            t.subtitlesTrack_.addCue(e);
          }), this.handleUpdateEnd_();
        } else this.state = "READY";
      } }, { key: "parseVTTCues_", value: function value(t) {
        var e = void 0,
            i = !1;"function" == typeof v.TextDecoder ? e = new v.TextDecoder("utf8") : (e = v.WebVTT.StringDecoder(), i = !0);var n = new v.WebVTT.Parser(v, v.vttjs, e);if (t.cues = [], t.timestampmap = { MPEGTS: 0, LOCAL: 0 }, n.oncue = t.cues.push.bind(t.cues), n.ontimestampmap = function (e) {
          return t.timestampmap = e;
        }, n.onparsingerror = function (e) {
          jr.log.warn("Error encountered when parsing cues: " + e.message);
        }, t.segment.map) {
          var r = t.segment.map.bytes;i && (r = Ic(r)), n.parse(r);
        }var a = t.bytes;i && (a = Ic(a)), n.parse(a), n.flush();
      } }, { key: "updateTimeMapping_", value: function value(e, t, i) {
        var n = e.segment;if (t) if (e.cues.length) {
          var r = e.timestampmap,
              a = r.MPEGTS / 9e4 - r.LOCAL + t.mapping;if (e.cues.forEach(function (e) {
            e.startTime += a, e.endTime += a;
          }), !i.syncInfo) {
            var s = e.cues[0].startTime,
                o = e.cues[e.cues.length - 1].startTime;i.syncInfo = { mediaSequence: i.mediaSequence + e.mediaIndex, time: Math.min(s, o - n.duration) };
          }
        } else n.empty = !0;
      } }]), n;
  }(),
      xc = function xc(e, t) {
    for (var i = e.cues, n = 0; n < i.length; n++) {
      var r = i[n];if (t >= r.adStartTime && t <= r.adEndTime) return r;
    }return null;
  },
      Rc = Pu,
      Mc = [{ name: "VOD", run: function run(e, t, i, n, r) {
      if (i === 1 / 0) return null;return { time: 0, segmentIndex: 0 };
    } }, { name: "ProgramDateTime", run: function run(e, t, i, n, r) {
      if (!e.datetimeToDisplayTime) return null;var a = t.segments || [],
          s = null,
          o = null;r = r || 0;for (var u = 0; u < a.length; u++) {
        var l = a[u];if (l.dateTimeObject) {
          var c = l.dateTimeObject.getTime() / 1e3 + e.datetimeToDisplayTime,
              d = Math.abs(r - c);if (null !== o && o < d) break;o = d, s = { time: c, segmentIndex: u };
        }
      }return s;
    } }, { name: "Segment", run: function run(e, t, i, n, r) {
      var a = t.segments || [],
          s = null,
          o = null;r = r || 0;for (var u = 0; u < a.length; u++) {
        var l = a[u];if (l.timeline === n && "undefined" != typeof l.start) {
          var c = Math.abs(r - l.start);if (null !== o && o < c) break;(!s || null === o || c <= o) && (o = c, s = { time: l.start, segmentIndex: u });
        }
      }return s;
    } }, { name: "Discontinuity", run: function run(e, t, i, n, r) {
      var a = null;if (r = r || 0, t.discontinuityStarts && t.discontinuityStarts.length) for (var s = null, o = 0; o < t.discontinuityStarts.length; o++) {
        var u = t.discontinuityStarts[o],
            l = t.discontinuitySequence + o + 1,
            c = e.discontinuities[l];if (c) {
          var d = Math.abs(r - c.time);if (null !== s && s < d) break;(!a || null === s || d <= s) && (s = d, a = { time: c.time, segmentIndex: u });
        }
      }return a;
    } }, { name: "Playlist", run: function run(e, t, i, n, r) {
      return t.syncInfo ? { time: t.syncInfo.time, segmentIndex: t.syncInfo.mediaSequence - t.mediaSequence } : null;
    } }],
      Bc = function (e) {
    function t() {
      Hu(this, t);var e = zu(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));return e.inspectCache_ = void 0, e.timelines = [], e.discontinuities = [], e.datetimeToDisplayTime = null, e.logger_ = pc("SyncController"), e;
    }return qu(t, jr.EventTarget), Vu(t, [{ key: "getSyncPoint", value: function value(e, t, i, n) {
        var r = this.runStrategies_(e, t, i, n);return r.length ? this.selectSyncPoint_(r, { key: "time", value: n }) : null;
      } }, { key: "getExpiredTime", value: function value(e, t) {
        if (!e || !e.segments) return null;var i = this.runStrategies_(e, t, e.discontinuitySequence, 0);if (!i.length) return null;var n = this.selectSyncPoint_(i, { key: "segmentIndex", value: 0 });return 0 < n.segmentIndex && (n.time *= -1), Math.abs(n.time + rl(e, n.segmentIndex, 0));
      } }, { key: "runStrategies_", value: function value(e, t, i, n) {
        for (var r = [], a = 0; a < Mc.length; a++) {
          var s = Mc[a],
              o = s.run(this, e, t, i, n);o && (o.strategy = s.name, r.push({ strategy: s.name, syncPoint: o }));
        }return r;
      } }, { key: "selectSyncPoint_", value: function value(e, t) {
        for (var i = e[0].syncPoint, n = Math.abs(e[0].syncPoint[t.key] - t.value), r = e[0].strategy, a = 1; a < e.length; a++) {
          var s = Math.abs(e[a].syncPoint[t.key] - t.value);s < n && (n = s, i = e[a].syncPoint, r = e[a].strategy);
        }return this.logger_("syncPoint for [" + t.key + ": " + t.value + "] chosen with strategy [" + r + "]: [time:" + i.time + ", segmentIndex:" + i.segmentIndex + "]"), i;
      } }, { key: "saveExpiredSegmentInfo", value: function value(e, t) {
        for (var i = t.mediaSequence - e.mediaSequence - 1; 0 <= i; i--) {
          var n = e.segments[i];if (n && "undefined" != typeof n.start) {
            t.syncInfo = { mediaSequence: e.mediaSequence + i, time: n.start }, this.logger_("playlist refresh sync: [time:" + t.syncInfo.time + ", mediaSequence: " + t.syncInfo.mediaSequence + "]"), this.trigger("syncinfoupdate");break;
          }
        }
      } }, { key: "setDateTimeMapping", value: function value(e) {
        if (!this.datetimeToDisplayTime && e.segments && e.segments.length && e.segments[0].dateTimeObject) {
          var t = e.segments[0].dateTimeObject.getTime() / 1e3;this.datetimeToDisplayTime = -t;
        }
      } }, { key: "reset", value: function value() {
        this.inspectCache_ = void 0;
      } }, { key: "probeSegmentInfo", value: function value(e) {
        var t = e.segment,
            i = e.playlist,
            n = void 0;return (n = t.map ? this.probeMp4Segment_(e) : this.probeTsSegment_(e)) && this.calculateSegmentTimeMapping_(e, n) && (this.saveDiscontinuitySyncInfo_(e), i.syncInfo || (i.syncInfo = { mediaSequence: i.mediaSequence + e.mediaIndex, time: t.start })), n;
      } }, { key: "probeMp4Segment_", value: function value(e) {
        var t = e.segment,
            i = Ls.timescale(t.map.bytes),
            n = Ls.startTime(i, e.bytes);return null !== e.timestampOffset && (e.timestampOffset -= n), { start: n, end: n + t.duration };
      } }, { key: "probeTsSegment_", value: function value(e) {
        var t = Rc(e.bytes, this.inspectCache_),
            i = void 0,
            n = void 0;return t ? (t.video && 2 === t.video.length ? (this.inspectCache_ = t.video[1].dts, i = t.video[0].dtsTime, n = t.video[1].dtsTime) : t.audio && 2 === t.audio.length && (this.inspectCache_ = t.audio[1].dts, i = t.audio[0].dtsTime, n = t.audio[1].dtsTime), { start: i, end: n, containsVideo: t.video && 2 === t.video.length, containsAudio: t.audio && 2 === t.audio.length }) : null;
      } }, { key: "timestampOffsetForTimeline", value: function value(e) {
        return "undefined" == typeof this.timelines[e] ? null : this.timelines[e].time;
      } }, { key: "mappingForTimeline", value: function value(e) {
        return "undefined" == typeof this.timelines[e] ? null : this.timelines[e].mapping;
      } }, { key: "calculateSegmentTimeMapping_", value: function value(e, t) {
        var i = e.segment,
            n = this.timelines[e.timeline];if (null !== e.timestampOffset) n = { time: e.startOfSegment, mapping: e.startOfSegment - t.start }, this.timelines[e.timeline] = n, this.trigger("timestampoffset"), this.logger_("time mapping for timeline " + e.timeline + ": [time: " + n.time + "] [mapping: " + n.mapping + "]"), i.start = e.startOfSegment, i.end = t.end + n.mapping;else {
          if (!n) return !1;i.start = t.start + n.mapping, i.end = t.end + n.mapping;
        }return !0;
      } }, { key: "saveDiscontinuitySyncInfo_", value: function value(e) {
        var t = e.playlist,
            i = e.segment;if (i.discontinuity) this.discontinuities[i.timeline] = { time: i.start, accuracy: 0 };else if (t.discontinuityStarts && t.discontinuityStarts.length) for (var n = 0; n < t.discontinuityStarts.length; n++) {
          var r = t.discontinuityStarts[n],
              a = t.discontinuitySequence + n + 1,
              s = r - e.mediaIndex,
              o = Math.abs(s);if (!this.discontinuities[a] || this.discontinuities[a].accuracy > o) {
            var u = void 0;u = s < 0 ? i.start - rl(t, e.mediaIndex, r) : i.end + rl(t, e.mediaIndex + 1, r), this.discontinuities[a] = { time: u, accuracy: o };
          }
        }
      } }]), t;
  }(),
      Nc = new ql("./decrypter-worker.worker.js", function (e, t) {
    var d,
        i,
        h,
        g,
        n,
        l,
        y,
        s,
        r = this;d = function d(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }, i = function () {
      function n(e, t) {
        for (var i = 0; i < t.length; i++) {
          var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
        }
      }return function (e, t, i) {
        return t && n(e.prototype, t), i && n(e, i), e;
      };
    }(), h = null, g = function () {
      function c(e) {
        d(this, c), h || (h = function () {
          var e = [[[], [], [], [], []], [[], [], [], [], []]],
              t = e[0],
              i = e[1],
              n = t[4],
              r = i[4],
              a = void 0,
              s = void 0,
              o = void 0,
              u = [],
              l = [],
              c = void 0,
              d = void 0,
              h = void 0,
              p = void 0,
              f = void 0;for (a = 0; a < 256; a++) {
            l[(u[a] = a << 1 ^ 283 * (a >> 7)) ^ a] = a;
          }for (s = o = 0; !n[s]; s ^= c || 1, o = l[o] || 1) {
            for (h = (h = o ^ o << 1 ^ o << 2 ^ o << 3 ^ o << 4) >> 8 ^ 255 & h ^ 99, f = 16843009 * u[d = u[c = u[r[n[s] = h] = s]]] ^ 65537 * d ^ 257 * c ^ 16843008 * s, p = 257 * u[h] ^ 16843008 * h, a = 0; a < 4; a++) {
              t[a][s] = p = p << 24 ^ p >>> 8, i[a][h] = f = f << 24 ^ f >>> 8;
            }
          }for (a = 0; a < 5; a++) {
            t[a] = t[a].slice(0), i[a] = i[a].slice(0);
          }return e;
        }()), this._tables = [[h[0][0].slice(), h[0][1].slice(), h[0][2].slice(), h[0][3].slice(), h[0][4].slice()], [h[1][0].slice(), h[1][1].slice(), h[1][2].slice(), h[1][3].slice(), h[1][4].slice()]];var t = void 0,
            i = void 0,
            n = void 0,
            r = void 0,
            a = void 0,
            s = this._tables[0][4],
            o = this._tables[1],
            u = e.length,
            l = 1;if (4 !== u && 6 !== u && 8 !== u) throw new Error("Invalid aes key size");for (r = e.slice(0), a = [], this._key = [r, a], t = u; t < 4 * u + 28; t++) {
          n = r[t - 1], (t % u == 0 || 8 === u && t % u == 4) && (n = s[n >>> 24] << 24 ^ s[n >> 16 & 255] << 16 ^ s[n >> 8 & 255] << 8 ^ s[255 & n], t % u == 0 && (n = n << 8 ^ n >>> 24 ^ l << 24, l = l << 1 ^ 283 * (l >> 7))), r[t] = r[t - u] ^ n;
        }for (i = 0; t; i++, t--) {
          n = r[3 & i ? t : t - 4], a[i] = t <= 4 || i < 4 ? n : o[0][s[n >>> 24]] ^ o[1][s[n >> 16 & 255]] ^ o[2][s[n >> 8 & 255]] ^ o[3][s[255 & n]];
        }
      }return c.prototype.decrypt = function (e, t, i, n, r, a) {
        var s = this._key[1],
            o = e ^ s[0],
            u = n ^ s[1],
            l = i ^ s[2],
            c = t ^ s[3],
            d = void 0,
            h = void 0,
            p = void 0,
            f = s.length / 4 - 2,
            m = void 0,
            g = 4,
            y = this._tables[1],
            v = y[0],
            _ = y[1],
            b = y[2],
            T = y[3],
            S = y[4];for (m = 0; m < f; m++) {
          d = v[o >>> 24] ^ _[u >> 16 & 255] ^ b[l >> 8 & 255] ^ T[255 & c] ^ s[g], h = v[u >>> 24] ^ _[l >> 16 & 255] ^ b[c >> 8 & 255] ^ T[255 & o] ^ s[g + 1], p = v[l >>> 24] ^ _[c >> 16 & 255] ^ b[o >> 8 & 255] ^ T[255 & u] ^ s[g + 2], c = v[c >>> 24] ^ _[o >> 16 & 255] ^ b[u >> 8 & 255] ^ T[255 & l] ^ s[g + 3], g += 4, o = d, u = h, l = p;
        }for (m = 0; m < 4; m++) {
          r[(3 & -m) + a] = S[o >>> 24] << 24 ^ S[u >> 16 & 255] << 16 ^ S[l >> 8 & 255] << 8 ^ S[255 & c] ^ s[g++], d = o, o = u, u = l, l = c, c = d;
        }
      }, c;
    }(), n = function () {
      function e() {
        d(this, e), this.listeners = {};
      }return e.prototype.on = function (e, t) {
        this.listeners[e] || (this.listeners[e] = []), this.listeners[e].push(t);
      }, e.prototype.off = function (e, t) {
        if (!this.listeners[e]) return !1;var i = this.listeners[e].indexOf(t);return this.listeners[e].splice(i, 1), -1 < i;
      }, e.prototype.trigger = function (e) {
        var t = this.listeners[e];if (t) if (2 === arguments.length) for (var i = t.length, n = 0; n < i; ++n) {
          t[n].call(this, arguments[1]);
        } else for (var r = Array.prototype.slice.call(arguments, 1), a = t.length, s = 0; s < a; ++s) {
          t[s].apply(this, r);
        }
      }, e.prototype.dispose = function () {
        this.listeners = {};
      }, e.prototype.pipe = function (t) {
        this.on("data", function (e) {
          t.push(e);
        });
      }, e;
    }(), l = function (t) {
      function i() {
        d(this, i);var e = function (e, t) {
          if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
        }(this, t.call(this, n));return e.jobs = [], e.delay = 1, e.timeout_ = null, e;
      }return function (e, t) {
        if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
      }(i, t), i.prototype.processJob_ = function () {
        this.jobs.shift()(), this.jobs.length ? this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay) : this.timeout_ = null;
      }, i.prototype.push = function (e) {
        this.jobs.push(e), this.timeout_ || (this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay));
      }, i;
    }(n), y = function y(e) {
      return e << 24 | (65280 & e) << 8 | (16711680 & e) >> 8 | e >>> 24;
    }, s = function () {
      function u(e, t, i, n) {
        d(this, u);var r = u.STEP,
            a = new Int32Array(e.buffer),
            s = new Uint8Array(e.byteLength),
            o = 0;for (this.asyncStream_ = new l(), this.asyncStream_.push(this.decryptChunk_(a.subarray(o, o + r), t, i, s)), o = r; o < a.length; o += r) {
          i = new Uint32Array([y(a[o - 4]), y(a[o - 3]), y(a[o - 2]), y(a[o - 1])]), this.asyncStream_.push(this.decryptChunk_(a.subarray(o, o + r), t, i, s));
        }this.asyncStream_.push(function () {
          var e;n(null, (e = s).subarray(0, e.byteLength - e[e.byteLength - 1]));
        });
      }return u.prototype.decryptChunk_ = function (t, i, n, r) {
        return function () {
          var e = function (e, t, i) {
            var n = new Int32Array(e.buffer, e.byteOffset, e.byteLength >> 2),
                r = new g(Array.prototype.slice.call(t)),
                a = new Uint8Array(e.byteLength),
                s = new Int32Array(a.buffer),
                o = void 0,
                u = void 0,
                l = void 0,
                c = void 0,
                d = void 0,
                h = void 0,
                p = void 0,
                f = void 0,
                m = void 0;for (o = i[0], u = i[1], l = i[2], c = i[3], m = 0; m < n.length; m += 4) {
              d = y(n[m]), h = y(n[m + 1]), p = y(n[m + 2]), f = y(n[m + 3]), r.decrypt(d, h, p, f, s, m), s[m] = y(s[m] ^ o), s[m + 1] = y(s[m + 1] ^ u), s[m + 2] = y(s[m + 2] ^ l), s[m + 3] = y(s[m + 3] ^ c), o = d, u = h, l = p, c = f;
            }return a;
          }(t, i, n);r.set(e, t.byteOffset);
        };
      }, i(u, null, [{ key: "STEP", get: function get() {
          return 32e3;
        } }]), u;
    }(), new function (a) {
      a.onmessage = function (e) {
        var r = e.data,
            t = new Uint8Array(r.encrypted.bytes, r.encrypted.byteOffset, r.encrypted.byteLength),
            i = new Uint32Array(r.key.bytes, r.key.byteOffset, r.key.byteLength / 4),
            n = new Uint32Array(r.iv.bytes, r.iv.byteOffset, r.iv.byteLength / 4);new s(t, i, n, function (e, t) {
          var i, n;a.postMessage((i = { source: r.source, decrypted: t }, n = {}, Object.keys(i).forEach(function (e) {
            var t = i[e];ArrayBuffer.isView(t) ? n[e] = { bytes: t.buffer, byteOffset: t.byteOffset, byteLength: t.byteLength } : n[e] = t;
          }), n), [t.buffer]);
        });
      };
    }(r);
  }),
      jc = function jc(e, t) {
    e.abort(), e.pause(), t && t.activePlaylistLoader && (t.activePlaylistLoader.pause(), t.activePlaylistLoader = null);
  },
      Fc = function Fc(e, t) {
    (t.activePlaylistLoader = e).load();
  },
      Hc = { AUDIO: function AUDIO(u, l) {
      return function () {
        var e = l.segmentLoaders[u],
            t = l.mediaTypes[u],
            i = l.blacklistCurrentPlaylist;jc(e, t);var n = t.activeTrack(),
            r = t.activeGroup(),
            a = (r.filter(function (e) {
          return e.default;
        })[0] || r[0]).id,
            s = t.tracks[a];if (n !== s) {
          for (var o in jr.log.warn("Problem encountered loading the alternate audio track.Switching back to default."), t.tracks) {
            t.tracks[o].enabled = t.tracks[o] === s;
          }t.onTrackChanged();
        } else i({ message: "Problem encountered loading the default audio track." });
      };
    }, SUBTITLES: function SUBTITLES(n, r) {
      return function () {
        var e = r.segmentLoaders[n],
            t = r.mediaTypes[n];jr.log.warn("Problem encountered loading the subtitle track.Disabling subtitle track."), jc(e, t);var i = t.activeTrack();i && (i.mode = "disabled"), t.onTrackChanged();
      };
    } },
      Vc = { AUDIO: function AUDIO(e, t, i) {
      if (t) {
        var n = i.tech,
            r = i.requestOptions,
            a = i.segmentLoaders[e];t.on("loadedmetadata", function () {
          var e = t.media();a.playlist(e, r), (!n.paused() || e.endList && "none" !== n.preload()) && a.load();
        }), t.on("loadedplaylist", function () {
          a.playlist(t.media(), r), n.paused() || a.load();
        }), t.on("error", Hc[e](e, i));
      }
    }, SUBTITLES: function SUBTITLES(e, t, i) {
      var n = i.tech,
          r = i.requestOptions,
          a = i.segmentLoaders[e],
          s = i.mediaTypes[e];t.on("loadedmetadata", function () {
        var e = t.media();a.playlist(e, r), a.track(s.activeTrack()), (!n.paused() || e.endList && "none" !== n.preload()) && a.load();
      }), t.on("loadedplaylist", function () {
        a.playlist(t.media(), r), n.paused() || a.load();
      }), t.on("error", Hc[e](e, i));
    } },
      qc = function qc(t, i) {
    return function (e) {
      return e.attributes[t] === i;
    };
  },
      zc = function zc(t) {
    return function (e) {
      return e.resolvedUri === t;
    };
  },
      Wc = { AUDIO: function AUDIO(e, t) {
      var i,
          n,
          r = t.hls,
          a = t.sourceType,
          s = t.segmentLoaders[e],
          o = t.requestOptions,
          u = t.master,
          l = u.mediaGroups,
          c = u.playlists,
          d = t.mediaTypes[e],
          h = d.groups,
          p = d.tracks,
          f = t.masterPlaylistLoader;for (var m in l[e] && 0 !== Object.keys(l[e]).length || (l[e] = { main: { default: { default: !0 } } }), l[e]) {
        h[m] || (h[m] = []);var g = c.filter(qc(e, m));for (var y in l[e][m]) {
          var v = l[e][m][y];g.filter(zc(v.resolvedUri)).length && delete v.resolvedUri;var _ = void 0;if (_ = v.resolvedUri ? new el(v.resolvedUri, r, o) : v.playlists && "dash" === a ? new hc(v.playlists[0], r, o, f) : null, v = jr.mergeOptions({ id: y, playlistLoader: _ }, v), Vc[e](e, v.playlistLoader, t), h[m].push(v), "undefined" == typeof p[y]) {
            var b = new jr.AudioTrack({ id: y, kind: (i = v, n = void 0, n = i.default ? "main" : "alternative", i.characteristics && 0 <= i.characteristics.indexOf("public.accessibility.describes-video") && (n = "main-desc"), n), enabled: !1, language: v.language, default: v.default, label: y });p[y] = b;
          }
        }
      }s.on("error", Hc[e](e, t));
    }, SUBTITLES: function SUBTITLES(e, t) {
      var i = t.tech,
          n = t.hls,
          r = t.sourceType,
          a = t.segmentLoaders[e],
          s = t.requestOptions,
          o = t.master.mediaGroups,
          u = t.mediaTypes[e],
          l = u.groups,
          c = u.tracks,
          d = t.masterPlaylistLoader;for (var h in o[e]) {
        for (var p in l[h] || (l[h] = []), o[e][h]) {
          if (!o[e][h][p].forced) {
            var f = o[e][h][p],
                m = void 0;if ("hls" === r ? m = new el(f.resolvedUri, n, s) : "dash" === r && (m = new hc(f.playlists[0], n, s, d)), f = jr.mergeOptions({ id: p, playlistLoader: m }, f), Vc[e](e, f.playlistLoader, t), l[h].push(f), "undefined" == typeof c[p]) {
              var g = i.addRemoteTextTrack({ id: p, kind: "subtitles", default: f.default && f.autoselect, language: f.language, label: p }, !1).track;c[p] = g;
            }
          }
        }
      }a.on("error", Hc[e](e, t));
    }, "CLOSED-CAPTIONS": function CLOSEDCAPTIONS(e, t) {
      var i = t.tech,
          n = t.master.mediaGroups,
          r = t.mediaTypes[e],
          a = r.groups,
          s = r.tracks;for (var o in n[e]) {
        for (var u in a[o] || (a[o] = []), n[e][o]) {
          var l = n[e][o][u];if (l.instreamId.match(/CC\d/) && (a[o].push(jr.mergeOptions({ id: u }, l)), "undefined" == typeof s[u])) {
            var c = i.addRemoteTextTrack({ id: l.instreamId, kind: "captions", default: l.default && l.autoselect, language: l.language, label: u }, !1).track;s[u] = c;
          }
        }
      }
    } },
      Gc = { AUDIO: function AUDIO(i, n) {
      return function () {
        var e = n.mediaTypes[i].tracks;for (var t in e) {
          if (e[t].enabled) return e[t];
        }return null;
      };
    }, SUBTITLES: function SUBTITLES(i, n) {
      return function () {
        var e = n.mediaTypes[i].tracks;for (var t in e) {
          if ("showing" === e[t].mode) return e[t];
        }return null;
      };
    } },
      Xc = function Xc(t) {
    ["AUDIO", "SUBTITLES", "CLOSED-CAPTIONS"].forEach(function (e) {
      Wc[e](e, t);
    });var i = t.mediaTypes,
        e = t.masterPlaylistLoader,
        n = t.tech,
        r = t.hls;["AUDIO", "SUBTITLES"].forEach(function (e) {
      var a, s, o, u, l, c;i[e].activeGroup = (a = e, s = t, function (t) {
        var e = s.masterPlaylistLoader,
            i = s.mediaTypes[a].groups,
            n = e.media();if (!n) return null;var r = null;return n.attributes[a] && (r = i[n.attributes[a]]), r = r || i.main, "undefined" == typeof t ? r : null === t ? null : r.filter(function (e) {
          return e.id === t.id;
        })[0] || null;
      }), i[e].activeTrack = Gc[e](e, t), i[e].onGroupChanged = (o = e, u = t, function () {
        var e = u.segmentLoaders,
            t = e[o],
            i = e.main,
            n = u.mediaTypes[o],
            r = n.activeTrack(),
            a = n.activeGroup(r),
            s = n.activePlaylistLoader;jc(t, n), a && (a.playlistLoader ? (t.resyncLoader(), Fc(a.playlistLoader, n)) : s && i.resetEverything());
      }), i[e].onTrackChanged = (l = e, c = t, function () {
        var e = c.segmentLoaders,
            t = e[l],
            i = e.main,
            n = c.mediaTypes[l],
            r = n.activeTrack(),
            a = n.activeGroup(r),
            s = n.activePlaylistLoader;jc(t, n), a && (a.playlistLoader ? (s !== a.playlistLoader && (t.track && t.track(r), t.resetEverything()), Fc(a.playlistLoader, n)) : i.resetEverything());
      });
    });var a = i.AUDIO.activeGroup(),
        s = (a.filter(function (e) {
      return e.default;
    })[0] || a[0]).id;i.AUDIO.tracks[s].enabled = !0, i.AUDIO.onTrackChanged(), e.on("mediachange", function () {
      ["AUDIO", "SUBTITLES"].forEach(function (e) {
        return i[e].onGroupChanged();
      });
    });var o = function o() {
      i.AUDIO.onTrackChanged(), n.trigger({ type: "usage", name: "hls-audio-change" });
    };for (var u in n.audioTracks().addEventListener("change", o), n.remoteTextTracks().addEventListener("change", i.SUBTITLES.onTrackChanged), r.on("dispose", function () {
      n.audioTracks().removeEventListener("change", o), n.remoteTextTracks().removeEventListener("change", i.SUBTITLES.onTrackChanged);
    }), n.clearTracks("audio"), i.AUDIO.tracks) {
      n.audioTracks().addTrack(i.AUDIO.tracks[u]);
    }
  },
      Kc = void 0,
      Yc = ["mediaRequests", "mediaRequestsAborted", "mediaRequestsTimedout", "mediaRequestsErrored", "mediaTransferDuration", "mediaBytesTransferred"],
      $c = function (e) {
    function m(e) {
      Hu(this, m);var t,
          i = zu(this, (m.__proto__ || Object.getPrototypeOf(m)).call(this)),
          n = e.url,
          r = e.handleManifestRedirects,
          a = e.withCredentials,
          s = e.tech,
          o = e.bandwidth,
          u = e.externHls,
          l = e.useCueTags,
          c = e.blacklistDuration,
          d = e.enableLowInitialPlaylist,
          h = e.sourceType,
          p = e.seekTo;if (!n) throw new Error("A non-empty playlist URL is required");Kc = u, i.withCredentials = a, i.tech_ = s, i.hls_ = s.hls, i.seekTo_ = p, i.sourceType_ = h, i.useCueTags_ = l, i.blacklistDuration = c, i.enableLowInitialPlaylist = d, i.useCueTags_ && (i.cueTagsTrack_ = i.tech_.addTextTrack("metadata", "ad-cues"), i.cueTagsTrack_.inBandMetadataTrackDispatchType = ""), i.requestOptions_ = { withCredentials: a, handleManifestRedirects: r, timeout: null }, i.mediaTypes_ = (t = {}, ["AUDIO", "SUBTITLES", "CLOSED-CAPTIONS"].forEach(function (e) {
        t[e] = { groups: {}, tracks: {}, activePlaylistLoader: null, activeGroup: fc, activeTrack: fc, onGroupChanged: fc, onTrackChanged: fc };
      }), t), i.mediaSource = new jr.MediaSource(), i.mediaSource.addEventListener("sourceopen", i.handleSourceOpen_.bind(i)), i.seekable_ = jr.createTimeRanges(), i.hasPlayed_ = function () {
        return !1;
      }, i.syncController_ = new Bc(e), i.segmentMetadataTrack_ = s.addRemoteTextTrack({ kind: "metadata", label: "segment-metadata" }, !1).track, i.decrypter_ = new Nc(), i.inbandTextTracks_ = {};var f = { hls: i.hls_, mediaSource: i.mediaSource, currentTime: i.tech_.currentTime.bind(i.tech_), seekable: function seekable() {
          return i.seekable();
        }, seeking: function seeking() {
          return i.tech_.seeking();
        }, duration: function duration() {
          return i.mediaSource.duration;
        }, hasPlayed: function hasPlayed() {
          return i.hasPlayed_();
        }, goalBufferLength: function goalBufferLength() {
          return i.goalBufferLength();
        }, bandwidth: o, syncController: i.syncController_, decrypter: i.decrypter_, sourceType: i.sourceType_, inbandTextTracks: i.inbandTextTracks_ };return i.masterPlaylistLoader_ = "dash" === i.sourceType_ ? new hc(n, i.hls_, i.requestOptions_) : new el(n, i.hls_, i.requestOptions_), i.setupMasterPlaylistLoaderListeners_(), i.mainSegmentLoader_ = new Oc(jr.mergeOptions(f, { segmentMetadataTrack: i.segmentMetadataTrack_, loaderType: "main" }), e), i.audioSegmentLoader_ = new Oc(jr.mergeOptions(f, { loaderType: "audio" }), e), i.subtitleSegmentLoader_ = new Dc(jr.mergeOptions(f, { loaderType: "vtt" }), e), i.setupSegmentLoaderListeners_(), Yc.forEach(function (e) {
        i[e + "_"] = function (e) {
          return this.audioSegmentLoader_[e] + this.mainSegmentLoader_[e];
        }.bind(i, e);
      }), i.logger_ = pc("MPC"), i.masterPlaylistLoader_.load(), i;
    }return qu(m, jr.EventTarget), Vu(m, [{ key: "setupMasterPlaylistLoaderListeners_", value: function value() {
        var n = this;this.masterPlaylistLoader_.on("loadedmetadata", function () {
          var e = n.masterPlaylistLoader_.media(),
              t = 1.5 * e.targetDuration * 1e3;ml(n.masterPlaylistLoader_.master, n.masterPlaylistLoader_.media()) ? n.requestOptions_.timeout = 0 : n.requestOptions_.timeout = t, e.endList && "none" !== n.tech_.preload() && (n.mainSegmentLoader_.playlist(e, n.requestOptions_), n.mainSegmentLoader_.load()), Xc({ sourceType: n.sourceType_, segmentLoaders: { AUDIO: n.audioSegmentLoader_, SUBTITLES: n.subtitleSegmentLoader_, main: n.mainSegmentLoader_ }, tech: n.tech_, requestOptions: n.requestOptions_, masterPlaylistLoader: n.masterPlaylistLoader_, hls: n.hls_, master: n.master(), mediaTypes: n.mediaTypes_, blacklistCurrentPlaylist: n.blacklistCurrentPlaylist.bind(n) }), n.triggerPresenceUsage_(n.master(), e);try {
            n.setupSourceBuffers_();
          } catch (e) {
            return jr.log.warn("Failed to create SourceBuffers", e), n.mediaSource.endOfStream("decode");
          }n.setupFirstPlay(), !n.mediaTypes_.AUDIO.activePlaylistLoader || n.mediaTypes_.AUDIO.activePlaylistLoader.media() ? n.trigger("selectedinitialmedia") : n.mediaTypes_.AUDIO.activePlaylistLoader.one("loadedmetadata", function () {
            n.trigger("selectedinitialmedia");
          });
        }), this.masterPlaylistLoader_.on("loadedplaylist", function () {
          var e = n.masterPlaylistLoader_.media();if (!e) {
            n.excludeUnsupportedVariants_();var t = void 0;return n.enableLowInitialPlaylist && (t = n.selectInitialPlaylist()), t || (t = n.selectPlaylist()), n.initialMedia_ = t, void n.masterPlaylistLoader_.media(n.initialMedia_);
          }if (n.useCueTags_ && n.updateAdCues_(e), n.mainSegmentLoader_.playlist(e, n.requestOptions_), n.updateDuration(), n.tech_.paused() || (n.mainSegmentLoader_.load(), n.audioSegmentLoader_ && n.audioSegmentLoader_.load()), !e.endList) {
            var i = function i() {
              var e = n.seekable();0 !== e.length && n.mediaSource.addSeekableRange_(e.start(0), e.end(0));
            };if (n.duration() !== 1 / 0) {
              n.tech_.one("durationchange", function e() {
                n.duration() === 1 / 0 ? i() : n.tech_.one("durationchange", e);
              });
            } else i();
          }
        }), this.masterPlaylistLoader_.on("error", function () {
          n.blacklistCurrentPlaylist(n.masterPlaylistLoader_.error);
        }), this.masterPlaylistLoader_.on("mediachanging", function () {
          n.mainSegmentLoader_.abort(), n.mainSegmentLoader_.pause();
        }), this.masterPlaylistLoader_.on("mediachange", function () {
          var e = n.masterPlaylistLoader_.media(),
              t = 1.5 * e.targetDuration * 1e3;ml(n.masterPlaylistLoader_.master, n.masterPlaylistLoader_.media()) ? n.requestOptions_.timeout = 0 : n.requestOptions_.timeout = t, n.mainSegmentLoader_.playlist(e, n.requestOptions_), n.mainSegmentLoader_.load(), n.tech_.trigger({ type: "mediachange", bubbles: !0 });
        }), this.masterPlaylistLoader_.on("playlistunchanged", function () {
          var e = n.masterPlaylistLoader_.media();n.stuckAtPlaylistEnd_(e) && (n.blacklistCurrentPlaylist({ message: "Playlist no longer updating." }), n.tech_.trigger("playliststuck"));
        }), this.masterPlaylistLoader_.on("renditiondisabled", function () {
          n.tech_.trigger({ type: "usage", name: "hls-rendition-disabled" });
        }), this.masterPlaylistLoader_.on("renditionenabled", function () {
          n.tech_.trigger({ type: "usage", name: "hls-rendition-enabled" });
        });
      } }, { key: "triggerPresenceUsage_", value: function value(e, t) {
        var i = e.mediaGroups || {},
            n = !0,
            r = Object.keys(i.AUDIO);for (var a in i.AUDIO) {
          for (var s in i.AUDIO[a]) {
            i.AUDIO[a][s].uri || (n = !1);
          }
        }n && this.tech_.trigger({ type: "usage", name: "hls-demuxed" }), Object.keys(i.SUBTITLES).length && this.tech_.trigger({ type: "usage", name: "hls-webvtt" }), Kc.Playlist.isAes(t) && this.tech_.trigger({ type: "usage", name: "hls-aes" }), Kc.Playlist.isFmp4(t) && this.tech_.trigger({ type: "usage", name: "hls-fmp4" }), r.length && 1 < Object.keys(i.AUDIO[r[0]]).length && this.tech_.trigger({ type: "usage", name: "hls-alternate-audio" }), this.useCueTags_ && this.tech_.trigger({ type: "usage", name: "hls-playlist-cue-tags" });
      } }, { key: "setupSegmentLoaderListeners_", value: function value() {
        var a = this;this.mainSegmentLoader_.on("bandwidthupdate", function () {
          var e = a.selectPlaylist(),
              t = a.masterPlaylistLoader_.media(),
              i = a.tech_.buffered(),
              n = i.length ? i.end(i.length - 1) - a.tech_.currentTime() : 0,
              r = a.bufferLowWaterLine();(!t.endList || a.duration() < gc.MAX_BUFFER_LOW_WATER_LINE || e.attributes.BANDWIDTH < t.attributes.BANDWIDTH || r <= n) && a.masterPlaylistLoader_.media(e), a.tech_.trigger("bandwidthupdate");
        }), this.mainSegmentLoader_.on("progress", function () {
          a.trigger("progress");
        }), this.mainSegmentLoader_.on("error", function () {
          a.blacklistCurrentPlaylist(a.mainSegmentLoader_.error());
        }), this.mainSegmentLoader_.on("syncinfoupdate", function () {
          a.onSyncInfoUpdate_();
        }), this.mainSegmentLoader_.on("timestampoffset", function () {
          a.tech_.trigger({ type: "usage", name: "hls-timestamp-offset" });
        }), this.audioSegmentLoader_.on("syncinfoupdate", function () {
          a.onSyncInfoUpdate_();
        }), this.mainSegmentLoader_.on("ended", function () {
          a.onEndOfStream();
        }), this.mainSegmentLoader_.on("earlyabort", function () {
          a.blacklistCurrentPlaylist({ message: "Aborted early because there isn't enough bandwidth to complete the request without rebuffering." }, 120);
        }), this.mainSegmentLoader_.on("reseteverything", function () {
          a.tech_.trigger("hls-reset");
        }), this.mainSegmentLoader_.on("segmenttimemapping", function (e) {
          a.tech_.trigger({ type: "hls-segment-time-mapping", mapping: e.mapping });
        }), this.audioSegmentLoader_.on("ended", function () {
          a.onEndOfStream();
        });
      } }, { key: "mediaSecondsLoaded_", value: function value() {
        return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);
      } }, { key: "load", value: function value() {
        this.mainSegmentLoader_.load(), this.mediaTypes_.AUDIO.activePlaylistLoader && this.audioSegmentLoader_.load(), this.mediaTypes_.SUBTITLES.activePlaylistLoader && this.subtitleSegmentLoader_.load();
      } }, { key: "smoothQualityChange_", value: function value() {
        var e = this.selectPlaylist();e !== this.masterPlaylistLoader_.media() && (this.masterPlaylistLoader_.media(e), this.mainSegmentLoader_.resetLoader());
      } }, { key: "fastQualityChange_", value: function value() {
        var e = this,
            t = this.selectPlaylist();t !== this.masterPlaylistLoader_.media() && (this.masterPlaylistLoader_.media(t), this.mainSegmentLoader_.resetEverything(function () {
          jr.browser.IE_VERSION || jr.browser.IS_EDGE ? e.tech_.setCurrentTime(e.tech_.currentTime() + .04) : e.tech_.setCurrentTime(e.tech_.currentTime());
        }));
      } }, { key: "play", value: function value() {
        if (!this.setupFirstPlay()) {
          this.tech_.ended() && this.seekTo_(0), this.hasPlayed_() && this.load();var e = this.tech_.seekable();return this.tech_.duration() === 1 / 0 && this.tech_.currentTime() < e.start(0) ? this.seekTo_(e.end(e.length - 1)) : void 0;
        }
      } }, { key: "setupFirstPlay", value: function value() {
        var e = this,
            t = this.masterPlaylistLoader_.media();if (!t || this.tech_.paused() || this.hasPlayed_()) return !1;if (!t.endList) {
          var i = this.seekable();if (!i.length) return !1;if (jr.browser.IE_VERSION && 0 === this.tech_.readyState()) return this.tech_.one("loadedmetadata", function () {
            e.trigger("firstplay"), e.seekTo_(i.end(0)), e.hasPlayed_ = function () {
              return !0;
            };
          }), !1;this.trigger("firstplay"), this.seekTo_(i.end(0));
        }return this.hasPlayed_ = function () {
          return !0;
        }, this.load(), !0;
      } }, { key: "handleSourceOpen_", value: function value() {
        try {
          this.setupSourceBuffers_();
        } catch (e) {
          return jr.log.warn("Failed to create Source Buffers", e), this.mediaSource.endOfStream("decode");
        }if (this.tech_.autoplay()) {
          var e = this.tech_.play();"undefined" != typeof e && "function" == typeof e.then && e.then(null, function (e) {});
        }this.trigger("sourceopen");
      } }, { key: "onEndOfStream", value: function value() {
        var e = this.mainSegmentLoader_.ended_;if (this.mediaTypes_.AUDIO.activePlaylistLoader && (e = !this.mainSegmentLoader_.startingMedia_ || this.mainSegmentLoader_.startingMedia_.containsVideo ? e && this.audioSegmentLoader_.ended_ : this.audioSegmentLoader_.ended_), e) {
          this.logger_("calling mediaSource.endOfStream()");try {
            this.mediaSource.endOfStream();
          } catch (e) {
            jr.log.warn("Failed to call media source endOfStream", e);
          }
        }
      } }, { key: "stuckAtPlaylistEnd_", value: function value(e) {
        if (!this.seekable().length) return !1;var t = this.syncController_.getExpiredTime(e, this.mediaSource.duration);if (null === t) return !1;var i = Kc.Playlist.playlistEnd(e, t),
            n = this.tech_.currentTime(),
            r = this.tech_.buffered();if (!r.length) return i - n <= .1;var a = r.end(r.length - 1);return a - n <= .1 && i - a <= .1;
      } }, { key: "blacklistCurrentPlaylist", value: function value() {
        var e,
            t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {},
            i = arguments[1],
            n = void 0;if (n = t.playlist || this.masterPlaylistLoader_.media(), i = i || t.blacklistDuration || this.blacklistDuration, !n) {
          this.error = t;try {
            return this.mediaSource.endOfStream("network");
          } catch (e) {
            return this.trigger("error");
          }
        }var r = 1 === this.masterPlaylistLoader_.master.playlists.filter(pl).length;return r ? (jr.log.warn("Problem encountered with the current HLS playlist. Trying again since it is the final playlist."), this.tech_.trigger("retryplaylist"), this.masterPlaylistLoader_.load(r)) : (n.excludeUntil = Date.now() + 1e3 * i, this.tech_.trigger("blacklistplaylist"), this.tech_.trigger({ type: "usage", name: "hls-rendition-blacklisted" }), e = this.selectPlaylist(), jr.log.warn("Problem encountered with the current HLS playlist." + (t.message ? " " + t.message : "") + " Switching to another playlist."), this.masterPlaylistLoader_.media(e));
      } }, { key: "pauseLoading", value: function value() {
        this.mainSegmentLoader_.pause(), this.mediaTypes_.AUDIO.activePlaylistLoader && this.audioSegmentLoader_.pause(), this.mediaTypes_.SUBTITLES.activePlaylistLoader && this.subtitleSegmentLoader_.pause();
      } }, { key: "setCurrentTime", value: function value(e) {
        var t = Ol(this.tech_.buffered(), e);return this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media() && this.masterPlaylistLoader_.media().segments ? t && t.length ? e : (this.mainSegmentLoader_.resetEverything(), this.mainSegmentLoader_.abort(), this.mediaTypes_.AUDIO.activePlaylistLoader && (this.audioSegmentLoader_.resetEverything(), this.audioSegmentLoader_.abort()), this.mediaTypes_.SUBTITLES.activePlaylistLoader && (this.subtitleSegmentLoader_.resetEverything(), this.subtitleSegmentLoader_.abort()), void this.load()) : 0;
      } }, { key: "duration", value: function value() {
        return this.masterPlaylistLoader_ ? this.mediaSource ? this.mediaSource.duration : Kc.Playlist.duration(this.masterPlaylistLoader_.media()) : 0;
      } }, { key: "seekable", value: function value() {
        return this.seekable_;
      } }, { key: "onSyncInfoUpdate_", value: function value() {
        var e = void 0,
            t = void 0;if (this.masterPlaylistLoader_) {
          var i = this.masterPlaylistLoader_.media();if (i) {
            var n = this.syncController_.getExpiredTime(i, this.mediaSource.duration);if (null !== n && 0 !== (e = Kc.Playlist.seekable(i, n)).length) {
              if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                if (i = this.mediaTypes_.AUDIO.activePlaylistLoader.media(), null === (n = this.syncController_.getExpiredTime(i, this.mediaSource.duration))) return;if (0 === (t = Kc.Playlist.seekable(i, n)).length) return;
              }var r = void 0,
                  a = void 0;this.seekable_ && this.seekable_.length && (r = this.seekable_.end(0), a = this.seekable_.start(0)), t ? t.start(0) > e.end(0) || e.start(0) > t.end(0) ? this.seekable_ = e : this.seekable_ = jr.createTimeRanges([[t.start(0) > e.start(0) ? t.start(0) : e.start(0), t.end(0) < e.end(0) ? t.end(0) : e.end(0)]]) : this.seekable_ = e, this.seekable_ && this.seekable_.length && this.seekable_.end(0) === r && this.seekable_.start(0) === a || (this.logger_("seekable updated [" + Ul(this.seekable_) + "]"), this.tech_.trigger("seekablechanged"));
            }
          }
        }
      } }, { key: "updateDuration", value: function value() {
        var t = this,
            e = this.mediaSource.duration,
            i = Kc.Playlist.duration(this.masterPlaylistLoader_.media()),
            n = this.tech_.buffered(),
            r = function e() {
          t.logger_("Setting duration from " + t.mediaSource.duration + " => " + i);try {
            t.mediaSource.duration = i;
          } catch (e) {
            jr.log.warn("Failed to set media source duration", e);
          }t.tech_.trigger("durationchange"), t.mediaSource.removeEventListener("sourceopen", e);
        };0 < n.length && (i = Math.max(i, n.end(n.length - 1))), e !== i && ("open" !== this.mediaSource.readyState ? this.mediaSource.addEventListener("sourceopen", r) : r());
      } }, { key: "dispose", value: function value() {
        var n = this;this.decrypter_.terminate(), this.masterPlaylistLoader_.dispose(), this.mainSegmentLoader_.dispose(), ["AUDIO", "SUBTITLES"].forEach(function (e) {
          var t = n.mediaTypes_[e].groups;for (var i in t) {
            t[i].forEach(function (e) {
              e.playlistLoader && e.playlistLoader.dispose();
            });
          }
        }), this.audioSegmentLoader_.dispose(), this.subtitleSegmentLoader_.dispose();
      } }, { key: "master", value: function value() {
        return this.masterPlaylistLoader_.master;
      } }, { key: "media", value: function value() {
        return this.masterPlaylistLoader_.media() || this.initialMedia_;
      } }, { key: "setupSourceBuffers_", value: function value() {
        var e,
            t = this.masterPlaylistLoader_.media();if (t && "open" === this.mediaSource.readyState) {
          if ((e = Zl(this.masterPlaylistLoader_.master, t)).length < 1) return this.error = "No compatible SourceBuffer configuration for the variant stream:" + t.resolvedUri, this.mediaSource.endOfStream("decode");this.configureLoaderMimeTypes_(e), this.excludeIncompatibleVariants_(t);
        }
      } }, { key: "configureLoaderMimeTypes_", value: function value(e) {
        var t = 1 < e.length && -1 === e[0].indexOf(",") && e[0] !== e[1] ? new jr.EventTarget() : null;this.mainSegmentLoader_.mimeType(e[0], t), e[1] && this.audioSegmentLoader_.mimeType(e[1], t);
      } }, { key: "excludeUnsupportedVariants_", value: function value() {
        this.master().playlists.forEach(function (e) {
          e.attributes.CODECS && v.MediaSource && v.MediaSource.isTypeSupported && !v.MediaSource.isTypeSupported('video/mp4; codecs="' + e.attributes.CODECS.replace(/avc1\.(\d+)\.(\d+)/i, function (e) {
            return $l([e])[0];
          }) + '"') && (e.excludeUntil = 1 / 0);
        });
      } }, { key: "excludeIncompatibleVariants_", value: function value(e) {
        var i = 2,
            n = null,
            t = void 0;e.attributes.CODECS && (t = Ql(e.attributes.CODECS), n = t.videoCodec, i = t.codecCount), this.master().playlists.forEach(function (e) {
          var t = { codecCount: 2, videoCodec: null };e.attributes.CODECS && (t = Ql(e.attributes.CODECS)), t.codecCount !== i && (e.excludeUntil = 1 / 0), t.videoCodec !== n && (e.excludeUntil = 1 / 0);
        });
      } }, { key: "updateAdCues_", value: function value(e) {
        var t = 0,
            i = this.seekable();i.length && (t = i.start(0)), function (e, t) {
          var i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0;if (e.segments) for (var n = i, r = void 0, a = 0; a < e.segments.length; a++) {
            var s = e.segments[a];if (r || (r = xc(t, n + s.duration / 2)), r) {
              if ("cueIn" in s) {
                r.endTime = n, r.adEndTime = n, n += s.duration, r = null;continue;
              }if (n < r.endTime) {
                n += s.duration;continue;
              }r.endTime += s.duration;
            } else if ("cueOut" in s && ((r = new v.VTTCue(n, n + s.duration, s.cueOut)).adStartTime = n, r.adEndTime = n + parseFloat(s.cueOut), t.addCue(r)), "cueOutCont" in s) {
              var o,
                  u,
                  l = s.cueOutCont.split("/").map(parseFloat),
                  c = Wu(l, 2);o = c[0], u = c[1], (r = new v.VTTCue(n, n + s.duration, "")).adStartTime = n - o, r.adEndTime = r.adStartTime + u, t.addCue(r);
            }n += s.duration;
          }
        }(e, this.cueTagsTrack_, t);
      } }, { key: "goalBufferLength", value: function value() {
        var e = this.tech_.currentTime(),
            t = gc.GOAL_BUFFER_LENGTH,
            i = gc.GOAL_BUFFER_LENGTH_RATE,
            n = Math.max(t, gc.MAX_GOAL_BUFFER_LENGTH);return Math.min(t + e * i, n);
      } }, { key: "bufferLowWaterLine", value: function value() {
        var e = this.tech_.currentTime(),
            t = gc.BUFFER_LOW_WATER_LINE,
            i = gc.BUFFER_LOW_WATER_LINE_RATE,
            n = Math.max(t, gc.MAX_BUFFER_LOW_WATER_LINE);return Math.min(t + e * i, n);
      } }]), m;
  }(),
      Qc = function e(t, i, n) {
    Hu(this, e);var r,
        a,
        s,
        o = t.masterPlaylistController_,
        u = o[(t.options_.smoothQualityChange ? "smooth" : "fast") + "QualityChange_"].bind(o);if (i.attributes.RESOLUTION) {
      var l = i.attributes.RESOLUTION;this.width = l.width, this.height = l.height;
    }this.bandwidth = i.attributes.BANDWIDTH, this.id = n, this.enabled = (r = t.playlists, a = i.uri, s = u, function (e) {
      var t = r.master.playlists[a],
          i = hl(t),
          n = pl(t);return "undefined" == typeof e ? n : (e ? delete t.disabled : t.disabled = !0, e === n || i || (s(), e ? r.trigger("renditionenabled") : r.trigger("renditiondisabled")), e);
    });
  },
      Jc = ["seeking", "seeked", "pause", "playing", "error"],
      Zc = function () {
    function s(e) {
      var t = this;Hu(this, s), this.tech_ = e.tech, this.seekable = e.seekable, this.seekTo = e.seekTo, this.allowSeeksWithinUnsafeLiveWindow = e.allowSeeksWithinUnsafeLiveWindow, this.media = e.media, this.consecutiveUpdates = 0, this.lastRecordedTime = null, this.timer_ = null, this.checkCurrentTimeTimeout_ = null, this.logger_ = pc("PlaybackWatcher"), this.logger_("initialize");var i = function i() {
        return t.monitorCurrentTime_();
      },
          n = function n() {
        return t.techWaiting_();
      },
          r = function r() {
        return t.cancelTimer_();
      },
          a = function a() {
        return t.fixesBadSeeks_();
      };this.tech_.on("seekablechanged", a), this.tech_.on("waiting", n), this.tech_.on(Jc, r), this.tech_.on("canplay", i), this.dispose = function () {
        t.logger_("dispose"), t.tech_.off("seekablechanged", a), t.tech_.off("waiting", n), t.tech_.off(Jc, r), t.tech_.off("canplay", i), t.checkCurrentTimeTimeout_ && v.clearTimeout(t.checkCurrentTimeTimeout_), t.cancelTimer_();
      };
    }return Vu(s, [{ key: "monitorCurrentTime_", value: function value() {
        this.checkCurrentTime_(), this.checkCurrentTimeTimeout_ && v.clearTimeout(this.checkCurrentTimeTimeout_), this.checkCurrentTimeTimeout_ = v.setTimeout(this.monitorCurrentTime_.bind(this), 250);
      } }, { key: "checkCurrentTime_", value: function value() {
        if (this.tech_.seeking() && this.fixesBadSeeks_()) return this.consecutiveUpdates = 0, void (this.lastRecordedTime = this.tech_.currentTime());if (!this.tech_.paused() && !this.tech_.seeking()) {
          var e = this.tech_.currentTime(),
              t = this.tech_.buffered();if (this.lastRecordedTime === e && (!t.length || e + .1 >= t.end(t.length - 1))) return this.techWaiting_();5 <= this.consecutiveUpdates && e === this.lastRecordedTime ? (this.consecutiveUpdates++, this.waiting_()) : e === this.lastRecordedTime ? this.consecutiveUpdates++ : (this.consecutiveUpdates = 0, this.lastRecordedTime = e);
        }
      } }, { key: "cancelTimer_", value: function value() {
        this.consecutiveUpdates = 0, this.timer_ && (this.logger_("cancelTimer_"), clearTimeout(this.timer_)), this.timer_ = null;
      } }, { key: "fixesBadSeeks_", value: function value() {
        if (!this.tech_.seeking()) return !1;var e = this.seekable(),
            t = this.tech_.currentTime(),
            i = void 0;this.afterSeekableWindow_(e, t, this.media(), this.allowSeeksWithinUnsafeLiveWindow) && (i = e.end(e.length - 1));this.beforeSeekableWindow_(e, t) && (i = e.start(0) + .1);return "undefined" != typeof i && (this.logger_("Trying to seek outside of seekable at time " + t + " with seekable range " + Ul(e) + ". Seeking to " + i + "."), this.seekTo(i), !0);
      } }, { key: "waiting_", value: function value() {
        if (!this.techWaiting_()) {
          var e = this.tech_.currentTime(),
              t = this.tech_.buffered(),
              i = Ol(t, e);return i.length && e + 3 <= i.end(0) ? (this.cancelTimer_(), this.seekTo(e), this.logger_("Stopped at " + e + " while inside a buffered region [" + i.start(0) + " -> " + i.end(0) + "]. Attempting to resume playback by seeking to the current time."), void this.tech_.trigger({ type: "usage", name: "hls-unknown-waiting" })) : void 0;
        }
      } }, { key: "techWaiting_", value: function value() {
        var e = this.seekable(),
            t = this.tech_.currentTime();if (this.tech_.seeking() && this.fixesBadSeeks_()) return !0;if (this.tech_.seeking() || null !== this.timer_) return !0;if (this.beforeSeekableWindow_(e, t)) {
          var i = e.end(e.length - 1);return this.logger_("Fell out of live window at time " + t + ". Seeking to live point (seekable end) " + i), this.cancelTimer_(), this.seekTo(i), this.tech_.trigger({ type: "usage", name: "hls-live-resync" }), !0;
        }var n = this.tech_.buffered(),
            r = Il(n, t);if (this.videoUnderflow_(r, n, t)) return this.cancelTimer_(), this.seekTo(t), this.tech_.trigger({ type: "usage", name: "hls-video-underflow" }), !0;if (0 < r.length) {
          var a = r.start(0) - t;return this.logger_("Stopped at " + t + ", setting timer for " + a + ", seeking to " + r.start(0)), this.timer_ = setTimeout(this.skipTheGap_.bind(this), 1e3 * a, t), !0;
        }return !1;
      } }, { key: "afterSeekableWindow_", value: function value(e, t, i) {
        var n = 3 < arguments.length && void 0 !== arguments[3] && arguments[3];if (!e.length) return !1;var r = e.end(e.length - 1) + .1;return !i.endList && n && (r = e.end(e.length - 1) + 3 * i.targetDuration), r < t;
      } }, { key: "beforeSeekableWindow_", value: function value(e, t) {
        return !!(e.length && 0 < e.start(0) && t < e.start(0) - .1);
      } }, { key: "videoUnderflow_", value: function value(e, t, i) {
        if (0 === e.length) {
          var n = this.gapFromVideoUnderflow_(t, i);if (n) return this.logger_("Encountered a gap in video from " + n.start + " to " + n.end + ". Seeking to current time " + i), !0;
        }return !1;
      } }, { key: "skipTheGap_", value: function value(e) {
        var t = this.tech_.buffered(),
            i = this.tech_.currentTime(),
            n = Il(t, i);this.cancelTimer_(), 0 !== n.length && i === e && (this.logger_("skipTheGap_:", "currentTime:", i, "scheduled currentTime:", e, "nextRange start:", n.start(0)), this.seekTo(n.start(0) + Ll), this.tech_.trigger({ type: "usage", name: "hls-gap-skip" }));
      } }, { key: "gapFromVideoUnderflow_", value: function value(e, t) {
        for (var i = function (e) {
          if (e.length < 2) return jr.createTimeRanges();for (var t = [], i = 1; i < e.length; i++) {
            var n = e.end(i - 1),
                r = e.start(i);t.push([n, r]);
          }return jr.createTimeRanges(t);
        }(e), n = 0; n < i.length; n++) {
          var r = i.start(n),
              a = i.end(n);if (t - r < 4 && 2 < t - r) return { start: r, end: a };
        }return null;
      } }]), s;
  }(),
      ed = { errorInterval: 30, getSource: function getSource(e) {
      return e(this.tech({ IWillNotUseThisInPlugins: !0 }).currentSource_);
    } },
      td = function td(e) {
    !function t(i, e) {
      var n = 0,
          r = 0,
          a = jr.mergeOptions(ed, e);i.ready(function () {
        i.trigger({ type: "usage", name: "hls-error-reload-initialized" });
      });var s = function s() {
        r && i.currentTime(r);
      },
          o = function o(e) {
        null != e && (r = i.duration() !== 1 / 0 && i.currentTime() || 0, i.one("loadedmetadata", s), i.src(e), i.trigger({ type: "usage", name: "hls-error-reload" }), i.play());
      },
          u = function u() {
        if (Date.now() - n < 1e3 * a.errorInterval) i.trigger({ type: "usage", name: "hls-error-reload-canceled" });else {
          if (a.getSource && "function" == typeof a.getSource) return n = Date.now(), a.getSource.call(i, o);jr.log.error("ERROR: reloadSourceOnError - The option getSource must be a function!");
        }
      },
          l = function e() {
        i.off("loadedmetadata", s), i.off("error", u), i.off("dispose", e);
      };i.on("error", u), i.on("dispose", l), i.reloadSourceOnError = function (e) {
        l(), t(i, e);
      };
    }(this, e);
  };jr.use("*", function (t) {
    return { setSource: function setSource(e, t) {
        t(null, e);
      }, setCurrentTime: function setCurrentTime(e) {
        return t.vhs && t.currentSource().src === t.vhs.source_.src && t.vhs.setCurrentTime(e), e;
      }, play: function play() {
        t.vhs && t.currentSource().src === t.vhs.source_.src && t.vhs.setCurrentTime(t.tech_.currentTime());
      } };
  });var id = { PlaylistLoader: el, Playlist: gl, Decrypter: Nu, AsyncStream: Ru, decrypt: Bu, utils: wl, STANDARD_PLAYLIST_SELECTOR: function STANDARD_PLAYLIST_SELECTOR() {
      return function (e, t, i, n, r) {
        var a = e.playlists.map(function (e) {
          var t, i;return t = e.attributes.RESOLUTION && e.attributes.RESOLUTION.width, i = e.attributes.RESOLUTION && e.attributes.RESOLUTION.height, { bandwidth: e.attributes.BANDWIDTH || v.Number.MAX_VALUE, width: t, height: i, playlist: e };
        });Ac(a, function (e, t) {
          return e.bandwidth - t.bandwidth;
        });var s = (a = a.filter(function (e) {
          return !gl.isIncompatible(e.playlist);
        })).filter(function (e) {
          return gl.isEnabled(e.playlist);
        });s.length || (s = a.filter(function (e) {
          return !gl.isDisabled(e.playlist);
        }));var o = s.filter(function (e) {
          return e.bandwidth * gc.BANDWIDTH_VARIANCE < t;
        }),
            u = o[o.length - 1],
            l = o.filter(function (e) {
          return e.bandwidth === u.bandwidth;
        })[0];if (!1 === r) {
          var c = l || s[0] || a[0];return c ? c.playlist : null;
        }var d = o.filter(function (e) {
          return e.width && e.height;
        });Ac(d, function (e, t) {
          return e.width - t.width;
        });var h = d.filter(function (e) {
          return e.width === i && e.height === n;
        });u = h[h.length - 1];var p = h.filter(function (e) {
          return e.bandwidth === u.bandwidth;
        })[0],
            f = void 0,
            m = void 0,
            g = void 0;p || (m = (f = d.filter(function (e) {
          return e.width > i || e.height > n;
        })).filter(function (e) {
          return e.width === f[0].width && e.height === f[0].height;
        }), u = m[m.length - 1], g = m.filter(function (e) {
          return e.bandwidth === u.bandwidth;
        })[0]);var y = g || p || l || s[0] || a[0];return y ? y.playlist : null;
      }(this.playlists.master, this.systemBandwidth, parseInt(Ec(this.tech_.el(), "width"), 10), parseInt(Ec(this.tech_.el(), "height"), 10), this.limitRenditionByPlayerDimensions);
    }, INITIAL_PLAYLIST_SELECTOR: function INITIAL_PLAYLIST_SELECTOR() {
      var e = this.playlists.master.playlists.filter(gl.isEnabled);return Ac(e, function (e, t) {
        return Lc(e, t);
      }), e.filter(function (e) {
        return Ql(e.attributes.CODECS).videoCodec;
      })[0] || null;
    }, comparePlaylistBandwidth: Lc, comparePlaylistResolution: function comparePlaylistResolution(e, t) {
      var i = void 0,
          n = void 0;return e.attributes.RESOLUTION && e.attributes.RESOLUTION.width && (i = e.attributes.RESOLUTION.width), i = i || v.Number.MAX_VALUE, t.attributes.RESOLUTION && t.attributes.RESOLUTION.width && (n = t.attributes.RESOLUTION.width), i === (n = n || v.Number.MAX_VALUE) && e.attributes.BANDWIDTH && t.attributes.BANDWIDTH ? e.attributes.BANDWIDTH - t.attributes.BANDWIDTH : i - n;
    }, xhr: _l() };["GOAL_BUFFER_LENGTH", "MAX_GOAL_BUFFER_LENGTH", "GOAL_BUFFER_LENGTH_RATE", "BUFFER_LOW_WATER_LINE", "MAX_BUFFER_LOW_WATER_LINE", "BUFFER_LOW_WATER_LINE_RATE", "BANDWIDTH_VARIANCE"].forEach(function (t) {
    Object.defineProperty(id, t, { get: function get() {
        return jr.log.warn("using Hls." + t + " is UNSAFE be sure you know what you are doing"), gc[t];
      }, set: function set(e) {
        jr.log.warn("using Hls." + t + " is UNSAFE be sure you know what you are doing"), "number" != typeof e || e < 0 ? jr.log.warn("value of Hls." + t + " must be greater than or equal to 0") : gc[t] = e;
      } });
  });var nd = "videojs-vhs",
      rd = function rd(e) {
    if (/^(audio|video|application)\/(x-|vnd\.apple\.)?mpegurl/i.test(e)) return "hls";return (/^application\/dash\+xml/i.test(e) ? "dash" : null
    );
  },
      ad = function ad(e, t) {
    for (var i = t.media(), n = -1, r = 0; r < e.length; r++) {
      if (e[r].id === i.uri) {
        n = r;break;
      }
    }e.selectedIndex_ = n, e.trigger({ selectedIndex: n, type: "change" });
  };id.canPlaySource = function () {
    return jr.log.warn("HLS is no longer a tech. Please remove it from your player's techOrder.");
  };var sd = function sd(e) {
    if ("dash" === e.options_.sourceType) {
      var t = jr.players[e.tech_.options_.playerId];if (t.eme) {
        var i = function (e, t, i) {
          if (!e) return e;var n = {};for (var r in e) {
            n[r] = { audioContentType: 'audio/mp4; codecs="' + i.attributes.CODECS + '"', videoContentType: 'video/mp4; codecs="' + t.attributes.CODECS + '"' }, t.contentProtection && t.contentProtection[r] && t.contentProtection[r].pssh && (n[r].pssh = t.contentProtection[r].pssh), "string" == typeof e[r] && (n[r].url = e[r]);
          }return jr.mergeOptions(e, n);
        }(e.source_.keySystems, e.playlists.media(), e.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader.media());i && (t.currentSource().keySystems = i, t.eme.initializeMediaKeys && t.eme.initializeMediaKeys());
      }
    }
  },
      od = function od() {
    if (!window.localStorage) return null;var e = window.localStorage.getItem(nd);if (!e) return null;try {
      return JSON.parse(e);
    } catch (e) {
      return null;
    }
  };id.supportsNativeHls = function () {
    var t = d.createElement("video");if (!jr.getTech("Html5").isSupported()) return !1;return ["application/vnd.apple.mpegurl", "audio/mpegurl", "audio/x-mpegurl", "application/x-mpegurl", "video/x-mpegurl", "video/mpegurl", "application/mpegurl"].some(function (e) {
      return (/maybe|probably/i.test(t.canPlayType(e))
      );
    });
  }(), id.supportsNativeDash = !!jr.getTech("Html5").isSupported() && /maybe|probably/i.test(d.createElement("video").canPlayType("application/dash+xml")), id.supportsTypeNatively = function (e) {
    return "hls" === e ? id.supportsNativeHls : "dash" === e && id.supportsNativeDash;
  }, id.isSupported = function () {
    return jr.log.warn("HLS is no longer a tech. Please remove it from your player's techOrder.");
  };var ud = jr.getComponent("Component"),
      ld = function (e) {
    function a(e, t, i) {
      Hu(this, a);var n = zu(this, (a.__proto__ || Object.getPrototypeOf(a)).call(this, t, i.hls));if (t.options_ && t.options_.playerId) {
        var r = jr(t.options_.playerId);r.hasOwnProperty("hls") || Object.defineProperty(r, "hls", { get: function get() {
            return jr.log.warn("player.hls is deprecated. Use player.tech().hls instead."), t.trigger({ type: "usage", name: "hls-player-access" }), n;
          }, configurable: !0 }), r.vhs = n, (r.dash = n).player_ = r;
      }if (n.tech_ = t, n.source_ = e, n.stats = {}, n.setOptions_(), n.options_.overrideNative && t.overrideNativeAudioTracks && t.overrideNativeVideoTracks) t.overrideNativeAudioTracks(!0), t.overrideNativeVideoTracks(!0);else if (n.options_.overrideNative && (t.featuresNativeVideoTracks || t.featuresNativeAudioTracks)) throw new Error("Overriding native HLS requires emulated tracks. See https://git.io/vMpjB");return n.on(d, ["fullscreenchange", "webkitfullscreenchange", "mozfullscreenchange", "MSFullscreenChange"], function (e) {
        var t = d.fullscreenElement || d.webkitFullscreenElement || d.mozFullScreenElement || d.msFullscreenElement;t && t.contains(n.tech_.el()) && n.masterPlaylistController_.smoothQualityChange_();
      }), n.on(n.tech_, "seeking", function () {
        0 === this.tech_.currentTime() && this.tech_.player_.loop() && this.setCurrentTime(0);
      }), n.on(n.tech_, "error", function () {
        this.masterPlaylistController_ && this.masterPlaylistController_.pauseLoading();
      }), n.on(n.tech_, "play", n.play), n;
    }return qu(a, ud), Vu(a, [{ key: "setOptions_", value: function value() {
        var t = this;if (this.options_.withCredentials = this.options_.withCredentials || !1, this.options_.handleManifestRedirects = this.options_.handleManifestRedirects || !1, this.options_.limitRenditionByPlayerDimensions = !1 !== this.options_.limitRenditionByPlayerDimensions, this.options_.smoothQualityChange = this.options_.smoothQualityChange || !1, this.options_.useBandwidthFromLocalStorage = "undefined" != typeof this.source_.useBandwidthFromLocalStorage ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || !1, this.options_.customTagParsers = this.options_.customTagParsers || [], this.options_.customTagMappers = this.options_.customTagMappers || [], "number" != typeof this.options_.blacklistDuration && (this.options_.blacklistDuration = 300), "number" != typeof this.options_.bandwidth && this.options_.useBandwidthFromLocalStorage) {
          var e = od();e && e.bandwidth && (this.options_.bandwidth = e.bandwidth, this.tech_.trigger({ type: "usage", name: "hls-bandwidth-from-local-storage" })), e && e.throughput && (this.options_.throughput = e.throughput, this.tech_.trigger({ type: "usage", name: "hls-throughput-from-local-storage" }));
        }"number" != typeof this.options_.bandwidth && (this.options_.bandwidth = gc.INITIAL_BANDWIDTH), this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === gc.INITIAL_BANDWIDTH, ["withCredentials", "limitRenditionByPlayerDimensions", "bandwidth", "smoothQualityChange", "customTagParsers", "customTagMappers", "handleManifestRedirects"].forEach(function (e) {
          "undefined" != typeof t.source_[e] && (t.options_[e] = t.source_[e]);
        }), this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions;
      } }, { key: "src", value: function value(e, t) {
        var n = this;e && (this.setOptions_(), this.options_.url = this.source_.src, this.options_.tech = this.tech_, this.options_.externHls = id, this.options_.sourceType = rd(t), this.options_.seekTo = function (e) {
          n.tech_.setCurrentTime(e), n.setCurrentTime(e);
        }, this.masterPlaylistController_ = new $c(this.options_), this.playbackWatcher_ = new Zc(jr.mergeOptions(this.options_, { seekable: function seekable() {
            return n.seekable();
          }, media: function media() {
            return n.masterPlaylistController_.media();
          } })), this.masterPlaylistController_.on("error", function () {
          jr.players[n.tech_.options_.playerId].error(n.masterPlaylistController_.error);
        }), this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : id.STANDARD_PLAYLIST_SELECTOR.bind(this), this.masterPlaylistController_.selectInitialPlaylist = id.INITIAL_PLAYLIST_SELECTOR.bind(this), this.playlists = this.masterPlaylistController_.masterPlaylistLoader_, this.mediaSource = this.masterPlaylistController_.mediaSource, Object.defineProperties(this, { selectPlaylist: { get: function get() {
              return this.masterPlaylistController_.selectPlaylist;
            }, set: function set(e) {
              this.masterPlaylistController_.selectPlaylist = e.bind(this);
            } }, throughput: { get: function get() {
              return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;
            }, set: function set(e) {
              this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = e, this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;
            } }, bandwidth: { get: function get() {
              return this.masterPlaylistController_.mainSegmentLoader_.bandwidth;
            }, set: function set(e) {
              this.masterPlaylistController_.mainSegmentLoader_.bandwidth = e, this.masterPlaylistController_.mainSegmentLoader_.throughput = { rate: 0, count: 0 };
            } }, systemBandwidth: { get: function get() {
              var e = 1 / (this.bandwidth || 1),
                  t = void 0;return t = 0 < this.throughput ? 1 / this.throughput : 0, Math.floor(1 / (e + t));
            }, set: function set() {
              jr.log.error('The "systemBandwidth" property is read-only');
            } } }), this.options_.bandwidth && (this.bandwidth = this.options_.bandwidth), this.options_.throughput && (this.throughput = this.options_.throughput), Object.defineProperties(this.stats, { bandwidth: { get: function get() {
              return n.bandwidth || 0;
            }, enumerable: !0 }, mediaRequests: { get: function get() {
              return n.masterPlaylistController_.mediaRequests_() || 0;
            }, enumerable: !0 }, mediaRequestsAborted: { get: function get() {
              return n.masterPlaylistController_.mediaRequestsAborted_() || 0;
            }, enumerable: !0 }, mediaRequestsTimedout: { get: function get() {
              return n.masterPlaylistController_.mediaRequestsTimedout_() || 0;
            }, enumerable: !0 }, mediaRequestsErrored: { get: function get() {
              return n.masterPlaylistController_.mediaRequestsErrored_() || 0;
            }, enumerable: !0 }, mediaTransferDuration: { get: function get() {
              return n.masterPlaylistController_.mediaTransferDuration_() || 0;
            }, enumerable: !0 }, mediaBytesTransferred: { get: function get() {
              return n.masterPlaylistController_.mediaBytesTransferred_() || 0;
            }, enumerable: !0 }, mediaSecondsLoaded: { get: function get() {
              return n.masterPlaylistController_.mediaSecondsLoaded_() || 0;
            }, enumerable: !0 }, buffered: { get: function get() {
              return Dl(n.tech_.buffered());
            }, enumerable: !0 }, currentTime: { get: function get() {
              return n.tech_.currentTime();
            }, enumerable: !0 }, currentSource: { get: function get() {
              return n.tech_.currentSource_;
            }, enumerable: !0 }, currentTech: { get: function get() {
              return n.tech_.name_;
            }, enumerable: !0 }, duration: { get: function get() {
              return n.tech_.duration();
            }, enumerable: !0 }, master: { get: function get() {
              return n.playlists.master;
            }, enumerable: !0 }, playerDimensions: { get: function get() {
              return n.tech_.currentDimensions();
            }, enumerable: !0 }, seekable: { get: function get() {
              return Dl(n.tech_.seekable());
            }, enumerable: !0 }, timestamp: { get: function get() {
              return Date.now();
            }, enumerable: !0 }, videoPlaybackQuality: { get: function get() {
              return n.tech_.getVideoPlaybackQuality();
            }, enumerable: !0 } }), this.tech_.one("canplay", this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_)), this.tech_.on("bandwidthupdate", function () {
          n.options_.useBandwidthFromLocalStorage && function (e) {
            if (!window.localStorage) return;var t = od();t = t ? jr.mergeOptions(t, e) : e;try {
              window.localStorage.setItem(nd, JSON.stringify(t));
            } catch (e) {
              return;
            }
          }({ bandwidth: n.bandwidth, throughput: Math.round(n.throughput) });
        }), this.masterPlaylistController_.on("selectedinitialmedia", function () {
          var i, e;e = (i = n).playlists, i.representations = function () {
            return e.master.playlists.filter(function (e) {
              return !hl(e);
            }).map(function (e, t) {
              return new Qc(i, e, e.uri);
            });
          }, sd(n);
        }), this.on(this.masterPlaylistController_, "progress", function () {
          this.tech_.trigger("progress");
        }), this.tech_.ready(function () {
          return n.setupQualityLevels_();
        }), this.tech_.el() && this.tech_.src(jr.URL.createObjectURL(this.masterPlaylistController_.mediaSource)));
      } }, { key: "setupQualityLevels_", value: function value() {
        var i = this,
            e = jr.players[this.tech_.options_.playerId];e && e.qualityLevels && (this.qualityLevels_ = e.qualityLevels(), this.masterPlaylistController_.on("selectedinitialmedia", function () {
          var t, e;t = i.qualityLevels_, (e = i).representations().forEach(function (e) {
            t.addQualityLevel(e);
          }), ad(t, e.playlists);
        }), this.playlists.on("mediachange", function () {
          ad(i.qualityLevels_, i.playlists);
        }));
      } }, { key: "play", value: function value() {
        this.masterPlaylistController_.play();
      } }, { key: "setCurrentTime", value: function value(e) {
        this.masterPlaylistController_.setCurrentTime(e);
      } }, { key: "duration", value: function value() {
        return this.masterPlaylistController_.duration();
      } }, { key: "seekable", value: function value() {
        return this.masterPlaylistController_.seekable();
      } }, { key: "dispose", value: function value() {
        this.playbackWatcher_ && this.playbackWatcher_.dispose(), this.masterPlaylistController_ && this.masterPlaylistController_.dispose(), this.qualityLevels_ && this.qualityLevels_.dispose(), this.player_ && (delete this.player_.vhs, delete this.player_.dash, delete this.player_.hls), this.tech_ && this.tech_.hls && delete this.tech_.hls, function e(t, i, n) {
          null === t && (t = Function.prototype);var r = Object.getOwnPropertyDescriptor(t, i);if (void 0 === r) {
            var a = Object.getPrototypeOf(t);return null === a ? void 0 : e(a, i, n);
          }if ("value" in r) return r.value;var s = r.get;return void 0 !== s ? s.call(n) : void 0;
        }(a.prototype.__proto__ || Object.getPrototypeOf(a.prototype), "dispose", this).call(this);
      } }, { key: "convertToProgramTime", value: function value(e, t) {
        return El({ playlist: this.masterPlaylistController_.media(), time: e, callback: t });
      } }, { key: "seekToProgramTime", value: function value(e, t) {
        var i = !(2 < arguments.length && void 0 !== arguments[2]) || arguments[2],
            n = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : 2;return Al({ programTime: e, playlist: this.masterPlaylistController_.media(), retryCount: n, pauseAfterSeek: i, seekTo: this.options_.seekTo, tech: this.options_.tech, callback: t });
      } }]), a;
  }(),
      cd = { name: "videojs-http-streaming", VERSION: "1.9.3", canHandleSource: function canHandleSource(e) {
      var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},
          i = jr.mergeOptions(jr.options, t);return cd.canPlayType(e.type, i);
    }, handleSource: function handleSource(e, t) {
      var i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {},
          n = jr.mergeOptions(jr.options, i);return t.hls = new ld(e, t, n), t.hls.xhr = _l(), t.hls.src(e.src, e.type), t.hls;
    }, canPlayType: function canPlayType(e) {
      var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},
          i = jr.mergeOptions(jr.options, t).hls.overrideNative,
          n = rd(e);return n && (!id.supportsTypeNatively(n) || i) ? "maybe" : "";
    } };return "undefined" != typeof jr.MediaSource && "undefined" != typeof jr.URL || (jr.MediaSource = oc, jr.URL = uc), oc.supportsNativeMediaSources() && jr.getTech("Html5").registerSourceHandler(cd, 0), jr.HlsHandler = ld, jr.HlsSourceHandler = cd, jr.Hls = id, jr.use || jr.registerComponent("Hls", id), jr.options.hls = jr.options.hls || {}, jr.registerPlugin ? jr.registerPlugin("reloadSourceOnError", td) : jr.plugin("reloadSourceOnError", td), jr;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,