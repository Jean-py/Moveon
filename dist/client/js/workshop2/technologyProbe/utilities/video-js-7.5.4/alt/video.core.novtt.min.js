"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * @license
 * Video.js 7.5.4 <http://videojs.com/>
 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
 * Available under Apache License Version 2.0
 * <https://github.com/videojs/video.js/blob/master/LICENSE>
 *
 * Includes vtt.js <https://github.com/mozilla/vtt.js>
 * Available under Apache License Version 2.0
 * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>
 */
!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = t(require("global/window"), require("global/document")) : "function" == typeof define && define.amd ? define(["global/window", "global/document"], t) : (e = e || self).videojs = t(e.window, e.document);
}(undefined, function (h, d) {
  h = h && h.hasOwnProperty("default") ? h.default : h, d = d && d.hasOwnProperty("default") ? d.default : d;var p = "7.5.4";function f(e, t) {
    e.prototype = Object.create(t.prototype), (e.prototype.constructor = e).__proto__ = t;
  }function s(e, t) {
    return (s = Object.setPrototypeOf || function (e, t) {
      return e.__proto__ = t, e;
    })(e, t);
  }function o(e, t, n) {
    return (o = function () {
      if ("undefined" == typeof Reflect || !Reflect.construct) return !1;if (Reflect.construct.sham) return !1;if ("function" == typeof Proxy) return !0;try {
        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
      } catch (e) {
        return !1;
      }
    }() ? Reflect.construct : function (e, t, n) {
      var i = [null];i.push.apply(i, t);var r = new (Function.bind.apply(e, i))();return n && s(r, n.prototype), r;
    }).apply(null, arguments);
  }function v(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e;
  }function t(e, t) {
    return t || (t = e.slice(0)), e.raw = t, e;
  }var l = [],
      e = function e(o, a) {
    return function (e, t, n) {
      var i = a.levels[t],
          r = new RegExp("^(" + i + ")$");if ("log" !== e && n.unshift(e.toUpperCase() + ":"), n.unshift(o + ":"), l && l.push([].concat(n)), h.console) {
        var s = h.console[e];s || "debug" !== e || (s = h.console.info || h.console.log), s && i && r.test(e) && s[Array.isArray(n) ? "apply" : "call"](h.console, n);
      }
    };
  };var g = function t(n) {
    var i,
        r = "info",
        s = function s() {
      for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
        t[n] = arguments[n];
      }i("log", r, t);
    };return i = e(n, s), s.createLogger = function (e) {
      return t(n + ": " + e);
    }, s.levels = { all: "debug|log|warn|error", off: "", debug: "debug|log|warn|error", info: "log|warn|error", warn: "warn|error", error: "error", DEFAULT: r }, s.level = function (e) {
      if ("string" == typeof e) {
        if (!s.levels.hasOwnProperty(e)) throw new Error('"' + e + '" in not a valid log level');r = e;
      }return r;
    }, (s.history = function () {
      return l ? [].concat(l) : [];
    }).filter = function (t) {
      return (l || []).filter(function (e) {
        return new RegExp(".*" + t + ".*").test(e[0]);
      });
    }, s.history.clear = function () {
      l && (l.length = 0);
    }, s.history.disable = function () {
      null !== l && (l.length = 0, l = null);
    }, s.history.enable = function () {
      null === l && (l = []);
    }, s.error = function () {
      for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
        t[n] = arguments[n];
      }return i("error", r, t);
    }, s.warn = function () {
      for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
        t[n] = arguments[n];
      }return i("warn", r, t);
    }, s.debug = function () {
      for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
        t[n] = arguments[n];
      }return i("debug", r, t);
    }, s;
  }("VIDEOJS"),
      y = g.createLogger;var _ = function _(e) {
    for (var t = "", n = 0; n < arguments.length; n++) {
      t += e[n].replace(/\n\r?\s*/g, "") + (arguments[n + 1] || "");
    }return t;
  },
      n = Object.prototype.toString,
      r = function r(e) {
    return b(e) ? Object.keys(e) : [];
  };function a(t, n) {
    r(t).forEach(function (e) {
      return n(t[e], e);
    });
  }function m(n) {
    for (var e = arguments.length, t = new Array(1 < e ? e - 1 : 0), i = 1; i < e; i++) {
      t[i - 1] = arguments[i];
    }return Object.assign ? Object.assign.apply(Object, [n].concat(t)) : (t.forEach(function (e) {
      e && a(e, function (e, t) {
        n[t] = e;
      });
    }), n);
  }function b(e) {
    return !!e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e));
  }function c(e) {
    return b(e) && "[object Object]" === n.call(e) && e.constructor === Object;
  }function i(e, t) {
    if (!e || !t) return "";if ("function" != typeof h.getComputedStyle) return "";var n = h.getComputedStyle(e);return n ? n[t] : "";
  }function u() {
    var e = t(["Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ", " to ", "."]);return u = function u() {
      return e;
    }, e;
  }function T(e) {
    return "string" == typeof e && /\S/.test(e);
  }function k(e) {
    if (/\s/.test(e)) throw new Error("class has illegal whitespace characters");
  }function C() {
    return d === h.document;
  }function E(e) {
    return b(e) && 1 === e.nodeType;
  }function S() {
    try {
      return h.parent !== h.self;
    } catch (e) {
      return !0;
    }
  }function w(i) {
    return function (e, t) {
      if (!T(e)) return d[i](null);T(t) && (t = d.querySelector(t));var n = E(t) ? t : d;return n[i] && n[i](e);
    };
  }function x(e, n, t, i) {
    void 0 === e && (e = "div"), void 0 === n && (n = {}), void 0 === t && (t = {});var r = d.createElement(e);return Object.getOwnPropertyNames(n).forEach(function (e) {
      var t = n[e];-1 !== e.indexOf("aria-") || "role" === e || "type" === e ? (g.warn(_(u(), e, t)), r.setAttribute(e, t)) : "textContent" === e ? j(r, t) : r[e] = t;
    }), Object.getOwnPropertyNames(t).forEach(function (e) {
      r.setAttribute(e, t[e]);
    }), i && X(r, i), r;
  }function j(e, t) {
    return "undefined" == typeof e.textContent ? e.innerText = t : e.textContent = t, e;
  }function P(e, t) {
    t.firstChild ? t.insertBefore(e, t.firstChild) : t.appendChild(e);
  }function A(e, t) {
    return k(t), e.classList ? e.classList.contains(t) : (n = t, new RegExp("(^|\\s)" + n + "($|\\s)")).test(e.className);var n;
  }function M(e, t) {
    return e.classList ? e.classList.add(t) : A(e, t) || (e.className = (e.className + " " + t).trim()), e;
  }function L(e, t) {
    return e.classList ? e.classList.remove(t) : (k(t), e.className = e.className.split(/\s+/).filter(function (e) {
      return e !== t;
    }).join(" ")), e;
  }function N(e, t, n) {
    var i = A(e, t);if ("function" == typeof n && (n = n(e, t)), "boolean" != typeof n && (n = !i), n !== i) return n ? M(e, t) : L(e, t), e;
  }function O(n, i) {
    Object.getOwnPropertyNames(i).forEach(function (e) {
      var t = i[e];null === t || "undefined" == typeof t || !1 === t ? n.removeAttribute(e) : n.setAttribute(e, !0 === t ? "" : t);
    });
  }function D(e) {
    var t = {},
        n = ",autoplay,controls,playsinline,loop,muted,default,defaultMuted,";if (e && e.attributes && 0 < e.attributes.length) for (var i = e.attributes, r = i.length - 1; 0 <= r; r--) {
      var s = i[r].name,
          o = i[r].value;"boolean" != typeof e[s] && -1 === n.indexOf("," + s + ",") || (o = null !== o), t[s] = o;
    }return t;
  }function I(e, t) {
    return e.getAttribute(t);
  }function F(e, t, n) {
    e.setAttribute(t, n);
  }function R(e, t) {
    e.removeAttribute(t);
  }function B() {
    d.body.focus(), d.onselectstart = function () {
      return !1;
    };
  }function H() {
    d.onselectstart = function () {
      return !0;
    };
  }function V(e) {
    if (e && e.getBoundingClientRect && e.parentNode) {
      var t = e.getBoundingClientRect(),
          n = {};return ["bottom", "height", "left", "right", "top", "width"].forEach(function (e) {
        void 0 !== t[e] && (n[e] = t[e]);
      }), n.height || (n.height = parseFloat(i(e, "height"))), n.width || (n.width = parseFloat(i(e, "width"))), n;
    }
  }function z(e) {
    var t;if (e.getBoundingClientRect && e.parentNode && (t = e.getBoundingClientRect()), !t) return { left: 0, top: 0 };var n = d.documentElement,
        i = d.body,
        r = n.clientLeft || i.clientLeft || 0,
        s = h.pageXOffset || i.scrollLeft,
        o = t.left + s - r,
        a = n.clientTop || i.clientTop || 0,
        l = h.pageYOffset || i.scrollTop,
        c = t.top + l - a;return { left: Math.round(o), top: Math.round(c) };
  }function K(e, t) {
    var n = {},
        i = z(e),
        r = e.offsetWidth,
        s = e.offsetHeight,
        o = i.top,
        a = i.left,
        l = t.pageY,
        c = t.pageX;return t.changedTouches && (c = t.changedTouches[0].pageX, l = t.changedTouches[0].pageY), n.y = Math.max(0, Math.min(1, (o - l + s) / s)), n.x = Math.max(0, Math.min(1, (c - a) / r)), n;
  }function W(e) {
    return b(e) && 3 === e.nodeType;
  }function U(e) {
    for (; e.firstChild;) {
      e.removeChild(e.firstChild);
    }return e;
  }function q(e) {
    return "function" == typeof e && (e = e()), (Array.isArray(e) ? e : [e]).map(function (e) {
      return "function" == typeof e && (e = e()), E(e) || W(e) ? e : "string" == typeof e && /\S/.test(e) ? d.createTextNode(e) : void 0;
    }).filter(function (e) {
      return e;
    });
  }function X(t, e) {
    return q(e).forEach(function (e) {
      return t.appendChild(e);
    }), t;
  }function $(e, t) {
    return X(U(e), t);
  }function G(e) {
    return void 0 === e.button && void 0 === e.buttons || 0 === e.button && void 0 === e.buttons || 0 === e.button && 1 === e.buttons;
  }var Y = w("querySelector"),
      Q = w("querySelectorAll"),
      J = Object.freeze({ isReal: C, isEl: E, isInFrame: S, createEl: x, textContent: j, prependTo: P, hasClass: A, addClass: M, removeClass: L, toggleClass: N, setAttributes: O, getAttributes: D, getAttribute: I, setAttribute: F, removeAttribute: R, blockTextSelection: B, unblockTextSelection: H, getBoundingClientRect: V, findPosition: z, getPointerPosition: K, isTextNode: W, emptyEl: U, normalizeContent: q, appendContent: X, insertContent: $, isSingleLeftClick: G, $: Y, $$: Q }),
      Z = 1;function ee() {
    return Z++;
  }var te = {},
      ne = "vdata" + new Date().getTime();function ie(e) {
    var t = e[ne];return t || (t = e[ne] = ee()), te[t] || (te[t] = {}), te[t];
  }function re(e) {
    var t = e[ne];return !!t && !!Object.getOwnPropertyNames(te[t]).length;
  }function se(t) {
    var e = t[ne];if (e) {
      delete te[e];try {
        delete t[ne];
      } catch (e) {
        t.removeAttribute ? t.removeAttribute(ne) : t[ne] = null;
      }
    }
  }function oe(e, t) {
    var n = ie(e);0 === n.handlers[t].length && (delete n.handlers[t], e.removeEventListener ? e.removeEventListener(t, n.dispatcher, !1) : e.detachEvent && e.detachEvent("on" + t, n.dispatcher)), Object.getOwnPropertyNames(n.handlers).length <= 0 && (delete n.handlers, delete n.dispatcher, delete n.disabled), 0 === Object.getOwnPropertyNames(n).length && se(e);
  }function ae(t, n, e, i) {
    e.forEach(function (e) {
      t(n, e, i);
    });
  }function le(e) {
    function t() {
      return !0;
    }function n() {
      return !1;
    }if (!e || !e.isPropagationStopped) {
      var i = e || h.event;for (var r in e = {}, i) {
        "layerX" !== r && "layerY" !== r && "keyLocation" !== r && "webkitMovementX" !== r && "webkitMovementY" !== r && ("returnValue" === r && i.preventDefault || (e[r] = i[r]));
      }if (e.target || (e.target = e.srcElement || d), e.relatedTarget || (e.relatedTarget = e.fromElement === e.target ? e.toElement : e.fromElement), e.preventDefault = function () {
        i.preventDefault && i.preventDefault(), e.returnValue = !1, i.returnValue = !1, e.defaultPrevented = !0;
      }, e.defaultPrevented = !1, e.stopPropagation = function () {
        i.stopPropagation && i.stopPropagation(), e.cancelBubble = !0, i.cancelBubble = !0, e.isPropagationStopped = t;
      }, e.isPropagationStopped = n, e.stopImmediatePropagation = function () {
        i.stopImmediatePropagation && i.stopImmediatePropagation(), e.isImmediatePropagationStopped = t, e.stopPropagation();
      }, e.isImmediatePropagationStopped = n, null !== e.clientX && void 0 !== e.clientX) {
        var s = d.documentElement,
            o = d.body;e.pageX = e.clientX + (s && s.scrollLeft || o && o.scrollLeft || 0) - (s && s.clientLeft || o && o.clientLeft || 0), e.pageY = e.clientY + (s && s.scrollTop || o && o.scrollTop || 0) - (s && s.clientTop || o && o.clientTop || 0);
      }e.which = e.charCode || e.keyCode, null !== e.button && void 0 !== e.button && (e.button = 1 & e.button ? 0 : 4 & e.button ? 1 : 2 & e.button ? 2 : 0);
    }return e;
  }var ce = !1;!function () {
    try {
      var e = Object.defineProperty({}, "passive", { get: function get() {
          ce = !0;
        } });h.addEventListener("test", null, e), h.removeEventListener("test", null, e);
    } catch (e) {}
  }();var ue = ["touchstart", "touchmove"];function he(o, e, t) {
    if (Array.isArray(e)) return ae(he, o, e, t);var a = ie(o);if (a.handlers || (a.handlers = {}), a.handlers[e] || (a.handlers[e] = []), t.guid || (t.guid = ee()), a.handlers[e].push(t), a.dispatcher || (a.disabled = !1, a.dispatcher = function (e, t) {
      if (!a.disabled) {
        e = le(e);var n = a.handlers[e.type];if (n) for (var i = n.slice(0), r = 0, s = i.length; r < s && !e.isImmediatePropagationStopped(); r++) {
          try {
            i[r].call(o, e, t);
          } catch (e) {
            g.error(e);
          }
        }
      }
    }), 1 === a.handlers[e].length) if (o.addEventListener) {
      var n = !1;ce && -1 < ue.indexOf(e) && (n = { passive: !0 }), o.addEventListener(e, a.dispatcher, n);
    } else o.attachEvent && o.attachEvent("on" + e, a.dispatcher);
  }function de(e, t, n) {
    if (re(e)) {
      var i = ie(e);if (i.handlers) {
        if (Array.isArray(t)) return ae(de, e, t, n);var r = function r(e, t) {
          i.handlers[t] = [], oe(e, t);
        };if (void 0 !== t) {
          var s = i.handlers[t];if (s) if (n) {
            if (n.guid) for (var o = 0; o < s.length; o++) {
              s[o].guid === n.guid && s.splice(o--, 1);
            }oe(e, t);
          } else r(e, t);
        } else for (var a in i.handlers) {
          Object.prototype.hasOwnProperty.call(i.handlers || {}, a) && r(e, a);
        }
      }
    }
  }function pe(e, t, n) {
    var i = re(e) ? ie(e) : {},
        r = e.parentNode || e.ownerDocument;if ("string" == typeof t ? t = { type: t, target: e } : t.target || (t.target = e), t = le(t), i.dispatcher && i.dispatcher.call(e, t, n), r && !t.isPropagationStopped() && !0 === t.bubbles) pe.call(null, r, t, n);else if (!r && !t.defaultPrevented && t.target && t.target[t.type]) {
      var s = ie(t.target);t.target[t.type] && (s.disabled = !0, "function" == typeof t.target[t.type] && t.target[t.type](), s.disabled = !1);
    }return !t.defaultPrevented;
  }function fe(t, n, i) {
    if (Array.isArray(n)) return ae(fe, t, n, i);var e = function e() {
      de(t, n, e), i.apply(this, arguments);
    };e.guid = i.guid = i.guid || ee(), he(t, n, e);
  }var ve,
      ge = Object.freeze({ fixEvent: le, on: he, off: de, trigger: pe, one: fe }),
      ye = !1,
      _e = function _e() {
    if (C() && !1 !== ve.options.autoSetup) {
      var e = Array.prototype.slice.call(d.getElementsByTagName("video")),
          t = Array.prototype.slice.call(d.getElementsByTagName("audio")),
          n = Array.prototype.slice.call(d.getElementsByTagName("video-js")),
          i = e.concat(t, n);if (i && 0 < i.length) for (var r = 0, s = i.length; r < s; r++) {
        var o = i[r];if (!o || !o.getAttribute) {
          me(1);break;
        }void 0 === o.player && null !== o.getAttribute("data-setup") && ve(o);
      } else ye || me(1);
    }
  };function me(e, t) {
    t && (ve = t), h.setTimeout(_e, e);
  }C() && "complete" === d.readyState ? ye = !0 : fe(h, "load", function () {
    ye = !0;
  });var be,
      Te = function Te(e) {
    var t = d.createElement("style");return t.className = e, t;
  },
      ke = function ke(e, t) {
    e.styleSheet ? e.styleSheet.cssText = t : e.textContent = t;
  },
      Ce = function Ce(e, t, n) {
    t.guid || (t.guid = ee());var i = function i() {
      return t.apply(e, arguments);
    };return i.guid = n ? n + "_" + t.guid : t.guid, i;
  },
      Ee = function Ee(t, n) {
    var i = Date.now();return function () {
      var e = Date.now();n <= e - i && (t.apply(void 0, arguments), i = e);
    };
  },
      Se = function Se() {};Se.prototype.allowedEvents_ = {}, Se.prototype.addEventListener = Se.prototype.on = function (e, t) {
    var n = this.addEventListener;this.addEventListener = function () {}, he(this, e, t), this.addEventListener = n;
  }, Se.prototype.removeEventListener = Se.prototype.off = function (e, t) {
    de(this, e, t);
  }, Se.prototype.one = function (e, t) {
    var n = this.addEventListener;this.addEventListener = function () {}, fe(this, e, t), this.addEventListener = n;
  }, Se.prototype.dispatchEvent = Se.prototype.trigger = function (e) {
    var t = e.type || e;"string" == typeof e && (e = { type: t }), e = le(e), this.allowedEvents_[t] && this["on" + t] && this["on" + t](e), pe(this, e);
  }, Se.prototype.queueTrigger = function (e) {
    var t = this;be || (be = new Map());var n = e.type || e,
        i = be.get(this);i || (i = new Map(), be.set(this, i));var r = i.get(n);i.delete(n), h.clearTimeout(r);var s = h.setTimeout(function () {
      0 === i.size && (i = null, be.delete(t)), t.trigger(e);
    }, 0);i.set(n, s);
  };var we = function we(t) {
    return t instanceof Se || !!t.eventBusEl_ && ["on", "one", "off", "trigger"].every(function (e) {
      return "function" == typeof t[e];
    });
  },
      xe = function xe(e) {
    return "string" == typeof e && /\S/.test(e) || Array.isArray(e) && !!e.length;
  },
      je = function je(e) {
    if (!e.nodeName && !we(e)) throw new Error("Invalid target; must be a DOM node or evented object.");
  },
      Pe = function Pe(e) {
    if (!xe(e)) throw new Error("Invalid event type; must be a non-empty string or array.");
  },
      Ae = function Ae(e) {
    if ("function" != typeof e) throw new Error("Invalid listener; must be a function.");
  },
      Me = function Me(e, t) {
    var n,
        i,
        r,
        s = t.length < 3 || t[0] === e || t[0] === e.eventBusEl_;return r = s ? (n = e.eventBusEl_, 3 <= t.length && t.shift(), i = t[0], t[1]) : (n = t[0], i = t[1], t[2]), je(n), Pe(i), Ae(r), { isTargetingSelf: s, target: n, type: i, listener: r = Ce(e, r) };
  },
      Le = function Le(e, t, n, i) {
    je(e), e.nodeName ? ge[t](e, n, i) : e[t](n, i);
  },
      Ne = { on: function on() {
      for (var e = this, t = arguments.length, n = new Array(t), i = 0; i < t; i++) {
        n[i] = arguments[i];
      }var r = Me(this, n),
          s = r.isTargetingSelf,
          o = r.target,
          a = r.type,
          l = r.listener;if (Le(o, "on", a, l), !s) {
        var c = function c() {
          return e.off(o, a, l);
        };c.guid = l.guid;var u = function u() {
          return e.off("dispose", c);
        };u.guid = l.guid, Le(this, "on", "dispose", c), Le(o, "on", "dispose", u);
      }
    }, one: function one() {
      for (var r = this, e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
        t[n] = arguments[n];
      }var i = Me(this, t),
          s = i.isTargetingSelf,
          o = i.target,
          a = i.type,
          l = i.listener;if (s) Le(o, "one", a, l);else {
        var c = function e() {
          r.off(o, a, e);for (var t = arguments.length, n = new Array(t), i = 0; i < t; i++) {
            n[i] = arguments[i];
          }l.apply(null, n);
        };c.guid = l.guid, Le(o, "one", a, c);
      }
    }, off: function off(e, t, n) {
      if (!e || xe(e)) de(this.eventBusEl_, e, t);else {
        var i = e,
            r = t;je(i), Pe(r), Ae(n), n = Ce(this, n), this.off("dispose", n), i.nodeName ? (de(i, r, n), de(i, "dispose", n)) : we(i) && (i.off(r, n), i.off("dispose", n));
      }
    }, trigger: function trigger(e, t) {
      return pe(this.eventBusEl_, e, t);
    } };function Oe(e, t) {
    void 0 === t && (t = {});var n = t.eventBusKey;if (n) {
      if (!e[n].nodeName) throw new Error('The eventBusKey "' + n + '" does not refer to an element.');e.eventBusEl_ = e[n];
    } else e.eventBusEl_ = x("span", { className: "vjs-event-bus" });return m(e, Ne), e.eventedCallbacks && e.eventedCallbacks.forEach(function (e) {
      e();
    }), e.on("dispose", function () {
      e.off(), h.setTimeout(function () {
        e.eventBusEl_ = null;
      }, 0);
    }), e;
  }var De = { state: {}, setState: function setState(e) {
      var n,
          i = this;return "function" == typeof e && (e = e()), a(e, function (e, t) {
        i.state[t] !== e && ((n = n || {})[t] = { from: i.state[t], to: e }), i.state[t] = e;
      }), n && we(this) && this.trigger({ changes: n, type: "statechanged" }), n;
    } };function Ie(e, t) {
    return m(e, De), e.state = m({}, e.state, t), "function" == typeof e.handleStateChanged && we(e) && e.on("statechanged", e.handleStateChanged), e;
  }function Fe(e) {
    return "string" != typeof e ? e : e.charAt(0).toUpperCase() + e.slice(1);
  }function Re() {
    for (var n = {}, e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
      t[i] = arguments[i];
    }return t.forEach(function (e) {
      e && a(e, function (e, t) {
        c(e) ? (c(n[t]) || (n[t] = {}), n[t] = Re(n[t], e)) : n[t] = e;
      });
    }), n;
  }var Be = function () {
    function c(e, t, n) {
      if (!e && this.play ? this.player_ = e = this : this.player_ = e, this.parentComponent_ = null, this.options_ = Re({}, this.options_), t = this.options_ = Re(this.options_, t), this.id_ = t.id || t.el && t.el.id, !this.id_) {
        var i = e && e.id && e.id() || "no_player";this.id_ = i + "_component_" + ee();
      }this.name_ = t.name || null, t.el ? this.el_ = t.el : !1 !== t.createEl && (this.el_ = this.createEl()), !1 !== t.evented && Oe(this, { eventBusKey: this.el_ ? "el_" : null }), Ie(this, this.constructor.defaultState), this.children_ = [], this.childIndex_ = {}, !(this.childNameIndex_ = {}) !== t.initChildren && this.initChildren(), this.ready(n), !1 !== t.reportTouchActivity && this.enableTouchActivity();
    }var e = c.prototype;return e.dispose = function () {
      if (this.trigger({ type: "dispose", bubbles: !1 }), this.children_) for (var e = this.children_.length - 1; 0 <= e; e--) {
        this.children_[e].dispose && this.children_[e].dispose();
      }this.children_ = null, this.childIndex_ = null, this.childNameIndex_ = null, this.parentComponent_ = null, this.el_ && (this.el_.parentNode && this.el_.parentNode.removeChild(this.el_), se(this.el_), this.el_ = null), this.player_ = null;
    }, e.player = function () {
      return this.player_;
    }, e.options = function (e) {
      return g.warn("this.options() has been deprecated and will be moved to the constructor in 6.0"), e && (this.options_ = Re(this.options_, e)), this.options_;
    }, e.el = function () {
      return this.el_;
    }, e.createEl = function (e, t, n) {
      return x(e, t, n);
    }, e.localize = function (e, r, t) {
      void 0 === t && (t = e);var n = this.player_.language && this.player_.language(),
          i = this.player_.languages && this.player_.languages(),
          s = i && i[n],
          o = n && n.split("-")[0],
          a = i && i[o],
          l = t;return s && s[e] ? l = s[e] : a && a[e] && (l = a[e]), r && (l = l.replace(/\{(\d+)\}/g, function (e, t) {
        var n = r[t - 1],
            i = n;return "undefined" == typeof n && (i = e), i;
      })), l;
    }, e.contentEl = function () {
      return this.contentEl_ || this.el_;
    }, e.id = function () {
      return this.id_;
    }, e.name = function () {
      return this.name_;
    }, e.children = function () {
      return this.children_;
    }, e.getChildById = function (e) {
      return this.childIndex_[e];
    }, e.getChild = function (e) {
      if (e) return e = Fe(e), this.childNameIndex_[e];
    }, e.addChild = function (e, t, n) {
      var i, r;if (void 0 === t && (t = {}), void 0 === n && (n = this.children_.length), "string" == typeof e) {
        r = Fe(e);var s = t.componentClass || r;t.name = r;var o = c.getComponent(s);if (!o) throw new Error("Component " + s + " does not exist");if ("function" != typeof o) return null;i = new o(this.player_ || this, t);
      } else i = e;if (i.parentComponent_ && i.parentComponent_.removeChild(i), this.children_.splice(n, 0, i), i.parentComponent_ = this, "function" == typeof i.id && (this.childIndex_[i.id()] = i), (r = r || i.name && Fe(i.name())) && (this.childNameIndex_[r] = i), "function" == typeof i.el && i.el()) {
        var a = this.contentEl().children[n] || null;this.contentEl().insertBefore(i.el(), a);
      }return i;
    }, e.removeChild = function (e) {
      if ("string" == typeof e && (e = this.getChild(e)), e && this.children_) {
        for (var t = !1, n = this.children_.length - 1; 0 <= n; n--) {
          if (this.children_[n] === e) {
            t = !0, this.children_.splice(n, 1);break;
          }
        }if (t) {
          e.parentComponent_ = null, this.childIndex_[e.id()] = null, this.childNameIndex_[e.name()] = null;var i = e.el();i && i.parentNode === this.contentEl() && this.contentEl().removeChild(e.el());
        }
      }
    }, e.initChildren = function () {
      var r = this,
          i = this.options_.children;if (i) {
        var e,
            s = this.options_,
            n = c.getComponent("Tech");(e = Array.isArray(i) ? i : Object.keys(i)).concat(Object.keys(this.options_).filter(function (t) {
          return !e.some(function (e) {
            return "string" == typeof e ? t === e : t === e.name;
          });
        })).map(function (e) {
          var t, n;return n = "string" == typeof e ? i[t = e] || r.options_[t] || {} : (t = e.name, e), { name: t, opts: n };
        }).filter(function (e) {
          var t = c.getComponent(e.opts.componentClass || Fe(e.name));return t && !n.isTech(t);
        }).forEach(function (e) {
          var t = e.name,
              n = e.opts;if (void 0 !== s[t] && (n = s[t]), !1 !== n) {
            !0 === n && (n = {}), n.playerOptions = r.options_.playerOptions;var i = r.addChild(t, n);i && (r[t] = i);
          }
        });
      }
    }, e.buildCSSClass = function () {
      return "";
    }, e.ready = function (e, t) {
      if (void 0 === t && (t = !1), e) return this.isReady_ ? void (t ? e.call(this) : this.setTimeout(e, 1)) : (this.readyQueue_ = this.readyQueue_ || [], void this.readyQueue_.push(e));
    }, e.triggerReady = function () {
      this.isReady_ = !0, this.setTimeout(function () {
        var e = this.readyQueue_;this.readyQueue_ = [], e && 0 < e.length && e.forEach(function (e) {
          e.call(this);
        }, this), this.trigger("ready");
      }, 1);
    }, e.$ = function (e, t) {
      return Y(e, t || this.contentEl());
    }, e.$$ = function (e, t) {
      return Q(e, t || this.contentEl());
    }, e.hasClass = function (e) {
      return A(this.el_, e);
    }, e.addClass = function (e) {
      M(this.el_, e);
    }, e.removeClass = function (e) {
      L(this.el_, e);
    }, e.toggleClass = function (e, t) {
      N(this.el_, e, t);
    }, e.show = function () {
      this.removeClass("vjs-hidden");
    }, e.hide = function () {
      this.addClass("vjs-hidden");
    }, e.lockShowing = function () {
      this.addClass("vjs-lock-showing");
    }, e.unlockShowing = function () {
      this.removeClass("vjs-lock-showing");
    }, e.getAttribute = function (e) {
      return I(this.el_, e);
    }, e.setAttribute = function (e, t) {
      F(this.el_, e, t);
    }, e.removeAttribute = function (e) {
      R(this.el_, e);
    }, e.width = function (e, t) {
      return this.dimension("width", e, t);
    }, e.height = function (e, t) {
      return this.dimension("height", e, t);
    }, e.dimensions = function (e, t) {
      this.width(e, !0), this.height(t);
    }, e.dimension = function (e, t, n) {
      if (void 0 !== t) return null !== t && t == t || (t = 0), -1 !== ("" + t).indexOf("%") || -1 !== ("" + t).indexOf("px") ? this.el_.style[e] = t : this.el_.style[e] = "auto" === t ? "" : t + "px", void (n || this.trigger("componentresize"));if (!this.el_) return 0;var i = this.el_.style[e],
          r = i.indexOf("px");return -1 !== r ? parseInt(i.slice(0, r), 10) : parseInt(this.el_["offset" + Fe(e)], 10);
    }, e.currentDimension = function (e) {
      var t = 0;if ("width" !== e && "height" !== e) throw new Error("currentDimension only accepts width or height value");if ("function" == typeof h.getComputedStyle) {
        var n = h.getComputedStyle(this.el_);t = n.getPropertyValue(e) || n[e];
      }if (0 === (t = parseFloat(t))) {
        var i = "offset" + Fe(e);t = this.el_[i];
      }return t;
    }, e.currentDimensions = function () {
      return { width: this.currentDimension("width"), height: this.currentDimension("height") };
    }, e.currentWidth = function () {
      return this.currentDimension("width");
    }, e.currentHeight = function () {
      return this.currentDimension("height");
    }, e.focus = function () {
      this.el_.focus();
    }, e.blur = function () {
      this.el_.blur();
    }, e.handleKeyPress = function (e) {
      this.player_ && this.player_.handleKeyPress(e);
    }, e.emitTapEvents = function () {
      var i,
          t = 0,
          r = null;this.on("touchstart", function (e) {
        1 === e.touches.length && (r = { pageX: e.touches[0].pageX, pageY: e.touches[0].pageY }, t = new Date().getTime(), i = !0);
      }), this.on("touchmove", function (e) {
        if (1 < e.touches.length) i = !1;else if (r) {
          var t = e.touches[0].pageX - r.pageX,
              n = e.touches[0].pageY - r.pageY;10 < Math.sqrt(t * t + n * n) && (i = !1);
        }
      });var e = function e() {
        i = !1;
      };this.on("touchleave", e), this.on("touchcancel", e), this.on("touchend", function (e) {
        !(r = null) === i && new Date().getTime() - t < 200 && (e.preventDefault(), this.trigger("tap"));
      });
    }, e.enableTouchActivity = function () {
      if (this.player() && this.player().reportUserActivity) {
        var t,
            n = Ce(this.player(), this.player().reportUserActivity);this.on("touchstart", function () {
          n(), this.clearInterval(t), t = this.setInterval(n, 250);
        });var e = function e(_e2) {
          n(), this.clearInterval(t);
        };this.on("touchmove", n), this.on("touchend", e), this.on("touchcancel", e);
      }
    }, e.setTimeout = function (e, t) {
      var n,
          i,
          r = this;return e = Ce(this, e), n = h.setTimeout(function () {
        r.off("dispose", i), e();
      }, t), (i = function i() {
        return r.clearTimeout(n);
      }).guid = "vjs-timeout-" + n, this.on("dispose", i), n;
    }, e.clearTimeout = function (e) {
      h.clearTimeout(e);var t = function t() {};return t.guid = "vjs-timeout-" + e, this.off("dispose", t), e;
    }, e.setInterval = function (e, t) {
      var n = this;e = Ce(this, e);var i = h.setInterval(e, t),
          r = function r() {
        return n.clearInterval(i);
      };return r.guid = "vjs-interval-" + i, this.on("dispose", r), i;
    }, e.clearInterval = function (e) {
      h.clearInterval(e);var t = function t() {};return t.guid = "vjs-interval-" + e, this.off("dispose", t), e;
    }, e.requestAnimationFrame = function (e) {
      var t,
          n,
          i = this;return this.supportsRaf_ ? (e = Ce(this, e), t = h.requestAnimationFrame(function () {
        i.off("dispose", n), e();
      }), (n = function n() {
        return i.cancelAnimationFrame(t);
      }).guid = "vjs-raf-" + t, this.on("dispose", n), t) : this.setTimeout(e, 1e3 / 60);
    }, e.cancelAnimationFrame = function (e) {
      if (this.supportsRaf_) {
        h.cancelAnimationFrame(e);var t = function t() {};return t.guid = "vjs-raf-" + e, this.off("dispose", t), e;
      }return this.clearTimeout(e);
    }, c.registerComponent = function (e, t) {
      if ("string" != typeof e || !e) throw new Error('Illegal component name, "' + e + '"; must be a non-empty string.');var n,
          i = c.getComponent("Tech"),
          r = i && i.isTech(t),
          s = c === t || c.prototype.isPrototypeOf(t.prototype);if (r || !s) throw n = r ? "techs must be registered using Tech.registerTech()" : "must be a Component subclass", new Error('Illegal component, "' + e + '"; ' + n + ".");e = Fe(e), c.components_ || (c.components_ = {});var o = c.getComponent("Player");if ("Player" === e && o && o.players) {
        var a = o.players,
            l = Object.keys(a);if (a && 0 < l.length && l.map(function (e) {
          return a[e];
        }).every(Boolean)) throw new Error("Can not register Player component after player has been created.");
      }return c.components_[e] = t;
    }, c.getComponent = function (e) {
      if (e) return e = Fe(e), c.components_ && c.components_[e] ? c.components_[e] : void 0;
    }, c;
  }();Be.prototype.supportsRaf_ = "function" == typeof h.requestAnimationFrame && "function" == typeof h.cancelAnimationFrame, Be.registerComponent("Component", Be);var He,
      Ve,
      ze,
      Ke,
      We = h.navigator && h.navigator.userAgent || "",
      Ue = /AppleWebKit\/([\d.]+)/i.exec(We),
      qe = Ue ? parseFloat(Ue.pop()) : null,
      Xe = /iPad/i.test(We),
      $e = /iPhone/i.test(We) && !Xe,
      Ge = /iPod/i.test(We),
      Ye = $e || Xe || Ge,
      Qe = (He = We.match(/OS (\d+)_/i)) && He[1] ? He[1] : null,
      Je = /Android/i.test(We),
      Ze = function () {
    var e = We.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);if (!e) return null;var t = e[1] && parseFloat(e[1]),
        n = e[2] && parseFloat(e[2]);return t && n ? parseFloat(e[1] + "." + e[2]) : t || null;
  }(),
      et = Je && Ze < 5 && qe < 537,
      tt = /Firefox/i.test(We),
      nt = /Edge/i.test(We),
      it = !nt && (/Chrome/i.test(We) || /CriOS/i.test(We)),
      rt = (Ve = We.match(/(Chrome|CriOS)\/(\d+)/)) && Ve[2] ? parseFloat(Ve[2]) : null,
      st = (ze = /MSIE\s(\d+)\.\d/.exec(We), !(Ke = ze && parseFloat(ze[1])) && /Trident\/7.0/i.test(We) && /rv:11.0/.test(We) && (Ke = 11), Ke),
      ot = /Safari/i.test(We) && !it && !Je && !nt,
      at = (ot || Ye) && !it,
      lt = C() && ("ontouchstart" in h || h.navigator.maxTouchPoints || h.DocumentTouch && h.document instanceof h.DocumentTouch),
      ct = Object.freeze({ IS_IPAD: Xe, IS_IPHONE: $e, IS_IPOD: Ge, IS_IOS: Ye, IOS_VERSION: Qe, IS_ANDROID: Je, ANDROID_VERSION: Ze, IS_NATIVE_ANDROID: et, IS_FIREFOX: tt, IS_EDGE: nt, IS_CHROME: it, CHROME_VERSION: rt, IE_VERSION: st, IS_SAFARI: ot, IS_ANY_SAFARI: at, TOUCH_ENABLED: lt });function ut(e, t, n, i) {
    return function (e, t, n) {
      if ("number" != typeof t || t < 0 || n < t) throw new Error("Failed to execute '" + e + "' on 'TimeRanges': The index provided (" + t + ") is non-numeric or out of bounds (0-" + n + ").");
    }(e, i, n.length - 1), n[i][t];
  }function ht(e) {
    return void 0 === e || 0 === e.length ? { length: 0, start: function start() {
        throw new Error("This TimeRanges object is empty");
      }, end: function end() {
        throw new Error("This TimeRanges object is empty");
      } } : { length: e.length, start: ut.bind(null, "start", 0, e), end: ut.bind(null, "end", 1, e) };
  }function dt(e, t) {
    return Array.isArray(e) ? ht(e) : void 0 === e || void 0 === t ? ht() : ht([[e, t]]);
  }function pt(e, t) {
    var n,
        i,
        r = 0;if (!t) return 0;e && e.length || (e = dt(0, 0));for (var s = 0; s < e.length; s++) {
      n = e.start(s), t < (i = e.end(s)) && (i = t), r += i - n;
    }return r / t;
  }for (var ft, vt = {}, gt = [["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror", "fullscreen"], ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror", "-webkit-full-screen"], ["mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror", "-moz-full-screen"], ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError", "-ms-fullscreen"]], yt = gt[0], _t = !1, mt = 0; mt < gt.length; mt++) {
    if (gt[mt][1] in d) {
      ft = gt[mt];break;
    }
  }if (ft) {
    for (var bt = 0; bt < ft.length; bt++) {
      vt[yt[bt]] = ft[bt];
    }_t = ft[0] === yt[0];
  }function Tt(e) {
    if (e instanceof Tt) return e;"number" == typeof e ? this.code = e : "string" == typeof e ? this.message = e : b(e) && ("number" == typeof e.code && (this.code = e.code), m(this, e)), this.message || (this.message = Tt.defaultMessages[this.code] || "");
  }Tt.prototype.code = 0, Tt.prototype.message = "", Tt.prototype.status = null, Tt.errorTypes = ["MEDIA_ERR_CUSTOM", "MEDIA_ERR_ABORTED", "MEDIA_ERR_NETWORK", "MEDIA_ERR_DECODE", "MEDIA_ERR_SRC_NOT_SUPPORTED", "MEDIA_ERR_ENCRYPTED"], Tt.defaultMessages = { 1: "You aborted the media playback", 2: "A network error caused the media download to fail part-way.", 3: "The media playback was aborted due to a corruption problem or because the media used features your browser did not support.", 4: "The media could not be loaded, either because the server or network failed or because the format is not supported.", 5: "The media is encrypted and we do not have the keys to decrypt it." };for (var kt = 0; kt < Tt.errorTypes.length; kt++) {
    Tt[Tt.errorTypes[kt]] = kt, Tt.prototype[Tt.errorTypes[kt]] = kt;
  }var Ct = function Ct(e, t) {
    var n,
        i = null;try {
      n = JSON.parse(e, t);
    } catch (e) {
      i = e;
    }return [i, n];
  };function Et(e) {
    return null != e && "function" == typeof e.then;
  }function St(e) {
    Et(e) && e.then(null, function (e) {});
  }var wt = function wt(i) {
    return ["kind", "label", "language", "id", "inBandMetadataTrackDispatchType", "mode", "src"].reduce(function (e, t, n) {
      return i[t] && (e[t] = i[t]), e;
    }, { cues: i.cues && Array.prototype.map.call(i.cues, function (e) {
        return { startTime: e.startTime, endTime: e.endTime, text: e.text, id: e.id };
      }) });
  },
      xt = function xt(e) {
    var t = e.$$("track"),
        n = Array.prototype.map.call(t, function (e) {
      return e.track;
    });return Array.prototype.map.call(t, function (e) {
      var t = wt(e.track);return e.src && (t.src = e.src), t;
    }).concat(Array.prototype.filter.call(e.textTracks(), function (e) {
      return -1 === n.indexOf(e);
    }).map(wt));
  },
      jt = function jt(e, n) {
    return e.forEach(function (e) {
      var t = n.addRemoteTextTrack(e).track;!e.src && e.cues && e.cues.forEach(function (e) {
        return t.addCue(e);
      });
    }), n.textTracks();
  };function Pt(e, t) {
    return e(t = { exports: {} }, t.exports), t.exports;
  }var At = Pt(function (e, t) {
    function n(e) {
      if (e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e))) {
        var t = e.which || e.keyCode || e.charCode;t && (e = t);
      }if ("number" == typeof e) return o[e];var n,
          i = String(e);return (n = r[i.toLowerCase()]) ? n : (n = s[i.toLowerCase()]) || (1 === i.length ? i.charCodeAt(0) : void 0);
    }n.isEventKey = function (e, t) {
      if (e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e))) {
        var n = e.which || e.keyCode || e.charCode;if (null == n) return !1;if ("string" == typeof t) {
          var i;if (i = r[t.toLowerCase()]) return i === n;if (i = s[t.toLowerCase()]) return i === n;
        } else if ("number" == typeof t) return t === n;return !1;
      }
    };var r = (t = e.exports = n).code = t.codes = { backspace: 8, tab: 9, enter: 13, shift: 16, ctrl: 17, alt: 18, "pause/break": 19, "caps lock": 20, esc: 27, space: 32, "page up": 33, "page down": 34, end: 35, home: 36, left: 37, up: 38, right: 39, down: 40, insert: 45, delete: 46, command: 91, "left command": 91, "right command": 93, "numpad *": 106, "numpad +": 107, "numpad -": 109, "numpad .": 110, "numpad /": 111, "num lock": 144, "scroll lock": 145, "my computer": 182, "my calculator": 183, ";": 186, "=": 187, ",": 188, "-": 189, ".": 190, "/": 191, "`": 192, "[": 219, "\\": 220, "]": 221, "'": 222 },
        s = t.aliases = { windows: 91, "⇧": 16, "⌥": 18, "⌃": 17, "⌘": 91, ctl: 17, control: 17, option: 18, pause: 19, break: 19, caps: 20, return: 13, escape: 27, spc: 32, spacebar: 32, pgup: 33, pgdn: 34, ins: 45, del: 46, cmd: 91 };for (i = 97; i < 123; i++) {
      r[String.fromCharCode(i)] = i - 32;
    }for (var i = 48; i < 58; i++) {
      r[i - 48] = i;
    }for (i = 1; i < 13; i++) {
      r["f" + i] = i + 111;
    }for (i = 0; i < 10; i++) {
      r["numpad " + i] = i + 96;
    }var o = t.names = t.title = {};for (i in r) {
      o[r[i]] = i;
    }for (var a in s) {
      r[a] = s[a];
    }
  }),
      Mt = (At.code, At.codes, At.aliases, At.names, At.title, "vjs-modal-dialog"),
      Lt = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).opened_ = n.hasBeenOpened_ = n.hasBeenFilled_ = !1, n.closeable(!n.options_.uncloseable), n.content(n.options_.content), n.contentEl_ = x("div", { className: Mt + "-content" }, { role: "document" }), n.descEl_ = x("p", { className: Mt + "-description vjs-control-text", id: n.el().getAttribute("aria-describedby") }), j(n.descEl_, n.description()), n.el_.appendChild(n.descEl_), n.el_.appendChild(n.contentEl_), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      return i.prototype.createEl.call(this, "div", { className: this.buildCSSClass(), tabIndex: -1 }, { "aria-describedby": this.id() + "_description", "aria-hidden": "true", "aria-label": this.label(), role: "dialog" });
    }, t.dispose = function () {
      this.contentEl_ = null, this.descEl_ = null, this.previouslyActiveEl_ = null, i.prototype.dispose.call(this);
    }, t.buildCSSClass = function () {
      return Mt + " vjs-hidden " + i.prototype.buildCSSClass.call(this);
    }, t.handleKeyPress = function (e) {
      At.isEventKey(e, "Escape") && this.closeable() && this.close();
    }, t.label = function () {
      return this.localize(this.options_.label || "Modal Window");
    }, t.description = function () {
      var e = this.options_.description || this.localize("This is a modal window.");return this.closeable() && (e += " " + this.localize("This modal can be closed by pressing the Escape key or activating the close button.")), e;
    }, t.open = function () {
      if (!this.opened_) {
        var e = this.player();this.trigger("beforemodalopen"), this.opened_ = !0, (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) && this.fill(), this.wasPlaying_ = !e.paused(), this.options_.pauseOnOpen && this.wasPlaying_ && e.pause(), this.closeable() && this.on(this.el_.ownerDocument, "keydown", Ce(this, this.handleKeyPress)), this.hadControls_ = e.controls(), e.controls(!1), this.show(), this.conditionalFocus_(), this.el().setAttribute("aria-hidden", "false"), this.trigger("modalopen"), this.hasBeenOpened_ = !0;
      }
    }, t.opened = function (e) {
      return "boolean" == typeof e && this[e ? "open" : "close"](), this.opened_;
    }, t.close = function () {
      if (this.opened_) {
        var e = this.player();this.trigger("beforemodalclose"), this.opened_ = !1, this.wasPlaying_ && this.options_.pauseOnOpen && e.play(), this.closeable() && this.off(this.el_.ownerDocument, "keydown", Ce(this, this.handleKeyPress)), this.hadControls_ && e.controls(!0), this.hide(), this.el().setAttribute("aria-hidden", "true"), this.trigger("modalclose"), this.conditionalBlur_(), this.options_.temporary && this.dispose();
      }
    }, t.closeable = function (e) {
      if ("boolean" == typeof e) {
        var t = this.closeable_ = !!e,
            n = this.getChild("closeButton");if (t && !n) {
          var i = this.contentEl_;this.contentEl_ = this.el_, n = this.addChild("closeButton", { controlText: "Close Modal Dialog" }), this.contentEl_ = i, this.on(n, "close", this.close);
        }!t && n && (this.off(n, "close", this.close), this.removeChild(n), n.dispose());
      }return this.closeable_;
    }, t.fill = function () {
      this.fillWith(this.content());
    }, t.fillWith = function (e) {
      var t = this.contentEl(),
          n = t.parentNode,
          i = t.nextSibling;this.trigger("beforemodalfill"), this.hasBeenFilled_ = !0, n.removeChild(t), this.empty(), $(t, e), this.trigger("modalfill"), i ? n.insertBefore(t, i) : n.appendChild(t);var r = this.getChild("closeButton");r && n.appendChild(r.el_);
    }, t.empty = function () {
      this.trigger("beforemodalempty"), U(this.contentEl()), this.trigger("modalempty");
    }, t.content = function (e) {
      return "undefined" != typeof e && (this.content_ = e), this.content_;
    }, t.conditionalFocus_ = function () {
      var e = d.activeElement,
          t = this.player_.el_;this.previouslyActiveEl_ = null, (t.contains(e) || t === e) && (this.previouslyActiveEl_ = e, this.focus(), this.on(d, "keydown", this.handleKeyDown));
    }, t.conditionalBlur_ = function () {
      this.previouslyActiveEl_ && (this.previouslyActiveEl_.focus(), this.previouslyActiveEl_ = null), this.off(d, "keydown", this.handleKeyDown);
    }, t.handleKeyDown = function (e) {
      if (At.isEventKey(e, "Tab")) {
        for (var t, n = this.focusableEls_(), i = this.el_.querySelector(":focus"), r = 0; r < n.length; r++) {
          if (i === n[r]) {
            t = r;break;
          }
        }d.activeElement === this.el_ && (t = 0), e.shiftKey && 0 === t ? (n[n.length - 1].focus(), e.preventDefault()) : e.shiftKey || t !== n.length - 1 || (n[0].focus(), e.preventDefault());
      }
    }, t.focusableEls_ = function () {
      var e = this.el_.querySelectorAll("*");return Array.prototype.filter.call(e, function (e) {
        return (e instanceof h.HTMLAnchorElement || e instanceof h.HTMLAreaElement) && e.hasAttribute("href") || (e instanceof h.HTMLInputElement || e instanceof h.HTMLSelectElement || e instanceof h.HTMLTextAreaElement || e instanceof h.HTMLButtonElement) && !e.hasAttribute("disabled") || e instanceof h.HTMLIFrameElement || e instanceof h.HTMLObjectElement || e instanceof h.HTMLEmbedElement || e.hasAttribute("tabindex") && -1 !== e.getAttribute("tabindex") || e.hasAttribute("contenteditable");
      });
    }, e;
  }(Be);Lt.prototype.options_ = { pauseOnOpen: !0, temporary: !0 }, Be.registerComponent("ModalDialog", Lt);var Nt = function (i) {
    function e(e) {
      var t;void 0 === e && (e = []), (t = i.call(this) || this).tracks_ = [], Object.defineProperty(v(v(t)), "length", { get: function get() {
          return this.tracks_.length;
        } });for (var n = 0; n < e.length; n++) {
        t.addTrack(e[n]);
      }return t;
    }f(e, i);var t = e.prototype;return t.addTrack = function (e) {
      var t = this.tracks_.length;"" + t in this || Object.defineProperty(this, t, { get: function get() {
          return this.tracks_[t];
        } }), -1 === this.tracks_.indexOf(e) && (this.tracks_.push(e), this.trigger({ track: e, type: "addtrack", target: this }));
    }, t.removeTrack = function (e) {
      for (var t, n = 0, i = this.length; n < i; n++) {
        if (this[n] === e) {
          (t = this[n]).off && t.off(), this.tracks_.splice(n, 1);break;
        }
      }t && this.trigger({ track: t, type: "removetrack", target: this });
    }, t.getTrackById = function (e) {
      for (var t = null, n = 0, i = this.length; n < i; n++) {
        var r = this[n];if (r.id === e) {
          t = r;break;
        }
      }return t;
    }, e;
  }(Se);for (var Ot in Nt.prototype.allowedEvents_ = { change: "change", addtrack: "addtrack", removetrack: "removetrack" }, Nt.prototype.allowedEvents_) {
    Nt.prototype["on" + Ot] = null;
  }var Dt = function Dt(e, t) {
    for (var n = 0; n < e.length; n++) {
      Object.keys(e[n]).length && t.id !== e[n].id && (e[n].enabled = !1);
    }
  },
      It = function (i) {
    function e(e) {
      var t;void 0 === e && (e = []);for (var n = e.length - 1; 0 <= n; n--) {
        if (e[n].enabled) {
          Dt(e, e[n]);break;
        }
      }return (t = i.call(this, e) || this).changing_ = !1, t;
    }f(e, i);var t = e.prototype;return t.addTrack = function (e) {
      var t = this;e.enabled && Dt(this, e), i.prototype.addTrack.call(this, e), e.addEventListener && (e.enabledChange_ = function () {
        t.changing_ || (t.changing_ = !0, Dt(t, e), t.changing_ = !1, t.trigger("change"));
      }, e.addEventListener("enabledchange", e.enabledChange_));
    }, t.removeTrack = function (e) {
      i.prototype.removeTrack.call(this, e), e.removeEventListener && e.enabledChange_ && (e.removeEventListener("enabledchange", e.enabledChange_), e.enabledChange_ = null);
    }, e;
  }(Nt),
      Ft = function Ft(e, t) {
    for (var n = 0; n < e.length; n++) {
      Object.keys(e[n]).length && t.id !== e[n].id && (e[n].selected = !1);
    }
  },
      Rt = function (i) {
    function e(e) {
      var t;void 0 === e && (e = []);for (var n = e.length - 1; 0 <= n; n--) {
        if (e[n].selected) {
          Ft(e, e[n]);break;
        }
      }return (t = i.call(this, e) || this).changing_ = !1, Object.defineProperty(v(v(t)), "selectedIndex", { get: function get() {
          for (var e = 0; e < this.length; e++) {
            if (this[e].selected) return e;
          }return -1;
        }, set: function set() {} }), t;
    }f(e, i);var t = e.prototype;return t.addTrack = function (e) {
      var t = this;e.selected && Ft(this, e), i.prototype.addTrack.call(this, e), e.addEventListener && (e.selectedChange_ = function () {
        t.changing_ || (t.changing_ = !0, Ft(t, e), t.changing_ = !1, t.trigger("change"));
      }, e.addEventListener("selectedchange", e.selectedChange_));
    }, t.removeTrack = function (e) {
      i.prototype.removeTrack.call(this, e), e.removeEventListener && e.selectedChange_ && (e.removeEventListener("selectedchange", e.selectedChange_), e.selectedChange_ = null);
    }, e;
  }(Nt),
      Bt = function (n) {
    function e() {
      return n.apply(this, arguments) || this;
    }f(e, n);var t = e.prototype;return t.addTrack = function (e) {
      var t = this;n.prototype.addTrack.call(this, e), this.queueChange_ || (this.queueChange_ = function () {
        return t.queueTrigger("change");
      }), this.triggerSelectedlanguagechange || (this.triggerSelectedlanguagechange_ = function () {
        return t.trigger("selectedlanguagechange");
      }), e.addEventListener("modechange", this.queueChange_);-1 === ["metadata", "chapters"].indexOf(e.kind) && e.addEventListener("modechange", this.triggerSelectedlanguagechange_);
    }, t.removeTrack = function (e) {
      n.prototype.removeTrack.call(this, e), e.removeEventListener && (this.queueChange_ && e.removeEventListener("modechange", this.queueChange_), this.selectedlanguagechange_ && e.removeEventListener("modechange", this.triggerSelectedlanguagechange_));
    }, e;
  }(Nt),
      Ht = function () {
    function e(e) {
      void 0 === e && (e = []), this.trackElements_ = [], Object.defineProperty(this, "length", { get: function get() {
          return this.trackElements_.length;
        } });for (var t = 0, n = e.length; t < n; t++) {
        this.addTrackElement_(e[t]);
      }
    }var t = e.prototype;return t.addTrackElement_ = function (e) {
      var t = this.trackElements_.length;"" + t in this || Object.defineProperty(this, t, { get: function get() {
          return this.trackElements_[t];
        } }), -1 === this.trackElements_.indexOf(e) && this.trackElements_.push(e);
    }, t.getTrackElementByTrack_ = function (e) {
      for (var t, n = 0, i = this.trackElements_.length; n < i; n++) {
        if (e === this.trackElements_[n].track) {
          t = this.trackElements_[n];break;
        }
      }return t;
    }, t.removeTrackElement_ = function (e) {
      for (var t = 0, n = this.trackElements_.length; t < n; t++) {
        if (e === this.trackElements_[t]) {
          this.trackElements_[t].track && "function" == typeof this.trackElements_[t].track.off && this.trackElements_[t].track.off(), "function" == typeof this.trackElements_[t].off && this.trackElements_[t].off(), this.trackElements_.splice(t, 1);break;
        }
      }
    }, e;
  }(),
      Vt = function () {
    function t(e) {
      t.prototype.setCues_.call(this, e), Object.defineProperty(this, "length", { get: function get() {
          return this.length_;
        } });
    }var e = t.prototype;return e.setCues_ = function (e) {
      var t = this.length || 0,
          n = 0,
          i = e.length;this.cues_ = e, this.length_ = e.length;var r = function r(e) {
        "" + e in this || Object.defineProperty(this, "" + e, { get: function get() {
            return this.cues_[e];
          } });
      };if (t < i) for (n = t; n < i; n++) {
        r.call(this, n);
      }
    }, e.getCueById = function (e) {
      for (var t = null, n = 0, i = this.length; n < i; n++) {
        var r = this[n];if (r.id === e) {
          t = r;break;
        }
      }return t;
    }, t;
  }(),
      zt = { alternative: "alternative", captions: "captions", main: "main", sign: "sign", subtitles: "subtitles", commentary: "commentary" },
      Kt = { alternative: "alternative", descriptions: "descriptions", main: "main", "main-desc": "main-desc", translation: "translation", commentary: "commentary" },
      Wt = { subtitles: "subtitles", captions: "captions", descriptions: "descriptions", chapters: "chapters", metadata: "metadata" },
      Ut = { disabled: "disabled", hidden: "hidden", showing: "showing" },
      qt = function (s) {
    function e(e) {
      var t;void 0 === e && (e = {}), t = s.call(this) || this;var n = { id: e.id || "vjs_track_" + ee(), kind: e.kind || "", label: e.label || "", language: e.language || "" },
          i = function i(e) {
        Object.defineProperty(v(v(t)), e, { get: function get() {
            return n[e];
          }, set: function set() {} });
      };for (var r in n) {
        i(r);
      }return t;
    }return f(e, s), e;
  }(Se),
      Xt = function Xt(e) {
    var t = ["protocol", "hostname", "port", "pathname", "search", "hash", "host"],
        n = d.createElement("a");n.href = e;var i,
        r = "" === n.host && "file:" !== n.protocol;r && ((i = d.createElement("div")).innerHTML = '<a href="' + e + '"></a>', n = i.firstChild, i.setAttribute("style", "display:none; position:absolute;"), d.body.appendChild(i));for (var s = {}, o = 0; o < t.length; o++) {
      s[t[o]] = n[t[o]];
    }return "http:" === s.protocol && (s.host = s.host.replace(/:80$/, "")), "https:" === s.protocol && (s.host = s.host.replace(/:443$/, "")), s.protocol || (s.protocol = h.location.protocol), r && d.body.removeChild(i), s;
  },
      $t = function $t(e) {
    if (!e.match(/^https?:\/\//)) {
      var t = d.createElement("div");t.innerHTML = '<a href="' + e + '">x</a>', e = t.firstChild.href;
    }return e;
  },
      Gt = function Gt(e) {
    if ("string" == typeof e) {
      var t = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i.exec(e);if (t) return t.pop().toLowerCase();
    }return "";
  },
      Yt = function Yt(e) {
    var t = h.location,
        n = Xt(e);return (":" === n.protocol ? t.protocol : n.protocol) + n.host !== t.protocol + t.host;
  },
      Qt = Object.freeze({ parseUrl: Xt, getAbsoluteURL: $t, getFileExtension: Gt, isCrossOrigin: Yt }),
      Jt = function Jt(e) {
    var t = Zt.call(e);return "[object Function]" === t || "function" == typeof e && "[object RegExp]" !== t || "undefined" != typeof window && (e === window.setTimeout || e === window.alert || e === window.confirm || e === window.prompt);
  },
      Zt = Object.prototype.toString;var en = Pt(function (e, t) {
    (t = e.exports = function (e) {
      return e.replace(/^\s*|\s*$/g, "");
    }).left = function (e) {
      return e.replace(/^\s*/, "");
    }, t.right = function (e) {
      return e.replace(/\s*$/, "");
    };
  }),
      tn = (en.left, en.right, Function.prototype.toString),
      nn = /^\s*class\b/,
      rn = function rn(e) {
    try {
      var t = tn.call(e);return nn.test(t);
    } catch (e) {
      return !1;
    }
  },
      sn = Object.prototype.toString,
      on = "function" == typeof Symbol && "symbol" == _typeof(Symbol.toStringTag),
      an = function an(e) {
    if (!e) return !1;if ("function" != typeof e && "object" != (typeof e === "undefined" ? "undefined" : _typeof(e))) return !1;if ("function" == typeof e && !e.prototype) return !0;if (on) return function (e) {
      try {
        return !rn(e) && (tn.call(e), !0);
      } catch (e) {
        return !1;
      }
    }(e);if (rn(e)) return !1;var t = sn.call(e);return "[object Function]" === t || "[object GeneratorFunction]" === t;
  },
      ln = Object.prototype.toString,
      cn = Object.prototype.hasOwnProperty,
      un = function un(e, t, n) {
    if (!an(t)) throw new TypeError("iterator must be a function");var i;3 <= arguments.length && (i = n), "[object Array]" === ln.call(e) ? function (e, t, n) {
      for (var i = 0, r = e.length; i < r; i++) {
        cn.call(e, i) && (null == n ? t(e[i], i, e) : t.call(n, e[i], i, e));
      }
    }(e, t, i) : "string" == typeof e ? function (e, t, n) {
      for (var i = 0, r = e.length; i < r; i++) {
        null == n ? t(e.charAt(i), i, e) : t.call(n, e.charAt(i), i, e);
      }
    }(e, t, i) : function (e, t, n) {
      for (var i in e) {
        cn.call(e, i) && (null == n ? t(e[i], i, e) : t.call(n, e[i], i, e));
      }
    }(e, t, i);
  },
      hn = function hn(e) {
    if (!e) return {};var s = {};return un(en(e).split("\n"), function (e) {
      var t,
          n = e.indexOf(":"),
          i = en(e.slice(0, n)).toLowerCase(),
          r = en(e.slice(n + 1));"undefined" == typeof s[i] ? s[i] = r : (t = s[i], "[object Array]" === Object.prototype.toString.call(t) ? s[i].push(r) : s[i] = [s[i], r]);
    }), s;
  },
      dn = function dn() {
    for (var e = {}, t = 0; t < arguments.length; t++) {
      var n = arguments[t];for (var i in n) {
        pn.call(n, i) && (e[i] = n[i]);
      }
    }return e;
  },
      pn = Object.prototype.hasOwnProperty;var fn = gn;function vn(e, t, n) {
    var i = e;return Jt(t) ? (n = t, "string" == typeof e && (i = { uri: e })) : i = dn(t, { uri: e }), i.callback = n, i;
  }function gn(e, t, n) {
    return yn(t = vn(e, t, n));
  }function yn(i) {
    if ("undefined" == typeof i.callback) throw new Error("callback argument missing");var r = !1,
        s = function s(e, t, n) {
      r || (r = !0, i.callback(e, t, n));
    };function t(e) {
      return clearTimeout(l), e instanceof Error || (e = new Error("" + (e || "Unknown XMLHttpRequest Error"))), e.statusCode = 0, s(e, v);
    }function e() {
      if (!o) {
        var e;clearTimeout(l), e = i.useXDR && void 0 === a.status ? 200 : 1223 === a.status ? 204 : a.status;var t = v,
            n = null;return 0 !== e ? (t = { body: function () {
            var e = void 0;if (e = a.response ? a.response : a.responseText || function (e) {
              if ("document" === e.responseType) return e.responseXML;var t = e.responseXML && "parsererror" === e.responseXML.documentElement.nodeName;return "" !== e.responseType || t ? null : e.responseXML;
            }(a), f) try {
              e = JSON.parse(e);
            } catch (e) {}return e;
          }(), statusCode: e, method: u, headers: {}, url: c, rawRequest: a }, a.getAllResponseHeaders && (t.headers = hn(a.getAllResponseHeaders()))) : n = new Error("Internal XMLHttpRequest Error"), s(n, t, t.body);
      }
    }var n,
        o,
        a = i.xhr || null;a || (a = i.cors || i.useXDR ? new gn.XDomainRequest() : new gn.XMLHttpRequest());var l,
        c = a.url = i.uri || i.url,
        u = a.method = i.method || "GET",
        h = i.body || i.data,
        d = a.headers = i.headers || {},
        p = !!i.sync,
        f = !1,
        v = { body: void 0, headers: {}, statusCode: 0, method: u, url: c, rawRequest: a };if ("json" in i && !1 !== i.json && (f = !0, d.accept || d.Accept || (d.Accept = "application/json"), "GET" !== u && "HEAD" !== u && (d["content-type"] || d["Content-Type"] || (d["Content-Type"] = "application/json"), h = JSON.stringify(!0 === i.json ? h : i.json))), a.onreadystatechange = function () {
      4 === a.readyState && setTimeout(e, 0);
    }, a.onload = e, a.onerror = t, a.onprogress = function () {}, a.onabort = function () {
      o = !0;
    }, a.ontimeout = t, a.open(u, c, !p, i.username, i.password), p || (a.withCredentials = !!i.withCredentials), !p && 0 < i.timeout && (l = setTimeout(function () {
      if (!o) {
        o = !0, a.abort("timeout");var e = new Error("XMLHttpRequest timeout");e.code = "ETIMEDOUT", t(e);
      }
    }, i.timeout)), a.setRequestHeader) for (n in d) {
      d.hasOwnProperty(n) && a.setRequestHeader(n, d[n]);
    } else if (i.headers && !function (e) {
      for (var t in e) {
        if (e.hasOwnProperty(t)) return !1;
      }return !0;
    }(i.headers)) throw new Error("Headers cannot be set on an XDomainRequest object");return "responseType" in i && (a.responseType = i.responseType), "beforeSend" in i && "function" == typeof i.beforeSend && i.beforeSend(a), a.send(h || null), a;
  }gn.XMLHttpRequest = h.XMLHttpRequest || function () {}, gn.XDomainRequest = "withCredentials" in new gn.XMLHttpRequest() ? gn.XMLHttpRequest : h.XDomainRequest, function (e, t) {
    for (var n = 0; n < e.length; n++) {
      t(e[n]);
    }
  }(["get", "put", "post", "patch", "head", "delete"], function (i) {
    gn["delete" === i ? "del" : i] = function (e, t, n) {
      return (t = vn(e, t, n)).method = i.toUpperCase(), yn(t);
    };
  });var _n = function _n(e, t) {
    var n = new h.WebVTT.Parser(h, h.vttjs, h.WebVTT.StringDecoder()),
        i = [];n.oncue = function (e) {
      t.addCue(e);
    }, n.onparsingerror = function (e) {
      i.push(e);
    }, n.onflush = function () {
      t.trigger({ type: "loadeddata", target: t });
    }, n.parse(e), 0 < i.length && (h.console && h.console.groupCollapsed && h.console.groupCollapsed("Text Track parsing errors for " + t.src), i.forEach(function (e) {
      return g.error(e);
    }), h.console && h.console.groupEnd && h.console.groupEnd()), n.flush();
  },
      mn = function (c) {
    function e(e) {
      var t;if (void 0 === e && (e = {}), !e.tech) throw new Error("A tech was not provided.");var n = Re(e, { kind: Wt[e.kind] || "subtitles", language: e.language || e.srclang || "" }),
          i = Ut[n.mode] || "disabled",
          r = n.default;"metadata" !== n.kind && "chapters" !== n.kind || (i = "hidden"), (t = c.call(this, n) || this).tech_ = n.tech, t.cues_ = [], t.activeCues_ = [];var s = new Vt(t.cues_),
          o = new Vt(t.activeCues_),
          a = !1,
          l = Ce(v(v(t)), function () {
        this.activeCues = this.activeCues, a && (this.trigger("cuechange"), a = !1);
      });return "disabled" !== i && t.tech_.ready(function () {
        t.tech_.on("timeupdate", l);
      }, !0), Object.defineProperties(v(v(t)), { default: { get: function get() {
            return r;
          }, set: function set() {} }, mode: { get: function get() {
            return i;
          }, set: function set(e) {
            var t = this;Ut[e] && ("disabled" !== (i = e) ? this.tech_.ready(function () {
              t.tech_.on("timeupdate", l);
            }, !0) : this.tech_.off("timeupdate", l), this.trigger("modechange"));
          } }, cues: { get: function get() {
            return this.loaded_ ? s : null;
          }, set: function set() {} }, activeCues: { get: function get() {
            if (!this.loaded_) return null;if (0 === this.cues.length) return o;for (var e = this.tech_.currentTime(), t = [], n = 0, i = this.cues.length; n < i; n++) {
              var r = this.cues[n];r.startTime <= e && r.endTime >= e ? t.push(r) : r.startTime === r.endTime && r.startTime <= e && r.startTime + .5 >= e && t.push(r);
            }if (a = !1, t.length !== this.activeCues_.length) a = !0;else for (var s = 0; s < t.length; s++) {
              -1 === this.activeCues_.indexOf(t[s]) && (a = !0);
            }return this.activeCues_ = t, o.setCues_(this.activeCues_), o;
          }, set: function set() {} } }), n.src ? (t.src = n.src, function (e, s) {
        var t = { uri: e },
            n = Yt(e);n && (t.cors = n), fn(t, Ce(this, function (e, t, n) {
          if (e) return g.error(e, t);if (s.loaded_ = !0, "function" != typeof h.WebVTT) {
            if (s.tech_) {
              var i,
                  r = function r() {
                g.error("vttjs failed to load, stopping trying to process " + s.src), s.tech_.off("vttjsloaded", i);
              };i = function i() {
                return s.tech_.off("vttjserror", r), _n(n, s);
              }, s.tech_.one("vttjsloaded", i), s.tech_.one("vttjserror", r);
            }
          } else _n(n, s);
        }));
      }(n.src, v(v(t)))) : t.loaded_ = !0, t;
    }f(e, c);var t = e.prototype;return t.addCue = function (e) {
      var t = e;if (h.vttjs && !(e instanceof h.vttjs.VTTCue)) {
        for (var n in t = new h.vttjs.VTTCue(e.startTime, e.endTime, e.text), e) {
          n in t || (t[n] = e[n]);
        }t.id = e.id, t.originalCue_ = e;
      }for (var i = this.tech_.textTracks(), r = 0; r < i.length; r++) {
        i[r] !== this && i[r].removeCue(t);
      }this.cues_.push(t), this.cues.setCues_(this.cues_);
    }, t.removeCue = function (e) {
      for (var t = this.cues_.length; t--;) {
        var n = this.cues_[t];if (n === e || n.originalCue_ && n.originalCue_ === e) {
          this.cues_.splice(t, 1), this.cues.setCues_(this.cues_);break;
        }
      }
    }, e;
  }(qt);mn.prototype.allowedEvents_ = { cuechange: "cuechange" };var bn = function (r) {
    function e(e) {
      var t;void 0 === e && (e = {});var n = Re(e, { kind: Kt[e.kind] || "" });t = r.call(this, n) || this;var i = !1;return Object.defineProperty(v(v(t)), "enabled", { get: function get() {
          return i;
        }, set: function set(e) {
          "boolean" == typeof e && e !== i && (i = e, this.trigger("enabledchange"));
        } }), n.enabled && (t.enabled = n.enabled), t.loaded_ = !0, t;
    }return f(e, r), e;
  }(qt),
      Tn = function (r) {
    function e(e) {
      var t;void 0 === e && (e = {});var n = Re(e, { kind: zt[e.kind] || "" });t = r.call(this, n) || this;var i = !1;return Object.defineProperty(v(v(t)), "selected", { get: function get() {
          return i;
        }, set: function set(e) {
          "boolean" == typeof e && e !== i && (i = e, this.trigger("selectedchange"));
        } }), n.selected && (t.selected = n.selected), t;
    }return f(e, r), e;
  }(qt),
      kn = function (r) {
    function e(e) {
      var t, n;void 0 === e && (e = {}), t = r.call(this) || this;var i = new mn(e);return t.kind = i.kind, t.src = i.src, t.srclang = i.language, t.label = i.label, t.default = i.default, Object.defineProperties(v(v(t)), { readyState: { get: function get() {
            return n;
          } }, track: { get: function get() {
            return i;
          } } }), n = 0, i.addEventListener("loadeddata", function () {
        n = 2, t.trigger({ type: "load", target: v(v(t)) });
      }), t;
    }return f(e, r), e;
  }(Se);kn.prototype.allowedEvents_ = { load: "load" }, kn.NONE = 0, kn.LOADING = 1, kn.LOADED = 2, kn.ERROR = 3;var Cn = { audio: { ListClass: It, TrackClass: bn, capitalName: "Audio" }, video: { ListClass: Rt, TrackClass: Tn, capitalName: "Video" }, text: { ListClass: Bt, TrackClass: mn, capitalName: "Text" } };Object.keys(Cn).forEach(function (e) {
    Cn[e].getterName = e + "Tracks", Cn[e].privateName = e + "Tracks_";
  });var En = { remoteText: { ListClass: Bt, TrackClass: mn, capitalName: "RemoteText", getterName: "remoteTextTracks", privateName: "remoteTextTracks_" }, remoteTextEl: { ListClass: Ht, TrackClass: kn, capitalName: "RemoteTextTrackEls", getterName: "remoteTextTrackEls", privateName: "remoteTextTrackEls_" } },
      Sn = Re(Cn, En);En.names = Object.keys(En), Cn.names = Object.keys(Cn), Sn.names = [].concat(En.names).concat(Cn.names);var wn = {};var xn = function (t) {
    function n(n, e) {
      var i;return void 0 === n && (n = {}), void 0 === e && (e = function e() {}), n.reportTouchActivity = !1, (i = t.call(this, null, n, e) || this).hasStarted_ = !1, i.on("playing", function () {
        this.hasStarted_ = !0;
      }), i.on("loadstart", function () {
        this.hasStarted_ = !1;
      }), Sn.names.forEach(function (e) {
        var t = Sn[e];n && n[t.getterName] && (i[t.privateName] = n[t.getterName]);
      }), i.featuresProgressEvents || i.manualProgressOn(), i.featuresTimeupdateEvents || i.manualTimeUpdatesOn(), ["Text", "Audio", "Video"].forEach(function (e) {
        !1 === n["native" + e + "Tracks"] && (i["featuresNative" + e + "Tracks"] = !1);
      }), !1 === n.nativeCaptions || !1 === n.nativeTextTracks ? i.featuresNativeTextTracks = !1 : !0 !== n.nativeCaptions && !0 !== n.nativeTextTracks || (i.featuresNativeTextTracks = !0), i.featuresNativeTextTracks || i.emulateTextTracks(), i.autoRemoteTextTracks_ = new Sn.text.ListClass(), i.initTrackListeners(), n.nativeControlsForTouch || i.emitTapEvents(), i.constructor && (i.name_ = i.constructor.name || "Unknown Tech"), i;
    }f(n, t);var e = n.prototype;return e.triggerSourceset = function (e) {
      var t = this;this.isReady_ || this.one("ready", function () {
        return t.setTimeout(function () {
          return t.triggerSourceset(e);
        }, 1);
      }), this.trigger({ src: e, type: "sourceset" });
    }, e.manualProgressOn = function () {
      this.on("durationchange", this.onDurationChange), this.manualProgress = !0, this.one("ready", this.trackProgress);
    }, e.manualProgressOff = function () {
      this.manualProgress = !1, this.stopTrackingProgress(), this.off("durationchange", this.onDurationChange);
    }, e.trackProgress = function (e) {
      this.stopTrackingProgress(), this.progressInterval = this.setInterval(Ce(this, function () {
        var e = this.bufferedPercent();this.bufferedPercent_ !== e && this.trigger("progress"), 1 === (this.bufferedPercent_ = e) && this.stopTrackingProgress();
      }), 500);
    }, e.onDurationChange = function (e) {
      this.duration_ = this.duration();
    }, e.buffered = function () {
      return dt(0, 0);
    }, e.bufferedPercent = function () {
      return pt(this.buffered(), this.duration_);
    }, e.stopTrackingProgress = function () {
      this.clearInterval(this.progressInterval);
    }, e.manualTimeUpdatesOn = function () {
      this.manualTimeUpdates = !0, this.on("play", this.trackCurrentTime), this.on("pause", this.stopTrackingCurrentTime);
    }, e.manualTimeUpdatesOff = function () {
      this.manualTimeUpdates = !1, this.stopTrackingCurrentTime(), this.off("play", this.trackCurrentTime), this.off("pause", this.stopTrackingCurrentTime);
    }, e.trackCurrentTime = function () {
      this.currentTimeInterval && this.stopTrackingCurrentTime(), this.currentTimeInterval = this.setInterval(function () {
        this.trigger({ type: "timeupdate", target: this, manuallyTriggered: !0 });
      }, 250);
    }, e.stopTrackingCurrentTime = function () {
      this.clearInterval(this.currentTimeInterval), this.trigger({ type: "timeupdate", target: this, manuallyTriggered: !0 });
    }, e.dispose = function () {
      this.clearTracks(Cn.names), this.manualProgress && this.manualProgressOff(), this.manualTimeUpdates && this.manualTimeUpdatesOff(), t.prototype.dispose.call(this);
    }, e.clearTracks = function (e) {
      var r = this;(e = [].concat(e)).forEach(function (e) {
        for (var t = r[e + "Tracks"]() || [], n = t.length; n--;) {
          var i = t[n];"text" === e && r.removeRemoteTextTrack(i), t.removeTrack(i);
        }
      });
    }, e.cleanupAutoTextTracks = function () {
      for (var e = this.autoRemoteTextTracks_ || [], t = e.length; t--;) {
        var n = e[t];this.removeRemoteTextTrack(n);
      }
    }, e.reset = function () {}, e.error = function (e) {
      return void 0 !== e && (this.error_ = new Tt(e), this.trigger("error")), this.error_;
    }, e.played = function () {
      return this.hasStarted_ ? dt(0, 0) : dt();
    }, e.setCurrentTime = function () {
      this.manualTimeUpdates && this.trigger({ type: "timeupdate", target: this, manuallyTriggered: !0 });
    }, e.initTrackListeners = function () {
      var r = this;Cn.names.forEach(function (e) {
        var t = Cn[e],
            n = function n() {
          r.trigger(e + "trackchange");
        },
            i = r[t.getterName]();i.addEventListener("removetrack", n), i.addEventListener("addtrack", n), r.on("dispose", function () {
          i.removeEventListener("removetrack", n), i.removeEventListener("addtrack", n);
        });
      });
    }, e.addWebVttScript_ = function () {
      var e = this;if (!h.WebVTT) if (d.body.contains(this.el())) {
        if (!this.options_["vtt.js"] && c(wn) && 0 < Object.keys(wn).length) return void this.trigger("vttjsloaded");var t = d.createElement("script");t.src = this.options_["vtt.js"] || "https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js", t.onload = function () {
          e.trigger("vttjsloaded");
        }, t.onerror = function () {
          e.trigger("vttjserror");
        }, this.on("dispose", function () {
          t.onload = null, t.onerror = null;
        }), h.WebVTT = !0, this.el().parentNode.appendChild(t);
      } else this.ready(this.addWebVttScript_);
    }, e.emulateTextTracks = function () {
      var e = this,
          n = this.textTracks(),
          t = this.remoteTextTracks(),
          i = function i(e) {
        return n.addTrack(e.track);
      },
          r = function r(e) {
        return n.removeTrack(e.track);
      };t.on("addtrack", i), t.on("removetrack", r), this.addWebVttScript_();var s = function s() {
        return e.trigger("texttrackchange");
      },
          o = function o() {
        s();for (var e = 0; e < n.length; e++) {
          var t = n[e];t.removeEventListener("cuechange", s), "showing" === t.mode && t.addEventListener("cuechange", s);
        }
      };o(), n.addEventListener("change", o), n.addEventListener("addtrack", o), n.addEventListener("removetrack", o), this.on("dispose", function () {
        t.off("addtrack", i), t.off("removetrack", r), n.removeEventListener("change", o), n.removeEventListener("addtrack", o), n.removeEventListener("removetrack", o);for (var e = 0; e < n.length; e++) {
          n[e].removeEventListener("cuechange", s);
        }
      });
    }, e.addTextTrack = function (e, t, n) {
      if (!e) throw new Error("TextTrack kind is required but was not provided");return function (e, t, n, i, r) {
        void 0 === r && (r = {});var s = e.textTracks();r.kind = t, n && (r.label = n), i && (r.language = i), r.tech = e;var o = new Sn.text.TrackClass(r);return s.addTrack(o), o;
      }(this, e, t, n);
    }, e.createRemoteTextTrack = function (e) {
      var t = Re(e, { tech: this });return new En.remoteTextEl.TrackClass(t);
    }, e.addRemoteTextTrack = function (e, t) {
      var n = this;void 0 === e && (e = {});var i = this.createRemoteTextTrack(e);return !0 !== t && !1 !== t && (g.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js'), t = !0), this.remoteTextTrackEls().addTrackElement_(i), this.remoteTextTracks().addTrack(i.track), !0 !== t && this.ready(function () {
        return n.autoRemoteTextTracks_.addTrack(i.track);
      }), i;
    }, e.removeRemoteTextTrack = function (e) {
      var t = this.remoteTextTrackEls().getTrackElementByTrack_(e);this.remoteTextTrackEls().removeTrackElement_(t), this.remoteTextTracks().removeTrack(e), this.autoRemoteTextTracks_.removeTrack(e);
    }, e.getVideoPlaybackQuality = function () {
      return {};
    }, e.setPoster = function () {}, e.playsinline = function () {}, e.setPlaysinline = function () {}, e.overrideNativeAudioTracks = function () {}, e.overrideNativeVideoTracks = function () {}, e.canPlayType = function () {
      return "";
    }, n.canPlayType = function () {
      return "";
    }, n.canPlaySource = function (e, t) {
      return n.canPlayType(e.type);
    }, n.isTech = function (e) {
      return e.prototype instanceof n || e instanceof n || e === n;
    }, n.registerTech = function (e, t) {
      if (n.techs_ || (n.techs_ = {}), !n.isTech(t)) throw new Error("Tech " + e + " must be a Tech");if (!n.canPlayType) throw new Error("Techs must have a static canPlayType method on them");if (!n.canPlaySource) throw new Error("Techs must have a static canPlaySource method on them");return e = Fe(e), n.techs_[e] = t, "Tech" !== e && n.defaultTechOrder_.push(e), t;
    }, n.getTech = function (e) {
      if (e) return e = Fe(e), n.techs_ && n.techs_[e] ? n.techs_[e] : h && h.videojs && h.videojs[e] ? (g.warn("The " + e + " tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)"), h.videojs[e]) : void 0;
    }, n;
  }(Be);Sn.names.forEach(function (e) {
    var t = Sn[e];xn.prototype[t.getterName] = function () {
      return this[t.privateName] = this[t.privateName] || new t.ListClass(), this[t.privateName];
    };
  }), xn.prototype.featuresVolumeControl = !0, xn.prototype.featuresMuteControl = !0, xn.prototype.featuresFullscreenResize = !1, xn.prototype.featuresPlaybackRate = !1, xn.prototype.featuresProgressEvents = !1, xn.prototype.featuresSourceset = !1, xn.prototype.featuresTimeupdateEvents = !1, xn.prototype.featuresNativeTextTracks = !1, xn.withSourceHandlers = function (r) {
    r.registerSourceHandler = function (e, t) {
      var n = r.sourceHandlers;n || (n = r.sourceHandlers = []), void 0 === t && (t = n.length), n.splice(t, 0, e);
    }, r.canPlayType = function (e) {
      for (var t, n = r.sourceHandlers || [], i = 0; i < n.length; i++) {
        if (t = n[i].canPlayType(e)) return t;
      }return "";
    }, r.selectSourceHandler = function (e, t) {
      for (var n = r.sourceHandlers || [], i = 0; i < n.length; i++) {
        if (n[i].canHandleSource(e, t)) return n[i];
      }return null;
    }, r.canPlaySource = function (e, t) {
      var n = r.selectSourceHandler(e, t);return n ? n.canHandleSource(e, t) : "";
    };["seekable", "seeking", "duration"].forEach(function (e) {
      var t = this[e];"function" == typeof t && (this[e] = function () {
        return this.sourceHandler_ && this.sourceHandler_[e] ? this.sourceHandler_[e].apply(this.sourceHandler_, arguments) : t.apply(this, arguments);
      });
    }, r.prototype), r.prototype.setSource = function (e) {
      var t = r.selectSourceHandler(e, this.options_);t || (r.nativeSourceHandler ? t = r.nativeSourceHandler : g.error("No source handler found for the current source.")), this.disposeSourceHandler(), this.off("dispose", this.disposeSourceHandler), t !== r.nativeSourceHandler && (this.currentSource_ = e), this.sourceHandler_ = t.handleSource(e, this, this.options_), this.one("dispose", this.disposeSourceHandler);
    }, r.prototype.disposeSourceHandler = function () {
      this.currentSource_ && (this.clearTracks(["audio", "video"]), this.currentSource_ = null), this.cleanupAutoTextTracks(), this.sourceHandler_ && (this.sourceHandler_.dispose && this.sourceHandler_.dispose(), this.sourceHandler_ = null);
    };
  }, Be.registerComponent("Tech", xn), xn.registerTech("Tech", xn), xn.defaultTechOrder_ = [];var jn = {},
      Pn = {},
      An = {};function Mn(e, t, n) {
    e.setTimeout(function () {
      return function n(i, e, r, s, o, a) {
        void 0 === i && (i = {});void 0 === e && (e = []);void 0 === o && (o = []);void 0 === a && (a = !1);var t = e,
            l = t[0],
            c = t.slice(1);if ("string" == typeof l) n(i, jn[l], r, s, o, a);else if (l) {
          var u = Fn(s, l);if (!u.setSource) return o.push(u), n(i, c, r, s, o, a);u.setSource(m({}, i), function (e, t) {
            if (e) return n(i, c, r, s, o, a);o.push(u), n(t, i.type === t.type ? c : jn[t.type], r, s, o, a);
          });
        } else c.length ? n(i, c, r, s, o, a) : a ? r(i, o) : n(i, jn["*"], r, s, o, !0);
      }(t, jn[t.type], n, e);
    }, 1);
  }function Ln(e, t, n, i) {
    void 0 === i && (i = null);var r = "call" + Fe(n),
        s = e.reduce(In(r), i),
        o = s === An,
        a = o ? null : t[n](s);return function (e, t, n, i) {
      for (var r = e.length - 1; 0 <= r; r--) {
        var s = e[r];s[t] && s[t](i, n);
      }
    }(e, n, a, o), a;
  }var Nn = { buffered: 1, currentTime: 1, duration: 1, seekable: 1, played: 1, paused: 1 },
      On = { setCurrentTime: 1 },
      Dn = { play: 1, pause: 1 };function In(n) {
    return function (e, t) {
      return e === An ? An : t[n] ? t[n](e) : e;
    };
  }function Fn(e, t) {
    var n = Pn[e.id()],
        i = null;if (null == n) return i = t(e), Pn[e.id()] = [[t, i]], i;for (var r = 0; r < n.length; r++) {
      var s = n[r],
          o = s[0],
          a = s[1];o === t && (i = a);
    }return null === i && (i = t(e), n.push([t, i])), i;
  }var Rn = { opus: "video/ogg", ogv: "video/ogg", mp4: "video/mp4", mov: "video/mp4", m4v: "video/mp4", mkv: "video/x-matroska", mp3: "audio/mpeg", aac: "audio/aac", oga: "audio/ogg", m3u8: "application/x-mpegURL", jpg: "image/jpeg", jpeg: "image/jpeg", gif: "image/gif", png: "image/png", svg: "image/svg+xml", webp: "image/webp" },
      Bn = function Bn(e) {
    void 0 === e && (e = "");var t = Gt(e);return Rn[t.toLowerCase()] || "";
  };function Hn(e) {
    var t = Bn(e.src);return !e.type && t && (e.type = t), e;
  }var Vn = function (c) {
    function e(e, t, n) {
      var i,
          r = Re({ createEl: !1 }, t);if (i = c.call(this, e, r, n) || this, t.playerOptions.sources && 0 !== t.playerOptions.sources.length) e.src(t.playerOptions.sources);else for (var s = 0, o = t.playerOptions.techOrder; s < o.length; s++) {
        var a = Fe(o[s]),
            l = xn.getTech(a);if (a || (l = Be.getComponent(a)), l && l.isSupported()) {
          e.loadTech_(a);break;
        }
      }return i;
    }return f(e, c), e;
  }(Be);Be.registerComponent("MediaLoader", Vn);var zn = function (r) {
    function e(e, t) {
      var n;return (n = r.call(this, e, t) || this).emitTapEvents(), n.enable(), n;
    }f(e, r);var t = e.prototype;return t.createEl = function (e, t, n) {
      void 0 === e && (e = "div"), void 0 === t && (t = {}), void 0 === n && (n = {}), t = m({ innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>', className: this.buildCSSClass(), tabIndex: 0 }, t), "button" === e && g.error("Creating a ClickableComponent with an HTML element of " + e + " is not supported; use a Button instead."), n = m({ role: "button" }, n), this.tabIndex_ = t.tabIndex;var i = r.prototype.createEl.call(this, e, t, n);return this.createControlTextEl(i), i;
    }, t.dispose = function () {
      this.controlTextEl_ = null, r.prototype.dispose.call(this);
    }, t.createControlTextEl = function (e) {
      return this.controlTextEl_ = x("span", { className: "vjs-control-text" }, { "aria-live": "polite" }), e && e.appendChild(this.controlTextEl_), this.controlText(this.controlText_, e), this.controlTextEl_;
    }, t.controlText = function (e, t) {
      if (void 0 === t && (t = this.el()), void 0 === e) return this.controlText_ || "Need Text";var n = this.localize(e);this.controlText_ = e, j(this.controlTextEl_, n), this.nonIconControl || t.setAttribute("title", n);
    }, t.buildCSSClass = function () {
      return "vjs-control vjs-button " + r.prototype.buildCSSClass.call(this);
    }, t.enable = function () {
      this.enabled_ || (this.enabled_ = !0, this.removeClass("vjs-disabled"), this.el_.setAttribute("aria-disabled", "false"), "undefined" != typeof this.tabIndex_ && this.el_.setAttribute("tabIndex", this.tabIndex_), this.on(["tap", "click"], this.handleClick), this.on("focus", this.handleFocus), this.on("blur", this.handleBlur));
    }, t.disable = function () {
      this.enabled_ = !1, this.addClass("vjs-disabled"), this.el_.setAttribute("aria-disabled", "true"), "undefined" != typeof this.tabIndex_ && this.el_.removeAttribute("tabIndex"), this.off(["tap", "click"], this.handleClick), this.off("focus", this.handleFocus), this.off("blur", this.handleBlur);
    }, t.handleClick = function (e) {}, t.handleFocus = function (e) {
      he(d, "keydown", Ce(this, this.handleKeyPress));
    }, t.handleKeyPress = function (e) {
      At.isEventKey(e, "Space") || At.isEventKey(e, "Enter") ? (e.preventDefault(), this.trigger("click")) : r.prototype.handleKeyPress.call(this, e);
    }, t.handleBlur = function (e) {
      de(d, "keydown", Ce(this, this.handleKeyPress));
    }, e;
  }(Be);Be.registerComponent("ClickableComponent", zn);var Kn = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).update(), e.on("posterchange", Ce(v(v(n)), n.update)), n;
    }f(e, i);var t = e.prototype;return t.dispose = function () {
      this.player().off("posterchange", this.update), i.prototype.dispose.call(this);
    }, t.createEl = function () {
      return x("div", { className: "vjs-poster", tabIndex: -1 });
    }, t.update = function (e) {
      var t = this.player().poster();this.setSrc(t), t ? this.show() : this.hide();
    }, t.setSrc = function (e) {
      var t = "";e && (t = 'url("' + e + '")'), this.el_.style.backgroundImage = t;
    }, t.handleClick = function (e) {
      this.player_.controls() && (this.player_.paused() ? St(this.player_.play()) : this.player_.pause(), this.player_.handleFocus({}));
    }, e;
  }(zn);Be.registerComponent("PosterImage", Kn);var Wn = "#222",
      Un = { monospace: "monospace", sansSerif: "sans-serif", serif: "serif", monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace', monospaceSerif: '"Courier New", monospace', proportionalSansSerif: "sans-serif", proportionalSerif: "serif", casual: '"Comic Sans MS", Impact, fantasy', script: '"Monotype Corsiva", cursive', smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif' };function qn(e, t) {
    var n;if (4 === e.length) n = e[1] + e[1] + e[2] + e[2] + e[3] + e[3];else {
      if (7 !== e.length) throw new Error("Invalid color code provided, " + e + "; must be formatted as e.g. #f0e or #f604e2.");n = e.slice(1);
    }return "rgba(" + parseInt(n.slice(0, 2), 16) + "," + parseInt(n.slice(2, 4), 16) + "," + parseInt(n.slice(4, 6), 16) + "," + t + ")";
  }function Xn(e, t, n) {
    try {
      e.style[t] = n;
    } catch (e) {
      return;
    }
  }var $n = function (s) {
    function e(n, e, t) {
      var i;i = s.call(this, n, e, t) || this;var r = Ce(v(v(i)), i.updateDisplay);return n.on("loadstart", Ce(v(v(i)), i.toggleDisplay)), n.on("texttrackchange", r), n.on("loadedmetadata", Ce(v(v(i)), i.preselectTrack)), n.ready(Ce(v(v(i)), function () {
        if (n.tech_ && n.tech_.featuresNativeTextTracks) this.hide();else {
          n.on("fullscreenchange", r), n.on("playerresize", r), h.addEventListener("orientationchange", r), n.on("dispose", function () {
            return h.removeEventListener("orientationchange", r);
          });for (var e = this.options_.playerOptions.tracks || [], t = 0; t < e.length; t++) {
            this.player_.addRemoteTextTrack(e[t], !0);
          }this.preselectTrack();
        }
      })), i;
    }f(e, s);var t = e.prototype;return t.preselectTrack = function () {
      for (var e, t, n, i = { captions: 1, subtitles: 1 }, r = this.player_.textTracks(), s = this.player_.cache_.selectedLanguage, o = 0; o < r.length; o++) {
        var a = r[o];s && s.enabled && s.language && s.language === a.language && a.kind in i ? a.kind === s.kind ? n = a : n || (n = a) : s && !s.enabled ? t = e = n = null : a.default && ("descriptions" !== a.kind || e ? a.kind in i && !t && (t = a) : e = a);
      }n ? n.mode = "showing" : t ? t.mode = "showing" : e && (e.mode = "showing");
    }, t.toggleDisplay = function () {
      this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks ? this.hide() : this.show();
    }, t.createEl = function () {
      return s.prototype.createEl.call(this, "div", { className: "vjs-text-track-display" }, { "aria-live": "off", "aria-atomic": "true" });
    }, t.clearDisplay = function () {
      "function" == typeof h.WebVTT && h.WebVTT.processCues(h, [], this.el_);
    }, t.updateDisplay = function () {
      var e = this.player_.textTracks();this.clearDisplay();for (var t = null, n = null, i = e.length; i--;) {
        var r = e[i];"showing" === r.mode && ("descriptions" === r.kind ? t = r : n = r);
      }n ? ("off" !== this.getAttribute("aria-live") && this.setAttribute("aria-live", "off"), this.updateForTrack(n)) : t && ("assertive" !== this.getAttribute("aria-live") && this.setAttribute("aria-live", "assertive"), this.updateForTrack(t));
    }, t.updateForTrack = function (e) {
      if ("function" == typeof h.WebVTT && e.activeCues) {
        for (var t = [], n = 0; n < e.activeCues.length; n++) {
          t.push(e.activeCues[n]);
        }if (h.WebVTT.processCues(h, t, this.el_), this.player_.textTrackSettings) for (var i = this.player_.textTrackSettings.getValues(), r = t.length; r--;) {
          var s = t[r];if (s) {
            var o = s.displayState;if (i.color && (o.firstChild.style.color = i.color), i.textOpacity && Xn(o.firstChild, "color", qn(i.color || "#fff", i.textOpacity)), i.backgroundColor && (o.firstChild.style.backgroundColor = i.backgroundColor), i.backgroundOpacity && Xn(o.firstChild, "backgroundColor", qn(i.backgroundColor || "#000", i.backgroundOpacity)), i.windowColor && (i.windowOpacity ? Xn(o, "backgroundColor", qn(i.windowColor, i.windowOpacity)) : o.style.backgroundColor = i.windowColor), i.edgeStyle && ("dropshadow" === i.edgeStyle ? o.firstChild.style.textShadow = "2px 2px 3px #222, 2px 2px 4px #222, 2px 2px 5px " + Wn : "raised" === i.edgeStyle ? o.firstChild.style.textShadow = "1px 1px #222, 2px 2px #222, 3px 3px " + Wn : "depressed" === i.edgeStyle ? o.firstChild.style.textShadow = "1px 1px #ccc, 0 1px #ccc, -1px -1px #222, 0 -1px " + Wn : "uniform" === i.edgeStyle && (o.firstChild.style.textShadow = "0 0 4px #222, 0 0 4px #222, 0 0 4px #222, 0 0 4px " + Wn)), i.fontPercent && 1 !== i.fontPercent) {
              var a = h.parseFloat(o.style.fontSize);o.style.fontSize = a * i.fontPercent + "px", o.style.height = "auto", o.style.top = "auto", o.style.bottom = "2px";
            }i.fontFamily && "default" !== i.fontFamily && ("small-caps" === i.fontFamily ? o.firstChild.style.fontVariant = "small-caps" : o.firstChild.style.fontFamily = Un[i.fontFamily]);
          }
        }
      }
    }, e;
  }(Be);Be.registerComponent("TextTrackDisplay", $n);var Gn = function (r) {
    function e() {
      return r.apply(this, arguments) || this;
    }return f(e, r), e.prototype.createEl = function () {
      var e = this.player_.isAudio(),
          t = this.localize(e ? "Audio Player" : "Video Player"),
          n = x("span", { className: "vjs-control-text", innerHTML: this.localize("{1} is loading.", [t]) }),
          i = r.prototype.createEl.call(this, "div", { className: "vjs-loading-spinner", dir: "ltr" });return i.appendChild(n), i;
    }, e;
  }(Be);Be.registerComponent("LoadingSpinner", Gn);var Yn = function (t) {
    function e() {
      return t.apply(this, arguments) || this;
    }f(e, t);var n = e.prototype;return n.createEl = function (e, t, n) {
      void 0 === t && (t = {}), void 0 === n && (n = {}), t = m({ innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>', className: this.buildCSSClass() }, t), n = m({ type: "button" }, n);var i = Be.prototype.createEl.call(this, "button", t, n);return this.createControlTextEl(i), i;
    }, n.addChild = function (e, t) {
      void 0 === t && (t = {});var n = this.constructor.name;return g.warn("Adding an actionable (user controllable) child to a Button (" + n + ") is not supported; use a ClickableComponent instead."), Be.prototype.addChild.call(this, e, t);
    }, n.enable = function () {
      t.prototype.enable.call(this), this.el_.removeAttribute("disabled");
    }, n.disable = function () {
      t.prototype.disable.call(this), this.el_.setAttribute("disabled", "disabled");
    }, n.handleKeyPress = function (e) {
      At.isEventKey(e, "Space") || At.isEventKey(e, "Enter") || t.prototype.handleKeyPress.call(this, e);
    }, e;
  }(zn);Be.registerComponent("Button", Yn);var Qn = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).mouseused_ = !1, n.on("mousedown", n.handleMouseDown), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-big-play-button";
    }, t.handleClick = function (e) {
      var t = this.player_.play();if (this.mouseused_ && e.clientX && e.clientY) return St(t), void this.player_.handleFocus({});var n = this.player_.getChild("controlBar"),
          i = n && n.getChild("playToggle");if (i) {
        var r = function r() {
          return i.focus();
        };Et(t) ? t.then(r, function () {}) : this.setTimeout(r, 1);
      } else this.player_.focus();
    }, t.handleKeyPress = function (e) {
      this.mouseused_ = !1, i.prototype.handleKeyPress.call(this, e);
    }, t.handleMouseDown = function (e) {
      this.mouseused_ = !0;
    }, e;
  }(Yn);Qn.prototype.controlText_ = "Play Video", Be.registerComponent("BigPlayButton", Qn);var Jn = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).controlText(t && t.controlText || n.localize("Close")), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-close-button " + i.prototype.buildCSSClass.call(this);
    }, t.handleKeyPress = function (e) {}, t.handleClick = function (e) {
      this.trigger({ type: "close", bubbles: !1 });
    }, e;
  }(Yn);Be.registerComponent("CloseButton", Jn);var Zn = function (i) {
    function e(e, t) {
      var n;return void 0 === t && (t = {}), n = i.call(this, e, t) || this, t.replay = void 0 === t.replay || t.replay, n.on(e, "play", n.handlePlay), n.on(e, "pause", n.handlePause), t.replay && n.on(e, "ended", n.handleEnded), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-play-control " + i.prototype.buildCSSClass.call(this);
    }, t.handleClick = function (e) {
      this.player_.paused() ? this.player_.play() : this.player_.pause();
    }, t.handleSeeked = function (e) {
      this.removeClass("vjs-ended"), this.player_.paused() ? this.handlePause(e) : this.handlePlay(e);
    }, t.handlePlay = function (e) {
      this.removeClass("vjs-ended"), this.removeClass("vjs-paused"), this.addClass("vjs-playing"), this.controlText("Pause");
    }, t.handlePause = function (e) {
      this.removeClass("vjs-playing"), this.addClass("vjs-paused"), this.controlText("Play");
    }, t.handleEnded = function (e) {
      this.removeClass("vjs-playing"), this.addClass("vjs-ended"), this.controlText("Replay"), this.one(this.player_, "seeked", this.handleSeeked);
    }, e;
  }(Yn);Zn.prototype.controlText_ = "Play", Be.registerComponent("PlayToggle", Zn);var ei = function ei(e, t) {
    e = e < 0 ? 0 : e;var n = Math.floor(e % 60),
        i = Math.floor(e / 60 % 60),
        r = Math.floor(e / 3600),
        s = Math.floor(t / 60 % 60),
        o = Math.floor(t / 3600);return (isNaN(e) || e === 1 / 0) && (r = i = n = "-"), (r = 0 < r || 0 < o ? r + ":" : "") + (i = ((r || 10 <= s) && i < 10 ? "0" + i : i) + ":") + (n = n < 10 ? "0" + n : n);
  },
      ti = ei;function ni(e, t) {
    return void 0 === t && (t = e), ti(e, t);
  }var ii = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).throttledUpdateContent = Ee(Ce(v(v(n)), n.updateContent), 25), n.on(e, "timeupdate", n.throttledUpdateContent), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      var e = this.buildCSSClass(),
          t = i.prototype.createEl.call(this, "div", { className: e + " vjs-time-control vjs-control", innerHTML: '<span class="vjs-control-text" role="presentation">' + this.localize(this.labelText_) + " </span>" });return this.contentEl_ = x("span", { className: e + "-display" }, { "aria-live": "off", role: "presentation" }), this.updateTextNode_(), t.appendChild(this.contentEl_), t;
    }, t.dispose = function () {
      this.contentEl_ = null, this.textNode_ = null, i.prototype.dispose.call(this);
    }, t.updateTextNode_ = function () {
      if (this.contentEl_) {
        for (; this.contentEl_.firstChild;) {
          this.contentEl_.removeChild(this.contentEl_.firstChild);
        }this.textNode_ = d.createTextNode(this.formattedTime_ || this.formatTime_(0)), this.contentEl_.appendChild(this.textNode_);
      }
    }, t.formatTime_ = function (e) {
      return ni(e);
    }, t.updateFormattedTime_ = function (e) {
      var t = this.formatTime_(e);t !== this.formattedTime_ && (this.formattedTime_ = t, this.requestAnimationFrame(this.updateTextNode_));
    }, t.updateContent = function (e) {}, e;
  }(Be);ii.prototype.labelText_ = "Time", ii.prototype.controlText_ = "Time", Be.registerComponent("TimeDisplay", ii);var ri = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).on(e, "ended", n.handleEnded), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-current-time";
    }, t.updateContent = function (e) {
      var t = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();this.updateFormattedTime_(t);
    }, t.handleEnded = function (e) {
      this.player_.duration() && this.updateFormattedTime_(this.player_.duration());
    }, e;
  }(ii);ri.prototype.labelText_ = "Current Time", ri.prototype.controlText_ = "Current Time", Be.registerComponent("CurrentTimeDisplay", ri);var si = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).on(e, "durationchange", n.updateContent), n.on(e, "loadstart", n.updateContent), n.on(e, "loadedmetadata", n.throttledUpdateContent), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-duration";
    }, t.updateContent = function (e) {
      var t = this.player_.duration();this.duration_ !== t && (this.duration_ = t, this.updateFormattedTime_(t));
    }, e;
  }(ii);si.prototype.labelText_ = "Duration", si.prototype.controlText_ = "Duration", Be.registerComponent("DurationDisplay", si);var oi = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }return f(t, e), t.prototype.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: "vjs-time-control vjs-time-divider", innerHTML: "<div><span>/</span></div>" }, { "aria-hidden": !0 });
    }, t;
  }(Be);Be.registerComponent("TimeDivider", oi);var ai = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).on(e, "durationchange", n.throttledUpdateContent), n.on(e, "ended", n.handleEnded), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-remaining-time";
    }, t.createEl = function () {
      var e = i.prototype.createEl.call(this);return e.insertBefore(x("span", {}, { "aria-hidden": !0 }, "-"), this.contentEl_), e;
    }, t.updateContent = function (e) {
      "number" == typeof this.player_.duration() && (this.player_.remainingTimeDisplay ? this.updateFormattedTime_(this.player_.remainingTimeDisplay()) : this.updateFormattedTime_(this.player_.remainingTime()));
    }, t.handleEnded = function (e) {
      this.player_.duration() && this.updateFormattedTime_(0);
    }, e;
  }(ii);ai.prototype.labelText_ = "Remaining Time", ai.prototype.controlText_ = "Remaining Time", Be.registerComponent("RemainingTimeDisplay", ai);var li = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).updateShowing(), n.on(n.player(), "durationchange", n.updateShowing), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      var e = i.prototype.createEl.call(this, "div", { className: "vjs-live-control vjs-control" });return this.contentEl_ = x("div", { className: "vjs-live-display", innerHTML: '<span class="vjs-control-text">' + this.localize("Stream Type") + " </span>" + this.localize("LIVE") }, { "aria-live": "off" }), e.appendChild(this.contentEl_), e;
    }, t.dispose = function () {
      this.contentEl_ = null, i.prototype.dispose.call(this);
    }, t.updateShowing = function (e) {
      this.player().duration() === 1 / 0 ? this.show() : this.hide();
    }, e;
  }(Be);Be.registerComponent("LiveDisplay", li);var ci = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).updateLiveEdgeStatus(), n.player_.liveTracker && n.on(n.player_.liveTracker, "liveedgechange", n.updateLiveEdgeStatus), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      var e = i.prototype.createEl.call(this, "button", { className: "vjs-seek-to-live-control vjs-control" });return this.textEl_ = x("span", { className: "vjs-seek-to-live-text", innerHTML: this.localize("LIVE") }, { "aria-hidden": "true" }), e.appendChild(this.textEl_), e;
    }, t.updateLiveEdgeStatus = function (e) {
      !this.player_.liveTracker || this.player_.liveTracker.atLiveEdge() ? (this.setAttribute("aria-disabled", !0), this.addClass("vjs-at-live-edge"), this.controlText("Seek to live, currently playing live")) : (this.setAttribute("aria-disabled", !1), this.removeClass("vjs-at-live-edge"), this.controlText("Seek to live, currently behind live"));
    }, t.handleClick = function () {
      this.player_.liveTracker.seekToLiveEdge();
    }, t.dispose = function () {
      this.player_.liveTracker && this.off(this.player_.liveTracker, "liveedgechange", this.updateLiveEdgeStatus), this.textEl_ = null, i.prototype.dispose.call(this);
    }, e;
  }(Yn);ci.prototype.controlText_ = "Seek to live, currently playing live", Be.registerComponent("SeekToLive", ci);var ui = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).bar = n.getChild(n.options_.barName), n.vertical(!!n.options_.vertical), n.enable(), n;
    }f(e, i);var t = e.prototype;return t.enabled = function () {
      return this.enabled_;
    }, t.enable = function () {
      this.enabled() || (this.on("mousedown", this.handleMouseDown), this.on("touchstart", this.handleMouseDown), this.on("focus", this.handleFocus), this.on("blur", this.handleBlur), this.on("click", this.handleClick), this.on(this.player_, "controlsvisible", this.update), this.playerEvent && this.on(this.player_, this.playerEvent, this.update), this.removeClass("disabled"), this.setAttribute("tabindex", 0), this.enabled_ = !0);
    }, t.disable = function () {
      if (this.enabled()) {
        var e = this.bar.el_.ownerDocument;this.off("mousedown", this.handleMouseDown), this.off("touchstart", this.handleMouseDown), this.off("focus", this.handleFocus), this.off("blur", this.handleBlur), this.off("click", this.handleClick), this.off(this.player_, "controlsvisible", this.update), this.off(e, "mousemove", this.handleMouseMove), this.off(e, "mouseup", this.handleMouseUp), this.off(e, "touchmove", this.handleMouseMove), this.off(e, "touchend", this.handleMouseUp), this.removeAttribute("tabindex"), this.addClass("disabled"), this.playerEvent && this.off(this.player_, this.playerEvent, this.update), this.enabled_ = !1;
      }
    }, t.createEl = function (e, t, n) {
      return void 0 === t && (t = {}), void 0 === n && (n = {}), t.className = t.className + " vjs-slider", t = m({ tabIndex: 0 }, t), n = m({ role: "slider", "aria-valuenow": 0, "aria-valuemin": 0, "aria-valuemax": 100, tabIndex: 0 }, n), i.prototype.createEl.call(this, e, t, n);
    }, t.handleMouseDown = function (e) {
      var t = this.bar.el_.ownerDocument;"mousedown" === e.type && e.preventDefault(), "touchstart" !== e.type || it || e.preventDefault(), B(), this.addClass("vjs-sliding"), this.trigger("slideractive"), this.on(t, "mousemove", this.handleMouseMove), this.on(t, "mouseup", this.handleMouseUp), this.on(t, "touchmove", this.handleMouseMove), this.on(t, "touchend", this.handleMouseUp), this.handleMouseMove(e);
    }, t.handleMouseMove = function (e) {}, t.handleMouseUp = function () {
      var e = this.bar.el_.ownerDocument;H(), this.removeClass("vjs-sliding"), this.trigger("sliderinactive"), this.off(e, "mousemove", this.handleMouseMove), this.off(e, "mouseup", this.handleMouseUp), this.off(e, "touchmove", this.handleMouseMove), this.off(e, "touchend", this.handleMouseUp), this.update();
    }, t.update = function () {
      if (this.el_) {
        var e = this.getPercent(),
            t = this.bar;if (t) {
          ("number" != typeof e || e != e || e < 0 || e === 1 / 0) && (e = 0);var n = (100 * e).toFixed(2) + "%",
              i = t.el().style;return this.vertical() ? i.height = n : i.width = n, e;
        }
      }
    }, t.calculateDistance = function (e) {
      var t = K(this.el_, e);return this.vertical() ? t.y : t.x;
    }, t.handleFocus = function () {
      this.on(this.bar.el_.ownerDocument, "keydown", this.handleKeyPress);
    }, t.handleKeyPress = function (e) {
      At.isEventKey(e, "Left") || At.isEventKey(e, "Down") ? (e.preventDefault(), this.stepBack()) : At.isEventKey(e, "Right") || At.isEventKey(e, "Up") ? (e.preventDefault(), this.stepForward()) : i.prototype.handleKeyPress.call(this, e);
    }, t.handleBlur = function () {
      this.off(this.bar.el_.ownerDocument, "keydown", this.handleKeyPress);
    }, t.handleClick = function (e) {
      e.stopImmediatePropagation(), e.preventDefault();
    }, t.vertical = function (e) {
      if (void 0 === e) return this.vertical_ || !1;this.vertical_ = !!e, this.vertical_ ? this.addClass("vjs-slider-vertical") : this.addClass("vjs-slider-horizontal");
    }, e;
  }(Be);Be.registerComponent("Slider", ui);var hi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).partEls_ = [], n.on(e, "progress", n.update), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      return i.prototype.createEl.call(this, "div", { className: "vjs-load-progress", innerHTML: '<span class="vjs-control-text"><span>' + this.localize("Loaded") + '</span>: <span class="vjs-control-text-loaded-percentage">0%</span></span>' });
    }, t.dispose = function () {
      this.partEls_ = null, i.prototype.dispose.call(this);
    }, t.update = function (e) {
      var t = this.player_.liveTracker,
          n = this.player_.buffered(),
          i = t && t.isLive() ? t.seekableEnd() : this.player_.duration(),
          r = this.player_.bufferedEnd(),
          s = this.partEls_,
          o = this.$(".vjs-control-text-loaded-percentage"),
          a = function a(e, t, n) {
        var i = e / t || 0;return i = 100 * (1 <= i ? 1 : i), n && (i = i.toFixed(2)), i + "%";
      };this.el_.style.width = a(r, i), j(o, a(r, i, !0));for (var l = 0; l < n.length; l++) {
        var c = n.start(l),
            u = n.end(l),
            h = s[l];h || (h = this.el_.appendChild(x()), s[l] = h), h.style.left = a(c, r), h.style.width = a(u - c, r);
      }for (var d = s.length; d > n.length; d--) {
        this.el_.removeChild(s[d - 1]);
      }s.length = n.length;
    }, e;
  }(Be);Be.registerComponent("LoadProgressBar", hi);var di = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }f(t, e);var n = t.prototype;return n.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: "vjs-time-tooltip" }, { "aria-hidden": "true" });
    }, n.update = function (e, t, n) {
      var i = V(this.el_),
          r = V(this.player_.el()),
          s = e.width * t;if (r && i) {
        var o = e.left - r.left + s,
            a = e.width - s + (r.right - e.right),
            l = i.width / 2;o < l ? l += l - o : a < l && (l = a), l < 0 ? l = 0 : l > i.width && (l = i.width), this.el_.style.right = "-" + l + "px", j(this.el_, n);
      }
    }, n.updateTime = function (r, s, o, a) {
      var l = this;this.rafId_ && this.cancelAnimationFrame(this.rafId_), this.rafId_ = this.requestAnimationFrame(function () {
        var e,
            t = l.player_.duration();if (l.player_.liveTracker && l.player_.liveTracker.isLive()) {
          var n = l.player_.liveTracker.liveWindow(),
              i = n - s * n;e = (i < 1 ? "" : "-") + ni(i, n);
        } else e = ni(o, t);l.update(r, s, e), a && a();
      });
    }, t;
  }(Be);Be.registerComponent("TimeTooltip", di);var pi = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }f(t, e);var n = t.prototype;return n.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: "vjs-play-progress vjs-slider-bar" }, { "aria-hidden": "true" });
    }, n.update = function (e, t) {
      var n = this.getChild("timeTooltip");if (n) {
        var i = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();n.updateTime(e, t, i);
      }
    }, t;
  }(Be);pi.prototype.options_ = { children: [] }, Ye || Je || pi.prototype.options_.children.push("timeTooltip"), Be.registerComponent("PlayProgressBar", pi);var fi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).update = Ee(Ce(v(v(n)), n.update), 25), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      return i.prototype.createEl.call(this, "div", { className: "vjs-mouse-display" });
    }, t.update = function (e, t) {
      var n = this,
          i = t * this.player_.duration();this.getChild("timeTooltip").updateTime(e, t, i, function () {
        n.el_.style.left = e.width * t + "px";
      });
    }, e;
  }(Be);fi.prototype.options_ = { children: ["timeTooltip"] }, Be.registerComponent("MouseTimeDisplay", fi);var vi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).setEventHandlers_(), n;
    }f(e, i);var t = e.prototype;return t.setEventHandlers_ = function () {
      this.update = Ee(Ce(this, this.update), 30), this.on(this.player_, "timeupdate", this.update), this.on(this.player_, "ended", this.handleEnded), this.on(this.player_, "durationchange", this.update), this.player_.liveTracker && this.on(this.player_.liveTracker, "liveedgechange", this.update), this.updateInterval = null, this.on(this.player_, ["playing"], this.enableInterval_), this.on(this.player_, ["ended", "pause", "waiting"], this.disableInterval_), "hidden" in d && "visibilityState" in d && this.on(d, "visibilitychange", this.toggleVisibility_);
    }, t.toggleVisibility_ = function (e) {
      d.hidden ? this.disableInterval_(e) : (this.enableInterval_(), this.requestAnimationFrame(this.update));
    }, t.enableInterval_ = function () {
      var e = this;this.clearInterval(this.updateInterval), this.updateInterval = this.setInterval(function () {
        e.requestAnimationFrame(e.update);
      }, 30);
    }, t.disableInterval_ = function (e) {
      this.player_.liveTracker && this.player_.liveTracker.isLive() && "ended" !== e.type || this.clearInterval(this.updateInterval);
    }, t.createEl = function () {
      return i.prototype.createEl.call(this, "div", { className: "vjs-progress-holder" }, { "aria-label": this.localize("Progress Bar") });
    }, t.update_ = function (e, t) {
      var n = this.player_.liveTracker,
          i = this.player_.duration();n && n.isLive() && (i = this.player_.liveTracker.liveCurrentTime()), this.el_.setAttribute("aria-valuenow", (100 * t).toFixed(2)), this.el_.setAttribute("aria-valuetext", this.localize("progress bar timing: currentTime={1} duration={2}", [ni(e, i), ni(i, i)], "{1} of {2}")), this.bar && this.bar.update(V(this.el_), t);
    }, t.update = function (e) {
      if (null !== this.el().offsetParent) {
        var t = i.prototype.update.call(this);return this.update_(this.getCurrentTime_(), t), t;
      }
    }, t.getCurrentTime_ = function () {
      return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
    }, t.handleEnded = function (e) {
      this.update_(this.player_.duration(), 1);
    }, t.getPercent = function () {
      var e,
          t = this.getCurrentTime_(),
          n = this.player_.liveTracker;return n && n.isLive() ? (e = (t - n.seekableStart()) / n.liveWindow(), n.atLiveEdge() && (e = 1)) : e = t / this.player_.duration(), 1 <= e ? 1 : e || 0;
    }, t.handleMouseDown = function (e) {
      G(e) && (e.stopPropagation(), this.player_.scrubbing(!0), this.videoWasPlaying = !this.player_.paused(), this.player_.pause(), i.prototype.handleMouseDown.call(this, e));
    }, t.handleMouseMove = function (e) {
      if (G(e)) {
        var t,
            n = this.calculateDistance(e),
            i = this.player_.liveTracker;if (i && i.isLive()) {
          var r = i.seekableStart(),
              s = i.liveCurrentTime();if (s <= (t = r + n * i.liveWindow()) && (t = s), t <= r && (t = r + .1), t === 1 / 0) return;
        } else (t = n * this.player_.duration()) === this.player_.duration() && (t -= .1);this.player_.currentTime(t);
      }
    }, t.enable = function () {
      i.prototype.enable.call(this);var e = this.getChild("mouseTimeDisplay");e && e.show();
    }, t.disable = function () {
      i.prototype.disable.call(this);var e = this.getChild("mouseTimeDisplay");e && e.hide();
    }, t.handleMouseUp = function (e) {
      i.prototype.handleMouseUp.call(this, e), e && e.stopPropagation(), this.player_.scrubbing(!1), this.player_.trigger({ type: "timeupdate", target: this, manuallyTriggered: !0 }), this.videoWasPlaying && St(this.player_.play());
    }, t.stepForward = function () {
      this.player_.currentTime(this.player_.currentTime() + 5);
    }, t.stepBack = function () {
      this.player_.currentTime(this.player_.currentTime() - 5);
    }, t.handleAction = function (e) {
      this.player_.paused() ? this.player_.play() : this.player_.pause();
    }, t.handleKeyPress = function (e) {
      if (At.isEventKey(e, "Space") || At.isEventKey(e, "Enter")) e.preventDefault(), this.handleAction(e);else if (At.isEventKey(e, "Home")) e.preventDefault(), this.player_.currentTime(0);else if (At.isEventKey(e, "End")) e.preventDefault(), this.player_.currentTime(this.player_.duration());else if (/^[0-9]$/.test(At(e))) {
        e.preventDefault();var t = 10 * (At.codes[At(e)] - At.codes[0]) / 100;this.player_.currentTime(this.player_.duration() * t);
      } else At.isEventKey(e, "PgDn") ? (e.preventDefault(), this.player_.currentTime(this.player_.currentTime() - 60)) : At.isEventKey(e, "PgUp") ? (e.preventDefault(), this.player_.currentTime(this.player_.currentTime() + 60)) : i.prototype.handleKeyPress.call(this, e);
    }, e;
  }(ui);vi.prototype.options_ = { children: ["loadProgressBar", "playProgressBar"], barName: "playProgressBar" }, Ye || Je || vi.prototype.options_.children.splice(1, 0, "mouseTimeDisplay"), Be.registerComponent("SeekBar", vi);var gi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).handleMouseMove = Ee(Ce(v(v(n)), n.handleMouseMove), 25), n.throttledHandleMouseSeek = Ee(Ce(v(v(n)), n.handleMouseSeek), 25), n.enable(), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      return i.prototype.createEl.call(this, "div", { className: "vjs-progress-control vjs-control" });
    }, t.handleMouseMove = function (e) {
      var t = this.getChild("seekBar");if (t) {
        var n = t.getChild("mouseTimeDisplay"),
            i = t.el(),
            r = V(i),
            s = K(i, e).x;1 < s ? s = 1 : s < 0 && (s = 0), n && n.update(r, s);
      }
    }, t.handleMouseSeek = function (e) {
      var t = this.getChild("seekBar");t && t.handleMouseMove(e);
    }, t.enabled = function () {
      return this.enabled_;
    }, t.disable = function () {
      this.children().forEach(function (e) {
        return e.disable && e.disable();
      }), this.enabled() && (this.off(["mousedown", "touchstart"], this.handleMouseDown), this.off(this.el_, "mousemove", this.handleMouseMove), this.handleMouseUp(), this.addClass("disabled"), this.enabled_ = !1);
    }, t.enable = function () {
      this.children().forEach(function (e) {
        return e.enable && e.enable();
      }), this.enabled() || (this.on(["mousedown", "touchstart"], this.handleMouseDown), this.on(this.el_, "mousemove", this.handleMouseMove), this.removeClass("disabled"), this.enabled_ = !0);
    }, t.handleMouseDown = function (e) {
      var t = this.el_.ownerDocument,
          n = this.getChild("seekBar");n && n.handleMouseDown(e), this.on(t, "mousemove", this.throttledHandleMouseSeek), this.on(t, "touchmove", this.throttledHandleMouseSeek), this.on(t, "mouseup", this.handleMouseUp), this.on(t, "touchend", this.handleMouseUp);
    }, t.handleMouseUp = function (e) {
      var t = this.el_.ownerDocument,
          n = this.getChild("seekBar");n && n.handleMouseUp(e), this.off(t, "mousemove", this.throttledHandleMouseSeek), this.off(t, "touchmove", this.throttledHandleMouseSeek), this.off(t, "mouseup", this.handleMouseUp), this.off(t, "touchend", this.handleMouseUp);
    }, e;
  }(Be);gi.prototype.options_ = { children: ["seekBar"] }, Be.registerComponent("ProgressControl", gi);var yi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).on(e, "fullscreenchange", n.handleFullscreenChange), !1 === d[vt.fullscreenEnabled] && n.disable(), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-fullscreen-control " + i.prototype.buildCSSClass.call(this);
    }, t.handleFullscreenChange = function (e) {
      this.player_.isFullscreen() ? this.controlText("Non-Fullscreen") : this.controlText("Fullscreen");
    }, t.handleClick = function (e) {
      this.player_.isFullscreen() ? this.player_.exitFullscreen() : this.player_.requestFullscreen();
    }, e;
  }(Yn);yi.prototype.controlText_ = "Fullscreen", Be.registerComponent("FullscreenToggle", yi);var _i = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }return f(t, e), t.prototype.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: "vjs-volume-level", innerHTML: '<span class="vjs-control-text"></span>' });
    }, t;
  }(Be);Be.registerComponent("VolumeLevel", _i);var mi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).on("slideractive", n.updateLastVolume_), n.on(e, "volumechange", n.updateARIAAttributes), e.ready(function () {
        return n.updateARIAAttributes();
      }), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      return i.prototype.createEl.call(this, "div", { className: "vjs-volume-bar vjs-slider-bar" }, { "aria-label": this.localize("Volume Level"), "aria-live": "polite" });
    }, t.handleMouseDown = function (e) {
      G(e) && i.prototype.handleMouseDown.call(this, e);
    }, t.handleMouseMove = function (e) {
      G(e) && (this.checkMuted(), this.player_.volume(this.calculateDistance(e)));
    }, t.checkMuted = function () {
      this.player_.muted() && this.player_.muted(!1);
    }, t.getPercent = function () {
      return this.player_.muted() ? 0 : this.player_.volume();
    }, t.stepForward = function () {
      this.checkMuted(), this.player_.volume(this.player_.volume() + .1);
    }, t.stepBack = function () {
      this.checkMuted(), this.player_.volume(this.player_.volume() - .1);
    }, t.updateARIAAttributes = function (e) {
      var t = this.player_.muted() ? 0 : this.volumeAsPercentage_();this.el_.setAttribute("aria-valuenow", t), this.el_.setAttribute("aria-valuetext", t + "%");
    }, t.volumeAsPercentage_ = function () {
      return Math.round(100 * this.player_.volume());
    }, t.updateLastVolume_ = function () {
      var e = this,
          t = this.player_.volume();this.one("sliderinactive", function () {
        0 === e.player_.volume() && e.player_.lastVolume_(t);
      });
    }, e;
  }(ui);mi.prototype.options_ = { children: ["volumeLevel"], barName: "volumeLevel" }, mi.prototype.playerEvent = "volumechange", Be.registerComponent("VolumeBar", mi);var bi = function (s) {
    function e(e, t) {
      var n, i, r;return void 0 === t && (t = {}), t.vertical = t.vertical || !1, ("undefined" == typeof t.volumeBar || c(t.volumeBar)) && (t.volumeBar = t.volumeBar || {}, t.volumeBar.vertical = t.vertical), n = s.call(this, e, t) || this, i = v(v(n)), (r = e).tech_ && !r.tech_.featuresVolumeControl && i.addClass("vjs-hidden"), i.on(r, "loadstart", function () {
        r.tech_.featuresVolumeControl ? i.removeClass("vjs-hidden") : i.addClass("vjs-hidden");
      }), n.throttledHandleMouseMove = Ee(Ce(v(v(n)), n.handleMouseMove), 25), n.on("mousedown", n.handleMouseDown), n.on("touchstart", n.handleMouseDown), n.on(n.volumeBar, ["focus", "slideractive"], function () {
        n.volumeBar.addClass("vjs-slider-active"), n.addClass("vjs-slider-active"), n.trigger("slideractive");
      }), n.on(n.volumeBar, ["blur", "sliderinactive"], function () {
        n.volumeBar.removeClass("vjs-slider-active"), n.removeClass("vjs-slider-active"), n.trigger("sliderinactive");
      }), n;
    }f(e, s);var t = e.prototype;return t.createEl = function () {
      var e = "vjs-volume-horizontal";return this.options_.vertical && (e = "vjs-volume-vertical"), s.prototype.createEl.call(this, "div", { className: "vjs-volume-control vjs-control " + e });
    }, t.handleMouseDown = function (e) {
      var t = this.el_.ownerDocument;this.on(t, "mousemove", this.throttledHandleMouseMove), this.on(t, "touchmove", this.throttledHandleMouseMove), this.on(t, "mouseup", this.handleMouseUp), this.on(t, "touchend", this.handleMouseUp);
    }, t.handleMouseUp = function (e) {
      var t = this.el_.ownerDocument;this.off(t, "mousemove", this.throttledHandleMouseMove), this.off(t, "touchmove", this.throttledHandleMouseMove), this.off(t, "mouseup", this.handleMouseUp), this.off(t, "touchend", this.handleMouseUp);
    }, t.handleMouseMove = function (e) {
      this.volumeBar.handleMouseMove(e);
    }, e;
  }(Be);bi.prototype.options_ = { children: ["volumeBar"] }, Be.registerComponent("VolumeControl", bi);var Ti = function (s) {
    function e(e, t) {
      var n, i, r;return n = s.call(this, e, t) || this, i = v(v(n)), (r = e).tech_ && !r.tech_.featuresMuteControl && i.addClass("vjs-hidden"), i.on(r, "loadstart", function () {
        r.tech_.featuresMuteControl ? i.removeClass("vjs-hidden") : i.addClass("vjs-hidden");
      }), n.on(e, ["loadstart", "volumechange"], n.update), n;
    }f(e, s);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-mute-control " + s.prototype.buildCSSClass.call(this);
    }, t.handleClick = function (e) {
      var t = this.player_.volume(),
          n = this.player_.lastVolume_();if (0 === t) {
        var i = n < .1 ? .1 : n;this.player_.volume(i), this.player_.muted(!1);
      } else this.player_.muted(!this.player_.muted());
    }, t.update = function (e) {
      this.updateIcon_(), this.updateControlText_();
    }, t.updateIcon_ = function () {
      var e = this.player_.volume(),
          t = 3;Ye && this.player_.tech_ && this.player_.tech_.el_ && this.player_.muted(this.player_.tech_.el_.muted), 0 === e || this.player_.muted() ? t = 0 : e < .33 ? t = 1 : e < .67 && (t = 2);for (var n = 0; n < 4; n++) {
        L(this.el_, "vjs-vol-" + n);
      }M(this.el_, "vjs-vol-" + t);
    }, t.updateControlText_ = function () {
      var e = this.player_.muted() || 0 === this.player_.volume() ? "Unmute" : "Mute";this.controlText() !== e && this.controlText(e);
    }, e;
  }(Yn);Ti.prototype.controlText_ = "Mute", Be.registerComponent("MuteToggle", Ti);var ki = function (i) {
    function e(e, t) {
      var n;return void 0 === t && (t = {}), "undefined" != typeof t.inline ? t.inline = t.inline : t.inline = !0, ("undefined" == typeof t.volumeControl || c(t.volumeControl)) && (t.volumeControl = t.volumeControl || {}, t.volumeControl.vertical = !t.inline), (n = i.call(this, e, t) || this).on(e, ["loadstart"], n.volumePanelState_), n.on(n.volumeControl, ["slideractive"], n.sliderActive_), n.on(n.volumeControl, ["sliderinactive"], n.sliderInactive_), n;
    }f(e, i);var t = e.prototype;return t.sliderActive_ = function () {
      this.addClass("vjs-slider-active");
    }, t.sliderInactive_ = function () {
      this.removeClass("vjs-slider-active");
    }, t.volumePanelState_ = function () {
      this.volumeControl.hasClass("vjs-hidden") && this.muteToggle.hasClass("vjs-hidden") && this.addClass("vjs-hidden"), this.volumeControl.hasClass("vjs-hidden") && !this.muteToggle.hasClass("vjs-hidden") && this.addClass("vjs-mute-toggle-only");
    }, t.createEl = function () {
      var e = "vjs-volume-panel-horizontal";return this.options_.inline || (e = "vjs-volume-panel-vertical"), i.prototype.createEl.call(this, "div", { className: "vjs-volume-panel vjs-control " + e });
    }, e;
  }(Be);ki.prototype.options_ = { children: ["muteToggle", "volumeControl"] }, Be.registerComponent("VolumePanel", ki);var Ci = function (i) {
    function e(e, t) {
      var n;return n = i.call(this, e, t) || this, t && (n.menuButton_ = t.menuButton), n.focusedChild_ = -1, n.on("keydown", n.handleKeyPress), n.boundHandleBlur_ = Ce(v(v(n)), n.handleBlur), n.boundHandleTapClick_ = Ce(v(v(n)), n.handleTapClick), n;
    }f(e, i);var t = e.prototype;return t.addEventListenerForItem = function (e) {
      e instanceof Be && (this.on(e, "blur", this.boundHandleBlur_), this.on(e, ["tap", "click"], this.boundHandleTapClick_));
    }, t.removeEventListenerForItem = function (e) {
      e instanceof Be && (this.off(e, "blur", this.boundHandleBlur_), this.off(e, ["tap", "click"], this.boundHandleTapClick_));
    }, t.removeChild = function (e) {
      "string" == typeof e && (e = this.getChild(e)), this.removeEventListenerForItem(e), i.prototype.removeChild.call(this, e);
    }, t.addItem = function (e) {
      var t = this.addChild(e);t && this.addEventListenerForItem(t);
    }, t.createEl = function () {
      var e = this.options_.contentElType || "ul";this.contentEl_ = x(e, { className: "vjs-menu-content" }), this.contentEl_.setAttribute("role", "menu");var t = i.prototype.createEl.call(this, "div", { append: this.contentEl_, className: "vjs-menu" });return t.appendChild(this.contentEl_), he(t, "click", function (e) {
        e.preventDefault(), e.stopImmediatePropagation();
      }), t;
    }, t.dispose = function () {
      this.contentEl_ = null, this.boundHandleBlur_ = null, this.boundHandleTapClick_ = null, i.prototype.dispose.call(this);
    }, t.handleBlur = function (e) {
      var t = e.relatedTarget || d.activeElement;if (!this.children().some(function (e) {
        return e.el() === t;
      })) {
        var n = this.menuButton_;n && n.buttonPressed_ && t !== n.el().firstChild && n.unpressButton();
      }
    }, t.handleTapClick = function (t) {
      if (this.menuButton_) {
        this.menuButton_.unpressButton();var e = this.children();if (!Array.isArray(e)) return;var n = e.filter(function (e) {
          return e.el() === t.target;
        })[0];if (!n) return;"CaptionSettingsMenuItem" !== n.name() && this.menuButton_.focus();
      }
    }, t.handleKeyPress = function (e) {
      At.isEventKey(e, "Left") || At.isEventKey(e, "Down") ? (e.preventDefault(), this.stepForward()) : (At.isEventKey(e, "Right") || At.isEventKey(e, "Up")) && (e.preventDefault(), this.stepBack());
    }, t.stepForward = function () {
      var e = 0;void 0 !== this.focusedChild_ && (e = this.focusedChild_ + 1), this.focus(e);
    }, t.stepBack = function () {
      var e = 0;void 0 !== this.focusedChild_ && (e = this.focusedChild_ - 1), this.focus(e);
    }, t.focus = function (e) {
      void 0 === e && (e = 0);var t = this.children().slice();t.length && t[0].className && /vjs-menu-title/.test(t[0].className) && t.shift(), 0 < t.length && (e < 0 ? e = 0 : e >= t.length && (e = t.length - 1), t[this.focusedChild_ = e].el_.focus());
    }, e;
  }(Be);Be.registerComponent("Menu", Ci);var Ei = function (r) {
    function e(e, t) {
      var n;void 0 === t && (t = {}), (n = r.call(this, e, t) || this).menuButton_ = new Yn(e, t), n.menuButton_.controlText(n.controlText_), n.menuButton_.el_.setAttribute("aria-haspopup", "true");var i = Yn.prototype.buildCSSClass();return n.menuButton_.el_.className = n.buildCSSClass() + " " + i, n.menuButton_.removeClass("vjs-control"), n.addChild(n.menuButton_), n.update(), n.enabled_ = !0, n.on(n.menuButton_, "tap", n.handleClick), n.on(n.menuButton_, "click", n.handleClick), n.on(n.menuButton_, "focus", n.handleFocus), n.on(n.menuButton_, "blur", n.handleBlur), n.on(n.menuButton_, "mouseenter", function () {
        n.menu.show();
      }), n.on("keydown", n.handleSubmenuKeyPress), n;
    }f(e, r);var t = e.prototype;return t.update = function () {
      var e = this.createMenu();this.menu && (this.menu.dispose(), this.removeChild(this.menu)), this.menu = e, this.addChild(e), this.buttonPressed_ = !1, this.menuButton_.el_.setAttribute("aria-expanded", "false"), this.items && this.items.length <= this.hideThreshold_ ? this.hide() : this.show();
    }, t.createMenu = function () {
      var e = new Ci(this.player_, { menuButton: this });if (this.hideThreshold_ = 0, this.options_.title) {
        var t = x("li", { className: "vjs-menu-title", innerHTML: Fe(this.options_.title), tabIndex: -1 });this.hideThreshold_ += 1;var n = new Be(this.player_, { el: t });e.addItem(n);
      }if (this.items = this.createItems(), this.items) for (var i = 0; i < this.items.length; i++) {
        e.addItem(this.items[i]);
      }return e;
    }, t.createItems = function () {}, t.createEl = function () {
      return r.prototype.createEl.call(this, "div", { className: this.buildWrapperCSSClass() }, {});
    }, t.buildWrapperCSSClass = function () {
      var e = "vjs-menu-button";return !0 === this.options_.inline ? e += "-inline" : e += "-popup", "vjs-menu-button " + e + " " + Yn.prototype.buildCSSClass() + " " + r.prototype.buildCSSClass.call(this);
    }, t.buildCSSClass = function () {
      var e = "vjs-menu-button";return !0 === this.options_.inline ? e += "-inline" : e += "-popup", "vjs-menu-button " + e + " " + r.prototype.buildCSSClass.call(this);
    }, t.controlText = function (e, t) {
      return void 0 === t && (t = this.menuButton_.el()), this.menuButton_.controlText(e, t);
    }, t.handleClick = function (e) {
      this.buttonPressed_ ? this.unpressButton() : this.pressButton();
    }, t.focus = function () {
      this.menuButton_.focus();
    }, t.blur = function () {
      this.menuButton_.blur();
    }, t.handleFocus = function () {
      he(d, "keydown", Ce(this, this.handleKeyPress));
    }, t.handleBlur = function () {
      de(d, "keydown", Ce(this, this.handleKeyPress));
    }, t.handleKeyPress = function (e) {
      At.isEventKey(e, "Esc") || At.isEventKey(e, "Tab") ? (this.buttonPressed_ && this.unpressButton(), At.isEventKey(e, "Tab") || (e.preventDefault(), this.menuButton_.focus())) : (At.isEventKey(e, "Up") || At.isEventKey(e, "Down")) && (this.buttonPressed_ || (e.preventDefault(), this.pressButton()));
    }, t.handleSubmenuKeyPress = function (e) {
      (At.isEventKey(e, "Esc") || At.isEventKey(e, "Tab")) && (this.buttonPressed_ && this.unpressButton(), At.isEventKey(e, "Tab") || (e.preventDefault(), this.menuButton_.focus()));
    }, t.pressButton = function () {
      if (this.enabled_) {
        if (this.buttonPressed_ = !0, this.menu.show(), this.menu.lockShowing(), this.menuButton_.el_.setAttribute("aria-expanded", "true"), Ye && S()) return;this.menu.focus();
      }
    }, t.unpressButton = function () {
      this.enabled_ && (this.buttonPressed_ = !1, this.menu.unlockShowing(), this.menu.hide(), this.menuButton_.el_.setAttribute("aria-expanded", "false"));
    }, t.disable = function () {
      this.unpressButton(), this.enabled_ = !1, this.addClass("vjs-disabled"), this.menuButton_.disable();
    }, t.enable = function () {
      this.enabled_ = !0, this.removeClass("vjs-disabled"), this.menuButton_.enable();
    }, e;
  }(Be);Be.registerComponent("MenuButton", Ei);var Si = function (s) {
    function e(e, t) {
      var n,
          i = t.tracks;if ((n = s.call(this, e, t) || this).items.length <= 1 && n.hide(), !i) return v(n);var r = Ce(v(v(n)), n.update);return i.addEventListener("removetrack", r), i.addEventListener("addtrack", r), n.player_.on("ready", r), n.player_.on("dispose", function () {
        i.removeEventListener("removetrack", r), i.removeEventListener("addtrack", r);
      }), n;
    }return f(e, s), e;
  }(Ei);Be.registerComponent("TrackButton", Si);var wi = ["Tab", "Esc", "Up", "Down", "Right", "Left"],
      xi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).selectable = t.selectable, n.isSelected_ = t.selected || !1, n.multiSelectable = t.multiSelectable, n.selected(n.isSelected_), n.selectable ? n.multiSelectable ? n.el_.setAttribute("role", "menuitemcheckbox") : n.el_.setAttribute("role", "menuitemradio") : n.el_.setAttribute("role", "menuitem"), n;
    }f(e, i);var t = e.prototype;return t.createEl = function (e, t, n) {
      return this.nonIconControl = !0, i.prototype.createEl.call(this, "li", m({ className: "vjs-menu-item", innerHTML: '<span class="vjs-menu-item-text">' + this.localize(this.options_.label) + "</span>", tabIndex: -1 }, t), n);
    }, t.handleKeyPress = function (t) {
      wi.some(function (e) {
        return At.isEventKey(t, e);
      }) || i.prototype.handleKeyPress.call(this, t);
    }, t.handleClick = function (e) {
      this.selected(!0);
    }, t.selected = function (e) {
      this.selectable && (this.isSelected_ = e ? (this.addClass("vjs-selected"), this.el_.setAttribute("aria-checked", "true"), this.controlText(", selected"), !0) : (this.removeClass("vjs-selected"), this.el_.setAttribute("aria-checked", "false"), this.controlText(""), !1));
    }, e;
  }(zn);Be.registerComponent("MenuItem", xi);var ji = function (l) {
    function e(e, t) {
      var i,
          n = t.track,
          r = e.textTracks();t.label = n.label || n.language || "Unknown", t.selected = "showing" === n.mode, (i = l.call(this, e, t) || this).track = n;var s,
          o = function o() {
        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
          t[n] = arguments[n];
        }i.handleTracksChange.apply(v(v(i)), t);
      },
          a = function a() {
        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
          t[n] = arguments[n];
        }i.handleSelectedLanguageChange.apply(v(v(i)), t);
      };(e.on(["loadstart", "texttrackchange"], o), r.addEventListener("change", o), r.addEventListener("selectedlanguagechange", a), i.on("dispose", function () {
        e.off(["loadstart", "texttrackchange"], o), r.removeEventListener("change", o), r.removeEventListener("selectedlanguagechange", a);
      }), void 0 === r.onchange) && i.on(["tap", "click"], function () {
        if ("object" != _typeof(h.Event)) try {
          s = new h.Event("change");
        } catch (e) {}s || (s = d.createEvent("Event")).initEvent("change", !0, !0), r.dispatchEvent(s);
      });return i.handleTracksChange(), i;
    }f(e, l);var t = e.prototype;return t.handleClick = function (e) {
      var t = this.track,
          n = this.player_.textTracks();if (l.prototype.handleClick.call(this, e), n) for (var i = (t.kinds || [t.kind]).filter(Boolean), r = 0; r < n.length; r++) {
        var s = n[r];-1 !== i.indexOf(s.kind) && (s === t ? "showing" !== s.mode && (s.mode = "showing") : "disabled" !== s.mode && (s.mode = "disabled"));
      }
    }, t.handleTracksChange = function (e) {
      var t = "showing" === this.track.mode;t !== this.isSelected_ && this.selected(t);
    }, t.handleSelectedLanguageChange = function (e) {
      if ("showing" === this.track.mode) {
        var t = this.player_.cache_.selectedLanguage;if (t && t.enabled && t.language === this.track.language && t.kind !== this.track.kind) return;this.player_.cache_.selectedLanguage = { enabled: !0, language: this.track.language, kind: this.track.kind };
      }
    }, t.dispose = function () {
      this.track = null, l.prototype.dispose.call(this);
    }, e;
  }(xi);Be.registerComponent("TextTrackMenuItem", ji);var Pi = function (n) {
    function e(e, t) {
      return t.track = { player: e, kind: t.kind, kinds: t.kinds, default: !1, mode: "disabled" }, t.kinds || (t.kinds = [t.kind]), t.label ? t.track.label = t.label : t.track.label = t.kinds.join(" and ") + " off", t.selectable = !0, t.multiSelectable = !1, n.call(this, e, t) || this;
    }f(e, n);var t = e.prototype;return t.handleTracksChange = function (e) {
      for (var t = this.player().textTracks(), n = !0, i = 0, r = t.length; i < r; i++) {
        var s = t[i];if (-1 < this.options_.kinds.indexOf(s.kind) && "showing" === s.mode) {
          n = !1;break;
        }
      }n !== this.isSelected_ && this.selected(n);
    }, t.handleSelectedLanguageChange = function (e) {
      for (var t = this.player().textTracks(), n = !0, i = 0, r = t.length; i < r; i++) {
        var s = t[i];if (-1 < ["captions", "descriptions", "subtitles"].indexOf(s.kind) && "showing" === s.mode) {
          n = !1;break;
        }
      }n && (this.player_.cache_.selectedLanguage = { enabled: !1 });
    }, e;
  }(ji);Be.registerComponent("OffTextTrackMenuItem", Pi);var Ai = function (n) {
    function e(e, t) {
      return void 0 === t && (t = {}), t.tracks = e.textTracks(), n.call(this, e, t) || this;
    }return f(e, n), e.prototype.createItems = function (e, t) {
      var n;void 0 === e && (e = []), void 0 === t && (t = ji), this.label_ && (n = this.label_ + " off"), e.push(new Pi(this.player_, { kinds: this.kinds_, kind: this.kind_, label: n })), this.hideThreshold_ += 1;var i = this.player_.textTracks();Array.isArray(this.kinds_) || (this.kinds_ = [this.kind_]);for (var r = 0; r < i.length; r++) {
        var s = i[r];if (-1 < this.kinds_.indexOf(s.kind)) {
          var o = new t(this.player_, { track: s, selectable: !0, multiSelectable: !1 });o.addClass("vjs-" + s.kind + "-menu-item"), e.push(o);
        }
      }return e;
    }, e;
  }(Si);Be.registerComponent("TextTrackButton", Ai);var Mi = function (o) {
    function e(e, t) {
      var n,
          i = t.track,
          r = t.cue,
          s = e.currentTime();return t.selectable = !0, t.multiSelectable = !1, t.label = r.text, t.selected = r.startTime <= s && s < r.endTime, (n = o.call(this, e, t) || this).track = i, n.cue = r, i.addEventListener("cuechange", Ce(v(v(n)), n.update)), n;
    }f(e, o);var t = e.prototype;return t.handleClick = function (e) {
      o.prototype.handleClick.call(this), this.player_.currentTime(this.cue.startTime), this.update(this.cue.startTime);
    }, t.update = function (e) {
      var t = this.cue,
          n = this.player_.currentTime();this.selected(t.startTime <= n && n < t.endTime);
    }, e;
  }(xi);Be.registerComponent("ChaptersTrackMenuItem", Mi);var Li = function (i) {
    function e(e, t, n) {
      return i.call(this, e, t, n) || this;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-chapters-button " + i.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-chapters-button " + i.prototype.buildWrapperCSSClass.call(this);
    }, t.update = function (e) {
      this.track_ && (!e || "addtrack" !== e.type && "removetrack" !== e.type) || this.setTrack(this.findChaptersTrack()), i.prototype.update.call(this);
    }, t.setTrack = function (e) {
      if (this.track_ !== e) {
        if (this.updateHandler_ || (this.updateHandler_ = this.update.bind(this)), this.track_) {
          var t = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);t && t.removeEventListener("load", this.updateHandler_), this.track_ = null;
        }if (this.track_ = e, this.track_) {
          this.track_.mode = "hidden";var n = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);n && n.addEventListener("load", this.updateHandler_);
        }
      }
    }, t.findChaptersTrack = function () {
      for (var e = this.player_.textTracks() || [], t = e.length - 1; 0 <= t; t--) {
        var n = e[t];if (n.kind === this.kind_) return n;
      }
    }, t.getMenuCaption = function () {
      return this.track_ && this.track_.label ? this.track_.label : this.localize(Fe(this.kind_));
    }, t.createMenu = function () {
      return this.options_.title = this.getMenuCaption(), i.prototype.createMenu.call(this);
    }, t.createItems = function () {
      var e = [];if (!this.track_) return e;var t = this.track_.cues;if (!t) return e;for (var n = 0, i = t.length; n < i; n++) {
        var r = t[n],
            s = new Mi(this.player_, { track: this.track_, cue: r });e.push(s);
      }return e;
    }, e;
  }(Ai);Li.prototype.kind_ = "chapters", Li.prototype.controlText_ = "Chapters", Be.registerComponent("ChaptersButton", Li);var Ni = function (o) {
    function e(e, t, n) {
      var i;i = o.call(this, e, t, n) || this;var r = e.textTracks(),
          s = Ce(v(v(i)), i.handleTracksChange);return r.addEventListener("change", s), i.on("dispose", function () {
        r.removeEventListener("change", s);
      }), i;
    }f(e, o);var t = e.prototype;return t.handleTracksChange = function (e) {
      for (var t = this.player().textTracks(), n = !1, i = 0, r = t.length; i < r; i++) {
        var s = t[i];if (s.kind !== this.kind_ && "showing" === s.mode) {
          n = !0;break;
        }
      }n ? this.disable() : this.enable();
    }, t.buildCSSClass = function () {
      return "vjs-descriptions-button " + o.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-descriptions-button " + o.prototype.buildWrapperCSSClass.call(this);
    }, e;
  }(Ai);Ni.prototype.kind_ = "descriptions", Ni.prototype.controlText_ = "Descriptions", Be.registerComponent("DescriptionsButton", Ni);var Oi = function (i) {
    function e(e, t, n) {
      return i.call(this, e, t, n) || this;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-subtitles-button " + i.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-subtitles-button " + i.prototype.buildWrapperCSSClass.call(this);
    }, e;
  }(Ai);Oi.prototype.kind_ = "subtitles", Oi.prototype.controlText_ = "Subtitles", Be.registerComponent("SubtitlesButton", Oi);var Di = function (i) {
    function e(e, t) {
      var n;return t.track = { player: e, kind: t.kind, label: t.kind + " settings", selectable: !1, default: !1, mode: "disabled" }, t.selectable = !1, t.name = "CaptionSettingsMenuItem", (n = i.call(this, e, t) || this).addClass("vjs-texttrack-settings"), n.controlText(", opens " + t.kind + " settings dialog"), n;
    }return f(e, i), e.prototype.handleClick = function (e) {
      this.player().getChild("textTrackSettings").open();
    }, e;
  }(ji);Be.registerComponent("CaptionSettingsMenuItem", Di);var Ii = function (i) {
    function e(e, t, n) {
      return i.call(this, e, t, n) || this;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-captions-button " + i.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-captions-button " + i.prototype.buildWrapperCSSClass.call(this);
    }, t.createItems = function () {
      var e = [];return this.player().tech_ && this.player().tech_.featuresNativeTextTracks || !this.player().getChild("textTrackSettings") || (e.push(new Di(this.player_, { kind: this.kind_ })), this.hideThreshold_ += 1), i.prototype.createItems.call(this, e);
    }, e;
  }(Ai);Ii.prototype.kind_ = "captions", Ii.prototype.controlText_ = "Captions", Be.registerComponent("CaptionsButton", Ii);var Fi = function (r) {
    function e() {
      return r.apply(this, arguments) || this;
    }return f(e, r), e.prototype.createEl = function (e, t, n) {
      var i = '<span class="vjs-menu-item-text">' + this.localize(this.options_.label);return "captions" === this.options_.track.kind && (i += '\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> ' + this.localize("Captions") + "</span>\n      "), i += "</span>", r.prototype.createEl.call(this, e, m({ innerHTML: i }, t), n);
    }, e;
  }(ji);Be.registerComponent("SubsCapsMenuItem", Fi);var Ri = function (i) {
    function e(e, t) {
      var n;return void 0 === t && (t = {}), (n = i.call(this, e, t) || this).label_ = "subtitles", -1 < ["en", "en-us", "en-ca", "fr-ca"].indexOf(n.player_.language_) && (n.label_ = "captions"), n.menuButton_.controlText(Fe(n.label_)), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-subs-caps-button " + i.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-subs-caps-button " + i.prototype.buildWrapperCSSClass.call(this);
    }, t.createItems = function () {
      var e = [];return this.player().tech_ && this.player().tech_.featuresNativeTextTracks || !this.player().getChild("textTrackSettings") || (e.push(new Di(this.player_, { kind: this.label_ })), this.hideThreshold_ += 1), e = i.prototype.createItems.call(this, e, Fi);
    }, e;
  }(Ai);Ri.prototype.kinds_ = ["captions", "subtitles"], Ri.prototype.controlText_ = "Subtitles", Be.registerComponent("SubsCapsButton", Ri);var Bi = function (o) {
    function e(e, t) {
      var i,
          n = t.track,
          r = e.audioTracks();t.label = n.label || n.language || "Unknown", t.selected = n.enabled, (i = o.call(this, e, t) || this).track = n, i.addClass("vjs-" + n.kind + "-menu-item");var s = function s() {
        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
          t[n] = arguments[n];
        }i.handleTracksChange.apply(v(v(i)), t);
      };return r.addEventListener("change", s), i.on("dispose", function () {
        r.removeEventListener("change", s);
      }), i;
    }f(e, o);var t = e.prototype;return t.createEl = function (e, t, n) {
      var i = '<span class="vjs-menu-item-text">' + this.localize(this.options_.label);return "main-desc" === this.options_.track.kind && (i += '\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> ' + this.localize("Descriptions") + "</span>\n      "), i += "</span>", o.prototype.createEl.call(this, e, m({ innerHTML: i }, t), n);
    }, t.handleClick = function (e) {
      var t = this.player_.audioTracks();o.prototype.handleClick.call(this, e);for (var n = 0; n < t.length; n++) {
        var i = t[n];i.enabled = i === this.track;
      }
    }, t.handleTracksChange = function (e) {
      this.selected(this.track.enabled);
    }, e;
  }(xi);Be.registerComponent("AudioTrackMenuItem", Bi);var Hi = function (n) {
    function e(e, t) {
      return void 0 === t && (t = {}), t.tracks = e.audioTracks(), n.call(this, e, t) || this;
    }f(e, n);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-audio-button " + n.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-audio-button " + n.prototype.buildWrapperCSSClass.call(this);
    }, t.createItems = function (e) {
      void 0 === e && (e = []), this.hideThreshold_ = 1;for (var t = this.player_.audioTracks(), n = 0; n < t.length; n++) {
        var i = t[n];e.push(new Bi(this.player_, { track: i, selectable: !0, multiSelectable: !1 }));
      }return e;
    }, e;
  }(Si);Hi.prototype.controlText_ = "Audio Track", Be.registerComponent("AudioTrackButton", Hi);var Vi = function (s) {
    function e(e, t) {
      var n,
          i = t.rate,
          r = parseFloat(i, 10);return t.label = i, t.selected = 1 === r, t.selectable = !0, t.multiSelectable = !1, (n = s.call(this, e, t) || this).label = i, n.rate = r, n.on(e, "ratechange", n.update), n;
    }f(e, s);var t = e.prototype;return t.handleClick = function (e) {
      s.prototype.handleClick.call(this), this.player().playbackRate(this.rate);
    }, t.update = function (e) {
      this.selected(this.player().playbackRate() === this.rate);
    }, e;
  }(xi);Vi.prototype.contentElType = "button", Be.registerComponent("PlaybackRateMenuItem", Vi);var zi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).updateVisibility(), n.updateLabel(), n.on(e, "loadstart", n.updateVisibility), n.on(e, "ratechange", n.updateLabel), n;
    }f(e, i);var t = e.prototype;return t.createEl = function () {
      var e = i.prototype.createEl.call(this);return this.labelEl_ = x("div", { className: "vjs-playback-rate-value", innerHTML: "1x" }), e.appendChild(this.labelEl_), e;
    }, t.dispose = function () {
      this.labelEl_ = null, i.prototype.dispose.call(this);
    }, t.buildCSSClass = function () {
      return "vjs-playback-rate " + i.prototype.buildCSSClass.call(this);
    }, t.buildWrapperCSSClass = function () {
      return "vjs-playback-rate " + i.prototype.buildWrapperCSSClass.call(this);
    }, t.createMenu = function () {
      var e = new Ci(this.player()),
          t = this.playbackRates();if (t) for (var n = t.length - 1; 0 <= n; n--) {
        e.addChild(new Vi(this.player(), { rate: t[n] + "x" }));
      }return e;
    }, t.updateARIAAttributes = function () {
      this.el().setAttribute("aria-valuenow", this.player().playbackRate());
    }, t.handleClick = function (e) {
      for (var t = this.player().playbackRate(), n = this.playbackRates(), i = n[0], r = 0; r < n.length; r++) {
        if (n[r] > t) {
          i = n[r];break;
        }
      }this.player().playbackRate(i);
    }, t.playbackRates = function () {
      return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;
    }, t.playbackRateSupported = function () {
      return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && 0 < this.playbackRates().length;
    }, t.updateVisibility = function (e) {
      this.playbackRateSupported() ? this.removeClass("vjs-hidden") : this.addClass("vjs-hidden");
    }, t.updateLabel = function (e) {
      this.playbackRateSupported() && (this.labelEl_.innerHTML = this.player().playbackRate() + "x");
    }, e;
  }(Ei);zi.prototype.controlText_ = "Playback Rate", Be.registerComponent("PlaybackRateMenuButton", zi);var Ki = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }f(t, e);var n = t.prototype;return n.buildCSSClass = function () {
      return "vjs-spacer " + e.prototype.buildCSSClass.call(this);
    }, n.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: this.buildCSSClass() });
    }, t;
  }(Be);Be.registerComponent("Spacer", Ki);var Wi = function (t) {
    function e() {
      return t.apply(this, arguments) || this;
    }f(e, t);var n = e.prototype;return n.buildCSSClass = function () {
      return "vjs-custom-control-spacer " + t.prototype.buildCSSClass.call(this);
    }, n.createEl = function () {
      var e = t.prototype.createEl.call(this, { className: this.buildCSSClass() });return e.innerHTML = " ", e;
    }, e;
  }(Ki);Be.registerComponent("CustomControlSpacer", Wi);var Ui = function (e) {
    function t() {
      return e.apply(this, arguments) || this;
    }return f(t, e), t.prototype.createEl = function () {
      return e.prototype.createEl.call(this, "div", { className: "vjs-control-bar", dir: "ltr" });
    }, t;
  }(Be);Ui.prototype.options_ = { children: ["playToggle", "volumePanel", "currentTimeDisplay", "timeDivider", "durationDisplay", "progressControl", "liveDisplay", "seekToLive", "remainingTimeDisplay", "customControlSpacer", "playbackRateMenuButton", "chaptersButton", "descriptionsButton", "subsCapsButton", "audioTrackButton", "fullscreenToggle"] }, Be.registerComponent("ControlBar", Ui);var qi = function (i) {
    function e(e, t) {
      var n;return (n = i.call(this, e, t) || this).on(e, "error", n.open), n;
    }f(e, i);var t = e.prototype;return t.buildCSSClass = function () {
      return "vjs-error-display " + i.prototype.buildCSSClass.call(this);
    }, t.content = function () {
      var e = this.player().error();return e ? this.localize(e.message) : "";
    }, e;
  }(Lt);qi.prototype.options_ = Re(Lt.prototype.options_, { pauseOnOpen: !1, fillAlways: !0, temporary: !1, uncloseable: !0 }), Be.registerComponent("ErrorDisplay", qi);var Xi = "vjs-text-track-settings",
      $i = ["#000", "Black"],
      Gi = ["#00F", "Blue"],
      Yi = ["#0FF", "Cyan"],
      Qi = ["#0F0", "Green"],
      Ji = ["#F0F", "Magenta"],
      Zi = ["#F00", "Red"],
      er = ["#FFF", "White"],
      tr = ["#FF0", "Yellow"],
      nr = ["1", "Opaque"],
      ir = ["0.5", "Semi-Transparent"],
      rr = ["0", "Transparent"],
      sr = { backgroundColor: { selector: ".vjs-bg-color > select", id: "captions-background-color-%s", label: "Color", options: [$i, er, Zi, Qi, Gi, tr, Ji, Yi] }, backgroundOpacity: { selector: ".vjs-bg-opacity > select", id: "captions-background-opacity-%s", label: "Transparency", options: [nr, ir, rr] }, color: { selector: ".vjs-fg-color > select", id: "captions-foreground-color-%s", label: "Color", options: [er, $i, Zi, Qi, Gi, tr, Ji, Yi] }, edgeStyle: { selector: ".vjs-edge-style > select", id: "%s", label: "Text Edge Style", options: [["none", "None"], ["raised", "Raised"], ["depressed", "Depressed"], ["uniform", "Uniform"], ["dropshadow", "Dropshadow"]] }, fontFamily: { selector: ".vjs-font-family > select", id: "captions-font-family-%s", label: "Font Family", options: [["proportionalSansSerif", "Proportional Sans-Serif"], ["monospaceSansSerif", "Monospace Sans-Serif"], ["proportionalSerif", "Proportional Serif"], ["monospaceSerif", "Monospace Serif"], ["casual", "Casual"], ["script", "Script"], ["small-caps", "Small Caps"]] }, fontPercent: { selector: ".vjs-font-percent > select", id: "captions-font-size-%s", label: "Font Size", options: [["0.50", "50%"], ["0.75", "75%"], ["1.00", "100%"], ["1.25", "125%"], ["1.50", "150%"], ["1.75", "175%"], ["2.00", "200%"], ["3.00", "300%"], ["4.00", "400%"]], default: 2, parser: function parser(e) {
        return "1.00" === e ? null : Number(e);
      } }, textOpacity: { selector: ".vjs-text-opacity > select", id: "captions-foreground-opacity-%s", label: "Transparency", options: [nr, ir] }, windowColor: { selector: ".vjs-window-color > select", id: "captions-window-color-%s", label: "Color" }, windowOpacity: { selector: ".vjs-window-opacity > select", id: "captions-window-opacity-%s", label: "Transparency", options: [rr, ir, nr] } };function or(e, t) {
    if (t && (e = t(e)), e && "none" !== e) return e;
  }sr.windowColor.options = sr.backgroundColor.options;var ar = function (i) {
    function e(e, t) {
      var n;return t.temporary = !1, (n = i.call(this, e, t) || this).updateDisplay = Ce(v(v(n)), n.updateDisplay), n.fill(), n.hasBeenOpened_ = n.hasBeenFilled_ = !0, n.endDialog = x("p", { className: "vjs-control-text", textContent: n.localize("End of dialog window.") }), n.el().appendChild(n.endDialog), n.setDefaults(), void 0 === t.persistTextTrackSettings && (n.options_.persistTextTrackSettings = n.options_.playerOptions.persistTextTrackSettings), n.on(n.$(".vjs-done-button"), "click", function () {
        n.saveSettings(), n.close();
      }), n.on(n.$(".vjs-default-button"), "click", function () {
        n.setDefaults(), n.updateDisplay();
      }), a(sr, function (e) {
        n.on(n.$(e.selector), "change", n.updateDisplay);
      }), n.options_.persistTextTrackSettings && n.restoreSettings(), n;
    }f(e, i);var t = e.prototype;return t.dispose = function () {
      this.endDialog = null, i.prototype.dispose.call(this);
    }, t.createElSelect_ = function (e, t, n) {
      var i = this;void 0 === t && (t = ""), void 0 === n && (n = "label");var r = sr[e],
          s = r.id.replace("%s", this.id_),
          o = [t, s].join(" ").trim();return ["<" + n + ' id="' + s + '" class="' + ("label" === n ? "vjs-label" : "") + '">', this.localize(r.label), "</" + n + ">", '<select aria-labelledby="' + o + '">'].concat(r.options.map(function (e) {
        var t = s + "-" + e[1].replace(/\W+/g, "");return ['<option id="' + t + '" value="' + e[0] + '" ', 'aria-labelledby="' + o + " " + t + '">', i.localize(e[1]), "</option>"].join("");
      })).concat("</select>").join("");
    }, t.createElFgColor_ = function () {
      var e = "captions-text-legend-" + this.id_;return ['<fieldset class="vjs-fg-color vjs-track-setting">', '<legend id="' + e + '">', this.localize("Text"), "</legend>", this.createElSelect_("color", e), '<span class="vjs-text-opacity vjs-opacity">', this.createElSelect_("textOpacity", e), "</span>", "</fieldset>"].join("");
    }, t.createElBgColor_ = function () {
      var e = "captions-background-" + this.id_;return ['<fieldset class="vjs-bg-color vjs-track-setting">', '<legend id="' + e + '">', this.localize("Background"), "</legend>", this.createElSelect_("backgroundColor", e), '<span class="vjs-bg-opacity vjs-opacity">', this.createElSelect_("backgroundOpacity", e), "</span>", "</fieldset>"].join("");
    }, t.createElWinColor_ = function () {
      var e = "captions-window-" + this.id_;return ['<fieldset class="vjs-window-color vjs-track-setting">', '<legend id="' + e + '">', this.localize("Window"), "</legend>", this.createElSelect_("windowColor", e), '<span class="vjs-window-opacity vjs-opacity">', this.createElSelect_("windowOpacity", e), "</span>", "</fieldset>"].join("");
    }, t.createElColors_ = function () {
      return x("div", { className: "vjs-track-settings-colors", innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join("") });
    }, t.createElFont_ = function () {
      return x("div", { className: "vjs-track-settings-font", innerHTML: ['<fieldset class="vjs-font-percent vjs-track-setting">', this.createElSelect_("fontPercent", "", "legend"), "</fieldset>", '<fieldset class="vjs-edge-style vjs-track-setting">', this.createElSelect_("edgeStyle", "", "legend"), "</fieldset>", '<fieldset class="vjs-font-family vjs-track-setting">', this.createElSelect_("fontFamily", "", "legend"), "</fieldset>"].join("") });
    }, t.createElControls_ = function () {
      var e = this.localize("restore all settings to the default values");return x("div", { className: "vjs-track-settings-controls", innerHTML: ['<button type="button" class="vjs-default-button" title="' + e + '">', this.localize("Reset"), '<span class="vjs-control-text"> ' + e + "</span>", "</button>", '<button type="button" class="vjs-done-button">' + this.localize("Done") + "</button>"].join("") });
    }, t.content = function () {
      return [this.createElColors_(), this.createElFont_(), this.createElControls_()];
    }, t.label = function () {
      return this.localize("Caption Settings Dialog");
    }, t.description = function () {
      return this.localize("Beginning of dialog window. Escape will cancel and close the window.");
    }, t.buildCSSClass = function () {
      return i.prototype.buildCSSClass.call(this) + " vjs-text-track-settings";
    }, t.getValues = function () {
      var n,
          i,
          e,
          o = this;return i = function i(e, t, n) {
        var i,
            r,
            s = (i = o.$(t.selector), r = t.parser, or(i.options[i.options.selectedIndex].value, r));return void 0 !== s && (e[n] = s), e;
      }, void 0 === (e = {}) && (e = 0), r(n = sr).reduce(function (e, t) {
        return i(e, n[t], t);
      }, e);
    }, t.setValues = function (n) {
      var i = this;a(sr, function (e, t) {
        !function (e, t, n) {
          if (t) for (var i = 0; i < e.options.length; i++) {
            if (or(e.options[i].value, n) === t) {
              e.selectedIndex = i;break;
            }
          }
        }(i.$(e.selector), n[t], e.parser);
      });
    }, t.setDefaults = function () {
      var n = this;a(sr, function (e) {
        var t = e.hasOwnProperty("default") ? e.default : 0;n.$(e.selector).selectedIndex = t;
      });
    }, t.restoreSettings = function () {
      var e;try {
        e = JSON.parse(h.localStorage.getItem(Xi));
      } catch (e) {
        g.warn(e);
      }e && this.setValues(e);
    }, t.saveSettings = function () {
      if (this.options_.persistTextTrackSettings) {
        var e = this.getValues();try {
          Object.keys(e).length ? h.localStorage.setItem(Xi, JSON.stringify(e)) : h.localStorage.removeItem(Xi);
        } catch (e) {
          g.warn(e);
        }
      }
    }, t.updateDisplay = function () {
      var e = this.player_.getChild("textTrackDisplay");e && e.updateDisplay();
    }, t.conditionalBlur_ = function () {
      this.previouslyActiveEl_ = null, this.off(d, "keydown", this.handleKeyDown);var e = this.player_.controlBar,
          t = e && e.subsCapsButton,
          n = e && e.captionsButton;t ? t.focus() : n && n.focus();
    }, e;
  }(Lt);Be.registerComponent("TextTrackSettings", ar);var lr = function (s) {
    function e(e, t) {
      var n,
          i = t.ResizeObserver || h.ResizeObserver;null === t.ResizeObserver && (i = !1);var r = Re({ createEl: !i, reportTouchActivity: !1 }, t);return (n = s.call(this, e, r) || this).ResizeObserver = t.ResizeObserver || h.ResizeObserver, n.loadListener_ = null, n.resizeObserver_ = null, n.debouncedHandler_ = function (i, r, s, o) {
        var a;void 0 === o && (o = h);var e = function e() {
          var e = this,
              t = arguments,
              _n2 = function n() {
            _n2 = a = null, s || i.apply(e, t);
          };!a && s && i.apply(e, t), o.clearTimeout(a), a = o.setTimeout(_n2, r);
        };return e.cancel = function () {
          o.clearTimeout(a), a = null;
        }, e;
      }(function () {
        n.resizeHandler();
      }, 100, !1, v(v(n))), i ? (n.resizeObserver_ = new n.ResizeObserver(n.debouncedHandler_), n.resizeObserver_.observe(e.el())) : (n.loadListener_ = function () {
        if (n.el_ && n.el_.contentWindow) {
          var e = n.debouncedHandler_,
              t = n.unloadListener_ = function () {
            de(this, "resize", e), de(this, "unload", t), t = null;
          };he(n.el_.contentWindow, "unload", t), he(n.el_.contentWindow, "resize", e);
        }
      }, n.one("load", n.loadListener_)), n;
    }f(e, s);var t = e.prototype;return t.createEl = function () {
      return s.prototype.createEl.call(this, "iframe", { className: "vjs-resize-manager", tabIndex: -1 }, { "aria-hidden": "true" });
    }, t.resizeHandler = function () {
      this.player_ && this.player_.trigger && this.player_.trigger("playerresize");
    }, t.dispose = function () {
      this.debouncedHandler_ && this.debouncedHandler_.cancel(), this.resizeObserver_ && (this.player_.el() && this.resizeObserver_.unobserve(this.player_.el()), this.resizeObserver_.disconnect()), this.loadListener_ && this.off("load", this.loadListener_), this.el_ && this.el_.contentWindow && this.unloadListener_ && this.unloadListener_.call(this.el_.contentWindow), this.ResizeObserver = null, this.resizeObserver = null, this.debouncedHandler_ = null, this.loadListener_ = null, s.prototype.dispose.call(this);
    }, e;
  }(Be);Be.registerComponent("ResizeManager", lr);var cr = function (r) {
    function e(e, t) {
      var n,
          i = Re({ createEl: !1 }, t);return (n = r.call(this, e, i) || this).reset_(), n.on(n.player_, "durationchange", n.handleDurationchange), st && "hidden" in d && "visibilityState" in d && n.on(d, "visibilitychange", n.handleVisibilityChange), n;
    }f(e, r);var t = e.prototype;return t.handleVisibilityChange = function () {
      this.player_.duration() === 1 / 0 && (d.hidden ? this.stopTracking() : this.startTracking());
    }, t.isBehind_ = function () {
      if (!this.timeupdateSeen_) return !1;var e = this.liveCurrentTime(),
          t = this.player_.currentTime(),
          n = this.seekableIncrement_;return e !== 1 / 0 && t <= e - (2 * n + .07);
    }, t.trackLive_ = function () {
      this.pastSeekEnd_ = this.pastSeekEnd_;var e = this.player_.seekable();if (e && e.length) {
        var t = this.seekableEnd();t !== this.lastSeekEnd_ && (this.lastSeekEnd_ && (this.seekableIncrement_ = Math.abs(t - this.lastSeekEnd_)), this.pastSeekEnd_ = 0, this.lastSeekEnd_ = t, this.trigger("seekableendchange")), this.pastSeekEnd_ = this.pastSeekEnd() + .03, this.isBehind_() !== this.behindLiveEdge() && (this.behindLiveEdge_ = this.isBehind_(), this.trigger("liveedgechange"));
      }
    }, t.handleDurationchange = function () {
      this.player_.duration() === 1 / 0 ? this.startTracking() : this.stopTracking();
    }, t.startTracking = function () {
      var e = this;this.isTracking() || (this.trackingInterval_ = this.setInterval(this.trackLive_, 30), this.trackLive_(), this.on(this.player_, "play", this.trackLive_), this.on(this.player_, "pause", this.trackLive_), this.one(this.player_, "play", this.handlePlay), this.timeupdateSeen_ || (this.handleTimeupdate = function () {
        e.timeupdateSeen_ = !0, e.handleTimeupdate = null;
      }, this.one(this.player_, "timeupdate", this.handleTimeupdate)));
    }, t.handlePlay = function () {
      this.one(this.player_, "timeupdate", this.seekToLiveEdge);
    }, t.reset_ = function () {
      this.pastSeekEnd_ = 0, this.lastSeekEnd_ = null, this.behindLiveEdge_ = null, this.timeupdateSeen_ = !1, this.clearInterval(this.trackingInterval_), this.trackingInterval_ = null, this.seekableIncrement_ = 12, this.off(this.player_, "play", this.trackLive_), this.off(this.player_, "pause", this.trackLive_), this.off(this.player_, "play", this.handlePlay), this.off(this.player_, "timeupdate", this.seekToLiveEdge), this.handleTimeupdate && (this.off(this.player_, "timeupdate", this.handleTimeupdate), this.handleTimeupdate = null);
    }, t.stopTracking = function () {
      this.isTracking() && this.reset_();
    }, t.seekableEnd = function () {
      for (var e = this.player_.seekable(), t = [], n = e ? e.length : 0; n--;) {
        t.push(e.end(n));
      }return t.length ? t.sort()[t.length - 1] : 1 / 0;
    }, t.seekableStart = function () {
      for (var e = this.player_.seekable(), t = [], n = e ? e.length : 0; n--;) {
        t.push(e.start(n));
      }return t.length ? t.sort()[0] : 0;
    }, t.liveWindow = function () {
      var e = this.liveCurrentTime();return e === 1 / 0 ? 1 / 0 : e - this.seekableStart();
    }, t.isLive = function () {
      return this.isTracking();
    }, t.atLiveEdge = function () {
      return !this.behindLiveEdge();
    }, t.liveCurrentTime = function () {
      return this.pastSeekEnd() + this.seekableEnd();
    }, t.pastSeekEnd = function () {
      return this.pastSeekEnd_;
    }, t.behindLiveEdge = function () {
      return this.behindLiveEdge_;
    }, t.isTracking = function () {
      return "number" == typeof this.trackingInterval_;
    }, t.seekToLiveEdge = function () {
      this.atLiveEdge() || (this.player_.currentTime(this.liveCurrentTime()), this.player_.paused() && this.player_.play());
    }, t.dispose = function () {
      this.stopTracking(), r.prototype.dispose.call(this);
    }, e;
  }(Be);Be.registerComponent("LiveTracker", cr);var ur = function ur(e) {
    var t = e.el();if (t.hasAttribute("src")) return e.triggerSourceset(t.src), !0;var n = e.$$("source"),
        i = [],
        r = "";if (!n.length) return !1;for (var s = 0; s < n.length; s++) {
      var o = n[s].src;o && -1 === i.indexOf(o) && i.push(o);
    }return !!i.length && (1 === i.length && (r = i[0]), e.triggerSourceset(r), !0);
  },
      hr = Object.defineProperty({}, "innerHTML", { get: function get() {
      return this.cloneNode(!0).innerHTML;
    }, set: function set(e) {
      var t = d.createElement(this.nodeName.toLowerCase());t.innerHTML = e;for (var n = d.createDocumentFragment(); t.childNodes.length;) {
        n.appendChild(t.childNodes[0]);
      }return this.innerText = "", h.Element.prototype.appendChild.call(this, n), this.innerHTML;
    } }),
      dr = function dr(e, t) {
    for (var n = {}, i = 0; i < e.length && !((n = Object.getOwnPropertyDescriptor(e[i], t)) && n.set && n.get); i++) {}return n.enumerable = !0, n.configurable = !0, n;
  },
      pr = function pr(s) {
    var o = s.el();if (!o.resetSourceWatch_) {
      var t = {},
          e = dr([s.el(), h.HTMLMediaElement.prototype, h.Element.prototype, hr], "innerHTML"),
          n = function n(r) {
        return function () {
          for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
            t[n] = arguments[n];
          }var i = r.apply(o, t);return ur(s), i;
        };
      };["append", "appendChild", "insertAdjacentHTML"].forEach(function (e) {
        o[e] && (t[e] = o[e], o[e] = n(t[e]));
      }), Object.defineProperty(o, "innerHTML", Re(e, { set: n(e.set) })), o.resetSourceWatch_ = function () {
        o.resetSourceWatch_ = null, Object.keys(t).forEach(function (e) {
          o[e] = t[e];
        }), Object.defineProperty(o, "innerHTML", e);
      }, s.one("sourceset", o.resetSourceWatch_);
    }
  },
      fr = Object.defineProperty({}, "src", { get: function get() {
      return this.hasAttribute("src") ? $t(h.Element.prototype.getAttribute.call(this, "src")) : "";
    }, set: function set(e) {
      return h.Element.prototype.setAttribute.call(this, "src", e), e;
    } }),
      vr = function vr(i) {
    if (i.featuresSourceset) {
      var r = i.el();if (!r.resetSourceset_) {
        var n = dr([i.el(), h.HTMLMediaElement.prototype, fr], "src"),
            s = r.setAttribute,
            t = r.load;Object.defineProperty(r, "src", Re(n, { set: function set(e) {
            var t = n.set.call(r, e);return i.triggerSourceset(r.src), t;
          } })), r.setAttribute = function (e, t) {
          var n = s.call(r, e, t);return (/src/i.test(e) && i.triggerSourceset(r.src), n
          );
        }, r.load = function () {
          var e = t.call(r);return ur(i) || (i.triggerSourceset(""), pr(i)), e;
        }, r.currentSrc ? i.triggerSourceset(r.currentSrc) : ur(i) || pr(i), r.resetSourceset_ = function () {
          r.resetSourceset_ = null, r.load = t, r.setAttribute = s, Object.defineProperty(r, "src", n), r.resetSourceWatch_ && r.resetSourceWatch_();
        };
      }
    }
  };function gr() {
    var e = t(["Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\n            This may prevent text tracks from loading."]);return gr = function gr() {
      return e;
    }, e;
  }var yr = function (u) {
    function a(e, t) {
      var n;n = u.call(this, e, t) || this;var i = e.source,
          r = !1;if (i && (n.el_.currentSrc !== i.src || e.tag && 3 === e.tag.initNetworkState_) ? n.setSource(i) : n.handleLateInit_(n.el_), e.enableSourceset && n.setupSourcesetHandling_(), n.el_.hasChildNodes()) {
        for (var s = n.el_.childNodes, o = s.length, a = []; o--;) {
          var l = s[o];"track" === l.nodeName.toLowerCase() && (n.featuresNativeTextTracks ? (n.remoteTextTrackEls().addTrackElement_(l), n.remoteTextTracks().addTrack(l.track), n.textTracks().addTrack(l.track), r || n.el_.hasAttribute("crossorigin") || !Yt(l.src) || (r = !0)) : a.push(l));
        }for (var c = 0; c < a.length; c++) {
          n.el_.removeChild(a[c]);
        }
      }return n.proxyNativeTracks_(), n.featuresNativeTextTracks && r && g.warn(_(gr())), n.restoreMetadataTracksInIOSNativePlayer_(), (lt || $e || et) && !0 === e.nativeControlsForTouch && n.setControls(!0), n.proxyWebkitFullscreen_(), n.triggerReady(), n;
    }f(a, u);var e = a.prototype;return e.dispose = function () {
      this.el_ && this.el_.resetSourceset_ && this.el_.resetSourceset_(), a.disposeMediaElement(this.el_), this.options_ = null, u.prototype.dispose.call(this);
    }, e.setupSourcesetHandling_ = function () {
      vr(this);
    }, e.restoreMetadataTracksInIOSNativePlayer_ = function () {
      var i,
          r = this.textTracks(),
          e = function e() {
        i = [];for (var e = 0; e < r.length; e++) {
          var t = r[e];"metadata" === t.kind && i.push({ track: t, storedMode: t.mode });
        }
      };e(), r.addEventListener("change", e), this.on("dispose", function () {
        return r.removeEventListener("change", e);
      });var t = function e() {
        for (var t = 0; t < i.length; t++) {
          var n = i[t];"disabled" === n.track.mode && n.track.mode !== n.storedMode && (n.track.mode = n.storedMode);
        }r.removeEventListener("change", e);
      };this.on("webkitbeginfullscreen", function () {
        r.removeEventListener("change", e), r.removeEventListener("change", t), r.addEventListener("change", t);
      }), this.on("webkitendfullscreen", function () {
        r.removeEventListener("change", e), r.addEventListener("change", e), r.removeEventListener("change", t);
      });
    }, e.overrideNative_ = function (e, t) {
      var n = this;if (t === this["featuresNative" + e + "Tracks"]) {
        var i = e.toLowerCase();this[i + "TracksListeners_"] && Object.keys(this[i + "TracksListeners_"]).forEach(function (e) {
          n.el()[i + "Tracks"].removeEventListener(e, n[i + "TracksListeners_"][e]);
        }), this["featuresNative" + e + "Tracks"] = !t, this[i + "TracksListeners_"] = null, this.proxyNativeTracksForType_(i);
      }
    }, e.overrideNativeAudioTracks = function (e) {
      this.overrideNative_("Audio", e);
    }, e.overrideNativeVideoTracks = function (e) {
      this.overrideNative_("Video", e);
    }, e.proxyNativeTracksForType_ = function (e) {
      var i = this,
          t = Cn[e],
          r = this.el()[t.getterName],
          s = this[t.getterName]();if (this["featuresNative" + t.capitalName + "Tracks"] && r && r.addEventListener) {
        var o = { change: function change(e) {
            s.trigger({ type: "change", target: s, currentTarget: s, srcElement: s });
          }, addtrack: function addtrack(e) {
            s.addTrack(e.track);
          }, removetrack: function removetrack(e) {
            s.removeTrack(e.track);
          } },
            n = function n() {
          for (var e = [], t = 0; t < s.length; t++) {
            for (var n = !1, i = 0; i < r.length; i++) {
              if (r[i] === s[t]) {
                n = !0;break;
              }
            }n || e.push(s[t]);
          }for (; e.length;) {
            s.removeTrack(e.shift());
          }
        };this[t.getterName + "Listeners_"] = o, Object.keys(o).forEach(function (t) {
          var n = o[t];r.addEventListener(t, n), i.on("dispose", function (e) {
            return r.removeEventListener(t, n);
          });
        }), this.on("loadstart", n), this.on("dispose", function (e) {
          return i.off("loadstart", n);
        });
      }
    }, e.proxyNativeTracks_ = function () {
      var t = this;Cn.names.forEach(function (e) {
        t.proxyNativeTracksForType_(e);
      });
    }, e.createEl = function () {
      var e = this.options_.tag;if (!e || !this.options_.playerElIngest && !this.movingMediaElementInDOM) {
        if (e) {
          var t = e.cloneNode(!0);e.parentNode && e.parentNode.insertBefore(t, e), a.disposeMediaElement(e), e = t;
        } else {
          e = d.createElement("video");var n = Re({}, this.options_.tag && D(this.options_.tag));lt && !0 === this.options_.nativeControlsForTouch || delete n.controls, O(e, m(n, { id: this.options_.techId, class: "vjs-tech" }));
        }e.playerId = this.options_.playerId;
      }"undefined" != typeof this.options_.preload && F(e, "preload", this.options_.preload);for (var i = ["loop", "muted", "playsinline", "autoplay"], r = 0; r < i.length; r++) {
        var s = i[r],
            o = this.options_[s];"undefined" != typeof o && (o ? F(e, s, s) : R(e, s), e[s] = o);
      }return e;
    }, e.handleLateInit_ = function (e) {
      if (0 !== e.networkState && 3 !== e.networkState) {
        if (0 === e.readyState) {
          var t = !1,
              n = function n() {
            t = !0;
          };this.on("loadstart", n);var i = function i() {
            t || this.trigger("loadstart");
          };return this.on("loadedmetadata", i), void this.ready(function () {
            this.off("loadstart", n), this.off("loadedmetadata", i), t || this.trigger("loadstart");
          });
        }var r = ["loadstart"];r.push("loadedmetadata"), 2 <= e.readyState && r.push("loadeddata"), 3 <= e.readyState && r.push("canplay"), 4 <= e.readyState && r.push("canplaythrough"), this.ready(function () {
          r.forEach(function (e) {
            this.trigger(e);
          }, this);
        });
      }
    }, e.setCurrentTime = function (e) {
      try {
        this.el_.currentTime = e;
      } catch (e) {
        g(e, "Video is not ready. (Video.js)");
      }
    }, e.duration = function () {
      var t = this;if (this.el_.duration === 1 / 0 && Je && it && 0 === this.el_.currentTime) {
        return this.on("timeupdate", function e() {
          0 < t.el_.currentTime && (t.el_.duration === 1 / 0 && t.trigger("durationchange"), t.off("timeupdate", e));
        }), NaN;
      }return this.el_.duration || NaN;
    }, e.width = function () {
      return this.el_.offsetWidth;
    }, e.height = function () {
      return this.el_.offsetHeight;
    }, e.proxyWebkitFullscreen_ = function () {
      var e = this;if ("webkitDisplayingFullscreen" in this.el_) {
        var t = function t() {
          this.trigger("fullscreenchange", { isFullscreen: !1 });
        },
            n = function n() {
          "webkitPresentationMode" in this.el_ && "picture-in-picture" !== this.el_.webkitPresentationMode && (this.one("webkitendfullscreen", t), this.trigger("fullscreenchange", { isFullscreen: !0 }));
        };this.on("webkitbeginfullscreen", n), this.on("dispose", function () {
          e.off("webkitbeginfullscreen", n), e.off("webkitendfullscreen", t);
        });
      }
    }, e.supportsFullScreen = function () {
      if ("function" == typeof this.el_.webkitEnterFullScreen) {
        var e = h.navigator && h.navigator.userAgent || "";if (/Android/.test(e) || !/Chrome|Mac OS X 10.5/.test(e)) return !0;
      }return !1;
    }, e.enterFullScreen = function () {
      var e = this.el_;e.paused && e.networkState <= e.HAVE_METADATA ? (this.el_.play(), this.setTimeout(function () {
        e.pause(), e.webkitEnterFullScreen();
      }, 0)) : e.webkitEnterFullScreen();
    }, e.exitFullScreen = function () {
      this.el_.webkitExitFullScreen();
    }, e.src = function (e) {
      if (void 0 === e) return this.el_.src;this.setSrc(e);
    }, e.reset = function () {
      a.resetMediaElement(this.el_);
    }, e.currentSrc = function () {
      return this.currentSource_ ? this.currentSource_.src : this.el_.currentSrc;
    }, e.setControls = function (e) {
      this.el_.controls = !!e;
    }, e.addTextTrack = function (e, t, n) {
      return this.featuresNativeTextTracks ? this.el_.addTextTrack(e, t, n) : u.prototype.addTextTrack.call(this, e, t, n);
    }, e.createRemoteTextTrack = function (e) {
      if (!this.featuresNativeTextTracks) return u.prototype.createRemoteTextTrack.call(this, e);var t = d.createElement("track");return e.kind && (t.kind = e.kind), e.label && (t.label = e.label), (e.language || e.srclang) && (t.srclang = e.language || e.srclang), e.default && (t.default = e.default), e.id && (t.id = e.id), e.src && (t.src = e.src), t;
    }, e.addRemoteTextTrack = function (e, t) {
      var n = u.prototype.addRemoteTextTrack.call(this, e, t);return this.featuresNativeTextTracks && this.el().appendChild(n), n;
    }, e.removeRemoteTextTrack = function (e) {
      if (u.prototype.removeRemoteTextTrack.call(this, e), this.featuresNativeTextTracks) for (var t = this.$$("track"), n = t.length; n--;) {
        e !== t[n] && e !== t[n].track || this.el().removeChild(t[n]);
      }
    }, e.getVideoPlaybackQuality = function () {
      if ("function" == typeof this.el().getVideoPlaybackQuality) return this.el().getVideoPlaybackQuality();var e = {};return "undefined" != typeof this.el().webkitDroppedFrameCount && "undefined" != typeof this.el().webkitDecodedFrameCount && (e.droppedVideoFrames = this.el().webkitDroppedFrameCount, e.totalVideoFrames = this.el().webkitDecodedFrameCount), h.performance && "function" == typeof h.performance.now ? e.creationTime = h.performance.now() : h.performance && h.performance.timing && "number" == typeof h.performance.timing.navigationStart && (e.creationTime = h.Date.now() - h.performance.timing.navigationStart), e;
    }, a;
  }(xn);if (C()) {
    yr.TEST_VID = d.createElement("video");var _r = d.createElement("track");_r.kind = "captions", _r.srclang = "en", _r.label = "English", yr.TEST_VID.appendChild(_r);
  }yr.isSupported = function () {
    try {
      yr.TEST_VID.volume = .5;
    } catch (e) {
      return !1;
    }return !(!yr.TEST_VID || !yr.TEST_VID.canPlayType);
  }, yr.canPlayType = function (e) {
    return yr.TEST_VID.canPlayType(e);
  }, yr.canPlaySource = function (e, t) {
    return yr.canPlayType(e.type);
  }, yr.canControlVolume = function () {
    try {
      var e = yr.TEST_VID.volume;return yr.TEST_VID.volume = e / 2 + .1, e !== yr.TEST_VID.volume;
    } catch (e) {
      return !1;
    }
  }, yr.canMuteVolume = function () {
    try {
      var e = yr.TEST_VID.muted;return yr.TEST_VID.muted = !e, yr.TEST_VID.muted ? F(yr.TEST_VID, "muted", "muted") : R(yr.TEST_VID, "muted"), e !== yr.TEST_VID.muted;
    } catch (e) {
      return !1;
    }
  }, yr.canControlPlaybackRate = function () {
    if (Je && it && rt < 58) return !1;try {
      var e = yr.TEST_VID.playbackRate;return yr.TEST_VID.playbackRate = e / 2 + .1, e !== yr.TEST_VID.playbackRate;
    } catch (e) {
      return !1;
    }
  }, yr.canOverrideAttributes = function () {
    try {
      var e = function e() {};Object.defineProperty(d.createElement("video"), "src", { get: e, set: e }), Object.defineProperty(d.createElement("audio"), "src", { get: e, set: e }), Object.defineProperty(d.createElement("video"), "innerHTML", { get: e, set: e }), Object.defineProperty(d.createElement("audio"), "innerHTML", { get: e, set: e });
    } catch (e) {
      return !1;
    }return !0;
  }, yr.supportsNativeTextTracks = function () {
    return at || Ye && it;
  }, yr.supportsNativeVideoTracks = function () {
    return !(!yr.TEST_VID || !yr.TEST_VID.videoTracks);
  }, yr.supportsNativeAudioTracks = function () {
    return !(!yr.TEST_VID || !yr.TEST_VID.audioTracks);
  }, yr.Events = ["loadstart", "suspend", "abort", "error", "emptied", "stalled", "loadedmetadata", "loadeddata", "canplay", "canplaythrough", "playing", "waiting", "seeking", "seeked", "ended", "durationchange", "timeupdate", "progress", "play", "pause", "ratechange", "resize", "volumechange"], yr.prototype.featuresVolumeControl = yr.canControlVolume(), yr.prototype.featuresMuteControl = yr.canMuteVolume(), yr.prototype.featuresPlaybackRate = yr.canControlPlaybackRate(), yr.prototype.featuresSourceset = yr.canOverrideAttributes(), yr.prototype.movingMediaElementInDOM = !Ye, yr.prototype.featuresFullscreenResize = !0, yr.prototype.featuresProgressEvents = !0, yr.prototype.featuresTimeupdateEvents = !0, yr.prototype.featuresNativeTextTracks = yr.supportsNativeTextTracks(), yr.prototype.featuresNativeVideoTracks = yr.supportsNativeVideoTracks(), yr.prototype.featuresNativeAudioTracks = yr.supportsNativeAudioTracks();var mr = yr.TEST_VID && yr.TEST_VID.constructor.prototype.canPlayType,
      br = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;function Tr() {
    var e = t(["\n        Using the tech directly can be dangerous. I hope you know what you're doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      "]);return Tr = function Tr() {
      return e;
    }, e;
  }yr.patchCanPlayType = function () {
    4 <= Ze && !tt && !it && (yr.TEST_VID.constructor.prototype.canPlayType = function (e) {
      return e && br.test(e) ? "maybe" : mr.call(this, e);
    });
  }, yr.unpatchCanPlayType = function () {
    var e = yr.TEST_VID.constructor.prototype.canPlayType;return yr.TEST_VID.constructor.prototype.canPlayType = mr, e;
  }, yr.patchCanPlayType(), yr.disposeMediaElement = function (e) {
    if (e) {
      for (e.parentNode && e.parentNode.removeChild(e); e.hasChildNodes();) {
        e.removeChild(e.firstChild);
      }e.removeAttribute("src"), "function" == typeof e.load && function () {
        try {
          e.load();
        } catch (e) {}
      }();
    }
  }, yr.resetMediaElement = function (e) {
    if (e) {
      for (var t = e.querySelectorAll("source"), n = t.length; n--;) {
        e.removeChild(t[n]);
      }e.removeAttribute("src"), "function" == typeof e.load && function () {
        try {
          e.load();
        } catch (e) {}
      }();
    }
  }, ["muted", "defaultMuted", "autoplay", "controls", "loop", "playsinline"].forEach(function (e) {
    yr.prototype[e] = function () {
      return this.el_[e] || this.el_.hasAttribute(e);
    };
  }), ["muted", "defaultMuted", "autoplay", "loop", "playsinline"].forEach(function (t) {
    yr.prototype["set" + Fe(t)] = function (e) {
      (this.el_[t] = e) ? this.el_.setAttribute(t, t) : this.el_.removeAttribute(t);
    };
  }), ["paused", "currentTime", "buffered", "volume", "poster", "preload", "error", "seeking", "seekable", "ended", "playbackRate", "defaultPlaybackRate", "played", "networkState", "readyState", "videoWidth", "videoHeight"].forEach(function (e) {
    yr.prototype[e] = function () {
      return this.el_[e];
    };
  }), ["volume", "src", "poster", "preload", "playbackRate", "defaultPlaybackRate"].forEach(function (t) {
    yr.prototype["set" + Fe(t)] = function (e) {
      this.el_[t] = e;
    };
  }), ["pause", "load", "play"].forEach(function (e) {
    yr.prototype[e] = function () {
      return this.el_[e]();
    };
  }), xn.withSourceHandlers(yr), yr.nativeSourceHandler = {}, yr.nativeSourceHandler.canPlayType = function (e) {
    try {
      return yr.TEST_VID.canPlayType(e);
    } catch (e) {
      return "";
    }
  }, yr.nativeSourceHandler.canHandleSource = function (e, t) {
    if (e.type) return yr.nativeSourceHandler.canPlayType(e.type);if (e.src) {
      var n = Gt(e.src);return yr.nativeSourceHandler.canPlayType("video/" + n);
    }return "";
  }, yr.nativeSourceHandler.handleSource = function (e, t, n) {
    t.setSrc(e.src);
  }, yr.nativeSourceHandler.dispose = function () {}, yr.registerSourceHandler(yr.nativeSourceHandler), xn.registerTech("Html5", yr);var kr = ["progress", "abort", "suspend", "emptied", "stalled", "loadedmetadata", "loadeddata", "timeupdate", "resize", "volumechange", "texttrackchange"],
      Cr = { canplay: "CanPlay", canplaythrough: "CanPlayThrough", playing: "Playing", seeked: "Seeked" },
      Er = ["tiny", "xsmall", "small", "medium", "large", "xlarge", "huge"],
      Sr = {};Er.forEach(function (e) {
    var t = "x" === e.charAt(0) ? "x-" + e.substring(1) : e;Sr[e] = "vjs-layout-" + t;
  });var wr = { tiny: 210, xsmall: 320, small: 425, medium: 768, large: 1440, xlarge: 2560, huge: 1 / 0 },
      xr = function (u) {
    function c(e, t, n) {
      var i;if (e.id = e.id || t.id || "vjs_video_" + ee(), (t = m(c.getTagSettings(e), t)).initChildren = !1, t.createEl = !1, t.evented = !1, t.reportTouchActivity = !1, !t.language) if ("function" == typeof e.closest) {
        var r = e.closest("[lang]");r && r.getAttribute && (t.language = r.getAttribute("lang"));
      } else for (var s = e; s && 1 === s.nodeType;) {
        if (D(s).hasOwnProperty("lang")) {
          t.language = s.getAttribute("lang");break;
        }s = s.parentNode;
      }if ((i = u.call(this, null, t, n) || this).boundDocumentFullscreenChange_ = Ce(v(v(i)), i.documentFullscreenChange_), i.boundFullWindowOnEscKey_ = Ce(v(v(i)), i.fullWindowOnEscKey), i.boundHandleKeyPress_ = Ce(v(v(i)), i.handleKeyPress), i.log = y(i.id_), i.isPosterFromTech_ = !1, i.queuedCallbacks_ = [], i.isReady_ = !1, i.hasStarted_ = !1, i.userActive_ = !1, !i.options_ || !i.options_.techOrder || !i.options_.techOrder.length) throw new Error("No techOrder specified. Did you overwrite videojs.options instead of just changing the properties you want to override?");if (i.tag = e, i.tagAttributes = e && D(e), i.language(i.options_.language), t.languages) {
        var o = {};Object.getOwnPropertyNames(t.languages).forEach(function (e) {
          o[e.toLowerCase()] = t.languages[e];
        }), i.languages_ = o;
      } else i.languages_ = c.prototype.options_.languages;i.resetCache_(), i.poster_ = t.poster || "", i.controls_ = !!t.controls, e.controls = !1, e.removeAttribute("controls"), i.changingSrc_ = !1, i.playCallbacks_ = [], i.playTerminatedQueue_ = [], e.hasAttribute("autoplay") ? i.autoplay(!0) : i.autoplay(i.options_.autoplay), t.plugins && Object.keys(t.plugins).forEach(function (e) {
        if ("function" != typeof i[e]) throw new Error('plugin "' + e + '" does not exist');
      }), i.scrubbing_ = !1, i.el_ = i.createEl(), Oe(v(v(i)), { eventBusKey: "el_" }), i.fluid_ && i.on("playerreset", i.updateStyleEl_);var a = Re(i.options_);t.plugins && Object.keys(t.plugins).forEach(function (e) {
        i[e](t.plugins[e]);
      }), i.options_.playerOptions = a, i.middleware_ = [], i.initChildren(), i.isAudio("audio" === e.nodeName.toLowerCase()), i.controls() ? i.addClass("vjs-controls-enabled") : i.addClass("vjs-controls-disabled"), i.el_.setAttribute("role", "region"), i.isAudio() ? i.el_.setAttribute("aria-label", i.localize("Audio Player")) : i.el_.setAttribute("aria-label", i.localize("Video Player")), i.isAudio() && i.addClass("vjs-audio"), i.flexNotSupported_() && i.addClass("vjs-no-flex"), lt && i.addClass("vjs-touch-enabled"), Ye || i.addClass("vjs-workinghover"), c.players[i.id_] = v(v(i));var l = p.split(".")[0];return i.addClass("vjs-v" + l), i.userActive(!0), i.reportUserActivity(), i.one("play", i.listenForUserActivity_), i.on("focus", i.handleFocus), i.on("blur", i.handleBlur), i.on("stageclick", i.handleStageClick_), i.breakpoints(i.options_.breakpoints), i.responsive(i.options_.responsive), i;
    }f(c, u);var e = c.prototype;return e.dispose = function () {
      var i = this;this.trigger("dispose"), this.off("dispose"), de(d, vt.fullscreenchange, this.boundDocumentFullscreenChange_), de(d, "keydown", this.boundFullWindowOnEscKey_), de(d, "keydown", this.boundHandleKeyPress_), this.styleEl_ && this.styleEl_.parentNode && (this.styleEl_.parentNode.removeChild(this.styleEl_), this.styleEl_ = null), c.players[this.id_] = null, this.tag && this.tag.player && (this.tag.player = null), this.el_ && this.el_.player && (this.el_.player = null), this.tech_ && (this.tech_.dispose(), this.isPosterFromTech_ = !1, this.poster_ = ""), this.playerElIngest_ && (this.playerElIngest_ = null), this.tag && (this.tag = null), Pn[this.id()] = null, Sn.names.forEach(function (e) {
        var t = Sn[e],
            n = i[t.getterName]();n && n.off && n.off();
      }), u.prototype.dispose.call(this);
    }, e.createEl = function () {
      var t,
          n = this.tag,
          e = this.playerElIngest_ = n.parentNode && n.parentNode.hasAttribute && n.parentNode.hasAttribute("data-vjs-player"),
          i = "video-js" === this.tag.tagName.toLowerCase();e ? t = this.el_ = n.parentNode : i || (t = this.el_ = u.prototype.createEl.call(this, "div"));var r = D(n);if (i) {
        for (t = this.el_ = n, n = this.tag = d.createElement("video"); t.children.length;) {
          n.appendChild(t.firstChild);
        }A(t, "video-js") || M(t, "video-js"), t.appendChild(n), e = this.playerElIngest_ = t, Object.keys(t).forEach(function (e) {
          n[e] = t[e];
        });
      }if (n.setAttribute("tabindex", "-1"), r.tabindex = "-1", st && (n.setAttribute("role", "application"), r.role = "application"), n.removeAttribute("width"), n.removeAttribute("height"), "width" in r && delete r.width, "height" in r && delete r.height, Object.getOwnPropertyNames(r).forEach(function (e) {
        i && "class" === e || t.setAttribute(e, r[e]), i && n.setAttribute(e, r[e]);
      }), n.playerId = n.id, n.id += "_html5_api", n.className = "vjs-tech", n.player = t.player = this, this.addClass("vjs-paused"), !0 !== h.VIDEOJS_NO_DYNAMIC_STYLE) {
        this.styleEl_ = Te("vjs-styles-dimensions");var s = Y(".vjs-styles-defaults"),
            o = Y("head");o.insertBefore(this.styleEl_, s ? s.nextSibling : o.firstChild);
      }this.fill_ = !1, this.fluid_ = !1, this.width(this.options_.width), this.height(this.options_.height), this.fill(this.options_.fill), this.fluid(this.options_.fluid), this.aspectRatio(this.options_.aspectRatio);for (var a = n.getElementsByTagName("a"), l = 0; l < a.length; l++) {
        var c = a.item(l);M(c, "vjs-hidden"), c.setAttribute("hidden", "hidden");
      }return n.initNetworkState_ = n.networkState, n.parentNode && !e && n.parentNode.insertBefore(t, n), P(n, t), this.children_.unshift(n), this.el_.setAttribute("lang", this.language_), this.el_ = t;
    }, e.width = function (e) {
      return this.dimension("width", e);
    }, e.height = function (e) {
      return this.dimension("height", e);
    }, e.dimension = function (e, t) {
      var n = e + "_";if (void 0 === t) return this[n] || 0;if ("" === t) return this[n] = void 0, void this.updateStyleEl_();var i = parseFloat(t);isNaN(i) ? g.error('Improper value "' + t + '" supplied for for ' + e) : (this[n] = i, this.updateStyleEl_());
    }, e.fluid = function (e) {
      if (void 0 === e) return !!this.fluid_;var t, n;this.fluid_ = !!e, we(this) && this.off("playerreset", this.updateStyleEl_), e ? (this.addClass("vjs-fluid"), this.fill(!1), we(t = function t() {
        this.on("playerreset", this.updateStyleEl_);
      }) ? n() : (t.eventedCallbacks || (t.eventedCallbacks = []), t.eventedCallbacks.push(n))) : this.removeClass("vjs-fluid"), this.updateStyleEl_();
    }, e.fill = function (e) {
      if (void 0 === e) return !!this.fill_;this.fill_ = !!e, e ? (this.addClass("vjs-fill"), this.fluid(!1)) : this.removeClass("vjs-fill");
    }, e.aspectRatio = function (e) {
      if (void 0 === e) return this.aspectRatio_;if (!/^\d+\:\d+$/.test(e)) throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");this.aspectRatio_ = e, this.fluid(!0), this.updateStyleEl_();
    }, e.updateStyleEl_ = function () {
      if (!0 !== h.VIDEOJS_NO_DYNAMIC_STYLE) {
        var e,
            t,
            n,
            i = (void 0 !== this.aspectRatio_ && "auto" !== this.aspectRatio_ ? this.aspectRatio_ : 0 < this.videoWidth() ? this.videoWidth() + ":" + this.videoHeight() : "16:9").split(":"),
            r = i[1] / i[0];e = void 0 !== this.width_ ? this.width_ : void 0 !== this.height_ ? this.height_ / r : this.videoWidth() || 300, t = void 0 !== this.height_ ? this.height_ : e * r, n = /^[^a-zA-Z]/.test(this.id()) ? "dimensions-" + this.id() : this.id() + "-dimensions", this.addClass(n), ke(this.styleEl_, "\n      ." + n + " {\n        width: " + e + "px;\n        height: " + t + "px;\n      }\n\n      ." + n + ".vjs-fluid {\n        padding-top: " + 100 * r + "%;\n      }\n    ");
      } else {
        var s = "number" == typeof this.width_ ? this.width_ : this.options_.width,
            o = "number" == typeof this.height_ ? this.height_ : this.options_.height,
            a = this.tech_ && this.tech_.el();a && (0 <= s && (a.width = s), 0 <= o && (a.height = o));
      }
    }, e.loadTech_ = function (e, t) {
      var n = this;this.tech_ && this.unloadTech_();var i = Fe(e),
          r = e.charAt(0).toLowerCase() + e.slice(1);"Html5" !== i && this.tag && (xn.getTech("Html5").disposeMediaElement(this.tag), this.tag.player = null, this.tag = null), this.techName_ = i, this.isReady_ = !1;var s = { source: t, autoplay: "string" != typeof this.autoplay() && this.autoplay(), nativeControlsForTouch: this.options_.nativeControlsForTouch, playerId: this.id(), techId: this.id() + "_" + r + "_api", playsinline: this.options_.playsinline, preload: this.options_.preload, loop: this.options_.loop, muted: this.options_.muted, poster: this.poster(), language: this.language(), playerElIngest: this.playerElIngest_ || !1, "vtt.js": this.options_["vtt.js"], canOverridePoster: !!this.options_.techCanOverridePoster, enableSourceset: this.options_.enableSourceset };Sn.names.forEach(function (e) {
        var t = Sn[e];s[t.getterName] = n[t.privateName];
      }), m(s, this.options_[i]), m(s, this.options_[r]), m(s, this.options_[e.toLowerCase()]), this.tag && (s.tag = this.tag), t && t.src === this.cache_.src && 0 < this.cache_.currentTime && (s.startTime = this.cache_.currentTime);var o = xn.getTech(e);if (!o) throw new Error("No Tech named '" + i + "' exists! '" + i + "' should be registered using videojs.registerTech()'");this.tech_ = new o(s), this.tech_.ready(Ce(this, this.handleTechReady_), !0), jt(this.textTracksJson_ || [], this.tech_), kr.forEach(function (e) {
        n.on(n.tech_, e, n["handleTech" + Fe(e) + "_"]);
      }), Object.keys(Cr).forEach(function (t) {
        n.on(n.tech_, t, function (e) {
          0 === n.tech_.playbackRate() && n.tech_.seeking() ? n.queuedCallbacks_.push({ callback: n["handleTech" + Cr[t] + "_"].bind(n), event: e }) : n["handleTech" + Cr[t] + "_"](e);
        });
      }), this.on(this.tech_, "loadstart", this.handleTechLoadStart_), this.on(this.tech_, "sourceset", this.handleTechSourceset_), this.on(this.tech_, "waiting", this.handleTechWaiting_), this.on(this.tech_, "ended", this.handleTechEnded_), this.on(this.tech_, "seeking", this.handleTechSeeking_), this.on(this.tech_, "play", this.handleTechPlay_), this.on(this.tech_, "firstplay", this.handleTechFirstPlay_), this.on(this.tech_, "pause", this.handleTechPause_), this.on(this.tech_, "durationchange", this.handleTechDurationChange_), this.on(this.tech_, "fullscreenchange", this.handleTechFullscreenChange_), this.on(this.tech_, "error", this.handleTechError_), this.on(this.tech_, "loadedmetadata", this.updateStyleEl_), this.on(this.tech_, "posterchange", this.handleTechPosterChange_), this.on(this.tech_, "textdata", this.handleTechTextData_), this.on(this.tech_, "ratechange", this.handleTechRateChange_), this.usingNativeControls(this.techGet_("controls")), this.controls() && !this.usingNativeControls() && this.addTechControlsListeners_(), this.tech_.el().parentNode === this.el() || "Html5" === i && this.tag || P(this.tech_.el(), this.el()), this.tag && (this.tag.player = null, this.tag = null);
    }, e.unloadTech_ = function () {
      var n = this;Sn.names.forEach(function (e) {
        var t = Sn[e];n[t.privateName] = n[t.getterName]();
      }), this.textTracksJson_ = xt(this.tech_), this.isReady_ = !1, this.tech_.dispose(), this.tech_ = !1, this.isPosterFromTech_ && (this.poster_ = "", this.trigger("posterchange")), this.isPosterFromTech_ = !1;
    }, e.tech = function (e) {
      return void 0 === e && g.warn(_(Tr())), this.tech_;
    }, e.addTechControlsListeners_ = function () {
      this.removeTechControlsListeners_(), this.on(this.tech_, "mousedown", this.handleTechClick_), this.on(this.tech_, "dblclick", this.handleTechDoubleClick_), this.on(this.tech_, "touchstart", this.handleTechTouchStart_), this.on(this.tech_, "touchmove", this.handleTechTouchMove_), this.on(this.tech_, "touchend", this.handleTechTouchEnd_), this.on(this.tech_, "tap", this.handleTechTap_);
    }, e.removeTechControlsListeners_ = function () {
      this.off(this.tech_, "tap", this.handleTechTap_), this.off(this.tech_, "touchstart", this.handleTechTouchStart_), this.off(this.tech_, "touchmove", this.handleTechTouchMove_), this.off(this.tech_, "touchend", this.handleTechTouchEnd_), this.off(this.tech_, "mousedown", this.handleTechClick_), this.off(this.tech_, "dblclick", this.handleTechDoubleClick_);
    }, e.handleTechReady_ = function () {
      this.triggerReady(), this.cache_.volume && this.techCall_("setVolume", this.cache_.volume), this.handleTechPosterChange_(), this.handleTechDurationChange_();
    }, e.handleTechLoadStart_ = function () {
      this.removeClass("vjs-ended"), this.removeClass("vjs-seeking"), this.error(null), this.handleTechDurationChange_(), this.paused() ? (this.hasStarted(!1), this.trigger("loadstart")) : (this.trigger("loadstart"), this.trigger("firstplay")), this.manualAutoplay_(this.autoplay());
    }, e.manualAutoplay_ = function (t) {
      var i = this;if (this.tech_ && "string" == typeof t) {
        var e,
            n = function n() {
          var e = i.muted();i.muted(!0);var t = function t() {
            i.muted(e);
          };i.playTerminatedQueue_.push(t);var n = i.play();if (Et(n)) return n.catch(t);
        };if ("any" === t && !0 !== this.muted() ? Et(e = this.play()) && (e = e.catch(n)) : e = "muted" === t && !0 !== this.muted() ? n() : this.play(), Et(e)) return e.then(function () {
          i.trigger({ type: "autoplay-success", autoplay: t });
        }).catch(function (e) {
          i.trigger({ type: "autoplay-failure", autoplay: t });
        });
      }
    }, e.updateSourceCaches_ = function (e) {
      void 0 === e && (e = "");var t = e,
          n = "";"string" != typeof t && (t = e.src, n = e.type), this.cache_.source = this.cache_.source || {}, this.cache_.sources = this.cache_.sources || [], t && !n && (n = function (e, t) {
        if (!t) return "";if (e.cache_.source.src === t && e.cache_.source.type) return e.cache_.source.type;var n = e.cache_.sources.filter(function (e) {
          return e.src === t;
        });if (n.length) return n[0].type;for (var i = e.$$("source"), r = 0; r < i.length; r++) {
          var s = i[r];if (s.type && s.src && s.src === t) return s.type;
        }return Bn(t);
      }(this, t)), this.cache_.source = Re({}, e, { src: t, type: n });for (var i = this.cache_.sources.filter(function (e) {
        return e.src && e.src === t;
      }), r = [], s = this.$$("source"), o = [], a = 0; a < s.length; a++) {
        var l = D(s[a]);r.push(l), l.src && l.src === t && o.push(l.src);
      }o.length && !i.length ? this.cache_.sources = r : i.length || (this.cache_.sources = [this.cache_.source]), this.cache_.src = t;
    }, e.handleTechSourceset_ = function (e) {
      var i = this;if (!this.changingSrc_) {
        var t = function t(e) {
          return i.updateSourceCaches_(e);
        },
            n = this.currentSource().src,
            r = e.src;if (n && !/^blob:/.test(n) && /^blob:/.test(r) && (!this.lastSource_ || this.lastSource_.tech !== r && this.lastSource_.player !== n) && (t = function t() {}), t(r), !e.src) {
          this.tech_.one(["sourceset", "loadstart"], function e(t) {
            if ("sourceset" !== t.type) {
              var n = i.techGet("currentSrc");i.lastSource_.tech = n, i.updateSourceCaches_(n);
            }i.tech_.off(["sourceset", "loadstart"], e);
          });
        }
      }this.lastSource_ = { player: this.currentSource().src, tech: e.src }, this.trigger({ src: e.src, type: "sourceset" });
    }, e.hasStarted = function (e) {
      if (void 0 === e) return this.hasStarted_;e !== this.hasStarted_ && (this.hasStarted_ = e, this.hasStarted_ ? (this.addClass("vjs-has-started"), this.trigger("firstplay")) : this.removeClass("vjs-has-started"));
    }, e.handleTechPlay_ = function () {
      this.removeClass("vjs-ended"), this.removeClass("vjs-paused"), this.addClass("vjs-playing"), this.hasStarted(!0), this.trigger("play");
    }, e.handleTechRateChange_ = function () {
      0 < this.tech_.playbackRate() && 0 === this.cache_.lastPlaybackRate && (this.queuedCallbacks_.forEach(function (e) {
        return e.callback(e.event);
      }), this.queuedCallbacks_ = []), this.cache_.lastPlaybackRate = this.tech_.playbackRate(), this.trigger("ratechange");
    }, e.handleTechWaiting_ = function () {
      var t = this;this.addClass("vjs-waiting"), this.trigger("waiting");var n = this.currentTime();this.on("timeupdate", function e() {
        n !== t.currentTime() && (t.removeClass("vjs-waiting"), t.off("timeupdate", e));
      });
    }, e.handleTechCanPlay_ = function () {
      this.removeClass("vjs-waiting"), this.trigger("canplay");
    }, e.handleTechCanPlayThrough_ = function () {
      this.removeClass("vjs-waiting"), this.trigger("canplaythrough");
    }, e.handleTechPlaying_ = function () {
      this.removeClass("vjs-waiting"), this.trigger("playing");
    }, e.handleTechSeeking_ = function () {
      this.addClass("vjs-seeking"), this.trigger("seeking");
    }, e.handleTechSeeked_ = function () {
      this.removeClass("vjs-seeking"), this.removeClass("vjs-ended"), this.trigger("seeked");
    }, e.handleTechFirstPlay_ = function () {
      this.options_.starttime && (g.warn("Passing the `starttime` option to the player will be deprecated in 6.0"), this.currentTime(this.options_.starttime)), this.addClass("vjs-has-started"), this.trigger("firstplay");
    }, e.handleTechPause_ = function () {
      this.removeClass("vjs-playing"), this.addClass("vjs-paused"), this.trigger("pause");
    }, e.handleTechEnded_ = function () {
      this.addClass("vjs-ended"), this.options_.loop ? (this.currentTime(0), this.play()) : this.paused() || this.pause(), this.trigger("ended");
    }, e.handleTechDurationChange_ = function () {
      this.duration(this.techGet_("duration"));
    }, e.handleTechClick_ = function (e) {
      G(e) && this.controls_ && (this.paused() ? St(this.play()) : this.pause());
    }, e.handleTechDoubleClick_ = function (t) {
      this.controls_ && (Array.prototype.some.call(this.$$(".vjs-control-bar, .vjs-modal-dialog"), function (e) {
        return e.contains(t.target);
      }) || void 0 !== this.options_ && void 0 !== this.options_.userActions && void 0 !== this.options_.userActions.doubleClick && !1 === this.options_.userActions.doubleClick || (void 0 !== this.options_ && void 0 !== this.options_.userActions && "function" == typeof this.options_.userActions.doubleClick ? this.options_.userActions.doubleClick.call(this, t) : this.isFullscreen() ? this.exitFullscreen() : this.requestFullscreen()));
    }, e.handleTechTap_ = function () {
      this.userActive(!this.userActive());
    }, e.handleTechTouchStart_ = function () {
      this.userWasActive = this.userActive();
    }, e.handleTechTouchMove_ = function () {
      this.userWasActive && this.reportUserActivity();
    }, e.handleTechTouchEnd_ = function (e) {
      e.preventDefault();
    }, e.handleStageClick_ = function () {
      this.reportUserActivity();
    }, e.toggleFullscreenClass_ = function () {
      this.isFullscreen() ? this.addClass("vjs-fullscreen") : this.removeClass("vjs-fullscreen");
    }, e.documentFullscreenChange_ = function (e) {
      var t = vt;this.isFullscreen(d[t.fullscreenElement] === this.el() || this.el().matches(":" + t.fullscreen)), !1 === this.isFullscreen() && de(d, t.fullscreenchange, this.boundDocumentFullscreenChange_), _t || this.trigger("fullscreenchange");
    }, e.handleTechFullscreenChange_ = function (e, t) {
      t && this.isFullscreen(t.isFullscreen), this.trigger("fullscreenchange");
    }, e.handleTechError_ = function () {
      var e = this.tech_.error();this.error(e);
    }, e.handleTechTextData_ = function () {
      var e = null;1 < arguments.length && (e = arguments[1]), this.trigger("textdata", e);
    }, e.getCache = function () {
      return this.cache_;
    }, e.resetCache_ = function () {
      this.cache_ = { currentTime: 0, inactivityTimeout: this.options_.inactivityTimeout, duration: NaN, lastVolume: 1, lastPlaybackRate: this.defaultPlaybackRate(), media: null, src: "", source: {}, sources: [], volume: 1 };
    }, e.techCall_ = function (r, s) {
      this.ready(function () {
        if (r in On) return e = this.middleware_, t = this.tech_, i = s, t[n = r](e.reduce(In(n), i));if (r in Dn) return Ln(this.middleware_, this.tech_, r, s);var e, t, n, i;try {
          this.tech_ && this.tech_[r](s);
        } catch (e) {
          throw g(e), e;
        }
      }, !0);
    }, e.techGet_ = function (t) {
      if (this.tech_ && this.tech_.isReady_) {
        if (t in Nn) return e = this.middleware_, n = this.tech_, i = t, e.reduceRight(In(i), n[i]());if (t in Dn) return Ln(this.middleware_, this.tech_, t);var e, n, i;try {
          return this.tech_[t]();
        } catch (e) {
          if (void 0 === this.tech_[t]) throw g("Video.js: " + t + " method not defined for " + this.techName_ + " playback technology.", e), e;if ("TypeError" === e.name) throw g("Video.js: " + t + " unavailable on " + this.techName_ + " playback technology element.", e), this.tech_.isReady_ = !1, e;throw g(e), e;
        }
      }
    }, e.play = function () {
      var t = this,
          e = this.options_.Promise || h.Promise;return e ? new e(function (e) {
        t.play_(e);
      }) : this.play_();
    }, e.play_ = function (e) {
      var t = this;void 0 === e && (e = St), this.playCallbacks_.push(e);var n = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc()));if (this.waitToPlay_ && (this.off(["ready", "loadstart"], this.waitToPlay_), this.waitToPlay_ = null), !this.isReady_ || !n) return this.waitToPlay_ = function (e) {
        t.play_();
      }, this.one(["ready", "loadstart"], this.waitToPlay_), void (n || !at && !Ye || this.load());var i = this.techGet_("play");null === i ? this.runPlayTerminatedQueue_() : this.runPlayCallbacks_(i);
    }, e.runPlayTerminatedQueue_ = function () {
      var e = this.playTerminatedQueue_.slice(0);this.playTerminatedQueue_ = [], e.forEach(function (e) {
        e();
      });
    }, e.runPlayCallbacks_ = function (t) {
      var e = this.playCallbacks_.slice(0);this.playCallbacks_ = [], this.playTerminatedQueue_ = [], e.forEach(function (e) {
        e(t);
      });
    }, e.pause = function () {
      this.techCall_("pause");
    }, e.paused = function () {
      return !1 !== this.techGet_("paused");
    }, e.played = function () {
      return this.techGet_("played") || dt(0, 0);
    }, e.scrubbing = function (e) {
      if ("undefined" == typeof e) return this.scrubbing_;this.scrubbing_ = !!e, e ? this.addClass("vjs-scrubbing") : this.removeClass("vjs-scrubbing");
    }, e.currentTime = function (e) {
      return "undefined" != typeof e ? (e < 0 && (e = 0), void this.techCall_("setCurrentTime", e)) : (this.cache_.currentTime = this.techGet_("currentTime") || 0, this.cache_.currentTime);
    }, e.duration = function (e) {
      if (void 0 === e) return void 0 !== this.cache_.duration ? this.cache_.duration : NaN;(e = parseFloat(e)) < 0 && (e = 1 / 0), e !== this.cache_.duration && ((this.cache_.duration = e) === 1 / 0 ? (this.addClass("vjs-live"), this.options_.liveui && this.player_.liveTracker && this.addClass("vjs-liveui")) : (this.removeClass("vjs-live"), this.removeClass("vjs-liveui")), isNaN(e) || this.trigger("durationchange"));
    }, e.remainingTime = function () {
      return this.duration() - this.currentTime();
    }, e.remainingTimeDisplay = function () {
      return Math.floor(this.duration()) - Math.floor(this.currentTime());
    }, e.buffered = function () {
      var e = this.techGet_("buffered");return e && e.length || (e = dt(0, 0)), e;
    }, e.bufferedPercent = function () {
      return pt(this.buffered(), this.duration());
    }, e.bufferedEnd = function () {
      var e = this.buffered(),
          t = this.duration(),
          n = e.end(e.length - 1);return t < n && (n = t), n;
    }, e.volume = function (e) {
      var t;return void 0 !== e ? (t = Math.max(0, Math.min(1, parseFloat(e))), this.cache_.volume = t, this.techCall_("setVolume", t), void (0 < t && this.lastVolume_(t))) : (t = parseFloat(this.techGet_("volume")), isNaN(t) ? 1 : t);
    }, e.muted = function (e) {
      if (void 0 === e) return this.techGet_("muted") || !1;this.techCall_("setMuted", e);
    }, e.defaultMuted = function (e) {
      return void 0 !== e ? this.techCall_("setDefaultMuted", e) : this.techGet_("defaultMuted") || !1;
    }, e.lastVolume_ = function (e) {
      if (void 0 === e || 0 === e) return this.cache_.lastVolume;this.cache_.lastVolume = e;
    }, e.supportsFullScreen = function () {
      return this.techGet_("supportsFullScreen") || !1;
    }, e.isFullscreen = function (e) {
      return void 0 !== e ? (this.isFullscreen_ = !!e, void this.toggleFullscreenClass_()) : !!this.isFullscreen_;
    }, e.requestFullscreen = function () {
      var e = vt;this.isFullscreen(!0), e.requestFullscreen ? (he(d, e.fullscreenchange, this.boundDocumentFullscreenChange_), this.el_[e.requestFullscreen]()) : this.tech_.supportsFullScreen() ? this.techCall_("enterFullScreen") : (this.enterFullWindow(), this.trigger("fullscreenchange"));
    }, e.exitFullscreen = function () {
      var e = vt;this.isFullscreen(!1), e.requestFullscreen ? d[e.exitFullscreen]() : this.tech_.supportsFullScreen() ? this.techCall_("exitFullScreen") : (this.exitFullWindow(), this.trigger("fullscreenchange"));
    }, e.enterFullWindow = function () {
      this.isFullWindow = !0, this.docOrigOverflow = d.documentElement.style.overflow, he(d, "keydown", this.boundFullWindowOnEscKey_), d.documentElement.style.overflow = "hidden", M(d.body, "vjs-full-window"), this.trigger("enterFullWindow");
    }, e.fullWindowOnEscKey = function (e) {
      At.isEventKey(e, "Esc") && (!0 === this.isFullscreen() ? this.exitFullscreen() : this.exitFullWindow());
    }, e.exitFullWindow = function () {
      this.isFullWindow = !1, de(d, "keydown", this.boundFullWindowOnEscKey_), d.documentElement.style.overflow = this.docOrigOverflow, L(d.body, "vjs-full-window"), this.trigger("exitFullWindow");
    }, e.handleFocus = function (e) {
      de(d, "keydown", this.boundHandleKeyPress_), he(d, "keydown", this.boundHandleKeyPress_);
    }, e.handleBlur = function (e) {
      de(d, "keydown", this.boundHandleKeyPress_);
    }, e.handleKeyPress = function (e) {
      this.options_.userActions && this.options_.userActions.hotkeys && !1 !== this.options_.userActions.hotkeys && ("function" == typeof this.options_.userActions.hotkeys ? this.options_.userActions.hotkeys.call(this, e) : this.handleHotkeys(e));
    }, e.handleHotkeys = function (e) {
      var t = this.options_.userActions ? this.options_.userActions.hotkeys : {},
          n = t.fullscreenKey,
          i = void 0 === n ? function (e) {
        return At.isEventKey(e, "f");
      } : n,
          r = t.muteKey,
          s = void 0 === r ? function (e) {
        return At.isEventKey(e, "m");
      } : r,
          o = t.playPauseKey,
          a = void 0 === o ? function (e) {
        return At.isEventKey(e, "k") || At.isEventKey(e, "Space");
      } : o;if (i.call(this, e)) {
        e.preventDefault();var l = Be.getComponent("FullscreenToggle");!1 !== d[vt.fullscreenEnabled] && l.prototype.handleClick.call(this);
      } else if (s.call(this, e)) {
        e.preventDefault(), Be.getComponent("MuteToggle").prototype.handleClick.call(this);
      } else if (a.call(this, e)) {
        e.preventDefault(), Be.getComponent("PlayToggle").prototype.handleClick.call(this);
      }
    }, e.canPlayType = function (e) {
      for (var t, n = 0, i = this.options_.techOrder; n < i.length; n++) {
        var r = i[n],
            s = xn.getTech(r);if (s || (s = Be.getComponent(r)), s) {
          if (s.isSupported() && (t = s.canPlayType(e))) return t;
        } else g.error('The "' + r + '" tech is undefined. Skipped browser support check for that tech.');
      }return "";
    }, e.selectSource = function (e) {
      var n,
          i = this,
          t = this.options_.techOrder.map(function (e) {
        return [e, xn.getTech(e)];
      }).filter(function (e) {
        var t = e[0],
            n = e[1];return n ? n.isSupported() : (g.error('The "' + t + '" tech is undefined. Skipped browser support check for that tech.'), !1);
      }),
          r = function r(e, n, i) {
        var r;return e.some(function (t) {
          return n.some(function (e) {
            if (r = i(t, e)) return !0;
          });
        }), r;
      },
          s = function s(e, t) {
        var n = e[0];if (e[1].canPlaySource(t, i.options_[n.toLowerCase()])) return { source: t, tech: n };
      };return (this.options_.sourceOrder ? r(e, t, (n = s, function (e, t) {
        return n(t, e);
      })) : r(t, e, s)) || !1;
    }, e.src = function (e) {
      var r = this;if ("undefined" == typeof e) return this.cache_.src || "";var s = function t(e) {
        if (Array.isArray(e)) {
          var n = [];e.forEach(function (e) {
            e = t(e), Array.isArray(e) ? n = n.concat(e) : b(e) && n.push(e);
          }), e = n;
        } else e = "string" == typeof e && e.trim() ? [Hn({ src: e })] : b(e) && "string" == typeof e.src && e.src && e.src.trim() ? [Hn(e)] : [];return e;
      }(e);s.length ? (this.changingSrc_ = !0, this.cache_.sources = s, this.updateSourceCaches_(s[0]), Mn(this, s[0], function (e, t) {
        var n, i;if (r.middleware_ = t, r.cache_.sources = s, r.updateSourceCaches_(e), r.src_(e)) return 1 < s.length ? r.src(s.slice(1)) : (r.changingSrc_ = !1, r.setTimeout(function () {
          this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
        }, 0), void r.triggerReady());n = t, i = r.tech_, n.forEach(function (e) {
          return e.setTech && e.setTech(i);
        });
      })) : this.setTimeout(function () {
        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
      }, 0);
    }, e.src_ = function (e) {
      var t,
          n,
          i = this,
          r = this.selectSource([e]);return !r || (t = r.tech, n = this.techName_, Fe(t) !== Fe(n) ? (this.changingSrc_ = !0, this.loadTech_(r.tech, r.source), this.tech_.ready(function () {
        i.changingSrc_ = !1;
      })) : this.ready(function () {
        this.tech_.constructor.prototype.hasOwnProperty("setSource") ? this.techCall_("setSource", e) : this.techCall_("src", e.src), this.changingSrc_ = !1;
      }, !0), !1);
    }, e.load = function () {
      this.techCall_("load");
    }, e.reset = function () {
      var e = this,
          t = this.options_.Promise || h.Promise;this.paused() || !t ? this.doReset_() : St(this.play().then(function () {
        return e.doReset_();
      }));
    }, e.doReset_ = function () {
      this.tech_ && this.tech_.clearTracks("text"), this.resetCache_(), this.poster(""), this.loadTech_(this.options_.techOrder[0], null), this.techCall_("reset"), this.resetControlBarUI_(), we(this) && this.trigger("playerreset");
    }, e.resetControlBarUI_ = function () {
      this.resetProgressBar_(), this.resetPlaybackRate_(), this.resetVolumeBar_();
    }, e.resetProgressBar_ = function () {
      this.currentTime(0);var e = this.controlBar,
          t = e.durationDisplay,
          n = e.remainingTimeDisplay;t && t.updateContent(), n && n.updateContent();
    }, e.resetPlaybackRate_ = function () {
      this.playbackRate(this.defaultPlaybackRate()), this.handleTechRateChange_();
    }, e.resetVolumeBar_ = function () {
      this.volume(1), this.trigger("volumechange");
    }, e.currentSources = function () {
      var e = this.currentSource(),
          t = [];return 0 !== Object.keys(e).length && t.push(e), this.cache_.sources || t;
    }, e.currentSource = function () {
      return this.cache_.source || {};
    }, e.currentSrc = function () {
      return this.currentSource() && this.currentSource().src || "";
    }, e.currentType = function () {
      return this.currentSource() && this.currentSource().type || "";
    }, e.preload = function (e) {
      return void 0 !== e ? (this.techCall_("setPreload", e), void (this.options_.preload = e)) : this.techGet_("preload");
    }, e.autoplay = function (e) {
      if (void 0 === e) return this.options_.autoplay || !1;var t;"string" == typeof e && /(any|play|muted)/.test(e) ? (this.options_.autoplay = e, this.manualAutoplay_(e), t = !1) : this.options_.autoplay = !!e, t = "undefined" == typeof t ? this.options_.autoplay : t, this.tech_ && this.techCall_("setAutoplay", t);
    }, e.playsinline = function (e) {
      return void 0 !== e ? (this.techCall_("setPlaysinline", e), this.options_.playsinline = e, this) : this.techGet_("playsinline");
    }, e.loop = function (e) {
      return void 0 !== e ? (this.techCall_("setLoop", e), void (this.options_.loop = e)) : this.techGet_("loop");
    }, e.poster = function (e) {
      if (void 0 === e) return this.poster_;e || (e = ""), e !== this.poster_ && (this.poster_ = e, this.techCall_("setPoster", e), this.isPosterFromTech_ = !1, this.trigger("posterchange"));
    }, e.handleTechPosterChange_ = function () {
      if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {
        var e = this.tech_.poster() || "";e !== this.poster_ && (this.poster_ = e, this.isPosterFromTech_ = !0, this.trigger("posterchange"));
      }
    }, e.controls = function (e) {
      if (void 0 === e) return !!this.controls_;e = !!e, this.controls_ !== e && (this.controls_ = e, this.usingNativeControls() && this.techCall_("setControls", e), this.controls_ ? (this.removeClass("vjs-controls-disabled"), this.addClass("vjs-controls-enabled"), this.trigger("controlsenabled"), this.usingNativeControls() || this.addTechControlsListeners_()) : (this.removeClass("vjs-controls-enabled"), this.addClass("vjs-controls-disabled"), this.trigger("controlsdisabled"), this.usingNativeControls() || this.removeTechControlsListeners_()));
    }, e.usingNativeControls = function (e) {
      if (void 0 === e) return !!this.usingNativeControls_;e = !!e, this.usingNativeControls_ !== e && (this.usingNativeControls_ = e, this.usingNativeControls_ ? (this.addClass("vjs-using-native-controls"), this.trigger("usingnativecontrols")) : (this.removeClass("vjs-using-native-controls"), this.trigger("usingcustomcontrols")));
    }, e.error = function (e) {
      return void 0 === e ? this.error_ || null : null === e ? (this.error_ = e, this.removeClass("vjs-error"), void (this.errorDisplay && this.errorDisplay.close())) : (this.error_ = new Tt(e), this.addClass("vjs-error"), g.error("(CODE:" + this.error_.code + " " + Tt.errorTypes[this.error_.code] + ")", this.error_.message, this.error_), void this.trigger("error"));
    }, e.reportUserActivity = function (e) {
      this.userActivity_ = !0;
    }, e.userActive = function (e) {
      if (void 0 === e) return this.userActive_;if ((e = !!e) !== this.userActive_) {
        if (this.userActive_ = e, this.userActive_) return this.userActivity_ = !0, this.removeClass("vjs-user-inactive"), this.addClass("vjs-user-active"), void this.trigger("useractive");this.tech_ && this.tech_.one("mousemove", function (e) {
          e.stopPropagation(), e.preventDefault();
        }), this.userActivity_ = !1, this.removeClass("vjs-user-active"), this.addClass("vjs-user-inactive"), this.trigger("userinactive");
      }
    }, e.listenForUserActivity_ = function () {
      var t,
          n,
          i,
          r = Ce(this, this.reportUserActivity);this.on("mousedown", function () {
        r(), this.clearInterval(t), t = this.setInterval(r, 250);
      }), this.on("mousemove", function (e) {
        e.screenX === n && e.screenY === i || (n = e.screenX, i = e.screenY, r());
      }), this.on("mouseup", function (e) {
        r(), this.clearInterval(t);
      });var s,
          e = this.getChild("controlBar");!e || Ye || Je || (e.on("mouseenter", function (e) {
        this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout, this.player().options_.inactivityTimeout = 0;
      }), e.on("mouseleave", function (e) {
        this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;
      })), this.on("keydown", r), this.on("keyup", r), this.setInterval(function () {
        if (this.userActivity_) {
          this.userActivity_ = !1, this.userActive(!0), this.clearTimeout(s);var e = this.options_.inactivityTimeout;e <= 0 || (s = this.setTimeout(function () {
            this.userActivity_ || this.userActive(!1);
          }, e));
        }
      }, 250);
    }, e.playbackRate = function (e) {
      if (void 0 === e) return this.tech_ && this.tech_.featuresPlaybackRate ? this.cache_.lastPlaybackRate || this.techGet_("playbackRate") : 1;this.techCall_("setPlaybackRate", e);
    }, e.defaultPlaybackRate = function (e) {
      return void 0 !== e ? this.techCall_("setDefaultPlaybackRate", e) : this.tech_ && this.tech_.featuresPlaybackRate ? this.techGet_("defaultPlaybackRate") : 1;
    }, e.isAudio = function (e) {
      if (void 0 === e) return !!this.isAudio_;this.isAudio_ = !!e;
    }, e.addTextTrack = function (e, t, n) {
      if (this.tech_) return this.tech_.addTextTrack(e, t, n);
    }, e.addRemoteTextTrack = function (e, t) {
      if (this.tech_) return this.tech_.addRemoteTextTrack(e, t);
    }, e.removeRemoteTextTrack = function (e) {
      void 0 === e && (e = {});var t = e.track;if (t || (t = e), this.tech_) return this.tech_.removeRemoteTextTrack(t);
    }, e.getVideoPlaybackQuality = function () {
      return this.techGet_("getVideoPlaybackQuality");
    }, e.videoWidth = function () {
      return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
    }, e.videoHeight = function () {
      return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
    }, e.language = function (e) {
      if (void 0 === e) return this.language_;this.language_ = String(e).toLowerCase();
    }, e.languages = function () {
      return Re(c.prototype.options_.languages, this.languages_);
    }, e.toJSON = function () {
      var e = Re(this.options_),
          t = e.tracks;e.tracks = [];for (var n = 0; n < t.length; n++) {
        var i = t[n];(i = Re(i)).player = void 0, e.tracks[n] = i;
      }return e;
    }, e.createModal = function (e, t) {
      var n = this;(t = t || {}).content = e || "";var i = new Lt(this, t);return this.addChild(i), i.on("dispose", function () {
        n.removeChild(i);
      }), i.open(), i;
    }, e.updateCurrentBreakpoint_ = function () {
      if (this.responsive()) for (var e = this.currentBreakpoint(), t = this.currentWidth(), n = 0; n < Er.length; n++) {
        var i = Er[n];if (t <= this.breakpoints_[i]) {
          if (e === i) return;e && this.removeClass(Sr[e]), this.addClass(Sr[i]), this.breakpoint_ = i;break;
        }
      }
    }, e.removeCurrentBreakpoint_ = function () {
      var e = this.currentBreakpointClass();this.breakpoint_ = "", e && this.removeClass(e);
    }, e.breakpoints = function (e) {
      return void 0 === e || (this.breakpoint_ = "", this.breakpoints_ = m({}, wr, e), this.updateCurrentBreakpoint_()), m(this.breakpoints_);
    }, e.responsive = function (e) {
      return void 0 === e ? this.responsive_ : (e = Boolean(e)) !== this.responsive_ ? ((this.responsive_ = e) ? (this.on("playerresize", this.updateCurrentBreakpoint_), this.updateCurrentBreakpoint_()) : (this.off("playerresize", this.updateCurrentBreakpoint_), this.removeCurrentBreakpoint_()), e) : void 0;
    }, e.currentBreakpoint = function () {
      return this.breakpoint_;
    }, e.currentBreakpointClass = function () {
      return Sr[this.breakpoint_] || "";
    }, e.loadMedia = function (e, t) {
      var n = this;if (e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e))) {
        this.reset(), this.cache_.media = Re(e);var i = this.cache_.media,
            r = i.artwork,
            s = i.poster,
            o = i.src,
            a = i.textTracks;!r && s && (this.cache_.media.artwork = [{ src: s, type: Bn(s) }]), o && this.src(o), s && this.poster(s), Array.isArray(a) && a.forEach(function (e) {
          return n.addRemoteTextTrack(e, !1);
        }), this.ready(t);
      }
    }, e.getMedia = function () {
      if (this.cache_.media) return Re(this.cache_.media);var e = this.poster(),
          t = { src: this.currentSources(), textTracks: Array.prototype.map.call(this.remoteTextTracks(), function (e) {
          return { kind: e.kind, label: e.label, language: e.language, src: e.src };
        }) };return e && (t.poster = e, t.artwork = [{ src: t.poster, type: Bn(t.poster) }]), t;
    }, c.getTagSettings = function (e) {
      var t = { sources: [], tracks: [] },
          n = D(e),
          i = n["data-setup"];if (A(e, "vjs-fill") && (n.fill = !0), A(e, "vjs-fluid") && (n.fluid = !0), null !== i) {
        var r = Ct(i || "{}"),
            s = r[0],
            o = r[1];s && g.error(s), m(n, o);
      }if (m(t, n), e.hasChildNodes()) for (var a = e.childNodes, l = 0, c = a.length; l < c; l++) {
        var u = a[l],
            h = u.nodeName.toLowerCase();"source" === h ? t.sources.push(D(u)) : "track" === h && t.tracks.push(D(u));
      }return t;
    }, e.flexNotSupported_ = function () {
      var e = d.createElement("i");return !("flexBasis" in e.style || "webkitFlexBasis" in e.style || "mozFlexBasis" in e.style || "msFlexBasis" in e.style || "msFlexOrder" in e.style);
    }, c;
  }(Be);Sn.names.forEach(function (e) {
    var t = Sn[e];xr.prototype[t.getterName] = function () {
      return this.tech_ ? this.tech_[t.getterName]() : (this[t.privateName] = this[t.privateName] || new t.ListClass(), this[t.privateName]);
    };
  }), xr.players = {};var jr = h.navigator;xr.prototype.options_ = { techOrder: xn.defaultTechOrder_, html5: {}, flash: {}, inactivityTimeout: 2e3, playbackRates: [], liveui: !1, children: ["mediaLoader", "posterImage", "textTrackDisplay", "loadingSpinner", "bigPlayButton", "liveTracker", "controlBar", "errorDisplay", "textTrackSettings", "resizeManager"], language: jr && (jr.languages && jr.languages[0] || jr.userLanguage || jr.language) || "en", languages: {}, notSupportedMessage: "No compatible source was found for this media.", breakpoints: {}, responsive: !1 }, ["ended", "seeking", "seekable", "networkState", "readyState"].forEach(function (e) {
    xr.prototype[e] = function () {
      return this.techGet_(e);
    };
  }), kr.forEach(function (e) {
    xr.prototype["handleTech" + Fe(e) + "_"] = function () {
      return this.trigger(e);
    };
  }), Be.registerComponent("Player", xr);var Pr = "plugin",
      Ar = "activePlugins_",
      Mr = {},
      Lr = function Lr(e) {
    return Mr.hasOwnProperty(e);
  },
      Nr = function Nr(e) {
    return Lr(e) ? Mr[e] : void 0;
  },
      Or = function Or(e, t) {
    e[Ar] = e[Ar] || {}, e[Ar][t] = !0;
  },
      Dr = function Dr(e, t, n) {
    var i = (n ? "before" : "") + "pluginsetup";e.trigger(i, t), e.trigger(i + ":" + t.name, t);
  },
      Ir = function Ir(r, s) {
    return s.prototype.name = r, function () {
      Dr(this, { name: r, plugin: s, instance: null }, !0);for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
        t[n] = arguments[n];
      }var i = o(s, [this].concat(t));return this[r] = function () {
        return i;
      }, Dr(this, i.getEventHash()), i;
    };
  },
      Fr = function () {
    function s(e) {
      if (this.constructor === s) throw new Error("Plugin must be sub-classed; not directly instantiated.");this.player = e, Oe(this), delete this.trigger, Ie(this, this.constructor.defaultState), Or(e, this.name), this.dispose = Ce(this, this.dispose), e.on("dispose", this.dispose);
    }var e = s.prototype;return e.version = function () {
      return this.constructor.VERSION;
    }, e.getEventHash = function (e) {
      return void 0 === e && (e = {}), e.name = this.name, e.plugin = this.constructor, e.instance = this, e;
    }, e.trigger = function (e, t) {
      return void 0 === t && (t = {}), pe(this.eventBusEl_, e, this.getEventHash(t));
    }, e.handleStateChanged = function (e) {}, e.dispose = function () {
      var e = this.name,
          t = this.player;this.trigger("dispose"), this.off(), t.off("dispose", this.dispose), t[Ar][e] = !1, this.player = this.state = null, t[e] = Ir(e, Mr[e]);
    }, s.isBasic = function (e) {
      var t = "string" == typeof e ? Nr(e) : e;return "function" == typeof t && !s.prototype.isPrototypeOf(t.prototype);
    }, s.registerPlugin = function (e, t) {
      if ("string" != typeof e) throw new Error('Illegal plugin name, "' + e + '", must be a string, was ' + (typeof e === "undefined" ? "undefined" : _typeof(e)) + ".");if (Lr(e)) g.warn('A plugin named "' + e + '" already exists. You may want to avoid re-registering plugins!');else if (xr.prototype.hasOwnProperty(e)) throw new Error('Illegal plugin name, "' + e + '", cannot share a name with an existing player method!');if ("function" != typeof t) throw new Error('Illegal plugin for "' + e + '", must be a function, was ' + (typeof t === "undefined" ? "undefined" : _typeof(t)) + ".");var n, i, r;return Mr[e] = t, e !== Pr && (s.isBasic(t) ? xr.prototype[e] = (n = e, i = t, r = function r() {
        Dr(this, { name: n, plugin: i, instance: null }, !0);var e = i.apply(this, arguments);return Or(this, n), Dr(this, { name: n, plugin: i, instance: e }), e;
      }, Object.keys(i).forEach(function (e) {
        r[e] = i[e];
      }), r) : xr.prototype[e] = Ir(e, t)), t;
    }, s.deregisterPlugin = function (e) {
      if (e === Pr) throw new Error("Cannot de-register base plugin.");Lr(e) && (delete Mr[e], delete xr.prototype[e]);
    }, s.getPlugins = function (e) {
      var n;return void 0 === e && (e = Object.keys(Mr)), e.forEach(function (e) {
        var t = Nr(e);t && ((n = n || {})[e] = t);
      }), n;
    }, s.getPluginVersion = function (e) {
      var t = Nr(e);return t && t.VERSION || "";
    }, s;
  }();Fr.getPlugin = Nr, Fr.BASE_PLUGIN_NAME = Pr, Fr.registerPlugin(Pr, Fr), xr.prototype.usingPlugin = function (e) {
    return !!this[Ar] && !0 === this[Ar][e];
  }, xr.prototype.hasPlugin = function (e) {
    return !!Lr(e);
  };var Rr = function Rr(e) {
    return 0 === e.indexOf("#") ? e.slice(1) : e;
  };function Br(e, n, t) {
    var i = Br.getPlayer(e);if (i) return n && g.warn('Player "' + e + '" is already initialised. Options will not be applied.'), t && i.ready(t), i;var r = "string" == typeof e ? Y("#" + Rr(e)) : e;if (!E(r)) throw new TypeError("The element or ID supplied is not valid. (videojs)");r.ownerDocument.defaultView && r.ownerDocument.body.contains(r) || g.warn("The element supplied is not included in the DOM"), n = n || {}, Br.hooks("beforesetup").forEach(function (e) {
      var t = e(r, Re(n));b(t) && !Array.isArray(t) ? n = Re(n, t) : g.error("please return an object in beforesetup hooks");
    });var s = Be.getComponent("Player");return i = new s(r, n, t), Br.hooks("setup").forEach(function (e) {
      return e(i);
    }), i;
  }if (Br.hooks_ = {}, Br.hooks = function (e, t) {
    return Br.hooks_[e] = Br.hooks_[e] || [], t && (Br.hooks_[e] = Br.hooks_[e].concat(t)), Br.hooks_[e];
  }, Br.hook = function (e, t) {
    Br.hooks(e, t);
  }, Br.hookOnce = function (n, e) {
    Br.hooks(n, [].concat(e).map(function (t) {
      return function e() {
        return Br.removeHook(n, e), t.apply(void 0, arguments);
      };
    }));
  }, Br.removeHook = function (e, t) {
    var n = Br.hooks(e).indexOf(t);return !(n <= -1) && (Br.hooks_[e] = Br.hooks_[e].slice(), Br.hooks_[e].splice(n, 1), !0);
  }, !0 !== h.VIDEOJS_NO_DYNAMIC_STYLE && C()) {
    var Hr = Y(".vjs-styles-defaults");if (!Hr) {
      Hr = Te("vjs-styles-defaults");var Vr = Y("head");Vr && Vr.insertBefore(Hr, Vr.firstChild), ke(Hr, "\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ");
    }
  }return me(1, Br), Br.VERSION = p, Br.options = xr.prototype.options_, Br.getPlayers = function () {
    return xr.players;
  }, Br.getPlayer = function (e) {
    var t,
        n = xr.players;if ("string" == typeof e) {
      var i = Rr(e),
          r = n[i];if (r) return r;t = Y("#" + i);
    } else t = e;if (E(t)) {
      var s = t,
          o = s.player,
          a = s.playerId;if (o || n[a]) return o || n[a];
    }
  }, Br.getAllPlayers = function () {
    return Object.keys(xr.players).map(function (e) {
      return xr.players[e];
    }).filter(Boolean);
  }, Br.players = xr.players, Br.getComponent = Be.getComponent, Br.registerComponent = function (e, t) {
    xn.isTech(t) && g.warn("The " + e + " tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)"), Be.registerComponent.call(Be, e, t);
  }, Br.getTech = xn.getTech, Br.registerTech = xn.registerTech, Br.use = function (e, t) {
    jn[e] = jn[e] || [], jn[e].push(t);
  }, Object.defineProperty(Br, "middleware", { value: {}, writeable: !1, enumerable: !0 }), Object.defineProperty(Br.middleware, "TERMINATOR", { value: An, writeable: !1, enumerable: !0 }), Br.browser = ct, Br.TOUCH_ENABLED = lt, Br.extend = function (e, t) {
    void 0 === t && (t = {});var n = function n() {
      e.apply(this, arguments);
    },
        i = {};for (var r in "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? (t.constructor !== Object.prototype.constructor && (n = t.constructor), i = t) : "function" == typeof t && (n = t), function (e, t) {
      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (e.super_ = t);
    }(n, e), i) {
      i.hasOwnProperty(r) && (n.prototype[r] = i[r]);
    }return n;
  }, Br.mergeOptions = Re, Br.bind = Ce, Br.registerPlugin = Fr.registerPlugin, Br.deregisterPlugin = Fr.deregisterPlugin, Br.plugin = function (e, t) {
    return g.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead"), Fr.registerPlugin(e, t);
  }, Br.getPlugins = Fr.getPlugins, Br.getPlugin = Fr.getPlugin, Br.getPluginVersion = Fr.getPluginVersion, Br.addLanguage = function (e, t) {
    var n;return e = ("" + e).toLowerCase(), Br.options.languages = Re(Br.options.languages, ((n = {})[e] = t, n)), Br.options.languages[e];
  }, Br.log = g, Br.createLogger = y, Br.createTimeRange = Br.createTimeRanges = dt, Br.formatTime = ni, Br.setFormatTime = function (e) {
    ti = e;
  }, Br.resetFormatTime = function () {
    ti = ei;
  }, Br.parseUrl = Xt, Br.isCrossOrigin = Yt, Br.EventTarget = Se, Br.on = he, Br.one = fe, Br.off = de, Br.trigger = pe, Br.xhr = fn, Br.TextTrack = mn, Br.AudioTrack = bn, Br.VideoTrack = Tn, ["isEl", "isTextNode", "createEl", "hasClass", "addClass", "removeClass", "toggleClass", "setAttributes", "getAttributes", "emptyEl", "appendContent", "insertContent"].forEach(function (e) {
    Br[e] = function () {
      return g.warn("videojs." + e + "() is deprecated; use videojs.dom." + e + "() instead"), J[e].apply(null, arguments);
    };
  }), Br.computedStyle = i, Br.dom = J, Br.url = Qt, Br;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZGVvLmNvcmUubm92dHQubWluLmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwidmlkZW9qcyIsIndpbmRvdyIsImRvY3VtZW50IiwiaCIsImQiLCJoYXNPd25Qcm9wZXJ0eSIsImRlZmF1bHQiLCJwIiwiZiIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwicyIsInNldFByb3RvdHlwZU9mIiwibyIsIm4iLCJSZWZsZWN0IiwiY29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwiRGF0ZSIsInRvU3RyaW5nIiwiY2FsbCIsImkiLCJwdXNoIiwiYXBwbHkiLCJyIiwiRnVuY3Rpb24iLCJiaW5kIiwiYXJndW1lbnRzIiwidiIsIlJlZmVyZW5jZUVycm9yIiwic2xpY2UiLCJyYXciLCJsIiwiYSIsImxldmVscyIsIlJlZ0V4cCIsInVuc2hpZnQiLCJ0b1VwcGVyQ2FzZSIsImNvbmNhdCIsImNvbnNvbGUiLCJpbmZvIiwibG9nIiwidGVzdCIsIkFycmF5IiwiaXNBcnJheSIsImciLCJsZW5ndGgiLCJjcmVhdGVMb2dnZXIiLCJhbGwiLCJvZmYiLCJkZWJ1ZyIsIndhcm4iLCJlcnJvciIsIkRFRkFVTFQiLCJsZXZlbCIsIkVycm9yIiwiaGlzdG9yeSIsImZpbHRlciIsImNsZWFyIiwiZGlzYWJsZSIsImVuYWJsZSIsInkiLCJfIiwicmVwbGFjZSIsImIiLCJrZXlzIiwiZm9yRWFjaCIsIm0iLCJhc3NpZ24iLCJjIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInUiLCJUIiwiayIsIkMiLCJFIiwibm9kZVR5cGUiLCJTIiwicGFyZW50IiwidyIsInF1ZXJ5U2VsZWN0b3IiLCJ4IiwiY3JlYXRlRWxlbWVudCIsImdldE93blByb3BlcnR5TmFtZXMiLCJpbmRleE9mIiwic2V0QXR0cmlidXRlIiwiaiIsIlgiLCJ0ZXh0Q29udGVudCIsImlubmVyVGV4dCIsIlAiLCJmaXJzdENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJBIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJjbGFzc05hbWUiLCJNIiwiYWRkIiwidHJpbSIsIkwiLCJyZW1vdmUiLCJzcGxpdCIsImpvaW4iLCJOIiwiTyIsInJlbW92ZUF0dHJpYnV0ZSIsIkQiLCJhdHRyaWJ1dGVzIiwibmFtZSIsInZhbHVlIiwiSSIsImdldEF0dHJpYnV0ZSIsIkYiLCJSIiwiQiIsImJvZHkiLCJmb2N1cyIsIm9uc2VsZWN0c3RhcnQiLCJIIiwiViIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhcmVudE5vZGUiLCJoZWlnaHQiLCJwYXJzZUZsb2F0Iiwid2lkdGgiLCJ6IiwibGVmdCIsInRvcCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudExlZnQiLCJwYWdlWE9mZnNldCIsInNjcm9sbExlZnQiLCJjbGllbnRUb3AiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsIk1hdGgiLCJyb3VuZCIsIksiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInBhZ2VZIiwicGFnZVgiLCJjaGFuZ2VkVG91Y2hlcyIsIm1heCIsIm1pbiIsIlciLCJVIiwicmVtb3ZlQ2hpbGQiLCJxIiwibWFwIiwiY3JlYXRlVGV4dE5vZGUiLCIkIiwiRyIsImJ1dHRvbiIsImJ1dHRvbnMiLCJZIiwiUSIsIkoiLCJmcmVlemUiLCJpc1JlYWwiLCJpc0VsIiwiaXNJbkZyYW1lIiwiY3JlYXRlRWwiLCJwcmVwZW5kVG8iLCJoYXNDbGFzcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInNldEF0dHJpYnV0ZXMiLCJnZXRBdHRyaWJ1dGVzIiwiYmxvY2tUZXh0U2VsZWN0aW9uIiwidW5ibG9ja1RleHRTZWxlY3Rpb24iLCJmaW5kUG9zaXRpb24iLCJnZXRQb2ludGVyUG9zaXRpb24iLCJpc1RleHROb2RlIiwiZW1wdHlFbCIsIm5vcm1hbGl6ZUNvbnRlbnQiLCJhcHBlbmRDb250ZW50IiwiaW5zZXJ0Q29udGVudCIsImlzU2luZ2xlTGVmdENsaWNrIiwiJCQiLCJaIiwiZWUiLCJ0ZSIsIm5lIiwiZ2V0VGltZSIsImllIiwicmUiLCJzZSIsIm9lIiwiaGFuZGxlcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hlciIsImRldGFjaEV2ZW50IiwiZGlzYWJsZWQiLCJhZSIsImxlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsInJldHVyblZhbHVlIiwiZGVmYXVsdFByZXZlbnRlZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwiY2xpZW50WCIsImNsaWVudFkiLCJ3aGljaCIsImNoYXJDb2RlIiwia2V5Q29kZSIsImNlIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJhZGRFdmVudExpc3RlbmVyIiwidWUiLCJoZSIsImd1aWQiLCJ0eXBlIiwicGFzc2l2ZSIsImF0dGFjaEV2ZW50IiwiZGUiLCJzcGxpY2UiLCJwZSIsIm93bmVyRG9jdW1lbnQiLCJidWJibGVzIiwiZmUiLCJ2ZSIsImdlIiwiZml4RXZlbnQiLCJvbiIsInRyaWdnZXIiLCJvbmUiLCJ5ZSIsIl9lIiwib3B0aW9ucyIsImF1dG9TZXR1cCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibWUiLCJwbGF5ZXIiLCJzZXRUaW1lb3V0IiwicmVhZHlTdGF0ZSIsImJlIiwiVGUiLCJrZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiQ2UiLCJFZSIsIm5vdyIsIlNlIiwiYWxsb3dlZEV2ZW50c18iLCJkaXNwYXRjaEV2ZW50IiwicXVldWVUcmlnZ2VyIiwiTWFwIiwic2V0IiwiZGVsZXRlIiwiY2xlYXJUaW1lb3V0Iiwic2l6ZSIsIndlIiwiZXZlbnRCdXNFbF8iLCJldmVyeSIsInhlIiwiamUiLCJub2RlTmFtZSIsIlBlIiwiQWUiLCJNZSIsInNoaWZ0IiwiaXNUYXJnZXRpbmdTZWxmIiwibGlzdGVuZXIiLCJMZSIsIk5lIiwiT2UiLCJldmVudEJ1c0tleSIsImV2ZW50ZWRDYWxsYmFja3MiLCJEZSIsInN0YXRlIiwic2V0U3RhdGUiLCJmcm9tIiwidG8iLCJjaGFuZ2VzIiwiSWUiLCJoYW5kbGVTdGF0ZUNoYW5nZWQiLCJGZSIsImNoYXJBdCIsIlJlIiwiQmUiLCJwbGF5IiwicGxheWVyXyIsInBhcmVudENvbXBvbmVudF8iLCJvcHRpb25zXyIsImlkXyIsImlkIiwiZWwiLCJuYW1lXyIsImVsXyIsImV2ZW50ZWQiLCJkZWZhdWx0U3RhdGUiLCJjaGlsZHJlbl8iLCJjaGlsZEluZGV4XyIsImNoaWxkTmFtZUluZGV4XyIsImluaXRDaGlsZHJlbiIsInJlYWR5IiwicmVwb3J0VG91Y2hBY3Rpdml0eSIsImVuYWJsZVRvdWNoQWN0aXZpdHkiLCJkaXNwb3NlIiwibG9jYWxpemUiLCJsYW5ndWFnZSIsImxhbmd1YWdlcyIsImNvbnRlbnRFbCIsImNvbnRlbnRFbF8iLCJjaGlsZHJlbiIsImdldENoaWxkQnlJZCIsImdldENoaWxkIiwiYWRkQ2hpbGQiLCJjb21wb25lbnRDbGFzcyIsImdldENvbXBvbmVudCIsInNvbWUiLCJvcHRzIiwiaXNUZWNoIiwicGxheWVyT3B0aW9ucyIsImJ1aWxkQ1NTQ2xhc3MiLCJpc1JlYWR5XyIsInJlYWR5UXVldWVfIiwidHJpZ2dlclJlYWR5Iiwic2hvdyIsImhpZGUiLCJsb2NrU2hvd2luZyIsInVubG9ja1Nob3dpbmciLCJkaW1lbnNpb24iLCJkaW1lbnNpb25zIiwic3R5bGUiLCJwYXJzZUludCIsImN1cnJlbnREaW1lbnNpb24iLCJnZXRQcm9wZXJ0eVZhbHVlIiwiY3VycmVudERpbWVuc2lvbnMiLCJjdXJyZW50V2lkdGgiLCJjdXJyZW50SGVpZ2h0IiwiYmx1ciIsImhhbmRsZUtleVByZXNzIiwiZW1pdFRhcEV2ZW50cyIsInRvdWNoZXMiLCJzcXJ0IiwicmVwb3J0VXNlckFjdGl2aXR5IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic3VwcG9ydHNSYWZfIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZWdpc3RlckNvbXBvbmVudCIsImlzUHJvdG90eXBlT2YiLCJjb21wb25lbnRzXyIsInBsYXllcnMiLCJCb29sZWFuIiwiSGUiLCJWZSIsInplIiwiS2UiLCJXZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIlVlIiwiZXhlYyIsInFlIiwicG9wIiwiWGUiLCIkZSIsIkdlIiwiWWUiLCJRZSIsIm1hdGNoIiwiSmUiLCJaZSIsImV0IiwidHQiLCJudCIsIml0IiwicnQiLCJzdCIsIm90IiwiYXQiLCJsdCIsIm1heFRvdWNoUG9pbnRzIiwiRG9jdW1lbnRUb3VjaCIsImN0IiwiSVNfSVBBRCIsIklTX0lQSE9ORSIsIklTX0lQT0QiLCJJU19JT1MiLCJJT1NfVkVSU0lPTiIsIklTX0FORFJPSUQiLCJBTkRST0lEX1ZFUlNJT04iLCJJU19OQVRJVkVfQU5EUk9JRCIsIklTX0ZJUkVGT1giLCJJU19FREdFIiwiSVNfQ0hST01FIiwiQ0hST01FX1ZFUlNJT04iLCJJRV9WRVJTSU9OIiwiSVNfU0FGQVJJIiwiSVNfQU5ZX1NBRkFSSSIsIlRPVUNIX0VOQUJMRUQiLCJ1dCIsImh0Iiwic3RhcnQiLCJlbmQiLCJkdCIsInB0IiwiZnQiLCJ2dCIsImd0IiwieXQiLCJfdCIsIm10IiwiYnQiLCJUdCIsImNvZGUiLCJtZXNzYWdlIiwiZGVmYXVsdE1lc3NhZ2VzIiwic3RhdHVzIiwiZXJyb3JUeXBlcyIsImt0IiwiQ3QiLCJKU09OIiwicGFyc2UiLCJFdCIsInRoZW4iLCJTdCIsInd0IiwicmVkdWNlIiwiY3VlcyIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJ0ZXh0IiwieHQiLCJ0cmFjayIsInNyYyIsInRleHRUcmFja3MiLCJqdCIsImFkZFJlbW90ZVRleHRUcmFjayIsImFkZEN1ZSIsIlB0IiwiQXQiLCJTdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImNoYXJDb2RlQXQiLCJpc0V2ZW50S2V5IiwiY29kZXMiLCJiYWNrc3BhY2UiLCJ0YWIiLCJlbnRlciIsImN0cmwiLCJhbHQiLCJlc2MiLCJzcGFjZSIsImhvbWUiLCJ1cCIsInJpZ2h0IiwiZG93biIsImluc2VydCIsImNvbW1hbmQiLCJhbGlhc2VzIiwid2luZG93cyIsImN0bCIsImNvbnRyb2wiLCJvcHRpb24iLCJwYXVzZSIsImJyZWFrIiwiY2FwcyIsInJldHVybiIsImVzY2FwZSIsInNwYyIsInNwYWNlYmFyIiwicGd1cCIsInBnZG4iLCJpbnMiLCJkZWwiLCJjbWQiLCJmcm9tQ2hhckNvZGUiLCJuYW1lcyIsInRpdGxlIiwiTXQiLCJMdCIsIm9wZW5lZF8iLCJoYXNCZWVuT3BlbmVkXyIsImhhc0JlZW5GaWxsZWRfIiwiY2xvc2VhYmxlIiwidW5jbG9zZWFibGUiLCJjb250ZW50Iiwicm9sZSIsImRlc2NFbF8iLCJkZXNjcmlwdGlvbiIsInRhYkluZGV4IiwibGFiZWwiLCJwcmV2aW91c2x5QWN0aXZlRWxfIiwiY2xvc2UiLCJvcGVuIiwiZmlsbEFsd2F5cyIsImZpbGwiLCJ3YXNQbGF5aW5nXyIsInBhdXNlZCIsInBhdXNlT25PcGVuIiwiaGFkQ29udHJvbHNfIiwiY29udHJvbHMiLCJjb25kaXRpb25hbEZvY3VzXyIsIm9wZW5lZCIsImNvbmRpdGlvbmFsQmx1cl8iLCJ0ZW1wb3JhcnkiLCJjbG9zZWFibGVfIiwiY29udHJvbFRleHQiLCJmaWxsV2l0aCIsIm5leHRTaWJsaW5nIiwiZW1wdHkiLCJjb250ZW50XyIsImFjdGl2ZUVsZW1lbnQiLCJoYW5kbGVLZXlEb3duIiwiZm9jdXNhYmxlRWxzXyIsInNoaWZ0S2V5IiwicXVlcnlTZWxlY3RvckFsbCIsIkhUTUxBbmNob3JFbGVtZW50IiwiSFRNTEFyZWFFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwiSFRNTElucHV0RWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiSFRNTFRleHRBcmVhRWxlbWVudCIsIkhUTUxCdXR0b25FbGVtZW50IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJIVE1MT2JqZWN0RWxlbWVudCIsIkhUTUxFbWJlZEVsZW1lbnQiLCJOdCIsInRyYWNrc18iLCJhZGRUcmFjayIsInJlbW92ZVRyYWNrIiwiZ2V0VHJhY2tCeUlkIiwiT3QiLCJjaGFuZ2UiLCJhZGR0cmFjayIsInJlbW92ZXRyYWNrIiwiRHQiLCJlbmFibGVkIiwiSXQiLCJjaGFuZ2luZ18iLCJlbmFibGVkQ2hhbmdlXyIsIkZ0Iiwic2VsZWN0ZWQiLCJSdCIsInNlbGVjdGVkQ2hhbmdlXyIsIkJ0IiwicXVldWVDaGFuZ2VfIiwidHJpZ2dlclNlbGVjdGVkbGFuZ3VhZ2VjaGFuZ2UiLCJ0cmlnZ2VyU2VsZWN0ZWRsYW5ndWFnZWNoYW5nZV8iLCJraW5kIiwic2VsZWN0ZWRsYW5ndWFnZWNoYW5nZV8iLCJIdCIsInRyYWNrRWxlbWVudHNfIiwiYWRkVHJhY2tFbGVtZW50XyIsImdldFRyYWNrRWxlbWVudEJ5VHJhY2tfIiwicmVtb3ZlVHJhY2tFbGVtZW50XyIsIlZ0Iiwic2V0Q3Vlc18iLCJsZW5ndGhfIiwiY3Vlc18iLCJnZXRDdWVCeUlkIiwienQiLCJhbHRlcm5hdGl2ZSIsImNhcHRpb25zIiwibWFpbiIsInNpZ24iLCJzdWJ0aXRsZXMiLCJjb21tZW50YXJ5IiwiS3QiLCJkZXNjcmlwdGlvbnMiLCJ0cmFuc2xhdGlvbiIsIld0IiwiY2hhcHRlcnMiLCJtZXRhZGF0YSIsIlV0IiwiaGlkZGVuIiwic2hvd2luZyIsInF0IiwiWHQiLCJocmVmIiwiaG9zdCIsInByb3RvY29sIiwiaW5uZXJIVE1MIiwibG9jYXRpb24iLCIkdCIsIkd0IiwiWXQiLCJRdCIsInBhcnNlVXJsIiwiZ2V0QWJzb2x1dGVVUkwiLCJnZXRGaWxlRXh0ZW5zaW9uIiwiaXNDcm9zc09yaWdpbiIsIkp0IiwiWnQiLCJhbGVydCIsImNvbmZpcm0iLCJwcm9tcHQiLCJlbiIsInRuIiwibm4iLCJybiIsInNuIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJhbiIsImxuIiwiY24iLCJ1biIsIlR5cGVFcnJvciIsImhuIiwiZG4iLCJwbiIsImZuIiwiZ24iLCJ2biIsInVyaSIsImNhbGxiYWNrIiwieW4iLCJzdGF0dXNDb2RlIiwidXNlWERSIiwicmVzcG9uc2UiLCJyZXNwb25zZVRleHQiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVhNTCIsIm1ldGhvZCIsImhlYWRlcnMiLCJ1cmwiLCJyYXdSZXF1ZXN0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwieGhyIiwiY29ycyIsIlhEb21haW5SZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJkYXRhIiwic3luYyIsImpzb24iLCJhY2NlcHQiLCJBY2NlcHQiLCJzdHJpbmdpZnkiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJvbmxvYWQiLCJvbmVycm9yIiwib25wcm9ncmVzcyIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwid2l0aENyZWRlbnRpYWxzIiwidGltZW91dCIsImFib3J0Iiwic2V0UmVxdWVzdEhlYWRlciIsImJlZm9yZVNlbmQiLCJzZW5kIiwiX24iLCJXZWJWVFQiLCJQYXJzZXIiLCJ2dHRqcyIsIlN0cmluZ0RlY29kZXIiLCJvbmN1ZSIsIm9ucGFyc2luZ2Vycm9yIiwib25mbHVzaCIsImdyb3VwQ29sbGFwc2VkIiwiZ3JvdXBFbmQiLCJmbHVzaCIsIm1uIiwidGVjaCIsInNyY2xhbmciLCJtb2RlIiwidGVjaF8iLCJhY3RpdmVDdWVzXyIsImFjdGl2ZUN1ZXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwibG9hZGVkXyIsImN1cnJlbnRUaW1lIiwiVlRUQ3VlIiwib3JpZ2luYWxDdWVfIiwicmVtb3ZlQ3VlIiwiY3VlY2hhbmdlIiwiYm4iLCJUbiIsImtuIiwibG9hZCIsIk5PTkUiLCJMT0FESU5HIiwiTE9BREVEIiwiRVJST1IiLCJDbiIsImF1ZGlvIiwiTGlzdENsYXNzIiwiVHJhY2tDbGFzcyIsImNhcGl0YWxOYW1lIiwidmlkZW8iLCJnZXR0ZXJOYW1lIiwicHJpdmF0ZU5hbWUiLCJFbiIsInJlbW90ZVRleHQiLCJyZW1vdGVUZXh0RWwiLCJTbiIsInduIiwieG4iLCJoYXNTdGFydGVkXyIsImZlYXR1cmVzUHJvZ3Jlc3NFdmVudHMiLCJtYW51YWxQcm9ncmVzc09uIiwiZmVhdHVyZXNUaW1ldXBkYXRlRXZlbnRzIiwibWFudWFsVGltZVVwZGF0ZXNPbiIsIm5hdGl2ZUNhcHRpb25zIiwibmF0aXZlVGV4dFRyYWNrcyIsImZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcyIsImVtdWxhdGVUZXh0VHJhY2tzIiwiYXV0b1JlbW90ZVRleHRUcmFja3NfIiwiaW5pdFRyYWNrTGlzdGVuZXJzIiwibmF0aXZlQ29udHJvbHNGb3JUb3VjaCIsInRyaWdnZXJTb3VyY2VzZXQiLCJvbkR1cmF0aW9uQ2hhbmdlIiwibWFudWFsUHJvZ3Jlc3MiLCJ0cmFja1Byb2dyZXNzIiwibWFudWFsUHJvZ3Jlc3NPZmYiLCJzdG9wVHJhY2tpbmdQcm9ncmVzcyIsInByb2dyZXNzSW50ZXJ2YWwiLCJidWZmZXJlZFBlcmNlbnQiLCJidWZmZXJlZFBlcmNlbnRfIiwiZHVyYXRpb25fIiwiZHVyYXRpb24iLCJidWZmZXJlZCIsIm1hbnVhbFRpbWVVcGRhdGVzIiwidHJhY2tDdXJyZW50VGltZSIsInN0b3BUcmFja2luZ0N1cnJlbnRUaW1lIiwibWFudWFsVGltZVVwZGF0ZXNPZmYiLCJjdXJyZW50VGltZUludGVydmFsIiwibWFudWFsbHlUcmlnZ2VyZWQiLCJjbGVhclRyYWNrcyIsInJlbW92ZVJlbW90ZVRleHRUcmFjayIsImNsZWFudXBBdXRvVGV4dFRyYWNrcyIsInJlc2V0IiwiZXJyb3JfIiwicGxheWVkIiwic2V0Q3VycmVudFRpbWUiLCJhZGRXZWJWdHRTY3JpcHRfIiwicmVtb3RlVGV4dFRyYWNrcyIsImFkZFRleHRUcmFjayIsImNyZWF0ZVJlbW90ZVRleHRUcmFjayIsInJlbW90ZVRleHRUcmFja0VscyIsImdldFZpZGVvUGxheWJhY2tRdWFsaXR5Iiwic2V0UG9zdGVyIiwicGxheXNpbmxpbmUiLCJzZXRQbGF5c2lubGluZSIsIm92ZXJyaWRlTmF0aXZlQXVkaW9UcmFja3MiLCJvdmVycmlkZU5hdGl2ZVZpZGVvVHJhY2tzIiwiY2FuUGxheVR5cGUiLCJjYW5QbGF5U291cmNlIiwicmVnaXN0ZXJUZWNoIiwidGVjaHNfIiwiZGVmYXVsdFRlY2hPcmRlcl8iLCJnZXRUZWNoIiwiZmVhdHVyZXNWb2x1bWVDb250cm9sIiwiZmVhdHVyZXNNdXRlQ29udHJvbCIsImZlYXR1cmVzRnVsbHNjcmVlblJlc2l6ZSIsImZlYXR1cmVzUGxheWJhY2tSYXRlIiwiZmVhdHVyZXNTb3VyY2VzZXQiLCJ3aXRoU291cmNlSGFuZGxlcnMiLCJyZWdpc3RlclNvdXJjZUhhbmRsZXIiLCJzb3VyY2VIYW5kbGVycyIsInNlbGVjdFNvdXJjZUhhbmRsZXIiLCJjYW5IYW5kbGVTb3VyY2UiLCJzb3VyY2VIYW5kbGVyXyIsInNldFNvdXJjZSIsIm5hdGl2ZVNvdXJjZUhhbmRsZXIiLCJkaXNwb3NlU291cmNlSGFuZGxlciIsImN1cnJlbnRTb3VyY2VfIiwiaGFuZGxlU291cmNlIiwiam4iLCJQbiIsIkFuIiwiTW4iLCJGbiIsIkxuIiwiSW4iLCJObiIsInNlZWthYmxlIiwiT24iLCJEbiIsIlJuIiwib3B1cyIsIm9ndiIsIm1wNCIsIm1vdiIsIm00diIsIm1rdiIsIm1wMyIsImFhYyIsIm9nYSIsIm0zdTgiLCJqcGciLCJqcGVnIiwiZ2lmIiwicG5nIiwic3ZnIiwid2VicCIsIkJuIiwiSG4iLCJWbiIsInNvdXJjZXMiLCJ0ZWNoT3JkZXIiLCJpc1N1cHBvcnRlZCIsImxvYWRUZWNoXyIsInpuIiwidGFiSW5kZXhfIiwiY3JlYXRlQ29udHJvbFRleHRFbCIsImNvbnRyb2xUZXh0RWxfIiwiY29udHJvbFRleHRfIiwibm9uSWNvbkNvbnRyb2wiLCJlbmFibGVkXyIsImhhbmRsZUNsaWNrIiwiaGFuZGxlRm9jdXMiLCJoYW5kbGVCbHVyIiwiS24iLCJ1cGRhdGUiLCJwb3N0ZXIiLCJzZXRTcmMiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJXbiIsIlVuIiwibW9ub3NwYWNlIiwic2Fuc1NlcmlmIiwic2VyaWYiLCJtb25vc3BhY2VTYW5zU2VyaWYiLCJtb25vc3BhY2VTZXJpZiIsInByb3BvcnRpb25hbFNhbnNTZXJpZiIsInByb3BvcnRpb25hbFNlcmlmIiwiY2FzdWFsIiwic2NyaXB0Iiwic21hbGxjYXBzIiwicW4iLCJYbiIsIiRuIiwidXBkYXRlRGlzcGxheSIsInRvZ2dsZURpc3BsYXkiLCJwcmVzZWxlY3RUcmFjayIsInRyYWNrcyIsImNhY2hlXyIsInNlbGVjdGVkTGFuZ3VhZ2UiLCJjbGVhckRpc3BsYXkiLCJwcm9jZXNzQ3VlcyIsInVwZGF0ZUZvclRyYWNrIiwidGV4dFRyYWNrU2V0dGluZ3MiLCJnZXRWYWx1ZXMiLCJkaXNwbGF5U3RhdGUiLCJjb2xvciIsInRleHRPcGFjaXR5IiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZE9wYWNpdHkiLCJ3aW5kb3dDb2xvciIsIndpbmRvd09wYWNpdHkiLCJlZGdlU3R5bGUiLCJ0ZXh0U2hhZG93IiwiZm9udFBlcmNlbnQiLCJmb250U2l6ZSIsImJvdHRvbSIsImZvbnRGYW1pbHkiLCJmb250VmFyaWFudCIsIkduIiwiaXNBdWRpbyIsImRpciIsIlluIiwiUW4iLCJtb3VzZXVzZWRfIiwiaGFuZGxlTW91c2VEb3duIiwiSm4iLCJabiIsInJlcGxheSIsImhhbmRsZVBsYXkiLCJoYW5kbGVQYXVzZSIsImhhbmRsZUVuZGVkIiwiaGFuZGxlU2Vla2VkIiwiZWkiLCJmbG9vciIsImlzTmFOIiwidGkiLCJuaSIsImlpIiwidGhyb3R0bGVkVXBkYXRlQ29udGVudCIsInVwZGF0ZUNvbnRlbnQiLCJsYWJlbFRleHRfIiwidXBkYXRlVGV4dE5vZGVfIiwidGV4dE5vZGVfIiwiZm9ybWF0dGVkVGltZV8iLCJmb3JtYXRUaW1lXyIsInVwZGF0ZUZvcm1hdHRlZFRpbWVfIiwicmkiLCJzY3J1YmJpbmciLCJnZXRDYWNoZSIsInNpIiwib2kiLCJhaSIsInJlbWFpbmluZ1RpbWVEaXNwbGF5IiwicmVtYWluaW5nVGltZSIsImxpIiwidXBkYXRlU2hvd2luZyIsImNpIiwidXBkYXRlTGl2ZUVkZ2VTdGF0dXMiLCJsaXZlVHJhY2tlciIsInRleHRFbF8iLCJhdExpdmVFZGdlIiwic2Vla1RvTGl2ZUVkZ2UiLCJ1aSIsImJhciIsImJhck5hbWUiLCJ2ZXJ0aWNhbCIsInBsYXllckV2ZW50IiwiaGFuZGxlTW91c2VNb3ZlIiwiaGFuZGxlTW91c2VVcCIsImdldFBlcmNlbnQiLCJ0b0ZpeGVkIiwiY2FsY3VsYXRlRGlzdGFuY2UiLCJzdGVwQmFjayIsInN0ZXBGb3J3YXJkIiwidmVydGljYWxfIiwiaGkiLCJwYXJ0RWxzXyIsImlzTGl2ZSIsInNlZWthYmxlRW5kIiwiYnVmZmVyZWRFbmQiLCJkaSIsInVwZGF0ZVRpbWUiLCJyYWZJZF8iLCJsaXZlV2luZG93IiwicGkiLCJmaSIsInZpIiwic2V0RXZlbnRIYW5kbGVyc18iLCJ1cGRhdGVJbnRlcnZhbCIsImVuYWJsZUludGVydmFsXyIsImRpc2FibGVJbnRlcnZhbF8iLCJ0b2dnbGVWaXNpYmlsaXR5XyIsInVwZGF0ZV8iLCJsaXZlQ3VycmVudFRpbWUiLCJvZmZzZXRQYXJlbnQiLCJnZXRDdXJyZW50VGltZV8iLCJzZWVrYWJsZVN0YXJ0IiwidmlkZW9XYXNQbGF5aW5nIiwiaGFuZGxlQWN0aW9uIiwiZ2kiLCJ0aHJvdHRsZWRIYW5kbGVNb3VzZVNlZWsiLCJoYW5kbGVNb3VzZVNlZWsiLCJ5aSIsImhhbmRsZUZ1bGxzY3JlZW5DaGFuZ2UiLCJmdWxsc2NyZWVuRW5hYmxlZCIsImlzRnVsbHNjcmVlbiIsImV4aXRGdWxsc2NyZWVuIiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJfaSIsIm1pIiwidXBkYXRlTGFzdFZvbHVtZV8iLCJ1cGRhdGVBUklBQXR0cmlidXRlcyIsImNoZWNrTXV0ZWQiLCJ2b2x1bWUiLCJtdXRlZCIsInZvbHVtZUFzUGVyY2VudGFnZV8iLCJsYXN0Vm9sdW1lXyIsImJpIiwidm9sdW1lQmFyIiwidGhyb3R0bGVkSGFuZGxlTW91c2VNb3ZlIiwiVGkiLCJ1cGRhdGVJY29uXyIsInVwZGF0ZUNvbnRyb2xUZXh0XyIsImtpIiwiaW5saW5lIiwidm9sdW1lQ29udHJvbCIsInZvbHVtZVBhbmVsU3RhdGVfIiwic2xpZGVyQWN0aXZlXyIsInNsaWRlckluYWN0aXZlXyIsIm11dGVUb2dnbGUiLCJDaSIsIm1lbnVCdXR0b25fIiwibWVudUJ1dHRvbiIsImZvY3VzZWRDaGlsZF8iLCJib3VuZEhhbmRsZUJsdXJfIiwiYm91bmRIYW5kbGVUYXBDbGlja18iLCJoYW5kbGVUYXBDbGljayIsImFkZEV2ZW50TGlzdGVuZXJGb3JJdGVtIiwicmVtb3ZlRXZlbnRMaXN0ZW5lckZvckl0ZW0iLCJhZGRJdGVtIiwiY29udGVudEVsVHlwZSIsImFwcGVuZCIsImJ1dHRvblByZXNzZWRfIiwidW5wcmVzc0J1dHRvbiIsIkVpIiwibWVudSIsImhhbmRsZVN1Ym1lbnVLZXlQcmVzcyIsImNyZWF0ZU1lbnUiLCJpdGVtcyIsImhpZGVUaHJlc2hvbGRfIiwiY3JlYXRlSXRlbXMiLCJidWlsZFdyYXBwZXJDU1NDbGFzcyIsInByZXNzQnV0dG9uIiwiU2kiLCJ3aSIsInhpIiwic2VsZWN0YWJsZSIsImlzU2VsZWN0ZWRfIiwibXVsdGlTZWxlY3RhYmxlIiwiamkiLCJoYW5kbGVUcmFja3NDaGFuZ2UiLCJoYW5kbGVTZWxlY3RlZExhbmd1YWdlQ2hhbmdlIiwib25jaGFuZ2UiLCJFdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50Iiwia2luZHMiLCJQaSIsIkFpIiwibGFiZWxfIiwia2luZHNfIiwia2luZF8iLCJNaSIsImN1ZSIsIkxpIiwidHJhY2tfIiwic2V0VHJhY2siLCJmaW5kQ2hhcHRlcnNUcmFjayIsInVwZGF0ZUhhbmRsZXJfIiwiZ2V0TWVudUNhcHRpb24iLCJOaSIsIk9pIiwiRGkiLCJJaSIsIkZpIiwiUmkiLCJsYW5ndWFnZV8iLCJCaSIsImF1ZGlvVHJhY2tzIiwiSGkiLCJWaSIsInJhdGUiLCJwbGF5YmFja1JhdGUiLCJ6aSIsInVwZGF0ZVZpc2liaWxpdHkiLCJ1cGRhdGVMYWJlbCIsImxhYmVsRWxfIiwicGxheWJhY2tSYXRlcyIsInBsYXliYWNrUmF0ZVN1cHBvcnRlZCIsIktpIiwiV2kiLCJVaSIsInFpIiwiWGkiLCIkaSIsIkdpIiwiWWkiLCJRaSIsIkppIiwiWmkiLCJlciIsInRyIiwibnIiLCJpciIsInJyIiwic3IiLCJzZWxlY3RvciIsInBhcnNlciIsIk51bWJlciIsIm9yIiwiYXIiLCJlbmREaWFsb2ciLCJzZXREZWZhdWx0cyIsInBlcnNpc3RUZXh0VHJhY2tTZXR0aW5ncyIsInNhdmVTZXR0aW5ncyIsInJlc3RvcmVTZXR0aW5ncyIsImNyZWF0ZUVsU2VsZWN0XyIsImNyZWF0ZUVsRmdDb2xvcl8iLCJjcmVhdGVFbEJnQ29sb3JfIiwiY3JlYXRlRWxXaW5Db2xvcl8iLCJjcmVhdGVFbENvbG9yc18iLCJjcmVhdGVFbEZvbnRfIiwiY3JlYXRlRWxDb250cm9sc18iLCJzZWxlY3RlZEluZGV4Iiwic2V0VmFsdWVzIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiY29udHJvbEJhciIsInN1YnNDYXBzQnV0dG9uIiwiY2FwdGlvbnNCdXR0b24iLCJsciIsIlJlc2l6ZU9ic2VydmVyIiwibG9hZExpc3RlbmVyXyIsInJlc2l6ZU9ic2VydmVyXyIsImRlYm91bmNlZEhhbmRsZXJfIiwiY2FuY2VsIiwicmVzaXplSGFuZGxlciIsIm9ic2VydmUiLCJjb250ZW50V2luZG93IiwidW5sb2FkTGlzdGVuZXJfIiwidW5vYnNlcnZlIiwiZGlzY29ubmVjdCIsInJlc2l6ZU9ic2VydmVyIiwiY3IiLCJyZXNldF8iLCJoYW5kbGVEdXJhdGlvbmNoYW5nZSIsImhhbmRsZVZpc2liaWxpdHlDaGFuZ2UiLCJzdG9wVHJhY2tpbmciLCJzdGFydFRyYWNraW5nIiwiaXNCZWhpbmRfIiwidGltZXVwZGF0ZVNlZW5fIiwic2Vla2FibGVJbmNyZW1lbnRfIiwidHJhY2tMaXZlXyIsInBhc3RTZWVrRW5kXyIsImxhc3RTZWVrRW5kXyIsImFicyIsInBhc3RTZWVrRW5kIiwiYmVoaW5kTGl2ZUVkZ2UiLCJiZWhpbmRMaXZlRWRnZV8iLCJpc1RyYWNraW5nIiwidHJhY2tpbmdJbnRlcnZhbF8iLCJoYW5kbGVUaW1ldXBkYXRlIiwic29ydCIsInVyIiwiaHIiLCJjbG9uZU5vZGUiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hpbGROb2RlcyIsIkVsZW1lbnQiLCJkciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJwciIsInJlc2V0U291cmNlV2F0Y2hfIiwiSFRNTE1lZGlhRWxlbWVudCIsImZyIiwidnIiLCJyZXNldFNvdXJjZXNldF8iLCJjdXJyZW50U3JjIiwiZ3IiLCJ5ciIsInNvdXJjZSIsInRhZyIsImluaXROZXR3b3JrU3RhdGVfIiwiaGFuZGxlTGF0ZUluaXRfIiwiZW5hYmxlU291cmNlc2V0Iiwic2V0dXBTb3VyY2VzZXRIYW5kbGluZ18iLCJoYXNDaGlsZE5vZGVzIiwicHJveHlOYXRpdmVUcmFja3NfIiwicmVzdG9yZU1ldGFkYXRhVHJhY2tzSW5JT1NOYXRpdmVQbGF5ZXJfIiwic2V0Q29udHJvbHMiLCJwcm94eVdlYmtpdEZ1bGxzY3JlZW5fIiwiZGlzcG9zZU1lZGlhRWxlbWVudCIsInN0b3JlZE1vZGUiLCJvdmVycmlkZU5hdGl2ZV8iLCJwcm94eU5hdGl2ZVRyYWNrc0ZvclR5cGVfIiwiY3VycmVudFRhcmdldCIsInBsYXllckVsSW5nZXN0IiwibW92aW5nTWVkaWFFbGVtZW50SW5ET00iLCJ0ZWNoSWQiLCJjbGFzcyIsInBsYXllcklkIiwicHJlbG9hZCIsIm5ldHdvcmtTdGF0ZSIsIk5hTiIsIndlYmtpdFByZXNlbnRhdGlvbk1vZGUiLCJzdXBwb3J0c0Z1bGxTY3JlZW4iLCJ3ZWJraXRFbnRlckZ1bGxTY3JlZW4iLCJlbnRlckZ1bGxTY3JlZW4iLCJIQVZFX01FVEFEQVRBIiwiZXhpdEZ1bGxTY3JlZW4iLCJ3ZWJraXRFeGl0RnVsbFNjcmVlbiIsInJlc2V0TWVkaWFFbGVtZW50Iiwid2Via2l0RHJvcHBlZEZyYW1lQ291bnQiLCJ3ZWJraXREZWNvZGVkRnJhbWVDb3VudCIsImRyb3BwZWRWaWRlb0ZyYW1lcyIsInRvdGFsVmlkZW9GcmFtZXMiLCJwZXJmb3JtYW5jZSIsImNyZWF0aW9uVGltZSIsInRpbWluZyIsIm5hdmlnYXRpb25TdGFydCIsIlRFU1RfVklEIiwiX3IiLCJjYW5Db250cm9sVm9sdW1lIiwiY2FuTXV0ZVZvbHVtZSIsImNhbkNvbnRyb2xQbGF5YmFja1JhdGUiLCJjYW5PdmVycmlkZUF0dHJpYnV0ZXMiLCJzdXBwb3J0c05hdGl2ZVRleHRUcmFja3MiLCJzdXBwb3J0c05hdGl2ZVZpZGVvVHJhY2tzIiwidmlkZW9UcmFja3MiLCJzdXBwb3J0c05hdGl2ZUF1ZGlvVHJhY2tzIiwiRXZlbnRzIiwiZmVhdHVyZXNOYXRpdmVWaWRlb1RyYWNrcyIsImZlYXR1cmVzTmF0aXZlQXVkaW9UcmFja3MiLCJtciIsImJyIiwiVHIiLCJwYXRjaENhblBsYXlUeXBlIiwidW5wYXRjaENhblBsYXlUeXBlIiwia3IiLCJDciIsImNhbnBsYXkiLCJjYW5wbGF5dGhyb3VnaCIsInBsYXlpbmciLCJzZWVrZWQiLCJFciIsIlNyIiwic3Vic3RyaW5nIiwid3IiLCJ0aW55IiwieHNtYWxsIiwic21hbGwiLCJtZWRpdW0iLCJsYXJnZSIsInhsYXJnZSIsImh1Z2UiLCJ4ciIsImdldFRhZ1NldHRpbmdzIiwiY2xvc2VzdCIsImJvdW5kRG9jdW1lbnRGdWxsc2NyZWVuQ2hhbmdlXyIsImRvY3VtZW50RnVsbHNjcmVlbkNoYW5nZV8iLCJib3VuZEZ1bGxXaW5kb3dPbkVzY0tleV8iLCJmdWxsV2luZG93T25Fc2NLZXkiLCJib3VuZEhhbmRsZUtleVByZXNzXyIsImlzUG9zdGVyRnJvbVRlY2hfIiwicXVldWVkQ2FsbGJhY2tzXyIsInVzZXJBY3RpdmVfIiwidGFnQXR0cmlidXRlcyIsImxhbmd1YWdlc18iLCJyZXNldENhY2hlXyIsInBvc3Rlcl8iLCJjb250cm9sc18iLCJjaGFuZ2luZ1NyY18iLCJwbGF5Q2FsbGJhY2tzXyIsInBsYXlUZXJtaW5hdGVkUXVldWVfIiwiYXV0b3BsYXkiLCJwbHVnaW5zIiwic2NydWJiaW5nXyIsImZsdWlkXyIsInVwZGF0ZVN0eWxlRWxfIiwibWlkZGxld2FyZV8iLCJmbGV4Tm90U3VwcG9ydGVkXyIsInVzZXJBY3RpdmUiLCJsaXN0ZW5Gb3JVc2VyQWN0aXZpdHlfIiwiaGFuZGxlU3RhZ2VDbGlja18iLCJicmVha3BvaW50cyIsInJlc3BvbnNpdmUiLCJmdWxsc2NyZWVuY2hhbmdlIiwic3R5bGVFbF8iLCJwbGF5ZXJFbEluZ2VzdF8iLCJ0YWdOYW1lIiwidGFiaW5kZXgiLCJWSURFT0pTX05PX0RZTkFNSUNfU1RZTEUiLCJmaWxsXyIsImZsdWlkIiwiYXNwZWN0UmF0aW8iLCJpdGVtIiwiYXNwZWN0UmF0aW9fIiwidmlkZW9XaWR0aCIsInZpZGVvSGVpZ2h0Iiwid2lkdGhfIiwiaGVpZ2h0XyIsInVubG9hZFRlY2hfIiwidGVjaE5hbWVfIiwibG9vcCIsImNhbk92ZXJyaWRlUG9zdGVyIiwidGVjaENhbk92ZXJyaWRlUG9zdGVyIiwiaGFuZGxlVGVjaFJlYWR5XyIsInRleHRUcmFja3NKc29uXyIsInNlZWtpbmciLCJoYW5kbGVUZWNoTG9hZFN0YXJ0XyIsImhhbmRsZVRlY2hTb3VyY2VzZXRfIiwiaGFuZGxlVGVjaFdhaXRpbmdfIiwiaGFuZGxlVGVjaEVuZGVkXyIsImhhbmRsZVRlY2hTZWVraW5nXyIsImhhbmRsZVRlY2hQbGF5XyIsImhhbmRsZVRlY2hGaXJzdFBsYXlfIiwiaGFuZGxlVGVjaFBhdXNlXyIsImhhbmRsZVRlY2hEdXJhdGlvbkNoYW5nZV8iLCJoYW5kbGVUZWNoRnVsbHNjcmVlbkNoYW5nZV8iLCJoYW5kbGVUZWNoRXJyb3JfIiwiaGFuZGxlVGVjaFBvc3RlckNoYW5nZV8iLCJoYW5kbGVUZWNoVGV4dERhdGFfIiwiaGFuZGxlVGVjaFJhdGVDaGFuZ2VfIiwidXNpbmdOYXRpdmVDb250cm9scyIsInRlY2hHZXRfIiwiYWRkVGVjaENvbnRyb2xzTGlzdGVuZXJzXyIsInJlbW92ZVRlY2hDb250cm9sc0xpc3RlbmVyc18iLCJoYW5kbGVUZWNoQ2xpY2tfIiwiaGFuZGxlVGVjaERvdWJsZUNsaWNrXyIsImhhbmRsZVRlY2hUb3VjaFN0YXJ0XyIsImhhbmRsZVRlY2hUb3VjaE1vdmVfIiwiaGFuZGxlVGVjaFRvdWNoRW5kXyIsImhhbmRsZVRlY2hUYXBfIiwidGVjaENhbGxfIiwiaGFzU3RhcnRlZCIsIm1hbnVhbEF1dG9wbGF5XyIsImNhdGNoIiwidXBkYXRlU291cmNlQ2FjaGVzXyIsImN1cnJlbnRTb3VyY2UiLCJsYXN0U291cmNlXyIsInRlY2hHZXQiLCJsYXN0UGxheWJhY2tSYXRlIiwiaGFuZGxlVGVjaENhblBsYXlfIiwiaGFuZGxlVGVjaENhblBsYXlUaHJvdWdoXyIsImhhbmRsZVRlY2hQbGF5aW5nXyIsImhhbmRsZVRlY2hTZWVrZWRfIiwic3RhcnR0aW1lIiwidXNlckFjdGlvbnMiLCJkb3VibGVDbGljayIsInVzZXJXYXNBY3RpdmUiLCJ0b2dnbGVGdWxsc2NyZWVuQ2xhc3NfIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJtYXRjaGVzIiwiZnVsbHNjcmVlbiIsImluYWN0aXZpdHlUaW1lb3V0IiwibGFzdFZvbHVtZSIsImRlZmF1bHRQbGF5YmFja1JhdGUiLCJtZWRpYSIsInJlZHVjZVJpZ2h0IiwiUHJvbWlzZSIsInBsYXlfIiwid2FpdFRvUGxheV8iLCJydW5QbGF5VGVybWluYXRlZFF1ZXVlXyIsInJ1blBsYXlDYWxsYmFja3NfIiwibGl2ZXVpIiwiZGVmYXVsdE11dGVkIiwiaXNGdWxsc2NyZWVuXyIsImVudGVyRnVsbFdpbmRvdyIsImV4aXRGdWxsV2luZG93IiwiaXNGdWxsV2luZG93IiwiZG9jT3JpZ092ZXJmbG93Iiwib3ZlcmZsb3ciLCJob3RrZXlzIiwiaGFuZGxlSG90a2V5cyIsImZ1bGxzY3JlZW5LZXkiLCJtdXRlS2V5IiwicGxheVBhdXNlS2V5Iiwic2VsZWN0U291cmNlIiwic291cmNlT3JkZXIiLCJzcmNfIiwibm90U3VwcG9ydGVkTWVzc2FnZSIsInNldFRlY2giLCJkb1Jlc2V0XyIsInJlc2V0Q29udHJvbEJhclVJXyIsInJlc2V0UHJvZ3Jlc3NCYXJfIiwicmVzZXRQbGF5YmFja1JhdGVfIiwicmVzZXRWb2x1bWVCYXJfIiwiZHVyYXRpb25EaXNwbGF5IiwiY3VycmVudFNvdXJjZXMiLCJjdXJyZW50VHlwZSIsInVzaW5nTmF0aXZlQ29udHJvbHNfIiwiZXJyb3JEaXNwbGF5IiwidXNlckFjdGl2aXR5XyIsInNjcmVlblgiLCJzY3JlZW5ZIiwiaXNBdWRpb18iLCJ0b0pTT04iLCJjcmVhdGVNb2RhbCIsInVwZGF0ZUN1cnJlbnRCcmVha3BvaW50XyIsImN1cnJlbnRCcmVha3BvaW50IiwiYnJlYWtwb2ludHNfIiwiYnJlYWtwb2ludF8iLCJyZW1vdmVDdXJyZW50QnJlYWtwb2ludF8iLCJjdXJyZW50QnJlYWtwb2ludENsYXNzIiwicmVzcG9uc2l2ZV8iLCJsb2FkTWVkaWEiLCJhcnR3b3JrIiwiZ2V0TWVkaWEiLCJqciIsImh0bWw1IiwiZmxhc2giLCJ1c2VyTGFuZ3VhZ2UiLCJQciIsIkFyIiwiTXIiLCJMciIsIk5yIiwiT3IiLCJEciIsIklyIiwicGx1Z2luIiwiaW5zdGFuY2UiLCJnZXRFdmVudEhhc2giLCJGciIsInZlcnNpb24iLCJWRVJTSU9OIiwiaXNCYXNpYyIsInJlZ2lzdGVyUGx1Z2luIiwiZGVyZWdpc3RlclBsdWdpbiIsImdldFBsdWdpbnMiLCJnZXRQbHVnaW5WZXJzaW9uIiwiZ2V0UGx1Z2luIiwiQkFTRV9QTFVHSU5fTkFNRSIsInVzaW5nUGx1Z2luIiwiaGFzUGx1Z2luIiwiUnIiLCJCciIsImdldFBsYXllciIsImRlZmF1bHRWaWV3IiwiaG9va3MiLCJob29rc18iLCJob29rIiwiaG9va09uY2UiLCJyZW1vdmVIb29rIiwiSHIiLCJWciIsImdldFBsYXllcnMiLCJnZXRBbGxQbGF5ZXJzIiwidXNlIiwid3JpdGVhYmxlIiwibWlkZGxld2FyZSIsImJyb3dzZXIiLCJleHRlbmQiLCJ3cml0YWJsZSIsInN1cGVyXyIsIm1lcmdlT3B0aW9ucyIsImFkZExhbmd1YWdlIiwiY3JlYXRlVGltZVJhbmdlIiwiY3JlYXRlVGltZVJhbmdlcyIsImZvcm1hdFRpbWUiLCJzZXRGb3JtYXRUaW1lIiwicmVzZXRGb3JtYXRUaW1lIiwiRXZlbnRUYXJnZXQiLCJUZXh0VHJhY2siLCJBdWRpb1RyYWNrIiwiVmlkZW9UcmFjayIsImNvbXB1dGVkU3R5bGUiLCJkb20iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7Ozs7QUFXQSxDQUFDLFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsc0JBQWlCQyxPQUFqQix5Q0FBaUJBLE9BQWpCLE1BQTBCLGVBQWEsT0FBT0MsTUFBOUMsR0FBcURBLE9BQU9ELE9BQVAsR0FBZUQsRUFBRUcsUUFBUSxlQUFSLENBQUYsRUFBMkJBLFFBQVEsaUJBQVIsQ0FBM0IsQ0FBcEUsR0FBMkgsY0FBWSxPQUFPQyxNQUFuQixJQUEyQkEsT0FBT0MsR0FBbEMsR0FBc0NELE9BQU8sQ0FBQyxlQUFELEVBQWlCLGlCQUFqQixDQUFQLEVBQTJDSixDQUEzQyxDQUF0QyxHQUFvRixDQUFDRCxJQUFFQSxLQUFHTyxJQUFOLEVBQVlDLE9BQVosR0FBb0JQLEVBQUVELEVBQUVTLE1BQUosRUFBV1QsRUFBRVUsUUFBYixDQUFuTztBQUEwUCxDQUF4USxZQUE4USxVQUFTQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFQSxLQUFHQSxFQUFFRSxjQUFGLENBQWlCLFNBQWpCLENBQUgsR0FBK0JGLEVBQUVHLE9BQWpDLEdBQXlDSCxDQUEzQyxFQUE2Q0MsSUFBRUEsS0FBR0EsRUFBRUMsY0FBRixDQUFpQixTQUFqQixDQUFILEdBQStCRCxFQUFFRSxPQUFqQyxHQUF5Q0YsQ0FBeEYsQ0FBMEYsSUFBSUcsSUFBRSxPQUFOLENBQWMsU0FBU0MsQ0FBVCxD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RzJCLFNBQUgsR0FBYW52QixFQUFydUUsRUFBd3VFd3RCLEdBQUc0QixVQUFILEdBQWN0dUIsRUFBdHZFLEVBQXl2RTBzQixHQUFHNkIsVUFBSCxHQUFjdHVCLEVBQXZ3RSxFQUEwd0UsQ0FBQyxNQUFELEVBQVEsWUFBUixFQUFxQixVQUFyQixFQUFnQyxVQUFoQyxFQUEyQyxVQUEzQyxFQUFzRCxhQUF0RCxFQUFvRSxhQUFwRSxFQUFrRixlQUFsRixFQUFrRyxlQUFsRyxFQUFrSCxTQUFsSCxFQUE0SCxlQUE1SCxFQUE0SSxlQUE1SSxFQUE2SjltQixPQUE3SixDQUFxSyxVQUFTOUUsQ0FBVCxFQUFXO0FBQUNxNEMsT0FBR3I0QyxDQUFILElBQU0sWUFBVTtBQUFDLGFBQU95RCxFQUFFTSxJQUFGLENBQU8sYUFBVy9ELENBQVgsR0FBYSxvQ0FBYixHQUFrREEsQ0FBbEQsR0FBb0QsWUFBM0QsR0FBeUUySyxFQUFFM0ssQ0FBRixFQUFLbUMsS0FBTCxDQUFXLElBQVgsRUFBZ0JJLFNBQWhCLENBQWhGO0FBQTJHLEtBQTVIO0FBQTZILEdBQTlTLENBQTF3RSxFQUEwakY4MUMsR0FBRzhCLGFBQUgsR0FBaUJsNEMsQ0FBM2tGLEVBQTZrRm8yQyxHQUFHK0IsR0FBSCxHQUFPenZDLENBQXBsRixFQUFzbEYwdEMsR0FBRzl2QixHQUFILEdBQU92QyxFQUE3bEYsRUFBZ21GcXlCLEVBQXZtRjtBQUEwbUYsQ0FBaGwyTCxDQUFEIiwiZmlsZSI6InZpZGVvLmNvcmUubm92dHQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogVmlkZW8uanMgNy41LjQgPGh0dHA6Ly92aWRlb2pzLmNvbS8+XG4gKiBDb3B5cmlnaHQgQnJpZ2h0Y292ZSwgSW5jLiA8aHR0cHM6Ly93d3cuYnJpZ2h0Y292ZS5jb20vPlxuICogQXZhaWxhYmxlIHVuZGVyIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wXG4gKiA8aHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvdmlkZW8uanMvYmxvYi9tYXN0ZXIvTElDRU5TRT5cbiAqXG4gKiBJbmNsdWRlcyB2dHQuanMgPGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3Z0dC5qcz5cbiAqIEF2YWlsYWJsZSB1bmRlciBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMFxuICogPGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3Z0dC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFPlxuICovXG4hZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KHJlcXVpcmUoXCJnbG9iYWwvd2luZG93XCIpLHJlcXVpcmUoXCJnbG9iYWwvZG9jdW1lbnRcIikpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZ2xvYmFsL3dpbmRvd1wiLFwiZ2xvYmFsL2RvY3VtZW50XCJdLHQpOihlPWV8fHNlbGYpLnZpZGVvanM9dChlLndpbmRvdyxlLmRvY3VtZW50KX0odGhpcyxmdW5jdGlvbihoLGQpe2g9aCYmaC5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRcIik/aC5kZWZhdWx0OmgsZD1kJiZkLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFwiKT9kLmRlZmF1bHQ6ZDt2YXIgcD1cIjcuNS40XCI7ZnVuY3Rpb24gZihlLHQpe2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpLChlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lKS5fX3Byb3RvX189dH1mdW5jdGlvbiBzKGUsdCl7cmV0dXJuKHM9T2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbihlLHQpe3JldHVybiBlLl9fcHJvdG9fXz10LGV9KShlLHQpfWZ1bmN0aW9uIG8oZSx0LG4pe3JldHVybihvPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLGZ1bmN0aW9uKCl7fSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKT9SZWZsZWN0LmNvbnN0cnVjdDpmdW5jdGlvbihlLHQsbil7dmFyIGk9W251bGxdO2kucHVzaC5hcHBseShpLHQpO3ZhciByPW5ldyhGdW5jdGlvbi5iaW5kLmFwcGx5KGUsaSkpO3JldHVybiBuJiZzKHIsbi5wcm90b3R5cGUpLHJ9KS5hcHBseShudWxsLGFyZ3VtZW50cyl9ZnVuY3Rpb24gdihlKXtpZih2b2lkIDA9PT1lKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gZX1mdW5jdGlvbiB0KGUsdCl7cmV0dXJuIHR8fCh0PWUuc2xpY2UoMCkpLGUucmF3PXQsZX12YXIgbD1bXSxlPWZ1bmN0aW9uKG8sYSl7cmV0dXJuIGZ1bmN0aW9uKGUsdCxuKXt2YXIgaT1hLmxldmVsc1t0XSxyPW5ldyBSZWdFeHAoXCJeKFwiK2krXCIpJFwiKTtpZihcImxvZ1wiIT09ZSYmbi51bnNoaWZ0KGUudG9VcHBlckNhc2UoKStcIjpcIiksbi51bnNoaWZ0KG8rXCI6XCIpLGwmJmwucHVzaChbXS5jb25jYXQobikpLGguY29uc29sZSl7dmFyIHM9aC5jb25zb2xlW2VdO3N8fFwiZGVidWdcIiE9PWV8fChzPWguY29uc29sZS5pbmZvfHxoLmNvbnNvbGUubG9nKSxzJiZpJiZyLnRlc3QoZSkmJnNbQXJyYXkuaXNBcnJheShuKT9cImFwcGx5XCI6XCJjYWxsXCJdKGguY29uc29sZSxuKX19fTt2YXIgZz1mdW5jdGlvbiB0KG4pe3ZhciBpLHI9XCJpbmZvXCIscz1mdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLG49MDtuPGU7bisrKXRbbl09YXJndW1lbnRzW25dO2koXCJsb2dcIixyLHQpfTtyZXR1cm4gaT1lKG4scykscy5jcmVhdGVMb2dnZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIHQobitcIjogXCIrZSl9LHMubGV2ZWxzPXthbGw6XCJkZWJ1Z3xsb2d8d2FybnxlcnJvclwiLG9mZjpcIlwiLGRlYnVnOlwiZGVidWd8bG9nfHdhcm58ZXJyb3JcIixpbmZvOlwibG9nfHdhcm58ZXJyb3JcIix3YXJuOlwid2FybnxlcnJvclwiLGVycm9yOlwiZXJyb3JcIixERUZBVUxUOnJ9LHMubGV2ZWw9ZnVuY3Rpb24oZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe2lmKCFzLmxldmVscy5oYXNPd25Qcm9wZXJ0eShlKSl0aHJvdyBuZXcgRXJyb3IoJ1wiJytlKydcIiBpbiBub3QgYSB2YWxpZCBsb2cgbGV2ZWwnKTtyPWV9cmV0dXJuIHJ9LChzLmhpc3Rvcnk9ZnVuY3Rpb24oKXtyZXR1cm4gbD9bXS5jb25jYXQobCk6W119KS5maWx0ZXI9ZnVuY3Rpb24odCl7cmV0dXJuKGx8fFtdKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBSZWdFeHAoXCIuKlwiK3QrXCIuKlwiKS50ZXN0KGVbMF0pfSl9LHMuaGlzdG9yeS5jbGVhcj1mdW5jdGlvbigpe2wmJihsLmxlbmd0aD0wKX0scy5oaXN0b3J5LmRpc2FibGU9ZnVuY3Rpb24oKXtudWxsIT09bCYmKGwubGVuZ3RoPTAsbD1udWxsKX0scy5oaXN0b3J5LmVuYWJsZT1mdW5jdGlvbigpe251bGw9PT1sJiYobD1bXSl9LHMuZXJyb3I9ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxuPTA7bjxlO24rKyl0W25dPWFyZ3VtZW50c1tuXTtyZXR1cm4gaShcImVycm9yXCIscix0KX0scy53YXJuPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSksbj0wO248ZTtuKyspdFtuXT1hcmd1bWVudHNbbl07cmV0dXJuIGkoXCJ3YXJuXCIscix0KX0scy5kZWJ1Zz1mdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLG49MDtuPGU7bisrKXRbbl09YXJndW1lbnRzW25dO3JldHVybiBpKFwiZGVidWdcIixyLHQpfSxzfShcIlZJREVPSlNcIikseT1nLmNyZWF0ZUxvZ2dlcjt2YXIgXz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9XCJcIixuPTA7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl0Kz1lW25dLnJlcGxhY2UoL1xcblxccj9cXHMqL2csXCJcIikrKGFyZ3VtZW50c1tuKzFdfHxcIlwiKTtyZXR1cm4gdH0sbj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLHI9ZnVuY3Rpb24oZSl7cmV0dXJuIGIoZSk/T2JqZWN0LmtleXMoZSk6W119O2Z1bmN0aW9uIGEodCxuKXtyKHQpLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIG4odFtlXSxlKX0pfWZ1bmN0aW9uIG0obil7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoMTxlP2UtMTowKSxpPTE7aTxlO2krKyl0W2ktMV09YXJndW1lbnRzW2ldO3JldHVybiBPYmplY3QuYXNzaWduP09iamVjdC5hc3NpZ24uYXBwbHkoT2JqZWN0LFtuXS5jb25jYXQodCkpOih0LmZvckVhY2goZnVuY3Rpb24oZSl7ZSYmYShlLGZ1bmN0aW9uKGUsdCl7blt0XT1lfSl9KSxuKX1mdW5jdGlvbiBiKGUpe3JldHVybiEhZSYmXCJvYmplY3RcIj09dHlwZW9mIGV9ZnVuY3Rpb24gYyhlKXtyZXR1cm4gYihlKSYmXCJbb2JqZWN0IE9iamVjdF1cIj09PW4uY2FsbChlKSYmZS5jb25zdHJ1Y3Rvcj09PU9iamVjdH1mdW5jdGlvbiBpKGUsdCl7aWYoIWV8fCF0KXJldHVyblwiXCI7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgaC5nZXRDb21wdXRlZFN0eWxlKXJldHVyblwiXCI7dmFyIG49aC5nZXRDb21wdXRlZFN0eWxlKGUpO3JldHVybiBuP25bdF06XCJcIn1mdW5jdGlvbiB1KCl7dmFyIGU9dChbXCJTZXR0aW5nIGF0dHJpYnV0ZXMgaW4gdGhlIHNlY29uZCBhcmd1bWVudCBvZiBjcmVhdGVFbCgpXFxuICAgICAgICAgICAgICAgIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSB0aGUgdGhpcmQgYXJndW1lbnQgaW5zdGVhZC5cXG4gICAgICAgICAgICAgICAgY3JlYXRlRWwodHlwZSwgcHJvcGVydGllcywgYXR0cmlidXRlcykuIEF0dGVtcHRpbmcgdG8gc2V0IFwiLFwiIHRvIFwiLFwiLlwiXSk7cmV0dXJuIHU9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sZX1mdW5jdGlvbiBUKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlJiYvXFxTLy50ZXN0KGUpfWZ1bmN0aW9uIGsoZSl7aWYoL1xccy8udGVzdChlKSl0aHJvdyBuZXcgRXJyb3IoXCJjbGFzcyBoYXMgaWxsZWdhbCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcIil9ZnVuY3Rpb24gQygpe3JldHVybiBkPT09aC5kb2N1bWVudH1mdW5jdGlvbiBFKGUpe3JldHVybiBiKGUpJiYxPT09ZS5ub2RlVHlwZX1mdW5jdGlvbiBTKCl7dHJ5e3JldHVybiBoLnBhcmVudCE9PWguc2VsZn1jYXRjaChlKXtyZXR1cm4hMH19ZnVuY3Rpb24gdyhpKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZighVChlKSlyZXR1cm4gZFtpXShudWxsKTtUKHQpJiYodD1kLnF1ZXJ5U2VsZWN0b3IodCkpO3ZhciBuPUUodCk/dDpkO3JldHVybiBuW2ldJiZuW2ldKGUpfX1mdW5jdGlvbiB4KGUsbix0LGkpe3ZvaWQgMD09PWUmJihlPVwiZGl2XCIpLHZvaWQgMD09PW4mJihuPXt9KSx2b2lkIDA9PT10JiYodD17fSk7dmFyIHI9ZC5jcmVhdGVFbGVtZW50KGUpO3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PW5bZV07LTEhPT1lLmluZGV4T2YoXCJhcmlhLVwiKXx8XCJyb2xlXCI9PT1lfHxcInR5cGVcIj09PWU/KGcud2FybihfKHUoKSxlLHQpKSxyLnNldEF0dHJpYnV0ZShlLHQpKTpcInRleHRDb250ZW50XCI9PT1lP2oocix0KTpyW2VdPXR9KSxPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3Iuc2V0QXR0cmlidXRlKGUsdFtlXSl9KSxpJiZYKHIsaSkscn1mdW5jdGlvbiBqKGUsdCl7cmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIGUudGV4dENvbnRlbnQ/ZS5pbm5lclRleHQ9dDplLnRleHRDb250ZW50PXQsZX1mdW5jdGlvbiBQKGUsdCl7dC5maXJzdENoaWxkP3QuaW5zZXJ0QmVmb3JlKGUsdC5maXJzdENoaWxkKTp0LmFwcGVuZENoaWxkKGUpfWZ1bmN0aW9uIEEoZSx0KXtyZXR1cm4gayh0KSxlLmNsYXNzTGlzdD9lLmNsYXNzTGlzdC5jb250YWlucyh0KToobj10LG5ldyBSZWdFeHAoXCIoXnxcXFxccylcIituK1wiKCR8XFxcXHMpXCIpKS50ZXN0KGUuY2xhc3NOYW1lKTt2YXIgbn1mdW5jdGlvbiBNKGUsdCl7cmV0dXJuIGUuY2xhc3NMaXN0P2UuY2xhc3NMaXN0LmFkZCh0KTpBKGUsdCl8fChlLmNsYXNzTmFtZT0oZS5jbGFzc05hbWUrXCIgXCIrdCkudHJpbSgpKSxlfWZ1bmN0aW9uIEwoZSx0KXtyZXR1cm4gZS5jbGFzc0xpc3Q/ZS5jbGFzc0xpc3QucmVtb3ZlKHQpOihrKHQpLGUuY2xhc3NOYW1lPWUuY2xhc3NOYW1lLnNwbGl0KC9cXHMrLykuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlIT09dH0pLmpvaW4oXCIgXCIpKSxlfWZ1bmN0aW9uIE4oZSx0LG4pe3ZhciBpPUEoZSx0KTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYobj1uKGUsdCkpLFwiYm9vbGVhblwiIT10eXBlb2YgbiYmKG49IWkpLG4hPT1pKXJldHVybiBuP00oZSx0KTpMKGUsdCksZX1mdW5jdGlvbiBPKG4saSl7T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaSkuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1pW2VdO251bGw9PT10fHxcInVuZGVmaW5lZFwiPT10eXBlb2YgdHx8ITE9PT10P24ucmVtb3ZlQXR0cmlidXRlKGUpOm4uc2V0QXR0cmlidXRlKGUsITA9PT10P1wiXCI6dCl9KX1mdW5jdGlvbiBEKGUpe3ZhciB0PXt9LG49XCIsYXV0b3BsYXksY29udHJvbHMscGxheXNpbmxpbmUsbG9vcCxtdXRlZCxkZWZhdWx0LGRlZmF1bHRNdXRlZCxcIjtpZihlJiZlLmF0dHJpYnV0ZXMmJjA8ZS5hdHRyaWJ1dGVzLmxlbmd0aClmb3IodmFyIGk9ZS5hdHRyaWJ1dGVzLHI9aS5sZW5ndGgtMTswPD1yO3ItLSl7dmFyIHM9aVtyXS5uYW1lLG89aVtyXS52YWx1ZTtcImJvb2xlYW5cIiE9dHlwZW9mIGVbc10mJi0xPT09bi5pbmRleE9mKFwiLFwiK3MrXCIsXCIpfHwobz1udWxsIT09byksdFtzXT1vfXJldHVybiB0fWZ1bmN0aW9uIEkoZSx0KXtyZXR1cm4gZS5nZXRBdHRyaWJ1dGUodCl9ZnVuY3Rpb24gRihlLHQsbil7ZS5zZXRBdHRyaWJ1dGUodCxuKX1mdW5jdGlvbiBSKGUsdCl7ZS5yZW1vdmVBdHRyaWJ1dGUodCl9ZnVuY3Rpb24gQigpe2QuYm9keS5mb2N1cygpLGQub25zZWxlY3RzdGFydD1mdW5jdGlvbigpe3JldHVybiExfX1mdW5jdGlvbiBIKCl7ZC5vbnNlbGVjdHN0YXJ0PWZ1bmN0aW9uKCl7cmV0dXJuITB9fWZ1bmN0aW9uIFYoZSl7aWYoZSYmZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QmJmUucGFyZW50Tm9kZSl7dmFyIHQ9ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPXt9O3JldHVybltcImJvdHRvbVwiLFwiaGVpZ2h0XCIsXCJsZWZ0XCIsXCJyaWdodFwiLFwidG9wXCIsXCJ3aWR0aFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZvaWQgMCE9PXRbZV0mJihuW2VdPXRbZV0pfSksbi5oZWlnaHR8fChuLmhlaWdodD1wYXJzZUZsb2F0KGkoZSxcImhlaWdodFwiKSkpLG4ud2lkdGh8fChuLndpZHRoPXBhcnNlRmxvYXQoaShlLFwid2lkdGhcIikpKSxufX1mdW5jdGlvbiB6KGUpe3ZhciB0O2lmKGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0JiZlLnBhcmVudE5vZGUmJih0PWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLCF0KXJldHVybntsZWZ0OjAsdG9wOjB9O3ZhciBuPWQuZG9jdW1lbnRFbGVtZW50LGk9ZC5ib2R5LHI9bi5jbGllbnRMZWZ0fHxpLmNsaWVudExlZnR8fDAscz1oLnBhZ2VYT2Zmc2V0fHxpLnNjcm9sbExlZnQsbz10LmxlZnQrcy1yLGE9bi5jbGllbnRUb3B8fGkuY2xpZW50VG9wfHwwLGw9aC5wYWdlWU9mZnNldHx8aS5zY3JvbGxUb3AsYz10LnRvcCtsLWE7cmV0dXJue2xlZnQ6TWF0aC5yb3VuZChvKSx0b3A6TWF0aC5yb3VuZChjKX19ZnVuY3Rpb24gSyhlLHQpe3ZhciBuPXt9LGk9eihlKSxyPWUub2Zmc2V0V2lkdGgscz1lLm9mZnNldEhlaWdodCxvPWkudG9wLGE9aS5sZWZ0LGw9dC5wYWdlWSxjPXQucGFnZVg7cmV0dXJuIHQuY2hhbmdlZFRvdWNoZXMmJihjPXQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVgsbD10LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZKSxuLnk9TWF0aC5tYXgoMCxNYXRoLm1pbigxLChvLWwrcykvcykpLG4ueD1NYXRoLm1heCgwLE1hdGgubWluKDEsKGMtYSkvcikpLG59ZnVuY3Rpb24gVyhlKXtyZXR1cm4gYihlKSYmMz09PWUubm9kZVR5cGV9ZnVuY3Rpb24gVShlKXtmb3IoO2UuZmlyc3RDaGlsZDspZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpO3JldHVybiBlfWZ1bmN0aW9uIHEoZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmKGU9ZSgpKSwoQXJyYXkuaXNBcnJheShlKT9lOltlXSkubWFwKGZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJihlPWUoKSksRShlKXx8VyhlKT9lOlwic3RyaW5nXCI9PXR5cGVvZiBlJiYvXFxTLy50ZXN0KGUpP2QuY3JlYXRlVGV4dE5vZGUoZSk6dm9pZCAwfSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlfSl9ZnVuY3Rpb24gWCh0LGUpe3JldHVybiBxKGUpLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIHQuYXBwZW5kQ2hpbGQoZSl9KSx0fWZ1bmN0aW9uICQoZSx0KXtyZXR1cm4gWChVKGUpLHQpfWZ1bmN0aW9uIEcoZSl7cmV0dXJuIHZvaWQgMD09PWUuYnV0dG9uJiZ2b2lkIDA9PT1lLmJ1dHRvbnN8fCgwPT09ZS5idXR0b24mJnZvaWQgMD09PWUuYnV0dG9uc3x8MD09PWUuYnV0dG9uJiYxPT09ZS5idXR0b25zKX12YXIgWT13KFwicXVlcnlTZWxlY3RvclwiKSxRPXcoXCJxdWVyeVNlbGVjdG9yQWxsXCIpLEo9T2JqZWN0LmZyZWV6ZSh7aXNSZWFsOkMsaXNFbDpFLGlzSW5GcmFtZTpTLGNyZWF0ZUVsOngsdGV4dENvbnRlbnQ6aixwcmVwZW5kVG86UCxoYXNDbGFzczpBLGFkZENsYXNzOk0scmVtb3ZlQ2xhc3M6TCx0b2dnbGVDbGFzczpOLHNldEF0dHJpYnV0ZXM6TyxnZXRBdHRyaWJ1dGVzOkQsZ2V0QXR0cmlidXRlOkksc2V0QXR0cmlidXRlOkYscmVtb3ZlQXR0cmlidXRlOlIsYmxvY2tUZXh0U2VsZWN0aW9uOkIsdW5ibG9ja1RleHRTZWxlY3Rpb246SCxnZXRCb3VuZGluZ0NsaWVudFJlY3Q6VixmaW5kUG9zaXRpb246eixnZXRQb2ludGVyUG9zaXRpb246Syxpc1RleHROb2RlOlcsZW1wdHlFbDpVLG5vcm1hbGl6ZUNvbnRlbnQ6cSxhcHBlbmRDb250ZW50OlgsaW5zZXJ0Q29udGVudDokLGlzU2luZ2xlTGVmdENsaWNrOkcsJDpZLCQkOlF9KSxaPTE7ZnVuY3Rpb24gZWUoKXtyZXR1cm4gWisrfXZhciB0ZT17fSxuZT1cInZkYXRhXCIrKG5ldyBEYXRlKS5nZXRUaW1lKCk7ZnVuY3Rpb24gaWUoZSl7dmFyIHQ9ZVtuZV07cmV0dXJuIHR8fCh0PWVbbmVdPWVlKCkpLHRlW3RdfHwodGVbdF09e30pLHRlW3RdfWZ1bmN0aW9uIHJlKGUpe3ZhciB0PWVbbmVdO3JldHVybiEhdCYmISFPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZVt0XSkubGVuZ3RofWZ1bmN0aW9uIHNlKHQpe3ZhciBlPXRbbmVdO2lmKGUpe2RlbGV0ZSB0ZVtlXTt0cnl7ZGVsZXRlIHRbbmVdfWNhdGNoKGUpe3QucmVtb3ZlQXR0cmlidXRlP3QucmVtb3ZlQXR0cmlidXRlKG5lKTp0W25lXT1udWxsfX19ZnVuY3Rpb24gb2UoZSx0KXt2YXIgbj1pZShlKTswPT09bi5oYW5kbGVyc1t0XS5sZW5ndGgmJihkZWxldGUgbi5oYW5kbGVyc1t0XSxlLnJlbW92ZUV2ZW50TGlzdGVuZXI/ZS5yZW1vdmVFdmVudExpc3RlbmVyKHQsbi5kaXNwYXRjaGVyLCExKTplLmRldGFjaEV2ZW50JiZlLmRldGFjaEV2ZW50KFwib25cIit0LG4uZGlzcGF0Y2hlcikpLE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG4uaGFuZGxlcnMpLmxlbmd0aDw9MCYmKGRlbGV0ZSBuLmhhbmRsZXJzLGRlbGV0ZSBuLmRpc3BhdGNoZXIsZGVsZXRlIG4uZGlzYWJsZWQpLDA9PT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuKS5sZW5ndGgmJnNlKGUpfWZ1bmN0aW9uIGFlKHQsbixlLGkpe2UuZm9yRWFjaChmdW5jdGlvbihlKXt0KG4sZSxpKX0pfWZ1bmN0aW9uIGxlKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4hMH1mdW5jdGlvbiBuKCl7cmV0dXJuITF9aWYoIWV8fCFlLmlzUHJvcGFnYXRpb25TdG9wcGVkKXt2YXIgaT1lfHxoLmV2ZW50O2Zvcih2YXIgciBpbiBlPXt9LGkpXCJsYXllclhcIiE9PXImJlwibGF5ZXJZXCIhPT1yJiZcImtleUxvY2F0aW9uXCIhPT1yJiZcIndlYmtpdE1vdmVtZW50WFwiIT09ciYmXCJ3ZWJraXRNb3ZlbWVudFlcIiE9PXImJihcInJldHVyblZhbHVlXCI9PT1yJiZpLnByZXZlbnREZWZhdWx0fHwoZVtyXT1pW3JdKSk7aWYoZS50YXJnZXR8fChlLnRhcmdldD1lLnNyY0VsZW1lbnR8fGQpLGUucmVsYXRlZFRhcmdldHx8KGUucmVsYXRlZFRhcmdldD1lLmZyb21FbGVtZW50PT09ZS50YXJnZXQ/ZS50b0VsZW1lbnQ6ZS5mcm9tRWxlbWVudCksZS5wcmV2ZW50RGVmYXVsdD1mdW5jdGlvbigpe2kucHJldmVudERlZmF1bHQmJmkucHJldmVudERlZmF1bHQoKSxlLnJldHVyblZhbHVlPSExLGkucmV0dXJuVmFsdWU9ITEsZS5kZWZhdWx0UHJldmVudGVkPSEwfSxlLmRlZmF1bHRQcmV2ZW50ZWQ9ITEsZS5zdG9wUHJvcGFnYXRpb249ZnVuY3Rpb24oKXtpLnN0b3BQcm9wYWdhdGlvbiYmaS5zdG9wUHJvcGFnYXRpb24oKSxlLmNhbmNlbEJ1YmJsZT0hMCxpLmNhbmNlbEJ1YmJsZT0hMCxlLmlzUHJvcGFnYXRpb25TdG9wcGVkPXR9LGUuaXNQcm9wYWdhdGlvblN0b3BwZWQ9bixlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbj1mdW5jdGlvbigpe2kuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uJiZpLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLGUuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9dCxlLnN0b3BQcm9wYWdhdGlvbigpfSxlLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkPW4sbnVsbCE9PWUuY2xpZW50WCYmdm9pZCAwIT09ZS5jbGllbnRYKXt2YXIgcz1kLmRvY3VtZW50RWxlbWVudCxvPWQuYm9keTtlLnBhZ2VYPWUuY2xpZW50WCsocyYmcy5zY3JvbGxMZWZ0fHxvJiZvLnNjcm9sbExlZnR8fDApLShzJiZzLmNsaWVudExlZnR8fG8mJm8uY2xpZW50TGVmdHx8MCksZS5wYWdlWT1lLmNsaWVudFkrKHMmJnMuc2Nyb2xsVG9wfHxvJiZvLnNjcm9sbFRvcHx8MCktKHMmJnMuY2xpZW50VG9wfHxvJiZvLmNsaWVudFRvcHx8MCl9ZS53aGljaD1lLmNoYXJDb2RlfHxlLmtleUNvZGUsbnVsbCE9PWUuYnV0dG9uJiZ2b2lkIDAhPT1lLmJ1dHRvbiYmKGUuYnV0dG9uPTEmZS5idXR0b24/MDo0JmUuYnV0dG9uPzE6MiZlLmJ1dHRvbj8yOjApfXJldHVybiBlfXZhciBjZT0hMTshZnVuY3Rpb24oKXt0cnl7dmFyIGU9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtjZT0hMH19KTtoLmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsbnVsbCxlKSxoLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsbnVsbCxlKX1jYXRjaChlKXt9fSgpO3ZhciB1ZT1bXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaG1vdmVcIl07ZnVuY3Rpb24gaGUobyxlLHQpe2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIGFlKGhlLG8sZSx0KTt2YXIgYT1pZShvKTtpZihhLmhhbmRsZXJzfHwoYS5oYW5kbGVycz17fSksYS5oYW5kbGVyc1tlXXx8KGEuaGFuZGxlcnNbZV09W10pLHQuZ3VpZHx8KHQuZ3VpZD1lZSgpKSxhLmhhbmRsZXJzW2VdLnB1c2godCksYS5kaXNwYXRjaGVyfHwoYS5kaXNhYmxlZD0hMSxhLmRpc3BhdGNoZXI9ZnVuY3Rpb24oZSx0KXtpZighYS5kaXNhYmxlZCl7ZT1sZShlKTt2YXIgbj1hLmhhbmRsZXJzW2UudHlwZV07aWYobilmb3IodmFyIGk9bi5zbGljZSgwKSxyPTAscz1pLmxlbmd0aDtyPHMmJiFlLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCk7cisrKXRyeXtpW3JdLmNhbGwobyxlLHQpfWNhdGNoKGUpe2cuZXJyb3IoZSl9fX0pLDE9PT1hLmhhbmRsZXJzW2VdLmxlbmd0aClpZihvLmFkZEV2ZW50TGlzdGVuZXIpe3ZhciBuPSExO2NlJiYtMTx1ZS5pbmRleE9mKGUpJiYobj17cGFzc2l2ZTohMH0pLG8uYWRkRXZlbnRMaXN0ZW5lcihlLGEuZGlzcGF0Y2hlcixuKX1lbHNlIG8uYXR0YWNoRXZlbnQmJm8uYXR0YWNoRXZlbnQoXCJvblwiK2UsYS5kaXNwYXRjaGVyKX1mdW5jdGlvbiBkZShlLHQsbil7aWYocmUoZSkpe3ZhciBpPWllKGUpO2lmKGkuaGFuZGxlcnMpe2lmKEFycmF5LmlzQXJyYXkodCkpcmV0dXJuIGFlKGRlLGUsdCxuKTt2YXIgcj1mdW5jdGlvbihlLHQpe2kuaGFuZGxlcnNbdF09W10sb2UoZSx0KX07aWYodm9pZCAwIT09dCl7dmFyIHM9aS5oYW5kbGVyc1t0XTtpZihzKWlmKG4pe2lmKG4uZ3VpZClmb3IodmFyIG89MDtvPHMubGVuZ3RoO28rKylzW29dLmd1aWQ9PT1uLmd1aWQmJnMuc3BsaWNlKG8tLSwxKTtvZShlLHQpfWVsc2UgcihlLHQpfWVsc2UgZm9yKHZhciBhIGluIGkuaGFuZGxlcnMpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGkuaGFuZGxlcnN8fHt9LGEpJiZyKGUsYSl9fX1mdW5jdGlvbiBwZShlLHQsbil7dmFyIGk9cmUoZSk/aWUoZSk6e30scj1lLnBhcmVudE5vZGV8fGUub3duZXJEb2N1bWVudDtpZihcInN0cmluZ1wiPT10eXBlb2YgdD90PXt0eXBlOnQsdGFyZ2V0OmV9OnQudGFyZ2V0fHwodC50YXJnZXQ9ZSksdD1sZSh0KSxpLmRpc3BhdGNoZXImJmkuZGlzcGF0Y2hlci5jYWxsKGUsdCxuKSxyJiYhdC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpJiYhMD09PXQuYnViYmxlcylwZS5jYWxsKG51bGwscix0LG4pO2Vsc2UgaWYoIXImJiF0LmRlZmF1bHRQcmV2ZW50ZWQmJnQudGFyZ2V0JiZ0LnRhcmdldFt0LnR5cGVdKXt2YXIgcz1pZSh0LnRhcmdldCk7dC50YXJnZXRbdC50eXBlXSYmKHMuZGlzYWJsZWQ9ITAsXCJmdW5jdGlvblwiPT10eXBlb2YgdC50YXJnZXRbdC50eXBlXSYmdC50YXJnZXRbdC50eXBlXSgpLHMuZGlzYWJsZWQ9ITEpfXJldHVybiF0LmRlZmF1bHRQcmV2ZW50ZWR9ZnVuY3Rpb24gZmUodCxuLGkpe2lmKEFycmF5LmlzQXJyYXkobikpcmV0dXJuIGFlKGZlLHQsbixpKTt2YXIgZT1mdW5jdGlvbiBlKCl7ZGUodCxuLGUpLGkuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtlLmd1aWQ9aS5ndWlkPWkuZ3VpZHx8ZWUoKSxoZSh0LG4sZSl9dmFyIHZlLGdlPU9iamVjdC5mcmVlemUoe2ZpeEV2ZW50OmxlLG9uOmhlLG9mZjpkZSx0cmlnZ2VyOnBlLG9uZTpmZX0pLHllPSExLF9lPWZ1bmN0aW9uKCl7aWYoQygpJiYhMSE9PXZlLm9wdGlvbnMuYXV0b1NldHVwKXt2YXIgZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidmlkZW9cIikpLHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImF1ZGlvXCIpKSxuPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ2aWRlby1qc1wiKSksaT1lLmNvbmNhdCh0LG4pO2lmKGkmJjA8aS5sZW5ndGgpZm9yKHZhciByPTAscz1pLmxlbmd0aDtyPHM7cisrKXt2YXIgbz1pW3JdO2lmKCFvfHwhby5nZXRBdHRyaWJ1dGUpe21lKDEpO2JyZWFrfXZvaWQgMD09PW8ucGxheWVyJiZudWxsIT09by5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNldHVwXCIpJiZ2ZShvKX1lbHNlIHllfHxtZSgxKX19O2Z1bmN0aW9uIG1lKGUsdCl7dCYmKHZlPXQpLGguc2V0VGltZW91dChfZSxlKX1DKCkmJlwiY29tcGxldGVcIj09PWQucmVhZHlTdGF0ZT95ZT0hMDpmZShoLFwibG9hZFwiLGZ1bmN0aW9uKCl7eWU9ITB9KTt2YXIgYmUsVGU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7cmV0dXJuIHQuY2xhc3NOYW1lPWUsdH0sa2U9ZnVuY3Rpb24oZSx0KXtlLnN0eWxlU2hlZXQ/ZS5zdHlsZVNoZWV0LmNzc1RleHQ9dDplLnRleHRDb250ZW50PXR9LENlPWZ1bmN0aW9uKGUsdCxuKXt0Lmd1aWR8fCh0Lmd1aWQ9ZWUoKSk7dmFyIGk9ZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseShlLGFyZ3VtZW50cyl9O3JldHVybiBpLmd1aWQ9bj9uK1wiX1wiK3QuZ3VpZDp0Lmd1aWQsaX0sRWU9ZnVuY3Rpb24odCxuKXt2YXIgaT1EYXRlLm5vdygpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlPURhdGUubm93KCk7bjw9ZS1pJiYodC5hcHBseSh2b2lkIDAsYXJndW1lbnRzKSxpPWUpfX0sU2U9ZnVuY3Rpb24oKXt9O1NlLnByb3RvdHlwZS5hbGxvd2VkRXZlbnRzXz17fSxTZS5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcj1TZS5wcm90b3R5cGUub249ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLmFkZEV2ZW50TGlzdGVuZXI7dGhpcy5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKCl7fSxoZSh0aGlzLGUsdCksdGhpcy5hZGRFdmVudExpc3RlbmVyPW59LFNlLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyPVNlLnByb3RvdHlwZS5vZmY9ZnVuY3Rpb24oZSx0KXtkZSh0aGlzLGUsdCl9LFNlLnByb3RvdHlwZS5vbmU9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLmFkZEV2ZW50TGlzdGVuZXI7dGhpcy5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKCl7fSxmZSh0aGlzLGUsdCksdGhpcy5hZGRFdmVudExpc3RlbmVyPW59LFNlLnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50PVNlLnByb3RvdHlwZS50cmlnZ2VyPWZ1bmN0aW9uKGUpe3ZhciB0PWUudHlwZXx8ZTtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9e3R5cGU6dH0pLGU9bGUoZSksdGhpcy5hbGxvd2VkRXZlbnRzX1t0XSYmdGhpc1tcIm9uXCIrdF0mJnRoaXNbXCJvblwiK3RdKGUpLHBlKHRoaXMsZSl9LFNlLnByb3RvdHlwZS5xdWV1ZVRyaWdnZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztiZXx8KGJlPW5ldyBNYXApO3ZhciBuPWUudHlwZXx8ZSxpPWJlLmdldCh0aGlzKTtpfHwoaT1uZXcgTWFwLGJlLnNldCh0aGlzLGkpKTt2YXIgcj1pLmdldChuKTtpLmRlbGV0ZShuKSxoLmNsZWFyVGltZW91dChyKTt2YXIgcz1oLnNldFRpbWVvdXQoZnVuY3Rpb24oKXswPT09aS5zaXplJiYoaT1udWxsLGJlLmRlbGV0ZSh0KSksdC50cmlnZ2VyKGUpfSwwKTtpLnNldChuLHMpfTt2YXIgd2U9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBTZXx8ISF0LmV2ZW50QnVzRWxfJiZbXCJvblwiLFwib25lXCIsXCJvZmZcIixcInRyaWdnZXJcIl0uZXZlcnkoZnVuY3Rpb24oZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdFtlXX0pfSx4ZT1mdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmL1xcUy8udGVzdChlKXx8QXJyYXkuaXNBcnJheShlKSYmISFlLmxlbmd0aH0samU9ZnVuY3Rpb24oZSl7aWYoIWUubm9kZU5hbWUmJiF3ZShlKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHRhcmdldDsgbXVzdCBiZSBhIERPTSBub2RlIG9yIGV2ZW50ZWQgb2JqZWN0LlwiKX0sUGU9ZnVuY3Rpb24oZSl7aWYoIXhlKGUpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZXZlbnQgdHlwZTsgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYXJyYXkuXCIpfSxBZT1mdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbGlzdGVuZXI7IG11c3QgYmUgYSBmdW5jdGlvbi5cIil9LE1lPWZ1bmN0aW9uKGUsdCl7dmFyIG4saSxyLHM9dC5sZW5ndGg8M3x8dFswXT09PWV8fHRbMF09PT1lLmV2ZW50QnVzRWxfO3JldHVybiByPXM/KG49ZS5ldmVudEJ1c0VsXywzPD10Lmxlbmd0aCYmdC5zaGlmdCgpLGk9dFswXSx0WzFdKToobj10WzBdLGk9dFsxXSx0WzJdKSxqZShuKSxQZShpKSxBZShyKSx7aXNUYXJnZXRpbmdTZWxmOnMsdGFyZ2V0Om4sdHlwZTppLGxpc3RlbmVyOnI9Q2UoZSxyKX19LExlPWZ1bmN0aW9uKGUsdCxuLGkpe2plKGUpLGUubm9kZU5hbWU/Z2VbdF0oZSxuLGkpOmVbdF0obixpKX0sTmU9e29uOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMsdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQpLGk9MDtpPHQ7aSsrKW5baV09YXJndW1lbnRzW2ldO3ZhciByPU1lKHRoaXMsbikscz1yLmlzVGFyZ2V0aW5nU2VsZixvPXIudGFyZ2V0LGE9ci50eXBlLGw9ci5saXN0ZW5lcjtpZihMZShvLFwib25cIixhLGwpLCFzKXt2YXIgYz1mdW5jdGlvbigpe3JldHVybiBlLm9mZihvLGEsbCl9O2MuZ3VpZD1sLmd1aWQ7dmFyIHU9ZnVuY3Rpb24oKXtyZXR1cm4gZS5vZmYoXCJkaXNwb3NlXCIsYyl9O3UuZ3VpZD1sLmd1aWQsTGUodGhpcyxcIm9uXCIsXCJkaXNwb3NlXCIsYyksTGUobyxcIm9uXCIsXCJkaXNwb3NlXCIsdSl9fSxvbmU6ZnVuY3Rpb24oKXtmb3IodmFyIHI9dGhpcyxlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSksbj0wO248ZTtuKyspdFtuXT1hcmd1bWVudHNbbl07dmFyIGk9TWUodGhpcyx0KSxzPWkuaXNUYXJnZXRpbmdTZWxmLG89aS50YXJnZXQsYT1pLnR5cGUsbD1pLmxpc3RlbmVyO2lmKHMpTGUobyxcIm9uZVwiLGEsbCk7ZWxzZXt2YXIgYz1mdW5jdGlvbiBlKCl7ci5vZmYobyxhLGUpO2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQpLGk9MDtpPHQ7aSsrKW5baV09YXJndW1lbnRzW2ldO2wuYXBwbHkobnVsbCxuKX07Yy5ndWlkPWwuZ3VpZCxMZShvLFwib25lXCIsYSxjKX19LG9mZjpmdW5jdGlvbihlLHQsbil7aWYoIWV8fHhlKGUpKWRlKHRoaXMuZXZlbnRCdXNFbF8sZSx0KTtlbHNle3ZhciBpPWUscj10O2plKGkpLFBlKHIpLEFlKG4pLG49Q2UodGhpcyxuKSx0aGlzLm9mZihcImRpc3Bvc2VcIixuKSxpLm5vZGVOYW1lPyhkZShpLHIsbiksZGUoaSxcImRpc3Bvc2VcIixuKSk6d2UoaSkmJihpLm9mZihyLG4pLGkub2ZmKFwiZGlzcG9zZVwiLG4pKX19LHRyaWdnZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcGUodGhpcy5ldmVudEJ1c0VsXyxlLHQpfX07ZnVuY3Rpb24gT2UoZSx0KXt2b2lkIDA9PT10JiYodD17fSk7dmFyIG49dC5ldmVudEJ1c0tleTtpZihuKXtpZighZVtuXS5ub2RlTmFtZSl0aHJvdyBuZXcgRXJyb3IoJ1RoZSBldmVudEJ1c0tleSBcIicrbisnXCIgZG9lcyBub3QgcmVmZXIgdG8gYW4gZWxlbWVudC4nKTtlLmV2ZW50QnVzRWxfPWVbbl19ZWxzZSBlLmV2ZW50QnVzRWxfPXgoXCJzcGFuXCIse2NsYXNzTmFtZTpcInZqcy1ldmVudC1idXNcIn0pO3JldHVybiBtKGUsTmUpLGUuZXZlbnRlZENhbGxiYWNrcyYmZS5ldmVudGVkQ2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24oZSl7ZSgpfSksZS5vbihcImRpc3Bvc2VcIixmdW5jdGlvbigpe2Uub2ZmKCksaC5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5ldmVudEJ1c0VsXz1udWxsfSwwKX0pLGV9dmFyIERlPXtzdGF0ZTp7fSxzZXRTdGF0ZTpmdW5jdGlvbihlKXt2YXIgbixpPXRoaXM7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmKGU9ZSgpKSxhKGUsZnVuY3Rpb24oZSx0KXtpLnN0YXRlW3RdIT09ZSYmKChuPW58fHt9KVt0XT17ZnJvbTppLnN0YXRlW3RdLHRvOmV9KSxpLnN0YXRlW3RdPWV9KSxuJiZ3ZSh0aGlzKSYmdGhpcy50cmlnZ2VyKHtjaGFuZ2VzOm4sdHlwZTpcInN0YXRlY2hhbmdlZFwifSksbn19O2Z1bmN0aW9uIEllKGUsdCl7cmV0dXJuIG0oZSxEZSksZS5zdGF0ZT1tKHt9LGUuc3RhdGUsdCksXCJmdW5jdGlvblwiPT10eXBlb2YgZS5oYW5kbGVTdGF0ZUNoYW5nZWQmJndlKGUpJiZlLm9uKFwic3RhdGVjaGFuZ2VkXCIsZS5oYW5kbGVTdGF0ZUNoYW5nZWQpLGV9ZnVuY3Rpb24gRmUoZSl7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGU/ZTplLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSl9ZnVuY3Rpb24gUmUoKXtmb3IodmFyIG49e30sZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLGk9MDtpPGU7aSsrKXRbaV09YXJndW1lbnRzW2ldO3JldHVybiB0LmZvckVhY2goZnVuY3Rpb24oZSl7ZSYmYShlLGZ1bmN0aW9uKGUsdCl7YyhlKT8oYyhuW3RdKXx8KG5bdF09e30pLG5bdF09UmUoblt0XSxlKSk6blt0XT1lfSl9KSxufXZhciBCZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGMoZSx0LG4pe2lmKCFlJiZ0aGlzLnBsYXk/dGhpcy5wbGF5ZXJfPWU9dGhpczp0aGlzLnBsYXllcl89ZSx0aGlzLnBhcmVudENvbXBvbmVudF89bnVsbCx0aGlzLm9wdGlvbnNfPVJlKHt9LHRoaXMub3B0aW9uc18pLHQ9dGhpcy5vcHRpb25zXz1SZSh0aGlzLm9wdGlvbnNfLHQpLHRoaXMuaWRfPXQuaWR8fHQuZWwmJnQuZWwuaWQsIXRoaXMuaWRfKXt2YXIgaT1lJiZlLmlkJiZlLmlkKCl8fFwibm9fcGxheWVyXCI7dGhpcy5pZF89aStcIl9jb21wb25lbnRfXCIrZWUoKX10aGlzLm5hbWVfPXQubmFtZXx8bnVsbCx0LmVsP3RoaXMuZWxfPXQuZWw6ITEhPT10LmNyZWF0ZUVsJiYodGhpcy5lbF89dGhpcy5jcmVhdGVFbCgpKSwhMSE9PXQuZXZlbnRlZCYmT2UodGhpcyx7ZXZlbnRCdXNLZXk6dGhpcy5lbF8/XCJlbF9cIjpudWxsfSksSWUodGhpcyx0aGlzLmNvbnN0cnVjdG9yLmRlZmF1bHRTdGF0ZSksdGhpcy5jaGlsZHJlbl89W10sdGhpcy5jaGlsZEluZGV4Xz17fSwhKHRoaXMuY2hpbGROYW1lSW5kZXhfPXt9KSE9PXQuaW5pdENoaWxkcmVuJiZ0aGlzLmluaXRDaGlsZHJlbigpLHRoaXMucmVhZHkobiksITEhPT10LnJlcG9ydFRvdWNoQWN0aXZpdHkmJnRoaXMuZW5hYmxlVG91Y2hBY3Rpdml0eSgpfXZhciBlPWMucHJvdG90eXBlO3JldHVybiBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXtpZih0aGlzLnRyaWdnZXIoe3R5cGU6XCJkaXNwb3NlXCIsYnViYmxlczohMX0pLHRoaXMuY2hpbGRyZW5fKWZvcih2YXIgZT10aGlzLmNoaWxkcmVuXy5sZW5ndGgtMTswPD1lO2UtLSl0aGlzLmNoaWxkcmVuX1tlXS5kaXNwb3NlJiZ0aGlzLmNoaWxkcmVuX1tlXS5kaXNwb3NlKCk7dGhpcy5jaGlsZHJlbl89bnVsbCx0aGlzLmNoaWxkSW5kZXhfPW51bGwsdGhpcy5jaGlsZE5hbWVJbmRleF89bnVsbCx0aGlzLnBhcmVudENvbXBvbmVudF89bnVsbCx0aGlzLmVsXyYmKHRoaXMuZWxfLnBhcmVudE5vZGUmJnRoaXMuZWxfLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbF8pLHNlKHRoaXMuZWxfKSx0aGlzLmVsXz1udWxsKSx0aGlzLnBsYXllcl89bnVsbH0sZS5wbGF5ZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wbGF5ZXJffSxlLm9wdGlvbnM9ZnVuY3Rpb24oZSl7cmV0dXJuIGcud2FybihcInRoaXMub3B0aW9ucygpIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgbW92ZWQgdG8gdGhlIGNvbnN0cnVjdG9yIGluIDYuMFwiKSxlJiYodGhpcy5vcHRpb25zXz1SZSh0aGlzLm9wdGlvbnNfLGUpKSx0aGlzLm9wdGlvbnNffSxlLmVsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWxffSxlLmNyZWF0ZUVsPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4geChlLHQsbil9LGUubG9jYWxpemU9ZnVuY3Rpb24oZSxyLHQpe3ZvaWQgMD09PXQmJih0PWUpO3ZhciBuPXRoaXMucGxheWVyXy5sYW5ndWFnZSYmdGhpcy5wbGF5ZXJfLmxhbmd1YWdlKCksaT10aGlzLnBsYXllcl8ubGFuZ3VhZ2VzJiZ0aGlzLnBsYXllcl8ubGFuZ3VhZ2VzKCkscz1pJiZpW25dLG89biYmbi5zcGxpdChcIi1cIilbMF0sYT1pJiZpW29dLGw9dDtyZXR1cm4gcyYmc1tlXT9sPXNbZV06YSYmYVtlXSYmKGw9YVtlXSksciYmKGw9bC5yZXBsYWNlKC9cXHsoXFxkKylcXH0vZyxmdW5jdGlvbihlLHQpe3ZhciBuPXJbdC0xXSxpPW47cmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIG4mJihpPWUpLGl9KSksbH0sZS5jb250ZW50RWw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb250ZW50RWxffHx0aGlzLmVsX30sZS5pZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlkX30sZS5uYW1lPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmFtZV99LGUuY2hpbGRyZW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaGlsZHJlbl99LGUuZ2V0Q2hpbGRCeUlkPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNoaWxkSW5kZXhfW2VdfSxlLmdldENoaWxkPWZ1bmN0aW9uKGUpe2lmKGUpcmV0dXJuIGU9RmUoZSksdGhpcy5jaGlsZE5hbWVJbmRleF9bZV19LGUuYWRkQ2hpbGQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciBpLHI7aWYodm9pZCAwPT09dCYmKHQ9e30pLHZvaWQgMD09PW4mJihuPXRoaXMuY2hpbGRyZW5fLmxlbmd0aCksXCJzdHJpbmdcIj09dHlwZW9mIGUpe3I9RmUoZSk7dmFyIHM9dC5jb21wb25lbnRDbGFzc3x8cjt0Lm5hbWU9cjt2YXIgbz1jLmdldENvbXBvbmVudChzKTtpZighbyl0aHJvdyBuZXcgRXJyb3IoXCJDb21wb25lbnQgXCIrcytcIiBkb2VzIG5vdCBleGlzdFwiKTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBvKXJldHVybiBudWxsO2k9bmV3IG8odGhpcy5wbGF5ZXJffHx0aGlzLHQpfWVsc2UgaT1lO2lmKGkucGFyZW50Q29tcG9uZW50XyYmaS5wYXJlbnRDb21wb25lbnRfLnJlbW92ZUNoaWxkKGkpLHRoaXMuY2hpbGRyZW5fLnNwbGljZShuLDAsaSksaS5wYXJlbnRDb21wb25lbnRfPXRoaXMsXCJmdW5jdGlvblwiPT10eXBlb2YgaS5pZCYmKHRoaXMuY2hpbGRJbmRleF9baS5pZCgpXT1pKSwocj1yfHxpLm5hbWUmJkZlKGkubmFtZSgpKSkmJih0aGlzLmNoaWxkTmFtZUluZGV4X1tyXT1pKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBpLmVsJiZpLmVsKCkpe3ZhciBhPXRoaXMuY29udGVudEVsKCkuY2hpbGRyZW5bbl18fG51bGw7dGhpcy5jb250ZW50RWwoKS5pbnNlcnRCZWZvcmUoaS5lbCgpLGEpfXJldHVybiBpfSxlLnJlbW92ZUNoaWxkPWZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT10aGlzLmdldENoaWxkKGUpKSxlJiZ0aGlzLmNoaWxkcmVuXyl7Zm9yKHZhciB0PSExLG49dGhpcy5jaGlsZHJlbl8ubGVuZ3RoLTE7MDw9bjtuLS0paWYodGhpcy5jaGlsZHJlbl9bbl09PT1lKXt0PSEwLHRoaXMuY2hpbGRyZW5fLnNwbGljZShuLDEpO2JyZWFrfWlmKHQpe2UucGFyZW50Q29tcG9uZW50Xz1udWxsLHRoaXMuY2hpbGRJbmRleF9bZS5pZCgpXT1udWxsLHRoaXMuY2hpbGROYW1lSW5kZXhfW2UubmFtZSgpXT1udWxsO3ZhciBpPWUuZWwoKTtpJiZpLnBhcmVudE5vZGU9PT10aGlzLmNvbnRlbnRFbCgpJiZ0aGlzLmNvbnRlbnRFbCgpLnJlbW92ZUNoaWxkKGUuZWwoKSl9fX0sZS5pbml0Q2hpbGRyZW49ZnVuY3Rpb24oKXt2YXIgcj10aGlzLGk9dGhpcy5vcHRpb25zXy5jaGlsZHJlbjtpZihpKXt2YXIgZSxzPXRoaXMub3B0aW9uc18sbj1jLmdldENvbXBvbmVudChcIlRlY2hcIik7KGU9QXJyYXkuaXNBcnJheShpKT9pOk9iamVjdC5rZXlzKGkpKS5jb25jYXQoT2JqZWN0LmtleXModGhpcy5vcHRpb25zXykuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiFlLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGU/dD09PWU6dD09PWUubmFtZX0pfSkpLm1hcChmdW5jdGlvbihlKXt2YXIgdCxuO3JldHVybiBuPVwic3RyaW5nXCI9PXR5cGVvZiBlP2lbdD1lXXx8ci5vcHRpb25zX1t0XXx8e306KHQ9ZS5uYW1lLGUpLHtuYW1lOnQsb3B0czpufX0pLmZpbHRlcihmdW5jdGlvbihlKXt2YXIgdD1jLmdldENvbXBvbmVudChlLm9wdHMuY29tcG9uZW50Q2xhc3N8fEZlKGUubmFtZSkpO3JldHVybiB0JiYhbi5pc1RlY2godCl9KS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PWUubmFtZSxuPWUub3B0cztpZih2b2lkIDAhPT1zW3RdJiYobj1zW3RdKSwhMSE9PW4peyEwPT09biYmKG49e30pLG4ucGxheWVyT3B0aW9ucz1yLm9wdGlvbnNfLnBsYXllck9wdGlvbnM7dmFyIGk9ci5hZGRDaGlsZCh0LG4pO2kmJihyW3RdPWkpfX0pfX0sZS5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJcIn0sZS5yZWFkeT1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PXQmJih0PSExKSxlKXJldHVybiB0aGlzLmlzUmVhZHlfP3ZvaWQodD9lLmNhbGwodGhpcyk6dGhpcy5zZXRUaW1lb3V0KGUsMSkpOih0aGlzLnJlYWR5UXVldWVfPXRoaXMucmVhZHlRdWV1ZV98fFtdLHZvaWQgdGhpcy5yZWFkeVF1ZXVlXy5wdXNoKGUpKX0sZS50cmlnZ2VyUmVhZHk9ZnVuY3Rpb24oKXt0aGlzLmlzUmVhZHlfPSEwLHRoaXMuc2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBlPXRoaXMucmVhZHlRdWV1ZV87dGhpcy5yZWFkeVF1ZXVlXz1bXSxlJiYwPGUubGVuZ3RoJiZlLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5jYWxsKHRoaXMpfSx0aGlzKSx0aGlzLnRyaWdnZXIoXCJyZWFkeVwiKX0sMSl9LGUuJD1mdW5jdGlvbihlLHQpe3JldHVybiBZKGUsdHx8dGhpcy5jb250ZW50RWwoKSl9LGUuJCQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gUShlLHR8fHRoaXMuY29udGVudEVsKCkpfSxlLmhhc0NsYXNzPWZ1bmN0aW9uKGUpe3JldHVybiBBKHRoaXMuZWxfLGUpfSxlLmFkZENsYXNzPWZ1bmN0aW9uKGUpe00odGhpcy5lbF8sZSl9LGUucmVtb3ZlQ2xhc3M9ZnVuY3Rpb24oZSl7TCh0aGlzLmVsXyxlKX0sZS50b2dnbGVDbGFzcz1mdW5jdGlvbihlLHQpe04odGhpcy5lbF8sZSx0KX0sZS5zaG93PWZ1bmN0aW9uKCl7dGhpcy5yZW1vdmVDbGFzcyhcInZqcy1oaWRkZW5cIil9LGUuaGlkZT1mdW5jdGlvbigpe3RoaXMuYWRkQ2xhc3MoXCJ2anMtaGlkZGVuXCIpfSxlLmxvY2tTaG93aW5nPWZ1bmN0aW9uKCl7dGhpcy5hZGRDbGFzcyhcInZqcy1sb2NrLXNob3dpbmdcIil9LGUudW5sb2NrU2hvd2luZz1mdW5jdGlvbigpe3RoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtbG9jay1zaG93aW5nXCIpfSxlLmdldEF0dHJpYnV0ZT1mdW5jdGlvbihlKXtyZXR1cm4gSSh0aGlzLmVsXyxlKX0sZS5zZXRBdHRyaWJ1dGU9ZnVuY3Rpb24oZSx0KXtGKHRoaXMuZWxfLGUsdCl9LGUucmVtb3ZlQXR0cmlidXRlPWZ1bmN0aW9uKGUpe1IodGhpcy5lbF8sZSl9LGUud2lkdGg9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5kaW1lbnNpb24oXCJ3aWR0aFwiLGUsdCl9LGUuaGVpZ2h0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZGltZW5zaW9uKFwiaGVpZ2h0XCIsZSx0KX0sZS5kaW1lbnNpb25zPWZ1bmN0aW9uKGUsdCl7dGhpcy53aWR0aChlLCEwKSx0aGlzLmhlaWdodCh0KX0sZS5kaW1lbnNpb249ZnVuY3Rpb24oZSx0LG4pe2lmKHZvaWQgMCE9PXQpcmV0dXJuIG51bGwhPT10JiZ0PT10fHwodD0wKSwtMSE9PShcIlwiK3QpLmluZGV4T2YoXCIlXCIpfHwtMSE9PShcIlwiK3QpLmluZGV4T2YoXCJweFwiKT90aGlzLmVsXy5zdHlsZVtlXT10OnRoaXMuZWxfLnN0eWxlW2VdPVwiYXV0b1wiPT09dD9cIlwiOnQrXCJweFwiLHZvaWQobnx8dGhpcy50cmlnZ2VyKFwiY29tcG9uZW50cmVzaXplXCIpKTtpZighdGhpcy5lbF8pcmV0dXJuIDA7dmFyIGk9dGhpcy5lbF8uc3R5bGVbZV0scj1pLmluZGV4T2YoXCJweFwiKTtyZXR1cm4tMSE9PXI/cGFyc2VJbnQoaS5zbGljZSgwLHIpLDEwKTpwYXJzZUludCh0aGlzLmVsX1tcIm9mZnNldFwiK0ZlKGUpXSwxMCl9LGUuY3VycmVudERpbWVuc2lvbj1mdW5jdGlvbihlKXt2YXIgdD0wO2lmKFwid2lkdGhcIiE9PWUmJlwiaGVpZ2h0XCIhPT1lKXRocm93IG5ldyBFcnJvcihcImN1cnJlbnREaW1lbnNpb24gb25seSBhY2NlcHRzIHdpZHRoIG9yIGhlaWdodCB2YWx1ZVwiKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBoLmdldENvbXB1dGVkU3R5bGUpe3ZhciBuPWguZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsXyk7dD1uLmdldFByb3BlcnR5VmFsdWUoZSl8fG5bZV19aWYoMD09PSh0PXBhcnNlRmxvYXQodCkpKXt2YXIgaT1cIm9mZnNldFwiK0ZlKGUpO3Q9dGhpcy5lbF9baV19cmV0dXJuIHR9LGUuY3VycmVudERpbWVuc2lvbnM9ZnVuY3Rpb24oKXtyZXR1cm57d2lkdGg6dGhpcy5jdXJyZW50RGltZW5zaW9uKFwid2lkdGhcIiksaGVpZ2h0OnRoaXMuY3VycmVudERpbWVuc2lvbihcImhlaWdodFwiKX19LGUuY3VycmVudFdpZHRoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3VycmVudERpbWVuc2lvbihcIndpZHRoXCIpfSxlLmN1cnJlbnRIZWlnaHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdXJyZW50RGltZW5zaW9uKFwiaGVpZ2h0XCIpfSxlLmZvY3VzPWZ1bmN0aW9uKCl7dGhpcy5lbF8uZm9jdXMoKX0sZS5ibHVyPWZ1bmN0aW9uKCl7dGhpcy5lbF8uYmx1cigpfSxlLmhhbmRsZUtleVByZXNzPWZ1bmN0aW9uKGUpe3RoaXMucGxheWVyXyYmdGhpcy5wbGF5ZXJfLmhhbmRsZUtleVByZXNzKGUpfSxlLmVtaXRUYXBFdmVudHM9ZnVuY3Rpb24oKXt2YXIgaSx0PTAscj1udWxsO3RoaXMub24oXCJ0b3VjaHN0YXJ0XCIsZnVuY3Rpb24oZSl7MT09PWUudG91Y2hlcy5sZW5ndGgmJihyPXtwYWdlWDplLnRvdWNoZXNbMF0ucGFnZVgscGFnZVk6ZS50b3VjaGVzWzBdLnBhZ2VZfSx0PShuZXcgRGF0ZSkuZ2V0VGltZSgpLGk9ITApfSksdGhpcy5vbihcInRvdWNobW92ZVwiLGZ1bmN0aW9uKGUpe2lmKDE8ZS50b3VjaGVzLmxlbmd0aClpPSExO2Vsc2UgaWYocil7dmFyIHQ9ZS50b3VjaGVzWzBdLnBhZ2VYLXIucGFnZVgsbj1lLnRvdWNoZXNbMF0ucGFnZVktci5wYWdlWTsxMDxNYXRoLnNxcnQodCp0K24qbikmJihpPSExKX19KTt2YXIgZT1mdW5jdGlvbigpe2k9ITF9O3RoaXMub24oXCJ0b3VjaGxlYXZlXCIsZSksdGhpcy5vbihcInRvdWNoY2FuY2VsXCIsZSksdGhpcy5vbihcInRvdWNoZW5kXCIsZnVuY3Rpb24oZSl7IShyPW51bGwpPT09aSYmKChuZXcgRGF0ZSkuZ2V0VGltZSgpLXQ8MjAwJiYoZS5wcmV2ZW50RGVmYXVsdCgpLHRoaXMudHJpZ2dlcihcInRhcFwiKSkpfSl9LGUuZW5hYmxlVG91Y2hBY3Rpdml0eT1mdW5jdGlvbigpe2lmKHRoaXMucGxheWVyKCkmJnRoaXMucGxheWVyKCkucmVwb3J0VXNlckFjdGl2aXR5KXt2YXIgdCxuPUNlKHRoaXMucGxheWVyKCksdGhpcy5wbGF5ZXIoKS5yZXBvcnRVc2VyQWN0aXZpdHkpO3RoaXMub24oXCJ0b3VjaHN0YXJ0XCIsZnVuY3Rpb24oKXtuKCksdGhpcy5jbGVhckludGVydmFsKHQpLHQ9dGhpcy5zZXRJbnRlcnZhbChuLDI1MCl9KTt2YXIgZT1mdW5jdGlvbihlKXtuKCksdGhpcy5jbGVhckludGVydmFsKHQpfTt0aGlzLm9uKFwidG91Y2htb3ZlXCIsbiksdGhpcy5vbihcInRvdWNoZW5kXCIsZSksdGhpcy5vbihcInRvdWNoY2FuY2VsXCIsZSl9fSxlLnNldFRpbWVvdXQ9ZnVuY3Rpb24oZSx0KXt2YXIgbixpLHI9dGhpcztyZXR1cm4gZT1DZSh0aGlzLGUpLG49aC5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ci5vZmYoXCJkaXNwb3NlXCIsaSksZSgpfSx0KSwoaT1mdW5jdGlvbigpe3JldHVybiByLmNsZWFyVGltZW91dChuKX0pLmd1aWQ9XCJ2anMtdGltZW91dC1cIituLHRoaXMub24oXCJkaXNwb3NlXCIsaSksbn0sZS5jbGVhclRpbWVvdXQ9ZnVuY3Rpb24oZSl7aC5jbGVhclRpbWVvdXQoZSk7dmFyIHQ9ZnVuY3Rpb24oKXt9O3JldHVybiB0Lmd1aWQ9XCJ2anMtdGltZW91dC1cIitlLHRoaXMub2ZmKFwiZGlzcG9zZVwiLHQpLGV9LGUuc2V0SW50ZXJ2YWw9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO2U9Q2UodGhpcyxlKTt2YXIgaT1oLnNldEludGVydmFsKGUsdCkscj1mdW5jdGlvbigpe3JldHVybiBuLmNsZWFySW50ZXJ2YWwoaSl9O3JldHVybiByLmd1aWQ9XCJ2anMtaW50ZXJ2YWwtXCIraSx0aGlzLm9uKFwiZGlzcG9zZVwiLHIpLGl9LGUuY2xlYXJJbnRlcnZhbD1mdW5jdGlvbihlKXtoLmNsZWFySW50ZXJ2YWwoZSk7dmFyIHQ9ZnVuY3Rpb24oKXt9O3JldHVybiB0Lmd1aWQ9XCJ2anMtaW50ZXJ2YWwtXCIrZSx0aGlzLm9mZihcImRpc3Bvc2VcIix0KSxlfSxlLnJlcXVlc3RBbmltYXRpb25GcmFtZT1mdW5jdGlvbihlKXt2YXIgdCxuLGk9dGhpcztyZXR1cm4gdGhpcy5zdXBwb3J0c1JhZl8/KGU9Q2UodGhpcyxlKSx0PWgucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7aS5vZmYoXCJkaXNwb3NlXCIsbiksZSgpfSksKG49ZnVuY3Rpb24oKXtyZXR1cm4gaS5jYW5jZWxBbmltYXRpb25GcmFtZSh0KX0pLmd1aWQ9XCJ2anMtcmFmLVwiK3QsdGhpcy5vbihcImRpc3Bvc2VcIixuKSx0KTp0aGlzLnNldFRpbWVvdXQoZSwxZTMvNjApfSxlLmNhbmNlbEFuaW1hdGlvbkZyYW1lPWZ1bmN0aW9uKGUpe2lmKHRoaXMuc3VwcG9ydHNSYWZfKXtoLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGUpO3ZhciB0PWZ1bmN0aW9uKCl7fTtyZXR1cm4gdC5ndWlkPVwidmpzLXJhZi1cIitlLHRoaXMub2ZmKFwiZGlzcG9zZVwiLHQpLGV9cmV0dXJuIHRoaXMuY2xlYXJUaW1lb3V0KGUpfSxjLnJlZ2lzdGVyQ29tcG9uZW50PWZ1bmN0aW9uKGUsdCl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGV8fCFlKXRocm93IG5ldyBFcnJvcignSWxsZWdhbCBjb21wb25lbnQgbmFtZSwgXCInK2UrJ1wiOyBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZy4nKTt2YXIgbixpPWMuZ2V0Q29tcG9uZW50KFwiVGVjaFwiKSxyPWkmJmkuaXNUZWNoKHQpLHM9Yz09PXR8fGMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YodC5wcm90b3R5cGUpO2lmKHJ8fCFzKXRocm93IG49cj9cInRlY2hzIG11c3QgYmUgcmVnaXN0ZXJlZCB1c2luZyBUZWNoLnJlZ2lzdGVyVGVjaCgpXCI6XCJtdXN0IGJlIGEgQ29tcG9uZW50IHN1YmNsYXNzXCIsbmV3IEVycm9yKCdJbGxlZ2FsIGNvbXBvbmVudCwgXCInK2UrJ1wiOyAnK24rXCIuXCIpO2U9RmUoZSksYy5jb21wb25lbnRzX3x8KGMuY29tcG9uZW50c189e30pO3ZhciBvPWMuZ2V0Q29tcG9uZW50KFwiUGxheWVyXCIpO2lmKFwiUGxheWVyXCI9PT1lJiZvJiZvLnBsYXllcnMpe3ZhciBhPW8ucGxheWVycyxsPU9iamVjdC5rZXlzKGEpO2lmKGEmJjA8bC5sZW5ndGgmJmwubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBhW2VdfSkuZXZlcnkoQm9vbGVhbikpdGhyb3cgbmV3IEVycm9yKFwiQ2FuIG5vdCByZWdpc3RlciBQbGF5ZXIgY29tcG9uZW50IGFmdGVyIHBsYXllciBoYXMgYmVlbiBjcmVhdGVkLlwiKX1yZXR1cm4gYy5jb21wb25lbnRzX1tlXT10fSxjLmdldENvbXBvbmVudD1mdW5jdGlvbihlKXtpZihlKXJldHVybiBlPUZlKGUpLGMuY29tcG9uZW50c18mJmMuY29tcG9uZW50c19bZV0/Yy5jb21wb25lbnRzX1tlXTp2b2lkIDB9LGN9KCk7QmUucHJvdG90eXBlLnN1cHBvcnRzUmFmXz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoLnJlcXVlc3RBbmltYXRpb25GcmFtZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgaC5jYW5jZWxBbmltYXRpb25GcmFtZSxCZS5yZWdpc3RlckNvbXBvbmVudChcIkNvbXBvbmVudFwiLEJlKTt2YXIgSGUsVmUsemUsS2UsV2U9aC5uYXZpZ2F0b3ImJmgubmF2aWdhdG9yLnVzZXJBZ2VudHx8XCJcIixVZT0vQXBwbGVXZWJLaXRcXC8oW1xcZC5dKykvaS5leGVjKFdlKSxxZT1VZT9wYXJzZUZsb2F0KFVlLnBvcCgpKTpudWxsLFhlPS9pUGFkL2kudGVzdChXZSksJGU9L2lQaG9uZS9pLnRlc3QoV2UpJiYhWGUsR2U9L2lQb2QvaS50ZXN0KFdlKSxZZT0kZXx8WGV8fEdlLFFlPShIZT1XZS5tYXRjaCgvT1MgKFxcZCspXy9pKSkmJkhlWzFdP0hlWzFdOm51bGwsSmU9L0FuZHJvaWQvaS50ZXN0KFdlKSxaZT1mdW5jdGlvbigpe3ZhciBlPVdlLm1hdGNoKC9BbmRyb2lkIChcXGQrKSg/OlxcLihcXGQrKSk/KD86XFwuKFxcZCspKSovaSk7aWYoIWUpcmV0dXJuIG51bGw7dmFyIHQ9ZVsxXSYmcGFyc2VGbG9hdChlWzFdKSxuPWVbMl0mJnBhcnNlRmxvYXQoZVsyXSk7cmV0dXJuIHQmJm4/cGFyc2VGbG9hdChlWzFdK1wiLlwiK2VbMl0pOnR8fG51bGx9KCksZXQ9SmUmJlplPDUmJnFlPDUzNyx0dD0vRmlyZWZveC9pLnRlc3QoV2UpLG50PS9FZGdlL2kudGVzdChXZSksaXQ9IW50JiYoL0Nocm9tZS9pLnRlc3QoV2UpfHwvQ3JpT1MvaS50ZXN0KFdlKSkscnQ9KFZlPVdlLm1hdGNoKC8oQ2hyb21lfENyaU9TKVxcLyhcXGQrKS8pKSYmVmVbMl0/cGFyc2VGbG9hdChWZVsyXSk6bnVsbCxzdD0oemU9L01TSUVcXHMoXFxkKylcXC5cXGQvLmV4ZWMoV2UpLCEoS2U9emUmJnBhcnNlRmxvYXQoemVbMV0pKSYmL1RyaWRlbnRcXC83LjAvaS50ZXN0KFdlKSYmL3J2OjExLjAvLnRlc3QoV2UpJiYoS2U9MTEpLEtlKSxvdD0vU2FmYXJpL2kudGVzdChXZSkmJiFpdCYmIUplJiYhbnQsYXQ9KG90fHxZZSkmJiFpdCxsdD1DKCkmJihcIm9udG91Y2hzdGFydFwiaW4gaHx8aC5uYXZpZ2F0b3IubWF4VG91Y2hQb2ludHN8fGguRG9jdW1lbnRUb3VjaCYmaC5kb2N1bWVudCBpbnN0YW5jZW9mIGguRG9jdW1lbnRUb3VjaCksY3Q9T2JqZWN0LmZyZWV6ZSh7SVNfSVBBRDpYZSxJU19JUEhPTkU6JGUsSVNfSVBPRDpHZSxJU19JT1M6WWUsSU9TX1ZFUlNJT046UWUsSVNfQU5EUk9JRDpKZSxBTkRST0lEX1ZFUlNJT046WmUsSVNfTkFUSVZFX0FORFJPSUQ6ZXQsSVNfRklSRUZPWDp0dCxJU19FREdFOm50LElTX0NIUk9NRTppdCxDSFJPTUVfVkVSU0lPTjpydCxJRV9WRVJTSU9OOnN0LElTX1NBRkFSSTpvdCxJU19BTllfU0FGQVJJOmF0LFRPVUNIX0VOQUJMRUQ6bHR9KTtmdW5jdGlvbiB1dChlLHQsbixpKXtyZXR1cm4gZnVuY3Rpb24oZSx0LG4pe2lmKFwibnVtYmVyXCIhPXR5cGVvZiB0fHx0PDB8fG48dCl0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnXCIrZStcIicgb24gJ1RpbWVSYW5nZXMnOiBUaGUgaW5kZXggcHJvdmlkZWQgKFwiK3QrXCIpIGlzIG5vbi1udW1lcmljIG9yIG91dCBvZiBib3VuZHMgKDAtXCIrbitcIikuXCIpfShlLGksbi5sZW5ndGgtMSksbltpXVt0XX1mdW5jdGlvbiBodChlKXtyZXR1cm4gdm9pZCAwPT09ZXx8MD09PWUubGVuZ3RoP3tsZW5ndGg6MCxzdGFydDpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgVGltZVJhbmdlcyBvYmplY3QgaXMgZW1wdHlcIil9LGVuZDpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgVGltZVJhbmdlcyBvYmplY3QgaXMgZW1wdHlcIil9fTp7bGVuZ3RoOmUubGVuZ3RoLHN0YXJ0OnV0LmJpbmQobnVsbCxcInN0YXJ0XCIsMCxlKSxlbmQ6dXQuYmluZChudWxsLFwiZW5kXCIsMSxlKX19ZnVuY3Rpb24gZHQoZSx0KXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT9odChlKTp2b2lkIDA9PT1lfHx2b2lkIDA9PT10P2h0KCk6aHQoW1tlLHRdXSl9ZnVuY3Rpb24gcHQoZSx0KXt2YXIgbixpLHI9MDtpZighdClyZXR1cm4gMDtlJiZlLmxlbmd0aHx8KGU9ZHQoMCwwKSk7Zm9yKHZhciBzPTA7czxlLmxlbmd0aDtzKyspbj1lLnN0YXJ0KHMpLHQ8KGk9ZS5lbmQocykpJiYoaT10KSxyKz1pLW47cmV0dXJuIHIvdH1mb3IodmFyIGZ0LHZ0PXt9LGd0PVtbXCJyZXF1ZXN0RnVsbHNjcmVlblwiLFwiZXhpdEZ1bGxzY3JlZW5cIixcImZ1bGxzY3JlZW5FbGVtZW50XCIsXCJmdWxsc2NyZWVuRW5hYmxlZFwiLFwiZnVsbHNjcmVlbmNoYW5nZVwiLFwiZnVsbHNjcmVlbmVycm9yXCIsXCJmdWxsc2NyZWVuXCJdLFtcIndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuXCIsXCJ3ZWJraXRFeGl0RnVsbHNjcmVlblwiLFwid2Via2l0RnVsbHNjcmVlbkVsZW1lbnRcIixcIndlYmtpdEZ1bGxzY3JlZW5FbmFibGVkXCIsXCJ3ZWJraXRmdWxsc2NyZWVuY2hhbmdlXCIsXCJ3ZWJraXRmdWxsc2NyZWVuZXJyb3JcIixcIi13ZWJraXQtZnVsbC1zY3JlZW5cIl0sW1wibW96UmVxdWVzdEZ1bGxTY3JlZW5cIixcIm1vekNhbmNlbEZ1bGxTY3JlZW5cIixcIm1vekZ1bGxTY3JlZW5FbGVtZW50XCIsXCJtb3pGdWxsU2NyZWVuRW5hYmxlZFwiLFwibW96ZnVsbHNjcmVlbmNoYW5nZVwiLFwibW96ZnVsbHNjcmVlbmVycm9yXCIsXCItbW96LWZ1bGwtc2NyZWVuXCJdLFtcIm1zUmVxdWVzdEZ1bGxzY3JlZW5cIixcIm1zRXhpdEZ1bGxzY3JlZW5cIixcIm1zRnVsbHNjcmVlbkVsZW1lbnRcIixcIm1zRnVsbHNjcmVlbkVuYWJsZWRcIixcIk1TRnVsbHNjcmVlbkNoYW5nZVwiLFwiTVNGdWxsc2NyZWVuRXJyb3JcIixcIi1tcy1mdWxsc2NyZWVuXCJdXSx5dD1ndFswXSxfdD0hMSxtdD0wO210PGd0Lmxlbmd0aDttdCsrKWlmKGd0W210XVsxXWluIGQpe2Z0PWd0W210XTticmVha31pZihmdCl7Zm9yKHZhciBidD0wO2J0PGZ0Lmxlbmd0aDtidCsrKXZ0W3l0W2J0XV09ZnRbYnRdO190PWZ0WzBdPT09eXRbMF19ZnVuY3Rpb24gVHQoZSl7aWYoZSBpbnN0YW5jZW9mIFR0KXJldHVybiBlO1wibnVtYmVyXCI9PXR5cGVvZiBlP3RoaXMuY29kZT1lOlwic3RyaW5nXCI9PXR5cGVvZiBlP3RoaXMubWVzc2FnZT1lOmIoZSkmJihcIm51bWJlclwiPT10eXBlb2YgZS5jb2RlJiYodGhpcy5jb2RlPWUuY29kZSksbSh0aGlzLGUpKSx0aGlzLm1lc3NhZ2V8fCh0aGlzLm1lc3NhZ2U9VHQuZGVmYXVsdE1lc3NhZ2VzW3RoaXMuY29kZV18fFwiXCIpfVR0LnByb3RvdHlwZS5jb2RlPTAsVHQucHJvdG90eXBlLm1lc3NhZ2U9XCJcIixUdC5wcm90b3R5cGUuc3RhdHVzPW51bGwsVHQuZXJyb3JUeXBlcz1bXCJNRURJQV9FUlJfQ1VTVE9NXCIsXCJNRURJQV9FUlJfQUJPUlRFRFwiLFwiTUVESUFfRVJSX05FVFdPUktcIixcIk1FRElBX0VSUl9ERUNPREVcIixcIk1FRElBX0VSUl9TUkNfTk9UX1NVUFBPUlRFRFwiLFwiTUVESUFfRVJSX0VOQ1JZUFRFRFwiXSxUdC5kZWZhdWx0TWVzc2FnZXM9ezE6XCJZb3UgYWJvcnRlZCB0aGUgbWVkaWEgcGxheWJhY2tcIiwyOlwiQSBuZXR3b3JrIGVycm9yIGNhdXNlZCB0aGUgbWVkaWEgZG93bmxvYWQgdG8gZmFpbCBwYXJ0LXdheS5cIiwzOlwiVGhlIG1lZGlhIHBsYXliYWNrIHdhcyBhYm9ydGVkIGR1ZSB0byBhIGNvcnJ1cHRpb24gcHJvYmxlbSBvciBiZWNhdXNlIHRoZSBtZWRpYSB1c2VkIGZlYXR1cmVzIHlvdXIgYnJvd3NlciBkaWQgbm90IHN1cHBvcnQuXCIsNDpcIlRoZSBtZWRpYSBjb3VsZCBub3QgYmUgbG9hZGVkLCBlaXRoZXIgYmVjYXVzZSB0aGUgc2VydmVyIG9yIG5ldHdvcmsgZmFpbGVkIG9yIGJlY2F1c2UgdGhlIGZvcm1hdCBpcyBub3Qgc3VwcG9ydGVkLlwiLDU6XCJUaGUgbWVkaWEgaXMgZW5jcnlwdGVkIGFuZCB3ZSBkbyBub3QgaGF2ZSB0aGUga2V5cyB0byBkZWNyeXB0IGl0LlwifTtmb3IodmFyIGt0PTA7a3Q8VHQuZXJyb3JUeXBlcy5sZW5ndGg7a3QrKylUdFtUdC5lcnJvclR5cGVzW2t0XV09a3QsVHQucHJvdG90eXBlW1R0LmVycm9yVHlwZXNba3RdXT1rdDt2YXIgQ3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbixpPW51bGw7dHJ5e249SlNPTi5wYXJzZShlLHQpfWNhdGNoKGUpe2k9ZX1yZXR1cm5baSxuXX07ZnVuY3Rpb24gRXQoZSl7cmV0dXJuIG51bGwhPWUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUudGhlbn1mdW5jdGlvbiBTdChlKXtFdChlKSYmZS50aGVuKG51bGwsZnVuY3Rpb24oZSl7fSl9dmFyIHd0PWZ1bmN0aW9uKGkpe3JldHVybltcImtpbmRcIixcImxhYmVsXCIsXCJsYW5ndWFnZVwiLFwiaWRcIixcImluQmFuZE1ldGFkYXRhVHJhY2tEaXNwYXRjaFR5cGVcIixcIm1vZGVcIixcInNyY1wiXS5yZWR1Y2UoZnVuY3Rpb24oZSx0LG4pe3JldHVybiBpW3RdJiYoZVt0XT1pW3RdKSxlfSx7Y3VlczppLmN1ZXMmJkFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChpLmN1ZXMsZnVuY3Rpb24oZSl7cmV0dXJue3N0YXJ0VGltZTplLnN0YXJ0VGltZSxlbmRUaW1lOmUuZW5kVGltZSx0ZXh0OmUudGV4dCxpZDplLmlkfX0pfSl9LHh0PWZ1bmN0aW9uKGUpe3ZhciB0PWUuJCQoXCJ0cmFja1wiKSxuPUFycmF5LnByb3RvdHlwZS5tYXAuY2FsbCh0LGZ1bmN0aW9uKGUpe3JldHVybiBlLnRyYWNrfSk7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbCh0LGZ1bmN0aW9uKGUpe3ZhciB0PXd0KGUudHJhY2spO3JldHVybiBlLnNyYyYmKHQuc3JjPWUuc3JjKSx0fSkuY29uY2F0KEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChlLnRleHRUcmFja3MoKSxmdW5jdGlvbihlKXtyZXR1cm4tMT09PW4uaW5kZXhPZihlKX0pLm1hcCh3dCkpfSxqdD1mdW5jdGlvbihlLG4pe3JldHVybiBlLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9bi5hZGRSZW1vdGVUZXh0VHJhY2soZSkudHJhY2s7IWUuc3JjJiZlLmN1ZXMmJmUuY3Vlcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiB0LmFkZEN1ZShlKX0pfSksbi50ZXh0VHJhY2tzKCl9O2Z1bmN0aW9uIFB0KGUsdCl7cmV0dXJuIGUodD17ZXhwb3J0czp7fX0sdC5leHBvcnRzKSx0LmV4cG9ydHN9dmFyIEF0PVB0KGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbihlKXtpZihlJiZcIm9iamVjdFwiPT10eXBlb2YgZSl7dmFyIHQ9ZS53aGljaHx8ZS5rZXlDb2RlfHxlLmNoYXJDb2RlO3QmJihlPXQpfWlmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXJldHVybiBvW2VdO3ZhciBuLGk9U3RyaW5nKGUpO3JldHVybihuPXJbaS50b0xvd2VyQ2FzZSgpXSk/bjoobj1zW2kudG9Mb3dlckNhc2UoKV0pfHwoMT09PWkubGVuZ3RoP2kuY2hhckNvZGVBdCgwKTp2b2lkIDApfW4uaXNFdmVudEtleT1mdW5jdGlvbihlLHQpe2lmKGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlKXt2YXIgbj1lLndoaWNofHxlLmtleUNvZGV8fGUuY2hhckNvZGU7aWYobnVsbD09bilyZXR1cm4hMTtpZihcInN0cmluZ1wiPT10eXBlb2YgdCl7dmFyIGk7aWYoaT1yW3QudG9Mb3dlckNhc2UoKV0pcmV0dXJuIGk9PT1uO2lmKGk9c1t0LnRvTG93ZXJDYXNlKCldKXJldHVybiBpPT09bn1lbHNlIGlmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXJldHVybiB0PT09bjtyZXR1cm4hMX19O3ZhciByPSh0PWUuZXhwb3J0cz1uKS5jb2RlPXQuY29kZXM9e2JhY2tzcGFjZTo4LHRhYjo5LGVudGVyOjEzLHNoaWZ0OjE2LGN0cmw6MTcsYWx0OjE4LFwicGF1c2UvYnJlYWtcIjoxOSxcImNhcHMgbG9ja1wiOjIwLGVzYzoyNyxzcGFjZTozMixcInBhZ2UgdXBcIjozMyxcInBhZ2UgZG93blwiOjM0LGVuZDozNSxob21lOjM2LGxlZnQ6MzcsdXA6MzgscmlnaHQ6MzksZG93bjo0MCxpbnNlcnQ6NDUsZGVsZXRlOjQ2LGNvbW1hbmQ6OTEsXCJsZWZ0IGNvbW1hbmRcIjo5MSxcInJpZ2h0IGNvbW1hbmRcIjo5MyxcIm51bXBhZCAqXCI6MTA2LFwibnVtcGFkICtcIjoxMDcsXCJudW1wYWQgLVwiOjEwOSxcIm51bXBhZCAuXCI6MTEwLFwibnVtcGFkIC9cIjoxMTEsXCJudW0gbG9ja1wiOjE0NCxcInNjcm9sbCBsb2NrXCI6MTQ1LFwibXkgY29tcHV0ZXJcIjoxODIsXCJteSBjYWxjdWxhdG9yXCI6MTgzLFwiO1wiOjE4NixcIj1cIjoxODcsXCIsXCI6MTg4LFwiLVwiOjE4OSxcIi5cIjoxOTAsXCIvXCI6MTkxLFwiYFwiOjE5MixcIltcIjoyMTksXCJcXFxcXCI6MjIwLFwiXVwiOjIyMSxcIidcIjoyMjJ9LHM9dC5hbGlhc2VzPXt3aW5kb3dzOjkxLFwi4oenXCI6MTYsXCLijKVcIjoxOCxcIuKMg1wiOjE3LFwi4oyYXCI6OTEsY3RsOjE3LGNvbnRyb2w6MTcsb3B0aW9uOjE4LHBhdXNlOjE5LGJyZWFrOjE5LGNhcHM6MjAscmV0dXJuOjEzLGVzY2FwZToyNyxzcGM6MzIsc3BhY2ViYXI6MzIscGd1cDozMyxwZ2RuOjM0LGluczo0NSxkZWw6NDYsY21kOjkxfTtmb3IoaT05NztpPDEyMztpKyspcltTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXT1pLTMyO2Zvcih2YXIgaT00ODtpPDU4O2krKylyW2ktNDhdPWk7Zm9yKGk9MTtpPDEzO2krKylyW1wiZlwiK2ldPWkrMTExO2ZvcihpPTA7aTwxMDtpKyspcltcIm51bXBhZCBcIitpXT1pKzk2O3ZhciBvPXQubmFtZXM9dC50aXRsZT17fTtmb3IoaSBpbiByKW9bcltpXV09aTtmb3IodmFyIGEgaW4gcylyW2FdPXNbYV19KSxNdD0oQXQuY29kZSxBdC5jb2RlcyxBdC5hbGlhc2VzLEF0Lm5hbWVzLEF0LnRpdGxlLFwidmpzLW1vZGFsLWRpYWxvZ1wiKSxMdD1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuKG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcykub3BlbmVkXz1uLmhhc0JlZW5PcGVuZWRfPW4uaGFzQmVlbkZpbGxlZF89ITEsbi5jbG9zZWFibGUoIW4ub3B0aW9uc18udW5jbG9zZWFibGUpLG4uY29udGVudChuLm9wdGlvbnNfLmNvbnRlbnQpLG4uY29udGVudEVsXz14KFwiZGl2XCIse2NsYXNzTmFtZTpNdCtcIi1jb250ZW50XCJ9LHtyb2xlOlwiZG9jdW1lbnRcIn0pLG4uZGVzY0VsXz14KFwicFwiLHtjbGFzc05hbWU6TXQrXCItZGVzY3JpcHRpb24gdmpzLWNvbnRyb2wtdGV4dFwiLGlkOm4uZWwoKS5nZXRBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZGJ5XCIpfSksaihuLmRlc2NFbF8sbi5kZXNjcmlwdGlvbigpKSxuLmVsXy5hcHBlbmRDaGlsZChuLmRlc2NFbF8pLG4uZWxfLmFwcGVuZENoaWxkKG4uY29udGVudEVsXyksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY3JlYXRlRWw9ZnVuY3Rpb24oKXtyZXR1cm4gaS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIse2NsYXNzTmFtZTp0aGlzLmJ1aWxkQ1NTQ2xhc3MoKSx0YWJJbmRleDotMX0se1wiYXJpYS1kZXNjcmliZWRieVwiOnRoaXMuaWQoKStcIl9kZXNjcmlwdGlvblwiLFwiYXJpYS1oaWRkZW5cIjpcInRydWVcIixcImFyaWEtbGFiZWxcIjp0aGlzLmxhYmVsKCkscm9sZTpcImRpYWxvZ1wifSl9LHQuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuY29udGVudEVsXz1udWxsLHRoaXMuZGVzY0VsXz1udWxsLHRoaXMucHJldmlvdXNseUFjdGl2ZUVsXz1udWxsLGkucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKX0sdC5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIE10K1wiIHZqcy1oaWRkZW4gXCIraS5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpfSx0LmhhbmRsZUtleVByZXNzPWZ1bmN0aW9uKGUpe0F0LmlzRXZlbnRLZXkoZSxcIkVzY2FwZVwiKSYmdGhpcy5jbG9zZWFibGUoKSYmdGhpcy5jbG9zZSgpfSx0LmxhYmVsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubG9jYWxpemUodGhpcy5vcHRpb25zXy5sYWJlbHx8XCJNb2RhbCBXaW5kb3dcIil9LHQuZGVzY3JpcHRpb249ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9wdGlvbnNfLmRlc2NyaXB0aW9ufHx0aGlzLmxvY2FsaXplKFwiVGhpcyBpcyBhIG1vZGFsIHdpbmRvdy5cIik7cmV0dXJuIHRoaXMuY2xvc2VhYmxlKCkmJihlKz1cIiBcIit0aGlzLmxvY2FsaXplKFwiVGhpcyBtb2RhbCBjYW4gYmUgY2xvc2VkIGJ5IHByZXNzaW5nIHRoZSBFc2NhcGUga2V5IG9yIGFjdGl2YXRpbmcgdGhlIGNsb3NlIGJ1dHRvbi5cIikpLGV9LHQub3Blbj1mdW5jdGlvbigpe2lmKCF0aGlzLm9wZW5lZF8pe3ZhciBlPXRoaXMucGxheWVyKCk7dGhpcy50cmlnZ2VyKFwiYmVmb3JlbW9kYWxvcGVuXCIpLHRoaXMub3BlbmVkXz0hMCwodGhpcy5vcHRpb25zXy5maWxsQWx3YXlzfHwhdGhpcy5oYXNCZWVuT3BlbmVkXyYmIXRoaXMuaGFzQmVlbkZpbGxlZF8pJiZ0aGlzLmZpbGwoKSx0aGlzLndhc1BsYXlpbmdfPSFlLnBhdXNlZCgpLHRoaXMub3B0aW9uc18ucGF1c2VPbk9wZW4mJnRoaXMud2FzUGxheWluZ18mJmUucGF1c2UoKSx0aGlzLmNsb3NlYWJsZSgpJiZ0aGlzLm9uKHRoaXMuZWxfLm93bmVyRG9jdW1lbnQsXCJrZXlkb3duXCIsQ2UodGhpcyx0aGlzLmhhbmRsZUtleVByZXNzKSksdGhpcy5oYWRDb250cm9sc189ZS5jb250cm9scygpLGUuY29udHJvbHMoITEpLHRoaXMuc2hvdygpLHRoaXMuY29uZGl0aW9uYWxGb2N1c18oKSx0aGlzLmVsKCkuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpLHRoaXMudHJpZ2dlcihcIm1vZGFsb3BlblwiKSx0aGlzLmhhc0JlZW5PcGVuZWRfPSEwfX0sdC5vcGVuZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBlJiZ0aGlzW2U/XCJvcGVuXCI6XCJjbG9zZVwiXSgpLHRoaXMub3BlbmVkX30sdC5jbG9zZT1mdW5jdGlvbigpe2lmKHRoaXMub3BlbmVkXyl7dmFyIGU9dGhpcy5wbGF5ZXIoKTt0aGlzLnRyaWdnZXIoXCJiZWZvcmVtb2RhbGNsb3NlXCIpLHRoaXMub3BlbmVkXz0hMSx0aGlzLndhc1BsYXlpbmdfJiZ0aGlzLm9wdGlvbnNfLnBhdXNlT25PcGVuJiZlLnBsYXkoKSx0aGlzLmNsb3NlYWJsZSgpJiZ0aGlzLm9mZih0aGlzLmVsXy5vd25lckRvY3VtZW50LFwia2V5ZG93blwiLENlKHRoaXMsdGhpcy5oYW5kbGVLZXlQcmVzcykpLHRoaXMuaGFkQ29udHJvbHNfJiZlLmNvbnRyb2xzKCEwKSx0aGlzLmhpZGUoKSx0aGlzLmVsKCkuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIixcInRydWVcIiksdGhpcy50cmlnZ2VyKFwibW9kYWxjbG9zZVwiKSx0aGlzLmNvbmRpdGlvbmFsQmx1cl8oKSx0aGlzLm9wdGlvbnNfLnRlbXBvcmFyeSYmdGhpcy5kaXNwb3NlKCl9fSx0LmNsb3NlYWJsZT1mdW5jdGlvbihlKXtpZihcImJvb2xlYW5cIj09dHlwZW9mIGUpe3ZhciB0PXRoaXMuY2xvc2VhYmxlXz0hIWUsbj10aGlzLmdldENoaWxkKFwiY2xvc2VCdXR0b25cIik7aWYodCYmIW4pe3ZhciBpPXRoaXMuY29udGVudEVsXzt0aGlzLmNvbnRlbnRFbF89dGhpcy5lbF8sbj10aGlzLmFkZENoaWxkKFwiY2xvc2VCdXR0b25cIix7Y29udHJvbFRleHQ6XCJDbG9zZSBNb2RhbCBEaWFsb2dcIn0pLHRoaXMuY29udGVudEVsXz1pLHRoaXMub24obixcImNsb3NlXCIsdGhpcy5jbG9zZSl9IXQmJm4mJih0aGlzLm9mZihuLFwiY2xvc2VcIix0aGlzLmNsb3NlKSx0aGlzLnJlbW92ZUNoaWxkKG4pLG4uZGlzcG9zZSgpKX1yZXR1cm4gdGhpcy5jbG9zZWFibGVffSx0LmZpbGw9ZnVuY3Rpb24oKXt0aGlzLmZpbGxXaXRoKHRoaXMuY29udGVudCgpKX0sdC5maWxsV2l0aD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmNvbnRlbnRFbCgpLG49dC5wYXJlbnROb2RlLGk9dC5uZXh0U2libGluZzt0aGlzLnRyaWdnZXIoXCJiZWZvcmVtb2RhbGZpbGxcIiksdGhpcy5oYXNCZWVuRmlsbGVkXz0hMCxuLnJlbW92ZUNoaWxkKHQpLHRoaXMuZW1wdHkoKSwkKHQsZSksdGhpcy50cmlnZ2VyKFwibW9kYWxmaWxsXCIpLGk/bi5pbnNlcnRCZWZvcmUodCxpKTpuLmFwcGVuZENoaWxkKHQpO3ZhciByPXRoaXMuZ2V0Q2hpbGQoXCJjbG9zZUJ1dHRvblwiKTtyJiZuLmFwcGVuZENoaWxkKHIuZWxfKX0sdC5lbXB0eT1mdW5jdGlvbigpe3RoaXMudHJpZ2dlcihcImJlZm9yZW1vZGFsZW1wdHlcIiksVSh0aGlzLmNvbnRlbnRFbCgpKSx0aGlzLnRyaWdnZXIoXCJtb2RhbGVtcHR5XCIpfSx0LmNvbnRlbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUmJih0aGlzLmNvbnRlbnRfPWUpLHRoaXMuY29udGVudF99LHQuY29uZGl0aW9uYWxGb2N1c189ZnVuY3Rpb24oKXt2YXIgZT1kLmFjdGl2ZUVsZW1lbnQsdD10aGlzLnBsYXllcl8uZWxfO3RoaXMucHJldmlvdXNseUFjdGl2ZUVsXz1udWxsLCh0LmNvbnRhaW5zKGUpfHx0PT09ZSkmJih0aGlzLnByZXZpb3VzbHlBY3RpdmVFbF89ZSx0aGlzLmZvY3VzKCksdGhpcy5vbihkLFwia2V5ZG93blwiLHRoaXMuaGFuZGxlS2V5RG93bikpfSx0LmNvbmRpdGlvbmFsQmx1cl89ZnVuY3Rpb24oKXt0aGlzLnByZXZpb3VzbHlBY3RpdmVFbF8mJih0aGlzLnByZXZpb3VzbHlBY3RpdmVFbF8uZm9jdXMoKSx0aGlzLnByZXZpb3VzbHlBY3RpdmVFbF89bnVsbCksdGhpcy5vZmYoZCxcImtleWRvd25cIix0aGlzLmhhbmRsZUtleURvd24pfSx0LmhhbmRsZUtleURvd249ZnVuY3Rpb24oZSl7aWYoQXQuaXNFdmVudEtleShlLFwiVGFiXCIpKXtmb3IodmFyIHQsbj10aGlzLmZvY3VzYWJsZUVsc18oKSxpPXRoaXMuZWxfLnF1ZXJ5U2VsZWN0b3IoXCI6Zm9jdXNcIikscj0wO3I8bi5sZW5ndGg7cisrKWlmKGk9PT1uW3JdKXt0PXI7YnJlYWt9ZC5hY3RpdmVFbGVtZW50PT09dGhpcy5lbF8mJih0PTApLGUuc2hpZnRLZXkmJjA9PT10PyhuW24ubGVuZ3RoLTFdLmZvY3VzKCksZS5wcmV2ZW50RGVmYXVsdCgpKTplLnNoaWZ0S2V5fHx0IT09bi5sZW5ndGgtMXx8KG5bMF0uZm9jdXMoKSxlLnByZXZlbnREZWZhdWx0KCkpfX0sdC5mb2N1c2FibGVFbHNfPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5lbF8ucXVlcnlTZWxlY3RvckFsbChcIipcIik7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChlLGZ1bmN0aW9uKGUpe3JldHVybihlIGluc3RhbmNlb2YgaC5IVE1MQW5jaG9yRWxlbWVudHx8ZSBpbnN0YW5jZW9mIGguSFRNTEFyZWFFbGVtZW50KSYmZS5oYXNBdHRyaWJ1dGUoXCJocmVmXCIpfHwoZSBpbnN0YW5jZW9mIGguSFRNTElucHV0RWxlbWVudHx8ZSBpbnN0YW5jZW9mIGguSFRNTFNlbGVjdEVsZW1lbnR8fGUgaW5zdGFuY2VvZiBoLkhUTUxUZXh0QXJlYUVsZW1lbnR8fGUgaW5zdGFuY2VvZiBoLkhUTUxCdXR0b25FbGVtZW50KSYmIWUuaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIil8fGUgaW5zdGFuY2VvZiBoLkhUTUxJRnJhbWVFbGVtZW50fHxlIGluc3RhbmNlb2YgaC5IVE1MT2JqZWN0RWxlbWVudHx8ZSBpbnN0YW5jZW9mIGguSFRNTEVtYmVkRWxlbWVudHx8ZS5oYXNBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKSYmLTEhPT1lLmdldEF0dHJpYnV0ZShcInRhYmluZGV4XCIpfHxlLmhhc0F0dHJpYnV0ZShcImNvbnRlbnRlZGl0YWJsZVwiKX0pfSxlfShCZSk7THQucHJvdG90eXBlLm9wdGlvbnNfPXtwYXVzZU9uT3BlbjohMCx0ZW1wb3Jhcnk6ITB9LEJlLnJlZ2lzdGVyQ29tcG9uZW50KFwiTW9kYWxEaWFsb2dcIixMdCk7dmFyIE50PWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ7dm9pZCAwPT09ZSYmKGU9W10pLCh0PWkuY2FsbCh0aGlzKXx8dGhpcykudHJhY2tzXz1bXSxPYmplY3QuZGVmaW5lUHJvcGVydHkodih2KHQpKSxcImxlbmd0aFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50cmFja3NfLmxlbmd0aH19KTtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl0LmFkZFRyYWNrKGVbbl0pO3JldHVybiB0fWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5hZGRUcmFjaz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnRyYWNrc18ubGVuZ3RoO1wiXCIrdCBpbiB0aGlzfHxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyx0LHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50cmFja3NfW3RdfX0pLC0xPT09dGhpcy50cmFja3NfLmluZGV4T2YoZSkmJih0aGlzLnRyYWNrc18ucHVzaChlKSx0aGlzLnRyaWdnZXIoe3RyYWNrOmUsdHlwZTpcImFkZHRyYWNrXCIsdGFyZ2V0OnRoaXN9KSl9LHQucmVtb3ZlVHJhY2s9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49MCxpPXRoaXMubGVuZ3RoO248aTtuKyspaWYodGhpc1tuXT09PWUpeyh0PXRoaXNbbl0pLm9mZiYmdC5vZmYoKSx0aGlzLnRyYWNrc18uc3BsaWNlKG4sMSk7YnJlYWt9dCYmdGhpcy50cmlnZ2VyKHt0cmFjazp0LHR5cGU6XCJyZW1vdmV0cmFja1wiLHRhcmdldDp0aGlzfSl9LHQuZ2V0VHJhY2tCeUlkPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1udWxsLG49MCxpPXRoaXMubGVuZ3RoO248aTtuKyspe3ZhciByPXRoaXNbbl07aWYoci5pZD09PWUpe3Q9cjticmVha319cmV0dXJuIHR9LGV9KFNlKTtmb3IodmFyIE90IGluIE50LnByb3RvdHlwZS5hbGxvd2VkRXZlbnRzXz17Y2hhbmdlOlwiY2hhbmdlXCIsYWRkdHJhY2s6XCJhZGR0cmFja1wiLHJlbW92ZXRyYWNrOlwicmVtb3ZldHJhY2tcIn0sTnQucHJvdG90eXBlLmFsbG93ZWRFdmVudHNfKU50LnByb3RvdHlwZVtcIm9uXCIrT3RdPW51bGw7dmFyIER0PWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspT2JqZWN0LmtleXMoZVtuXSkubGVuZ3RoJiZ0LmlkIT09ZVtuXS5pZCYmKGVbbl0uZW5hYmxlZD0hMSl9LEl0PWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ7dm9pZCAwPT09ZSYmKGU9W10pO2Zvcih2YXIgbj1lLmxlbmd0aC0xOzA8PW47bi0tKWlmKGVbbl0uZW5hYmxlZCl7RHQoZSxlW25dKTticmVha31yZXR1cm4odD1pLmNhbGwodGhpcyxlKXx8dGhpcykuY2hhbmdpbmdfPSExLHR9ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmFkZFRyYWNrPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ZS5lbmFibGVkJiZEdCh0aGlzLGUpLGkucHJvdG90eXBlLmFkZFRyYWNrLmNhbGwodGhpcyxlKSxlLmFkZEV2ZW50TGlzdGVuZXImJihlLmVuYWJsZWRDaGFuZ2VfPWZ1bmN0aW9uKCl7dC5jaGFuZ2luZ198fCh0LmNoYW5naW5nXz0hMCxEdCh0LGUpLHQuY2hhbmdpbmdfPSExLHQudHJpZ2dlcihcImNoYW5nZVwiKSl9LGUuYWRkRXZlbnRMaXN0ZW5lcihcImVuYWJsZWRjaGFuZ2VcIixlLmVuYWJsZWRDaGFuZ2VfKSl9LHQucmVtb3ZlVHJhY2s9ZnVuY3Rpb24oZSl7aS5wcm90b3R5cGUucmVtb3ZlVHJhY2suY2FsbCh0aGlzLGUpLGUucmVtb3ZlRXZlbnRMaXN0ZW5lciYmZS5lbmFibGVkQ2hhbmdlXyYmKGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVuYWJsZWRjaGFuZ2VcIixlLmVuYWJsZWRDaGFuZ2VfKSxlLmVuYWJsZWRDaGFuZ2VfPW51bGwpfSxlfShOdCksRnQ9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKylPYmplY3Qua2V5cyhlW25dKS5sZW5ndGgmJnQuaWQhPT1lW25dLmlkJiYoZVtuXS5zZWxlY3RlZD0hMSl9LFJ0PWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ7dm9pZCAwPT09ZSYmKGU9W10pO2Zvcih2YXIgbj1lLmxlbmd0aC0xOzA8PW47bi0tKWlmKGVbbl0uc2VsZWN0ZWQpe0Z0KGUsZVtuXSk7YnJlYWt9cmV0dXJuKHQ9aS5jYWxsKHRoaXMsZSl8fHRoaXMpLmNoYW5naW5nXz0hMSxPYmplY3QuZGVmaW5lUHJvcGVydHkodih2KHQpKSxcInNlbGVjdGVkSW5kZXhcIix7Z2V0OmZ1bmN0aW9uKCl7Zm9yKHZhciBlPTA7ZTx0aGlzLmxlbmd0aDtlKyspaWYodGhpc1tlXS5zZWxlY3RlZClyZXR1cm4gZTtyZXR1cm4tMX0sc2V0OmZ1bmN0aW9uKCl7fX0pLHR9ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmFkZFRyYWNrPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ZS5zZWxlY3RlZCYmRnQodGhpcyxlKSxpLnByb3RvdHlwZS5hZGRUcmFjay5jYWxsKHRoaXMsZSksZS5hZGRFdmVudExpc3RlbmVyJiYoZS5zZWxlY3RlZENoYW5nZV89ZnVuY3Rpb24oKXt0LmNoYW5naW5nX3x8KHQuY2hhbmdpbmdfPSEwLEZ0KHQsZSksdC5jaGFuZ2luZ189ITEsdC50cmlnZ2VyKFwiY2hhbmdlXCIpKX0sZS5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0ZWRjaGFuZ2VcIixlLnNlbGVjdGVkQ2hhbmdlXykpfSx0LnJlbW92ZVRyYWNrPWZ1bmN0aW9uKGUpe2kucHJvdG90eXBlLnJlbW92ZVRyYWNrLmNhbGwodGhpcyxlKSxlLnJlbW92ZUV2ZW50TGlzdGVuZXImJmUuc2VsZWN0ZWRDaGFuZ2VfJiYoZS5yZW1vdmVFdmVudExpc3RlbmVyKFwic2VsZWN0ZWRjaGFuZ2VcIixlLnNlbGVjdGVkQ2hhbmdlXyksZS5zZWxlY3RlZENoYW5nZV89bnVsbCl9LGV9KE50KSxCdD1mdW5jdGlvbihuKXtmdW5jdGlvbiBlKCl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfWYoZSxuKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5hZGRUcmFjaz1mdW5jdGlvbihlKXt2YXIgdD10aGlzO24ucHJvdG90eXBlLmFkZFRyYWNrLmNhbGwodGhpcyxlKSx0aGlzLnF1ZXVlQ2hhbmdlX3x8KHRoaXMucXVldWVDaGFuZ2VfPWZ1bmN0aW9uKCl7cmV0dXJuIHQucXVldWVUcmlnZ2VyKFwiY2hhbmdlXCIpfSksdGhpcy50cmlnZ2VyU2VsZWN0ZWRsYW5ndWFnZWNoYW5nZXx8KHRoaXMudHJpZ2dlclNlbGVjdGVkbGFuZ3VhZ2VjaGFuZ2VfPWZ1bmN0aW9uKCl7cmV0dXJuIHQudHJpZ2dlcihcInNlbGVjdGVkbGFuZ3VhZ2VjaGFuZ2VcIil9KSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb2RlY2hhbmdlXCIsdGhpcy5xdWV1ZUNoYW5nZV8pOy0xPT09W1wibWV0YWRhdGFcIixcImNoYXB0ZXJzXCJdLmluZGV4T2YoZS5raW5kKSYmZS5hZGRFdmVudExpc3RlbmVyKFwibW9kZWNoYW5nZVwiLHRoaXMudHJpZ2dlclNlbGVjdGVkbGFuZ3VhZ2VjaGFuZ2VfKX0sdC5yZW1vdmVUcmFjaz1mdW5jdGlvbihlKXtuLnByb3RvdHlwZS5yZW1vdmVUcmFjay5jYWxsKHRoaXMsZSksZS5yZW1vdmVFdmVudExpc3RlbmVyJiYodGhpcy5xdWV1ZUNoYW5nZV8mJmUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vZGVjaGFuZ2VcIix0aGlzLnF1ZXVlQ2hhbmdlXyksdGhpcy5zZWxlY3RlZGxhbmd1YWdlY2hhbmdlXyYmZS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW9kZWNoYW5nZVwiLHRoaXMudHJpZ2dlclNlbGVjdGVkbGFuZ3VhZ2VjaGFuZ2VfKSl9LGV9KE50KSxIdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dm9pZCAwPT09ZSYmKGU9W10pLHRoaXMudHJhY2tFbGVtZW50c189W10sT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJsZW5ndGhcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudHJhY2tFbGVtZW50c18ubGVuZ3RofX0pO2Zvcih2YXIgdD0wLG49ZS5sZW5ndGg7dDxuO3QrKyl0aGlzLmFkZFRyYWNrRWxlbWVudF8oZVt0XSl9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuYWRkVHJhY2tFbGVtZW50Xz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnRyYWNrRWxlbWVudHNfLmxlbmd0aDtcIlwiK3QgaW4gdGhpc3x8T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsdCx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudHJhY2tFbGVtZW50c19bdF19fSksLTE9PT10aGlzLnRyYWNrRWxlbWVudHNfLmluZGV4T2YoZSkmJnRoaXMudHJhY2tFbGVtZW50c18ucHVzaChlKX0sdC5nZXRUcmFja0VsZW1lbnRCeVRyYWNrXz1mdW5jdGlvbihlKXtmb3IodmFyIHQsbj0wLGk9dGhpcy50cmFja0VsZW1lbnRzXy5sZW5ndGg7bjxpO24rKylpZihlPT09dGhpcy50cmFja0VsZW1lbnRzX1tuXS50cmFjayl7dD10aGlzLnRyYWNrRWxlbWVudHNfW25dO2JyZWFrfXJldHVybiB0fSx0LnJlbW92ZVRyYWNrRWxlbWVudF89ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAsbj10aGlzLnRyYWNrRWxlbWVudHNfLmxlbmd0aDt0PG47dCsrKWlmKGU9PT10aGlzLnRyYWNrRWxlbWVudHNfW3RdKXt0aGlzLnRyYWNrRWxlbWVudHNfW3RdLnRyYWNrJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLnRyYWNrRWxlbWVudHNfW3RdLnRyYWNrLm9mZiYmdGhpcy50cmFja0VsZW1lbnRzX1t0XS50cmFjay5vZmYoKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLnRyYWNrRWxlbWVudHNfW3RdLm9mZiYmdGhpcy50cmFja0VsZW1lbnRzX1t0XS5vZmYoKSx0aGlzLnRyYWNrRWxlbWVudHNfLnNwbGljZSh0LDEpO2JyZWFrfX0sZX0oKSxWdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7dC5wcm90b3R5cGUuc2V0Q3Vlc18uY2FsbCh0aGlzLGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibGVuZ3RoXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxlbmd0aF99fSl9dmFyIGU9dC5wcm90b3R5cGU7cmV0dXJuIGUuc2V0Q3Vlc189ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5sZW5ndGh8fDAsbj0wLGk9ZS5sZW5ndGg7dGhpcy5jdWVzXz1lLHRoaXMubGVuZ3RoXz1lLmxlbmd0aDt2YXIgcj1mdW5jdGlvbihlKXtcIlwiK2UgaW4gdGhpc3x8T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJcIitlLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdWVzX1tlXX19KX07aWYodDxpKWZvcihuPXQ7bjxpO24rKylyLmNhbGwodGhpcyxuKX0sZS5nZXRDdWVCeUlkPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1udWxsLG49MCxpPXRoaXMubGVuZ3RoO248aTtuKyspe3ZhciByPXRoaXNbbl07aWYoci5pZD09PWUpe3Q9cjticmVha319cmV0dXJuIHR9LHR9KCksenQ9e2FsdGVybmF0aXZlOlwiYWx0ZXJuYXRpdmVcIixjYXB0aW9uczpcImNhcHRpb25zXCIsbWFpbjpcIm1haW5cIixzaWduOlwic2lnblwiLHN1YnRpdGxlczpcInN1YnRpdGxlc1wiLGNvbW1lbnRhcnk6XCJjb21tZW50YXJ5XCJ9LEt0PXthbHRlcm5hdGl2ZTpcImFsdGVybmF0aXZlXCIsZGVzY3JpcHRpb25zOlwiZGVzY3JpcHRpb25zXCIsbWFpbjpcIm1haW5cIixcIm1haW4tZGVzY1wiOlwibWFpbi1kZXNjXCIsdHJhbnNsYXRpb246XCJ0cmFuc2xhdGlvblwiLGNvbW1lbnRhcnk6XCJjb21tZW50YXJ5XCJ9LFd0PXtzdWJ0aXRsZXM6XCJzdWJ0aXRsZXNcIixjYXB0aW9uczpcImNhcHRpb25zXCIsZGVzY3JpcHRpb25zOlwiZGVzY3JpcHRpb25zXCIsY2hhcHRlcnM6XCJjaGFwdGVyc1wiLG1ldGFkYXRhOlwibWV0YWRhdGFcIn0sVXQ9e2Rpc2FibGVkOlwiZGlzYWJsZWRcIixoaWRkZW46XCJoaWRkZW5cIixzaG93aW5nOlwic2hvd2luZ1wifSxxdD1mdW5jdGlvbihzKXtmdW5jdGlvbiBlKGUpe3ZhciB0O3ZvaWQgMD09PWUmJihlPXt9KSx0PXMuY2FsbCh0aGlzKXx8dGhpczt2YXIgbj17aWQ6ZS5pZHx8XCJ2anNfdHJhY2tfXCIrZWUoKSxraW5kOmUua2luZHx8XCJcIixsYWJlbDplLmxhYmVsfHxcIlwiLGxhbmd1YWdlOmUubGFuZ3VhZ2V8fFwiXCJ9LGk9ZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHYodih0KSksZSx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG5bZV19LHNldDpmdW5jdGlvbigpe319KX07Zm9yKHZhciByIGluIG4paShyKTtyZXR1cm4gdH1yZXR1cm4gZihlLHMpLGV9KFNlKSxYdD1mdW5jdGlvbihlKXt2YXIgdD1bXCJwcm90b2NvbFwiLFwiaG9zdG5hbWVcIixcInBvcnRcIixcInBhdGhuYW1lXCIsXCJzZWFyY2hcIixcImhhc2hcIixcImhvc3RcIl0sbj1kLmNyZWF0ZUVsZW1lbnQoXCJhXCIpO24uaHJlZj1lO3ZhciBpLHI9XCJcIj09PW4uaG9zdCYmXCJmaWxlOlwiIT09bi5wcm90b2NvbDtyJiYoKGk9ZC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKS5pbm5lckhUTUw9JzxhIGhyZWY9XCInK2UrJ1wiPjwvYT4nLG49aS5maXJzdENoaWxkLGkuc2V0QXR0cmlidXRlKFwic3R5bGVcIixcImRpc3BsYXk6bm9uZTsgcG9zaXRpb246YWJzb2x1dGU7XCIpLGQuYm9keS5hcHBlbmRDaGlsZChpKSk7Zm9yKHZhciBzPXt9LG89MDtvPHQubGVuZ3RoO28rKylzW3Rbb11dPW5bdFtvXV07cmV0dXJuXCJodHRwOlwiPT09cy5wcm90b2NvbCYmKHMuaG9zdD1zLmhvc3QucmVwbGFjZSgvOjgwJC8sXCJcIikpLFwiaHR0cHM6XCI9PT1zLnByb3RvY29sJiYocy5ob3N0PXMuaG9zdC5yZXBsYWNlKC86NDQzJC8sXCJcIikpLHMucHJvdG9jb2x8fChzLnByb3RvY29sPWgubG9jYXRpb24ucHJvdG9jb2wpLHImJmQuYm9keS5yZW1vdmVDaGlsZChpKSxzfSwkdD1mdW5jdGlvbihlKXtpZighZS5tYXRjaCgvXmh0dHBzPzpcXC9cXC8vKSl7dmFyIHQ9ZC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3QuaW5uZXJIVE1MPSc8YSBocmVmPVwiJytlKydcIj54PC9hPicsZT10LmZpcnN0Q2hpbGQuaHJlZn1yZXR1cm4gZX0sR3Q9ZnVuY3Rpb24oZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe3ZhciB0PS9eKFxcLz8pKFtcXHNcXFNdKj8pKCg/OlxcLnsxLDJ9fFteXFwvXSs/KShcXC4oW15cXC5cXC9cXD9dKykpKSg/OltcXC9dKnxbXFw/XS4qKSQvaS5leGVjKGUpO2lmKHQpcmV0dXJuIHQucG9wKCkudG9Mb3dlckNhc2UoKX1yZXR1cm5cIlwifSxZdD1mdW5jdGlvbihlKXt2YXIgdD1oLmxvY2F0aW9uLG49WHQoZSk7cmV0dXJuKFwiOlwiPT09bi5wcm90b2NvbD90LnByb3RvY29sOm4ucHJvdG9jb2wpK24uaG9zdCE9PXQucHJvdG9jb2wrdC5ob3N0fSxRdD1PYmplY3QuZnJlZXplKHtwYXJzZVVybDpYdCxnZXRBYnNvbHV0ZVVSTDokdCxnZXRGaWxlRXh0ZW5zaW9uOkd0LGlzQ3Jvc3NPcmlnaW46WXR9KSxKdD1mdW5jdGlvbihlKXt2YXIgdD1adC5jYWxsKGUpO3JldHVyblwiW29iamVjdCBGdW5jdGlvbl1cIj09PXR8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJlwiW29iamVjdCBSZWdFeHBdXCIhPT10fHxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYoZT09PXdpbmRvdy5zZXRUaW1lb3V0fHxlPT09d2luZG93LmFsZXJ0fHxlPT09d2luZG93LmNvbmZpcm18fGU9PT13aW5kb3cucHJvbXB0KX0sWnQ9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZzt2YXIgZW49UHQoZnVuY3Rpb24oZSx0KXsodD1lLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvXlxccyp8XFxzKiQvZyxcIlwiKX0pLmxlZnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvXlxccyovLFwiXCIpfSx0LnJpZ2h0PWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1xccyokLyxcIlwiKX19KSx0bj0oZW4ubGVmdCxlbi5yaWdodCxGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcpLG5uPS9eXFxzKmNsYXNzXFxiLyxybj1mdW5jdGlvbihlKXt0cnl7dmFyIHQ9dG4uY2FsbChlKTtyZXR1cm4gbm4udGVzdCh0KX1jYXRjaChlKXtyZXR1cm4hMX19LHNuPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsb249XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnLGFuPWZ1bmN0aW9uKGUpe2lmKCFlKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJlwib2JqZWN0XCIhPXR5cGVvZiBlKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJiFlLnByb3RvdHlwZSlyZXR1cm4hMDtpZihvbilyZXR1cm4gZnVuY3Rpb24oZSl7dHJ5e3JldHVybiFybihlKSYmKHRuLmNhbGwoZSksITApfWNhdGNoKGUpe3JldHVybiExfX0oZSk7aWYocm4oZSkpcmV0dXJuITE7dmFyIHQ9c24uY2FsbChlKTtyZXR1cm5cIltvYmplY3QgRnVuY3Rpb25dXCI9PT10fHxcIltvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dXCI9PT10fSxsbj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLGNuPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksdW49ZnVuY3Rpb24oZSx0LG4pe2lmKCFhbih0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO3ZhciBpOzM8PWFyZ3VtZW50cy5sZW5ndGgmJihpPW4pLFwiW29iamVjdCBBcnJheV1cIj09PWxuLmNhbGwoZSk/ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgaT0wLHI9ZS5sZW5ndGg7aTxyO2krKyljbi5jYWxsKGUsaSkmJihudWxsPT1uP3QoZVtpXSxpLGUpOnQuY2FsbChuLGVbaV0saSxlKSl9KGUsdCxpKTpcInN0cmluZ1wiPT10eXBlb2YgZT9mdW5jdGlvbihlLHQsbil7Zm9yKHZhciBpPTAscj1lLmxlbmd0aDtpPHI7aSsrKW51bGw9PW4/dChlLmNoYXJBdChpKSxpLGUpOnQuY2FsbChuLGUuY2hhckF0KGkpLGksZSl9KGUsdCxpKTpmdW5jdGlvbihlLHQsbil7Zm9yKHZhciBpIGluIGUpY24uY2FsbChlLGkpJiYobnVsbD09bj90KGVbaV0saSxlKTp0LmNhbGwobixlW2ldLGksZSkpfShlLHQsaSl9LGhuPWZ1bmN0aW9uKGUpe2lmKCFlKXJldHVybnt9O3ZhciBzPXt9O3JldHVybiB1bihlbihlKS5zcGxpdChcIlxcblwiKSxmdW5jdGlvbihlKXt2YXIgdCxuPWUuaW5kZXhPZihcIjpcIiksaT1lbihlLnNsaWNlKDAsbikpLnRvTG93ZXJDYXNlKCkscj1lbihlLnNsaWNlKG4rMSkpO1widW5kZWZpbmVkXCI9PXR5cGVvZiBzW2ldP3NbaV09cjoodD1zW2ldLFwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KT9zW2ldLnB1c2gocik6c1tpXT1bc1tpXSxyXSl9KSxzfSxkbj1mdW5jdGlvbigpe2Zvcih2YXIgZT17fSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIG49YXJndW1lbnRzW3RdO2Zvcih2YXIgaSBpbiBuKXBuLmNhbGwobixpKSYmKGVbaV09bltpXSl9cmV0dXJuIGV9LHBuPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dmFyIGZuPWduO2Z1bmN0aW9uIHZuKGUsdCxuKXt2YXIgaT1lO3JldHVybiBKdCh0KT8obj10LFwic3RyaW5nXCI9PXR5cGVvZiBlJiYoaT17dXJpOmV9KSk6aT1kbih0LHt1cmk6ZX0pLGkuY2FsbGJhY2s9bixpfWZ1bmN0aW9uIGduKGUsdCxuKXtyZXR1cm4geW4odD12bihlLHQsbikpfWZ1bmN0aW9uIHluKGkpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBpLmNhbGxiYWNrKXRocm93IG5ldyBFcnJvcihcImNhbGxiYWNrIGFyZ3VtZW50IG1pc3NpbmdcIik7dmFyIHI9ITEscz1mdW5jdGlvbihlLHQsbil7cnx8KHI9ITAsaS5jYWxsYmFjayhlLHQsbikpfTtmdW5jdGlvbiB0KGUpe3JldHVybiBjbGVhclRpbWVvdXQobCksZSBpbnN0YW5jZW9mIEVycm9yfHwoZT1uZXcgRXJyb3IoXCJcIisoZXx8XCJVbmtub3duIFhNTEh0dHBSZXF1ZXN0IEVycm9yXCIpKSksZS5zdGF0dXNDb2RlPTAscyhlLHYpfWZ1bmN0aW9uIGUoKXtpZighbyl7dmFyIGU7Y2xlYXJUaW1lb3V0KGwpLGU9aS51c2VYRFImJnZvaWQgMD09PWEuc3RhdHVzPzIwMDoxMjIzPT09YS5zdGF0dXM/MjA0OmEuc3RhdHVzO3ZhciB0PXYsbj1udWxsO3JldHVybiAwIT09ZT8odD17Ym9keTpmdW5jdGlvbigpe3ZhciBlPXZvaWQgMDtpZihlPWEucmVzcG9uc2U/YS5yZXNwb25zZTphLnJlc3BvbnNlVGV4dHx8ZnVuY3Rpb24oZSl7aWYoXCJkb2N1bWVudFwiPT09ZS5yZXNwb25zZVR5cGUpcmV0dXJuIGUucmVzcG9uc2VYTUw7dmFyIHQ9ZS5yZXNwb25zZVhNTCYmXCJwYXJzZXJlcnJvclwiPT09ZS5yZXNwb25zZVhNTC5kb2N1bWVudEVsZW1lbnQubm9kZU5hbWU7cmV0dXJuXCJcIiE9PWUucmVzcG9uc2VUeXBlfHx0P251bGw6ZS5yZXNwb25zZVhNTH0oYSksZil0cnl7ZT1KU09OLnBhcnNlKGUpfWNhdGNoKGUpe31yZXR1cm4gZX0oKSxzdGF0dXNDb2RlOmUsbWV0aG9kOnUsaGVhZGVyczp7fSx1cmw6YyxyYXdSZXF1ZXN0OmF9LGEuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJiYodC5oZWFkZXJzPWhuKGEuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpKSk6bj1uZXcgRXJyb3IoXCJJbnRlcm5hbCBYTUxIdHRwUmVxdWVzdCBFcnJvclwiKSxzKG4sdCx0LmJvZHkpfX12YXIgbixvLGE9aS54aHJ8fG51bGw7YXx8KGE9aS5jb3JzfHxpLnVzZVhEUj9uZXcgZ24uWERvbWFpblJlcXVlc3Q6bmV3IGduLlhNTEh0dHBSZXF1ZXN0KTt2YXIgbCxjPWEudXJsPWkudXJpfHxpLnVybCx1PWEubWV0aG9kPWkubWV0aG9kfHxcIkdFVFwiLGg9aS5ib2R5fHxpLmRhdGEsZD1hLmhlYWRlcnM9aS5oZWFkZXJzfHx7fSxwPSEhaS5zeW5jLGY9ITEsdj17Ym9keTp2b2lkIDAsaGVhZGVyczp7fSxzdGF0dXNDb2RlOjAsbWV0aG9kOnUsdXJsOmMscmF3UmVxdWVzdDphfTtpZihcImpzb25cImluIGkmJiExIT09aS5qc29uJiYoZj0hMCxkLmFjY2VwdHx8ZC5BY2NlcHR8fChkLkFjY2VwdD1cImFwcGxpY2F0aW9uL2pzb25cIiksXCJHRVRcIiE9PXUmJlwiSEVBRFwiIT09dSYmKGRbXCJjb250ZW50LXR5cGVcIl18fGRbXCJDb250ZW50LVR5cGVcIl18fChkW1wiQ29udGVudC1UeXBlXCJdPVwiYXBwbGljYXRpb24vanNvblwiKSxoPUpTT04uc3RyaW5naWZ5KCEwPT09aS5qc29uP2g6aS5qc29uKSkpLGEub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7ND09PWEucmVhZHlTdGF0ZSYmc2V0VGltZW91dChlLDApfSxhLm9ubG9hZD1lLGEub25lcnJvcj10LGEub25wcm9ncmVzcz1mdW5jdGlvbigpe30sYS5vbmFib3J0PWZ1bmN0aW9uKCl7bz0hMH0sYS5vbnRpbWVvdXQ9dCxhLm9wZW4odSxjLCFwLGkudXNlcm5hbWUsaS5wYXNzd29yZCkscHx8KGEud2l0aENyZWRlbnRpYWxzPSEhaS53aXRoQ3JlZGVudGlhbHMpLCFwJiYwPGkudGltZW91dCYmKGw9c2V0VGltZW91dChmdW5jdGlvbigpe2lmKCFvKXtvPSEwLGEuYWJvcnQoXCJ0aW1lb3V0XCIpO3ZhciBlPW5ldyBFcnJvcihcIlhNTEh0dHBSZXF1ZXN0IHRpbWVvdXRcIik7ZS5jb2RlPVwiRVRJTUVET1VUXCIsdChlKX19LGkudGltZW91dCkpLGEuc2V0UmVxdWVzdEhlYWRlcilmb3IobiBpbiBkKWQuaGFzT3duUHJvcGVydHkobikmJmEuc2V0UmVxdWVzdEhlYWRlcihuLGRbbl0pO2Vsc2UgaWYoaS5oZWFkZXJzJiYhZnVuY3Rpb24oZSl7Zm9yKHZhciB0IGluIGUpaWYoZS5oYXNPd25Qcm9wZXJ0eSh0KSlyZXR1cm4hMTtyZXR1cm4hMH0oaS5oZWFkZXJzKSl0aHJvdyBuZXcgRXJyb3IoXCJIZWFkZXJzIGNhbm5vdCBiZSBzZXQgb24gYW4gWERvbWFpblJlcXVlc3Qgb2JqZWN0XCIpO3JldHVyblwicmVzcG9uc2VUeXBlXCJpbiBpJiYoYS5yZXNwb25zZVR5cGU9aS5yZXNwb25zZVR5cGUpLFwiYmVmb3JlU2VuZFwiaW4gaSYmXCJmdW5jdGlvblwiPT10eXBlb2YgaS5iZWZvcmVTZW5kJiZpLmJlZm9yZVNlbmQoYSksYS5zZW5kKGh8fG51bGwpLGF9Z24uWE1MSHR0cFJlcXVlc3Q9aC5YTUxIdHRwUmVxdWVzdHx8ZnVuY3Rpb24oKXt9LGduLlhEb21haW5SZXF1ZXN0PVwid2l0aENyZWRlbnRpYWxzXCJpbiBuZXcgZ24uWE1MSHR0cFJlcXVlc3Q/Z24uWE1MSHR0cFJlcXVlc3Q6aC5YRG9tYWluUmVxdWVzdCxmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXQoZVtuXSl9KFtcImdldFwiLFwicHV0XCIsXCJwb3N0XCIsXCJwYXRjaFwiLFwiaGVhZFwiLFwiZGVsZXRlXCJdLGZ1bmN0aW9uKGkpe2duW1wiZGVsZXRlXCI9PT1pP1wiZGVsXCI6aV09ZnVuY3Rpb24oZSx0LG4pe3JldHVybih0PXZuKGUsdCxuKSkubWV0aG9kPWkudG9VcHBlckNhc2UoKSx5bih0KX19KTt2YXIgX249ZnVuY3Rpb24oZSx0KXt2YXIgbj1uZXcgaC5XZWJWVFQuUGFyc2VyKGgsaC52dHRqcyxoLldlYlZUVC5TdHJpbmdEZWNvZGVyKCkpLGk9W107bi5vbmN1ZT1mdW5jdGlvbihlKXt0LmFkZEN1ZShlKX0sbi5vbnBhcnNpbmdlcnJvcj1mdW5jdGlvbihlKXtpLnB1c2goZSl9LG4ub25mbHVzaD1mdW5jdGlvbigpe3QudHJpZ2dlcih7dHlwZTpcImxvYWRlZGRhdGFcIix0YXJnZXQ6dH0pfSxuLnBhcnNlKGUpLDA8aS5sZW5ndGgmJihoLmNvbnNvbGUmJmguY29uc29sZS5ncm91cENvbGxhcHNlZCYmaC5jb25zb2xlLmdyb3VwQ29sbGFwc2VkKFwiVGV4dCBUcmFjayBwYXJzaW5nIGVycm9ycyBmb3IgXCIrdC5zcmMpLGkuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZy5lcnJvcihlKX0pLGguY29uc29sZSYmaC5jb25zb2xlLmdyb3VwRW5kJiZoLmNvbnNvbGUuZ3JvdXBFbmQoKSksbi5mbHVzaCgpfSxtbj1mdW5jdGlvbihjKXtmdW5jdGlvbiBlKGUpe3ZhciB0O2lmKHZvaWQgMD09PWUmJihlPXt9KSwhZS50ZWNoKXRocm93IG5ldyBFcnJvcihcIkEgdGVjaCB3YXMgbm90IHByb3ZpZGVkLlwiKTt2YXIgbj1SZShlLHtraW5kOld0W2Uua2luZF18fFwic3VidGl0bGVzXCIsbGFuZ3VhZ2U6ZS5sYW5ndWFnZXx8ZS5zcmNsYW5nfHxcIlwifSksaT1VdFtuLm1vZGVdfHxcImRpc2FibGVkXCIscj1uLmRlZmF1bHQ7XCJtZXRhZGF0YVwiIT09bi5raW5kJiZcImNoYXB0ZXJzXCIhPT1uLmtpbmR8fChpPVwiaGlkZGVuXCIpLCh0PWMuY2FsbCh0aGlzLG4pfHx0aGlzKS50ZWNoXz1uLnRlY2gsdC5jdWVzXz1bXSx0LmFjdGl2ZUN1ZXNfPVtdO3ZhciBzPW5ldyBWdCh0LmN1ZXNfKSxvPW5ldyBWdCh0LmFjdGl2ZUN1ZXNfKSxhPSExLGw9Q2Uodih2KHQpKSxmdW5jdGlvbigpe3RoaXMuYWN0aXZlQ3Vlcz10aGlzLmFjdGl2ZUN1ZXMsYSYmKHRoaXMudHJpZ2dlcihcImN1ZWNoYW5nZVwiKSxhPSExKX0pO3JldHVyblwiZGlzYWJsZWRcIiE9PWkmJnQudGVjaF8ucmVhZHkoZnVuY3Rpb24oKXt0LnRlY2hfLm9uKFwidGltZXVwZGF0ZVwiLGwpfSwhMCksT2JqZWN0LmRlZmluZVByb3BlcnRpZXModih2KHQpKSx7ZGVmYXVsdDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHNldDpmdW5jdGlvbigpe319LG1vZGU6e2dldDpmdW5jdGlvbigpe3JldHVybiBpfSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztVdFtlXSYmKFwiZGlzYWJsZWRcIiE9PShpPWUpP3RoaXMudGVjaF8ucmVhZHkoZnVuY3Rpb24oKXt0LnRlY2hfLm9uKFwidGltZXVwZGF0ZVwiLGwpfSwhMCk6dGhpcy50ZWNoXy5vZmYoXCJ0aW1ldXBkYXRlXCIsbCksdGhpcy50cmlnZ2VyKFwibW9kZWNoYW5nZVwiKSl9fSxjdWVzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sb2FkZWRfP3M6bnVsbH0sc2V0OmZ1bmN0aW9uKCl7fX0sYWN0aXZlQ3Vlczp7Z2V0OmZ1bmN0aW9uKCl7aWYoIXRoaXMubG9hZGVkXylyZXR1cm4gbnVsbDtpZigwPT09dGhpcy5jdWVzLmxlbmd0aClyZXR1cm4gbztmb3IodmFyIGU9dGhpcy50ZWNoXy5jdXJyZW50VGltZSgpLHQ9W10sbj0wLGk9dGhpcy5jdWVzLmxlbmd0aDtuPGk7bisrKXt2YXIgcj10aGlzLmN1ZXNbbl07ci5zdGFydFRpbWU8PWUmJnIuZW5kVGltZT49ZT90LnB1c2gocik6ci5zdGFydFRpbWU9PT1yLmVuZFRpbWUmJnIuc3RhcnRUaW1lPD1lJiZyLnN0YXJ0VGltZSsuNT49ZSYmdC5wdXNoKHIpfWlmKGE9ITEsdC5sZW5ndGghPT10aGlzLmFjdGl2ZUN1ZXNfLmxlbmd0aClhPSEwO2Vsc2UgZm9yKHZhciBzPTA7czx0Lmxlbmd0aDtzKyspLTE9PT10aGlzLmFjdGl2ZUN1ZXNfLmluZGV4T2YodFtzXSkmJihhPSEwKTtyZXR1cm4gdGhpcy5hY3RpdmVDdWVzXz10LG8uc2V0Q3Vlc18odGhpcy5hY3RpdmVDdWVzXyksb30sc2V0OmZ1bmN0aW9uKCl7fX19KSxuLnNyYz8odC5zcmM9bi5zcmMsZnVuY3Rpb24oZSxzKXt2YXIgdD17dXJpOmV9LG49WXQoZSk7biYmKHQuY29ycz1uKSxmbih0LENlKHRoaXMsZnVuY3Rpb24oZSx0LG4pe2lmKGUpcmV0dXJuIGcuZXJyb3IoZSx0KTtpZihzLmxvYWRlZF89ITAsXCJmdW5jdGlvblwiIT10eXBlb2YgaC5XZWJWVFQpe2lmKHMudGVjaF8pe3ZhciBpLHI9ZnVuY3Rpb24oKXtnLmVycm9yKFwidnR0anMgZmFpbGVkIHRvIGxvYWQsIHN0b3BwaW5nIHRyeWluZyB0byBwcm9jZXNzIFwiK3Muc3JjKSxzLnRlY2hfLm9mZihcInZ0dGpzbG9hZGVkXCIsaSl9O2k9ZnVuY3Rpb24oKXtyZXR1cm4gcy50ZWNoXy5vZmYoXCJ2dHRqc2Vycm9yXCIsciksX24obixzKX0scy50ZWNoXy5vbmUoXCJ2dHRqc2xvYWRlZFwiLGkpLHMudGVjaF8ub25lKFwidnR0anNlcnJvclwiLHIpfX1lbHNlIF9uKG4scyl9KSl9KG4uc3JjLHYodih0KSkpKTp0LmxvYWRlZF89ITAsdH1mKGUsYyk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuYWRkQ3VlPWZ1bmN0aW9uKGUpe3ZhciB0PWU7aWYoaC52dHRqcyYmIShlIGluc3RhbmNlb2YgaC52dHRqcy5WVFRDdWUpKXtmb3IodmFyIG4gaW4gdD1uZXcgaC52dHRqcy5WVFRDdWUoZS5zdGFydFRpbWUsZS5lbmRUaW1lLGUudGV4dCksZSluIGluIHR8fCh0W25dPWVbbl0pO3QuaWQ9ZS5pZCx0Lm9yaWdpbmFsQ3VlXz1lfWZvcih2YXIgaT10aGlzLnRlY2hfLnRleHRUcmFja3MoKSxyPTA7cjxpLmxlbmd0aDtyKyspaVtyXSE9PXRoaXMmJmlbcl0ucmVtb3ZlQ3VlKHQpO3RoaXMuY3Vlc18ucHVzaCh0KSx0aGlzLmN1ZXMuc2V0Q3Vlc18odGhpcy5jdWVzXyl9LHQucmVtb3ZlQ3VlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLmN1ZXNfLmxlbmd0aDt0LS07KXt2YXIgbj10aGlzLmN1ZXNfW3RdO2lmKG49PT1lfHxuLm9yaWdpbmFsQ3VlXyYmbi5vcmlnaW5hbEN1ZV89PT1lKXt0aGlzLmN1ZXNfLnNwbGljZSh0LDEpLHRoaXMuY3Vlcy5zZXRDdWVzXyh0aGlzLmN1ZXNfKTticmVha319fSxlfShxdCk7bW4ucHJvdG90eXBlLmFsbG93ZWRFdmVudHNfPXtjdWVjaGFuZ2U6XCJjdWVjaGFuZ2VcIn07dmFyIGJuPWZ1bmN0aW9uKHIpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ7dm9pZCAwPT09ZSYmKGU9e30pO3ZhciBuPVJlKGUse2tpbmQ6S3RbZS5raW5kXXx8XCJcIn0pO3Q9ci5jYWxsKHRoaXMsbil8fHRoaXM7dmFyIGk9ITE7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2KHYodCkpLFwiZW5hYmxlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sc2V0OmZ1bmN0aW9uKGUpe1wiYm9vbGVhblwiPT10eXBlb2YgZSYmZSE9PWkmJihpPWUsdGhpcy50cmlnZ2VyKFwiZW5hYmxlZGNoYW5nZVwiKSl9fSksbi5lbmFibGVkJiYodC5lbmFibGVkPW4uZW5hYmxlZCksdC5sb2FkZWRfPSEwLHR9cmV0dXJuIGYoZSxyKSxlfShxdCksVG49ZnVuY3Rpb24ocil7ZnVuY3Rpb24gZShlKXt2YXIgdDt2b2lkIDA9PT1lJiYoZT17fSk7dmFyIG49UmUoZSx7a2luZDp6dFtlLmtpbmRdfHxcIlwifSk7dD1yLmNhbGwodGhpcyxuKXx8dGhpczt2YXIgaT0hMTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHYodih0KSksXCJzZWxlY3RlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sc2V0OmZ1bmN0aW9uKGUpe1wiYm9vbGVhblwiPT10eXBlb2YgZSYmZSE9PWkmJihpPWUsdGhpcy50cmlnZ2VyKFwic2VsZWN0ZWRjaGFuZ2VcIikpfX0pLG4uc2VsZWN0ZWQmJih0LnNlbGVjdGVkPW4uc2VsZWN0ZWQpLHR9cmV0dXJuIGYoZSxyKSxlfShxdCksa249ZnVuY3Rpb24ocil7ZnVuY3Rpb24gZShlKXt2YXIgdCxuO3ZvaWQgMD09PWUmJihlPXt9KSx0PXIuY2FsbCh0aGlzKXx8dGhpczt2YXIgaT1uZXcgbW4oZSk7cmV0dXJuIHQua2luZD1pLmtpbmQsdC5zcmM9aS5zcmMsdC5zcmNsYW5nPWkubGFuZ3VhZ2UsdC5sYWJlbD1pLmxhYmVsLHQuZGVmYXVsdD1pLmRlZmF1bHQsT2JqZWN0LmRlZmluZVByb3BlcnRpZXModih2KHQpKSx7cmVhZHlTdGF0ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG59fSx0cmFjazp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9fX0pLG49MCxpLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZWRkYXRhXCIsZnVuY3Rpb24oKXtuPTIsdC50cmlnZ2VyKHt0eXBlOlwibG9hZFwiLHRhcmdldDp2KHYodCkpfSl9KSx0fXJldHVybiBmKGUsciksZX0oU2UpO2tuLnByb3RvdHlwZS5hbGxvd2VkRXZlbnRzXz17bG9hZDpcImxvYWRcIn0sa24uTk9ORT0wLGtuLkxPQURJTkc9MSxrbi5MT0FERUQ9Mixrbi5FUlJPUj0zO3ZhciBDbj17YXVkaW86e0xpc3RDbGFzczpJdCxUcmFja0NsYXNzOmJuLGNhcGl0YWxOYW1lOlwiQXVkaW9cIn0sdmlkZW86e0xpc3RDbGFzczpSdCxUcmFja0NsYXNzOlRuLGNhcGl0YWxOYW1lOlwiVmlkZW9cIn0sdGV4dDp7TGlzdENsYXNzOkJ0LFRyYWNrQ2xhc3M6bW4sY2FwaXRhbE5hbWU6XCJUZXh0XCJ9fTtPYmplY3Qua2V5cyhDbikuZm9yRWFjaChmdW5jdGlvbihlKXtDbltlXS5nZXR0ZXJOYW1lPWUrXCJUcmFja3NcIixDbltlXS5wcml2YXRlTmFtZT1lK1wiVHJhY2tzX1wifSk7dmFyIEVuPXtyZW1vdGVUZXh0OntMaXN0Q2xhc3M6QnQsVHJhY2tDbGFzczptbixjYXBpdGFsTmFtZTpcIlJlbW90ZVRleHRcIixnZXR0ZXJOYW1lOlwicmVtb3RlVGV4dFRyYWNrc1wiLHByaXZhdGVOYW1lOlwicmVtb3RlVGV4dFRyYWNrc19cIn0scmVtb3RlVGV4dEVsOntMaXN0Q2xhc3M6SHQsVHJhY2tDbGFzczprbixjYXBpdGFsTmFtZTpcIlJlbW90ZVRleHRUcmFja0Vsc1wiLGdldHRlck5hbWU6XCJyZW1vdGVUZXh0VHJhY2tFbHNcIixwcml2YXRlTmFtZTpcInJlbW90ZVRleHRUcmFja0Vsc19cIn19LFNuPVJlKENuLEVuKTtFbi5uYW1lcz1PYmplY3Qua2V5cyhFbiksQ24ubmFtZXM9T2JqZWN0LmtleXMoQ24pLFNuLm5hbWVzPVtdLmNvbmNhdChFbi5uYW1lcykuY29uY2F0KENuLm5hbWVzKTt2YXIgd249e307dmFyIHhuPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG4obixlKXt2YXIgaTtyZXR1cm4gdm9pZCAwPT09biYmKG49e30pLHZvaWQgMD09PWUmJihlPWZ1bmN0aW9uKCl7fSksbi5yZXBvcnRUb3VjaEFjdGl2aXR5PSExLChpPXQuY2FsbCh0aGlzLG51bGwsbixlKXx8dGhpcykuaGFzU3RhcnRlZF89ITEsaS5vbihcInBsYXlpbmdcIixmdW5jdGlvbigpe3RoaXMuaGFzU3RhcnRlZF89ITB9KSxpLm9uKFwibG9hZHN0YXJ0XCIsZnVuY3Rpb24oKXt0aGlzLmhhc1N0YXJ0ZWRfPSExfSksU24ubmFtZXMuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1TbltlXTtuJiZuW3QuZ2V0dGVyTmFtZV0mJihpW3QucHJpdmF0ZU5hbWVdPW5bdC5nZXR0ZXJOYW1lXSl9KSxpLmZlYXR1cmVzUHJvZ3Jlc3NFdmVudHN8fGkubWFudWFsUHJvZ3Jlc3NPbigpLGkuZmVhdHVyZXNUaW1ldXBkYXRlRXZlbnRzfHxpLm1hbnVhbFRpbWVVcGRhdGVzT24oKSxbXCJUZXh0XCIsXCJBdWRpb1wiLFwiVmlkZW9cIl0uZm9yRWFjaChmdW5jdGlvbihlKXshMT09PW5bXCJuYXRpdmVcIitlK1wiVHJhY2tzXCJdJiYoaVtcImZlYXR1cmVzTmF0aXZlXCIrZStcIlRyYWNrc1wiXT0hMSl9KSwhMT09PW4ubmF0aXZlQ2FwdGlvbnN8fCExPT09bi5uYXRpdmVUZXh0VHJhY2tzP2kuZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzPSExOiEwIT09bi5uYXRpdmVDYXB0aW9ucyYmITAhPT1uLm5hdGl2ZVRleHRUcmFja3N8fChpLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcz0hMCksaS5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3N8fGkuZW11bGF0ZVRleHRUcmFja3MoKSxpLmF1dG9SZW1vdGVUZXh0VHJhY2tzXz1uZXcgU24udGV4dC5MaXN0Q2xhc3MsaS5pbml0VHJhY2tMaXN0ZW5lcnMoKSxuLm5hdGl2ZUNvbnRyb2xzRm9yVG91Y2h8fGkuZW1pdFRhcEV2ZW50cygpLGkuY29uc3RydWN0b3ImJihpLm5hbWVfPWkuY29uc3RydWN0b3IubmFtZXx8XCJVbmtub3duIFRlY2hcIiksaX1mKG4sdCk7dmFyIGU9bi5wcm90b3R5cGU7cmV0dXJuIGUudHJpZ2dlclNvdXJjZXNldD1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMuaXNSZWFkeV98fHRoaXMub25lKFwicmVhZHlcIixmdW5jdGlvbigpe3JldHVybiB0LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gdC50cmlnZ2VyU291cmNlc2V0KGUpfSwxKX0pLHRoaXMudHJpZ2dlcih7c3JjOmUsdHlwZTpcInNvdXJjZXNldFwifSl9LGUubWFudWFsUHJvZ3Jlc3NPbj1mdW5jdGlvbigpe3RoaXMub24oXCJkdXJhdGlvbmNoYW5nZVwiLHRoaXMub25EdXJhdGlvbkNoYW5nZSksdGhpcy5tYW51YWxQcm9ncmVzcz0hMCx0aGlzLm9uZShcInJlYWR5XCIsdGhpcy50cmFja1Byb2dyZXNzKX0sZS5tYW51YWxQcm9ncmVzc09mZj1mdW5jdGlvbigpe3RoaXMubWFudWFsUHJvZ3Jlc3M9ITEsdGhpcy5zdG9wVHJhY2tpbmdQcm9ncmVzcygpLHRoaXMub2ZmKFwiZHVyYXRpb25jaGFuZ2VcIix0aGlzLm9uRHVyYXRpb25DaGFuZ2UpfSxlLnRyYWNrUHJvZ3Jlc3M9ZnVuY3Rpb24oZSl7dGhpcy5zdG9wVHJhY2tpbmdQcm9ncmVzcygpLHRoaXMucHJvZ3Jlc3NJbnRlcnZhbD10aGlzLnNldEludGVydmFsKENlKHRoaXMsZnVuY3Rpb24oKXt2YXIgZT10aGlzLmJ1ZmZlcmVkUGVyY2VudCgpO3RoaXMuYnVmZmVyZWRQZXJjZW50XyE9PWUmJnRoaXMudHJpZ2dlcihcInByb2dyZXNzXCIpLDE9PT0odGhpcy5idWZmZXJlZFBlcmNlbnRfPWUpJiZ0aGlzLnN0b3BUcmFja2luZ1Byb2dyZXNzKCl9KSw1MDApfSxlLm9uRHVyYXRpb25DaGFuZ2U9ZnVuY3Rpb24oZSl7dGhpcy5kdXJhdGlvbl89dGhpcy5kdXJhdGlvbigpfSxlLmJ1ZmZlcmVkPWZ1bmN0aW9uKCl7cmV0dXJuIGR0KDAsMCl9LGUuYnVmZmVyZWRQZXJjZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHB0KHRoaXMuYnVmZmVyZWQoKSx0aGlzLmR1cmF0aW9uXyl9LGUuc3RvcFRyYWNraW5nUHJvZ3Jlc3M9ZnVuY3Rpb24oKXt0aGlzLmNsZWFySW50ZXJ2YWwodGhpcy5wcm9ncmVzc0ludGVydmFsKX0sZS5tYW51YWxUaW1lVXBkYXRlc09uPWZ1bmN0aW9uKCl7dGhpcy5tYW51YWxUaW1lVXBkYXRlcz0hMCx0aGlzLm9uKFwicGxheVwiLHRoaXMudHJhY2tDdXJyZW50VGltZSksdGhpcy5vbihcInBhdXNlXCIsdGhpcy5zdG9wVHJhY2tpbmdDdXJyZW50VGltZSl9LGUubWFudWFsVGltZVVwZGF0ZXNPZmY9ZnVuY3Rpb24oKXt0aGlzLm1hbnVhbFRpbWVVcGRhdGVzPSExLHRoaXMuc3RvcFRyYWNraW5nQ3VycmVudFRpbWUoKSx0aGlzLm9mZihcInBsYXlcIix0aGlzLnRyYWNrQ3VycmVudFRpbWUpLHRoaXMub2ZmKFwicGF1c2VcIix0aGlzLnN0b3BUcmFja2luZ0N1cnJlbnRUaW1lKX0sZS50cmFja0N1cnJlbnRUaW1lPWZ1bmN0aW9uKCl7dGhpcy5jdXJyZW50VGltZUludGVydmFsJiZ0aGlzLnN0b3BUcmFja2luZ0N1cnJlbnRUaW1lKCksdGhpcy5jdXJyZW50VGltZUludGVydmFsPXRoaXMuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXt0aGlzLnRyaWdnZXIoe3R5cGU6XCJ0aW1ldXBkYXRlXCIsdGFyZ2V0OnRoaXMsbWFudWFsbHlUcmlnZ2VyZWQ6ITB9KX0sMjUwKX0sZS5zdG9wVHJhY2tpbmdDdXJyZW50VGltZT1mdW5jdGlvbigpe3RoaXMuY2xlYXJJbnRlcnZhbCh0aGlzLmN1cnJlbnRUaW1lSW50ZXJ2YWwpLHRoaXMudHJpZ2dlcih7dHlwZTpcInRpbWV1cGRhdGVcIix0YXJnZXQ6dGhpcyxtYW51YWxseVRyaWdnZXJlZDohMH0pfSxlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmNsZWFyVHJhY2tzKENuLm5hbWVzKSx0aGlzLm1hbnVhbFByb2dyZXNzJiZ0aGlzLm1hbnVhbFByb2dyZXNzT2ZmKCksdGhpcy5tYW51YWxUaW1lVXBkYXRlcyYmdGhpcy5tYW51YWxUaW1lVXBkYXRlc09mZigpLHQucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKX0sZS5jbGVhclRyYWNrcz1mdW5jdGlvbihlKXt2YXIgcj10aGlzOyhlPVtdLmNvbmNhdChlKSkuZm9yRWFjaChmdW5jdGlvbihlKXtmb3IodmFyIHQ9cltlK1wiVHJhY2tzXCJdKCl8fFtdLG49dC5sZW5ndGg7bi0tOyl7dmFyIGk9dFtuXTtcInRleHRcIj09PWUmJnIucmVtb3ZlUmVtb3RlVGV4dFRyYWNrKGkpLHQucmVtb3ZlVHJhY2soaSl9fSl9LGUuY2xlYW51cEF1dG9UZXh0VHJhY2tzPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuYXV0b1JlbW90ZVRleHRUcmFja3NffHxbXSx0PWUubGVuZ3RoO3QtLTspe3ZhciBuPWVbdF07dGhpcy5yZW1vdmVSZW1vdGVUZXh0VHJhY2sobil9fSxlLnJlc2V0PWZ1bmN0aW9uKCl7fSxlLmVycm9yPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDAhPT1lJiYodGhpcy5lcnJvcl89bmV3IFR0KGUpLHRoaXMudHJpZ2dlcihcImVycm9yXCIpKSx0aGlzLmVycm9yX30sZS5wbGF5ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oYXNTdGFydGVkXz9kdCgwLDApOmR0KCl9LGUuc2V0Q3VycmVudFRpbWU9ZnVuY3Rpb24oKXt0aGlzLm1hbnVhbFRpbWVVcGRhdGVzJiZ0aGlzLnRyaWdnZXIoe3R5cGU6XCJ0aW1ldXBkYXRlXCIsdGFyZ2V0OnRoaXMsbWFudWFsbHlUcmlnZ2VyZWQ6ITB9KX0sZS5pbml0VHJhY2tMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgcj10aGlzO0NuLm5hbWVzLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9Q25bZV0sbj1mdW5jdGlvbigpe3IudHJpZ2dlcihlK1widHJhY2tjaGFuZ2VcIil9LGk9clt0LmdldHRlck5hbWVdKCk7aS5hZGRFdmVudExpc3RlbmVyKFwicmVtb3ZldHJhY2tcIixuKSxpLmFkZEV2ZW50TGlzdGVuZXIoXCJhZGR0cmFja1wiLG4pLHIub24oXCJkaXNwb3NlXCIsZnVuY3Rpb24oKXtpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZW1vdmV0cmFja1wiLG4pLGkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFkZHRyYWNrXCIsbil9KX0pfSxlLmFkZFdlYlZ0dFNjcmlwdF89ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKCFoLldlYlZUVClpZihkLmJvZHkuY29udGFpbnModGhpcy5lbCgpKSl7aWYoIXRoaXMub3B0aW9uc19bXCJ2dHQuanNcIl0mJmMod24pJiYwPE9iamVjdC5rZXlzKHduKS5sZW5ndGgpcmV0dXJuIHZvaWQgdGhpcy50cmlnZ2VyKFwidnR0anNsb2FkZWRcIik7dmFyIHQ9ZC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO3Quc3JjPXRoaXMub3B0aW9uc19bXCJ2dHQuanNcIl18fFwiaHR0cHM6Ly92anMuemVuY2RuLm5ldC92dHRqcy8wLjE0LjEvdnR0Lm1pbi5qc1wiLHQub25sb2FkPWZ1bmN0aW9uKCl7ZS50cmlnZ2VyKFwidnR0anNsb2FkZWRcIil9LHQub25lcnJvcj1mdW5jdGlvbigpe2UudHJpZ2dlcihcInZ0dGpzZXJyb3JcIil9LHRoaXMub24oXCJkaXNwb3NlXCIsZnVuY3Rpb24oKXt0Lm9ubG9hZD1udWxsLHQub25lcnJvcj1udWxsfSksaC5XZWJWVFQ9ITAsdGhpcy5lbCgpLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodCl9ZWxzZSB0aGlzLnJlYWR5KHRoaXMuYWRkV2ViVnR0U2NyaXB0Xyl9LGUuZW11bGF0ZVRleHRUcmFja3M9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49dGhpcy50ZXh0VHJhY2tzKCksdD10aGlzLnJlbW90ZVRleHRUcmFja3MoKSxpPWZ1bmN0aW9uKGUpe3JldHVybiBuLmFkZFRyYWNrKGUudHJhY2spfSxyPWZ1bmN0aW9uKGUpe3JldHVybiBuLnJlbW92ZVRyYWNrKGUudHJhY2spfTt0Lm9uKFwiYWRkdHJhY2tcIixpKSx0Lm9uKFwicmVtb3ZldHJhY2tcIixyKSx0aGlzLmFkZFdlYlZ0dFNjcmlwdF8oKTt2YXIgcz1mdW5jdGlvbigpe3JldHVybiBlLnRyaWdnZXIoXCJ0ZXh0dHJhY2tjaGFuZ2VcIil9LG89ZnVuY3Rpb24oKXtzKCk7Zm9yKHZhciBlPTA7ZTxuLmxlbmd0aDtlKyspe3ZhciB0PW5bZV07dC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY3VlY2hhbmdlXCIscyksXCJzaG93aW5nXCI9PT10Lm1vZGUmJnQuYWRkRXZlbnRMaXN0ZW5lcihcImN1ZWNoYW5nZVwiLHMpfX07bygpLG4uYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLG8pLG4uYWRkRXZlbnRMaXN0ZW5lcihcImFkZHRyYWNrXCIsbyksbi5hZGRFdmVudExpc3RlbmVyKFwicmVtb3ZldHJhY2tcIixvKSx0aGlzLm9uKFwiZGlzcG9zZVwiLGZ1bmN0aW9uKCl7dC5vZmYoXCJhZGR0cmFja1wiLGkpLHQub2ZmKFwicmVtb3ZldHJhY2tcIixyKSxuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIixvKSxuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhZGR0cmFja1wiLG8pLG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlbW92ZXRyYWNrXCIsbyk7Zm9yKHZhciBlPTA7ZTxuLmxlbmd0aDtlKyspe25bZV0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImN1ZWNoYW5nZVwiLHMpfX0pfSxlLmFkZFRleHRUcmFjaz1mdW5jdGlvbihlLHQsbil7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiVGV4dFRyYWNrIGtpbmQgaXMgcmVxdWlyZWQgYnV0IHdhcyBub3QgcHJvdmlkZWRcIik7cmV0dXJuIGZ1bmN0aW9uKGUsdCxuLGkscil7dm9pZCAwPT09ciYmKHI9e30pO3ZhciBzPWUudGV4dFRyYWNrcygpO3Iua2luZD10LG4mJihyLmxhYmVsPW4pLGkmJihyLmxhbmd1YWdlPWkpLHIudGVjaD1lO3ZhciBvPW5ldyBTbi50ZXh0LlRyYWNrQ2xhc3Mocik7cmV0dXJuIHMuYWRkVHJhY2sobyksb30odGhpcyxlLHQsbil9LGUuY3JlYXRlUmVtb3RlVGV4dFRyYWNrPWZ1bmN0aW9uKGUpe3ZhciB0PVJlKGUse3RlY2g6dGhpc30pO3JldHVybiBuZXcgRW4ucmVtb3RlVGV4dEVsLlRyYWNrQ2xhc3ModCl9LGUuYWRkUmVtb3RlVGV4dFRyYWNrPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpczt2b2lkIDA9PT1lJiYoZT17fSk7dmFyIGk9dGhpcy5jcmVhdGVSZW1vdGVUZXh0VHJhY2soZSk7cmV0dXJuITAhPT10JiYhMSE9PXQmJihnLndhcm4oJ0NhbGxpbmcgYWRkUmVtb3RlVGV4dFRyYWNrIHdpdGhvdXQgZXhwbGljaXRseSBzZXR0aW5nIHRoZSBcIm1hbnVhbENsZWFudXBcIiBwYXJhbWV0ZXIgdG8gYHRydWVgIGlzIGRlcHJlY2F0ZWQgYW5kIGRlZmF1bHQgdG8gYGZhbHNlYCBpbiBmdXR1cmUgdmVyc2lvbiBvZiB2aWRlby5qcycpLHQ9ITApLHRoaXMucmVtb3RlVGV4dFRyYWNrRWxzKCkuYWRkVHJhY2tFbGVtZW50XyhpKSx0aGlzLnJlbW90ZVRleHRUcmFja3MoKS5hZGRUcmFjayhpLnRyYWNrKSwhMCE9PXQmJnRoaXMucmVhZHkoZnVuY3Rpb24oKXtyZXR1cm4gbi5hdXRvUmVtb3RlVGV4dFRyYWNrc18uYWRkVHJhY2soaS50cmFjayl9KSxpfSxlLnJlbW92ZVJlbW90ZVRleHRUcmFjaz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnJlbW90ZVRleHRUcmFja0VscygpLmdldFRyYWNrRWxlbWVudEJ5VHJhY2tfKGUpO3RoaXMucmVtb3RlVGV4dFRyYWNrRWxzKCkucmVtb3ZlVHJhY2tFbGVtZW50Xyh0KSx0aGlzLnJlbW90ZVRleHRUcmFja3MoKS5yZW1vdmVUcmFjayhlKSx0aGlzLmF1dG9SZW1vdGVUZXh0VHJhY2tzXy5yZW1vdmVUcmFjayhlKX0sZS5nZXRWaWRlb1BsYXliYWNrUXVhbGl0eT1mdW5jdGlvbigpe3JldHVybnt9fSxlLnNldFBvc3Rlcj1mdW5jdGlvbigpe30sZS5wbGF5c2lubGluZT1mdW5jdGlvbigpe30sZS5zZXRQbGF5c2lubGluZT1mdW5jdGlvbigpe30sZS5vdmVycmlkZU5hdGl2ZUF1ZGlvVHJhY2tzPWZ1bmN0aW9uKCl7fSxlLm92ZXJyaWRlTmF0aXZlVmlkZW9UcmFja3M9ZnVuY3Rpb24oKXt9LGUuY2FuUGxheVR5cGU9ZnVuY3Rpb24oKXtyZXR1cm5cIlwifSxuLmNhblBsYXlUeXBlPWZ1bmN0aW9uKCl7cmV0dXJuXCJcIn0sbi5jYW5QbGF5U291cmNlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uY2FuUGxheVR5cGUoZS50eXBlKX0sbi5pc1RlY2g9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucHJvdG90eXBlIGluc3RhbmNlb2Ygbnx8ZSBpbnN0YW5jZW9mIG58fGU9PT1ufSxuLnJlZ2lzdGVyVGVjaD1mdW5jdGlvbihlLHQpe2lmKG4udGVjaHNffHwobi50ZWNoc189e30pLCFuLmlzVGVjaCh0KSl0aHJvdyBuZXcgRXJyb3IoXCJUZWNoIFwiK2UrXCIgbXVzdCBiZSBhIFRlY2hcIik7aWYoIW4uY2FuUGxheVR5cGUpdGhyb3cgbmV3IEVycm9yKFwiVGVjaHMgbXVzdCBoYXZlIGEgc3RhdGljIGNhblBsYXlUeXBlIG1ldGhvZCBvbiB0aGVtXCIpO2lmKCFuLmNhblBsYXlTb3VyY2UpdGhyb3cgbmV3IEVycm9yKFwiVGVjaHMgbXVzdCBoYXZlIGEgc3RhdGljIGNhblBsYXlTb3VyY2UgbWV0aG9kIG9uIHRoZW1cIik7cmV0dXJuIGU9RmUoZSksbi50ZWNoc19bZV09dCxcIlRlY2hcIiE9PWUmJm4uZGVmYXVsdFRlY2hPcmRlcl8ucHVzaChlKSx0fSxuLmdldFRlY2g9ZnVuY3Rpb24oZSl7aWYoZSlyZXR1cm4gZT1GZShlKSxuLnRlY2hzXyYmbi50ZWNoc19bZV0/bi50ZWNoc19bZV06aCYmaC52aWRlb2pzJiZoLnZpZGVvanNbZV0/KGcud2FybihcIlRoZSBcIitlK1wiIHRlY2ggd2FzIGFkZGVkIHRvIHRoZSB2aWRlb2pzIG9iamVjdCB3aGVuIGl0IHNob3VsZCBiZSByZWdpc3RlcmVkIHVzaW5nIHZpZGVvanMucmVnaXN0ZXJUZWNoKG5hbWUsIHRlY2gpXCIpLGgudmlkZW9qc1tlXSk6dm9pZCAwfSxufShCZSk7U24ubmFtZXMuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1TbltlXTt4bi5wcm90b3R5cGVbdC5nZXR0ZXJOYW1lXT1mdW5jdGlvbigpe3JldHVybiB0aGlzW3QucHJpdmF0ZU5hbWVdPXRoaXNbdC5wcml2YXRlTmFtZV18fG5ldyB0Lkxpc3RDbGFzcyx0aGlzW3QucHJpdmF0ZU5hbWVdfX0pLHhuLnByb3RvdHlwZS5mZWF0dXJlc1ZvbHVtZUNvbnRyb2w9ITAseG4ucHJvdG90eXBlLmZlYXR1cmVzTXV0ZUNvbnRyb2w9ITAseG4ucHJvdG90eXBlLmZlYXR1cmVzRnVsbHNjcmVlblJlc2l6ZT0hMSx4bi5wcm90b3R5cGUuZmVhdHVyZXNQbGF5YmFja1JhdGU9ITEseG4ucHJvdG90eXBlLmZlYXR1cmVzUHJvZ3Jlc3NFdmVudHM9ITEseG4ucHJvdG90eXBlLmZlYXR1cmVzU291cmNlc2V0PSExLHhuLnByb3RvdHlwZS5mZWF0dXJlc1RpbWV1cGRhdGVFdmVudHM9ITEseG4ucHJvdG90eXBlLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcz0hMSx4bi53aXRoU291cmNlSGFuZGxlcnM9ZnVuY3Rpb24ocil7ci5yZWdpc3RlclNvdXJjZUhhbmRsZXI9ZnVuY3Rpb24oZSx0KXt2YXIgbj1yLnNvdXJjZUhhbmRsZXJzO258fChuPXIuc291cmNlSGFuZGxlcnM9W10pLHZvaWQgMD09PXQmJih0PW4ubGVuZ3RoKSxuLnNwbGljZSh0LDAsZSl9LHIuY2FuUGxheVR5cGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49ci5zb3VyY2VIYW5kbGVyc3x8W10saT0wO2k8bi5sZW5ndGg7aSsrKWlmKHQ9bltpXS5jYW5QbGF5VHlwZShlKSlyZXR1cm4gdDtyZXR1cm5cIlwifSxyLnNlbGVjdFNvdXJjZUhhbmRsZXI9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49ci5zb3VyY2VIYW5kbGVyc3x8W10saT0wO2k8bi5sZW5ndGg7aSsrKWlmKG5baV0uY2FuSGFuZGxlU291cmNlKGUsdCkpcmV0dXJuIG5baV07cmV0dXJuIG51bGx9LHIuY2FuUGxheVNvdXJjZT1mdW5jdGlvbihlLHQpe3ZhciBuPXIuc2VsZWN0U291cmNlSGFuZGxlcihlLHQpO3JldHVybiBuP24uY2FuSGFuZGxlU291cmNlKGUsdCk6XCJcIn07W1wic2Vla2FibGVcIixcInNlZWtpbmdcIixcImR1cmF0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9dGhpc1tlXTtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYodGhpc1tlXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNvdXJjZUhhbmRsZXJfJiZ0aGlzLnNvdXJjZUhhbmRsZXJfW2VdP3RoaXMuc291cmNlSGFuZGxlcl9bZV0uYXBwbHkodGhpcy5zb3VyY2VIYW5kbGVyXyxhcmd1bWVudHMpOnQuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHIucHJvdG90eXBlKSxyLnByb3RvdHlwZS5zZXRTb3VyY2U9ZnVuY3Rpb24oZSl7dmFyIHQ9ci5zZWxlY3RTb3VyY2VIYW5kbGVyKGUsdGhpcy5vcHRpb25zXyk7dHx8KHIubmF0aXZlU291cmNlSGFuZGxlcj90PXIubmF0aXZlU291cmNlSGFuZGxlcjpnLmVycm9yKFwiTm8gc291cmNlIGhhbmRsZXIgZm91bmQgZm9yIHRoZSBjdXJyZW50IHNvdXJjZS5cIikpLHRoaXMuZGlzcG9zZVNvdXJjZUhhbmRsZXIoKSx0aGlzLm9mZihcImRpc3Bvc2VcIix0aGlzLmRpc3Bvc2VTb3VyY2VIYW5kbGVyKSx0IT09ci5uYXRpdmVTb3VyY2VIYW5kbGVyJiYodGhpcy5jdXJyZW50U291cmNlXz1lKSx0aGlzLnNvdXJjZUhhbmRsZXJfPXQuaGFuZGxlU291cmNlKGUsdGhpcyx0aGlzLm9wdGlvbnNfKSx0aGlzLm9uZShcImRpc3Bvc2VcIix0aGlzLmRpc3Bvc2VTb3VyY2VIYW5kbGVyKX0sci5wcm90b3R5cGUuZGlzcG9zZVNvdXJjZUhhbmRsZXI9ZnVuY3Rpb24oKXt0aGlzLmN1cnJlbnRTb3VyY2VfJiYodGhpcy5jbGVhclRyYWNrcyhbXCJhdWRpb1wiLFwidmlkZW9cIl0pLHRoaXMuY3VycmVudFNvdXJjZV89bnVsbCksdGhpcy5jbGVhbnVwQXV0b1RleHRUcmFja3MoKSx0aGlzLnNvdXJjZUhhbmRsZXJfJiYodGhpcy5zb3VyY2VIYW5kbGVyXy5kaXNwb3NlJiZ0aGlzLnNvdXJjZUhhbmRsZXJfLmRpc3Bvc2UoKSx0aGlzLnNvdXJjZUhhbmRsZXJfPW51bGwpfX0sQmUucmVnaXN0ZXJDb21wb25lbnQoXCJUZWNoXCIseG4pLHhuLnJlZ2lzdGVyVGVjaChcIlRlY2hcIix4bikseG4uZGVmYXVsdFRlY2hPcmRlcl89W107dmFyIGpuPXt9LFBuPXt9LEFuPXt9O2Z1bmN0aW9uIE1uKGUsdCxuKXtlLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24gbihpLGUscixzLG8sYSl7dm9pZCAwPT09aSYmKGk9e30pO3ZvaWQgMD09PWUmJihlPVtdKTt2b2lkIDA9PT1vJiYobz1bXSk7dm9pZCAwPT09YSYmKGE9ITEpO3ZhciB0PWUsbD10WzBdLGM9dC5zbGljZSgxKTtpZihcInN0cmluZ1wiPT10eXBlb2YgbCluKGksam5bbF0scixzLG8sYSk7ZWxzZSBpZihsKXt2YXIgdT1GbihzLGwpO2lmKCF1LnNldFNvdXJjZSlyZXR1cm4gby5wdXNoKHUpLG4oaSxjLHIscyxvLGEpO3Uuc2V0U291cmNlKG0oe30saSksZnVuY3Rpb24oZSx0KXtpZihlKXJldHVybiBuKGksYyxyLHMsbyxhKTtvLnB1c2godSksbih0LGkudHlwZT09PXQudHlwZT9jOmpuW3QudHlwZV0scixzLG8sYSl9KX1lbHNlIGMubGVuZ3RoP24oaSxjLHIscyxvLGEpOmE/cihpLG8pOm4oaSxqbltcIipcIl0scixzLG8sITApfSh0LGpuW3QudHlwZV0sbixlKX0sMSl9ZnVuY3Rpb24gTG4oZSx0LG4saSl7dm9pZCAwPT09aSYmKGk9bnVsbCk7dmFyIHI9XCJjYWxsXCIrRmUobikscz1lLnJlZHVjZShJbihyKSxpKSxvPXM9PT1BbixhPW8/bnVsbDp0W25dKHMpO3JldHVybiBmdW5jdGlvbihlLHQsbixpKXtmb3IodmFyIHI9ZS5sZW5ndGgtMTswPD1yO3ItLSl7dmFyIHM9ZVtyXTtzW3RdJiZzW3RdKGksbil9fShlLG4sYSxvKSxhfXZhciBObj17YnVmZmVyZWQ6MSxjdXJyZW50VGltZToxLGR1cmF0aW9uOjEsc2Vla2FibGU6MSxwbGF5ZWQ6MSxwYXVzZWQ6MX0sT249e3NldEN1cnJlbnRUaW1lOjF9LERuPXtwbGF5OjEscGF1c2U6MX07ZnVuY3Rpb24gSW4obil7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9PT1Bbj9Bbjp0W25dP3Rbbl0oZSk6ZX19ZnVuY3Rpb24gRm4oZSx0KXt2YXIgbj1QbltlLmlkKCldLGk9bnVsbDtpZihudWxsPT1uKXJldHVybiBpPXQoZSksUG5bZS5pZCgpXT1bW3QsaV1dLGk7Zm9yKHZhciByPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBzPW5bcl0sbz1zWzBdLGE9c1sxXTtvPT09dCYmKGk9YSl9cmV0dXJuIG51bGw9PT1pJiYoaT10KGUpLG4ucHVzaChbdCxpXSkpLGl9dmFyIFJuPXtvcHVzOlwidmlkZW8vb2dnXCIsb2d2OlwidmlkZW8vb2dnXCIsbXA0OlwidmlkZW8vbXA0XCIsbW92OlwidmlkZW8vbXA0XCIsbTR2OlwidmlkZW8vbXA0XCIsbWt2OlwidmlkZW8veC1tYXRyb3NrYVwiLG1wMzpcImF1ZGlvL21wZWdcIixhYWM6XCJhdWRpby9hYWNcIixvZ2E6XCJhdWRpby9vZ2dcIixtM3U4OlwiYXBwbGljYXRpb24veC1tcGVnVVJMXCIsanBnOlwiaW1hZ2UvanBlZ1wiLGpwZWc6XCJpbWFnZS9qcGVnXCIsZ2lmOlwiaW1hZ2UvZ2lmXCIscG5nOlwiaW1hZ2UvcG5nXCIsc3ZnOlwiaW1hZ2Uvc3ZnK3htbFwiLHdlYnA6XCJpbWFnZS93ZWJwXCJ9LEJuPWZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUmJihlPVwiXCIpO3ZhciB0PUd0KGUpO3JldHVybiBSblt0LnRvTG93ZXJDYXNlKCldfHxcIlwifTtmdW5jdGlvbiBIbihlKXt2YXIgdD1CbihlLnNyYyk7cmV0dXJuIWUudHlwZSYmdCYmKGUudHlwZT10KSxlfXZhciBWbj1mdW5jdGlvbihjKXtmdW5jdGlvbiBlKGUsdCxuKXt2YXIgaSxyPVJlKHtjcmVhdGVFbDohMX0sdCk7aWYoaT1jLmNhbGwodGhpcyxlLHIsbil8fHRoaXMsdC5wbGF5ZXJPcHRpb25zLnNvdXJjZXMmJjAhPT10LnBsYXllck9wdGlvbnMuc291cmNlcy5sZW5ndGgpZS5zcmModC5wbGF5ZXJPcHRpb25zLnNvdXJjZXMpO2Vsc2UgZm9yKHZhciBzPTAsbz10LnBsYXllck9wdGlvbnMudGVjaE9yZGVyO3M8by5sZW5ndGg7cysrKXt2YXIgYT1GZShvW3NdKSxsPXhuLmdldFRlY2goYSk7aWYoYXx8KGw9QmUuZ2V0Q29tcG9uZW50KGEpKSxsJiZsLmlzU3VwcG9ydGVkKCkpe2UubG9hZFRlY2hfKGEpO2JyZWFrfX1yZXR1cm4gaX1yZXR1cm4gZihlLGMpLGV9KEJlKTtCZS5yZWdpc3RlckNvbXBvbmVudChcIk1lZGlhTG9hZGVyXCIsVm4pO3ZhciB6bj1mdW5jdGlvbihyKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuKG49ci5jYWxsKHRoaXMsZSx0KXx8dGhpcykuZW1pdFRhcEV2ZW50cygpLG4uZW5hYmxlKCksbn1mKGUscik7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY3JlYXRlRWw9ZnVuY3Rpb24oZSx0LG4pe3ZvaWQgMD09PWUmJihlPVwiZGl2XCIpLHZvaWQgMD09PXQmJih0PXt9KSx2b2lkIDA9PT1uJiYobj17fSksdD1tKHtpbm5lckhUTUw6JzxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGNsYXNzPVwidmpzLWljb24tcGxhY2Vob2xkZXJcIj48L3NwYW4+JyxjbGFzc05hbWU6dGhpcy5idWlsZENTU0NsYXNzKCksdGFiSW5kZXg6MH0sdCksXCJidXR0b25cIj09PWUmJmcuZXJyb3IoXCJDcmVhdGluZyBhIENsaWNrYWJsZUNvbXBvbmVudCB3aXRoIGFuIEhUTUwgZWxlbWVudCBvZiBcIitlK1wiIGlzIG5vdCBzdXBwb3J0ZWQ7IHVzZSBhIEJ1dHRvbiBpbnN0ZWFkLlwiKSxuPW0oe3JvbGU6XCJidXR0b25cIn0sbiksdGhpcy50YWJJbmRleF89dC50YWJJbmRleDt2YXIgaT1yLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsZSx0LG4pO3JldHVybiB0aGlzLmNyZWF0ZUNvbnRyb2xUZXh0RWwoaSksaX0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5jb250cm9sVGV4dEVsXz1udWxsLHIucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKX0sdC5jcmVhdGVDb250cm9sVGV4dEVsPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNvbnRyb2xUZXh0RWxfPXgoXCJzcGFuXCIse2NsYXNzTmFtZTpcInZqcy1jb250cm9sLXRleHRcIn0se1wiYXJpYS1saXZlXCI6XCJwb2xpdGVcIn0pLGUmJmUuYXBwZW5kQ2hpbGQodGhpcy5jb250cm9sVGV4dEVsXyksdGhpcy5jb250cm9sVGV4dCh0aGlzLmNvbnRyb2xUZXh0XyxlKSx0aGlzLmNvbnRyb2xUZXh0RWxffSx0LmNvbnRyb2xUZXh0PWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dCYmKHQ9dGhpcy5lbCgpKSx2b2lkIDA9PT1lKXJldHVybiB0aGlzLmNvbnRyb2xUZXh0X3x8XCJOZWVkIFRleHRcIjt2YXIgbj10aGlzLmxvY2FsaXplKGUpO3RoaXMuY29udHJvbFRleHRfPWUsaih0aGlzLmNvbnRyb2xUZXh0RWxfLG4pLHRoaXMubm9uSWNvbkNvbnRyb2x8fHQuc2V0QXR0cmlidXRlKFwidGl0bGVcIixuKX0sdC5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtY29udHJvbCB2anMtYnV0dG9uIFwiK3IucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sdC5lbmFibGU9ZnVuY3Rpb24oKXt0aGlzLmVuYWJsZWRffHwodGhpcy5lbmFibGVkXz0hMCx0aGlzLnJlbW92ZUNsYXNzKFwidmpzLWRpc2FibGVkXCIpLHRoaXMuZWxfLnNldEF0dHJpYnV0ZShcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0aGlzLnRhYkluZGV4XyYmdGhpcy5lbF8uc2V0QXR0cmlidXRlKFwidGFiSW5kZXhcIix0aGlzLnRhYkluZGV4XyksdGhpcy5vbihbXCJ0YXBcIixcImNsaWNrXCJdLHRoaXMuaGFuZGxlQ2xpY2spLHRoaXMub24oXCJmb2N1c1wiLHRoaXMuaGFuZGxlRm9jdXMpLHRoaXMub24oXCJibHVyXCIsdGhpcy5oYW5kbGVCbHVyKSl9LHQuZGlzYWJsZT1mdW5jdGlvbigpe3RoaXMuZW5hYmxlZF89ITEsdGhpcy5hZGRDbGFzcyhcInZqcy1kaXNhYmxlZFwiKSx0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0aGlzLnRhYkluZGV4XyYmdGhpcy5lbF8ucmVtb3ZlQXR0cmlidXRlKFwidGFiSW5kZXhcIiksdGhpcy5vZmYoW1widGFwXCIsXCJjbGlja1wiXSx0aGlzLmhhbmRsZUNsaWNrKSx0aGlzLm9mZihcImZvY3VzXCIsdGhpcy5oYW5kbGVGb2N1cyksdGhpcy5vZmYoXCJibHVyXCIsdGhpcy5oYW5kbGVCbHVyKX0sdC5oYW5kbGVDbGljaz1mdW5jdGlvbihlKXt9LHQuaGFuZGxlRm9jdXM9ZnVuY3Rpb24oZSl7aGUoZCxcImtleWRvd25cIixDZSh0aGlzLHRoaXMuaGFuZGxlS2V5UHJlc3MpKX0sdC5oYW5kbGVLZXlQcmVzcz1mdW5jdGlvbihlKXtBdC5pc0V2ZW50S2V5KGUsXCJTcGFjZVwiKXx8QXQuaXNFdmVudEtleShlLFwiRW50ZXJcIik/KGUucHJldmVudERlZmF1bHQoKSx0aGlzLnRyaWdnZXIoXCJjbGlja1wiKSk6ci5wcm90b3R5cGUuaGFuZGxlS2V5UHJlc3MuY2FsbCh0aGlzLGUpfSx0LmhhbmRsZUJsdXI9ZnVuY3Rpb24oZSl7ZGUoZCxcImtleWRvd25cIixDZSh0aGlzLHRoaXMuaGFuZGxlS2V5UHJlc3MpKX0sZX0oQmUpO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiQ2xpY2thYmxlQ29tcG9uZW50XCIsem4pO3ZhciBLbj1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuKG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcykudXBkYXRlKCksZS5vbihcInBvc3RlcmNoYW5nZVwiLENlKHYodihuKSksbi51cGRhdGUpKSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5wbGF5ZXIoKS5vZmYoXCJwb3N0ZXJjaGFuZ2VcIix0aGlzLnVwZGF0ZSksaS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpfSx0LmNyZWF0ZUVsPWZ1bmN0aW9uKCl7cmV0dXJuIHgoXCJkaXZcIix7Y2xhc3NOYW1lOlwidmpzLXBvc3RlclwiLHRhYkluZGV4Oi0xfSl9LHQudXBkYXRlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMucGxheWVyKCkucG9zdGVyKCk7dGhpcy5zZXRTcmModCksdD90aGlzLnNob3coKTp0aGlzLmhpZGUoKX0sdC5zZXRTcmM9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtlJiYodD0ndXJsKFwiJytlKydcIiknKSx0aGlzLmVsXy5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2U9dH0sdC5oYW5kbGVDbGljaz1mdW5jdGlvbihlKXt0aGlzLnBsYXllcl8uY29udHJvbHMoKSYmKHRoaXMucGxheWVyXy5wYXVzZWQoKT9TdCh0aGlzLnBsYXllcl8ucGxheSgpKTp0aGlzLnBsYXllcl8ucGF1c2UoKSx0aGlzLnBsYXllcl8uaGFuZGxlRm9jdXMoe30pKX0sZX0oem4pO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiUG9zdGVySW1hZ2VcIixLbik7dmFyIFduPVwiIzIyMlwiLFVuPXttb25vc3BhY2U6XCJtb25vc3BhY2VcIixzYW5zU2VyaWY6XCJzYW5zLXNlcmlmXCIsc2VyaWY6XCJzZXJpZlwiLG1vbm9zcGFjZVNhbnNTZXJpZjonXCJBbmRhbGUgTW9ub1wiLCBcIkx1Y2lkYSBDb25zb2xlXCIsIG1vbm9zcGFjZScsbW9ub3NwYWNlU2VyaWY6J1wiQ291cmllciBOZXdcIiwgbW9ub3NwYWNlJyxwcm9wb3J0aW9uYWxTYW5zU2VyaWY6XCJzYW5zLXNlcmlmXCIscHJvcG9ydGlvbmFsU2VyaWY6XCJzZXJpZlwiLGNhc3VhbDonXCJDb21pYyBTYW5zIE1TXCIsIEltcGFjdCwgZmFudGFzeScsc2NyaXB0OidcIk1vbm90eXBlIENvcnNpdmFcIiwgY3Vyc2l2ZScsc21hbGxjYXBzOidcIkFuZGFsZSBNb25vXCIsIFwiTHVjaWRhIENvbnNvbGVcIiwgbW9ub3NwYWNlLCBzYW5zLXNlcmlmJ307ZnVuY3Rpb24gcW4oZSx0KXt2YXIgbjtpZig0PT09ZS5sZW5ndGgpbj1lWzFdK2VbMV0rZVsyXStlWzJdK2VbM10rZVszXTtlbHNle2lmKDchPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvbG9yIGNvZGUgcHJvdmlkZWQsIFwiK2UrXCI7IG11c3QgYmUgZm9ybWF0dGVkIGFzIGUuZy4gI2YwZSBvciAjZjYwNGUyLlwiKTtuPWUuc2xpY2UoMSl9cmV0dXJuXCJyZ2JhKFwiK3BhcnNlSW50KG4uc2xpY2UoMCwyKSwxNikrXCIsXCIrcGFyc2VJbnQobi5zbGljZSgyLDQpLDE2KStcIixcIitwYXJzZUludChuLnNsaWNlKDQsNiksMTYpK1wiLFwiK3QrXCIpXCJ9ZnVuY3Rpb24gWG4oZSx0LG4pe3RyeXtlLnN0eWxlW3RdPW59Y2F0Y2goZSl7cmV0dXJufX12YXIgJG49ZnVuY3Rpb24ocyl7ZnVuY3Rpb24gZShuLGUsdCl7dmFyIGk7aT1zLmNhbGwodGhpcyxuLGUsdCl8fHRoaXM7dmFyIHI9Q2Uodih2KGkpKSxpLnVwZGF0ZURpc3BsYXkpO3JldHVybiBuLm9uKFwibG9hZHN0YXJ0XCIsQ2Uodih2KGkpKSxpLnRvZ2dsZURpc3BsYXkpKSxuLm9uKFwidGV4dHRyYWNrY2hhbmdlXCIsciksbi5vbihcImxvYWRlZG1ldGFkYXRhXCIsQ2Uodih2KGkpKSxpLnByZXNlbGVjdFRyYWNrKSksbi5yZWFkeShDZSh2KHYoaSkpLGZ1bmN0aW9uKCl7aWYobi50ZWNoXyYmbi50ZWNoXy5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3MpdGhpcy5oaWRlKCk7ZWxzZXtuLm9uKFwiZnVsbHNjcmVlbmNoYW5nZVwiLHIpLG4ub24oXCJwbGF5ZXJyZXNpemVcIixyKSxoLmFkZEV2ZW50TGlzdGVuZXIoXCJvcmllbnRhdGlvbmNoYW5nZVwiLHIpLG4ub24oXCJkaXNwb3NlXCIsZnVuY3Rpb24oKXtyZXR1cm4gaC5yZW1vdmVFdmVudExpc3RlbmVyKFwib3JpZW50YXRpb25jaGFuZ2VcIixyKX0pO2Zvcih2YXIgZT10aGlzLm9wdGlvbnNfLnBsYXllck9wdGlvbnMudHJhY2tzfHxbXSx0PTA7dDxlLmxlbmd0aDt0KyspdGhpcy5wbGF5ZXJfLmFkZFJlbW90ZVRleHRUcmFjayhlW3RdLCEwKTt0aGlzLnByZXNlbGVjdFRyYWNrKCl9fSkpLGl9ZihlLHMpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LnByZXNlbGVjdFRyYWNrPWZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQsbixpPXtjYXB0aW9uczoxLHN1YnRpdGxlczoxfSxyPXRoaXMucGxheWVyXy50ZXh0VHJhY2tzKCkscz10aGlzLnBsYXllcl8uY2FjaGVfLnNlbGVjdGVkTGFuZ3VhZ2Usbz0wO288ci5sZW5ndGg7bysrKXt2YXIgYT1yW29dO3MmJnMuZW5hYmxlZCYmcy5sYW5ndWFnZSYmcy5sYW5ndWFnZT09PWEubGFuZ3VhZ2UmJmEua2luZCBpbiBpP2Eua2luZD09PXMua2luZD9uPWE6bnx8KG49YSk6cyYmIXMuZW5hYmxlZD90PWU9bj1udWxsOmEuZGVmYXVsdCYmKFwiZGVzY3JpcHRpb25zXCIhPT1hLmtpbmR8fGU/YS5raW5kIGluIGkmJiF0JiYodD1hKTplPWEpfW4/bi5tb2RlPVwic2hvd2luZ1wiOnQ/dC5tb2RlPVwic2hvd2luZ1wiOmUmJihlLm1vZGU9XCJzaG93aW5nXCIpfSx0LnRvZ2dsZURpc3BsYXk9ZnVuY3Rpb24oKXt0aGlzLnBsYXllcl8udGVjaF8mJnRoaXMucGxheWVyXy50ZWNoXy5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3M/dGhpcy5oaWRlKCk6dGhpcy5zaG93KCl9LHQuY3JlYXRlRWw9ZnVuY3Rpb24oKXtyZXR1cm4gcy5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIse2NsYXNzTmFtZTpcInZqcy10ZXh0LXRyYWNrLWRpc3BsYXlcIn0se1wiYXJpYS1saXZlXCI6XCJvZmZcIixcImFyaWEtYXRvbWljXCI6XCJ0cnVlXCJ9KX0sdC5jbGVhckRpc3BsYXk9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBoLldlYlZUVCYmaC5XZWJWVFQucHJvY2Vzc0N1ZXMoaCxbXSx0aGlzLmVsXyl9LHQudXBkYXRlRGlzcGxheT1mdW5jdGlvbigpe3ZhciBlPXRoaXMucGxheWVyXy50ZXh0VHJhY2tzKCk7dGhpcy5jbGVhckRpc3BsYXkoKTtmb3IodmFyIHQ9bnVsbCxuPW51bGwsaT1lLmxlbmd0aDtpLS07KXt2YXIgcj1lW2ldO1wic2hvd2luZ1wiPT09ci5tb2RlJiYoXCJkZXNjcmlwdGlvbnNcIj09PXIua2luZD90PXI6bj1yKX1uPyhcIm9mZlwiIT09dGhpcy5nZXRBdHRyaWJ1dGUoXCJhcmlhLWxpdmVcIikmJnRoaXMuc2V0QXR0cmlidXRlKFwiYXJpYS1saXZlXCIsXCJvZmZcIiksdGhpcy51cGRhdGVGb3JUcmFjayhuKSk6dCYmKFwiYXNzZXJ0aXZlXCIhPT10aGlzLmdldEF0dHJpYnV0ZShcImFyaWEtbGl2ZVwiKSYmdGhpcy5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxpdmVcIixcImFzc2VydGl2ZVwiKSx0aGlzLnVwZGF0ZUZvclRyYWNrKHQpKX0sdC51cGRhdGVGb3JUcmFjaz1mdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBoLldlYlZUVCYmZS5hY3RpdmVDdWVzKXtmb3IodmFyIHQ9W10sbj0wO248ZS5hY3RpdmVDdWVzLmxlbmd0aDtuKyspdC5wdXNoKGUuYWN0aXZlQ3Vlc1tuXSk7aWYoaC5XZWJWVFQucHJvY2Vzc0N1ZXMoaCx0LHRoaXMuZWxfKSx0aGlzLnBsYXllcl8udGV4dFRyYWNrU2V0dGluZ3MpZm9yKHZhciBpPXRoaXMucGxheWVyXy50ZXh0VHJhY2tTZXR0aW5ncy5nZXRWYWx1ZXMoKSxyPXQubGVuZ3RoO3ItLTspe3ZhciBzPXRbcl07aWYocyl7dmFyIG89cy5kaXNwbGF5U3RhdGU7aWYoaS5jb2xvciYmKG8uZmlyc3RDaGlsZC5zdHlsZS5jb2xvcj1pLmNvbG9yKSxpLnRleHRPcGFjaXR5JiZYbihvLmZpcnN0Q2hpbGQsXCJjb2xvclwiLHFuKGkuY29sb3J8fFwiI2ZmZlwiLGkudGV4dE9wYWNpdHkpKSxpLmJhY2tncm91bmRDb2xvciYmKG8uZmlyc3RDaGlsZC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9aS5iYWNrZ3JvdW5kQ29sb3IpLGkuYmFja2dyb3VuZE9wYWNpdHkmJlhuKG8uZmlyc3RDaGlsZCxcImJhY2tncm91bmRDb2xvclwiLHFuKGkuYmFja2dyb3VuZENvbG9yfHxcIiMwMDBcIixpLmJhY2tncm91bmRPcGFjaXR5KSksaS53aW5kb3dDb2xvciYmKGkud2luZG93T3BhY2l0eT9YbihvLFwiYmFja2dyb3VuZENvbG9yXCIscW4oaS53aW5kb3dDb2xvcixpLndpbmRvd09wYWNpdHkpKTpvLnN0eWxlLmJhY2tncm91bmRDb2xvcj1pLndpbmRvd0NvbG9yKSxpLmVkZ2VTdHlsZSYmKFwiZHJvcHNoYWRvd1wiPT09aS5lZGdlU3R5bGU/by5maXJzdENoaWxkLnN0eWxlLnRleHRTaGFkb3c9XCIycHggMnB4IDNweCAjMjIyLCAycHggMnB4IDRweCAjMjIyLCAycHggMnB4IDVweCBcIitXbjpcInJhaXNlZFwiPT09aS5lZGdlU3R5bGU/by5maXJzdENoaWxkLnN0eWxlLnRleHRTaGFkb3c9XCIxcHggMXB4ICMyMjIsIDJweCAycHggIzIyMiwgM3B4IDNweCBcIitXbjpcImRlcHJlc3NlZFwiPT09aS5lZGdlU3R5bGU/by5maXJzdENoaWxkLnN0eWxlLnRleHRTaGFkb3c9XCIxcHggMXB4ICNjY2MsIDAgMXB4ICNjY2MsIC0xcHggLTFweCAjMjIyLCAwIC0xcHggXCIrV246XCJ1bmlmb3JtXCI9PT1pLmVkZ2VTdHlsZSYmKG8uZmlyc3RDaGlsZC5zdHlsZS50ZXh0U2hhZG93PVwiMCAwIDRweCAjMjIyLCAwIDAgNHB4ICMyMjIsIDAgMCA0cHggIzIyMiwgMCAwIDRweCBcIitXbikpLGkuZm9udFBlcmNlbnQmJjEhPT1pLmZvbnRQZXJjZW50KXt2YXIgYT1oLnBhcnNlRmxvYXQoby5zdHlsZS5mb250U2l6ZSk7by5zdHlsZS5mb250U2l6ZT1hKmkuZm9udFBlcmNlbnQrXCJweFwiLG8uc3R5bGUuaGVpZ2h0PVwiYXV0b1wiLG8uc3R5bGUudG9wPVwiYXV0b1wiLG8uc3R5bGUuYm90dG9tPVwiMnB4XCJ9aS5mb250RmFtaWx5JiZcImRlZmF1bHRcIiE9PWkuZm9udEZhbWlseSYmKFwic21hbGwtY2Fwc1wiPT09aS5mb250RmFtaWx5P28uZmlyc3RDaGlsZC5zdHlsZS5mb250VmFyaWFudD1cInNtYWxsLWNhcHNcIjpvLmZpcnN0Q2hpbGQuc3R5bGUuZm9udEZhbWlseT1VbltpLmZvbnRGYW1pbHldKX19fX0sZX0oQmUpO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiVGV4dFRyYWNrRGlzcGxheVwiLCRuKTt2YXIgR249ZnVuY3Rpb24ocil7ZnVuY3Rpb24gZSgpe3JldHVybiByLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4gZihlLHIpLGUucHJvdG90eXBlLmNyZWF0ZUVsPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wbGF5ZXJfLmlzQXVkaW8oKSx0PXRoaXMubG9jYWxpemUoZT9cIkF1ZGlvIFBsYXllclwiOlwiVmlkZW8gUGxheWVyXCIpLG49eChcInNwYW5cIix7Y2xhc3NOYW1lOlwidmpzLWNvbnRyb2wtdGV4dFwiLGlubmVySFRNTDp0aGlzLmxvY2FsaXplKFwiezF9IGlzIGxvYWRpbmcuXCIsW3RdKX0pLGk9ci5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIse2NsYXNzTmFtZTpcInZqcy1sb2FkaW5nLXNwaW5uZXJcIixkaXI6XCJsdHJcIn0pO3JldHVybiBpLmFwcGVuZENoaWxkKG4pLGl9LGV9KEJlKTtCZS5yZWdpc3RlckNvbXBvbmVudChcIkxvYWRpbmdTcGlubmVyXCIsR24pO3ZhciBZbj1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfWYoZSx0KTt2YXIgbj1lLnByb3RvdHlwZTtyZXR1cm4gbi5jcmVhdGVFbD1mdW5jdGlvbihlLHQsbil7dm9pZCAwPT09dCYmKHQ9e30pLHZvaWQgMD09PW4mJihuPXt9KSx0PW0oe2lubmVySFRNTDonPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCIgY2xhc3M9XCJ2anMtaWNvbi1wbGFjZWhvbGRlclwiPjwvc3Bhbj4nLGNsYXNzTmFtZTp0aGlzLmJ1aWxkQ1NTQ2xhc3MoKX0sdCksbj1tKHt0eXBlOlwiYnV0dG9uXCJ9LG4pO3ZhciBpPUJlLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsXCJidXR0b25cIix0LG4pO3JldHVybiB0aGlzLmNyZWF0ZUNvbnRyb2xUZXh0RWwoaSksaX0sbi5hZGRDaGlsZD1mdW5jdGlvbihlLHQpe3ZvaWQgMD09PXQmJih0PXt9KTt2YXIgbj10aGlzLmNvbnN0cnVjdG9yLm5hbWU7cmV0dXJuIGcud2FybihcIkFkZGluZyBhbiBhY3Rpb25hYmxlICh1c2VyIGNvbnRyb2xsYWJsZSkgY2hpbGQgdG8gYSBCdXR0b24gKFwiK24rXCIpIGlzIG5vdCBzdXBwb3J0ZWQ7IHVzZSBhIENsaWNrYWJsZUNvbXBvbmVudCBpbnN0ZWFkLlwiKSxCZS5wcm90b3R5cGUuYWRkQ2hpbGQuY2FsbCh0aGlzLGUsdCl9LG4uZW5hYmxlPWZ1bmN0aW9uKCl7dC5wcm90b3R5cGUuZW5hYmxlLmNhbGwodGhpcyksdGhpcy5lbF8ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIil9LG4uZGlzYWJsZT1mdW5jdGlvbigpe3QucHJvdG90eXBlLmRpc2FibGUuY2FsbCh0aGlzKSx0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLFwiZGlzYWJsZWRcIil9LG4uaGFuZGxlS2V5UHJlc3M9ZnVuY3Rpb24oZSl7QXQuaXNFdmVudEtleShlLFwiU3BhY2VcIil8fEF0LmlzRXZlbnRLZXkoZSxcIkVudGVyXCIpfHx0LnByb3RvdHlwZS5oYW5kbGVLZXlQcmVzcy5jYWxsKHRoaXMsZSl9LGV9KHpuKTtCZS5yZWdpc3RlckNvbXBvbmVudChcIkJ1dHRvblwiLFluKTt2YXIgUW49ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLm1vdXNldXNlZF89ITEsbi5vbihcIm1vdXNlZG93blwiLG4uaGFuZGxlTW91c2VEb3duKSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtYmlnLXBsYXktYnV0dG9uXCJ9LHQuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5wbGF5ZXJfLnBsYXkoKTtpZih0aGlzLm1vdXNldXNlZF8mJmUuY2xpZW50WCYmZS5jbGllbnRZKXJldHVybiBTdCh0KSx2b2lkIHRoaXMucGxheWVyXy5oYW5kbGVGb2N1cyh7fSk7dmFyIG49dGhpcy5wbGF5ZXJfLmdldENoaWxkKFwiY29udHJvbEJhclwiKSxpPW4mJm4uZ2V0Q2hpbGQoXCJwbGF5VG9nZ2xlXCIpO2lmKGkpe3ZhciByPWZ1bmN0aW9uKCl7cmV0dXJuIGkuZm9jdXMoKX07RXQodCk/dC50aGVuKHIsZnVuY3Rpb24oKXt9KTp0aGlzLnNldFRpbWVvdXQociwxKX1lbHNlIHRoaXMucGxheWVyXy5mb2N1cygpfSx0LmhhbmRsZUtleVByZXNzPWZ1bmN0aW9uKGUpe3RoaXMubW91c2V1c2VkXz0hMSxpLnByb3RvdHlwZS5oYW5kbGVLZXlQcmVzcy5jYWxsKHRoaXMsZSl9LHQuaGFuZGxlTW91c2VEb3duPWZ1bmN0aW9uKGUpe3RoaXMubW91c2V1c2VkXz0hMH0sZX0oWW4pO1FuLnByb3RvdHlwZS5jb250cm9sVGV4dF89XCJQbGF5IFZpZGVvXCIsQmUucmVnaXN0ZXJDb21wb25lbnQoXCJCaWdQbGF5QnV0dG9uXCIsUW4pO3ZhciBKbj1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuKG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcykuY29udHJvbFRleHQodCYmdC5jb250cm9sVGV4dHx8bi5sb2NhbGl6ZShcIkNsb3NlXCIpKSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtY2xvc2UtYnV0dG9uIFwiK2kucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sdC5oYW5kbGVLZXlQcmVzcz1mdW5jdGlvbihlKXt9LHQuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZSl7dGhpcy50cmlnZ2VyKHt0eXBlOlwiY2xvc2VcIixidWJibGVzOiExfSl9LGV9KFluKTtCZS5yZWdpc3RlckNvbXBvbmVudChcIkNsb3NlQnV0dG9uXCIsSm4pO3ZhciBabj1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuIHZvaWQgMD09PXQmJih0PXt9KSxuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMsdC5yZXBsYXk9dm9pZCAwPT09dC5yZXBsYXl8fHQucmVwbGF5LG4ub24oZSxcInBsYXlcIixuLmhhbmRsZVBsYXkpLG4ub24oZSxcInBhdXNlXCIsbi5oYW5kbGVQYXVzZSksdC5yZXBsYXkmJm4ub24oZSxcImVuZGVkXCIsbi5oYW5kbGVFbmRlZCksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLXBsYXktY29udHJvbCBcIitpLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyl9LHQuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZSl7dGhpcy5wbGF5ZXJfLnBhdXNlZCgpP3RoaXMucGxheWVyXy5wbGF5KCk6dGhpcy5wbGF5ZXJfLnBhdXNlKCl9LHQuaGFuZGxlU2Vla2VkPWZ1bmN0aW9uKGUpe3RoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtZW5kZWRcIiksdGhpcy5wbGF5ZXJfLnBhdXNlZCgpP3RoaXMuaGFuZGxlUGF1c2UoZSk6dGhpcy5oYW5kbGVQbGF5KGUpfSx0LmhhbmRsZVBsYXk9ZnVuY3Rpb24oZSl7dGhpcy5yZW1vdmVDbGFzcyhcInZqcy1lbmRlZFwiKSx0aGlzLnJlbW92ZUNsYXNzKFwidmpzLXBhdXNlZFwiKSx0aGlzLmFkZENsYXNzKFwidmpzLXBsYXlpbmdcIiksdGhpcy5jb250cm9sVGV4dChcIlBhdXNlXCIpfSx0LmhhbmRsZVBhdXNlPWZ1bmN0aW9uKGUpe3RoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtcGxheWluZ1wiKSx0aGlzLmFkZENsYXNzKFwidmpzLXBhdXNlZFwiKSx0aGlzLmNvbnRyb2xUZXh0KFwiUGxheVwiKX0sdC5oYW5kbGVFbmRlZD1mdW5jdGlvbihlKXt0aGlzLnJlbW92ZUNsYXNzKFwidmpzLXBsYXlpbmdcIiksdGhpcy5hZGRDbGFzcyhcInZqcy1lbmRlZFwiKSx0aGlzLmNvbnRyb2xUZXh0KFwiUmVwbGF5XCIpLHRoaXMub25lKHRoaXMucGxheWVyXyxcInNlZWtlZFwiLHRoaXMuaGFuZGxlU2Vla2VkKX0sZX0oWW4pO1puLnByb3RvdHlwZS5jb250cm9sVGV4dF89XCJQbGF5XCIsQmUucmVnaXN0ZXJDb21wb25lbnQoXCJQbGF5VG9nZ2xlXCIsWm4pO3ZhciBlaT1mdW5jdGlvbihlLHQpe2U9ZTwwPzA6ZTt2YXIgbj1NYXRoLmZsb29yKGUlNjApLGk9TWF0aC5mbG9vcihlLzYwJTYwKSxyPU1hdGguZmxvb3IoZS8zNjAwKSxzPU1hdGguZmxvb3IodC82MCU2MCksbz1NYXRoLmZsb29yKHQvMzYwMCk7cmV0dXJuKGlzTmFOKGUpfHxlPT09MS8wKSYmKHI9aT1uPVwiLVwiKSwocj0wPHJ8fDA8bz9yK1wiOlwiOlwiXCIpKyhpPSgocnx8MTA8PXMpJiZpPDEwP1wiMFwiK2k6aSkrXCI6XCIpKyhuPW48MTA/XCIwXCIrbjpuKX0sdGk9ZWk7ZnVuY3Rpb24gbmkoZSx0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9ZSksdGkoZSx0KX12YXIgaWk9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLnRocm90dGxlZFVwZGF0ZUNvbnRlbnQ9RWUoQ2Uodih2KG4pKSxuLnVwZGF0ZUNvbnRlbnQpLDI1KSxuLm9uKGUsXCJ0aW1ldXBkYXRlXCIsbi50aHJvdHRsZWRVcGRhdGVDb250ZW50KSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jcmVhdGVFbD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuYnVpbGRDU1NDbGFzcygpLHQ9aS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIse2NsYXNzTmFtZTplK1wiIHZqcy10aW1lLWNvbnRyb2wgdmpzLWNvbnRyb2xcIixpbm5lckhUTUw6JzxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiIHJvbGU9XCJwcmVzZW50YXRpb25cIj4nK3RoaXMubG9jYWxpemUodGhpcy5sYWJlbFRleHRfKStcIsKgPC9zcGFuPlwifSk7cmV0dXJuIHRoaXMuY29udGVudEVsXz14KFwic3BhblwiLHtjbGFzc05hbWU6ZStcIi1kaXNwbGF5XCJ9LHtcImFyaWEtbGl2ZVwiOlwib2ZmXCIscm9sZTpcInByZXNlbnRhdGlvblwifSksdGhpcy51cGRhdGVUZXh0Tm9kZV8oKSx0LmFwcGVuZENoaWxkKHRoaXMuY29udGVudEVsXyksdH0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5jb250ZW50RWxfPW51bGwsdGhpcy50ZXh0Tm9kZV89bnVsbCxpLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyl9LHQudXBkYXRlVGV4dE5vZGVfPWZ1bmN0aW9uKCl7aWYodGhpcy5jb250ZW50RWxfKXtmb3IoO3RoaXMuY29udGVudEVsXy5maXJzdENoaWxkOyl0aGlzLmNvbnRlbnRFbF8ucmVtb3ZlQ2hpbGQodGhpcy5jb250ZW50RWxfLmZpcnN0Q2hpbGQpO3RoaXMudGV4dE5vZGVfPWQuY3JlYXRlVGV4dE5vZGUodGhpcy5mb3JtYXR0ZWRUaW1lX3x8dGhpcy5mb3JtYXRUaW1lXygwKSksdGhpcy5jb250ZW50RWxfLmFwcGVuZENoaWxkKHRoaXMudGV4dE5vZGVfKX19LHQuZm9ybWF0VGltZV89ZnVuY3Rpb24oZSl7cmV0dXJuIG5pKGUpfSx0LnVwZGF0ZUZvcm1hdHRlZFRpbWVfPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZm9ybWF0VGltZV8oZSk7dCE9PXRoaXMuZm9ybWF0dGVkVGltZV8mJih0aGlzLmZvcm1hdHRlZFRpbWVfPXQsdGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGVUZXh0Tm9kZV8pKX0sdC51cGRhdGVDb250ZW50PWZ1bmN0aW9uKGUpe30sZX0oQmUpO2lpLnByb3RvdHlwZS5sYWJlbFRleHRfPVwiVGltZVwiLGlpLnByb3RvdHlwZS5jb250cm9sVGV4dF89XCJUaW1lXCIsQmUucmVnaXN0ZXJDb21wb25lbnQoXCJUaW1lRGlzcGxheVwiLGlpKTt2YXIgcmk9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLm9uKGUsXCJlbmRlZFwiLG4uaGFuZGxlRW5kZWQpLG59ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmJ1aWxkQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1jdXJyZW50LXRpbWVcIn0sdC51cGRhdGVDb250ZW50PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMucGxheWVyXy5zY3J1YmJpbmcoKT90aGlzLnBsYXllcl8uZ2V0Q2FjaGUoKS5jdXJyZW50VGltZTp0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKTt0aGlzLnVwZGF0ZUZvcm1hdHRlZFRpbWVfKHQpfSx0LmhhbmRsZUVuZGVkPWZ1bmN0aW9uKGUpe3RoaXMucGxheWVyXy5kdXJhdGlvbigpJiZ0aGlzLnVwZGF0ZUZvcm1hdHRlZFRpbWVfKHRoaXMucGxheWVyXy5kdXJhdGlvbigpKX0sZX0oaWkpO3JpLnByb3RvdHlwZS5sYWJlbFRleHRfPVwiQ3VycmVudCBUaW1lXCIscmkucHJvdG90eXBlLmNvbnRyb2xUZXh0Xz1cIkN1cnJlbnQgVGltZVwiLEJlLnJlZ2lzdGVyQ29tcG9uZW50KFwiQ3VycmVudFRpbWVEaXNwbGF5XCIscmkpO3ZhciBzaT1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuKG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcykub24oZSxcImR1cmF0aW9uY2hhbmdlXCIsbi51cGRhdGVDb250ZW50KSxuLm9uKGUsXCJsb2Fkc3RhcnRcIixuLnVwZGF0ZUNvbnRlbnQpLG4ub24oZSxcImxvYWRlZG1ldGFkYXRhXCIsbi50aHJvdHRsZWRVcGRhdGVDb250ZW50KSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtZHVyYXRpb25cIn0sdC51cGRhdGVDb250ZW50PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMucGxheWVyXy5kdXJhdGlvbigpO3RoaXMuZHVyYXRpb25fIT09dCYmKHRoaXMuZHVyYXRpb25fPXQsdGhpcy51cGRhdGVGb3JtYXR0ZWRUaW1lXyh0KSl9LGV9KGlpKTtzaS5wcm90b3R5cGUubGFiZWxUZXh0Xz1cIkR1cmF0aW9uXCIsc2kucHJvdG90eXBlLmNvbnRyb2xUZXh0Xz1cIkR1cmF0aW9uXCIsQmUucmVnaXN0ZXJDb21wb25lbnQoXCJEdXJhdGlvbkRpc3BsYXlcIixzaSk7dmFyIG9pPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuIGYodCxlKSx0LnByb3RvdHlwZS5jcmVhdGVFbD1mdW5jdGlvbigpe3JldHVybiBlLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsXCJkaXZcIix7Y2xhc3NOYW1lOlwidmpzLXRpbWUtY29udHJvbCB2anMtdGltZS1kaXZpZGVyXCIsaW5uZXJIVE1MOlwiPGRpdj48c3Bhbj4vPC9zcGFuPjwvZGl2PlwifSx7XCJhcmlhLWhpZGRlblwiOiEwfSl9LHR9KEJlKTtCZS5yZWdpc3RlckNvbXBvbmVudChcIlRpbWVEaXZpZGVyXCIsb2kpO3ZhciBhaT1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuKG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcykub24oZSxcImR1cmF0aW9uY2hhbmdlXCIsbi50aHJvdHRsZWRVcGRhdGVDb250ZW50KSxuLm9uKGUsXCJlbmRlZFwiLG4uaGFuZGxlRW5kZWQpLG59ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmJ1aWxkQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1yZW1haW5pbmctdGltZVwifSx0LmNyZWF0ZUVsPWZ1bmN0aW9uKCl7dmFyIGU9aS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzKTtyZXR1cm4gZS5pbnNlcnRCZWZvcmUoeChcInNwYW5cIix7fSx7XCJhcmlhLWhpZGRlblwiOiEwfSxcIi1cIiksdGhpcy5jb250ZW50RWxfKSxlfSx0LnVwZGF0ZUNvbnRlbnQ9ZnVuY3Rpb24oZSl7XCJudW1iZXJcIj09dHlwZW9mIHRoaXMucGxheWVyXy5kdXJhdGlvbigpJiYodGhpcy5wbGF5ZXJfLnJlbWFpbmluZ1RpbWVEaXNwbGF5P3RoaXMudXBkYXRlRm9ybWF0dGVkVGltZV8odGhpcy5wbGF5ZXJfLnJlbWFpbmluZ1RpbWVEaXNwbGF5KCkpOnRoaXMudXBkYXRlRm9ybWF0dGVkVGltZV8odGhpcy5wbGF5ZXJfLnJlbWFpbmluZ1RpbWUoKSkpfSx0LmhhbmRsZUVuZGVkPWZ1bmN0aW9uKGUpe3RoaXMucGxheWVyXy5kdXJhdGlvbigpJiZ0aGlzLnVwZGF0ZUZvcm1hdHRlZFRpbWVfKDApfSxlfShpaSk7YWkucHJvdG90eXBlLmxhYmVsVGV4dF89XCJSZW1haW5pbmcgVGltZVwiLGFpLnByb3RvdHlwZS5jb250cm9sVGV4dF89XCJSZW1haW5pbmcgVGltZVwiLEJlLnJlZ2lzdGVyQ29tcG9uZW50KFwiUmVtYWluaW5nVGltZURpc3BsYXlcIixhaSk7dmFyIGxpPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbjtyZXR1cm4obj1pLmNhbGwodGhpcyxlLHQpfHx0aGlzKS51cGRhdGVTaG93aW5nKCksbi5vbihuLnBsYXllcigpLFwiZHVyYXRpb25jaGFuZ2VcIixuLnVwZGF0ZVNob3dpbmcpLG59ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZUVsPWZ1bmN0aW9uKCl7dmFyIGU9aS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIse2NsYXNzTmFtZTpcInZqcy1saXZlLWNvbnRyb2wgdmpzLWNvbnRyb2xcIn0pO3JldHVybiB0aGlzLmNvbnRlbnRFbF89eChcImRpdlwiLHtjbGFzc05hbWU6XCJ2anMtbGl2ZS1kaXNwbGF5XCIsaW5uZXJIVE1MOic8c3BhbiBjbGFzcz1cInZqcy1jb250cm9sLXRleHRcIj4nK3RoaXMubG9jYWxpemUoXCJTdHJlYW0gVHlwZVwiKStcIsKgPC9zcGFuPlwiK3RoaXMubG9jYWxpemUoXCJMSVZFXCIpfSx7XCJhcmlhLWxpdmVcIjpcIm9mZlwifSksZS5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRFbF8pLGV9LHQuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuY29udGVudEVsXz1udWxsLGkucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKX0sdC51cGRhdGVTaG93aW5nPWZ1bmN0aW9uKGUpe3RoaXMucGxheWVyKCkuZHVyYXRpb24oKT09PTEvMD90aGlzLnNob3coKTp0aGlzLmhpZGUoKX0sZX0oQmUpO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiTGl2ZURpc3BsYXlcIixsaSk7dmFyIGNpPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbjtyZXR1cm4obj1pLmNhbGwodGhpcyxlLHQpfHx0aGlzKS51cGRhdGVMaXZlRWRnZVN0YXR1cygpLG4ucGxheWVyXy5saXZlVHJhY2tlciYmbi5vbihuLnBsYXllcl8ubGl2ZVRyYWNrZXIsXCJsaXZlZWRnZWNoYW5nZVwiLG4udXBkYXRlTGl2ZUVkZ2VTdGF0dXMpLG59ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZUVsPWZ1bmN0aW9uKCl7dmFyIGU9aS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiYnV0dG9uXCIse2NsYXNzTmFtZTpcInZqcy1zZWVrLXRvLWxpdmUtY29udHJvbCB2anMtY29udHJvbFwifSk7cmV0dXJuIHRoaXMudGV4dEVsXz14KFwic3BhblwiLHtjbGFzc05hbWU6XCJ2anMtc2Vlay10by1saXZlLXRleHRcIixpbm5lckhUTUw6dGhpcy5sb2NhbGl6ZShcIkxJVkVcIil9LHtcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCJ9KSxlLmFwcGVuZENoaWxkKHRoaXMudGV4dEVsXyksZX0sdC51cGRhdGVMaXZlRWRnZVN0YXR1cz1mdW5jdGlvbihlKXshdGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyfHx0aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIuYXRMaXZlRWRnZSgpPyh0aGlzLnNldEF0dHJpYnV0ZShcImFyaWEtZGlzYWJsZWRcIiwhMCksdGhpcy5hZGRDbGFzcyhcInZqcy1hdC1saXZlLWVkZ2VcIiksdGhpcy5jb250cm9sVGV4dChcIlNlZWsgdG8gbGl2ZSwgY3VycmVudGx5IHBsYXlpbmcgbGl2ZVwiKSk6KHRoaXMuc2V0QXR0cmlidXRlKFwiYXJpYS1kaXNhYmxlZFwiLCExKSx0aGlzLnJlbW92ZUNsYXNzKFwidmpzLWF0LWxpdmUtZWRnZVwiKSx0aGlzLmNvbnRyb2xUZXh0KFwiU2VlayB0byBsaXZlLCBjdXJyZW50bHkgYmVoaW5kIGxpdmVcIikpfSx0LmhhbmRsZUNsaWNrPWZ1bmN0aW9uKCl7dGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyLnNlZWtUb0xpdmVFZGdlKCl9LHQuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMucGxheWVyXy5saXZlVHJhY2tlciYmdGhpcy5vZmYodGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyLFwibGl2ZWVkZ2VjaGFuZ2VcIix0aGlzLnVwZGF0ZUxpdmVFZGdlU3RhdHVzKSx0aGlzLnRleHRFbF89bnVsbCxpLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyl9LGV9KFluKTtjaS5wcm90b3R5cGUuY29udHJvbFRleHRfPVwiU2VlayB0byBsaXZlLCBjdXJyZW50bHkgcGxheWluZyBsaXZlXCIsQmUucmVnaXN0ZXJDb21wb25lbnQoXCJTZWVrVG9MaXZlXCIsY2kpO3ZhciB1aT1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuKG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcykuYmFyPW4uZ2V0Q2hpbGQobi5vcHRpb25zXy5iYXJOYW1lKSxuLnZlcnRpY2FsKCEhbi5vcHRpb25zXy52ZXJ0aWNhbCksbi5lbmFibGUoKSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5lbmFibGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW5hYmxlZF99LHQuZW5hYmxlPWZ1bmN0aW9uKCl7dGhpcy5lbmFibGVkKCl8fCh0aGlzLm9uKFwibW91c2Vkb3duXCIsdGhpcy5oYW5kbGVNb3VzZURvd24pLHRoaXMub24oXCJ0b3VjaHN0YXJ0XCIsdGhpcy5oYW5kbGVNb3VzZURvd24pLHRoaXMub24oXCJmb2N1c1wiLHRoaXMuaGFuZGxlRm9jdXMpLHRoaXMub24oXCJibHVyXCIsdGhpcy5oYW5kbGVCbHVyKSx0aGlzLm9uKFwiY2xpY2tcIix0aGlzLmhhbmRsZUNsaWNrKSx0aGlzLm9uKHRoaXMucGxheWVyXyxcImNvbnRyb2xzdmlzaWJsZVwiLHRoaXMudXBkYXRlKSx0aGlzLnBsYXllckV2ZW50JiZ0aGlzLm9uKHRoaXMucGxheWVyXyx0aGlzLnBsYXllckV2ZW50LHRoaXMudXBkYXRlKSx0aGlzLnJlbW92ZUNsYXNzKFwiZGlzYWJsZWRcIiksdGhpcy5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLDApLHRoaXMuZW5hYmxlZF89ITApfSx0LmRpc2FibGU9ZnVuY3Rpb24oKXtpZih0aGlzLmVuYWJsZWQoKSl7dmFyIGU9dGhpcy5iYXIuZWxfLm93bmVyRG9jdW1lbnQ7dGhpcy5vZmYoXCJtb3VzZWRvd25cIix0aGlzLmhhbmRsZU1vdXNlRG93biksdGhpcy5vZmYoXCJ0b3VjaHN0YXJ0XCIsdGhpcy5oYW5kbGVNb3VzZURvd24pLHRoaXMub2ZmKFwiZm9jdXNcIix0aGlzLmhhbmRsZUZvY3VzKSx0aGlzLm9mZihcImJsdXJcIix0aGlzLmhhbmRsZUJsdXIpLHRoaXMub2ZmKFwiY2xpY2tcIix0aGlzLmhhbmRsZUNsaWNrKSx0aGlzLm9mZih0aGlzLnBsYXllcl8sXCJjb250cm9sc3Zpc2libGVcIix0aGlzLnVwZGF0ZSksdGhpcy5vZmYoZSxcIm1vdXNlbW92ZVwiLHRoaXMuaGFuZGxlTW91c2VNb3ZlKSx0aGlzLm9mZihlLFwibW91c2V1cFwiLHRoaXMuaGFuZGxlTW91c2VVcCksdGhpcy5vZmYoZSxcInRvdWNobW92ZVwiLHRoaXMuaGFuZGxlTW91c2VNb3ZlKSx0aGlzLm9mZihlLFwidG91Y2hlbmRcIix0aGlzLmhhbmRsZU1vdXNlVXApLHRoaXMucmVtb3ZlQXR0cmlidXRlKFwidGFiaW5kZXhcIiksdGhpcy5hZGRDbGFzcyhcImRpc2FibGVkXCIpLHRoaXMucGxheWVyRXZlbnQmJnRoaXMub2ZmKHRoaXMucGxheWVyXyx0aGlzLnBsYXllckV2ZW50LHRoaXMudXBkYXRlKSx0aGlzLmVuYWJsZWRfPSExfX0sdC5jcmVhdGVFbD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHZvaWQgMD09PXQmJih0PXt9KSx2b2lkIDA9PT1uJiYobj17fSksdC5jbGFzc05hbWU9dC5jbGFzc05hbWUrXCIgdmpzLXNsaWRlclwiLHQ9bSh7dGFiSW5kZXg6MH0sdCksbj1tKHtyb2xlOlwic2xpZGVyXCIsXCJhcmlhLXZhbHVlbm93XCI6MCxcImFyaWEtdmFsdWVtaW5cIjowLFwiYXJpYS12YWx1ZW1heFwiOjEwMCx0YWJJbmRleDowfSxuKSxpLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsZSx0LG4pfSx0LmhhbmRsZU1vdXNlRG93bj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmJhci5lbF8ub3duZXJEb2N1bWVudDtcIm1vdXNlZG93blwiPT09ZS50eXBlJiZlLnByZXZlbnREZWZhdWx0KCksXCJ0b3VjaHN0YXJ0XCIhPT1lLnR5cGV8fGl0fHxlLnByZXZlbnREZWZhdWx0KCksQigpLHRoaXMuYWRkQ2xhc3MoXCJ2anMtc2xpZGluZ1wiKSx0aGlzLnRyaWdnZXIoXCJzbGlkZXJhY3RpdmVcIiksdGhpcy5vbih0LFwibW91c2Vtb3ZlXCIsdGhpcy5oYW5kbGVNb3VzZU1vdmUpLHRoaXMub24odCxcIm1vdXNldXBcIix0aGlzLmhhbmRsZU1vdXNlVXApLHRoaXMub24odCxcInRvdWNobW92ZVwiLHRoaXMuaGFuZGxlTW91c2VNb3ZlKSx0aGlzLm9uKHQsXCJ0b3VjaGVuZFwiLHRoaXMuaGFuZGxlTW91c2VVcCksdGhpcy5oYW5kbGVNb3VzZU1vdmUoZSl9LHQuaGFuZGxlTW91c2VNb3ZlPWZ1bmN0aW9uKGUpe30sdC5oYW5kbGVNb3VzZVVwPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5iYXIuZWxfLm93bmVyRG9jdW1lbnQ7SCgpLHRoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtc2xpZGluZ1wiKSx0aGlzLnRyaWdnZXIoXCJzbGlkZXJpbmFjdGl2ZVwiKSx0aGlzLm9mZihlLFwibW91c2Vtb3ZlXCIsdGhpcy5oYW5kbGVNb3VzZU1vdmUpLHRoaXMub2ZmKGUsXCJtb3VzZXVwXCIsdGhpcy5oYW5kbGVNb3VzZVVwKSx0aGlzLm9mZihlLFwidG91Y2htb3ZlXCIsdGhpcy5oYW5kbGVNb3VzZU1vdmUpLHRoaXMub2ZmKGUsXCJ0b3VjaGVuZFwiLHRoaXMuaGFuZGxlTW91c2VVcCksdGhpcy51cGRhdGUoKX0sdC51cGRhdGU9ZnVuY3Rpb24oKXtpZih0aGlzLmVsXyl7dmFyIGU9dGhpcy5nZXRQZXJjZW50KCksdD10aGlzLmJhcjtpZih0KXsoXCJudW1iZXJcIiE9dHlwZW9mIGV8fGUhPWV8fGU8MHx8ZT09PTEvMCkmJihlPTApO3ZhciBuPSgxMDAqZSkudG9GaXhlZCgyKStcIiVcIixpPXQuZWwoKS5zdHlsZTtyZXR1cm4gdGhpcy52ZXJ0aWNhbCgpP2kuaGVpZ2h0PW46aS53aWR0aD1uLGV9fX0sdC5jYWxjdWxhdGVEaXN0YW5jZT1mdW5jdGlvbihlKXt2YXIgdD1LKHRoaXMuZWxfLGUpO3JldHVybiB0aGlzLnZlcnRpY2FsKCk/dC55OnQueH0sdC5oYW5kbGVGb2N1cz1mdW5jdGlvbigpe3RoaXMub24odGhpcy5iYXIuZWxfLm93bmVyRG9jdW1lbnQsXCJrZXlkb3duXCIsdGhpcy5oYW5kbGVLZXlQcmVzcyl9LHQuaGFuZGxlS2V5UHJlc3M9ZnVuY3Rpb24oZSl7QXQuaXNFdmVudEtleShlLFwiTGVmdFwiKXx8QXQuaXNFdmVudEtleShlLFwiRG93blwiKT8oZS5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuc3RlcEJhY2soKSk6QXQuaXNFdmVudEtleShlLFwiUmlnaHRcIil8fEF0LmlzRXZlbnRLZXkoZSxcIlVwXCIpPyhlLnByZXZlbnREZWZhdWx0KCksdGhpcy5zdGVwRm9yd2FyZCgpKTppLnByb3RvdHlwZS5oYW5kbGVLZXlQcmVzcy5jYWxsKHRoaXMsZSl9LHQuaGFuZGxlQmx1cj1mdW5jdGlvbigpe3RoaXMub2ZmKHRoaXMuYmFyLmVsXy5vd25lckRvY3VtZW50LFwia2V5ZG93blwiLHRoaXMuaGFuZGxlS2V5UHJlc3MpfSx0LmhhbmRsZUNsaWNrPWZ1bmN0aW9uKGUpe2Uuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksZS5wcmV2ZW50RGVmYXVsdCgpfSx0LnZlcnRpY2FsPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuIHRoaXMudmVydGljYWxffHwhMTt0aGlzLnZlcnRpY2FsXz0hIWUsdGhpcy52ZXJ0aWNhbF8/dGhpcy5hZGRDbGFzcyhcInZqcy1zbGlkZXItdmVydGljYWxcIik6dGhpcy5hZGRDbGFzcyhcInZqcy1zbGlkZXItaG9yaXpvbnRhbFwiKX0sZX0oQmUpO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiU2xpZGVyXCIsdWkpO3ZhciBoaT1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuKG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcykucGFydEVsc189W10sbi5vbihlLFwicHJvZ3Jlc3NcIixuLnVwZGF0ZSksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY3JlYXRlRWw9ZnVuY3Rpb24oKXtyZXR1cm4gaS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIse2NsYXNzTmFtZTpcInZqcy1sb2FkLXByb2dyZXNzXCIsaW5uZXJIVE1MOic8c3BhbiBjbGFzcz1cInZqcy1jb250cm9sLXRleHRcIj48c3Bhbj4nK3RoaXMubG9jYWxpemUoXCJMb2FkZWRcIikrJzwvc3Bhbj46IDxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dC1sb2FkZWQtcGVyY2VudGFnZVwiPjAlPC9zcGFuPjwvc3Bhbj4nfSl9LHQuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMucGFydEVsc189bnVsbCxpLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyl9LHQudXBkYXRlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMucGxheWVyXy5saXZlVHJhY2tlcixuPXRoaXMucGxheWVyXy5idWZmZXJlZCgpLGk9dCYmdC5pc0xpdmUoKT90LnNlZWthYmxlRW5kKCk6dGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkscj10aGlzLnBsYXllcl8uYnVmZmVyZWRFbmQoKSxzPXRoaXMucGFydEVsc18sbz10aGlzLiQoXCIudmpzLWNvbnRyb2wtdGV4dC1sb2FkZWQtcGVyY2VudGFnZVwiKSxhPWZ1bmN0aW9uKGUsdCxuKXt2YXIgaT1lL3R8fDA7cmV0dXJuIGk9MTAwKigxPD1pPzE6aSksbiYmKGk9aS50b0ZpeGVkKDIpKSxpK1wiJVwifTt0aGlzLmVsXy5zdHlsZS53aWR0aD1hKHIsaSksaihvLGEocixpLCEwKSk7Zm9yKHZhciBsPTA7bDxuLmxlbmd0aDtsKyspe3ZhciBjPW4uc3RhcnQobCksdT1uLmVuZChsKSxoPXNbbF07aHx8KGg9dGhpcy5lbF8uYXBwZW5kQ2hpbGQoeCgpKSxzW2xdPWgpLGguc3R5bGUubGVmdD1hKGMsciksaC5zdHlsZS53aWR0aD1hKHUtYyxyKX1mb3IodmFyIGQ9cy5sZW5ndGg7ZD5uLmxlbmd0aDtkLS0pdGhpcy5lbF8ucmVtb3ZlQ2hpbGQoc1tkLTFdKTtzLmxlbmd0aD1uLmxlbmd0aH0sZX0oQmUpO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiTG9hZFByb2dyZXNzQmFyXCIsaGkpO3ZhciBkaT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfWYodCxlKTt2YXIgbj10LnByb3RvdHlwZTtyZXR1cm4gbi5jcmVhdGVFbD1mdW5jdGlvbigpe3JldHVybiBlLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsXCJkaXZcIix7Y2xhc3NOYW1lOlwidmpzLXRpbWUtdG9vbHRpcFwifSx7XCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwifSl9LG4udXBkYXRlPWZ1bmN0aW9uKGUsdCxuKXt2YXIgaT1WKHRoaXMuZWxfKSxyPVYodGhpcy5wbGF5ZXJfLmVsKCkpLHM9ZS53aWR0aCp0O2lmKHImJmkpe3ZhciBvPWUubGVmdC1yLmxlZnQrcyxhPWUud2lkdGgtcysoci5yaWdodC1lLnJpZ2h0KSxsPWkud2lkdGgvMjtvPGw/bCs9bC1vOmE8bCYmKGw9YSksbDwwP2w9MDpsPmkud2lkdGgmJihsPWkud2lkdGgpLHRoaXMuZWxfLnN0eWxlLnJpZ2h0PVwiLVwiK2wrXCJweFwiLGoodGhpcy5lbF8sbil9fSxuLnVwZGF0ZVRpbWU9ZnVuY3Rpb24ocixzLG8sYSl7dmFyIGw9dGhpczt0aGlzLnJhZklkXyYmdGhpcy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnJhZklkXyksdGhpcy5yYWZJZF89dGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKXt2YXIgZSx0PWwucGxheWVyXy5kdXJhdGlvbigpO2lmKGwucGxheWVyXy5saXZlVHJhY2tlciYmbC5wbGF5ZXJfLmxpdmVUcmFja2VyLmlzTGl2ZSgpKXt2YXIgbj1sLnBsYXllcl8ubGl2ZVRyYWNrZXIubGl2ZVdpbmRvdygpLGk9bi1zKm47ZT0oaTwxP1wiXCI6XCItXCIpK25pKGksbil9ZWxzZSBlPW5pKG8sdCk7bC51cGRhdGUocixzLGUpLGEmJmEoKX0pfSx0fShCZSk7QmUucmVnaXN0ZXJDb21wb25lbnQoXCJUaW1lVG9vbHRpcFwiLGRpKTt2YXIgcGk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31mKHQsZSk7dmFyIG49dC5wcm90b3R5cGU7cmV0dXJuIG4uY3JlYXRlRWw9ZnVuY3Rpb24oKXtyZXR1cm4gZS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIse2NsYXNzTmFtZTpcInZqcy1wbGF5LXByb2dyZXNzIHZqcy1zbGlkZXItYmFyXCJ9LHtcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCJ9KX0sbi51cGRhdGU9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLmdldENoaWxkKFwidGltZVRvb2x0aXBcIik7aWYobil7dmFyIGk9dGhpcy5wbGF5ZXJfLnNjcnViYmluZygpP3RoaXMucGxheWVyXy5nZXRDYWNoZSgpLmN1cnJlbnRUaW1lOnRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpO24udXBkYXRlVGltZShlLHQsaSl9fSx0fShCZSk7cGkucHJvdG90eXBlLm9wdGlvbnNfPXtjaGlsZHJlbjpbXX0sWWV8fEplfHxwaS5wcm90b3R5cGUub3B0aW9uc18uY2hpbGRyZW4ucHVzaChcInRpbWVUb29sdGlwXCIpLEJlLnJlZ2lzdGVyQ29tcG9uZW50KFwiUGxheVByb2dyZXNzQmFyXCIscGkpO3ZhciBmaT1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuKG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcykudXBkYXRlPUVlKENlKHYodihuKSksbi51cGRhdGUpLDI1KSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jcmVhdGVFbD1mdW5jdGlvbigpe3JldHVybiBpLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsXCJkaXZcIix7Y2xhc3NOYW1lOlwidmpzLW1vdXNlLWRpc3BsYXlcIn0pfSx0LnVwZGF0ZT1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMsaT10KnRoaXMucGxheWVyXy5kdXJhdGlvbigpO3RoaXMuZ2V0Q2hpbGQoXCJ0aW1lVG9vbHRpcFwiKS51cGRhdGVUaW1lKGUsdCxpLGZ1bmN0aW9uKCl7bi5lbF8uc3R5bGUubGVmdD1lLndpZHRoKnQrXCJweFwifSl9LGV9KEJlKTtmaS5wcm90b3R5cGUub3B0aW9uc189e2NoaWxkcmVuOltcInRpbWVUb29sdGlwXCJdfSxCZS5yZWdpc3RlckNvbXBvbmVudChcIk1vdXNlVGltZURpc3BsYXlcIixmaSk7dmFyIHZpPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbjtyZXR1cm4obj1pLmNhbGwodGhpcyxlLHQpfHx0aGlzKS5zZXRFdmVudEhhbmRsZXJzXygpLG59ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LnNldEV2ZW50SGFuZGxlcnNfPWZ1bmN0aW9uKCl7dGhpcy51cGRhdGU9RWUoQ2UodGhpcyx0aGlzLnVwZGF0ZSksMzApLHRoaXMub24odGhpcy5wbGF5ZXJfLFwidGltZXVwZGF0ZVwiLHRoaXMudXBkYXRlKSx0aGlzLm9uKHRoaXMucGxheWVyXyxcImVuZGVkXCIsdGhpcy5oYW5kbGVFbmRlZCksdGhpcy5vbih0aGlzLnBsYXllcl8sXCJkdXJhdGlvbmNoYW5nZVwiLHRoaXMudXBkYXRlKSx0aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXImJnRoaXMub24odGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyLFwibGl2ZWVkZ2VjaGFuZ2VcIix0aGlzLnVwZGF0ZSksdGhpcy51cGRhdGVJbnRlcnZhbD1udWxsLHRoaXMub24odGhpcy5wbGF5ZXJfLFtcInBsYXlpbmdcIl0sdGhpcy5lbmFibGVJbnRlcnZhbF8pLHRoaXMub24odGhpcy5wbGF5ZXJfLFtcImVuZGVkXCIsXCJwYXVzZVwiLFwid2FpdGluZ1wiXSx0aGlzLmRpc2FibGVJbnRlcnZhbF8pLFwiaGlkZGVuXCJpbiBkJiZcInZpc2liaWxpdHlTdGF0ZVwiaW4gZCYmdGhpcy5vbihkLFwidmlzaWJpbGl0eWNoYW5nZVwiLHRoaXMudG9nZ2xlVmlzaWJpbGl0eV8pfSx0LnRvZ2dsZVZpc2liaWxpdHlfPWZ1bmN0aW9uKGUpe2QuaGlkZGVuP3RoaXMuZGlzYWJsZUludGVydmFsXyhlKToodGhpcy5lbmFibGVJbnRlcnZhbF8oKSx0aGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZSkpfSx0LmVuYWJsZUludGVydmFsXz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5jbGVhckludGVydmFsKHRoaXMudXBkYXRlSW50ZXJ2YWwpLHRoaXMudXBkYXRlSW50ZXJ2YWw9dGhpcy5zZXRJbnRlcnZhbChmdW5jdGlvbigpe2UucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGUudXBkYXRlKX0sMzApfSx0LmRpc2FibGVJbnRlcnZhbF89ZnVuY3Rpb24oZSl7dGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyJiZ0aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIuaXNMaXZlKCkmJlwiZW5kZWRcIiE9PWUudHlwZXx8dGhpcy5jbGVhckludGVydmFsKHRoaXMudXBkYXRlSW50ZXJ2YWwpfSx0LmNyZWF0ZUVsPWZ1bmN0aW9uKCl7cmV0dXJuIGkucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImRpdlwiLHtjbGFzc05hbWU6XCJ2anMtcHJvZ3Jlc3MtaG9sZGVyXCJ9LHtcImFyaWEtbGFiZWxcIjp0aGlzLmxvY2FsaXplKFwiUHJvZ3Jlc3MgQmFyXCIpfSl9LHQudXBkYXRlXz1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMucGxheWVyXy5saXZlVHJhY2tlcixpPXRoaXMucGxheWVyXy5kdXJhdGlvbigpO24mJm4uaXNMaXZlKCkmJihpPXRoaXMucGxheWVyXy5saXZlVHJhY2tlci5saXZlQ3VycmVudFRpbWUoKSksdGhpcy5lbF8uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW5vd1wiLCgxMDAqdCkudG9GaXhlZCgyKSksdGhpcy5lbF8uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZXRleHRcIix0aGlzLmxvY2FsaXplKFwicHJvZ3Jlc3MgYmFyIHRpbWluZzogY3VycmVudFRpbWU9ezF9IGR1cmF0aW9uPXsyfVwiLFtuaShlLGkpLG5pKGksaSldLFwiezF9IG9mIHsyfVwiKSksdGhpcy5iYXImJnRoaXMuYmFyLnVwZGF0ZShWKHRoaXMuZWxfKSx0KX0sdC51cGRhdGU9ZnVuY3Rpb24oZSl7aWYobnVsbCE9PXRoaXMuZWwoKS5vZmZzZXRQYXJlbnQpe3ZhciB0PWkucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMpO3JldHVybiB0aGlzLnVwZGF0ZV8odGhpcy5nZXRDdXJyZW50VGltZV8oKSx0KSx0fX0sdC5nZXRDdXJyZW50VGltZV89ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wbGF5ZXJfLnNjcnViYmluZygpP3RoaXMucGxheWVyXy5nZXRDYWNoZSgpLmN1cnJlbnRUaW1lOnRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpfSx0LmhhbmRsZUVuZGVkPWZ1bmN0aW9uKGUpe3RoaXMudXBkYXRlXyh0aGlzLnBsYXllcl8uZHVyYXRpb24oKSwxKX0sdC5nZXRQZXJjZW50PWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLmdldEN1cnJlbnRUaW1lXygpLG49dGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyO3JldHVybiBuJiZuLmlzTGl2ZSgpPyhlPSh0LW4uc2Vla2FibGVTdGFydCgpKS9uLmxpdmVXaW5kb3coKSxuLmF0TGl2ZUVkZ2UoKSYmKGU9MSkpOmU9dC90aGlzLnBsYXllcl8uZHVyYXRpb24oKSwxPD1lPzE6ZXx8MH0sdC5oYW5kbGVNb3VzZURvd249ZnVuY3Rpb24oZSl7RyhlKSYmKGUuc3RvcFByb3BhZ2F0aW9uKCksdGhpcy5wbGF5ZXJfLnNjcnViYmluZyghMCksdGhpcy52aWRlb1dhc1BsYXlpbmc9IXRoaXMucGxheWVyXy5wYXVzZWQoKSx0aGlzLnBsYXllcl8ucGF1c2UoKSxpLnByb3RvdHlwZS5oYW5kbGVNb3VzZURvd24uY2FsbCh0aGlzLGUpKX0sdC5oYW5kbGVNb3VzZU1vdmU9ZnVuY3Rpb24oZSl7aWYoRyhlKSl7dmFyIHQsbj10aGlzLmNhbGN1bGF0ZURpc3RhbmNlKGUpLGk9dGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyO2lmKGkmJmkuaXNMaXZlKCkpe3ZhciByPWkuc2Vla2FibGVTdGFydCgpLHM9aS5saXZlQ3VycmVudFRpbWUoKTtpZihzPD0odD1yK24qaS5saXZlV2luZG93KCkpJiYodD1zKSx0PD1yJiYodD1yKy4xKSx0PT09MS8wKXJldHVybn1lbHNlKHQ9bip0aGlzLnBsYXllcl8uZHVyYXRpb24oKSk9PT10aGlzLnBsYXllcl8uZHVyYXRpb24oKSYmKHQtPS4xKTt0aGlzLnBsYXllcl8uY3VycmVudFRpbWUodCl9fSx0LmVuYWJsZT1mdW5jdGlvbigpe2kucHJvdG90eXBlLmVuYWJsZS5jYWxsKHRoaXMpO3ZhciBlPXRoaXMuZ2V0Q2hpbGQoXCJtb3VzZVRpbWVEaXNwbGF5XCIpO2UmJmUuc2hvdygpfSx0LmRpc2FibGU9ZnVuY3Rpb24oKXtpLnByb3RvdHlwZS5kaXNhYmxlLmNhbGwodGhpcyk7dmFyIGU9dGhpcy5nZXRDaGlsZChcIm1vdXNlVGltZURpc3BsYXlcIik7ZSYmZS5oaWRlKCl9LHQuaGFuZGxlTW91c2VVcD1mdW5jdGlvbihlKXtpLnByb3RvdHlwZS5oYW5kbGVNb3VzZVVwLmNhbGwodGhpcyxlKSxlJiZlLnN0b3BQcm9wYWdhdGlvbigpLHRoaXMucGxheWVyXy5zY3J1YmJpbmcoITEpLHRoaXMucGxheWVyXy50cmlnZ2VyKHt0eXBlOlwidGltZXVwZGF0ZVwiLHRhcmdldDp0aGlzLG1hbnVhbGx5VHJpZ2dlcmVkOiEwfSksdGhpcy52aWRlb1dhc1BsYXlpbmcmJlN0KHRoaXMucGxheWVyXy5wbGF5KCkpfSx0LnN0ZXBGb3J3YXJkPWZ1bmN0aW9uKCl7dGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpKzUpfSx0LnN0ZXBCYWNrPWZ1bmN0aW9uKCl7dGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpLTUpfSx0LmhhbmRsZUFjdGlvbj1mdW5jdGlvbihlKXt0aGlzLnBsYXllcl8ucGF1c2VkKCk/dGhpcy5wbGF5ZXJfLnBsYXkoKTp0aGlzLnBsYXllcl8ucGF1c2UoKX0sdC5oYW5kbGVLZXlQcmVzcz1mdW5jdGlvbihlKXtpZihBdC5pc0V2ZW50S2V5KGUsXCJTcGFjZVwiKXx8QXQuaXNFdmVudEtleShlLFwiRW50ZXJcIikpZS5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuaGFuZGxlQWN0aW9uKGUpO2Vsc2UgaWYoQXQuaXNFdmVudEtleShlLFwiSG9tZVwiKSllLnByZXZlbnREZWZhdWx0KCksdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKDApO2Vsc2UgaWYoQXQuaXNFdmVudEtleShlLFwiRW5kXCIpKWUucHJldmVudERlZmF1bHQoKSx0aGlzLnBsYXllcl8uY3VycmVudFRpbWUodGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkpO2Vsc2UgaWYoL15bMC05XSQvLnRlc3QoQXQoZSkpKXtlLnByZXZlbnREZWZhdWx0KCk7dmFyIHQ9MTAqKEF0LmNvZGVzW0F0KGUpXS1BdC5jb2Rlc1swXSkvMTAwO3RoaXMucGxheWVyXy5jdXJyZW50VGltZSh0aGlzLnBsYXllcl8uZHVyYXRpb24oKSp0KX1lbHNlIEF0LmlzRXZlbnRLZXkoZSxcIlBnRG5cIik/KGUucHJldmVudERlZmF1bHQoKSx0aGlzLnBsYXllcl8uY3VycmVudFRpbWUodGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCktNjApKTpBdC5pc0V2ZW50S2V5KGUsXCJQZ1VwXCIpPyhlLnByZXZlbnREZWZhdWx0KCksdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpKzYwKSk6aS5wcm90b3R5cGUuaGFuZGxlS2V5UHJlc3MuY2FsbCh0aGlzLGUpfSxlfSh1aSk7dmkucHJvdG90eXBlLm9wdGlvbnNfPXtjaGlsZHJlbjpbXCJsb2FkUHJvZ3Jlc3NCYXJcIixcInBsYXlQcm9ncmVzc0JhclwiXSxiYXJOYW1lOlwicGxheVByb2dyZXNzQmFyXCJ9LFllfHxKZXx8dmkucHJvdG90eXBlLm9wdGlvbnNfLmNoaWxkcmVuLnNwbGljZSgxLDAsXCJtb3VzZVRpbWVEaXNwbGF5XCIpLEJlLnJlZ2lzdGVyQ29tcG9uZW50KFwiU2Vla0JhclwiLHZpKTt2YXIgZ2k9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLmhhbmRsZU1vdXNlTW92ZT1FZShDZSh2KHYobikpLG4uaGFuZGxlTW91c2VNb3ZlKSwyNSksbi50aHJvdHRsZWRIYW5kbGVNb3VzZVNlZWs9RWUoQ2Uodih2KG4pKSxuLmhhbmRsZU1vdXNlU2VlayksMjUpLG4uZW5hYmxlKCksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY3JlYXRlRWw9ZnVuY3Rpb24oKXtyZXR1cm4gaS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIse2NsYXNzTmFtZTpcInZqcy1wcm9ncmVzcy1jb250cm9sIHZqcy1jb250cm9sXCJ9KX0sdC5oYW5kbGVNb3VzZU1vdmU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5nZXRDaGlsZChcInNlZWtCYXJcIik7aWYodCl7dmFyIG49dC5nZXRDaGlsZChcIm1vdXNlVGltZURpc3BsYXlcIiksaT10LmVsKCkscj1WKGkpLHM9SyhpLGUpLng7MTxzP3M9MTpzPDAmJihzPTApLG4mJm4udXBkYXRlKHIscyl9fSx0LmhhbmRsZU1vdXNlU2Vlaz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmdldENoaWxkKFwic2Vla0JhclwiKTt0JiZ0LmhhbmRsZU1vdXNlTW92ZShlKX0sdC5lbmFibGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW5hYmxlZF99LHQuZGlzYWJsZT1mdW5jdGlvbigpe3RoaXMuY2hpbGRyZW4oKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlLmRpc2FibGUmJmUuZGlzYWJsZSgpfSksdGhpcy5lbmFibGVkKCkmJih0aGlzLm9mZihbXCJtb3VzZWRvd25cIixcInRvdWNoc3RhcnRcIl0sdGhpcy5oYW5kbGVNb3VzZURvd24pLHRoaXMub2ZmKHRoaXMuZWxfLFwibW91c2Vtb3ZlXCIsdGhpcy5oYW5kbGVNb3VzZU1vdmUpLHRoaXMuaGFuZGxlTW91c2VVcCgpLHRoaXMuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKSx0aGlzLmVuYWJsZWRfPSExKX0sdC5lbmFibGU9ZnVuY3Rpb24oKXt0aGlzLmNoaWxkcmVuKCkuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5lbmFibGUmJmUuZW5hYmxlKCl9KSx0aGlzLmVuYWJsZWQoKXx8KHRoaXMub24oW1wibW91c2Vkb3duXCIsXCJ0b3VjaHN0YXJ0XCJdLHRoaXMuaGFuZGxlTW91c2VEb3duKSx0aGlzLm9uKHRoaXMuZWxfLFwibW91c2Vtb3ZlXCIsdGhpcy5oYW5kbGVNb3VzZU1vdmUpLHRoaXMucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZFwiKSx0aGlzLmVuYWJsZWRfPSEwKX0sdC5oYW5kbGVNb3VzZURvd249ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5lbF8ub3duZXJEb2N1bWVudCxuPXRoaXMuZ2V0Q2hpbGQoXCJzZWVrQmFyXCIpO24mJm4uaGFuZGxlTW91c2VEb3duKGUpLHRoaXMub24odCxcIm1vdXNlbW92ZVwiLHRoaXMudGhyb3R0bGVkSGFuZGxlTW91c2VTZWVrKSx0aGlzLm9uKHQsXCJ0b3VjaG1vdmVcIix0aGlzLnRocm90dGxlZEhhbmRsZU1vdXNlU2VlayksdGhpcy5vbih0LFwibW91c2V1cFwiLHRoaXMuaGFuZGxlTW91c2VVcCksdGhpcy5vbih0LFwidG91Y2hlbmRcIix0aGlzLmhhbmRsZU1vdXNlVXApfSx0LmhhbmRsZU1vdXNlVXA9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5lbF8ub3duZXJEb2N1bWVudCxuPXRoaXMuZ2V0Q2hpbGQoXCJzZWVrQmFyXCIpO24mJm4uaGFuZGxlTW91c2VVcChlKSx0aGlzLm9mZih0LFwibW91c2Vtb3ZlXCIsdGhpcy50aHJvdHRsZWRIYW5kbGVNb3VzZVNlZWspLHRoaXMub2ZmKHQsXCJ0b3VjaG1vdmVcIix0aGlzLnRocm90dGxlZEhhbmRsZU1vdXNlU2VlayksdGhpcy5vZmYodCxcIm1vdXNldXBcIix0aGlzLmhhbmRsZU1vdXNlVXApLHRoaXMub2ZmKHQsXCJ0b3VjaGVuZFwiLHRoaXMuaGFuZGxlTW91c2VVcCl9LGV9KEJlKTtnaS5wcm90b3R5cGUub3B0aW9uc189e2NoaWxkcmVuOltcInNlZWtCYXJcIl19LEJlLnJlZ2lzdGVyQ29tcG9uZW50KFwiUHJvZ3Jlc3NDb250cm9sXCIsZ2kpO3ZhciB5aT1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuKG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcykub24oZSxcImZ1bGxzY3JlZW5jaGFuZ2VcIixuLmhhbmRsZUZ1bGxzY3JlZW5DaGFuZ2UpLCExPT09ZFt2dC5mdWxsc2NyZWVuRW5hYmxlZF0mJm4uZGlzYWJsZSgpLG59ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmJ1aWxkQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1mdWxsc2NyZWVuLWNvbnRyb2wgXCIraS5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpfSx0LmhhbmRsZUZ1bGxzY3JlZW5DaGFuZ2U9ZnVuY3Rpb24oZSl7dGhpcy5wbGF5ZXJfLmlzRnVsbHNjcmVlbigpP3RoaXMuY29udHJvbFRleHQoXCJOb24tRnVsbHNjcmVlblwiKTp0aGlzLmNvbnRyb2xUZXh0KFwiRnVsbHNjcmVlblwiKX0sdC5oYW5kbGVDbGljaz1mdW5jdGlvbihlKXt0aGlzLnBsYXllcl8uaXNGdWxsc2NyZWVuKCk/dGhpcy5wbGF5ZXJfLmV4aXRGdWxsc2NyZWVuKCk6dGhpcy5wbGF5ZXJfLnJlcXVlc3RGdWxsc2NyZWVuKCl9LGV9KFluKTt5aS5wcm90b3R5cGUuY29udHJvbFRleHRfPVwiRnVsbHNjcmVlblwiLEJlLnJlZ2lzdGVyQ29tcG9uZW50KFwiRnVsbHNjcmVlblRvZ2dsZVwiLHlpKTt2YXIgX2k9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4gZih0LGUpLHQucHJvdG90eXBlLmNyZWF0ZUVsPWZ1bmN0aW9uKCl7cmV0dXJuIGUucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImRpdlwiLHtjbGFzc05hbWU6XCJ2anMtdm9sdW1lLWxldmVsXCIsaW5uZXJIVE1MOic8c3BhbiBjbGFzcz1cInZqcy1jb250cm9sLXRleHRcIj48L3NwYW4+J30pfSx0fShCZSk7QmUucmVnaXN0ZXJDb21wb25lbnQoXCJWb2x1bWVMZXZlbFwiLF9pKTt2YXIgbWk9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLm9uKFwic2xpZGVyYWN0aXZlXCIsbi51cGRhdGVMYXN0Vm9sdW1lXyksbi5vbihlLFwidm9sdW1lY2hhbmdlXCIsbi51cGRhdGVBUklBQXR0cmlidXRlcyksZS5yZWFkeShmdW5jdGlvbigpe3JldHVybiBuLnVwZGF0ZUFSSUFBdHRyaWJ1dGVzKCl9KSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jcmVhdGVFbD1mdW5jdGlvbigpe3JldHVybiBpLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsXCJkaXZcIix7Y2xhc3NOYW1lOlwidmpzLXZvbHVtZS1iYXIgdmpzLXNsaWRlci1iYXJcIn0se1wiYXJpYS1sYWJlbFwiOnRoaXMubG9jYWxpemUoXCJWb2x1bWUgTGV2ZWxcIiksXCJhcmlhLWxpdmVcIjpcInBvbGl0ZVwifSl9LHQuaGFuZGxlTW91c2VEb3duPWZ1bmN0aW9uKGUpe0coZSkmJmkucHJvdG90eXBlLmhhbmRsZU1vdXNlRG93bi5jYWxsKHRoaXMsZSl9LHQuaGFuZGxlTW91c2VNb3ZlPWZ1bmN0aW9uKGUpe0coZSkmJih0aGlzLmNoZWNrTXV0ZWQoKSx0aGlzLnBsYXllcl8udm9sdW1lKHRoaXMuY2FsY3VsYXRlRGlzdGFuY2UoZSkpKX0sdC5jaGVja011dGVkPWZ1bmN0aW9uKCl7dGhpcy5wbGF5ZXJfLm11dGVkKCkmJnRoaXMucGxheWVyXy5tdXRlZCghMSl9LHQuZ2V0UGVyY2VudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBsYXllcl8ubXV0ZWQoKT8wOnRoaXMucGxheWVyXy52b2x1bWUoKX0sdC5zdGVwRm9yd2FyZD1mdW5jdGlvbigpe3RoaXMuY2hlY2tNdXRlZCgpLHRoaXMucGxheWVyXy52b2x1bWUodGhpcy5wbGF5ZXJfLnZvbHVtZSgpKy4xKX0sdC5zdGVwQmFjaz1mdW5jdGlvbigpe3RoaXMuY2hlY2tNdXRlZCgpLHRoaXMucGxheWVyXy52b2x1bWUodGhpcy5wbGF5ZXJfLnZvbHVtZSgpLS4xKX0sdC51cGRhdGVBUklBQXR0cmlidXRlcz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnBsYXllcl8ubXV0ZWQoKT8wOnRoaXMudm9sdW1lQXNQZXJjZW50YWdlXygpO3RoaXMuZWxfLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVub3dcIix0KSx0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVldGV4dFwiLHQrXCIlXCIpfSx0LnZvbHVtZUFzUGVyY2VudGFnZV89ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5yb3VuZCgxMDAqdGhpcy5wbGF5ZXJfLnZvbHVtZSgpKX0sdC51cGRhdGVMYXN0Vm9sdW1lXz1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLnBsYXllcl8udm9sdW1lKCk7dGhpcy5vbmUoXCJzbGlkZXJpbmFjdGl2ZVwiLGZ1bmN0aW9uKCl7MD09PWUucGxheWVyXy52b2x1bWUoKSYmZS5wbGF5ZXJfLmxhc3RWb2x1bWVfKHQpfSl9LGV9KHVpKTttaS5wcm90b3R5cGUub3B0aW9uc189e2NoaWxkcmVuOltcInZvbHVtZUxldmVsXCJdLGJhck5hbWU6XCJ2b2x1bWVMZXZlbFwifSxtaS5wcm90b3R5cGUucGxheWVyRXZlbnQ9XCJ2b2x1bWVjaGFuZ2VcIixCZS5yZWdpc3RlckNvbXBvbmVudChcIlZvbHVtZUJhclwiLG1pKTt2YXIgYmk9ZnVuY3Rpb24ocyl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuLGkscjtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9e30pLHQudmVydGljYWw9dC52ZXJ0aWNhbHx8ITEsKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0LnZvbHVtZUJhcnx8Yyh0LnZvbHVtZUJhcikpJiYodC52b2x1bWVCYXI9dC52b2x1bWVCYXJ8fHt9LHQudm9sdW1lQmFyLnZlcnRpY2FsPXQudmVydGljYWwpLG49cy5jYWxsKHRoaXMsZSx0KXx8dGhpcyxpPXYodihuKSksKHI9ZSkudGVjaF8mJiFyLnRlY2hfLmZlYXR1cmVzVm9sdW1lQ29udHJvbCYmaS5hZGRDbGFzcyhcInZqcy1oaWRkZW5cIiksaS5vbihyLFwibG9hZHN0YXJ0XCIsZnVuY3Rpb24oKXtyLnRlY2hfLmZlYXR1cmVzVm9sdW1lQ29udHJvbD9pLnJlbW92ZUNsYXNzKFwidmpzLWhpZGRlblwiKTppLmFkZENsYXNzKFwidmpzLWhpZGRlblwiKX0pLG4udGhyb3R0bGVkSGFuZGxlTW91c2VNb3ZlPUVlKENlKHYodihuKSksbi5oYW5kbGVNb3VzZU1vdmUpLDI1KSxuLm9uKFwibW91c2Vkb3duXCIsbi5oYW5kbGVNb3VzZURvd24pLG4ub24oXCJ0b3VjaHN0YXJ0XCIsbi5oYW5kbGVNb3VzZURvd24pLG4ub24obi52b2x1bWVCYXIsW1wiZm9jdXNcIixcInNsaWRlcmFjdGl2ZVwiXSxmdW5jdGlvbigpe24udm9sdW1lQmFyLmFkZENsYXNzKFwidmpzLXNsaWRlci1hY3RpdmVcIiksbi5hZGRDbGFzcyhcInZqcy1zbGlkZXItYWN0aXZlXCIpLG4udHJpZ2dlcihcInNsaWRlcmFjdGl2ZVwiKX0pLG4ub24obi52b2x1bWVCYXIsW1wiYmx1clwiLFwic2xpZGVyaW5hY3RpdmVcIl0sZnVuY3Rpb24oKXtuLnZvbHVtZUJhci5yZW1vdmVDbGFzcyhcInZqcy1zbGlkZXItYWN0aXZlXCIpLG4ucmVtb3ZlQ2xhc3MoXCJ2anMtc2xpZGVyLWFjdGl2ZVwiKSxuLnRyaWdnZXIoXCJzbGlkZXJpbmFjdGl2ZVwiKX0pLG59ZihlLHMpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZUVsPWZ1bmN0aW9uKCl7dmFyIGU9XCJ2anMtdm9sdW1lLWhvcml6b250YWxcIjtyZXR1cm4gdGhpcy5vcHRpb25zXy52ZXJ0aWNhbCYmKGU9XCJ2anMtdm9sdW1lLXZlcnRpY2FsXCIpLHMucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImRpdlwiLHtjbGFzc05hbWU6XCJ2anMtdm9sdW1lLWNvbnRyb2wgdmpzLWNvbnRyb2wgXCIrZX0pfSx0LmhhbmRsZU1vdXNlRG93bj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmVsXy5vd25lckRvY3VtZW50O3RoaXMub24odCxcIm1vdXNlbW92ZVwiLHRoaXMudGhyb3R0bGVkSGFuZGxlTW91c2VNb3ZlKSx0aGlzLm9uKHQsXCJ0b3VjaG1vdmVcIix0aGlzLnRocm90dGxlZEhhbmRsZU1vdXNlTW92ZSksdGhpcy5vbih0LFwibW91c2V1cFwiLHRoaXMuaGFuZGxlTW91c2VVcCksdGhpcy5vbih0LFwidG91Y2hlbmRcIix0aGlzLmhhbmRsZU1vdXNlVXApfSx0LmhhbmRsZU1vdXNlVXA9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5lbF8ub3duZXJEb2N1bWVudDt0aGlzLm9mZih0LFwibW91c2Vtb3ZlXCIsdGhpcy50aHJvdHRsZWRIYW5kbGVNb3VzZU1vdmUpLHRoaXMub2ZmKHQsXCJ0b3VjaG1vdmVcIix0aGlzLnRocm90dGxlZEhhbmRsZU1vdXNlTW92ZSksdGhpcy5vZmYodCxcIm1vdXNldXBcIix0aGlzLmhhbmRsZU1vdXNlVXApLHRoaXMub2ZmKHQsXCJ0b3VjaGVuZFwiLHRoaXMuaGFuZGxlTW91c2VVcCl9LHQuaGFuZGxlTW91c2VNb3ZlPWZ1bmN0aW9uKGUpe3RoaXMudm9sdW1lQmFyLmhhbmRsZU1vdXNlTW92ZShlKX0sZX0oQmUpO2JpLnByb3RvdHlwZS5vcHRpb25zXz17Y2hpbGRyZW46W1widm9sdW1lQmFyXCJdfSxCZS5yZWdpc3RlckNvbXBvbmVudChcIlZvbHVtZUNvbnRyb2xcIixiaSk7dmFyIFRpPWZ1bmN0aW9uKHMpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbixpLHI7cmV0dXJuIG49cy5jYWxsKHRoaXMsZSx0KXx8dGhpcyxpPXYodihuKSksKHI9ZSkudGVjaF8mJiFyLnRlY2hfLmZlYXR1cmVzTXV0ZUNvbnRyb2wmJmkuYWRkQ2xhc3MoXCJ2anMtaGlkZGVuXCIpLGkub24ocixcImxvYWRzdGFydFwiLGZ1bmN0aW9uKCl7ci50ZWNoXy5mZWF0dXJlc011dGVDb250cm9sP2kucmVtb3ZlQ2xhc3MoXCJ2anMtaGlkZGVuXCIpOmkuYWRkQ2xhc3MoXCJ2anMtaGlkZGVuXCIpfSksbi5vbihlLFtcImxvYWRzdGFydFwiLFwidm9sdW1lY2hhbmdlXCJdLG4udXBkYXRlKSxufWYoZSxzKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtbXV0ZS1jb250cm9sIFwiK3MucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sdC5oYW5kbGVDbGljaz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnBsYXllcl8udm9sdW1lKCksbj10aGlzLnBsYXllcl8ubGFzdFZvbHVtZV8oKTtpZigwPT09dCl7dmFyIGk9bjwuMT8uMTpuO3RoaXMucGxheWVyXy52b2x1bWUoaSksdGhpcy5wbGF5ZXJfLm11dGVkKCExKX1lbHNlIHRoaXMucGxheWVyXy5tdXRlZCghdGhpcy5wbGF5ZXJfLm11dGVkKCkpfSx0LnVwZGF0ZT1mdW5jdGlvbihlKXt0aGlzLnVwZGF0ZUljb25fKCksdGhpcy51cGRhdGVDb250cm9sVGV4dF8oKX0sdC51cGRhdGVJY29uXz1mdW5jdGlvbigpe3ZhciBlPXRoaXMucGxheWVyXy52b2x1bWUoKSx0PTM7WWUmJnRoaXMucGxheWVyXy50ZWNoXyYmdGhpcy5wbGF5ZXJfLnRlY2hfLmVsXyYmdGhpcy5wbGF5ZXJfLm11dGVkKHRoaXMucGxheWVyXy50ZWNoXy5lbF8ubXV0ZWQpLDA9PT1lfHx0aGlzLnBsYXllcl8ubXV0ZWQoKT90PTA6ZTwuMzM/dD0xOmU8LjY3JiYodD0yKTtmb3IodmFyIG49MDtuPDQ7bisrKUwodGhpcy5lbF8sXCJ2anMtdm9sLVwiK24pO00odGhpcy5lbF8sXCJ2anMtdm9sLVwiK3QpfSx0LnVwZGF0ZUNvbnRyb2xUZXh0Xz1mdW5jdGlvbigpe3ZhciBlPXRoaXMucGxheWVyXy5tdXRlZCgpfHwwPT09dGhpcy5wbGF5ZXJfLnZvbHVtZSgpP1wiVW5tdXRlXCI6XCJNdXRlXCI7dGhpcy5jb250cm9sVGV4dCgpIT09ZSYmdGhpcy5jb250cm9sVGV4dChlKX0sZX0oWW4pO1RpLnByb3RvdHlwZS5jb250cm9sVGV4dF89XCJNdXRlXCIsQmUucmVnaXN0ZXJDb21wb25lbnQoXCJNdXRlVG9nZ2xlXCIsVGkpO3ZhciBraT1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuIHZvaWQgMD09PXQmJih0PXt9KSxcInVuZGVmaW5lZFwiIT10eXBlb2YgdC5pbmxpbmU/dC5pbmxpbmU9dC5pbmxpbmU6dC5pbmxpbmU9ITAsKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0LnZvbHVtZUNvbnRyb2x8fGModC52b2x1bWVDb250cm9sKSkmJih0LnZvbHVtZUNvbnRyb2w9dC52b2x1bWVDb250cm9sfHx7fSx0LnZvbHVtZUNvbnRyb2wudmVydGljYWw9IXQuaW5saW5lKSwobj1pLmNhbGwodGhpcyxlLHQpfHx0aGlzKS5vbihlLFtcImxvYWRzdGFydFwiXSxuLnZvbHVtZVBhbmVsU3RhdGVfKSxuLm9uKG4udm9sdW1lQ29udHJvbCxbXCJzbGlkZXJhY3RpdmVcIl0sbi5zbGlkZXJBY3RpdmVfKSxuLm9uKG4udm9sdW1lQ29udHJvbCxbXCJzbGlkZXJpbmFjdGl2ZVwiXSxuLnNsaWRlckluYWN0aXZlXyksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuc2xpZGVyQWN0aXZlXz1mdW5jdGlvbigpe3RoaXMuYWRkQ2xhc3MoXCJ2anMtc2xpZGVyLWFjdGl2ZVwiKX0sdC5zbGlkZXJJbmFjdGl2ZV89ZnVuY3Rpb24oKXt0aGlzLnJlbW92ZUNsYXNzKFwidmpzLXNsaWRlci1hY3RpdmVcIil9LHQudm9sdW1lUGFuZWxTdGF0ZV89ZnVuY3Rpb24oKXt0aGlzLnZvbHVtZUNvbnRyb2wuaGFzQ2xhc3MoXCJ2anMtaGlkZGVuXCIpJiZ0aGlzLm11dGVUb2dnbGUuaGFzQ2xhc3MoXCJ2anMtaGlkZGVuXCIpJiZ0aGlzLmFkZENsYXNzKFwidmpzLWhpZGRlblwiKSx0aGlzLnZvbHVtZUNvbnRyb2wuaGFzQ2xhc3MoXCJ2anMtaGlkZGVuXCIpJiYhdGhpcy5tdXRlVG9nZ2xlLmhhc0NsYXNzKFwidmpzLWhpZGRlblwiKSYmdGhpcy5hZGRDbGFzcyhcInZqcy1tdXRlLXRvZ2dsZS1vbmx5XCIpfSx0LmNyZWF0ZUVsPWZ1bmN0aW9uKCl7dmFyIGU9XCJ2anMtdm9sdW1lLXBhbmVsLWhvcml6b250YWxcIjtyZXR1cm4gdGhpcy5vcHRpb25zXy5pbmxpbmV8fChlPVwidmpzLXZvbHVtZS1wYW5lbC12ZXJ0aWNhbFwiKSxpLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsXCJkaXZcIix7Y2xhc3NOYW1lOlwidmpzLXZvbHVtZS1wYW5lbCB2anMtY29udHJvbCBcIitlfSl9LGV9KEJlKTtraS5wcm90b3R5cGUub3B0aW9uc189e2NoaWxkcmVuOltcIm11dGVUb2dnbGVcIixcInZvbHVtZUNvbnRyb2xcIl19LEJlLnJlZ2lzdGVyQ29tcG9uZW50KFwiVm9sdW1lUGFuZWxcIixraSk7dmFyIENpPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbjtyZXR1cm4gbj1pLmNhbGwodGhpcyxlLHQpfHx0aGlzLHQmJihuLm1lbnVCdXR0b25fPXQubWVudUJ1dHRvbiksbi5mb2N1c2VkQ2hpbGRfPS0xLG4ub24oXCJrZXlkb3duXCIsbi5oYW5kbGVLZXlQcmVzcyksbi5ib3VuZEhhbmRsZUJsdXJfPUNlKHYodihuKSksbi5oYW5kbGVCbHVyKSxuLmJvdW5kSGFuZGxlVGFwQ2xpY2tfPUNlKHYodihuKSksbi5oYW5kbGVUYXBDbGljayksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuYWRkRXZlbnRMaXN0ZW5lckZvckl0ZW09ZnVuY3Rpb24oZSl7ZSBpbnN0YW5jZW9mIEJlJiYodGhpcy5vbihlLFwiYmx1clwiLHRoaXMuYm91bmRIYW5kbGVCbHVyXyksdGhpcy5vbihlLFtcInRhcFwiLFwiY2xpY2tcIl0sdGhpcy5ib3VuZEhhbmRsZVRhcENsaWNrXykpfSx0LnJlbW92ZUV2ZW50TGlzdGVuZXJGb3JJdGVtPWZ1bmN0aW9uKGUpe2UgaW5zdGFuY2VvZiBCZSYmKHRoaXMub2ZmKGUsXCJibHVyXCIsdGhpcy5ib3VuZEhhbmRsZUJsdXJfKSx0aGlzLm9mZihlLFtcInRhcFwiLFwiY2xpY2tcIl0sdGhpcy5ib3VuZEhhbmRsZVRhcENsaWNrXykpfSx0LnJlbW92ZUNoaWxkPWZ1bmN0aW9uKGUpe1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT10aGlzLmdldENoaWxkKGUpKSx0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJGb3JJdGVtKGUpLGkucHJvdG90eXBlLnJlbW92ZUNoaWxkLmNhbGwodGhpcyxlKX0sdC5hZGRJdGVtPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuYWRkQ2hpbGQoZSk7dCYmdGhpcy5hZGRFdmVudExpc3RlbmVyRm9ySXRlbSh0KX0sdC5jcmVhdGVFbD1mdW5jdGlvbigpe3ZhciBlPXRoaXMub3B0aW9uc18uY29udGVudEVsVHlwZXx8XCJ1bFwiO3RoaXMuY29udGVudEVsXz14KGUse2NsYXNzTmFtZTpcInZqcy1tZW51LWNvbnRlbnRcIn0pLHRoaXMuY29udGVudEVsXy5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsXCJtZW51XCIpO3ZhciB0PWkucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImRpdlwiLHthcHBlbmQ6dGhpcy5jb250ZW50RWxfLGNsYXNzTmFtZTpcInZqcy1tZW51XCJ9KTtyZXR1cm4gdC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRFbF8pLGhlKHQsXCJjbGlja1wiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpfSksdH0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5jb250ZW50RWxfPW51bGwsdGhpcy5ib3VuZEhhbmRsZUJsdXJfPW51bGwsdGhpcy5ib3VuZEhhbmRsZVRhcENsaWNrXz1udWxsLGkucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKX0sdC5oYW5kbGVCbHVyPWZ1bmN0aW9uKGUpe3ZhciB0PWUucmVsYXRlZFRhcmdldHx8ZC5hY3RpdmVFbGVtZW50O2lmKCF0aGlzLmNoaWxkcmVuKCkuc29tZShmdW5jdGlvbihlKXtyZXR1cm4gZS5lbCgpPT09dH0pKXt2YXIgbj10aGlzLm1lbnVCdXR0b25fO24mJm4uYnV0dG9uUHJlc3NlZF8mJnQhPT1uLmVsKCkuZmlyc3RDaGlsZCYmbi51bnByZXNzQnV0dG9uKCl9fSx0LmhhbmRsZVRhcENsaWNrPWZ1bmN0aW9uKHQpe2lmKHRoaXMubWVudUJ1dHRvbl8pe3RoaXMubWVudUJ1dHRvbl8udW5wcmVzc0J1dHRvbigpO3ZhciBlPXRoaXMuY2hpbGRyZW4oKTtpZighQXJyYXkuaXNBcnJheShlKSlyZXR1cm47dmFyIG49ZS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUuZWwoKT09PXQudGFyZ2V0fSlbMF07aWYoIW4pcmV0dXJuO1wiQ2FwdGlvblNldHRpbmdzTWVudUl0ZW1cIiE9PW4ubmFtZSgpJiZ0aGlzLm1lbnVCdXR0b25fLmZvY3VzKCl9fSx0LmhhbmRsZUtleVByZXNzPWZ1bmN0aW9uKGUpe0F0LmlzRXZlbnRLZXkoZSxcIkxlZnRcIil8fEF0LmlzRXZlbnRLZXkoZSxcIkRvd25cIik/KGUucHJldmVudERlZmF1bHQoKSx0aGlzLnN0ZXBGb3J3YXJkKCkpOihBdC5pc0V2ZW50S2V5KGUsXCJSaWdodFwiKXx8QXQuaXNFdmVudEtleShlLFwiVXBcIikpJiYoZS5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuc3RlcEJhY2soKSl9LHQuc3RlcEZvcndhcmQ9ZnVuY3Rpb24oKXt2YXIgZT0wO3ZvaWQgMCE9PXRoaXMuZm9jdXNlZENoaWxkXyYmKGU9dGhpcy5mb2N1c2VkQ2hpbGRfKzEpLHRoaXMuZm9jdXMoZSl9LHQuc3RlcEJhY2s9ZnVuY3Rpb24oKXt2YXIgZT0wO3ZvaWQgMCE9PXRoaXMuZm9jdXNlZENoaWxkXyYmKGU9dGhpcy5mb2N1c2VkQ2hpbGRfLTEpLHRoaXMuZm9jdXMoZSl9LHQuZm9jdXM9ZnVuY3Rpb24oZSl7dm9pZCAwPT09ZSYmKGU9MCk7dmFyIHQ9dGhpcy5jaGlsZHJlbigpLnNsaWNlKCk7dC5sZW5ndGgmJnRbMF0uY2xhc3NOYW1lJiYvdmpzLW1lbnUtdGl0bGUvLnRlc3QodFswXS5jbGFzc05hbWUpJiZ0LnNoaWZ0KCksMDx0Lmxlbmd0aCYmKGU8MD9lPTA6ZT49dC5sZW5ndGgmJihlPXQubGVuZ3RoLTEpLHRbdGhpcy5mb2N1c2VkQ2hpbGRfPWVdLmVsXy5mb2N1cygpKX0sZX0oQmUpO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiTWVudVwiLENpKTt2YXIgRWk9ZnVuY3Rpb24ocil7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3ZvaWQgMD09PXQmJih0PXt9KSwobj1yLmNhbGwodGhpcyxlLHQpfHx0aGlzKS5tZW51QnV0dG9uXz1uZXcgWW4oZSx0KSxuLm1lbnVCdXR0b25fLmNvbnRyb2xUZXh0KG4uY29udHJvbFRleHRfKSxuLm1lbnVCdXR0b25fLmVsXy5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhhc3BvcHVwXCIsXCJ0cnVlXCIpO3ZhciBpPVluLnByb3RvdHlwZS5idWlsZENTU0NsYXNzKCk7cmV0dXJuIG4ubWVudUJ1dHRvbl8uZWxfLmNsYXNzTmFtZT1uLmJ1aWxkQ1NTQ2xhc3MoKStcIiBcIitpLG4ubWVudUJ1dHRvbl8ucmVtb3ZlQ2xhc3MoXCJ2anMtY29udHJvbFwiKSxuLmFkZENoaWxkKG4ubWVudUJ1dHRvbl8pLG4udXBkYXRlKCksbi5lbmFibGVkXz0hMCxuLm9uKG4ubWVudUJ1dHRvbl8sXCJ0YXBcIixuLmhhbmRsZUNsaWNrKSxuLm9uKG4ubWVudUJ1dHRvbl8sXCJjbGlja1wiLG4uaGFuZGxlQ2xpY2spLG4ub24obi5tZW51QnV0dG9uXyxcImZvY3VzXCIsbi5oYW5kbGVGb2N1cyksbi5vbihuLm1lbnVCdXR0b25fLFwiYmx1clwiLG4uaGFuZGxlQmx1ciksbi5vbihuLm1lbnVCdXR0b25fLFwibW91c2VlbnRlclwiLGZ1bmN0aW9uKCl7bi5tZW51LnNob3coKX0pLG4ub24oXCJrZXlkb3duXCIsbi5oYW5kbGVTdWJtZW51S2V5UHJlc3MpLG59ZihlLHIpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LnVwZGF0ZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTWVudSgpO3RoaXMubWVudSYmKHRoaXMubWVudS5kaXNwb3NlKCksdGhpcy5yZW1vdmVDaGlsZCh0aGlzLm1lbnUpKSx0aGlzLm1lbnU9ZSx0aGlzLmFkZENoaWxkKGUpLHRoaXMuYnV0dG9uUHJlc3NlZF89ITEsdGhpcy5tZW51QnV0dG9uXy5lbF8uc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLFwiZmFsc2VcIiksdGhpcy5pdGVtcyYmdGhpcy5pdGVtcy5sZW5ndGg8PXRoaXMuaGlkZVRocmVzaG9sZF8/dGhpcy5oaWRlKCk6dGhpcy5zaG93KCl9LHQuY3JlYXRlTWVudT1mdW5jdGlvbigpe3ZhciBlPW5ldyBDaSh0aGlzLnBsYXllcl8se21lbnVCdXR0b246dGhpc30pO2lmKHRoaXMuaGlkZVRocmVzaG9sZF89MCx0aGlzLm9wdGlvbnNfLnRpdGxlKXt2YXIgdD14KFwibGlcIix7Y2xhc3NOYW1lOlwidmpzLW1lbnUtdGl0bGVcIixpbm5lckhUTUw6RmUodGhpcy5vcHRpb25zXy50aXRsZSksdGFiSW5kZXg6LTF9KTt0aGlzLmhpZGVUaHJlc2hvbGRfKz0xO3ZhciBuPW5ldyBCZSh0aGlzLnBsYXllcl8se2VsOnR9KTtlLmFkZEl0ZW0obil9aWYodGhpcy5pdGVtcz10aGlzLmNyZWF0ZUl0ZW1zKCksdGhpcy5pdGVtcylmb3IodmFyIGk9MDtpPHRoaXMuaXRlbXMubGVuZ3RoO2krKyllLmFkZEl0ZW0odGhpcy5pdGVtc1tpXSk7cmV0dXJuIGV9LHQuY3JlYXRlSXRlbXM9ZnVuY3Rpb24oKXt9LHQuY3JlYXRlRWw9ZnVuY3Rpb24oKXtyZXR1cm4gci5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIse2NsYXNzTmFtZTp0aGlzLmJ1aWxkV3JhcHBlckNTU0NsYXNzKCl9LHt9KX0sdC5idWlsZFdyYXBwZXJDU1NDbGFzcz1mdW5jdGlvbigpe3ZhciBlPVwidmpzLW1lbnUtYnV0dG9uXCI7cmV0dXJuITA9PT10aGlzLm9wdGlvbnNfLmlubGluZT9lKz1cIi1pbmxpbmVcIjplKz1cIi1wb3B1cFwiLFwidmpzLW1lbnUtYnV0dG9uIFwiK2UrXCIgXCIrWW4ucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MoKStcIiBcIityLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyl9LHQuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3ZhciBlPVwidmpzLW1lbnUtYnV0dG9uXCI7cmV0dXJuITA9PT10aGlzLm9wdGlvbnNfLmlubGluZT9lKz1cIi1pbmxpbmVcIjplKz1cIi1wb3B1cFwiLFwidmpzLW1lbnUtYnV0dG9uIFwiK2UrXCIgXCIrci5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpfSx0LmNvbnRyb2xUZXh0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PXRoaXMubWVudUJ1dHRvbl8uZWwoKSksdGhpcy5tZW51QnV0dG9uXy5jb250cm9sVGV4dChlLHQpfSx0LmhhbmRsZUNsaWNrPWZ1bmN0aW9uKGUpe3RoaXMuYnV0dG9uUHJlc3NlZF8/dGhpcy51bnByZXNzQnV0dG9uKCk6dGhpcy5wcmVzc0J1dHRvbigpfSx0LmZvY3VzPWZ1bmN0aW9uKCl7dGhpcy5tZW51QnV0dG9uXy5mb2N1cygpfSx0LmJsdXI9ZnVuY3Rpb24oKXt0aGlzLm1lbnVCdXR0b25fLmJsdXIoKX0sdC5oYW5kbGVGb2N1cz1mdW5jdGlvbigpe2hlKGQsXCJrZXlkb3duXCIsQ2UodGhpcyx0aGlzLmhhbmRsZUtleVByZXNzKSl9LHQuaGFuZGxlQmx1cj1mdW5jdGlvbigpe2RlKGQsXCJrZXlkb3duXCIsQ2UodGhpcyx0aGlzLmhhbmRsZUtleVByZXNzKSl9LHQuaGFuZGxlS2V5UHJlc3M9ZnVuY3Rpb24oZSl7QXQuaXNFdmVudEtleShlLFwiRXNjXCIpfHxBdC5pc0V2ZW50S2V5KGUsXCJUYWJcIik/KHRoaXMuYnV0dG9uUHJlc3NlZF8mJnRoaXMudW5wcmVzc0J1dHRvbigpLEF0LmlzRXZlbnRLZXkoZSxcIlRhYlwiKXx8KGUucHJldmVudERlZmF1bHQoKSx0aGlzLm1lbnVCdXR0b25fLmZvY3VzKCkpKTooQXQuaXNFdmVudEtleShlLFwiVXBcIil8fEF0LmlzRXZlbnRLZXkoZSxcIkRvd25cIikpJiYodGhpcy5idXR0b25QcmVzc2VkX3x8KGUucHJldmVudERlZmF1bHQoKSx0aGlzLnByZXNzQnV0dG9uKCkpKX0sdC5oYW5kbGVTdWJtZW51S2V5UHJlc3M9ZnVuY3Rpb24oZSl7KEF0LmlzRXZlbnRLZXkoZSxcIkVzY1wiKXx8QXQuaXNFdmVudEtleShlLFwiVGFiXCIpKSYmKHRoaXMuYnV0dG9uUHJlc3NlZF8mJnRoaXMudW5wcmVzc0J1dHRvbigpLEF0LmlzRXZlbnRLZXkoZSxcIlRhYlwiKXx8KGUucHJldmVudERlZmF1bHQoKSx0aGlzLm1lbnVCdXR0b25fLmZvY3VzKCkpKX0sdC5wcmVzc0J1dHRvbj1mdW5jdGlvbigpe2lmKHRoaXMuZW5hYmxlZF8pe2lmKHRoaXMuYnV0dG9uUHJlc3NlZF89ITAsdGhpcy5tZW51LnNob3coKSx0aGlzLm1lbnUubG9ja1Nob3dpbmcoKSx0aGlzLm1lbnVCdXR0b25fLmVsXy5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsXCJ0cnVlXCIpLFllJiZTKCkpcmV0dXJuO3RoaXMubWVudS5mb2N1cygpfX0sdC51bnByZXNzQnV0dG9uPWZ1bmN0aW9uKCl7dGhpcy5lbmFibGVkXyYmKHRoaXMuYnV0dG9uUHJlc3NlZF89ITEsdGhpcy5tZW51LnVubG9ja1Nob3dpbmcoKSx0aGlzLm1lbnUuaGlkZSgpLHRoaXMubWVudUJ1dHRvbl8uZWxfLnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIixcImZhbHNlXCIpKX0sdC5kaXNhYmxlPWZ1bmN0aW9uKCl7dGhpcy51bnByZXNzQnV0dG9uKCksdGhpcy5lbmFibGVkXz0hMSx0aGlzLmFkZENsYXNzKFwidmpzLWRpc2FibGVkXCIpLHRoaXMubWVudUJ1dHRvbl8uZGlzYWJsZSgpfSx0LmVuYWJsZT1mdW5jdGlvbigpe3RoaXMuZW5hYmxlZF89ITAsdGhpcy5yZW1vdmVDbGFzcyhcInZqcy1kaXNhYmxlZFwiKSx0aGlzLm1lbnVCdXR0b25fLmVuYWJsZSgpfSxlfShCZSk7QmUucmVnaXN0ZXJDb21wb25lbnQoXCJNZW51QnV0dG9uXCIsRWkpO3ZhciBTaT1mdW5jdGlvbihzKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG4saT10LnRyYWNrcztpZigobj1zLmNhbGwodGhpcyxlLHQpfHx0aGlzKS5pdGVtcy5sZW5ndGg8PTEmJm4uaGlkZSgpLCFpKXJldHVybiB2KG4pO3ZhciByPUNlKHYodihuKSksbi51cGRhdGUpO3JldHVybiBpLmFkZEV2ZW50TGlzdGVuZXIoXCJyZW1vdmV0cmFja1wiLHIpLGkuYWRkRXZlbnRMaXN0ZW5lcihcImFkZHRyYWNrXCIsciksbi5wbGF5ZXJfLm9uKFwicmVhZHlcIixyKSxuLnBsYXllcl8ub24oXCJkaXNwb3NlXCIsZnVuY3Rpb24oKXtpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZW1vdmV0cmFja1wiLHIpLGkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFkZHRyYWNrXCIscil9KSxufXJldHVybiBmKGUscyksZX0oRWkpO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiVHJhY2tCdXR0b25cIixTaSk7dmFyIHdpPVtcIlRhYlwiLFwiRXNjXCIsXCJVcFwiLFwiRG93blwiLFwiUmlnaHRcIixcIkxlZnRcIl0seGk9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLnNlbGVjdGFibGU9dC5zZWxlY3RhYmxlLG4uaXNTZWxlY3RlZF89dC5zZWxlY3RlZHx8ITEsbi5tdWx0aVNlbGVjdGFibGU9dC5tdWx0aVNlbGVjdGFibGUsbi5zZWxlY3RlZChuLmlzU2VsZWN0ZWRfKSxuLnNlbGVjdGFibGU/bi5tdWx0aVNlbGVjdGFibGU/bi5lbF8uc2V0QXR0cmlidXRlKFwicm9sZVwiLFwibWVudWl0ZW1jaGVja2JveFwiKTpuLmVsXy5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsXCJtZW51aXRlbXJhZGlvXCIpOm4uZWxfLnNldEF0dHJpYnV0ZShcInJvbGVcIixcIm1lbnVpdGVtXCIpLG59ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZUVsPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdGhpcy5ub25JY29uQ29udHJvbD0hMCxpLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsXCJsaVwiLG0oe2NsYXNzTmFtZTpcInZqcy1tZW51LWl0ZW1cIixpbm5lckhUTUw6JzxzcGFuIGNsYXNzPVwidmpzLW1lbnUtaXRlbS10ZXh0XCI+Jyt0aGlzLmxvY2FsaXplKHRoaXMub3B0aW9uc18ubGFiZWwpK1wiPC9zcGFuPlwiLHRhYkluZGV4Oi0xfSx0KSxuKX0sdC5oYW5kbGVLZXlQcmVzcz1mdW5jdGlvbih0KXt3aS5zb21lKGZ1bmN0aW9uKGUpe3JldHVybiBBdC5pc0V2ZW50S2V5KHQsZSl9KXx8aS5wcm90b3R5cGUuaGFuZGxlS2V5UHJlc3MuY2FsbCh0aGlzLHQpfSx0LmhhbmRsZUNsaWNrPWZ1bmN0aW9uKGUpe3RoaXMuc2VsZWN0ZWQoITApfSx0LnNlbGVjdGVkPWZ1bmN0aW9uKGUpe3RoaXMuc2VsZWN0YWJsZSYmKHRoaXMuaXNTZWxlY3RlZF89ZT8odGhpcy5hZGRDbGFzcyhcInZqcy1zZWxlY3RlZFwiKSx0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoXCJhcmlhLWNoZWNrZWRcIixcInRydWVcIiksdGhpcy5jb250cm9sVGV4dChcIiwgc2VsZWN0ZWRcIiksITApOih0aGlzLnJlbW92ZUNsYXNzKFwidmpzLXNlbGVjdGVkXCIpLHRoaXMuZWxfLnNldEF0dHJpYnV0ZShcImFyaWEtY2hlY2tlZFwiLFwiZmFsc2VcIiksdGhpcy5jb250cm9sVGV4dChcIlwiKSwhMSkpfSxlfSh6bik7QmUucmVnaXN0ZXJDb21wb25lbnQoXCJNZW51SXRlbVwiLHhpKTt2YXIgamk9ZnVuY3Rpb24obCl7ZnVuY3Rpb24gZShlLHQpe3ZhciBpLG49dC50cmFjayxyPWUudGV4dFRyYWNrcygpO3QubGFiZWw9bi5sYWJlbHx8bi5sYW5ndWFnZXx8XCJVbmtub3duXCIsdC5zZWxlY3RlZD1cInNob3dpbmdcIj09PW4ubW9kZSwoaT1sLmNhbGwodGhpcyxlLHQpfHx0aGlzKS50cmFjaz1uO3ZhciBzLG89ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxuPTA7bjxlO24rKyl0W25dPWFyZ3VtZW50c1tuXTtpLmhhbmRsZVRyYWNrc0NoYW5nZS5hcHBseSh2KHYoaSkpLHQpfSxhPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSksbj0wO248ZTtuKyspdFtuXT1hcmd1bWVudHNbbl07aS5oYW5kbGVTZWxlY3RlZExhbmd1YWdlQ2hhbmdlLmFwcGx5KHYodihpKSksdCl9OyhlLm9uKFtcImxvYWRzdGFydFwiLFwidGV4dHRyYWNrY2hhbmdlXCJdLG8pLHIuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLG8pLHIuYWRkRXZlbnRMaXN0ZW5lcihcInNlbGVjdGVkbGFuZ3VhZ2VjaGFuZ2VcIixhKSxpLm9uKFwiZGlzcG9zZVwiLGZ1bmN0aW9uKCl7ZS5vZmYoW1wibG9hZHN0YXJ0XCIsXCJ0ZXh0dHJhY2tjaGFuZ2VcIl0sbyksci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsbyksci5yZW1vdmVFdmVudExpc3RlbmVyKFwic2VsZWN0ZWRsYW5ndWFnZWNoYW5nZVwiLGEpfSksdm9pZCAwPT09ci5vbmNoYW5nZSkmJmkub24oW1widGFwXCIsXCJjbGlja1wiXSxmdW5jdGlvbigpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBoLkV2ZW50KXRyeXtzPW5ldyBoLkV2ZW50KFwiY2hhbmdlXCIpfWNhdGNoKGUpe31zfHwocz1kLmNyZWF0ZUV2ZW50KFwiRXZlbnRcIikpLmluaXRFdmVudChcImNoYW5nZVwiLCEwLCEwKSxyLmRpc3BhdGNoRXZlbnQocyl9KTtyZXR1cm4gaS5oYW5kbGVUcmFja3NDaGFuZ2UoKSxpfWYoZSxsKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5oYW5kbGVDbGljaz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnRyYWNrLG49dGhpcy5wbGF5ZXJfLnRleHRUcmFja3MoKTtpZihsLnByb3RvdHlwZS5oYW5kbGVDbGljay5jYWxsKHRoaXMsZSksbilmb3IodmFyIGk9KHQua2luZHN8fFt0LmtpbmRdKS5maWx0ZXIoQm9vbGVhbikscj0wO3I8bi5sZW5ndGg7cisrKXt2YXIgcz1uW3JdOy0xIT09aS5pbmRleE9mKHMua2luZCkmJihzPT09dD9cInNob3dpbmdcIiE9PXMubW9kZSYmKHMubW9kZT1cInNob3dpbmdcIik6XCJkaXNhYmxlZFwiIT09cy5tb2RlJiYocy5tb2RlPVwiZGlzYWJsZWRcIikpfX0sdC5oYW5kbGVUcmFja3NDaGFuZ2U9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJzaG93aW5nXCI9PT10aGlzLnRyYWNrLm1vZGU7dCE9PXRoaXMuaXNTZWxlY3RlZF8mJnRoaXMuc2VsZWN0ZWQodCl9LHQuaGFuZGxlU2VsZWN0ZWRMYW5ndWFnZUNoYW5nZT1mdW5jdGlvbihlKXtpZihcInNob3dpbmdcIj09PXRoaXMudHJhY2subW9kZSl7dmFyIHQ9dGhpcy5wbGF5ZXJfLmNhY2hlXy5zZWxlY3RlZExhbmd1YWdlO2lmKHQmJnQuZW5hYmxlZCYmdC5sYW5ndWFnZT09PXRoaXMudHJhY2subGFuZ3VhZ2UmJnQua2luZCE9PXRoaXMudHJhY2sua2luZClyZXR1cm47dGhpcy5wbGF5ZXJfLmNhY2hlXy5zZWxlY3RlZExhbmd1YWdlPXtlbmFibGVkOiEwLGxhbmd1YWdlOnRoaXMudHJhY2subGFuZ3VhZ2Usa2luZDp0aGlzLnRyYWNrLmtpbmR9fX0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy50cmFjaz1udWxsLGwucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKX0sZX0oeGkpO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiVGV4dFRyYWNrTWVudUl0ZW1cIixqaSk7dmFyIFBpPWZ1bmN0aW9uKG4pe2Z1bmN0aW9uIGUoZSx0KXtyZXR1cm4gdC50cmFjaz17cGxheWVyOmUsa2luZDp0LmtpbmQsa2luZHM6dC5raW5kcyxkZWZhdWx0OiExLG1vZGU6XCJkaXNhYmxlZFwifSx0LmtpbmRzfHwodC5raW5kcz1bdC5raW5kXSksdC5sYWJlbD90LnRyYWNrLmxhYmVsPXQubGFiZWw6dC50cmFjay5sYWJlbD10LmtpbmRzLmpvaW4oXCIgYW5kIFwiKStcIiBvZmZcIix0LnNlbGVjdGFibGU9ITAsdC5tdWx0aVNlbGVjdGFibGU9ITEsbi5jYWxsKHRoaXMsZSx0KXx8dGhpc31mKGUsbik7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaGFuZGxlVHJhY2tzQ2hhbmdlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLnBsYXllcigpLnRleHRUcmFja3MoKSxuPSEwLGk9MCxyPXQubGVuZ3RoO2k8cjtpKyspe3ZhciBzPXRbaV07aWYoLTE8dGhpcy5vcHRpb25zXy5raW5kcy5pbmRleE9mKHMua2luZCkmJlwic2hvd2luZ1wiPT09cy5tb2RlKXtuPSExO2JyZWFrfX1uIT09dGhpcy5pc1NlbGVjdGVkXyYmdGhpcy5zZWxlY3RlZChuKX0sdC5oYW5kbGVTZWxlY3RlZExhbmd1YWdlQ2hhbmdlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLnBsYXllcigpLnRleHRUcmFja3MoKSxuPSEwLGk9MCxyPXQubGVuZ3RoO2k8cjtpKyspe3ZhciBzPXRbaV07aWYoLTE8W1wiY2FwdGlvbnNcIixcImRlc2NyaXB0aW9uc1wiLFwic3VidGl0bGVzXCJdLmluZGV4T2Yocy5raW5kKSYmXCJzaG93aW5nXCI9PT1zLm1vZGUpe249ITE7YnJlYWt9fW4mJih0aGlzLnBsYXllcl8uY2FjaGVfLnNlbGVjdGVkTGFuZ3VhZ2U9e2VuYWJsZWQ6ITF9KX0sZX0oamkpO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiT2ZmVGV4dFRyYWNrTWVudUl0ZW1cIixQaSk7dmFyIEFpPWZ1bmN0aW9uKG4pe2Z1bmN0aW9uIGUoZSx0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9e30pLHQudHJhY2tzPWUudGV4dFRyYWNrcygpLG4uY2FsbCh0aGlzLGUsdCl8fHRoaXN9cmV0dXJuIGYoZSxuKSxlLnByb3RvdHlwZS5jcmVhdGVJdGVtcz1mdW5jdGlvbihlLHQpe3ZhciBuO3ZvaWQgMD09PWUmJihlPVtdKSx2b2lkIDA9PT10JiYodD1qaSksdGhpcy5sYWJlbF8mJihuPXRoaXMubGFiZWxfK1wiIG9mZlwiKSxlLnB1c2gobmV3IFBpKHRoaXMucGxheWVyXyx7a2luZHM6dGhpcy5raW5kc18sa2luZDp0aGlzLmtpbmRfLGxhYmVsOm59KSksdGhpcy5oaWRlVGhyZXNob2xkXys9MTt2YXIgaT10aGlzLnBsYXllcl8udGV4dFRyYWNrcygpO0FycmF5LmlzQXJyYXkodGhpcy5raW5kc18pfHwodGhpcy5raW5kc189W3RoaXMua2luZF9dKTtmb3IodmFyIHI9MDtyPGkubGVuZ3RoO3IrKyl7dmFyIHM9aVtyXTtpZigtMTx0aGlzLmtpbmRzXy5pbmRleE9mKHMua2luZCkpe3ZhciBvPW5ldyB0KHRoaXMucGxheWVyXyx7dHJhY2s6cyxzZWxlY3RhYmxlOiEwLG11bHRpU2VsZWN0YWJsZTohMX0pO28uYWRkQ2xhc3MoXCJ2anMtXCIrcy5raW5kK1wiLW1lbnUtaXRlbVwiKSxlLnB1c2gobyl9fXJldHVybiBlfSxlfShTaSk7QmUucmVnaXN0ZXJDb21wb25lbnQoXCJUZXh0VHJhY2tCdXR0b25cIixBaSk7dmFyIE1pPWZ1bmN0aW9uKG8pe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbixpPXQudHJhY2sscj10LmN1ZSxzPWUuY3VycmVudFRpbWUoKTtyZXR1cm4gdC5zZWxlY3RhYmxlPSEwLHQubXVsdGlTZWxlY3RhYmxlPSExLHQubGFiZWw9ci50ZXh0LHQuc2VsZWN0ZWQ9ci5zdGFydFRpbWU8PXMmJnM8ci5lbmRUaW1lLChuPW8uY2FsbCh0aGlzLGUsdCl8fHRoaXMpLnRyYWNrPWksbi5jdWU9cixpLmFkZEV2ZW50TGlzdGVuZXIoXCJjdWVjaGFuZ2VcIixDZSh2KHYobikpLG4udXBkYXRlKSksbn1mKGUsbyk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZSl7by5wcm90b3R5cGUuaGFuZGxlQ2xpY2suY2FsbCh0aGlzKSx0aGlzLnBsYXllcl8uY3VycmVudFRpbWUodGhpcy5jdWUuc3RhcnRUaW1lKSx0aGlzLnVwZGF0ZSh0aGlzLmN1ZS5zdGFydFRpbWUpfSx0LnVwZGF0ZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmN1ZSxuPXRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpO3RoaXMuc2VsZWN0ZWQodC5zdGFydFRpbWU8PW4mJm48dC5lbmRUaW1lKX0sZX0oeGkpO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiQ2hhcHRlcnNUcmFja01lbnVJdGVtXCIsTWkpO3ZhciBMaT1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCxuKXtyZXR1cm4gaS5jYWxsKHRoaXMsZSx0LG4pfHx0aGlzfWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtY2hhcHRlcnMtYnV0dG9uIFwiK2kucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sdC5idWlsZFdyYXBwZXJDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLWNoYXB0ZXJzLWJ1dHRvbiBcIitpLnByb3RvdHlwZS5idWlsZFdyYXBwZXJDU1NDbGFzcy5jYWxsKHRoaXMpfSx0LnVwZGF0ZT1mdW5jdGlvbihlKXt0aGlzLnRyYWNrXyYmKCFlfHxcImFkZHRyYWNrXCIhPT1lLnR5cGUmJlwicmVtb3ZldHJhY2tcIiE9PWUudHlwZSl8fHRoaXMuc2V0VHJhY2sodGhpcy5maW5kQ2hhcHRlcnNUcmFjaygpKSxpLnByb3RvdHlwZS51cGRhdGUuY2FsbCh0aGlzKX0sdC5zZXRUcmFjaz1mdW5jdGlvbihlKXtpZih0aGlzLnRyYWNrXyE9PWUpe2lmKHRoaXMudXBkYXRlSGFuZGxlcl98fCh0aGlzLnVwZGF0ZUhhbmRsZXJfPXRoaXMudXBkYXRlLmJpbmQodGhpcykpLHRoaXMudHJhY2tfKXt2YXIgdD10aGlzLnBsYXllcl8ucmVtb3RlVGV4dFRyYWNrRWxzKCkuZ2V0VHJhY2tFbGVtZW50QnlUcmFja18odGhpcy50cmFja18pO3QmJnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIix0aGlzLnVwZGF0ZUhhbmRsZXJfKSx0aGlzLnRyYWNrXz1udWxsfWlmKHRoaXMudHJhY2tfPWUsdGhpcy50cmFja18pe3RoaXMudHJhY2tfLm1vZGU9XCJoaWRkZW5cIjt2YXIgbj10aGlzLnBsYXllcl8ucmVtb3RlVGV4dFRyYWNrRWxzKCkuZ2V0VHJhY2tFbGVtZW50QnlUcmFja18odGhpcy50cmFja18pO24mJm4uYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIix0aGlzLnVwZGF0ZUhhbmRsZXJfKX19fSx0LmZpbmRDaGFwdGVyc1RyYWNrPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMucGxheWVyXy50ZXh0VHJhY2tzKCl8fFtdLHQ9ZS5sZW5ndGgtMTswPD10O3QtLSl7dmFyIG49ZVt0XTtpZihuLmtpbmQ9PT10aGlzLmtpbmRfKXJldHVybiBufX0sdC5nZXRNZW51Q2FwdGlvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRyYWNrXyYmdGhpcy50cmFja18ubGFiZWw/dGhpcy50cmFja18ubGFiZWw6dGhpcy5sb2NhbGl6ZShGZSh0aGlzLmtpbmRfKSl9LHQuY3JlYXRlTWVudT1mdW5jdGlvbigpe3JldHVybiB0aGlzLm9wdGlvbnNfLnRpdGxlPXRoaXMuZ2V0TWVudUNhcHRpb24oKSxpLnByb3RvdHlwZS5jcmVhdGVNZW51LmNhbGwodGhpcyl9LHQuY3JlYXRlSXRlbXM9ZnVuY3Rpb24oKXt2YXIgZT1bXTtpZighdGhpcy50cmFja18pcmV0dXJuIGU7dmFyIHQ9dGhpcy50cmFja18uY3VlcztpZighdClyZXR1cm4gZTtmb3IodmFyIG49MCxpPXQubGVuZ3RoO248aTtuKyspe3ZhciByPXRbbl0scz1uZXcgTWkodGhpcy5wbGF5ZXJfLHt0cmFjazp0aGlzLnRyYWNrXyxjdWU6cn0pO2UucHVzaChzKX1yZXR1cm4gZX0sZX0oQWkpO0xpLnByb3RvdHlwZS5raW5kXz1cImNoYXB0ZXJzXCIsTGkucHJvdG90eXBlLmNvbnRyb2xUZXh0Xz1cIkNoYXB0ZXJzXCIsQmUucmVnaXN0ZXJDb21wb25lbnQoXCJDaGFwdGVyc0J1dHRvblwiLExpKTt2YXIgTmk9ZnVuY3Rpb24obyl7ZnVuY3Rpb24gZShlLHQsbil7dmFyIGk7aT1vLmNhbGwodGhpcyxlLHQsbil8fHRoaXM7dmFyIHI9ZS50ZXh0VHJhY2tzKCkscz1DZSh2KHYoaSkpLGkuaGFuZGxlVHJhY2tzQ2hhbmdlKTtyZXR1cm4gci5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIscyksaS5vbihcImRpc3Bvc2VcIixmdW5jdGlvbigpe3IucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLHMpfSksaX1mKGUsbyk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaGFuZGxlVHJhY2tzQ2hhbmdlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLnBsYXllcigpLnRleHRUcmFja3MoKSxuPSExLGk9MCxyPXQubGVuZ3RoO2k8cjtpKyspe3ZhciBzPXRbaV07aWYocy5raW5kIT09dGhpcy5raW5kXyYmXCJzaG93aW5nXCI9PT1zLm1vZGUpe249ITA7YnJlYWt9fW4/dGhpcy5kaXNhYmxlKCk6dGhpcy5lbmFibGUoKX0sdC5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtZGVzY3JpcHRpb25zLWJ1dHRvbiBcIitvLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyl9LHQuYnVpbGRXcmFwcGVyQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1kZXNjcmlwdGlvbnMtYnV0dG9uIFwiK28ucHJvdG90eXBlLmJ1aWxkV3JhcHBlckNTU0NsYXNzLmNhbGwodGhpcyl9LGV9KEFpKTtOaS5wcm90b3R5cGUua2luZF89XCJkZXNjcmlwdGlvbnNcIixOaS5wcm90b3R5cGUuY29udHJvbFRleHRfPVwiRGVzY3JpcHRpb25zXCIsQmUucmVnaXN0ZXJDb21wb25lbnQoXCJEZXNjcmlwdGlvbnNCdXR0b25cIixOaSk7dmFyIE9pPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0LG4pe3JldHVybiBpLmNhbGwodGhpcyxlLHQsbil8fHRoaXN9ZihlLGkpO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmJ1aWxkQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1zdWJ0aXRsZXMtYnV0dG9uIFwiK2kucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sdC5idWlsZFdyYXBwZXJDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLXN1YnRpdGxlcy1idXR0b24gXCIraS5wcm90b3R5cGUuYnVpbGRXcmFwcGVyQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sZX0oQWkpO09pLnByb3RvdHlwZS5raW5kXz1cInN1YnRpdGxlc1wiLE9pLnByb3RvdHlwZS5jb250cm9sVGV4dF89XCJTdWJ0aXRsZXNcIixCZS5yZWdpc3RlckNvbXBvbmVudChcIlN1YnRpdGxlc0J1dHRvblwiLE9pKTt2YXIgRGk9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybiB0LnRyYWNrPXtwbGF5ZXI6ZSxraW5kOnQua2luZCxsYWJlbDp0LmtpbmQrXCIgc2V0dGluZ3NcIixzZWxlY3RhYmxlOiExLGRlZmF1bHQ6ITEsbW9kZTpcImRpc2FibGVkXCJ9LHQuc2VsZWN0YWJsZT0hMSx0Lm5hbWU9XCJDYXB0aW9uU2V0dGluZ3NNZW51SXRlbVwiLChuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLmFkZENsYXNzKFwidmpzLXRleHR0cmFjay1zZXR0aW5nc1wiKSxuLmNvbnRyb2xUZXh0KFwiLCBvcGVucyBcIit0LmtpbmQrXCIgc2V0dGluZ3MgZGlhbG9nXCIpLG59cmV0dXJuIGYoZSxpKSxlLnByb3RvdHlwZS5oYW5kbGVDbGljaz1mdW5jdGlvbihlKXt0aGlzLnBsYXllcigpLmdldENoaWxkKFwidGV4dFRyYWNrU2V0dGluZ3NcIikub3BlbigpfSxlfShqaSk7QmUucmVnaXN0ZXJDb21wb25lbnQoXCJDYXB0aW9uU2V0dGluZ3NNZW51SXRlbVwiLERpKTt2YXIgSWk9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQsbil7cmV0dXJuIGkuY2FsbCh0aGlzLGUsdCxuKXx8dGhpc31mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLWNhcHRpb25zLWJ1dHRvbiBcIitpLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyl9LHQuYnVpbGRXcmFwcGVyQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1jYXB0aW9ucy1idXR0b24gXCIraS5wcm90b3R5cGUuYnVpbGRXcmFwcGVyQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sdC5jcmVhdGVJdGVtcz1mdW5jdGlvbigpe3ZhciBlPVtdO3JldHVybiB0aGlzLnBsYXllcigpLnRlY2hfJiZ0aGlzLnBsYXllcigpLnRlY2hfLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrc3x8IXRoaXMucGxheWVyKCkuZ2V0Q2hpbGQoXCJ0ZXh0VHJhY2tTZXR0aW5nc1wiKXx8KGUucHVzaChuZXcgRGkodGhpcy5wbGF5ZXJfLHtraW5kOnRoaXMua2luZF99KSksdGhpcy5oaWRlVGhyZXNob2xkXys9MSksaS5wcm90b3R5cGUuY3JlYXRlSXRlbXMuY2FsbCh0aGlzLGUpfSxlfShBaSk7SWkucHJvdG90eXBlLmtpbmRfPVwiY2FwdGlvbnNcIixJaS5wcm90b3R5cGUuY29udHJvbFRleHRfPVwiQ2FwdGlvbnNcIixCZS5yZWdpc3RlckNvbXBvbmVudChcIkNhcHRpb25zQnV0dG9uXCIsSWkpO3ZhciBGaT1mdW5jdGlvbihyKXtmdW5jdGlvbiBlKCl7cmV0dXJuIHIuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybiBmKGUsciksZS5wcm90b3R5cGUuY3JlYXRlRWw9ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPSc8c3BhbiBjbGFzcz1cInZqcy1tZW51LWl0ZW0tdGV4dFwiPicrdGhpcy5sb2NhbGl6ZSh0aGlzLm9wdGlvbnNfLmxhYmVsKTtyZXR1cm5cImNhcHRpb25zXCI9PT10aGlzLm9wdGlvbnNfLnRyYWNrLmtpbmQmJihpKz0nXFxuICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIiBjbGFzcz1cInZqcy1pY29uLXBsYWNlaG9sZGVyXCI+PC9zcGFuPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJ2anMtY29udHJvbC10ZXh0XCI+ICcrdGhpcy5sb2NhbGl6ZShcIkNhcHRpb25zXCIpK1wiPC9zcGFuPlxcbiAgICAgIFwiKSxpKz1cIjwvc3Bhbj5cIixyLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsZSxtKHtpbm5lckhUTUw6aX0sdCksbil9LGV9KGppKTtCZS5yZWdpc3RlckNvbXBvbmVudChcIlN1YnNDYXBzTWVudUl0ZW1cIixGaSk7dmFyIFJpPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbjtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9e30pLChuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLmxhYmVsXz1cInN1YnRpdGxlc1wiLC0xPFtcImVuXCIsXCJlbi11c1wiLFwiZW4tY2FcIixcImZyLWNhXCJdLmluZGV4T2Yobi5wbGF5ZXJfLmxhbmd1YWdlXykmJihuLmxhYmVsXz1cImNhcHRpb25zXCIpLG4ubWVudUJ1dHRvbl8uY29udHJvbFRleHQoRmUobi5sYWJlbF8pKSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtc3Vicy1jYXBzLWJ1dHRvbiBcIitpLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyl9LHQuYnVpbGRXcmFwcGVyQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1zdWJzLWNhcHMtYnV0dG9uIFwiK2kucHJvdG90eXBlLmJ1aWxkV3JhcHBlckNTU0NsYXNzLmNhbGwodGhpcyl9LHQuY3JlYXRlSXRlbXM9ZnVuY3Rpb24oKXt2YXIgZT1bXTtyZXR1cm4gdGhpcy5wbGF5ZXIoKS50ZWNoXyYmdGhpcy5wbGF5ZXIoKS50ZWNoXy5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3N8fCF0aGlzLnBsYXllcigpLmdldENoaWxkKFwidGV4dFRyYWNrU2V0dGluZ3NcIil8fChlLnB1c2gobmV3IERpKHRoaXMucGxheWVyXyx7a2luZDp0aGlzLmxhYmVsX30pKSx0aGlzLmhpZGVUaHJlc2hvbGRfKz0xKSxlPWkucHJvdG90eXBlLmNyZWF0ZUl0ZW1zLmNhbGwodGhpcyxlLEZpKX0sZX0oQWkpO1JpLnByb3RvdHlwZS5raW5kc189W1wiY2FwdGlvbnNcIixcInN1YnRpdGxlc1wiXSxSaS5wcm90b3R5cGUuY29udHJvbFRleHRfPVwiU3VidGl0bGVzXCIsQmUucmVnaXN0ZXJDb21wb25lbnQoXCJTdWJzQ2Fwc0J1dHRvblwiLFJpKTt2YXIgQmk9ZnVuY3Rpb24obyl7ZnVuY3Rpb24gZShlLHQpe3ZhciBpLG49dC50cmFjayxyPWUuYXVkaW9UcmFja3MoKTt0LmxhYmVsPW4ubGFiZWx8fG4ubGFuZ3VhZ2V8fFwiVW5rbm93blwiLHQuc2VsZWN0ZWQ9bi5lbmFibGVkLChpPW8uY2FsbCh0aGlzLGUsdCl8fHRoaXMpLnRyYWNrPW4saS5hZGRDbGFzcyhcInZqcy1cIituLmtpbmQrXCItbWVudS1pdGVtXCIpO3ZhciBzPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSksbj0wO248ZTtuKyspdFtuXT1hcmd1bWVudHNbbl07aS5oYW5kbGVUcmFja3NDaGFuZ2UuYXBwbHkodih2KGkpKSx0KX07cmV0dXJuIHIuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLHMpLGkub24oXCJkaXNwb3NlXCIsZnVuY3Rpb24oKXtyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIixzKX0pLGl9ZihlLG8pO3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZUVsPWZ1bmN0aW9uKGUsdCxuKXt2YXIgaT0nPHNwYW4gY2xhc3M9XCJ2anMtbWVudS1pdGVtLXRleHRcIj4nK3RoaXMubG9jYWxpemUodGhpcy5vcHRpb25zXy5sYWJlbCk7cmV0dXJuXCJtYWluLWRlc2NcIj09PXRoaXMub3B0aW9uc18udHJhY2sua2luZCYmKGkrPSdcXG4gICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGNsYXNzPVwidmpzLWljb24tcGxhY2Vob2xkZXJcIj48L3NwYW4+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cInZqcy1jb250cm9sLXRleHRcIj4gJyt0aGlzLmxvY2FsaXplKFwiRGVzY3JpcHRpb25zXCIpK1wiPC9zcGFuPlxcbiAgICAgIFwiKSxpKz1cIjwvc3Bhbj5cIixvLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsZSxtKHtpbm5lckhUTUw6aX0sdCksbil9LHQuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5wbGF5ZXJfLmF1ZGlvVHJhY2tzKCk7by5wcm90b3R5cGUuaGFuZGxlQ2xpY2suY2FsbCh0aGlzLGUpO2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgaT10W25dO2kuZW5hYmxlZD1pPT09dGhpcy50cmFja319LHQuaGFuZGxlVHJhY2tzQ2hhbmdlPWZ1bmN0aW9uKGUpe3RoaXMuc2VsZWN0ZWQodGhpcy50cmFjay5lbmFibGVkKX0sZX0oeGkpO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiQXVkaW9UcmFja01lbnVJdGVtXCIsQmkpO3ZhciBIaT1mdW5jdGlvbihuKXtmdW5jdGlvbiBlKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PXt9KSx0LnRyYWNrcz1lLmF1ZGlvVHJhY2tzKCksbi5jYWxsKHRoaXMsZSx0KXx8dGhpc31mKGUsbik7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLWF1ZGlvLWJ1dHRvbiBcIituLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyl9LHQuYnVpbGRXcmFwcGVyQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm5cInZqcy1hdWRpby1idXR0b24gXCIrbi5wcm90b3R5cGUuYnVpbGRXcmFwcGVyQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sdC5jcmVhdGVJdGVtcz1mdW5jdGlvbihlKXt2b2lkIDA9PT1lJiYoZT1bXSksdGhpcy5oaWRlVGhyZXNob2xkXz0xO2Zvcih2YXIgdD10aGlzLnBsYXllcl8uYXVkaW9UcmFja3MoKSxuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBpPXRbbl07ZS5wdXNoKG5ldyBCaSh0aGlzLnBsYXllcl8se3RyYWNrOmksc2VsZWN0YWJsZTohMCxtdWx0aVNlbGVjdGFibGU6ITF9KSl9cmV0dXJuIGV9LGV9KFNpKTtIaS5wcm90b3R5cGUuY29udHJvbFRleHRfPVwiQXVkaW8gVHJhY2tcIixCZS5yZWdpc3RlckNvbXBvbmVudChcIkF1ZGlvVHJhY2tCdXR0b25cIixIaSk7dmFyIFZpPWZ1bmN0aW9uKHMpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbixpPXQucmF0ZSxyPXBhcnNlRmxvYXQoaSwxMCk7cmV0dXJuIHQubGFiZWw9aSx0LnNlbGVjdGVkPTE9PT1yLHQuc2VsZWN0YWJsZT0hMCx0Lm11bHRpU2VsZWN0YWJsZT0hMSwobj1zLmNhbGwodGhpcyxlLHQpfHx0aGlzKS5sYWJlbD1pLG4ucmF0ZT1yLG4ub24oZSxcInJhdGVjaGFuZ2VcIixuLnVwZGF0ZSksbn1mKGUscyk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZSl7cy5wcm90b3R5cGUuaGFuZGxlQ2xpY2suY2FsbCh0aGlzKSx0aGlzLnBsYXllcigpLnBsYXliYWNrUmF0ZSh0aGlzLnJhdGUpfSx0LnVwZGF0ZT1mdW5jdGlvbihlKXt0aGlzLnNlbGVjdGVkKHRoaXMucGxheWVyKCkucGxheWJhY2tSYXRlKCk9PT10aGlzLnJhdGUpfSxlfSh4aSk7VmkucHJvdG90eXBlLmNvbnRlbnRFbFR5cGU9XCJidXR0b25cIixCZS5yZWdpc3RlckNvbXBvbmVudChcIlBsYXliYWNrUmF0ZU1lbnVJdGVtXCIsVmkpO3ZhciB6aT1mdW5jdGlvbihpKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG47cmV0dXJuKG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcykudXBkYXRlVmlzaWJpbGl0eSgpLG4udXBkYXRlTGFiZWwoKSxuLm9uKGUsXCJsb2Fkc3RhcnRcIixuLnVwZGF0ZVZpc2liaWxpdHkpLG4ub24oZSxcInJhdGVjaGFuZ2VcIixuLnVwZGF0ZUxhYmVsKSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jcmVhdGVFbD1mdW5jdGlvbigpe3ZhciBlPWkucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyk7cmV0dXJuIHRoaXMubGFiZWxFbF89eChcImRpdlwiLHtjbGFzc05hbWU6XCJ2anMtcGxheWJhY2stcmF0ZS12YWx1ZVwiLGlubmVySFRNTDpcIjF4XCJ9KSxlLmFwcGVuZENoaWxkKHRoaXMubGFiZWxFbF8pLGV9LHQuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMubGFiZWxFbF89bnVsbCxpLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyl9LHQuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLXBsYXliYWNrLXJhdGUgXCIraS5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpfSx0LmJ1aWxkV3JhcHBlckNTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtcGxheWJhY2stcmF0ZSBcIitpLnByb3RvdHlwZS5idWlsZFdyYXBwZXJDU1NDbGFzcy5jYWxsKHRoaXMpfSx0LmNyZWF0ZU1lbnU9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgQ2kodGhpcy5wbGF5ZXIoKSksdD10aGlzLnBsYXliYWNrUmF0ZXMoKTtpZih0KWZvcih2YXIgbj10Lmxlbmd0aC0xOzA8PW47bi0tKWUuYWRkQ2hpbGQobmV3IFZpKHRoaXMucGxheWVyKCkse3JhdGU6dFtuXStcInhcIn0pKTtyZXR1cm4gZX0sdC51cGRhdGVBUklBQXR0cmlidXRlcz1mdW5jdGlvbigpe3RoaXMuZWwoKS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbm93XCIsdGhpcy5wbGF5ZXIoKS5wbGF5YmFja1JhdGUoKSl9LHQuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMucGxheWVyKCkucGxheWJhY2tSYXRlKCksbj10aGlzLnBsYXliYWNrUmF0ZXMoKSxpPW5bMF0scj0wO3I8bi5sZW5ndGg7cisrKWlmKG5bcl0+dCl7aT1uW3JdO2JyZWFrfXRoaXMucGxheWVyKCkucGxheWJhY2tSYXRlKGkpfSx0LnBsYXliYWNrUmF0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vcHRpb25zXy5wbGF5YmFja1JhdGVzfHx0aGlzLm9wdGlvbnNfLnBsYXllck9wdGlvbnMmJnRoaXMub3B0aW9uc18ucGxheWVyT3B0aW9ucy5wbGF5YmFja1JhdGVzfSx0LnBsYXliYWNrUmF0ZVN1cHBvcnRlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBsYXllcigpLnRlY2hfJiZ0aGlzLnBsYXllcigpLnRlY2hfLmZlYXR1cmVzUGxheWJhY2tSYXRlJiZ0aGlzLnBsYXliYWNrUmF0ZXMoKSYmMDx0aGlzLnBsYXliYWNrUmF0ZXMoKS5sZW5ndGh9LHQudXBkYXRlVmlzaWJpbGl0eT1mdW5jdGlvbihlKXt0aGlzLnBsYXliYWNrUmF0ZVN1cHBvcnRlZCgpP3RoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtaGlkZGVuXCIpOnRoaXMuYWRkQ2xhc3MoXCJ2anMtaGlkZGVuXCIpfSx0LnVwZGF0ZUxhYmVsPWZ1bmN0aW9uKGUpe3RoaXMucGxheWJhY2tSYXRlU3VwcG9ydGVkKCkmJih0aGlzLmxhYmVsRWxfLmlubmVySFRNTD10aGlzLnBsYXllcigpLnBsYXliYWNrUmF0ZSgpK1wieFwiKX0sZX0oRWkpO3ppLnByb3RvdHlwZS5jb250cm9sVGV4dF89XCJQbGF5YmFjayBSYXRlXCIsQmUucmVnaXN0ZXJDb21wb25lbnQoXCJQbGF5YmFja1JhdGVNZW51QnV0dG9uXCIsemkpO3ZhciBLaT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfWYodCxlKTt2YXIgbj10LnByb3RvdHlwZTtyZXR1cm4gbi5idWlsZENTU0NsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuXCJ2anMtc3BhY2VyIFwiK2UucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKX0sbi5jcmVhdGVFbD1mdW5jdGlvbigpe3JldHVybiBlLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsXCJkaXZcIix7Y2xhc3NOYW1lOnRoaXMuYnVpbGRDU1NDbGFzcygpfSl9LHR9KEJlKTtCZS5yZWdpc3RlckNvbXBvbmVudChcIlNwYWNlclwiLEtpKTt2YXIgV2k9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3JldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31mKGUsdCk7dmFyIG49ZS5wcm90b3R5cGU7cmV0dXJuIG4uYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLWN1c3RvbS1jb250cm9sLXNwYWNlciBcIit0LnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyl9LG4uY3JlYXRlRWw9ZnVuY3Rpb24oKXt2YXIgZT10LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMse2NsYXNzTmFtZTp0aGlzLmJ1aWxkQ1NTQ2xhc3MoKX0pO3JldHVybiBlLmlubmVySFRNTD1cIsKgXCIsZX0sZX0oS2kpO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiQ3VzdG9tQ29udHJvbFNwYWNlclwiLFdpKTt2YXIgVWk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4gZih0LGUpLHQucHJvdG90eXBlLmNyZWF0ZUVsPWZ1bmN0aW9uKCl7cmV0dXJuIGUucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyxcImRpdlwiLHtjbGFzc05hbWU6XCJ2anMtY29udHJvbC1iYXJcIixkaXI6XCJsdHJcIn0pfSx0fShCZSk7VWkucHJvdG90eXBlLm9wdGlvbnNfPXtjaGlsZHJlbjpbXCJwbGF5VG9nZ2xlXCIsXCJ2b2x1bWVQYW5lbFwiLFwiY3VycmVudFRpbWVEaXNwbGF5XCIsXCJ0aW1lRGl2aWRlclwiLFwiZHVyYXRpb25EaXNwbGF5XCIsXCJwcm9ncmVzc0NvbnRyb2xcIixcImxpdmVEaXNwbGF5XCIsXCJzZWVrVG9MaXZlXCIsXCJyZW1haW5pbmdUaW1lRGlzcGxheVwiLFwiY3VzdG9tQ29udHJvbFNwYWNlclwiLFwicGxheWJhY2tSYXRlTWVudUJ1dHRvblwiLFwiY2hhcHRlcnNCdXR0b25cIixcImRlc2NyaXB0aW9uc0J1dHRvblwiLFwic3Vic0NhcHNCdXR0b25cIixcImF1ZGlvVHJhY2tCdXR0b25cIixcImZ1bGxzY3JlZW5Ub2dnbGVcIl19LEJlLnJlZ2lzdGVyQ29tcG9uZW50KFwiQ29udHJvbEJhclwiLFVpKTt2YXIgcWk9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuO3JldHVybihuPWkuY2FsbCh0aGlzLGUsdCl8fHRoaXMpLm9uKGUsXCJlcnJvclwiLG4ub3Blbiksbn1mKGUsaSk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuYnVpbGRDU1NDbGFzcz1mdW5jdGlvbigpe3JldHVyblwidmpzLWVycm9yLWRpc3BsYXkgXCIraS5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpfSx0LmNvbnRlbnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnBsYXllcigpLmVycm9yKCk7cmV0dXJuIGU/dGhpcy5sb2NhbGl6ZShlLm1lc3NhZ2UpOlwiXCJ9LGV9KEx0KTtxaS5wcm90b3R5cGUub3B0aW9uc189UmUoTHQucHJvdG90eXBlLm9wdGlvbnNfLHtwYXVzZU9uT3BlbjohMSxmaWxsQWx3YXlzOiEwLHRlbXBvcmFyeTohMSx1bmNsb3NlYWJsZTohMH0pLEJlLnJlZ2lzdGVyQ29tcG9uZW50KFwiRXJyb3JEaXNwbGF5XCIscWkpO3ZhciBYaT1cInZqcy10ZXh0LXRyYWNrLXNldHRpbmdzXCIsJGk9W1wiIzAwMFwiLFwiQmxhY2tcIl0sR2k9W1wiIzAwRlwiLFwiQmx1ZVwiXSxZaT1bXCIjMEZGXCIsXCJDeWFuXCJdLFFpPVtcIiMwRjBcIixcIkdyZWVuXCJdLEppPVtcIiNGMEZcIixcIk1hZ2VudGFcIl0sWmk9W1wiI0YwMFwiLFwiUmVkXCJdLGVyPVtcIiNGRkZcIixcIldoaXRlXCJdLHRyPVtcIiNGRjBcIixcIlllbGxvd1wiXSxucj1bXCIxXCIsXCJPcGFxdWVcIl0saXI9W1wiMC41XCIsXCJTZW1pLVRyYW5zcGFyZW50XCJdLHJyPVtcIjBcIixcIlRyYW5zcGFyZW50XCJdLHNyPXtiYWNrZ3JvdW5kQ29sb3I6e3NlbGVjdG9yOlwiLnZqcy1iZy1jb2xvciA+IHNlbGVjdFwiLGlkOlwiY2FwdGlvbnMtYmFja2dyb3VuZC1jb2xvci0lc1wiLGxhYmVsOlwiQ29sb3JcIixvcHRpb25zOlskaSxlcixaaSxRaSxHaSx0cixKaSxZaV19LGJhY2tncm91bmRPcGFjaXR5OntzZWxlY3RvcjpcIi52anMtYmctb3BhY2l0eSA+IHNlbGVjdFwiLGlkOlwiY2FwdGlvbnMtYmFja2dyb3VuZC1vcGFjaXR5LSVzXCIsbGFiZWw6XCJUcmFuc3BhcmVuY3lcIixvcHRpb25zOltucixpcixycl19LGNvbG9yOntzZWxlY3RvcjpcIi52anMtZmctY29sb3IgPiBzZWxlY3RcIixpZDpcImNhcHRpb25zLWZvcmVncm91bmQtY29sb3ItJXNcIixsYWJlbDpcIkNvbG9yXCIsb3B0aW9uczpbZXIsJGksWmksUWksR2ksdHIsSmksWWldfSxlZGdlU3R5bGU6e3NlbGVjdG9yOlwiLnZqcy1lZGdlLXN0eWxlID4gc2VsZWN0XCIsaWQ6XCIlc1wiLGxhYmVsOlwiVGV4dCBFZGdlIFN0eWxlXCIsb3B0aW9uczpbW1wibm9uZVwiLFwiTm9uZVwiXSxbXCJyYWlzZWRcIixcIlJhaXNlZFwiXSxbXCJkZXByZXNzZWRcIixcIkRlcHJlc3NlZFwiXSxbXCJ1bmlmb3JtXCIsXCJVbmlmb3JtXCJdLFtcImRyb3BzaGFkb3dcIixcIkRyb3BzaGFkb3dcIl1dfSxmb250RmFtaWx5OntzZWxlY3RvcjpcIi52anMtZm9udC1mYW1pbHkgPiBzZWxlY3RcIixpZDpcImNhcHRpb25zLWZvbnQtZmFtaWx5LSVzXCIsbGFiZWw6XCJGb250IEZhbWlseVwiLG9wdGlvbnM6W1tcInByb3BvcnRpb25hbFNhbnNTZXJpZlwiLFwiUHJvcG9ydGlvbmFsIFNhbnMtU2VyaWZcIl0sW1wibW9ub3NwYWNlU2Fuc1NlcmlmXCIsXCJNb25vc3BhY2UgU2Fucy1TZXJpZlwiXSxbXCJwcm9wb3J0aW9uYWxTZXJpZlwiLFwiUHJvcG9ydGlvbmFsIFNlcmlmXCJdLFtcIm1vbm9zcGFjZVNlcmlmXCIsXCJNb25vc3BhY2UgU2VyaWZcIl0sW1wiY2FzdWFsXCIsXCJDYXN1YWxcIl0sW1wic2NyaXB0XCIsXCJTY3JpcHRcIl0sW1wic21hbGwtY2Fwc1wiLFwiU21hbGwgQ2Fwc1wiXV19LGZvbnRQZXJjZW50OntzZWxlY3RvcjpcIi52anMtZm9udC1wZXJjZW50ID4gc2VsZWN0XCIsaWQ6XCJjYXB0aW9ucy1mb250LXNpemUtJXNcIixsYWJlbDpcIkZvbnQgU2l6ZVwiLG9wdGlvbnM6W1tcIjAuNTBcIixcIjUwJVwiXSxbXCIwLjc1XCIsXCI3NSVcIl0sW1wiMS4wMFwiLFwiMTAwJVwiXSxbXCIxLjI1XCIsXCIxMjUlXCJdLFtcIjEuNTBcIixcIjE1MCVcIl0sW1wiMS43NVwiLFwiMTc1JVwiXSxbXCIyLjAwXCIsXCIyMDAlXCJdLFtcIjMuMDBcIixcIjMwMCVcIl0sW1wiNC4wMFwiLFwiNDAwJVwiXV0sZGVmYXVsdDoyLHBhcnNlcjpmdW5jdGlvbihlKXtyZXR1cm5cIjEuMDBcIj09PWU/bnVsbDpOdW1iZXIoZSl9fSx0ZXh0T3BhY2l0eTp7c2VsZWN0b3I6XCIudmpzLXRleHQtb3BhY2l0eSA+IHNlbGVjdFwiLGlkOlwiY2FwdGlvbnMtZm9yZWdyb3VuZC1vcGFjaXR5LSVzXCIsbGFiZWw6XCJUcmFuc3BhcmVuY3lcIixvcHRpb25zOltucixpcl19LHdpbmRvd0NvbG9yOntzZWxlY3RvcjpcIi52anMtd2luZG93LWNvbG9yID4gc2VsZWN0XCIsaWQ6XCJjYXB0aW9ucy13aW5kb3ctY29sb3ItJXNcIixsYWJlbDpcIkNvbG9yXCJ9LHdpbmRvd09wYWNpdHk6e3NlbGVjdG9yOlwiLnZqcy13aW5kb3ctb3BhY2l0eSA+IHNlbGVjdFwiLGlkOlwiY2FwdGlvbnMtd2luZG93LW9wYWNpdHktJXNcIixsYWJlbDpcIlRyYW5zcGFyZW5jeVwiLG9wdGlvbnM6W3JyLGlyLG5yXX19O2Z1bmN0aW9uIG9yKGUsdCl7aWYodCYmKGU9dChlKSksZSYmXCJub25lXCIhPT1lKXJldHVybiBlfXNyLndpbmRvd0NvbG9yLm9wdGlvbnM9c3IuYmFja2dyb3VuZENvbG9yLm9wdGlvbnM7dmFyIGFyPWZ1bmN0aW9uKGkpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbjtyZXR1cm4gdC50ZW1wb3Jhcnk9ITEsKG49aS5jYWxsKHRoaXMsZSx0KXx8dGhpcykudXBkYXRlRGlzcGxheT1DZSh2KHYobikpLG4udXBkYXRlRGlzcGxheSksbi5maWxsKCksbi5oYXNCZWVuT3BlbmVkXz1uLmhhc0JlZW5GaWxsZWRfPSEwLG4uZW5kRGlhbG9nPXgoXCJwXCIse2NsYXNzTmFtZTpcInZqcy1jb250cm9sLXRleHRcIix0ZXh0Q29udGVudDpuLmxvY2FsaXplKFwiRW5kIG9mIGRpYWxvZyB3aW5kb3cuXCIpfSksbi5lbCgpLmFwcGVuZENoaWxkKG4uZW5kRGlhbG9nKSxuLnNldERlZmF1bHRzKCksdm9pZCAwPT09dC5wZXJzaXN0VGV4dFRyYWNrU2V0dGluZ3MmJihuLm9wdGlvbnNfLnBlcnNpc3RUZXh0VHJhY2tTZXR0aW5ncz1uLm9wdGlvbnNfLnBsYXllck9wdGlvbnMucGVyc2lzdFRleHRUcmFja1NldHRpbmdzKSxuLm9uKG4uJChcIi52anMtZG9uZS1idXR0b25cIiksXCJjbGlja1wiLGZ1bmN0aW9uKCl7bi5zYXZlU2V0dGluZ3MoKSxuLmNsb3NlKCl9KSxuLm9uKG4uJChcIi52anMtZGVmYXVsdC1idXR0b25cIiksXCJjbGlja1wiLGZ1bmN0aW9uKCl7bi5zZXREZWZhdWx0cygpLG4udXBkYXRlRGlzcGxheSgpfSksYShzcixmdW5jdGlvbihlKXtuLm9uKG4uJChlLnNlbGVjdG9yKSxcImNoYW5nZVwiLG4udXBkYXRlRGlzcGxheSl9KSxuLm9wdGlvbnNfLnBlcnNpc3RUZXh0VHJhY2tTZXR0aW5ncyYmbi5yZXN0b3JlU2V0dGluZ3MoKSxufWYoZSxpKTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5lbmREaWFsb2c9bnVsbCxpLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyl9LHQuY3JlYXRlRWxTZWxlY3RfPWZ1bmN0aW9uKGUsdCxuKXt2YXIgaT10aGlzO3ZvaWQgMD09PXQmJih0PVwiXCIpLHZvaWQgMD09PW4mJihuPVwibGFiZWxcIik7dmFyIHI9c3JbZV0scz1yLmlkLnJlcGxhY2UoXCIlc1wiLHRoaXMuaWRfKSxvPVt0LHNdLmpvaW4oXCIgXCIpLnRyaW0oKTtyZXR1cm5bXCI8XCIrbisnIGlkPVwiJytzKydcIiBjbGFzcz1cIicrKFwibGFiZWxcIj09PW4/XCJ2anMtbGFiZWxcIjpcIlwiKSsnXCI+Jyx0aGlzLmxvY2FsaXplKHIubGFiZWwpLFwiPC9cIituK1wiPlwiLCc8c2VsZWN0IGFyaWEtbGFiZWxsZWRieT1cIicrbysnXCI+J10uY29uY2F0KHIub3B0aW9ucy5tYXAoZnVuY3Rpb24oZSl7dmFyIHQ9cytcIi1cIitlWzFdLnJlcGxhY2UoL1xcVysvZyxcIlwiKTtyZXR1cm5bJzxvcHRpb24gaWQ9XCInK3QrJ1wiIHZhbHVlPVwiJytlWzBdKydcIiAnLCdhcmlhLWxhYmVsbGVkYnk9XCInK28rXCIgXCIrdCsnXCI+JyxpLmxvY2FsaXplKGVbMV0pLFwiPC9vcHRpb24+XCJdLmpvaW4oXCJcIil9KSkuY29uY2F0KFwiPC9zZWxlY3Q+XCIpLmpvaW4oXCJcIil9LHQuY3JlYXRlRWxGZ0NvbG9yXz1mdW5jdGlvbigpe3ZhciBlPVwiY2FwdGlvbnMtdGV4dC1sZWdlbmQtXCIrdGhpcy5pZF87cmV0dXJuWyc8ZmllbGRzZXQgY2xhc3M9XCJ2anMtZmctY29sb3IgdmpzLXRyYWNrLXNldHRpbmdcIj4nLCc8bGVnZW5kIGlkPVwiJytlKydcIj4nLHRoaXMubG9jYWxpemUoXCJUZXh0XCIpLFwiPC9sZWdlbmQ+XCIsdGhpcy5jcmVhdGVFbFNlbGVjdF8oXCJjb2xvclwiLGUpLCc8c3BhbiBjbGFzcz1cInZqcy10ZXh0LW9wYWNpdHkgdmpzLW9wYWNpdHlcIj4nLHRoaXMuY3JlYXRlRWxTZWxlY3RfKFwidGV4dE9wYWNpdHlcIixlKSxcIjwvc3Bhbj5cIixcIjwvZmllbGRzZXQ+XCJdLmpvaW4oXCJcIil9LHQuY3JlYXRlRWxCZ0NvbG9yXz1mdW5jdGlvbigpe3ZhciBlPVwiY2FwdGlvbnMtYmFja2dyb3VuZC1cIit0aGlzLmlkXztyZXR1cm5bJzxmaWVsZHNldCBjbGFzcz1cInZqcy1iZy1jb2xvciB2anMtdHJhY2stc2V0dGluZ1wiPicsJzxsZWdlbmQgaWQ9XCInK2UrJ1wiPicsdGhpcy5sb2NhbGl6ZShcIkJhY2tncm91bmRcIiksXCI8L2xlZ2VuZD5cIix0aGlzLmNyZWF0ZUVsU2VsZWN0XyhcImJhY2tncm91bmRDb2xvclwiLGUpLCc8c3BhbiBjbGFzcz1cInZqcy1iZy1vcGFjaXR5IHZqcy1vcGFjaXR5XCI+Jyx0aGlzLmNyZWF0ZUVsU2VsZWN0XyhcImJhY2tncm91bmRPcGFjaXR5XCIsZSksXCI8L3NwYW4+XCIsXCI8L2ZpZWxkc2V0PlwiXS5qb2luKFwiXCIpfSx0LmNyZWF0ZUVsV2luQ29sb3JfPWZ1bmN0aW9uKCl7dmFyIGU9XCJjYXB0aW9ucy13aW5kb3ctXCIrdGhpcy5pZF87cmV0dXJuWyc8ZmllbGRzZXQgY2xhc3M9XCJ2anMtd2luZG93LWNvbG9yIHZqcy10cmFjay1zZXR0aW5nXCI+JywnPGxlZ2VuZCBpZD1cIicrZSsnXCI+Jyx0aGlzLmxvY2FsaXplKFwiV2luZG93XCIpLFwiPC9sZWdlbmQ+XCIsdGhpcy5jcmVhdGVFbFNlbGVjdF8oXCJ3aW5kb3dDb2xvclwiLGUpLCc8c3BhbiBjbGFzcz1cInZqcy13aW5kb3ctb3BhY2l0eSB2anMtb3BhY2l0eVwiPicsdGhpcy5jcmVhdGVFbFNlbGVjdF8oXCJ3aW5kb3dPcGFjaXR5XCIsZSksXCI8L3NwYW4+XCIsXCI8L2ZpZWxkc2V0PlwiXS5qb2luKFwiXCIpfSx0LmNyZWF0ZUVsQ29sb3JzXz1mdW5jdGlvbigpe3JldHVybiB4KFwiZGl2XCIse2NsYXNzTmFtZTpcInZqcy10cmFjay1zZXR0aW5ncy1jb2xvcnNcIixpbm5lckhUTUw6W3RoaXMuY3JlYXRlRWxGZ0NvbG9yXygpLHRoaXMuY3JlYXRlRWxCZ0NvbG9yXygpLHRoaXMuY3JlYXRlRWxXaW5Db2xvcl8oKV0uam9pbihcIlwiKX0pfSx0LmNyZWF0ZUVsRm9udF89ZnVuY3Rpb24oKXtyZXR1cm4geChcImRpdlwiLHtjbGFzc05hbWU6XCJ2anMtdHJhY2stc2V0dGluZ3MtZm9udFwiLGlubmVySFRNTDpbJzxmaWVsZHNldCBjbGFzcz1cInZqcy1mb250LXBlcmNlbnQgdmpzLXRyYWNrLXNldHRpbmdcIj4nLHRoaXMuY3JlYXRlRWxTZWxlY3RfKFwiZm9udFBlcmNlbnRcIixcIlwiLFwibGVnZW5kXCIpLFwiPC9maWVsZHNldD5cIiwnPGZpZWxkc2V0IGNsYXNzPVwidmpzLWVkZ2Utc3R5bGUgdmpzLXRyYWNrLXNldHRpbmdcIj4nLHRoaXMuY3JlYXRlRWxTZWxlY3RfKFwiZWRnZVN0eWxlXCIsXCJcIixcImxlZ2VuZFwiKSxcIjwvZmllbGRzZXQ+XCIsJzxmaWVsZHNldCBjbGFzcz1cInZqcy1mb250LWZhbWlseSB2anMtdHJhY2stc2V0dGluZ1wiPicsdGhpcy5jcmVhdGVFbFNlbGVjdF8oXCJmb250RmFtaWx5XCIsXCJcIixcImxlZ2VuZFwiKSxcIjwvZmllbGRzZXQ+XCJdLmpvaW4oXCJcIil9KX0sdC5jcmVhdGVFbENvbnRyb2xzXz1mdW5jdGlvbigpe3ZhciBlPXRoaXMubG9jYWxpemUoXCJyZXN0b3JlIGFsbCBzZXR0aW5ncyB0byB0aGUgZGVmYXVsdCB2YWx1ZXNcIik7cmV0dXJuIHgoXCJkaXZcIix7Y2xhc3NOYW1lOlwidmpzLXRyYWNrLXNldHRpbmdzLWNvbnRyb2xzXCIsaW5uZXJIVE1MOlsnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJ2anMtZGVmYXVsdC1idXR0b25cIiB0aXRsZT1cIicrZSsnXCI+Jyx0aGlzLmxvY2FsaXplKFwiUmVzZXRcIiksJzxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPiAnK2UrXCI8L3NwYW4+XCIsXCI8L2J1dHRvbj5cIiwnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJ2anMtZG9uZS1idXR0b25cIj4nK3RoaXMubG9jYWxpemUoXCJEb25lXCIpK1wiPC9idXR0b24+XCJdLmpvaW4oXCJcIil9KX0sdC5jb250ZW50PWZ1bmN0aW9uKCl7cmV0dXJuW3RoaXMuY3JlYXRlRWxDb2xvcnNfKCksdGhpcy5jcmVhdGVFbEZvbnRfKCksdGhpcy5jcmVhdGVFbENvbnRyb2xzXygpXX0sdC5sYWJlbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmxvY2FsaXplKFwiQ2FwdGlvbiBTZXR0aW5ncyBEaWFsb2dcIil9LHQuZGVzY3JpcHRpb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sb2NhbGl6ZShcIkJlZ2lubmluZyBvZiBkaWFsb2cgd2luZG93LiBFc2NhcGUgd2lsbCBjYW5jZWwgYW5kIGNsb3NlIHRoZSB3aW5kb3cuXCIpfSx0LmJ1aWxkQ1NTQ2xhc3M9ZnVuY3Rpb24oKXtyZXR1cm4gaS5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpK1wiIHZqcy10ZXh0LXRyYWNrLXNldHRpbmdzXCJ9LHQuZ2V0VmFsdWVzPWZ1bmN0aW9uKCl7dmFyIG4saSxlLG89dGhpcztyZXR1cm4gaT1mdW5jdGlvbihlLHQsbil7dmFyIGkscixzPShpPW8uJCh0LnNlbGVjdG9yKSxyPXQucGFyc2VyLG9yKGkub3B0aW9uc1tpLm9wdGlvbnMuc2VsZWN0ZWRJbmRleF0udmFsdWUscikpO3JldHVybiB2b2lkIDAhPT1zJiYoZVtuXT1zKSxlfSx2b2lkIDA9PT0oZT17fSkmJihlPTApLHIobj1zcikucmVkdWNlKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGkoZSxuW3RdLHQpfSxlKX0sdC5zZXRWYWx1ZXM9ZnVuY3Rpb24obil7dmFyIGk9dGhpczthKHNyLGZ1bmN0aW9uKGUsdCl7IWZ1bmN0aW9uKGUsdCxuKXtpZih0KWZvcih2YXIgaT0wO2k8ZS5vcHRpb25zLmxlbmd0aDtpKyspaWYob3IoZS5vcHRpb25zW2ldLnZhbHVlLG4pPT09dCl7ZS5zZWxlY3RlZEluZGV4PWk7YnJlYWt9fShpLiQoZS5zZWxlY3Rvciksblt0XSxlLnBhcnNlcil9KX0sdC5zZXREZWZhdWx0cz1mdW5jdGlvbigpe3ZhciBuPXRoaXM7YShzcixmdW5jdGlvbihlKXt2YXIgdD1lLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFwiKT9lLmRlZmF1bHQ6MDtuLiQoZS5zZWxlY3Rvcikuc2VsZWN0ZWRJbmRleD10fSl9LHQucmVzdG9yZVNldHRpbmdzPWZ1bmN0aW9uKCl7dmFyIGU7dHJ5e2U9SlNPTi5wYXJzZShoLmxvY2FsU3RvcmFnZS5nZXRJdGVtKFhpKSl9Y2F0Y2goZSl7Zy53YXJuKGUpfWUmJnRoaXMuc2V0VmFsdWVzKGUpfSx0LnNhdmVTZXR0aW5ncz1mdW5jdGlvbigpe2lmKHRoaXMub3B0aW9uc18ucGVyc2lzdFRleHRUcmFja1NldHRpbmdzKXt2YXIgZT10aGlzLmdldFZhbHVlcygpO3RyeXtPYmplY3Qua2V5cyhlKS5sZW5ndGg/aC5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShYaSxKU09OLnN0cmluZ2lmeShlKSk6aC5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShYaSl9Y2F0Y2goZSl7Zy53YXJuKGUpfX19LHQudXBkYXRlRGlzcGxheT1mdW5jdGlvbigpe3ZhciBlPXRoaXMucGxheWVyXy5nZXRDaGlsZChcInRleHRUcmFja0Rpc3BsYXlcIik7ZSYmZS51cGRhdGVEaXNwbGF5KCl9LHQuY29uZGl0aW9uYWxCbHVyXz1mdW5jdGlvbigpe3RoaXMucHJldmlvdXNseUFjdGl2ZUVsXz1udWxsLHRoaXMub2ZmKGQsXCJrZXlkb3duXCIsdGhpcy5oYW5kbGVLZXlEb3duKTt2YXIgZT10aGlzLnBsYXllcl8uY29udHJvbEJhcix0PWUmJmUuc3Vic0NhcHNCdXR0b24sbj1lJiZlLmNhcHRpb25zQnV0dG9uO3Q/dC5mb2N1cygpOm4mJm4uZm9jdXMoKX0sZX0oTHQpO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiVGV4dFRyYWNrU2V0dGluZ3NcIixhcik7dmFyIGxyPWZ1bmN0aW9uKHMpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbixpPXQuUmVzaXplT2JzZXJ2ZXJ8fGguUmVzaXplT2JzZXJ2ZXI7bnVsbD09PXQuUmVzaXplT2JzZXJ2ZXImJihpPSExKTt2YXIgcj1SZSh7Y3JlYXRlRWw6IWkscmVwb3J0VG91Y2hBY3Rpdml0eTohMX0sdCk7cmV0dXJuKG49cy5jYWxsKHRoaXMsZSxyKXx8dGhpcykuUmVzaXplT2JzZXJ2ZXI9dC5SZXNpemVPYnNlcnZlcnx8aC5SZXNpemVPYnNlcnZlcixuLmxvYWRMaXN0ZW5lcl89bnVsbCxuLnJlc2l6ZU9ic2VydmVyXz1udWxsLG4uZGVib3VuY2VkSGFuZGxlcl89ZnVuY3Rpb24oaSxyLHMsbyl7dmFyIGE7dm9pZCAwPT09byYmKG89aCk7dmFyIGU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9YXJndW1lbnRzLG49ZnVuY3Rpb24oKXtuPWE9bnVsbCxzfHxpLmFwcGx5KGUsdCl9OyFhJiZzJiZpLmFwcGx5KGUsdCksby5jbGVhclRpbWVvdXQoYSksYT1vLnNldFRpbWVvdXQobixyKX07cmV0dXJuIGUuY2FuY2VsPWZ1bmN0aW9uKCl7by5jbGVhclRpbWVvdXQoYSksYT1udWxsfSxlfShmdW5jdGlvbigpe24ucmVzaXplSGFuZGxlcigpfSwxMDAsITEsdih2KG4pKSksaT8obi5yZXNpemVPYnNlcnZlcl89bmV3IG4uUmVzaXplT2JzZXJ2ZXIobi5kZWJvdW5jZWRIYW5kbGVyXyksbi5yZXNpemVPYnNlcnZlcl8ub2JzZXJ2ZShlLmVsKCkpKToobi5sb2FkTGlzdGVuZXJfPWZ1bmN0aW9uKCl7aWYobi5lbF8mJm4uZWxfLmNvbnRlbnRXaW5kb3cpe3ZhciBlPW4uZGVib3VuY2VkSGFuZGxlcl8sdD1uLnVubG9hZExpc3RlbmVyXz1mdW5jdGlvbigpe2RlKHRoaXMsXCJyZXNpemVcIixlKSxkZSh0aGlzLFwidW5sb2FkXCIsdCksdD1udWxsfTtoZShuLmVsXy5jb250ZW50V2luZG93LFwidW5sb2FkXCIsdCksaGUobi5lbF8uY29udGVudFdpbmRvdyxcInJlc2l6ZVwiLGUpfX0sbi5vbmUoXCJsb2FkXCIsbi5sb2FkTGlzdGVuZXJfKSksbn1mKGUscyk7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY3JlYXRlRWw9ZnVuY3Rpb24oKXtyZXR1cm4gcy5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiaWZyYW1lXCIse2NsYXNzTmFtZTpcInZqcy1yZXNpemUtbWFuYWdlclwiLHRhYkluZGV4Oi0xfSx7XCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwifSl9LHQucmVzaXplSGFuZGxlcj1mdW5jdGlvbigpe3RoaXMucGxheWVyXyYmdGhpcy5wbGF5ZXJfLnRyaWdnZXImJnRoaXMucGxheWVyXy50cmlnZ2VyKFwicGxheWVycmVzaXplXCIpfSx0LmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmRlYm91bmNlZEhhbmRsZXJfJiZ0aGlzLmRlYm91bmNlZEhhbmRsZXJfLmNhbmNlbCgpLHRoaXMucmVzaXplT2JzZXJ2ZXJfJiYodGhpcy5wbGF5ZXJfLmVsKCkmJnRoaXMucmVzaXplT2JzZXJ2ZXJfLnVub2JzZXJ2ZSh0aGlzLnBsYXllcl8uZWwoKSksdGhpcy5yZXNpemVPYnNlcnZlcl8uZGlzY29ubmVjdCgpKSx0aGlzLmxvYWRMaXN0ZW5lcl8mJnRoaXMub2ZmKFwibG9hZFwiLHRoaXMubG9hZExpc3RlbmVyXyksdGhpcy5lbF8mJnRoaXMuZWxfLmNvbnRlbnRXaW5kb3cmJnRoaXMudW5sb2FkTGlzdGVuZXJfJiZ0aGlzLnVubG9hZExpc3RlbmVyXy5jYWxsKHRoaXMuZWxfLmNvbnRlbnRXaW5kb3cpLHRoaXMuUmVzaXplT2JzZXJ2ZXI9bnVsbCx0aGlzLnJlc2l6ZU9ic2VydmVyPW51bGwsdGhpcy5kZWJvdW5jZWRIYW5kbGVyXz1udWxsLHRoaXMubG9hZExpc3RlbmVyXz1udWxsLHMucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKX0sZX0oQmUpO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiUmVzaXplTWFuYWdlclwiLGxyKTt2YXIgY3I9ZnVuY3Rpb24ocil7ZnVuY3Rpb24gZShlLHQpe3ZhciBuLGk9UmUoe2NyZWF0ZUVsOiExfSx0KTtyZXR1cm4obj1yLmNhbGwodGhpcyxlLGkpfHx0aGlzKS5yZXNldF8oKSxuLm9uKG4ucGxheWVyXyxcImR1cmF0aW9uY2hhbmdlXCIsbi5oYW5kbGVEdXJhdGlvbmNoYW5nZSksc3QmJlwiaGlkZGVuXCJpbiBkJiZcInZpc2liaWxpdHlTdGF0ZVwiaW4gZCYmbi5vbihkLFwidmlzaWJpbGl0eWNoYW5nZVwiLG4uaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSksbn1mKGUscik7dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaGFuZGxlVmlzaWJpbGl0eUNoYW5nZT1mdW5jdGlvbigpe3RoaXMucGxheWVyXy5kdXJhdGlvbigpPT09MS8wJiYoZC5oaWRkZW4/dGhpcy5zdG9wVHJhY2tpbmcoKTp0aGlzLnN0YXJ0VHJhY2tpbmcoKSl9LHQuaXNCZWhpbmRfPWZ1bmN0aW9uKCl7aWYoIXRoaXMudGltZXVwZGF0ZVNlZW5fKXJldHVybiExO3ZhciBlPXRoaXMubGl2ZUN1cnJlbnRUaW1lKCksdD10aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKSxuPXRoaXMuc2Vla2FibGVJbmNyZW1lbnRfO3JldHVybiBlIT09MS8wJiZ0PD1lLSgyKm4rLjA3KX0sdC50cmFja0xpdmVfPWZ1bmN0aW9uKCl7dGhpcy5wYXN0U2Vla0VuZF89dGhpcy5wYXN0U2Vla0VuZF87dmFyIGU9dGhpcy5wbGF5ZXJfLnNlZWthYmxlKCk7aWYoZSYmZS5sZW5ndGgpe3ZhciB0PXRoaXMuc2Vla2FibGVFbmQoKTt0IT09dGhpcy5sYXN0U2Vla0VuZF8mJih0aGlzLmxhc3RTZWVrRW5kXyYmKHRoaXMuc2Vla2FibGVJbmNyZW1lbnRfPU1hdGguYWJzKHQtdGhpcy5sYXN0U2Vla0VuZF8pKSx0aGlzLnBhc3RTZWVrRW5kXz0wLHRoaXMubGFzdFNlZWtFbmRfPXQsdGhpcy50cmlnZ2VyKFwic2Vla2FibGVlbmRjaGFuZ2VcIikpLHRoaXMucGFzdFNlZWtFbmRfPXRoaXMucGFzdFNlZWtFbmQoKSsuMDMsdGhpcy5pc0JlaGluZF8oKSE9PXRoaXMuYmVoaW5kTGl2ZUVkZ2UoKSYmKHRoaXMuYmVoaW5kTGl2ZUVkZ2VfPXRoaXMuaXNCZWhpbmRfKCksdGhpcy50cmlnZ2VyKFwibGl2ZWVkZ2VjaGFuZ2VcIikpfX0sdC5oYW5kbGVEdXJhdGlvbmNoYW5nZT1mdW5jdGlvbigpe3RoaXMucGxheWVyXy5kdXJhdGlvbigpPT09MS8wP3RoaXMuc3RhcnRUcmFja2luZygpOnRoaXMuc3RvcFRyYWNraW5nKCl9LHQuc3RhcnRUcmFja2luZz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5pc1RyYWNraW5nKCl8fCh0aGlzLnRyYWNraW5nSW50ZXJ2YWxfPXRoaXMuc2V0SW50ZXJ2YWwodGhpcy50cmFja0xpdmVfLDMwKSx0aGlzLnRyYWNrTGl2ZV8oKSx0aGlzLm9uKHRoaXMucGxheWVyXyxcInBsYXlcIix0aGlzLnRyYWNrTGl2ZV8pLHRoaXMub24odGhpcy5wbGF5ZXJfLFwicGF1c2VcIix0aGlzLnRyYWNrTGl2ZV8pLHRoaXMub25lKHRoaXMucGxheWVyXyxcInBsYXlcIix0aGlzLmhhbmRsZVBsYXkpLHRoaXMudGltZXVwZGF0ZVNlZW5ffHwodGhpcy5oYW5kbGVUaW1ldXBkYXRlPWZ1bmN0aW9uKCl7ZS50aW1ldXBkYXRlU2Vlbl89ITAsZS5oYW5kbGVUaW1ldXBkYXRlPW51bGx9LHRoaXMub25lKHRoaXMucGxheWVyXyxcInRpbWV1cGRhdGVcIix0aGlzLmhhbmRsZVRpbWV1cGRhdGUpKSl9LHQuaGFuZGxlUGxheT1mdW5jdGlvbigpe3RoaXMub25lKHRoaXMucGxheWVyXyxcInRpbWV1cGRhdGVcIix0aGlzLnNlZWtUb0xpdmVFZGdlKX0sdC5yZXNldF89ZnVuY3Rpb24oKXt0aGlzLnBhc3RTZWVrRW5kXz0wLHRoaXMubGFzdFNlZWtFbmRfPW51bGwsdGhpcy5iZWhpbmRMaXZlRWRnZV89bnVsbCx0aGlzLnRpbWV1cGRhdGVTZWVuXz0hMSx0aGlzLmNsZWFySW50ZXJ2YWwodGhpcy50cmFja2luZ0ludGVydmFsXyksdGhpcy50cmFja2luZ0ludGVydmFsXz1udWxsLHRoaXMuc2Vla2FibGVJbmNyZW1lbnRfPTEyLHRoaXMub2ZmKHRoaXMucGxheWVyXyxcInBsYXlcIix0aGlzLnRyYWNrTGl2ZV8pLHRoaXMub2ZmKHRoaXMucGxheWVyXyxcInBhdXNlXCIsdGhpcy50cmFja0xpdmVfKSx0aGlzLm9mZih0aGlzLnBsYXllcl8sXCJwbGF5XCIsdGhpcy5oYW5kbGVQbGF5KSx0aGlzLm9mZih0aGlzLnBsYXllcl8sXCJ0aW1ldXBkYXRlXCIsdGhpcy5zZWVrVG9MaXZlRWRnZSksdGhpcy5oYW5kbGVUaW1ldXBkYXRlJiYodGhpcy5vZmYodGhpcy5wbGF5ZXJfLFwidGltZXVwZGF0ZVwiLHRoaXMuaGFuZGxlVGltZXVwZGF0ZSksdGhpcy5oYW5kbGVUaW1ldXBkYXRlPW51bGwpfSx0LnN0b3BUcmFja2luZz1mdW5jdGlvbigpe3RoaXMuaXNUcmFja2luZygpJiZ0aGlzLnJlc2V0XygpfSx0LnNlZWthYmxlRW5kPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMucGxheWVyXy5zZWVrYWJsZSgpLHQ9W10sbj1lP2UubGVuZ3RoOjA7bi0tOyl0LnB1c2goZS5lbmQobikpO3JldHVybiB0Lmxlbmd0aD90LnNvcnQoKVt0Lmxlbmd0aC0xXToxLzB9LHQuc2Vla2FibGVTdGFydD1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLnBsYXllcl8uc2Vla2FibGUoKSx0PVtdLG49ZT9lLmxlbmd0aDowO24tLTspdC5wdXNoKGUuc3RhcnQobikpO3JldHVybiB0Lmxlbmd0aD90LnNvcnQoKVswXTowfSx0LmxpdmVXaW5kb3c9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxpdmVDdXJyZW50VGltZSgpO3JldHVybiBlPT09MS8wPzEvMDplLXRoaXMuc2Vla2FibGVTdGFydCgpfSx0LmlzTGl2ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzVHJhY2tpbmcoKX0sdC5hdExpdmVFZGdlPWZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuYmVoaW5kTGl2ZUVkZ2UoKX0sdC5saXZlQ3VycmVudFRpbWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXN0U2Vla0VuZCgpK3RoaXMuc2Vla2FibGVFbmQoKX0sdC5wYXN0U2Vla0VuZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBhc3RTZWVrRW5kX30sdC5iZWhpbmRMaXZlRWRnZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmJlaGluZExpdmVFZGdlX30sdC5pc1RyYWNraW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIHRoaXMudHJhY2tpbmdJbnRlcnZhbF99LHQuc2Vla1RvTGl2ZUVkZ2U9ZnVuY3Rpb24oKXt0aGlzLmF0TGl2ZUVkZ2UoKXx8KHRoaXMucGxheWVyXy5jdXJyZW50VGltZSh0aGlzLmxpdmVDdXJyZW50VGltZSgpKSx0aGlzLnBsYXllcl8ucGF1c2VkKCkmJnRoaXMucGxheWVyXy5wbGF5KCkpfSx0LmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLnN0b3BUcmFja2luZygpLHIucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKX0sZX0oQmUpO0JlLnJlZ2lzdGVyQ29tcG9uZW50KFwiTGl2ZVRyYWNrZXJcIixjcik7dmFyIHVyPWZ1bmN0aW9uKGUpe3ZhciB0PWUuZWwoKTtpZih0Lmhhc0F0dHJpYnV0ZShcInNyY1wiKSlyZXR1cm4gZS50cmlnZ2VyU291cmNlc2V0KHQuc3JjKSwhMDt2YXIgbj1lLiQkKFwic291cmNlXCIpLGk9W10scj1cIlwiO2lmKCFuLmxlbmd0aClyZXR1cm4hMTtmb3IodmFyIHM9MDtzPG4ubGVuZ3RoO3MrKyl7dmFyIG89bltzXS5zcmM7byYmLTE9PT1pLmluZGV4T2YobykmJmkucHVzaChvKX1yZXR1cm4hIWkubGVuZ3RoJiYoMT09PWkubGVuZ3RoJiYocj1pWzBdKSxlLnRyaWdnZXJTb3VyY2VzZXQociksITApfSxocj1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJpbm5lckhUTUxcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2xvbmVOb2RlKCEwKS5pbm5lckhUTUx9LHNldDpmdW5jdGlvbihlKXt2YXIgdD1kLmNyZWF0ZUVsZW1lbnQodGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKTt0LmlubmVySFRNTD1lO2Zvcih2YXIgbj1kLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTt0LmNoaWxkTm9kZXMubGVuZ3RoOyluLmFwcGVuZENoaWxkKHQuY2hpbGROb2Rlc1swXSk7cmV0dXJuIHRoaXMuaW5uZXJUZXh0PVwiXCIsaC5FbGVtZW50LnByb3RvdHlwZS5hcHBlbmRDaGlsZC5jYWxsKHRoaXMsbiksdGhpcy5pbm5lckhUTUx9fSksZHI9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49e30saT0wO2k8ZS5sZW5ndGgmJiEoKG49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlW2ldLHQpKSYmbi5zZXQmJm4uZ2V0KTtpKyspO3JldHVybiBuLmVudW1lcmFibGU9ITAsbi5jb25maWd1cmFibGU9ITAsbn0scHI9ZnVuY3Rpb24ocyl7dmFyIG89cy5lbCgpO2lmKCFvLnJlc2V0U291cmNlV2F0Y2hfKXt2YXIgdD17fSxlPWRyKFtzLmVsKCksaC5IVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZSxoLkVsZW1lbnQucHJvdG90eXBlLGhyXSxcImlubmVySFRNTFwiKSxuPWZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLG49MDtuPGU7bisrKXRbbl09YXJndW1lbnRzW25dO3ZhciBpPXIuYXBwbHkobyx0KTtyZXR1cm4gdXIocyksaX19O1tcImFwcGVuZFwiLFwiYXBwZW5kQ2hpbGRcIixcImluc2VydEFkamFjZW50SFRNTFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe29bZV0mJih0W2VdPW9bZV0sb1tlXT1uKHRbZV0pKX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiaW5uZXJIVE1MXCIsUmUoZSx7c2V0Om4oZS5zZXQpfSkpLG8ucmVzZXRTb3VyY2VXYXRjaF89ZnVuY3Rpb24oKXtvLnJlc2V0U291cmNlV2F0Y2hfPW51bGwsT2JqZWN0LmtleXModCkuZm9yRWFjaChmdW5jdGlvbihlKXtvW2VdPXRbZV19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcImlubmVySFRNTFwiLGUpfSxzLm9uZShcInNvdXJjZXNldFwiLG8ucmVzZXRTb3VyY2VXYXRjaF8pfX0sZnI9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwic3JjXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhhc0F0dHJpYnV0ZShcInNyY1wiKT8kdChoLkVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZS5jYWxsKHRoaXMsXCJzcmNcIikpOlwiXCJ9LHNldDpmdW5jdGlvbihlKXtyZXR1cm4gaC5FbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGUuY2FsbCh0aGlzLFwic3JjXCIsZSksZX19KSx2cj1mdW5jdGlvbihpKXtpZihpLmZlYXR1cmVzU291cmNlc2V0KXt2YXIgcj1pLmVsKCk7aWYoIXIucmVzZXRTb3VyY2VzZXRfKXt2YXIgbj1kcihbaS5lbCgpLGguSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUsZnJdLFwic3JjXCIpLHM9ci5zZXRBdHRyaWJ1dGUsdD1yLmxvYWQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJzcmNcIixSZShuLHtzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9bi5zZXQuY2FsbChyLGUpO3JldHVybiBpLnRyaWdnZXJTb3VyY2VzZXQoci5zcmMpLHR9fSkpLHIuc2V0QXR0cmlidXRlPWZ1bmN0aW9uKGUsdCl7dmFyIG49cy5jYWxsKHIsZSx0KTtyZXR1cm4vc3JjL2kudGVzdChlKSYmaS50cmlnZ2VyU291cmNlc2V0KHIuc3JjKSxufSxyLmxvYWQ9ZnVuY3Rpb24oKXt2YXIgZT10LmNhbGwocik7cmV0dXJuIHVyKGkpfHwoaS50cmlnZ2VyU291cmNlc2V0KFwiXCIpLHByKGkpKSxlfSxyLmN1cnJlbnRTcmM/aS50cmlnZ2VyU291cmNlc2V0KHIuY3VycmVudFNyYyk6dXIoaSl8fHByKGkpLHIucmVzZXRTb3VyY2VzZXRfPWZ1bmN0aW9uKCl7ci5yZXNldFNvdXJjZXNldF89bnVsbCxyLmxvYWQ9dCxyLnNldEF0dHJpYnV0ZT1zLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwic3JjXCIsbiksci5yZXNldFNvdXJjZVdhdGNoXyYmci5yZXNldFNvdXJjZVdhdGNoXygpfX19fTtmdW5jdGlvbiBncigpe3ZhciBlPXQoW1wiVGV4dCBUcmFja3MgYXJlIGJlaW5nIGxvYWRlZCBmcm9tIGFub3RoZXIgb3JpZ2luIGJ1dCB0aGUgY3Jvc3NvcmlnaW4gYXR0cmlidXRlIGlzbid0IHVzZWQuXFxuICAgICAgICAgICAgVGhpcyBtYXkgcHJldmVudCB0ZXh0IHRyYWNrcyBmcm9tIGxvYWRpbmcuXCJdKTtyZXR1cm4gZ3I9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sZX12YXIgeXI9ZnVuY3Rpb24odSl7ZnVuY3Rpb24gYShlLHQpe3ZhciBuO249dS5jYWxsKHRoaXMsZSx0KXx8dGhpczt2YXIgaT1lLnNvdXJjZSxyPSExO2lmKGkmJihuLmVsXy5jdXJyZW50U3JjIT09aS5zcmN8fGUudGFnJiYzPT09ZS50YWcuaW5pdE5ldHdvcmtTdGF0ZV8pP24uc2V0U291cmNlKGkpOm4uaGFuZGxlTGF0ZUluaXRfKG4uZWxfKSxlLmVuYWJsZVNvdXJjZXNldCYmbi5zZXR1cFNvdXJjZXNldEhhbmRsaW5nXygpLG4uZWxfLmhhc0NoaWxkTm9kZXMoKSl7Zm9yKHZhciBzPW4uZWxfLmNoaWxkTm9kZXMsbz1zLmxlbmd0aCxhPVtdO28tLTspe3ZhciBsPXNbb107XCJ0cmFja1wiPT09bC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiYobi5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3M/KG4ucmVtb3RlVGV4dFRyYWNrRWxzKCkuYWRkVHJhY2tFbGVtZW50XyhsKSxuLnJlbW90ZVRleHRUcmFja3MoKS5hZGRUcmFjayhsLnRyYWNrKSxuLnRleHRUcmFja3MoKS5hZGRUcmFjayhsLnRyYWNrKSxyfHxuLmVsXy5oYXNBdHRyaWJ1dGUoXCJjcm9zc29yaWdpblwiKXx8IVl0KGwuc3JjKXx8KHI9ITApKTphLnB1c2gobCkpfWZvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKW4uZWxfLnJlbW92ZUNoaWxkKGFbY10pfXJldHVybiBuLnByb3h5TmF0aXZlVHJhY2tzXygpLG4uZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzJiZyJiZnLndhcm4oXyhncigpKSksbi5yZXN0b3JlTWV0YWRhdGFUcmFja3NJbklPU05hdGl2ZVBsYXllcl8oKSwobHR8fCRlfHxldCkmJiEwPT09ZS5uYXRpdmVDb250cm9sc0ZvclRvdWNoJiZuLnNldENvbnRyb2xzKCEwKSxuLnByb3h5V2Via2l0RnVsbHNjcmVlbl8oKSxuLnRyaWdnZXJSZWFkeSgpLG59ZihhLHUpO3ZhciBlPWEucHJvdG90eXBlO3JldHVybiBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmVsXyYmdGhpcy5lbF8ucmVzZXRTb3VyY2VzZXRfJiZ0aGlzLmVsXy5yZXNldFNvdXJjZXNldF8oKSxhLmRpc3Bvc2VNZWRpYUVsZW1lbnQodGhpcy5lbF8pLHRoaXMub3B0aW9uc189bnVsbCx1LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyl9LGUuc2V0dXBTb3VyY2VzZXRIYW5kbGluZ189ZnVuY3Rpb24oKXt2cih0aGlzKX0sZS5yZXN0b3JlTWV0YWRhdGFUcmFja3NJbklPU05hdGl2ZVBsYXllcl89ZnVuY3Rpb24oKXt2YXIgaSxyPXRoaXMudGV4dFRyYWNrcygpLGU9ZnVuY3Rpb24oKXtpPVtdO2Zvcih2YXIgZT0wO2U8ci5sZW5ndGg7ZSsrKXt2YXIgdD1yW2VdO1wibWV0YWRhdGFcIj09PXQua2luZCYmaS5wdXNoKHt0cmFjazp0LHN0b3JlZE1vZGU6dC5tb2RlfSl9fTtlKCksci5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsZSksdGhpcy5vbihcImRpc3Bvc2VcIixmdW5jdGlvbigpe3JldHVybiByLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIixlKX0pO3ZhciB0PWZ1bmN0aW9uIGUoKXtmb3IodmFyIHQ9MDt0PGkubGVuZ3RoO3QrKyl7dmFyIG49aVt0XTtcImRpc2FibGVkXCI9PT1uLnRyYWNrLm1vZGUmJm4udHJhY2subW9kZSE9PW4uc3RvcmVkTW9kZSYmKG4udHJhY2subW9kZT1uLnN0b3JlZE1vZGUpfXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLGUpfTt0aGlzLm9uKFwid2Via2l0YmVnaW5mdWxsc2NyZWVuXCIsZnVuY3Rpb24oKXtyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIixlKSxyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIix0KSxyLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIix0KX0pLHRoaXMub24oXCJ3ZWJraXRlbmRmdWxsc2NyZWVuXCIsZnVuY3Rpb24oKXtyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIixlKSxyLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIixlKSxyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIix0KX0pfSxlLm92ZXJyaWRlTmF0aXZlXz1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7aWYodD09PXRoaXNbXCJmZWF0dXJlc05hdGl2ZVwiK2UrXCJUcmFja3NcIl0pe3ZhciBpPWUudG9Mb3dlckNhc2UoKTt0aGlzW2krXCJUcmFja3NMaXN0ZW5lcnNfXCJdJiZPYmplY3Qua2V5cyh0aGlzW2krXCJUcmFja3NMaXN0ZW5lcnNfXCJdKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe24uZWwoKVtpK1wiVHJhY2tzXCJdLnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxuW2krXCJUcmFja3NMaXN0ZW5lcnNfXCJdW2VdKX0pLHRoaXNbXCJmZWF0dXJlc05hdGl2ZVwiK2UrXCJUcmFja3NcIl09IXQsdGhpc1tpK1wiVHJhY2tzTGlzdGVuZXJzX1wiXT1udWxsLHRoaXMucHJveHlOYXRpdmVUcmFja3NGb3JUeXBlXyhpKX19LGUub3ZlcnJpZGVOYXRpdmVBdWRpb1RyYWNrcz1mdW5jdGlvbihlKXt0aGlzLm92ZXJyaWRlTmF0aXZlXyhcIkF1ZGlvXCIsZSl9LGUub3ZlcnJpZGVOYXRpdmVWaWRlb1RyYWNrcz1mdW5jdGlvbihlKXt0aGlzLm92ZXJyaWRlTmF0aXZlXyhcIlZpZGVvXCIsZSl9LGUucHJveHlOYXRpdmVUcmFja3NGb3JUeXBlXz1mdW5jdGlvbihlKXt2YXIgaT10aGlzLHQ9Q25bZV0scj10aGlzLmVsKClbdC5nZXR0ZXJOYW1lXSxzPXRoaXNbdC5nZXR0ZXJOYW1lXSgpO2lmKHRoaXNbXCJmZWF0dXJlc05hdGl2ZVwiK3QuY2FwaXRhbE5hbWUrXCJUcmFja3NcIl0mJnImJnIuYWRkRXZlbnRMaXN0ZW5lcil7dmFyIG89e2NoYW5nZTpmdW5jdGlvbihlKXtzLnRyaWdnZXIoe3R5cGU6XCJjaGFuZ2VcIix0YXJnZXQ6cyxjdXJyZW50VGFyZ2V0OnMsc3JjRWxlbWVudDpzfSl9LGFkZHRyYWNrOmZ1bmN0aW9uKGUpe3MuYWRkVHJhY2soZS50cmFjayl9LHJlbW92ZXRyYWNrOmZ1bmN0aW9uKGUpe3MucmVtb3ZlVHJhY2soZS50cmFjayl9fSxuPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PHMubGVuZ3RoO3QrKyl7Zm9yKHZhciBuPSExLGk9MDtpPHIubGVuZ3RoO2krKylpZihyW2ldPT09c1t0XSl7bj0hMDticmVha31ufHxlLnB1c2goc1t0XSl9Zm9yKDtlLmxlbmd0aDspcy5yZW1vdmVUcmFjayhlLnNoaWZ0KCkpfTt0aGlzW3QuZ2V0dGVyTmFtZStcIkxpc3RlbmVyc19cIl09byxPYmplY3Qua2V5cyhvKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBuPW9bdF07ci5hZGRFdmVudExpc3RlbmVyKHQsbiksaS5vbihcImRpc3Bvc2VcIixmdW5jdGlvbihlKXtyZXR1cm4gci5yZW1vdmVFdmVudExpc3RlbmVyKHQsbil9KX0pLHRoaXMub24oXCJsb2Fkc3RhcnRcIixuKSx0aGlzLm9uKFwiZGlzcG9zZVwiLGZ1bmN0aW9uKGUpe3JldHVybiBpLm9mZihcImxvYWRzdGFydFwiLG4pfSl9fSxlLnByb3h5TmF0aXZlVHJhY2tzXz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7Q24ubmFtZXMuZm9yRWFjaChmdW5jdGlvbihlKXt0LnByb3h5TmF0aXZlVHJhY2tzRm9yVHlwZV8oZSl9KX0sZS5jcmVhdGVFbD1mdW5jdGlvbigpe3ZhciBlPXRoaXMub3B0aW9uc18udGFnO2lmKCFlfHwhdGhpcy5vcHRpb25zXy5wbGF5ZXJFbEluZ2VzdCYmIXRoaXMubW92aW5nTWVkaWFFbGVtZW50SW5ET00pe2lmKGUpe3ZhciB0PWUuY2xvbmVOb2RlKCEwKTtlLnBhcmVudE5vZGUmJmUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCxlKSxhLmRpc3Bvc2VNZWRpYUVsZW1lbnQoZSksZT10fWVsc2V7ZT1kLmNyZWF0ZUVsZW1lbnQoXCJ2aWRlb1wiKTt2YXIgbj1SZSh7fSx0aGlzLm9wdGlvbnNfLnRhZyYmRCh0aGlzLm9wdGlvbnNfLnRhZykpO2x0JiYhMD09PXRoaXMub3B0aW9uc18ubmF0aXZlQ29udHJvbHNGb3JUb3VjaHx8ZGVsZXRlIG4uY29udHJvbHMsTyhlLG0obix7aWQ6dGhpcy5vcHRpb25zXy50ZWNoSWQsY2xhc3M6XCJ2anMtdGVjaFwifSkpfWUucGxheWVySWQ9dGhpcy5vcHRpb25zXy5wbGF5ZXJJZH1cInVuZGVmaW5lZFwiIT10eXBlb2YgdGhpcy5vcHRpb25zXy5wcmVsb2FkJiZGKGUsXCJwcmVsb2FkXCIsdGhpcy5vcHRpb25zXy5wcmVsb2FkKTtmb3IodmFyIGk9W1wibG9vcFwiLFwibXV0ZWRcIixcInBsYXlzaW5saW5lXCIsXCJhdXRvcGxheVwiXSxyPTA7cjxpLmxlbmd0aDtyKyspe3ZhciBzPWlbcl0sbz10aGlzLm9wdGlvbnNfW3NdO1widW5kZWZpbmVkXCIhPXR5cGVvZiBvJiYobz9GKGUscyxzKTpSKGUscyksZVtzXT1vKX1yZXR1cm4gZX0sZS5oYW5kbGVMYXRlSW5pdF89ZnVuY3Rpb24oZSl7aWYoMCE9PWUubmV0d29ya1N0YXRlJiYzIT09ZS5uZXR3b3JrU3RhdGUpe2lmKDA9PT1lLnJlYWR5U3RhdGUpe3ZhciB0PSExLG49ZnVuY3Rpb24oKXt0PSEwfTt0aGlzLm9uKFwibG9hZHN0YXJ0XCIsbik7dmFyIGk9ZnVuY3Rpb24oKXt0fHx0aGlzLnRyaWdnZXIoXCJsb2Fkc3RhcnRcIil9O3JldHVybiB0aGlzLm9uKFwibG9hZGVkbWV0YWRhdGFcIixpKSx2b2lkIHRoaXMucmVhZHkoZnVuY3Rpb24oKXt0aGlzLm9mZihcImxvYWRzdGFydFwiLG4pLHRoaXMub2ZmKFwibG9hZGVkbWV0YWRhdGFcIixpKSx0fHx0aGlzLnRyaWdnZXIoXCJsb2Fkc3RhcnRcIil9KX12YXIgcj1bXCJsb2Fkc3RhcnRcIl07ci5wdXNoKFwibG9hZGVkbWV0YWRhdGFcIiksMjw9ZS5yZWFkeVN0YXRlJiZyLnB1c2goXCJsb2FkZWRkYXRhXCIpLDM8PWUucmVhZHlTdGF0ZSYmci5wdXNoKFwiY2FucGxheVwiKSw0PD1lLnJlYWR5U3RhdGUmJnIucHVzaChcImNhbnBsYXl0aHJvdWdoXCIpLHRoaXMucmVhZHkoZnVuY3Rpb24oKXtyLmZvckVhY2goZnVuY3Rpb24oZSl7dGhpcy50cmlnZ2VyKGUpfSx0aGlzKX0pfX0sZS5zZXRDdXJyZW50VGltZT1mdW5jdGlvbihlKXt0cnl7dGhpcy5lbF8uY3VycmVudFRpbWU9ZX1jYXRjaChlKXtnKGUsXCJWaWRlbyBpcyBub3QgcmVhZHkuIChWaWRlby5qcylcIil9fSxlLmR1cmF0aW9uPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztpZih0aGlzLmVsXy5kdXJhdGlvbj09PTEvMCYmSmUmJml0JiYwPT09dGhpcy5lbF8uY3VycmVudFRpbWUpe3JldHVybiB0aGlzLm9uKFwidGltZXVwZGF0ZVwiLGZ1bmN0aW9uIGUoKXswPHQuZWxfLmN1cnJlbnRUaW1lJiYodC5lbF8uZHVyYXRpb249PT0xLzAmJnQudHJpZ2dlcihcImR1cmF0aW9uY2hhbmdlXCIpLHQub2ZmKFwidGltZXVwZGF0ZVwiLGUpKX0pLE5hTn1yZXR1cm4gdGhpcy5lbF8uZHVyYXRpb258fE5hTn0sZS53aWR0aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVsXy5vZmZzZXRXaWR0aH0sZS5oZWlnaHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbF8ub2Zmc2V0SGVpZ2h0fSxlLnByb3h5V2Via2l0RnVsbHNjcmVlbl89ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKFwid2Via2l0RGlzcGxheWluZ0Z1bGxzY3JlZW5cImluIHRoaXMuZWxfKXt2YXIgdD1mdW5jdGlvbigpe3RoaXMudHJpZ2dlcihcImZ1bGxzY3JlZW5jaGFuZ2VcIix7aXNGdWxsc2NyZWVuOiExfSl9LG49ZnVuY3Rpb24oKXtcIndlYmtpdFByZXNlbnRhdGlvbk1vZGVcImluIHRoaXMuZWxfJiZcInBpY3R1cmUtaW4tcGljdHVyZVwiIT09dGhpcy5lbF8ud2Via2l0UHJlc2VudGF0aW9uTW9kZSYmKHRoaXMub25lKFwid2Via2l0ZW5kZnVsbHNjcmVlblwiLHQpLHRoaXMudHJpZ2dlcihcImZ1bGxzY3JlZW5jaGFuZ2VcIix7aXNGdWxsc2NyZWVuOiEwfSkpfTt0aGlzLm9uKFwid2Via2l0YmVnaW5mdWxsc2NyZWVuXCIsbiksdGhpcy5vbihcImRpc3Bvc2VcIixmdW5jdGlvbigpe2Uub2ZmKFwid2Via2l0YmVnaW5mdWxsc2NyZWVuXCIsbiksZS5vZmYoXCJ3ZWJraXRlbmRmdWxsc2NyZWVuXCIsdCl9KX19LGUuc3VwcG9ydHNGdWxsU2NyZWVuPWZ1bmN0aW9uKCl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5lbF8ud2Via2l0RW50ZXJGdWxsU2NyZWVuKXt2YXIgZT1oLm5hdmlnYXRvciYmaC5uYXZpZ2F0b3IudXNlckFnZW50fHxcIlwiO2lmKC9BbmRyb2lkLy50ZXN0KGUpfHwhL0Nocm9tZXxNYWMgT1MgWCAxMC41Ly50ZXN0KGUpKXJldHVybiEwfXJldHVybiExfSxlLmVudGVyRnVsbFNjcmVlbj1mdW5jdGlvbigpe3ZhciBlPXRoaXMuZWxfO2UucGF1c2VkJiZlLm5ldHdvcmtTdGF0ZTw9ZS5IQVZFX01FVEFEQVRBPyh0aGlzLmVsXy5wbGF5KCksdGhpcy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5wYXVzZSgpLGUud2Via2l0RW50ZXJGdWxsU2NyZWVuKCl9LDApKTplLndlYmtpdEVudGVyRnVsbFNjcmVlbigpfSxlLmV4aXRGdWxsU2NyZWVuPWZ1bmN0aW9uKCl7dGhpcy5lbF8ud2Via2l0RXhpdEZ1bGxTY3JlZW4oKX0sZS5zcmM9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4gdGhpcy5lbF8uc3JjO3RoaXMuc2V0U3JjKGUpfSxlLnJlc2V0PWZ1bmN0aW9uKCl7YS5yZXNldE1lZGlhRWxlbWVudCh0aGlzLmVsXyl9LGUuY3VycmVudFNyYz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmN1cnJlbnRTb3VyY2VfP3RoaXMuY3VycmVudFNvdXJjZV8uc3JjOnRoaXMuZWxfLmN1cnJlbnRTcmN9LGUuc2V0Q29udHJvbHM9ZnVuY3Rpb24oZSl7dGhpcy5lbF8uY29udHJvbHM9ISFlfSxlLmFkZFRleHRUcmFjaz1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHRoaXMuZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzP3RoaXMuZWxfLmFkZFRleHRUcmFjayhlLHQsbik6dS5wcm90b3R5cGUuYWRkVGV4dFRyYWNrLmNhbGwodGhpcyxlLHQsbil9LGUuY3JlYXRlUmVtb3RlVGV4dFRyYWNrPWZ1bmN0aW9uKGUpe2lmKCF0aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcylyZXR1cm4gdS5wcm90b3R5cGUuY3JlYXRlUmVtb3RlVGV4dFRyYWNrLmNhbGwodGhpcyxlKTt2YXIgdD1kLmNyZWF0ZUVsZW1lbnQoXCJ0cmFja1wiKTtyZXR1cm4gZS5raW5kJiYodC5raW5kPWUua2luZCksZS5sYWJlbCYmKHQubGFiZWw9ZS5sYWJlbCksKGUubGFuZ3VhZ2V8fGUuc3JjbGFuZykmJih0LnNyY2xhbmc9ZS5sYW5ndWFnZXx8ZS5zcmNsYW5nKSxlLmRlZmF1bHQmJih0LmRlZmF1bHQ9ZS5kZWZhdWx0KSxlLmlkJiYodC5pZD1lLmlkKSxlLnNyYyYmKHQuc3JjPWUuc3JjKSx0fSxlLmFkZFJlbW90ZVRleHRUcmFjaz1mdW5jdGlvbihlLHQpe3ZhciBuPXUucHJvdG90eXBlLmFkZFJlbW90ZVRleHRUcmFjay5jYWxsKHRoaXMsZSx0KTtyZXR1cm4gdGhpcy5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3MmJnRoaXMuZWwoKS5hcHBlbmRDaGlsZChuKSxufSxlLnJlbW92ZVJlbW90ZVRleHRUcmFjaz1mdW5jdGlvbihlKXtpZih1LnByb3RvdHlwZS5yZW1vdmVSZW1vdGVUZXh0VHJhY2suY2FsbCh0aGlzLGUpLHRoaXMuZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzKWZvcih2YXIgdD10aGlzLiQkKFwidHJhY2tcIiksbj10Lmxlbmd0aDtuLS07KWUhPT10W25dJiZlIT09dFtuXS50cmFja3x8dGhpcy5lbCgpLnJlbW92ZUNoaWxkKHRbbl0pfSxlLmdldFZpZGVvUGxheWJhY2tRdWFsaXR5PWZ1bmN0aW9uKCl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5lbCgpLmdldFZpZGVvUGxheWJhY2tRdWFsaXR5KXJldHVybiB0aGlzLmVsKCkuZ2V0VmlkZW9QbGF5YmFja1F1YWxpdHkoKTt2YXIgZT17fTtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgdGhpcy5lbCgpLndlYmtpdERyb3BwZWRGcmFtZUNvdW50JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgdGhpcy5lbCgpLndlYmtpdERlY29kZWRGcmFtZUNvdW50JiYoZS5kcm9wcGVkVmlkZW9GcmFtZXM9dGhpcy5lbCgpLndlYmtpdERyb3BwZWRGcmFtZUNvdW50LGUudG90YWxWaWRlb0ZyYW1lcz10aGlzLmVsKCkud2Via2l0RGVjb2RlZEZyYW1lQ291bnQpLGgucGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGgucGVyZm9ybWFuY2Uubm93P2UuY3JlYXRpb25UaW1lPWgucGVyZm9ybWFuY2Uubm93KCk6aC5wZXJmb3JtYW5jZSYmaC5wZXJmb3JtYW5jZS50aW1pbmcmJlwibnVtYmVyXCI9PXR5cGVvZiBoLnBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnQmJihlLmNyZWF0aW9uVGltZT1oLkRhdGUubm93KCktaC5wZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0KSxlfSxhfSh4bik7aWYoQygpKXt5ci5URVNUX1ZJRD1kLmNyZWF0ZUVsZW1lbnQoXCJ2aWRlb1wiKTt2YXIgX3I9ZC5jcmVhdGVFbGVtZW50KFwidHJhY2tcIik7X3Iua2luZD1cImNhcHRpb25zXCIsX3Iuc3JjbGFuZz1cImVuXCIsX3IubGFiZWw9XCJFbmdsaXNoXCIseXIuVEVTVF9WSUQuYXBwZW5kQ2hpbGQoX3IpfXlyLmlzU3VwcG9ydGVkPWZ1bmN0aW9uKCl7dHJ5e3lyLlRFU1RfVklELnZvbHVtZT0uNX1jYXRjaChlKXtyZXR1cm4hMX1yZXR1cm4hKCF5ci5URVNUX1ZJRHx8IXlyLlRFU1RfVklELmNhblBsYXlUeXBlKX0seXIuY2FuUGxheVR5cGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHlyLlRFU1RfVklELmNhblBsYXlUeXBlKGUpfSx5ci5jYW5QbGF5U291cmNlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHlyLmNhblBsYXlUeXBlKGUudHlwZSl9LHlyLmNhbkNvbnRyb2xWb2x1bWU9ZnVuY3Rpb24oKXt0cnl7dmFyIGU9eXIuVEVTVF9WSUQudm9sdW1lO3JldHVybiB5ci5URVNUX1ZJRC52b2x1bWU9ZS8yKy4xLGUhPT15ci5URVNUX1ZJRC52b2x1bWV9Y2F0Y2goZSl7cmV0dXJuITF9fSx5ci5jYW5NdXRlVm9sdW1lPWZ1bmN0aW9uKCl7dHJ5e3ZhciBlPXlyLlRFU1RfVklELm11dGVkO3JldHVybiB5ci5URVNUX1ZJRC5tdXRlZD0hZSx5ci5URVNUX1ZJRC5tdXRlZD9GKHlyLlRFU1RfVklELFwibXV0ZWRcIixcIm11dGVkXCIpOlIoeXIuVEVTVF9WSUQsXCJtdXRlZFwiKSxlIT09eXIuVEVTVF9WSUQubXV0ZWR9Y2F0Y2goZSl7cmV0dXJuITF9fSx5ci5jYW5Db250cm9sUGxheWJhY2tSYXRlPWZ1bmN0aW9uKCl7aWYoSmUmJml0JiZydDw1OClyZXR1cm4hMTt0cnl7dmFyIGU9eXIuVEVTVF9WSUQucGxheWJhY2tSYXRlO3JldHVybiB5ci5URVNUX1ZJRC5wbGF5YmFja1JhdGU9ZS8yKy4xLGUhPT15ci5URVNUX1ZJRC5wbGF5YmFja1JhdGV9Y2F0Y2goZSl7cmV0dXJuITF9fSx5ci5jYW5PdmVycmlkZUF0dHJpYnV0ZXM9ZnVuY3Rpb24oKXt0cnl7dmFyIGU9ZnVuY3Rpb24oKXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShkLmNyZWF0ZUVsZW1lbnQoXCJ2aWRlb1wiKSxcInNyY1wiLHtnZXQ6ZSxzZXQ6ZX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkLmNyZWF0ZUVsZW1lbnQoXCJhdWRpb1wiKSxcInNyY1wiLHtnZXQ6ZSxzZXQ6ZX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkLmNyZWF0ZUVsZW1lbnQoXCJ2aWRlb1wiKSxcImlubmVySFRNTFwiLHtnZXQ6ZSxzZXQ6ZX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkLmNyZWF0ZUVsZW1lbnQoXCJhdWRpb1wiKSxcImlubmVySFRNTFwiLHtnZXQ6ZSxzZXQ6ZX0pfWNhdGNoKGUpe3JldHVybiExfXJldHVybiEwfSx5ci5zdXBwb3J0c05hdGl2ZVRleHRUcmFja3M9ZnVuY3Rpb24oKXtyZXR1cm4gYXR8fFllJiZpdH0seXIuc3VwcG9ydHNOYXRpdmVWaWRlb1RyYWNrcz1mdW5jdGlvbigpe3JldHVybiEoIXlyLlRFU1RfVklEfHwheXIuVEVTVF9WSUQudmlkZW9UcmFja3MpfSx5ci5zdXBwb3J0c05hdGl2ZUF1ZGlvVHJhY2tzPWZ1bmN0aW9uKCl7cmV0dXJuISgheXIuVEVTVF9WSUR8fCF5ci5URVNUX1ZJRC5hdWRpb1RyYWNrcyl9LHlyLkV2ZW50cz1bXCJsb2Fkc3RhcnRcIixcInN1c3BlbmRcIixcImFib3J0XCIsXCJlcnJvclwiLFwiZW1wdGllZFwiLFwic3RhbGxlZFwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZGRhdGFcIixcImNhbnBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJwbGF5aW5nXCIsXCJ3YWl0aW5nXCIsXCJzZWVraW5nXCIsXCJzZWVrZWRcIixcImVuZGVkXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwidGltZXVwZGF0ZVwiLFwicHJvZ3Jlc3NcIixcInBsYXlcIixcInBhdXNlXCIsXCJyYXRlY2hhbmdlXCIsXCJyZXNpemVcIixcInZvbHVtZWNoYW5nZVwiXSx5ci5wcm90b3R5cGUuZmVhdHVyZXNWb2x1bWVDb250cm9sPXlyLmNhbkNvbnRyb2xWb2x1bWUoKSx5ci5wcm90b3R5cGUuZmVhdHVyZXNNdXRlQ29udHJvbD15ci5jYW5NdXRlVm9sdW1lKCkseXIucHJvdG90eXBlLmZlYXR1cmVzUGxheWJhY2tSYXRlPXlyLmNhbkNvbnRyb2xQbGF5YmFja1JhdGUoKSx5ci5wcm90b3R5cGUuZmVhdHVyZXNTb3VyY2VzZXQ9eXIuY2FuT3ZlcnJpZGVBdHRyaWJ1dGVzKCkseXIucHJvdG90eXBlLm1vdmluZ01lZGlhRWxlbWVudEluRE9NPSFZZSx5ci5wcm90b3R5cGUuZmVhdHVyZXNGdWxsc2NyZWVuUmVzaXplPSEwLHlyLnByb3RvdHlwZS5mZWF0dXJlc1Byb2dyZXNzRXZlbnRzPSEwLHlyLnByb3RvdHlwZS5mZWF0dXJlc1RpbWV1cGRhdGVFdmVudHM9ITAseXIucHJvdG90eXBlLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcz15ci5zdXBwb3J0c05hdGl2ZVRleHRUcmFja3MoKSx5ci5wcm90b3R5cGUuZmVhdHVyZXNOYXRpdmVWaWRlb1RyYWNrcz15ci5zdXBwb3J0c05hdGl2ZVZpZGVvVHJhY2tzKCkseXIucHJvdG90eXBlLmZlYXR1cmVzTmF0aXZlQXVkaW9UcmFja3M9eXIuc3VwcG9ydHNOYXRpdmVBdWRpb1RyYWNrcygpO3ZhciBtcj15ci5URVNUX1ZJRCYmeXIuVEVTVF9WSUQuY29uc3RydWN0b3IucHJvdG90eXBlLmNhblBsYXlUeXBlLGJyPS9eYXBwbGljYXRpb25cXC8oPzp4LXx2bmRcXC5hcHBsZVxcLiltcGVndXJsL2k7ZnVuY3Rpb24gVHIoKXt2YXIgZT10KFtcIlxcbiAgICAgICAgVXNpbmcgdGhlIHRlY2ggZGlyZWN0bHkgY2FuIGJlIGRhbmdlcm91cy4gSSBob3BlIHlvdSBrbm93IHdoYXQgeW91J3JlIGRvaW5nLlxcbiAgICAgICAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL3ZpZGVvLmpzL2lzc3Vlcy8yNjE3IGZvciBtb3JlIGluZm8uXFxuICAgICAgXCJdKTtyZXR1cm4gVHI9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sZX15ci5wYXRjaENhblBsYXlUeXBlPWZ1bmN0aW9uKCl7NDw9WmUmJiF0dCYmIWl0JiYoeXIuVEVTVF9WSUQuY29uc3RydWN0b3IucHJvdG90eXBlLmNhblBsYXlUeXBlPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZici50ZXN0KGUpP1wibWF5YmVcIjptci5jYWxsKHRoaXMsZSl9KX0seXIudW5wYXRjaENhblBsYXlUeXBlPWZ1bmN0aW9uKCl7dmFyIGU9eXIuVEVTVF9WSUQuY29uc3RydWN0b3IucHJvdG90eXBlLmNhblBsYXlUeXBlO3JldHVybiB5ci5URVNUX1ZJRC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUuY2FuUGxheVR5cGU9bXIsZX0seXIucGF0Y2hDYW5QbGF5VHlwZSgpLHlyLmRpc3Bvc2VNZWRpYUVsZW1lbnQ9ZnVuY3Rpb24oZSl7aWYoZSl7Zm9yKGUucGFyZW50Tm9kZSYmZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpO2UuaGFzQ2hpbGROb2RlcygpOyllLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCk7ZS5yZW1vdmVBdHRyaWJ1dGUoXCJzcmNcIiksXCJmdW5jdGlvblwiPT10eXBlb2YgZS5sb2FkJiZmdW5jdGlvbigpe3RyeXtlLmxvYWQoKX1jYXRjaChlKXt9fSgpfX0seXIucmVzZXRNZWRpYUVsZW1lbnQ9ZnVuY3Rpb24oZSl7aWYoZSl7Zm9yKHZhciB0PWUucXVlcnlTZWxlY3RvckFsbChcInNvdXJjZVwiKSxuPXQubGVuZ3RoO24tLTspZS5yZW1vdmVDaGlsZCh0W25dKTtlLnJlbW92ZUF0dHJpYnV0ZShcInNyY1wiKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmxvYWQmJmZ1bmN0aW9uKCl7dHJ5e2UubG9hZCgpfWNhdGNoKGUpe319KCl9fSxbXCJtdXRlZFwiLFwiZGVmYXVsdE11dGVkXCIsXCJhdXRvcGxheVwiLFwiY29udHJvbHNcIixcImxvb3BcIixcInBsYXlzaW5saW5lXCJdLmZvckVhY2goZnVuY3Rpb24oZSl7eXIucHJvdG90eXBlW2VdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWxfW2VdfHx0aGlzLmVsXy5oYXNBdHRyaWJ1dGUoZSl9fSksW1wibXV0ZWRcIixcImRlZmF1bHRNdXRlZFwiLFwiYXV0b3BsYXlcIixcImxvb3BcIixcInBsYXlzaW5saW5lXCJdLmZvckVhY2goZnVuY3Rpb24odCl7eXIucHJvdG90eXBlW1wic2V0XCIrRmUodCldPWZ1bmN0aW9uKGUpeyh0aGlzLmVsX1t0XT1lKT90aGlzLmVsXy5zZXRBdHRyaWJ1dGUodCx0KTp0aGlzLmVsXy5yZW1vdmVBdHRyaWJ1dGUodCl9fSksW1wicGF1c2VkXCIsXCJjdXJyZW50VGltZVwiLFwiYnVmZmVyZWRcIixcInZvbHVtZVwiLFwicG9zdGVyXCIsXCJwcmVsb2FkXCIsXCJlcnJvclwiLFwic2Vla2luZ1wiLFwic2Vla2FibGVcIixcImVuZGVkXCIsXCJwbGF5YmFja1JhdGVcIixcImRlZmF1bHRQbGF5YmFja1JhdGVcIixcInBsYXllZFwiLFwibmV0d29ya1N0YXRlXCIsXCJyZWFkeVN0YXRlXCIsXCJ2aWRlb1dpZHRoXCIsXCJ2aWRlb0hlaWdodFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3lyLnByb3RvdHlwZVtlXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVsX1tlXX19KSxbXCJ2b2x1bWVcIixcInNyY1wiLFwicG9zdGVyXCIsXCJwcmVsb2FkXCIsXCJwbGF5YmFja1JhdGVcIixcImRlZmF1bHRQbGF5YmFja1JhdGVcIl0uZm9yRWFjaChmdW5jdGlvbih0KXt5ci5wcm90b3R5cGVbXCJzZXRcIitGZSh0KV09ZnVuY3Rpb24oZSl7dGhpcy5lbF9bdF09ZX19KSxbXCJwYXVzZVwiLFwibG9hZFwiLFwicGxheVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3lyLnByb3RvdHlwZVtlXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVsX1tlXSgpfX0pLHhuLndpdGhTb3VyY2VIYW5kbGVycyh5cikseXIubmF0aXZlU291cmNlSGFuZGxlcj17fSx5ci5uYXRpdmVTb3VyY2VIYW5kbGVyLmNhblBsYXlUeXBlPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4geXIuVEVTVF9WSUQuY2FuUGxheVR5cGUoZSl9Y2F0Y2goZSl7cmV0dXJuXCJcIn19LHlyLm5hdGl2ZVNvdXJjZUhhbmRsZXIuY2FuSGFuZGxlU291cmNlPWZ1bmN0aW9uKGUsdCl7aWYoZS50eXBlKXJldHVybiB5ci5uYXRpdmVTb3VyY2VIYW5kbGVyLmNhblBsYXlUeXBlKGUudHlwZSk7aWYoZS5zcmMpe3ZhciBuPUd0KGUuc3JjKTtyZXR1cm4geXIubmF0aXZlU291cmNlSGFuZGxlci5jYW5QbGF5VHlwZShcInZpZGVvL1wiK24pfXJldHVyblwiXCJ9LHlyLm5hdGl2ZVNvdXJjZUhhbmRsZXIuaGFuZGxlU291cmNlPWZ1bmN0aW9uKGUsdCxuKXt0LnNldFNyYyhlLnNyYyl9LHlyLm5hdGl2ZVNvdXJjZUhhbmRsZXIuZGlzcG9zZT1mdW5jdGlvbigpe30seXIucmVnaXN0ZXJTb3VyY2VIYW5kbGVyKHlyLm5hdGl2ZVNvdXJjZUhhbmRsZXIpLHhuLnJlZ2lzdGVyVGVjaChcIkh0bWw1XCIseXIpO3ZhciBrcj1bXCJwcm9ncmVzc1wiLFwiYWJvcnRcIixcInN1c3BlbmRcIixcImVtcHRpZWRcIixcInN0YWxsZWRcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRkYXRhXCIsXCJ0aW1ldXBkYXRlXCIsXCJyZXNpemVcIixcInZvbHVtZWNoYW5nZVwiLFwidGV4dHRyYWNrY2hhbmdlXCJdLENyPXtjYW5wbGF5OlwiQ2FuUGxheVwiLGNhbnBsYXl0aHJvdWdoOlwiQ2FuUGxheVRocm91Z2hcIixwbGF5aW5nOlwiUGxheWluZ1wiLHNlZWtlZDpcIlNlZWtlZFwifSxFcj1bXCJ0aW55XCIsXCJ4c21hbGxcIixcInNtYWxsXCIsXCJtZWRpdW1cIixcImxhcmdlXCIsXCJ4bGFyZ2VcIixcImh1Z2VcIl0sU3I9e307RXIuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1cInhcIj09PWUuY2hhckF0KDApP1wieC1cIitlLnN1YnN0cmluZygxKTplO1NyW2VdPVwidmpzLWxheW91dC1cIit0fSk7dmFyIHdyPXt0aW55OjIxMCx4c21hbGw6MzIwLHNtYWxsOjQyNSxtZWRpdW06NzY4LGxhcmdlOjE0NDAseGxhcmdlOjI1NjAsaHVnZToxLzB9LHhyPWZ1bmN0aW9uKHUpe2Z1bmN0aW9uIGMoZSx0LG4pe3ZhciBpO2lmKGUuaWQ9ZS5pZHx8dC5pZHx8XCJ2anNfdmlkZW9fXCIrZWUoKSwodD1tKGMuZ2V0VGFnU2V0dGluZ3MoZSksdCkpLmluaXRDaGlsZHJlbj0hMSx0LmNyZWF0ZUVsPSExLHQuZXZlbnRlZD0hMSx0LnJlcG9ydFRvdWNoQWN0aXZpdHk9ITEsIXQubGFuZ3VhZ2UpaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZS5jbG9zZXN0KXt2YXIgcj1lLmNsb3Nlc3QoXCJbbGFuZ11cIik7ciYmci5nZXRBdHRyaWJ1dGUmJih0Lmxhbmd1YWdlPXIuZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSl9ZWxzZSBmb3IodmFyIHM9ZTtzJiYxPT09cy5ub2RlVHlwZTspe2lmKEQocykuaGFzT3duUHJvcGVydHkoXCJsYW5nXCIpKXt0Lmxhbmd1YWdlPXMuZ2V0QXR0cmlidXRlKFwibGFuZ1wiKTticmVha31zPXMucGFyZW50Tm9kZX1pZigoaT11LmNhbGwodGhpcyxudWxsLHQsbil8fHRoaXMpLmJvdW5kRG9jdW1lbnRGdWxsc2NyZWVuQ2hhbmdlXz1DZSh2KHYoaSkpLGkuZG9jdW1lbnRGdWxsc2NyZWVuQ2hhbmdlXyksaS5ib3VuZEZ1bGxXaW5kb3dPbkVzY0tleV89Q2Uodih2KGkpKSxpLmZ1bGxXaW5kb3dPbkVzY0tleSksaS5ib3VuZEhhbmRsZUtleVByZXNzXz1DZSh2KHYoaSkpLGkuaGFuZGxlS2V5UHJlc3MpLGkubG9nPXkoaS5pZF8pLGkuaXNQb3N0ZXJGcm9tVGVjaF89ITEsaS5xdWV1ZWRDYWxsYmFja3NfPVtdLGkuaXNSZWFkeV89ITEsaS5oYXNTdGFydGVkXz0hMSxpLnVzZXJBY3RpdmVfPSExLCFpLm9wdGlvbnNffHwhaS5vcHRpb25zXy50ZWNoT3JkZXJ8fCFpLm9wdGlvbnNfLnRlY2hPcmRlci5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiTm8gdGVjaE9yZGVyIHNwZWNpZmllZC4gRGlkIHlvdSBvdmVyd3JpdGUgdmlkZW9qcy5vcHRpb25zIGluc3RlYWQgb2YganVzdCBjaGFuZ2luZyB0aGUgcHJvcGVydGllcyB5b3Ugd2FudCB0byBvdmVycmlkZT9cIik7aWYoaS50YWc9ZSxpLnRhZ0F0dHJpYnV0ZXM9ZSYmRChlKSxpLmxhbmd1YWdlKGkub3B0aW9uc18ubGFuZ3VhZ2UpLHQubGFuZ3VhZ2VzKXt2YXIgbz17fTtPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0Lmxhbmd1YWdlcykuZm9yRWFjaChmdW5jdGlvbihlKXtvW2UudG9Mb3dlckNhc2UoKV09dC5sYW5ndWFnZXNbZV19KSxpLmxhbmd1YWdlc189b31lbHNlIGkubGFuZ3VhZ2VzXz1jLnByb3RvdHlwZS5vcHRpb25zXy5sYW5ndWFnZXM7aS5yZXNldENhY2hlXygpLGkucG9zdGVyXz10LnBvc3Rlcnx8XCJcIixpLmNvbnRyb2xzXz0hIXQuY29udHJvbHMsZS5jb250cm9scz0hMSxlLnJlbW92ZUF0dHJpYnV0ZShcImNvbnRyb2xzXCIpLGkuY2hhbmdpbmdTcmNfPSExLGkucGxheUNhbGxiYWNrc189W10saS5wbGF5VGVybWluYXRlZFF1ZXVlXz1bXSxlLmhhc0F0dHJpYnV0ZShcImF1dG9wbGF5XCIpP2kuYXV0b3BsYXkoITApOmkuYXV0b3BsYXkoaS5vcHRpb25zXy5hdXRvcGxheSksdC5wbHVnaW5zJiZPYmplY3Qua2V5cyh0LnBsdWdpbnMpLmZvckVhY2goZnVuY3Rpb24oZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgaVtlXSl0aHJvdyBuZXcgRXJyb3IoJ3BsdWdpbiBcIicrZSsnXCIgZG9lcyBub3QgZXhpc3QnKX0pLGkuc2NydWJiaW5nXz0hMSxpLmVsXz1pLmNyZWF0ZUVsKCksT2Uodih2KGkpKSx7ZXZlbnRCdXNLZXk6XCJlbF9cIn0pLGkuZmx1aWRfJiZpLm9uKFwicGxheWVycmVzZXRcIixpLnVwZGF0ZVN0eWxlRWxfKTt2YXIgYT1SZShpLm9wdGlvbnNfKTt0LnBsdWdpbnMmJk9iamVjdC5rZXlzKHQucGx1Z2lucykuZm9yRWFjaChmdW5jdGlvbihlKXtpW2VdKHQucGx1Z2luc1tlXSl9KSxpLm9wdGlvbnNfLnBsYXllck9wdGlvbnM9YSxpLm1pZGRsZXdhcmVfPVtdLGkuaW5pdENoaWxkcmVuKCksaS5pc0F1ZGlvKFwiYXVkaW9cIj09PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSksaS5jb250cm9scygpP2kuYWRkQ2xhc3MoXCJ2anMtY29udHJvbHMtZW5hYmxlZFwiKTppLmFkZENsYXNzKFwidmpzLWNvbnRyb2xzLWRpc2FibGVkXCIpLGkuZWxfLnNldEF0dHJpYnV0ZShcInJvbGVcIixcInJlZ2lvblwiKSxpLmlzQXVkaW8oKT9pLmVsXy5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsaS5sb2NhbGl6ZShcIkF1ZGlvIFBsYXllclwiKSk6aS5lbF8uc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLGkubG9jYWxpemUoXCJWaWRlbyBQbGF5ZXJcIikpLGkuaXNBdWRpbygpJiZpLmFkZENsYXNzKFwidmpzLWF1ZGlvXCIpLGkuZmxleE5vdFN1cHBvcnRlZF8oKSYmaS5hZGRDbGFzcyhcInZqcy1uby1mbGV4XCIpLGx0JiZpLmFkZENsYXNzKFwidmpzLXRvdWNoLWVuYWJsZWRcIiksWWV8fGkuYWRkQ2xhc3MoXCJ2anMtd29ya2luZ2hvdmVyXCIpLGMucGxheWVyc1tpLmlkX109dih2KGkpKTt2YXIgbD1wLnNwbGl0KFwiLlwiKVswXTtyZXR1cm4gaS5hZGRDbGFzcyhcInZqcy12XCIrbCksaS51c2VyQWN0aXZlKCEwKSxpLnJlcG9ydFVzZXJBY3Rpdml0eSgpLGkub25lKFwicGxheVwiLGkubGlzdGVuRm9yVXNlckFjdGl2aXR5XyksaS5vbihcImZvY3VzXCIsaS5oYW5kbGVGb2N1cyksaS5vbihcImJsdXJcIixpLmhhbmRsZUJsdXIpLGkub24oXCJzdGFnZWNsaWNrXCIsaS5oYW5kbGVTdGFnZUNsaWNrXyksaS5icmVha3BvaW50cyhpLm9wdGlvbnNfLmJyZWFrcG9pbnRzKSxpLnJlc3BvbnNpdmUoaS5vcHRpb25zXy5yZXNwb25zaXZlKSxpfWYoYyx1KTt2YXIgZT1jLnByb3RvdHlwZTtyZXR1cm4gZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dmFyIGk9dGhpczt0aGlzLnRyaWdnZXIoXCJkaXNwb3NlXCIpLHRoaXMub2ZmKFwiZGlzcG9zZVwiKSxkZShkLHZ0LmZ1bGxzY3JlZW5jaGFuZ2UsdGhpcy5ib3VuZERvY3VtZW50RnVsbHNjcmVlbkNoYW5nZV8pLGRlKGQsXCJrZXlkb3duXCIsdGhpcy5ib3VuZEZ1bGxXaW5kb3dPbkVzY0tleV8pLGRlKGQsXCJrZXlkb3duXCIsdGhpcy5ib3VuZEhhbmRsZUtleVByZXNzXyksdGhpcy5zdHlsZUVsXyYmdGhpcy5zdHlsZUVsXy5wYXJlbnROb2RlJiYodGhpcy5zdHlsZUVsXy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc3R5bGVFbF8pLHRoaXMuc3R5bGVFbF89bnVsbCksYy5wbGF5ZXJzW3RoaXMuaWRfXT1udWxsLHRoaXMudGFnJiZ0aGlzLnRhZy5wbGF5ZXImJih0aGlzLnRhZy5wbGF5ZXI9bnVsbCksdGhpcy5lbF8mJnRoaXMuZWxfLnBsYXllciYmKHRoaXMuZWxfLnBsYXllcj1udWxsKSx0aGlzLnRlY2hfJiYodGhpcy50ZWNoXy5kaXNwb3NlKCksdGhpcy5pc1Bvc3RlckZyb21UZWNoXz0hMSx0aGlzLnBvc3Rlcl89XCJcIiksdGhpcy5wbGF5ZXJFbEluZ2VzdF8mJih0aGlzLnBsYXllckVsSW5nZXN0Xz1udWxsKSx0aGlzLnRhZyYmKHRoaXMudGFnPW51bGwpLFBuW3RoaXMuaWQoKV09bnVsbCxTbi5uYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PVNuW2VdLG49aVt0LmdldHRlck5hbWVdKCk7biYmbi5vZmYmJm4ub2ZmKCl9KSx1LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyl9LGUuY3JlYXRlRWw9ZnVuY3Rpb24oKXt2YXIgdCxuPXRoaXMudGFnLGU9dGhpcy5wbGF5ZXJFbEluZ2VzdF89bi5wYXJlbnROb2RlJiZuLnBhcmVudE5vZGUuaGFzQXR0cmlidXRlJiZuLnBhcmVudE5vZGUuaGFzQXR0cmlidXRlKFwiZGF0YS12anMtcGxheWVyXCIpLGk9XCJ2aWRlby1qc1wiPT09dGhpcy50YWcudGFnTmFtZS50b0xvd2VyQ2FzZSgpO2U/dD10aGlzLmVsXz1uLnBhcmVudE5vZGU6aXx8KHQ9dGhpcy5lbF89dS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLFwiZGl2XCIpKTt2YXIgcj1EKG4pO2lmKGkpe2Zvcih0PXRoaXMuZWxfPW4sbj10aGlzLnRhZz1kLmNyZWF0ZUVsZW1lbnQoXCJ2aWRlb1wiKTt0LmNoaWxkcmVuLmxlbmd0aDspbi5hcHBlbmRDaGlsZCh0LmZpcnN0Q2hpbGQpO0EodCxcInZpZGVvLWpzXCIpfHxNKHQsXCJ2aWRlby1qc1wiKSx0LmFwcGVuZENoaWxkKG4pLGU9dGhpcy5wbGF5ZXJFbEluZ2VzdF89dCxPYmplY3Qua2V5cyh0KS5mb3JFYWNoKGZ1bmN0aW9uKGUpe25bZV09dFtlXX0pfWlmKG4uc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIixcIi0xXCIpLHIudGFiaW5kZXg9XCItMVwiLHN0JiYobi5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsXCJhcHBsaWNhdGlvblwiKSxyLnJvbGU9XCJhcHBsaWNhdGlvblwiKSxuLnJlbW92ZUF0dHJpYnV0ZShcIndpZHRoXCIpLG4ucmVtb3ZlQXR0cmlidXRlKFwiaGVpZ2h0XCIpLFwid2lkdGhcImluIHImJmRlbGV0ZSByLndpZHRoLFwiaGVpZ2h0XCJpbiByJiZkZWxldGUgci5oZWlnaHQsT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocikuZm9yRWFjaChmdW5jdGlvbihlKXtpJiZcImNsYXNzXCI9PT1lfHx0LnNldEF0dHJpYnV0ZShlLHJbZV0pLGkmJm4uc2V0QXR0cmlidXRlKGUscltlXSl9KSxuLnBsYXllcklkPW4uaWQsbi5pZCs9XCJfaHRtbDVfYXBpXCIsbi5jbGFzc05hbWU9XCJ2anMtdGVjaFwiLG4ucGxheWVyPXQucGxheWVyPXRoaXMsdGhpcy5hZGRDbGFzcyhcInZqcy1wYXVzZWRcIiksITAhPT1oLlZJREVPSlNfTk9fRFlOQU1JQ19TVFlMRSl7dGhpcy5zdHlsZUVsXz1UZShcInZqcy1zdHlsZXMtZGltZW5zaW9uc1wiKTt2YXIgcz1ZKFwiLnZqcy1zdHlsZXMtZGVmYXVsdHNcIiksbz1ZKFwiaGVhZFwiKTtvLmluc2VydEJlZm9yZSh0aGlzLnN0eWxlRWxfLHM/cy5uZXh0U2libGluZzpvLmZpcnN0Q2hpbGQpfXRoaXMuZmlsbF89ITEsdGhpcy5mbHVpZF89ITEsdGhpcy53aWR0aCh0aGlzLm9wdGlvbnNfLndpZHRoKSx0aGlzLmhlaWdodCh0aGlzLm9wdGlvbnNfLmhlaWdodCksdGhpcy5maWxsKHRoaXMub3B0aW9uc18uZmlsbCksdGhpcy5mbHVpZCh0aGlzLm9wdGlvbnNfLmZsdWlkKSx0aGlzLmFzcGVjdFJhdGlvKHRoaXMub3B0aW9uc18uYXNwZWN0UmF0aW8pO2Zvcih2YXIgYT1uLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYVwiKSxsPTA7bDxhLmxlbmd0aDtsKyspe3ZhciBjPWEuaXRlbShsKTtNKGMsXCJ2anMtaGlkZGVuXCIpLGMuc2V0QXR0cmlidXRlKFwiaGlkZGVuXCIsXCJoaWRkZW5cIil9cmV0dXJuIG4uaW5pdE5ldHdvcmtTdGF0ZV89bi5uZXR3b3JrU3RhdGUsbi5wYXJlbnROb2RlJiYhZSYmbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LG4pLFAobix0KSx0aGlzLmNoaWxkcmVuXy51bnNoaWZ0KG4pLHRoaXMuZWxfLnNldEF0dHJpYnV0ZShcImxhbmdcIix0aGlzLmxhbmd1YWdlXyksdGhpcy5lbF89dH0sZS53aWR0aD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5kaW1lbnNpb24oXCJ3aWR0aFwiLGUpfSxlLmhlaWdodD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5kaW1lbnNpb24oXCJoZWlnaHRcIixlKX0sZS5kaW1lbnNpb249ZnVuY3Rpb24oZSx0KXt2YXIgbj1lK1wiX1wiO2lmKHZvaWQgMD09PXQpcmV0dXJuIHRoaXNbbl18fDA7aWYoXCJcIj09PXQpcmV0dXJuIHRoaXNbbl09dm9pZCAwLHZvaWQgdGhpcy51cGRhdGVTdHlsZUVsXygpO3ZhciBpPXBhcnNlRmxvYXQodCk7aXNOYU4oaSk/Zy5lcnJvcignSW1wcm9wZXIgdmFsdWUgXCInK3QrJ1wiIHN1cHBsaWVkIGZvciBmb3IgJytlKToodGhpc1tuXT1pLHRoaXMudXBkYXRlU3R5bGVFbF8oKSl9LGUuZmx1aWQ9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4hIXRoaXMuZmx1aWRfO3ZhciB0LG47dGhpcy5mbHVpZF89ISFlLHdlKHRoaXMpJiZ0aGlzLm9mZihcInBsYXllcnJlc2V0XCIsdGhpcy51cGRhdGVTdHlsZUVsXyksZT8odGhpcy5hZGRDbGFzcyhcInZqcy1mbHVpZFwiKSx0aGlzLmZpbGwoITEpLHdlKHQ9ZnVuY3Rpb24oKXt0aGlzLm9uKFwicGxheWVycmVzZXRcIix0aGlzLnVwZGF0ZVN0eWxlRWxfKX0pP24oKToodC5ldmVudGVkQ2FsbGJhY2tzfHwodC5ldmVudGVkQ2FsbGJhY2tzPVtdKSx0LmV2ZW50ZWRDYWxsYmFja3MucHVzaChuKSkpOnRoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtZmx1aWRcIiksdGhpcy51cGRhdGVTdHlsZUVsXygpfSxlLmZpbGw9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4hIXRoaXMuZmlsbF87dGhpcy5maWxsXz0hIWUsZT8odGhpcy5hZGRDbGFzcyhcInZqcy1maWxsXCIpLHRoaXMuZmx1aWQoITEpKTp0aGlzLnJlbW92ZUNsYXNzKFwidmpzLWZpbGxcIil9LGUuYXNwZWN0UmF0aW89ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4gdGhpcy5hc3BlY3RSYXRpb187aWYoIS9eXFxkK1xcOlxcZCskLy50ZXN0KGUpKXRocm93IG5ldyBFcnJvcihcIkltcHJvcGVyIHZhbHVlIHN1cHBsaWVkIGZvciBhc3BlY3QgcmF0aW8uIFRoZSBmb3JtYXQgc2hvdWxkIGJlIHdpZHRoOmhlaWdodCwgZm9yIGV4YW1wbGUgMTY6OS5cIik7dGhpcy5hc3BlY3RSYXRpb189ZSx0aGlzLmZsdWlkKCEwKSx0aGlzLnVwZGF0ZVN0eWxlRWxfKCl9LGUudXBkYXRlU3R5bGVFbF89ZnVuY3Rpb24oKXtpZighMCE9PWguVklERU9KU19OT19EWU5BTUlDX1NUWUxFKXt2YXIgZSx0LG4saT0odm9pZCAwIT09dGhpcy5hc3BlY3RSYXRpb18mJlwiYXV0b1wiIT09dGhpcy5hc3BlY3RSYXRpb18/dGhpcy5hc3BlY3RSYXRpb186MDx0aGlzLnZpZGVvV2lkdGgoKT90aGlzLnZpZGVvV2lkdGgoKStcIjpcIit0aGlzLnZpZGVvSGVpZ2h0KCk6XCIxNjo5XCIpLnNwbGl0KFwiOlwiKSxyPWlbMV0vaVswXTtlPXZvaWQgMCE9PXRoaXMud2lkdGhfP3RoaXMud2lkdGhfOnZvaWQgMCE9PXRoaXMuaGVpZ2h0Xz90aGlzLmhlaWdodF8vcjp0aGlzLnZpZGVvV2lkdGgoKXx8MzAwLHQ9dm9pZCAwIT09dGhpcy5oZWlnaHRfP3RoaXMuaGVpZ2h0XzplKnIsbj0vXlteYS16QS1aXS8udGVzdCh0aGlzLmlkKCkpP1wiZGltZW5zaW9ucy1cIit0aGlzLmlkKCk6dGhpcy5pZCgpK1wiLWRpbWVuc2lvbnNcIix0aGlzLmFkZENsYXNzKG4pLGtlKHRoaXMuc3R5bGVFbF8sXCJcXG4gICAgICAuXCIrbitcIiB7XFxuICAgICAgICB3aWR0aDogXCIrZStcInB4O1xcbiAgICAgICAgaGVpZ2h0OiBcIit0K1wicHg7XFxuICAgICAgfVxcblxcbiAgICAgIC5cIituK1wiLnZqcy1mbHVpZCB7XFxuICAgICAgICBwYWRkaW5nLXRvcDogXCIrMTAwKnIrXCIlO1xcbiAgICAgIH1cXG4gICAgXCIpfWVsc2V7dmFyIHM9XCJudW1iZXJcIj09dHlwZW9mIHRoaXMud2lkdGhfP3RoaXMud2lkdGhfOnRoaXMub3B0aW9uc18ud2lkdGgsbz1cIm51bWJlclwiPT10eXBlb2YgdGhpcy5oZWlnaHRfP3RoaXMuaGVpZ2h0Xzp0aGlzLm9wdGlvbnNfLmhlaWdodCxhPXRoaXMudGVjaF8mJnRoaXMudGVjaF8uZWwoKTthJiYoMDw9cyYmKGEud2lkdGg9cyksMDw9byYmKGEuaGVpZ2h0PW8pKX19LGUubG9hZFRlY2hfPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpczt0aGlzLnRlY2hfJiZ0aGlzLnVubG9hZFRlY2hfKCk7dmFyIGk9RmUoZSkscj1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpK2Uuc2xpY2UoMSk7XCJIdG1sNVwiIT09aSYmdGhpcy50YWcmJih4bi5nZXRUZWNoKFwiSHRtbDVcIikuZGlzcG9zZU1lZGlhRWxlbWVudCh0aGlzLnRhZyksdGhpcy50YWcucGxheWVyPW51bGwsdGhpcy50YWc9bnVsbCksdGhpcy50ZWNoTmFtZV89aSx0aGlzLmlzUmVhZHlfPSExO3ZhciBzPXtzb3VyY2U6dCxhdXRvcGxheTpcInN0cmluZ1wiIT10eXBlb2YgdGhpcy5hdXRvcGxheSgpJiZ0aGlzLmF1dG9wbGF5KCksbmF0aXZlQ29udHJvbHNGb3JUb3VjaDp0aGlzLm9wdGlvbnNfLm5hdGl2ZUNvbnRyb2xzRm9yVG91Y2gscGxheWVySWQ6dGhpcy5pZCgpLHRlY2hJZDp0aGlzLmlkKCkrXCJfXCIrcitcIl9hcGlcIixwbGF5c2lubGluZTp0aGlzLm9wdGlvbnNfLnBsYXlzaW5saW5lLHByZWxvYWQ6dGhpcy5vcHRpb25zXy5wcmVsb2FkLGxvb3A6dGhpcy5vcHRpb25zXy5sb29wLG11dGVkOnRoaXMub3B0aW9uc18ubXV0ZWQscG9zdGVyOnRoaXMucG9zdGVyKCksbGFuZ3VhZ2U6dGhpcy5sYW5ndWFnZSgpLHBsYXllckVsSW5nZXN0OnRoaXMucGxheWVyRWxJbmdlc3RffHwhMSxcInZ0dC5qc1wiOnRoaXMub3B0aW9uc19bXCJ2dHQuanNcIl0sY2FuT3ZlcnJpZGVQb3N0ZXI6ISF0aGlzLm9wdGlvbnNfLnRlY2hDYW5PdmVycmlkZVBvc3RlcixlbmFibGVTb3VyY2VzZXQ6dGhpcy5vcHRpb25zXy5lbmFibGVTb3VyY2VzZXR9O1NuLm5hbWVzLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9U25bZV07c1t0LmdldHRlck5hbWVdPW5bdC5wcml2YXRlTmFtZV19KSxtKHMsdGhpcy5vcHRpb25zX1tpXSksbShzLHRoaXMub3B0aW9uc19bcl0pLG0ocyx0aGlzLm9wdGlvbnNfW2UudG9Mb3dlckNhc2UoKV0pLHRoaXMudGFnJiYocy50YWc9dGhpcy50YWcpLHQmJnQuc3JjPT09dGhpcy5jYWNoZV8uc3JjJiYwPHRoaXMuY2FjaGVfLmN1cnJlbnRUaW1lJiYocy5zdGFydFRpbWU9dGhpcy5jYWNoZV8uY3VycmVudFRpbWUpO3ZhciBvPXhuLmdldFRlY2goZSk7aWYoIW8pdGhyb3cgbmV3IEVycm9yKFwiTm8gVGVjaCBuYW1lZCAnXCIraStcIicgZXhpc3RzISAnXCIraStcIicgc2hvdWxkIGJlIHJlZ2lzdGVyZWQgdXNpbmcgdmlkZW9qcy5yZWdpc3RlclRlY2goKSdcIik7dGhpcy50ZWNoXz1uZXcgbyhzKSx0aGlzLnRlY2hfLnJlYWR5KENlKHRoaXMsdGhpcy5oYW5kbGVUZWNoUmVhZHlfKSwhMCksanQodGhpcy50ZXh0VHJhY2tzSnNvbl98fFtdLHRoaXMudGVjaF8pLGtyLmZvckVhY2goZnVuY3Rpb24oZSl7bi5vbihuLnRlY2hfLGUsbltcImhhbmRsZVRlY2hcIitGZShlKStcIl9cIl0pfSksT2JqZWN0LmtleXMoQ3IpLmZvckVhY2goZnVuY3Rpb24odCl7bi5vbihuLnRlY2hfLHQsZnVuY3Rpb24oZSl7MD09PW4udGVjaF8ucGxheWJhY2tSYXRlKCkmJm4udGVjaF8uc2Vla2luZygpP24ucXVldWVkQ2FsbGJhY2tzXy5wdXNoKHtjYWxsYmFjazpuW1wiaGFuZGxlVGVjaFwiK0NyW3RdK1wiX1wiXS5iaW5kKG4pLGV2ZW50OmV9KTpuW1wiaGFuZGxlVGVjaFwiK0NyW3RdK1wiX1wiXShlKX0pfSksdGhpcy5vbih0aGlzLnRlY2hfLFwibG9hZHN0YXJ0XCIsdGhpcy5oYW5kbGVUZWNoTG9hZFN0YXJ0XyksdGhpcy5vbih0aGlzLnRlY2hfLFwic291cmNlc2V0XCIsdGhpcy5oYW5kbGVUZWNoU291cmNlc2V0XyksdGhpcy5vbih0aGlzLnRlY2hfLFwid2FpdGluZ1wiLHRoaXMuaGFuZGxlVGVjaFdhaXRpbmdfKSx0aGlzLm9uKHRoaXMudGVjaF8sXCJlbmRlZFwiLHRoaXMuaGFuZGxlVGVjaEVuZGVkXyksdGhpcy5vbih0aGlzLnRlY2hfLFwic2Vla2luZ1wiLHRoaXMuaGFuZGxlVGVjaFNlZWtpbmdfKSx0aGlzLm9uKHRoaXMudGVjaF8sXCJwbGF5XCIsdGhpcy5oYW5kbGVUZWNoUGxheV8pLHRoaXMub24odGhpcy50ZWNoXyxcImZpcnN0cGxheVwiLHRoaXMuaGFuZGxlVGVjaEZpcnN0UGxheV8pLHRoaXMub24odGhpcy50ZWNoXyxcInBhdXNlXCIsdGhpcy5oYW5kbGVUZWNoUGF1c2VfKSx0aGlzLm9uKHRoaXMudGVjaF8sXCJkdXJhdGlvbmNoYW5nZVwiLHRoaXMuaGFuZGxlVGVjaER1cmF0aW9uQ2hhbmdlXyksdGhpcy5vbih0aGlzLnRlY2hfLFwiZnVsbHNjcmVlbmNoYW5nZVwiLHRoaXMuaGFuZGxlVGVjaEZ1bGxzY3JlZW5DaGFuZ2VfKSx0aGlzLm9uKHRoaXMudGVjaF8sXCJlcnJvclwiLHRoaXMuaGFuZGxlVGVjaEVycm9yXyksdGhpcy5vbih0aGlzLnRlY2hfLFwibG9hZGVkbWV0YWRhdGFcIix0aGlzLnVwZGF0ZVN0eWxlRWxfKSx0aGlzLm9uKHRoaXMudGVjaF8sXCJwb3N0ZXJjaGFuZ2VcIix0aGlzLmhhbmRsZVRlY2hQb3N0ZXJDaGFuZ2VfKSx0aGlzLm9uKHRoaXMudGVjaF8sXCJ0ZXh0ZGF0YVwiLHRoaXMuaGFuZGxlVGVjaFRleHREYXRhXyksdGhpcy5vbih0aGlzLnRlY2hfLFwicmF0ZWNoYW5nZVwiLHRoaXMuaGFuZGxlVGVjaFJhdGVDaGFuZ2VfKSx0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHModGhpcy50ZWNoR2V0XyhcImNvbnRyb2xzXCIpKSx0aGlzLmNvbnRyb2xzKCkmJiF0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHMoKSYmdGhpcy5hZGRUZWNoQ29udHJvbHNMaXN0ZW5lcnNfKCksdGhpcy50ZWNoXy5lbCgpLnBhcmVudE5vZGU9PT10aGlzLmVsKCl8fFwiSHRtbDVcIj09PWkmJnRoaXMudGFnfHxQKHRoaXMudGVjaF8uZWwoKSx0aGlzLmVsKCkpLHRoaXMudGFnJiYodGhpcy50YWcucGxheWVyPW51bGwsdGhpcy50YWc9bnVsbCl9LGUudW5sb2FkVGVjaF89ZnVuY3Rpb24oKXt2YXIgbj10aGlzO1NuLm5hbWVzLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9U25bZV07blt0LnByaXZhdGVOYW1lXT1uW3QuZ2V0dGVyTmFtZV0oKX0pLHRoaXMudGV4dFRyYWNrc0pzb25fPXh0KHRoaXMudGVjaF8pLHRoaXMuaXNSZWFkeV89ITEsdGhpcy50ZWNoXy5kaXNwb3NlKCksdGhpcy50ZWNoXz0hMSx0aGlzLmlzUG9zdGVyRnJvbVRlY2hfJiYodGhpcy5wb3N0ZXJfPVwiXCIsdGhpcy50cmlnZ2VyKFwicG9zdGVyY2hhbmdlXCIpKSx0aGlzLmlzUG9zdGVyRnJvbVRlY2hfPSExfSxlLnRlY2g9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWUmJmcud2FybihfKFRyKCkpKSx0aGlzLnRlY2hffSxlLmFkZFRlY2hDb250cm9sc0xpc3RlbmVyc189ZnVuY3Rpb24oKXt0aGlzLnJlbW92ZVRlY2hDb250cm9sc0xpc3RlbmVyc18oKSx0aGlzLm9uKHRoaXMudGVjaF8sXCJtb3VzZWRvd25cIix0aGlzLmhhbmRsZVRlY2hDbGlja18pLHRoaXMub24odGhpcy50ZWNoXyxcImRibGNsaWNrXCIsdGhpcy5oYW5kbGVUZWNoRG91YmxlQ2xpY2tfKSx0aGlzLm9uKHRoaXMudGVjaF8sXCJ0b3VjaHN0YXJ0XCIsdGhpcy5oYW5kbGVUZWNoVG91Y2hTdGFydF8pLHRoaXMub24odGhpcy50ZWNoXyxcInRvdWNobW92ZVwiLHRoaXMuaGFuZGxlVGVjaFRvdWNoTW92ZV8pLHRoaXMub24odGhpcy50ZWNoXyxcInRvdWNoZW5kXCIsdGhpcy5oYW5kbGVUZWNoVG91Y2hFbmRfKSx0aGlzLm9uKHRoaXMudGVjaF8sXCJ0YXBcIix0aGlzLmhhbmRsZVRlY2hUYXBfKX0sZS5yZW1vdmVUZWNoQ29udHJvbHNMaXN0ZW5lcnNfPWZ1bmN0aW9uKCl7dGhpcy5vZmYodGhpcy50ZWNoXyxcInRhcFwiLHRoaXMuaGFuZGxlVGVjaFRhcF8pLHRoaXMub2ZmKHRoaXMudGVjaF8sXCJ0b3VjaHN0YXJ0XCIsdGhpcy5oYW5kbGVUZWNoVG91Y2hTdGFydF8pLHRoaXMub2ZmKHRoaXMudGVjaF8sXCJ0b3VjaG1vdmVcIix0aGlzLmhhbmRsZVRlY2hUb3VjaE1vdmVfKSx0aGlzLm9mZih0aGlzLnRlY2hfLFwidG91Y2hlbmRcIix0aGlzLmhhbmRsZVRlY2hUb3VjaEVuZF8pLHRoaXMub2ZmKHRoaXMudGVjaF8sXCJtb3VzZWRvd25cIix0aGlzLmhhbmRsZVRlY2hDbGlja18pLHRoaXMub2ZmKHRoaXMudGVjaF8sXCJkYmxjbGlja1wiLHRoaXMuaGFuZGxlVGVjaERvdWJsZUNsaWNrXyl9LGUuaGFuZGxlVGVjaFJlYWR5Xz1mdW5jdGlvbigpe3RoaXMudHJpZ2dlclJlYWR5KCksdGhpcy5jYWNoZV8udm9sdW1lJiZ0aGlzLnRlY2hDYWxsXyhcInNldFZvbHVtZVwiLHRoaXMuY2FjaGVfLnZvbHVtZSksdGhpcy5oYW5kbGVUZWNoUG9zdGVyQ2hhbmdlXygpLHRoaXMuaGFuZGxlVGVjaER1cmF0aW9uQ2hhbmdlXygpfSxlLmhhbmRsZVRlY2hMb2FkU3RhcnRfPWZ1bmN0aW9uKCl7dGhpcy5yZW1vdmVDbGFzcyhcInZqcy1lbmRlZFwiKSx0aGlzLnJlbW92ZUNsYXNzKFwidmpzLXNlZWtpbmdcIiksdGhpcy5lcnJvcihudWxsKSx0aGlzLmhhbmRsZVRlY2hEdXJhdGlvbkNoYW5nZV8oKSx0aGlzLnBhdXNlZCgpPyh0aGlzLmhhc1N0YXJ0ZWQoITEpLHRoaXMudHJpZ2dlcihcImxvYWRzdGFydFwiKSk6KHRoaXMudHJpZ2dlcihcImxvYWRzdGFydFwiKSx0aGlzLnRyaWdnZXIoXCJmaXJzdHBsYXlcIikpLHRoaXMubWFudWFsQXV0b3BsYXlfKHRoaXMuYXV0b3BsYXkoKSl9LGUubWFudWFsQXV0b3BsYXlfPWZ1bmN0aW9uKHQpe3ZhciBpPXRoaXM7aWYodGhpcy50ZWNoXyYmXCJzdHJpbmdcIj09dHlwZW9mIHQpe3ZhciBlLG49ZnVuY3Rpb24oKXt2YXIgZT1pLm11dGVkKCk7aS5tdXRlZCghMCk7dmFyIHQ9ZnVuY3Rpb24oKXtpLm11dGVkKGUpfTtpLnBsYXlUZXJtaW5hdGVkUXVldWVfLnB1c2godCk7dmFyIG49aS5wbGF5KCk7aWYoRXQobikpcmV0dXJuIG4uY2F0Y2godCl9O2lmKFwiYW55XCI9PT10JiYhMCE9PXRoaXMubXV0ZWQoKT9FdChlPXRoaXMucGxheSgpKSYmKGU9ZS5jYXRjaChuKSk6ZT1cIm11dGVkXCI9PT10JiYhMCE9PXRoaXMubXV0ZWQoKT9uKCk6dGhpcy5wbGF5KCksRXQoZSkpcmV0dXJuIGUudGhlbihmdW5jdGlvbigpe2kudHJpZ2dlcih7dHlwZTpcImF1dG9wbGF5LXN1Y2Nlc3NcIixhdXRvcGxheTp0fSl9KS5jYXRjaChmdW5jdGlvbihlKXtpLnRyaWdnZXIoe3R5cGU6XCJhdXRvcGxheS1mYWlsdXJlXCIsYXV0b3BsYXk6dH0pfSl9fSxlLnVwZGF0ZVNvdXJjZUNhY2hlc189ZnVuY3Rpb24oZSl7dm9pZCAwPT09ZSYmKGU9XCJcIik7dmFyIHQ9ZSxuPVwiXCI7XCJzdHJpbmdcIiE9dHlwZW9mIHQmJih0PWUuc3JjLG49ZS50eXBlKSx0aGlzLmNhY2hlXy5zb3VyY2U9dGhpcy5jYWNoZV8uc291cmNlfHx7fSx0aGlzLmNhY2hlXy5zb3VyY2VzPXRoaXMuY2FjaGVfLnNvdXJjZXN8fFtdLHQmJiFuJiYobj1mdW5jdGlvbihlLHQpe2lmKCF0KXJldHVyblwiXCI7aWYoZS5jYWNoZV8uc291cmNlLnNyYz09PXQmJmUuY2FjaGVfLnNvdXJjZS50eXBlKXJldHVybiBlLmNhY2hlXy5zb3VyY2UudHlwZTt2YXIgbj1lLmNhY2hlXy5zb3VyY2VzLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5zcmM9PT10fSk7aWYobi5sZW5ndGgpcmV0dXJuIG5bMF0udHlwZTtmb3IodmFyIGk9ZS4kJChcInNvdXJjZVwiKSxyPTA7cjxpLmxlbmd0aDtyKyspe3ZhciBzPWlbcl07aWYocy50eXBlJiZzLnNyYyYmcy5zcmM9PT10KXJldHVybiBzLnR5cGV9cmV0dXJuIEJuKHQpfSh0aGlzLHQpKSx0aGlzLmNhY2hlXy5zb3VyY2U9UmUoe30sZSx7c3JjOnQsdHlwZTpufSk7Zm9yKHZhciBpPXRoaXMuY2FjaGVfLnNvdXJjZXMuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLnNyYyYmZS5zcmM9PT10fSkscj1bXSxzPXRoaXMuJCQoXCJzb3VyY2VcIiksbz1bXSxhPTA7YTxzLmxlbmd0aDthKyspe3ZhciBsPUQoc1thXSk7ci5wdXNoKGwpLGwuc3JjJiZsLnNyYz09PXQmJm8ucHVzaChsLnNyYyl9by5sZW5ndGgmJiFpLmxlbmd0aD90aGlzLmNhY2hlXy5zb3VyY2VzPXI6aS5sZW5ndGh8fCh0aGlzLmNhY2hlXy5zb3VyY2VzPVt0aGlzLmNhY2hlXy5zb3VyY2VdKSx0aGlzLmNhY2hlXy5zcmM9dH0sZS5oYW5kbGVUZWNoU291cmNlc2V0Xz1mdW5jdGlvbihlKXt2YXIgaT10aGlzO2lmKCF0aGlzLmNoYW5naW5nU3JjXyl7dmFyIHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGkudXBkYXRlU291cmNlQ2FjaGVzXyhlKX0sbj10aGlzLmN1cnJlbnRTb3VyY2UoKS5zcmMscj1lLnNyYztpZihuJiYhL15ibG9iOi8udGVzdChuKSYmL15ibG9iOi8udGVzdChyKSYmKCF0aGlzLmxhc3RTb3VyY2VffHx0aGlzLmxhc3RTb3VyY2VfLnRlY2ghPT1yJiZ0aGlzLmxhc3RTb3VyY2VfLnBsYXllciE9PW4pJiYodD1mdW5jdGlvbigpe30pLHQociksIWUuc3JjKXt0aGlzLnRlY2hfLm9uZShbXCJzb3VyY2VzZXRcIixcImxvYWRzdGFydFwiXSxmdW5jdGlvbiBlKHQpe2lmKFwic291cmNlc2V0XCIhPT10LnR5cGUpe3ZhciBuPWkudGVjaEdldChcImN1cnJlbnRTcmNcIik7aS5sYXN0U291cmNlXy50ZWNoPW4saS51cGRhdGVTb3VyY2VDYWNoZXNfKG4pfWkudGVjaF8ub2ZmKFtcInNvdXJjZXNldFwiLFwibG9hZHN0YXJ0XCJdLGUpfSl9fXRoaXMubGFzdFNvdXJjZV89e3BsYXllcjp0aGlzLmN1cnJlbnRTb3VyY2UoKS5zcmMsdGVjaDplLnNyY30sdGhpcy50cmlnZ2VyKHtzcmM6ZS5zcmMsdHlwZTpcInNvdXJjZXNldFwifSl9LGUuaGFzU3RhcnRlZD1mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXJldHVybiB0aGlzLmhhc1N0YXJ0ZWRfO2UhPT10aGlzLmhhc1N0YXJ0ZWRfJiYodGhpcy5oYXNTdGFydGVkXz1lLHRoaXMuaGFzU3RhcnRlZF8/KHRoaXMuYWRkQ2xhc3MoXCJ2anMtaGFzLXN0YXJ0ZWRcIiksdGhpcy50cmlnZ2VyKFwiZmlyc3RwbGF5XCIpKTp0aGlzLnJlbW92ZUNsYXNzKFwidmpzLWhhcy1zdGFydGVkXCIpKX0sZS5oYW5kbGVUZWNoUGxheV89ZnVuY3Rpb24oKXt0aGlzLnJlbW92ZUNsYXNzKFwidmpzLWVuZGVkXCIpLHRoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtcGF1c2VkXCIpLHRoaXMuYWRkQ2xhc3MoXCJ2anMtcGxheWluZ1wiKSx0aGlzLmhhc1N0YXJ0ZWQoITApLHRoaXMudHJpZ2dlcihcInBsYXlcIil9LGUuaGFuZGxlVGVjaFJhdGVDaGFuZ2VfPWZ1bmN0aW9uKCl7MDx0aGlzLnRlY2hfLnBsYXliYWNrUmF0ZSgpJiYwPT09dGhpcy5jYWNoZV8ubGFzdFBsYXliYWNrUmF0ZSYmKHRoaXMucXVldWVkQ2FsbGJhY2tzXy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlLmNhbGxiYWNrKGUuZXZlbnQpfSksdGhpcy5xdWV1ZWRDYWxsYmFja3NfPVtdKSx0aGlzLmNhY2hlXy5sYXN0UGxheWJhY2tSYXRlPXRoaXMudGVjaF8ucGxheWJhY2tSYXRlKCksdGhpcy50cmlnZ2VyKFwicmF0ZWNoYW5nZVwiKX0sZS5oYW5kbGVUZWNoV2FpdGluZ189ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuYWRkQ2xhc3MoXCJ2anMtd2FpdGluZ1wiKSx0aGlzLnRyaWdnZXIoXCJ3YWl0aW5nXCIpO3ZhciBuPXRoaXMuY3VycmVudFRpbWUoKTt0aGlzLm9uKFwidGltZXVwZGF0ZVwiLGZ1bmN0aW9uIGUoKXtuIT09dC5jdXJyZW50VGltZSgpJiYodC5yZW1vdmVDbGFzcyhcInZqcy13YWl0aW5nXCIpLHQub2ZmKFwidGltZXVwZGF0ZVwiLGUpKX0pfSxlLmhhbmRsZVRlY2hDYW5QbGF5Xz1mdW5jdGlvbigpe3RoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtd2FpdGluZ1wiKSx0aGlzLnRyaWdnZXIoXCJjYW5wbGF5XCIpfSxlLmhhbmRsZVRlY2hDYW5QbGF5VGhyb3VnaF89ZnVuY3Rpb24oKXt0aGlzLnJlbW92ZUNsYXNzKFwidmpzLXdhaXRpbmdcIiksdGhpcy50cmlnZ2VyKFwiY2FucGxheXRocm91Z2hcIil9LGUuaGFuZGxlVGVjaFBsYXlpbmdfPWZ1bmN0aW9uKCl7dGhpcy5yZW1vdmVDbGFzcyhcInZqcy13YWl0aW5nXCIpLHRoaXMudHJpZ2dlcihcInBsYXlpbmdcIil9LGUuaGFuZGxlVGVjaFNlZWtpbmdfPWZ1bmN0aW9uKCl7dGhpcy5hZGRDbGFzcyhcInZqcy1zZWVraW5nXCIpLHRoaXMudHJpZ2dlcihcInNlZWtpbmdcIil9LGUuaGFuZGxlVGVjaFNlZWtlZF89ZnVuY3Rpb24oKXt0aGlzLnJlbW92ZUNsYXNzKFwidmpzLXNlZWtpbmdcIiksdGhpcy5yZW1vdmVDbGFzcyhcInZqcy1lbmRlZFwiKSx0aGlzLnRyaWdnZXIoXCJzZWVrZWRcIil9LGUuaGFuZGxlVGVjaEZpcnN0UGxheV89ZnVuY3Rpb24oKXt0aGlzLm9wdGlvbnNfLnN0YXJ0dGltZSYmKGcud2FybihcIlBhc3NpbmcgdGhlIGBzdGFydHRpbWVgIG9wdGlvbiB0byB0aGUgcGxheWVyIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiA2LjBcIiksdGhpcy5jdXJyZW50VGltZSh0aGlzLm9wdGlvbnNfLnN0YXJ0dGltZSkpLHRoaXMuYWRkQ2xhc3MoXCJ2anMtaGFzLXN0YXJ0ZWRcIiksdGhpcy50cmlnZ2VyKFwiZmlyc3RwbGF5XCIpfSxlLmhhbmRsZVRlY2hQYXVzZV89ZnVuY3Rpb24oKXt0aGlzLnJlbW92ZUNsYXNzKFwidmpzLXBsYXlpbmdcIiksdGhpcy5hZGRDbGFzcyhcInZqcy1wYXVzZWRcIiksdGhpcy50cmlnZ2VyKFwicGF1c2VcIil9LGUuaGFuZGxlVGVjaEVuZGVkXz1mdW5jdGlvbigpe3RoaXMuYWRkQ2xhc3MoXCJ2anMtZW5kZWRcIiksdGhpcy5vcHRpb25zXy5sb29wPyh0aGlzLmN1cnJlbnRUaW1lKDApLHRoaXMucGxheSgpKTp0aGlzLnBhdXNlZCgpfHx0aGlzLnBhdXNlKCksdGhpcy50cmlnZ2VyKFwiZW5kZWRcIil9LGUuaGFuZGxlVGVjaER1cmF0aW9uQ2hhbmdlXz1mdW5jdGlvbigpe3RoaXMuZHVyYXRpb24odGhpcy50ZWNoR2V0XyhcImR1cmF0aW9uXCIpKX0sZS5oYW5kbGVUZWNoQ2xpY2tfPWZ1bmN0aW9uKGUpe0coZSkmJnRoaXMuY29udHJvbHNfJiYodGhpcy5wYXVzZWQoKT9TdCh0aGlzLnBsYXkoKSk6dGhpcy5wYXVzZSgpKX0sZS5oYW5kbGVUZWNoRG91YmxlQ2xpY2tfPWZ1bmN0aW9uKHQpe3RoaXMuY29udHJvbHNfJiYoQXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbCh0aGlzLiQkKFwiLnZqcy1jb250cm9sLWJhciwgLnZqcy1tb2RhbC1kaWFsb2dcIiksZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29udGFpbnModC50YXJnZXQpfSl8fHZvaWQgMCE9PXRoaXMub3B0aW9uc18mJnZvaWQgMCE9PXRoaXMub3B0aW9uc18udXNlckFjdGlvbnMmJnZvaWQgMCE9PXRoaXMub3B0aW9uc18udXNlckFjdGlvbnMuZG91YmxlQ2xpY2smJiExPT09dGhpcy5vcHRpb25zXy51c2VyQWN0aW9ucy5kb3VibGVDbGlja3x8KHZvaWQgMCE9PXRoaXMub3B0aW9uc18mJnZvaWQgMCE9PXRoaXMub3B0aW9uc18udXNlckFjdGlvbnMmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMub3B0aW9uc18udXNlckFjdGlvbnMuZG91YmxlQ2xpY2s/dGhpcy5vcHRpb25zXy51c2VyQWN0aW9ucy5kb3VibGVDbGljay5jYWxsKHRoaXMsdCk6dGhpcy5pc0Z1bGxzY3JlZW4oKT90aGlzLmV4aXRGdWxsc2NyZWVuKCk6dGhpcy5yZXF1ZXN0RnVsbHNjcmVlbigpKSl9LGUuaGFuZGxlVGVjaFRhcF89ZnVuY3Rpb24oKXt0aGlzLnVzZXJBY3RpdmUoIXRoaXMudXNlckFjdGl2ZSgpKX0sZS5oYW5kbGVUZWNoVG91Y2hTdGFydF89ZnVuY3Rpb24oKXt0aGlzLnVzZXJXYXNBY3RpdmU9dGhpcy51c2VyQWN0aXZlKCl9LGUuaGFuZGxlVGVjaFRvdWNoTW92ZV89ZnVuY3Rpb24oKXt0aGlzLnVzZXJXYXNBY3RpdmUmJnRoaXMucmVwb3J0VXNlckFjdGl2aXR5KCl9LGUuaGFuZGxlVGVjaFRvdWNoRW5kXz1mdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCl9LGUuaGFuZGxlU3RhZ2VDbGlja189ZnVuY3Rpb24oKXt0aGlzLnJlcG9ydFVzZXJBY3Rpdml0eSgpfSxlLnRvZ2dsZUZ1bGxzY3JlZW5DbGFzc189ZnVuY3Rpb24oKXt0aGlzLmlzRnVsbHNjcmVlbigpP3RoaXMuYWRkQ2xhc3MoXCJ2anMtZnVsbHNjcmVlblwiKTp0aGlzLnJlbW92ZUNsYXNzKFwidmpzLWZ1bGxzY3JlZW5cIil9LGUuZG9jdW1lbnRGdWxsc2NyZWVuQ2hhbmdlXz1mdW5jdGlvbihlKXt2YXIgdD12dDt0aGlzLmlzRnVsbHNjcmVlbihkW3QuZnVsbHNjcmVlbkVsZW1lbnRdPT09dGhpcy5lbCgpfHx0aGlzLmVsKCkubWF0Y2hlcyhcIjpcIit0LmZ1bGxzY3JlZW4pKSwhMT09PXRoaXMuaXNGdWxsc2NyZWVuKCkmJmRlKGQsdC5mdWxsc2NyZWVuY2hhbmdlLHRoaXMuYm91bmREb2N1bWVudEZ1bGxzY3JlZW5DaGFuZ2VfKSxfdHx8dGhpcy50cmlnZ2VyKFwiZnVsbHNjcmVlbmNoYW5nZVwiKX0sZS5oYW5kbGVUZWNoRnVsbHNjcmVlbkNoYW5nZV89ZnVuY3Rpb24oZSx0KXt0JiZ0aGlzLmlzRnVsbHNjcmVlbih0LmlzRnVsbHNjcmVlbiksdGhpcy50cmlnZ2VyKFwiZnVsbHNjcmVlbmNoYW5nZVwiKX0sZS5oYW5kbGVUZWNoRXJyb3JfPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy50ZWNoXy5lcnJvcigpO3RoaXMuZXJyb3IoZSl9LGUuaGFuZGxlVGVjaFRleHREYXRhXz1mdW5jdGlvbigpe3ZhciBlPW51bGw7MTxhcmd1bWVudHMubGVuZ3RoJiYoZT1hcmd1bWVudHNbMV0pLHRoaXMudHJpZ2dlcihcInRleHRkYXRhXCIsZSl9LGUuZ2V0Q2FjaGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jYWNoZV99LGUucmVzZXRDYWNoZV89ZnVuY3Rpb24oKXt0aGlzLmNhY2hlXz17Y3VycmVudFRpbWU6MCxpbmFjdGl2aXR5VGltZW91dDp0aGlzLm9wdGlvbnNfLmluYWN0aXZpdHlUaW1lb3V0LGR1cmF0aW9uOk5hTixsYXN0Vm9sdW1lOjEsbGFzdFBsYXliYWNrUmF0ZTp0aGlzLmRlZmF1bHRQbGF5YmFja1JhdGUoKSxtZWRpYTpudWxsLHNyYzpcIlwiLHNvdXJjZTp7fSxzb3VyY2VzOltdLHZvbHVtZToxfX0sZS50ZWNoQ2FsbF89ZnVuY3Rpb24ocixzKXt0aGlzLnJlYWR5KGZ1bmN0aW9uKCl7aWYociBpbiBPbilyZXR1cm4gZT10aGlzLm1pZGRsZXdhcmVfLHQ9dGhpcy50ZWNoXyxpPXMsdFtuPXJdKGUucmVkdWNlKEluKG4pLGkpKTtpZihyIGluIERuKXJldHVybiBMbih0aGlzLm1pZGRsZXdhcmVfLHRoaXMudGVjaF8scixzKTt2YXIgZSx0LG4saTt0cnl7dGhpcy50ZWNoXyYmdGhpcy50ZWNoX1tyXShzKX1jYXRjaChlKXt0aHJvdyBnKGUpLGV9fSwhMCl9LGUudGVjaEdldF89ZnVuY3Rpb24odCl7aWYodGhpcy50ZWNoXyYmdGhpcy50ZWNoXy5pc1JlYWR5Xyl7aWYodCBpbiBObilyZXR1cm4gZT10aGlzLm1pZGRsZXdhcmVfLG49dGhpcy50ZWNoXyxpPXQsZS5yZWR1Y2VSaWdodChJbihpKSxuW2ldKCkpO2lmKHQgaW4gRG4pcmV0dXJuIExuKHRoaXMubWlkZGxld2FyZV8sdGhpcy50ZWNoXyx0KTt2YXIgZSxuLGk7dHJ5e3JldHVybiB0aGlzLnRlY2hfW3RdKCl9Y2F0Y2goZSl7aWYodm9pZCAwPT09dGhpcy50ZWNoX1t0XSl0aHJvdyBnKFwiVmlkZW8uanM6IFwiK3QrXCIgbWV0aG9kIG5vdCBkZWZpbmVkIGZvciBcIit0aGlzLnRlY2hOYW1lXytcIiBwbGF5YmFjayB0ZWNobm9sb2d5LlwiLGUpLGU7aWYoXCJUeXBlRXJyb3JcIj09PWUubmFtZSl0aHJvdyBnKFwiVmlkZW8uanM6IFwiK3QrXCIgdW5hdmFpbGFibGUgb24gXCIrdGhpcy50ZWNoTmFtZV8rXCIgcGxheWJhY2sgdGVjaG5vbG9neSBlbGVtZW50LlwiLGUpLHRoaXMudGVjaF8uaXNSZWFkeV89ITEsZTt0aHJvdyBnKGUpLGV9fX0sZS5wbGF5PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMub3B0aW9uc18uUHJvbWlzZXx8aC5Qcm9taXNlO3JldHVybiBlP25ldyBlKGZ1bmN0aW9uKGUpe3QucGxheV8oZSl9KTp0aGlzLnBsYXlfKCl9LGUucGxheV89ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt2b2lkIDA9PT1lJiYoZT1TdCksdGhpcy5wbGF5Q2FsbGJhY2tzXy5wdXNoKGUpO3ZhciBuPUJvb2xlYW4oIXRoaXMuY2hhbmdpbmdTcmNfJiYodGhpcy5zcmMoKXx8dGhpcy5jdXJyZW50U3JjKCkpKTtpZih0aGlzLndhaXRUb1BsYXlfJiYodGhpcy5vZmYoW1wicmVhZHlcIixcImxvYWRzdGFydFwiXSx0aGlzLndhaXRUb1BsYXlfKSx0aGlzLndhaXRUb1BsYXlfPW51bGwpLCF0aGlzLmlzUmVhZHlffHwhbilyZXR1cm4gdGhpcy53YWl0VG9QbGF5Xz1mdW5jdGlvbihlKXt0LnBsYXlfKCl9LHRoaXMub25lKFtcInJlYWR5XCIsXCJsb2Fkc3RhcnRcIl0sdGhpcy53YWl0VG9QbGF5Xyksdm9pZChufHwhYXQmJiFZZXx8dGhpcy5sb2FkKCkpO3ZhciBpPXRoaXMudGVjaEdldF8oXCJwbGF5XCIpO251bGw9PT1pP3RoaXMucnVuUGxheVRlcm1pbmF0ZWRRdWV1ZV8oKTp0aGlzLnJ1blBsYXlDYWxsYmFja3NfKGkpfSxlLnJ1blBsYXlUZXJtaW5hdGVkUXVldWVfPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wbGF5VGVybWluYXRlZFF1ZXVlXy5zbGljZSgwKTt0aGlzLnBsYXlUZXJtaW5hdGVkUXVldWVfPVtdLGUuZm9yRWFjaChmdW5jdGlvbihlKXtlKCl9KX0sZS5ydW5QbGF5Q2FsbGJhY2tzXz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLnBsYXlDYWxsYmFja3NfLnNsaWNlKDApO3RoaXMucGxheUNhbGxiYWNrc189W10sdGhpcy5wbGF5VGVybWluYXRlZFF1ZXVlXz1bXSxlLmZvckVhY2goZnVuY3Rpb24oZSl7ZSh0KX0pfSxlLnBhdXNlPWZ1bmN0aW9uKCl7dGhpcy50ZWNoQ2FsbF8oXCJwYXVzZVwiKX0sZS5wYXVzZWQ9ZnVuY3Rpb24oKXtyZXR1cm4hMSE9PXRoaXMudGVjaEdldF8oXCJwYXVzZWRcIil9LGUucGxheWVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGVjaEdldF8oXCJwbGF5ZWRcIil8fGR0KDAsMCl9LGUuc2NydWJiaW5nPWZ1bmN0aW9uKGUpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlKXJldHVybiB0aGlzLnNjcnViYmluZ187dGhpcy5zY3J1YmJpbmdfPSEhZSxlP3RoaXMuYWRkQ2xhc3MoXCJ2anMtc2NydWJiaW5nXCIpOnRoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtc2NydWJiaW5nXCIpfSxlLmN1cnJlbnRUaW1lPWZ1bmN0aW9uKGUpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBlPyhlPDAmJihlPTApLHZvaWQgdGhpcy50ZWNoQ2FsbF8oXCJzZXRDdXJyZW50VGltZVwiLGUpKToodGhpcy5jYWNoZV8uY3VycmVudFRpbWU9dGhpcy50ZWNoR2V0XyhcImN1cnJlbnRUaW1lXCIpfHwwLHRoaXMuY2FjaGVfLmN1cnJlbnRUaW1lKX0sZS5kdXJhdGlvbj1mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXJldHVybiB2b2lkIDAhPT10aGlzLmNhY2hlXy5kdXJhdGlvbj90aGlzLmNhY2hlXy5kdXJhdGlvbjpOYU47KGU9cGFyc2VGbG9hdChlKSk8MCYmKGU9MS8wKSxlIT09dGhpcy5jYWNoZV8uZHVyYXRpb24mJigodGhpcy5jYWNoZV8uZHVyYXRpb249ZSk9PT0xLzA/KHRoaXMuYWRkQ2xhc3MoXCJ2anMtbGl2ZVwiKSx0aGlzLm9wdGlvbnNfLmxpdmV1aSYmdGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyJiZ0aGlzLmFkZENsYXNzKFwidmpzLWxpdmV1aVwiKSk6KHRoaXMucmVtb3ZlQ2xhc3MoXCJ2anMtbGl2ZVwiKSx0aGlzLnJlbW92ZUNsYXNzKFwidmpzLWxpdmV1aVwiKSksaXNOYU4oZSl8fHRoaXMudHJpZ2dlcihcImR1cmF0aW9uY2hhbmdlXCIpKX0sZS5yZW1haW5pbmdUaW1lPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZHVyYXRpb24oKS10aGlzLmN1cnJlbnRUaW1lKCl9LGUucmVtYWluaW5nVGltZURpc3BsYXk9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5mbG9vcih0aGlzLmR1cmF0aW9uKCkpLU1hdGguZmxvb3IodGhpcy5jdXJyZW50VGltZSgpKX0sZS5idWZmZXJlZD1mdW5jdGlvbigpe3ZhciBlPXRoaXMudGVjaEdldF8oXCJidWZmZXJlZFwiKTtyZXR1cm4gZSYmZS5sZW5ndGh8fChlPWR0KDAsMCkpLGV9LGUuYnVmZmVyZWRQZXJjZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHB0KHRoaXMuYnVmZmVyZWQoKSx0aGlzLmR1cmF0aW9uKCkpfSxlLmJ1ZmZlcmVkRW5kPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5idWZmZXJlZCgpLHQ9dGhpcy5kdXJhdGlvbigpLG49ZS5lbmQoZS5sZW5ndGgtMSk7cmV0dXJuIHQ8biYmKG49dCksbn0sZS52b2x1bWU9ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIHZvaWQgMCE9PWU/KHQ9TWF0aC5tYXgoMCxNYXRoLm1pbigxLHBhcnNlRmxvYXQoZSkpKSx0aGlzLmNhY2hlXy52b2x1bWU9dCx0aGlzLnRlY2hDYWxsXyhcInNldFZvbHVtZVwiLHQpLHZvaWQoMDx0JiZ0aGlzLmxhc3RWb2x1bWVfKHQpKSk6KHQ9cGFyc2VGbG9hdCh0aGlzLnRlY2hHZXRfKFwidm9sdW1lXCIpKSxpc05hTih0KT8xOnQpfSxlLm11dGVkPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuIHRoaXMudGVjaEdldF8oXCJtdXRlZFwiKXx8ITE7dGhpcy50ZWNoQ2FsbF8oXCJzZXRNdXRlZFwiLGUpfSxlLmRlZmF1bHRNdXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwIT09ZT90aGlzLnRlY2hDYWxsXyhcInNldERlZmF1bHRNdXRlZFwiLGUpOnRoaXMudGVjaEdldF8oXCJkZWZhdWx0TXV0ZWRcIil8fCExfSxlLmxhc3RWb2x1bWVfPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWV8fDA9PT1lKXJldHVybiB0aGlzLmNhY2hlXy5sYXN0Vm9sdW1lO3RoaXMuY2FjaGVfLmxhc3RWb2x1bWU9ZX0sZS5zdXBwb3J0c0Z1bGxTY3JlZW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50ZWNoR2V0XyhcInN1cHBvcnRzRnVsbFNjcmVlblwiKXx8ITF9LGUuaXNGdWxsc2NyZWVuPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDAhPT1lPyh0aGlzLmlzRnVsbHNjcmVlbl89ISFlLHZvaWQgdGhpcy50b2dnbGVGdWxsc2NyZWVuQ2xhc3NfKCkpOiEhdGhpcy5pc0Z1bGxzY3JlZW5ffSxlLnJlcXVlc3RGdWxsc2NyZWVuPWZ1bmN0aW9uKCl7dmFyIGU9dnQ7dGhpcy5pc0Z1bGxzY3JlZW4oITApLGUucmVxdWVzdEZ1bGxzY3JlZW4/KGhlKGQsZS5mdWxsc2NyZWVuY2hhbmdlLHRoaXMuYm91bmREb2N1bWVudEZ1bGxzY3JlZW5DaGFuZ2VfKSx0aGlzLmVsX1tlLnJlcXVlc3RGdWxsc2NyZWVuXSgpKTp0aGlzLnRlY2hfLnN1cHBvcnRzRnVsbFNjcmVlbigpP3RoaXMudGVjaENhbGxfKFwiZW50ZXJGdWxsU2NyZWVuXCIpOih0aGlzLmVudGVyRnVsbFdpbmRvdygpLHRoaXMudHJpZ2dlcihcImZ1bGxzY3JlZW5jaGFuZ2VcIikpfSxlLmV4aXRGdWxsc2NyZWVuPWZ1bmN0aW9uKCl7dmFyIGU9dnQ7dGhpcy5pc0Z1bGxzY3JlZW4oITEpLGUucmVxdWVzdEZ1bGxzY3JlZW4/ZFtlLmV4aXRGdWxsc2NyZWVuXSgpOnRoaXMudGVjaF8uc3VwcG9ydHNGdWxsU2NyZWVuKCk/dGhpcy50ZWNoQ2FsbF8oXCJleGl0RnVsbFNjcmVlblwiKToodGhpcy5leGl0RnVsbFdpbmRvdygpLHRoaXMudHJpZ2dlcihcImZ1bGxzY3JlZW5jaGFuZ2VcIikpfSxlLmVudGVyRnVsbFdpbmRvdz1mdW5jdGlvbigpe3RoaXMuaXNGdWxsV2luZG93PSEwLHRoaXMuZG9jT3JpZ092ZXJmbG93PWQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLm92ZXJmbG93LGhlKGQsXCJrZXlkb3duXCIsdGhpcy5ib3VuZEZ1bGxXaW5kb3dPbkVzY0tleV8pLGQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLm92ZXJmbG93PVwiaGlkZGVuXCIsTShkLmJvZHksXCJ2anMtZnVsbC13aW5kb3dcIiksdGhpcy50cmlnZ2VyKFwiZW50ZXJGdWxsV2luZG93XCIpfSxlLmZ1bGxXaW5kb3dPbkVzY0tleT1mdW5jdGlvbihlKXtBdC5pc0V2ZW50S2V5KGUsXCJFc2NcIikmJighMD09PXRoaXMuaXNGdWxsc2NyZWVuKCk/dGhpcy5leGl0RnVsbHNjcmVlbigpOnRoaXMuZXhpdEZ1bGxXaW5kb3coKSl9LGUuZXhpdEZ1bGxXaW5kb3c9ZnVuY3Rpb24oKXt0aGlzLmlzRnVsbFdpbmRvdz0hMSxkZShkLFwia2V5ZG93blwiLHRoaXMuYm91bmRGdWxsV2luZG93T25Fc2NLZXlfKSxkLmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdz10aGlzLmRvY09yaWdPdmVyZmxvdyxMKGQuYm9keSxcInZqcy1mdWxsLXdpbmRvd1wiKSx0aGlzLnRyaWdnZXIoXCJleGl0RnVsbFdpbmRvd1wiKX0sZS5oYW5kbGVGb2N1cz1mdW5jdGlvbihlKXtkZShkLFwia2V5ZG93blwiLHRoaXMuYm91bmRIYW5kbGVLZXlQcmVzc18pLGhlKGQsXCJrZXlkb3duXCIsdGhpcy5ib3VuZEhhbmRsZUtleVByZXNzXyl9LGUuaGFuZGxlQmx1cj1mdW5jdGlvbihlKXtkZShkLFwia2V5ZG93blwiLHRoaXMuYm91bmRIYW5kbGVLZXlQcmVzc18pfSxlLmhhbmRsZUtleVByZXNzPWZ1bmN0aW9uKGUpe3RoaXMub3B0aW9uc18udXNlckFjdGlvbnMmJnRoaXMub3B0aW9uc18udXNlckFjdGlvbnMuaG90a2V5cyYmITEhPT10aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zLmhvdGtleXMmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zLmhvdGtleXM/dGhpcy5vcHRpb25zXy51c2VyQWN0aW9ucy5ob3RrZXlzLmNhbGwodGhpcyxlKTp0aGlzLmhhbmRsZUhvdGtleXMoZSkpfSxlLmhhbmRsZUhvdGtleXM9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5vcHRpb25zXy51c2VyQWN0aW9ucz90aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zLmhvdGtleXM6e30sbj10LmZ1bGxzY3JlZW5LZXksaT12b2lkIDA9PT1uP2Z1bmN0aW9uKGUpe3JldHVybiBBdC5pc0V2ZW50S2V5KGUsXCJmXCIpfTpuLHI9dC5tdXRlS2V5LHM9dm9pZCAwPT09cj9mdW5jdGlvbihlKXtyZXR1cm4gQXQuaXNFdmVudEtleShlLFwibVwiKX06cixvPXQucGxheVBhdXNlS2V5LGE9dm9pZCAwPT09bz9mdW5jdGlvbihlKXtyZXR1cm4gQXQuaXNFdmVudEtleShlLFwia1wiKXx8QXQuaXNFdmVudEtleShlLFwiU3BhY2VcIil9Om87aWYoaS5jYWxsKHRoaXMsZSkpe2UucHJldmVudERlZmF1bHQoKTt2YXIgbD1CZS5nZXRDb21wb25lbnQoXCJGdWxsc2NyZWVuVG9nZ2xlXCIpOyExIT09ZFt2dC5mdWxsc2NyZWVuRW5hYmxlZF0mJmwucHJvdG90eXBlLmhhbmRsZUNsaWNrLmNhbGwodGhpcyl9ZWxzZSBpZihzLmNhbGwodGhpcyxlKSl7ZS5wcmV2ZW50RGVmYXVsdCgpLEJlLmdldENvbXBvbmVudChcIk11dGVUb2dnbGVcIikucHJvdG90eXBlLmhhbmRsZUNsaWNrLmNhbGwodGhpcyl9ZWxzZSBpZihhLmNhbGwodGhpcyxlKSl7ZS5wcmV2ZW50RGVmYXVsdCgpLEJlLmdldENvbXBvbmVudChcIlBsYXlUb2dnbGVcIikucHJvdG90eXBlLmhhbmRsZUNsaWNrLmNhbGwodGhpcyl9fSxlLmNhblBsYXlUeXBlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPTAsaT10aGlzLm9wdGlvbnNfLnRlY2hPcmRlcjtuPGkubGVuZ3RoO24rKyl7dmFyIHI9aVtuXSxzPXhuLmdldFRlY2gocik7aWYoc3x8KHM9QmUuZ2V0Q29tcG9uZW50KHIpKSxzKXtpZihzLmlzU3VwcG9ydGVkKCkmJih0PXMuY2FuUGxheVR5cGUoZSkpKXJldHVybiB0fWVsc2UgZy5lcnJvcignVGhlIFwiJytyKydcIiB0ZWNoIGlzIHVuZGVmaW5lZC4gU2tpcHBlZCBicm93c2VyIHN1cHBvcnQgY2hlY2sgZm9yIHRoYXQgdGVjaC4nKX1yZXR1cm5cIlwifSxlLnNlbGVjdFNvdXJjZT1mdW5jdGlvbihlKXt2YXIgbixpPXRoaXMsdD10aGlzLm9wdGlvbnNfLnRlY2hPcmRlci5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuW2UseG4uZ2V0VGVjaChlKV19KS5maWx0ZXIoZnVuY3Rpb24oZSl7dmFyIHQ9ZVswXSxuPWVbMV07cmV0dXJuIG4/bi5pc1N1cHBvcnRlZCgpOihnLmVycm9yKCdUaGUgXCInK3QrJ1wiIHRlY2ggaXMgdW5kZWZpbmVkLiBTa2lwcGVkIGJyb3dzZXIgc3VwcG9ydCBjaGVjayBmb3IgdGhhdCB0ZWNoLicpLCExKX0pLHI9ZnVuY3Rpb24oZSxuLGkpe3ZhciByO3JldHVybiBlLnNvbWUoZnVuY3Rpb24odCl7cmV0dXJuIG4uc29tZShmdW5jdGlvbihlKXtpZihyPWkodCxlKSlyZXR1cm4hMH0pfSkscn0scz1mdW5jdGlvbihlLHQpe3ZhciBuPWVbMF07aWYoZVsxXS5jYW5QbGF5U291cmNlKHQsaS5vcHRpb25zX1tuLnRvTG93ZXJDYXNlKCldKSlyZXR1cm57c291cmNlOnQsdGVjaDpufX07cmV0dXJuKHRoaXMub3B0aW9uc18uc291cmNlT3JkZXI/cihlLHQsKG49cyxmdW5jdGlvbihlLHQpe3JldHVybiBuKHQsZSl9KSk6cih0LGUscykpfHwhMX0sZS5zcmM9ZnVuY3Rpb24oZSl7dmFyIHI9dGhpcztpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgZSlyZXR1cm4gdGhpcy5jYWNoZV8uc3JjfHxcIlwiO3ZhciBzPWZ1bmN0aW9uIHQoZSl7aWYoQXJyYXkuaXNBcnJheShlKSl7dmFyIG49W107ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2U9dChlKSxBcnJheS5pc0FycmF5KGUpP249bi5jb25jYXQoZSk6YihlKSYmbi5wdXNoKGUpfSksZT1ufWVsc2UgZT1cInN0cmluZ1wiPT10eXBlb2YgZSYmZS50cmltKCk/W0huKHtzcmM6ZX0pXTpiKGUpJiZcInN0cmluZ1wiPT10eXBlb2YgZS5zcmMmJmUuc3JjJiZlLnNyYy50cmltKCk/W0huKGUpXTpbXTtyZXR1cm4gZX0oZSk7cy5sZW5ndGg/KHRoaXMuY2hhbmdpbmdTcmNfPSEwLHRoaXMuY2FjaGVfLnNvdXJjZXM9cyx0aGlzLnVwZGF0ZVNvdXJjZUNhY2hlc18oc1swXSksTW4odGhpcyxzWzBdLGZ1bmN0aW9uKGUsdCl7dmFyIG4saTtpZihyLm1pZGRsZXdhcmVfPXQsci5jYWNoZV8uc291cmNlcz1zLHIudXBkYXRlU291cmNlQ2FjaGVzXyhlKSxyLnNyY18oZSkpcmV0dXJuIDE8cy5sZW5ndGg/ci5zcmMocy5zbGljZSgxKSk6KHIuY2hhbmdpbmdTcmNfPSExLHIuc2V0VGltZW91dChmdW5jdGlvbigpe3RoaXMuZXJyb3Ioe2NvZGU6NCxtZXNzYWdlOnRoaXMubG9jYWxpemUodGhpcy5vcHRpb25zXy5ub3RTdXBwb3J0ZWRNZXNzYWdlKX0pfSwwKSx2b2lkIHIudHJpZ2dlclJlYWR5KCkpO249dCxpPXIudGVjaF8sbi5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnNldFRlY2gmJmUuc2V0VGVjaChpKX0pfSkpOnRoaXMuc2V0VGltZW91dChmdW5jdGlvbigpe3RoaXMuZXJyb3Ioe2NvZGU6NCxtZXNzYWdlOnRoaXMubG9jYWxpemUodGhpcy5vcHRpb25zXy5ub3RTdXBwb3J0ZWRNZXNzYWdlKX0pfSwwKX0sZS5zcmNfPWZ1bmN0aW9uKGUpe3ZhciB0LG4saT10aGlzLHI9dGhpcy5zZWxlY3RTb3VyY2UoW2VdKTtyZXR1cm4hcnx8KHQ9ci50ZWNoLG49dGhpcy50ZWNoTmFtZV8sRmUodCkhPT1GZShuKT8odGhpcy5jaGFuZ2luZ1NyY189ITAsdGhpcy5sb2FkVGVjaF8oci50ZWNoLHIuc291cmNlKSx0aGlzLnRlY2hfLnJlYWR5KGZ1bmN0aW9uKCl7aS5jaGFuZ2luZ1NyY189ITF9KSk6dGhpcy5yZWFkeShmdW5jdGlvbigpe3RoaXMudGVjaF8uY29uc3RydWN0b3IucHJvdG90eXBlLmhhc093blByb3BlcnR5KFwic2V0U291cmNlXCIpP3RoaXMudGVjaENhbGxfKFwic2V0U291cmNlXCIsZSk6dGhpcy50ZWNoQ2FsbF8oXCJzcmNcIixlLnNyYyksdGhpcy5jaGFuZ2luZ1NyY189ITF9LCEwKSwhMSl9LGUubG9hZD1mdW5jdGlvbigpe3RoaXMudGVjaENhbGxfKFwibG9hZFwiKX0sZS5yZXNldD1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLm9wdGlvbnNfLlByb21pc2V8fGguUHJvbWlzZTt0aGlzLnBhdXNlZCgpfHwhdD90aGlzLmRvUmVzZXRfKCk6U3QodGhpcy5wbGF5KCkudGhlbihmdW5jdGlvbigpe3JldHVybiBlLmRvUmVzZXRfKCl9KSl9LGUuZG9SZXNldF89ZnVuY3Rpb24oKXt0aGlzLnRlY2hfJiZ0aGlzLnRlY2hfLmNsZWFyVHJhY2tzKFwidGV4dFwiKSx0aGlzLnJlc2V0Q2FjaGVfKCksdGhpcy5wb3N0ZXIoXCJcIiksdGhpcy5sb2FkVGVjaF8odGhpcy5vcHRpb25zXy50ZWNoT3JkZXJbMF0sbnVsbCksdGhpcy50ZWNoQ2FsbF8oXCJyZXNldFwiKSx0aGlzLnJlc2V0Q29udHJvbEJhclVJXygpLHdlKHRoaXMpJiZ0aGlzLnRyaWdnZXIoXCJwbGF5ZXJyZXNldFwiKX0sZS5yZXNldENvbnRyb2xCYXJVSV89ZnVuY3Rpb24oKXt0aGlzLnJlc2V0UHJvZ3Jlc3NCYXJfKCksdGhpcy5yZXNldFBsYXliYWNrUmF0ZV8oKSx0aGlzLnJlc2V0Vm9sdW1lQmFyXygpfSxlLnJlc2V0UHJvZ3Jlc3NCYXJfPWZ1bmN0aW9uKCl7dGhpcy5jdXJyZW50VGltZSgwKTt2YXIgZT10aGlzLmNvbnRyb2xCYXIsdD1lLmR1cmF0aW9uRGlzcGxheSxuPWUucmVtYWluaW5nVGltZURpc3BsYXk7dCYmdC51cGRhdGVDb250ZW50KCksbiYmbi51cGRhdGVDb250ZW50KCl9LGUucmVzZXRQbGF5YmFja1JhdGVfPWZ1bmN0aW9uKCl7dGhpcy5wbGF5YmFja1JhdGUodGhpcy5kZWZhdWx0UGxheWJhY2tSYXRlKCkpLHRoaXMuaGFuZGxlVGVjaFJhdGVDaGFuZ2VfKCl9LGUucmVzZXRWb2x1bWVCYXJfPWZ1bmN0aW9uKCl7dGhpcy52b2x1bWUoMSksdGhpcy50cmlnZ2VyKFwidm9sdW1lY2hhbmdlXCIpfSxlLmN1cnJlbnRTb3VyY2VzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jdXJyZW50U291cmNlKCksdD1bXTtyZXR1cm4gMCE9PU9iamVjdC5rZXlzKGUpLmxlbmd0aCYmdC5wdXNoKGUpLHRoaXMuY2FjaGVfLnNvdXJjZXN8fHR9LGUuY3VycmVudFNvdXJjZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNhY2hlXy5zb3VyY2V8fHt9fSxlLmN1cnJlbnRTcmM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdXJyZW50U291cmNlKCkmJnRoaXMuY3VycmVudFNvdXJjZSgpLnNyY3x8XCJcIn0sZS5jdXJyZW50VHlwZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmN1cnJlbnRTb3VyY2UoKSYmdGhpcy5jdXJyZW50U291cmNlKCkudHlwZXx8XCJcIn0sZS5wcmVsb2FkPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDAhPT1lPyh0aGlzLnRlY2hDYWxsXyhcInNldFByZWxvYWRcIixlKSx2b2lkKHRoaXMub3B0aW9uc18ucHJlbG9hZD1lKSk6dGhpcy50ZWNoR2V0XyhcInByZWxvYWRcIil9LGUuYXV0b3BsYXk9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4gdGhpcy5vcHRpb25zXy5hdXRvcGxheXx8ITE7dmFyIHQ7XCJzdHJpbmdcIj09dHlwZW9mIGUmJi8oYW55fHBsYXl8bXV0ZWQpLy50ZXN0KGUpPyh0aGlzLm9wdGlvbnNfLmF1dG9wbGF5PWUsdGhpcy5tYW51YWxBdXRvcGxheV8oZSksdD0hMSk6dGhpcy5vcHRpb25zXy5hdXRvcGxheT0hIWUsdD1cInVuZGVmaW5lZFwiPT10eXBlb2YgdD90aGlzLm9wdGlvbnNfLmF1dG9wbGF5OnQsdGhpcy50ZWNoXyYmdGhpcy50ZWNoQ2FsbF8oXCJzZXRBdXRvcGxheVwiLHQpfSxlLnBsYXlzaW5saW5lPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDAhPT1lPyh0aGlzLnRlY2hDYWxsXyhcInNldFBsYXlzaW5saW5lXCIsZSksdGhpcy5vcHRpb25zXy5wbGF5c2lubGluZT1lLHRoaXMpOnRoaXMudGVjaEdldF8oXCJwbGF5c2lubGluZVwiKX0sZS5sb29wPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDAhPT1lPyh0aGlzLnRlY2hDYWxsXyhcInNldExvb3BcIixlKSx2b2lkKHRoaXMub3B0aW9uc18ubG9vcD1lKSk6dGhpcy50ZWNoR2V0XyhcImxvb3BcIil9LGUucG9zdGVyPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuIHRoaXMucG9zdGVyXztlfHwoZT1cIlwiKSxlIT09dGhpcy5wb3N0ZXJfJiYodGhpcy5wb3N0ZXJfPWUsdGhpcy50ZWNoQ2FsbF8oXCJzZXRQb3N0ZXJcIixlKSx0aGlzLmlzUG9zdGVyRnJvbVRlY2hfPSExLHRoaXMudHJpZ2dlcihcInBvc3RlcmNoYW5nZVwiKSl9LGUuaGFuZGxlVGVjaFBvc3RlckNoYW5nZV89ZnVuY3Rpb24oKXtpZigoIXRoaXMucG9zdGVyX3x8dGhpcy5vcHRpb25zXy50ZWNoQ2FuT3ZlcnJpZGVQb3N0ZXIpJiZ0aGlzLnRlY2hfJiZ0aGlzLnRlY2hfLnBvc3Rlcil7dmFyIGU9dGhpcy50ZWNoXy5wb3N0ZXIoKXx8XCJcIjtlIT09dGhpcy5wb3N0ZXJfJiYodGhpcy5wb3N0ZXJfPWUsdGhpcy5pc1Bvc3RlckZyb21UZWNoXz0hMCx0aGlzLnRyaWdnZXIoXCJwb3N0ZXJjaGFuZ2VcIikpfX0sZS5jb250cm9scz1mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXJldHVybiEhdGhpcy5jb250cm9sc187ZT0hIWUsdGhpcy5jb250cm9sc18hPT1lJiYodGhpcy5jb250cm9sc189ZSx0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHMoKSYmdGhpcy50ZWNoQ2FsbF8oXCJzZXRDb250cm9sc1wiLGUpLHRoaXMuY29udHJvbHNfPyh0aGlzLnJlbW92ZUNsYXNzKFwidmpzLWNvbnRyb2xzLWRpc2FibGVkXCIpLHRoaXMuYWRkQ2xhc3MoXCJ2anMtY29udHJvbHMtZW5hYmxlZFwiKSx0aGlzLnRyaWdnZXIoXCJjb250cm9sc2VuYWJsZWRcIiksdGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzKCl8fHRoaXMuYWRkVGVjaENvbnRyb2xzTGlzdGVuZXJzXygpKToodGhpcy5yZW1vdmVDbGFzcyhcInZqcy1jb250cm9scy1lbmFibGVkXCIpLHRoaXMuYWRkQ2xhc3MoXCJ2anMtY29udHJvbHMtZGlzYWJsZWRcIiksdGhpcy50cmlnZ2VyKFwiY29udHJvbHNkaXNhYmxlZFwiKSx0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHMoKXx8dGhpcy5yZW1vdmVUZWNoQ29udHJvbHNMaXN0ZW5lcnNfKCkpKX0sZS51c2luZ05hdGl2ZUNvbnRyb2xzPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuISF0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHNfO2U9ISFlLHRoaXMudXNpbmdOYXRpdmVDb250cm9sc18hPT1lJiYodGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzXz1lLHRoaXMudXNpbmdOYXRpdmVDb250cm9sc18/KHRoaXMuYWRkQ2xhc3MoXCJ2anMtdXNpbmctbmF0aXZlLWNvbnRyb2xzXCIpLHRoaXMudHJpZ2dlcihcInVzaW5nbmF0aXZlY29udHJvbHNcIikpOih0aGlzLnJlbW92ZUNsYXNzKFwidmpzLXVzaW5nLW5hdGl2ZS1jb250cm9sc1wiKSx0aGlzLnRyaWdnZXIoXCJ1c2luZ2N1c3RvbWNvbnRyb2xzXCIpKSl9LGUuZXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWU/dGhpcy5lcnJvcl98fG51bGw6bnVsbD09PWU/KHRoaXMuZXJyb3JfPWUsdGhpcy5yZW1vdmVDbGFzcyhcInZqcy1lcnJvclwiKSx2b2lkKHRoaXMuZXJyb3JEaXNwbGF5JiZ0aGlzLmVycm9yRGlzcGxheS5jbG9zZSgpKSk6KHRoaXMuZXJyb3JfPW5ldyBUdChlKSx0aGlzLmFkZENsYXNzKFwidmpzLWVycm9yXCIpLGcuZXJyb3IoXCIoQ09ERTpcIit0aGlzLmVycm9yXy5jb2RlK1wiIFwiK1R0LmVycm9yVHlwZXNbdGhpcy5lcnJvcl8uY29kZV0rXCIpXCIsdGhpcy5lcnJvcl8ubWVzc2FnZSx0aGlzLmVycm9yXyksdm9pZCB0aGlzLnRyaWdnZXIoXCJlcnJvclwiKSl9LGUucmVwb3J0VXNlckFjdGl2aXR5PWZ1bmN0aW9uKGUpe3RoaXMudXNlckFjdGl2aXR5Xz0hMH0sZS51c2VyQWN0aXZlPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuIHRoaXMudXNlckFjdGl2ZV87aWYoKGU9ISFlKSE9PXRoaXMudXNlckFjdGl2ZV8pe2lmKHRoaXMudXNlckFjdGl2ZV89ZSx0aGlzLnVzZXJBY3RpdmVfKXJldHVybiB0aGlzLnVzZXJBY3Rpdml0eV89ITAsdGhpcy5yZW1vdmVDbGFzcyhcInZqcy11c2VyLWluYWN0aXZlXCIpLHRoaXMuYWRkQ2xhc3MoXCJ2anMtdXNlci1hY3RpdmVcIiksdm9pZCB0aGlzLnRyaWdnZXIoXCJ1c2VyYWN0aXZlXCIpO3RoaXMudGVjaF8mJnRoaXMudGVjaF8ub25lKFwibW91c2Vtb3ZlXCIsZnVuY3Rpb24oZSl7ZS5zdG9wUHJvcGFnYXRpb24oKSxlLnByZXZlbnREZWZhdWx0KCl9KSx0aGlzLnVzZXJBY3Rpdml0eV89ITEsdGhpcy5yZW1vdmVDbGFzcyhcInZqcy11c2VyLWFjdGl2ZVwiKSx0aGlzLmFkZENsYXNzKFwidmpzLXVzZXItaW5hY3RpdmVcIiksdGhpcy50cmlnZ2VyKFwidXNlcmluYWN0aXZlXCIpfX0sZS5saXN0ZW5Gb3JVc2VyQWN0aXZpdHlfPWZ1bmN0aW9uKCl7dmFyIHQsbixpLHI9Q2UodGhpcyx0aGlzLnJlcG9ydFVzZXJBY3Rpdml0eSk7dGhpcy5vbihcIm1vdXNlZG93blwiLGZ1bmN0aW9uKCl7cigpLHRoaXMuY2xlYXJJbnRlcnZhbCh0KSx0PXRoaXMuc2V0SW50ZXJ2YWwociwyNTApfSksdGhpcy5vbihcIm1vdXNlbW92ZVwiLGZ1bmN0aW9uKGUpe2Uuc2NyZWVuWD09PW4mJmUuc2NyZWVuWT09PWl8fChuPWUuc2NyZWVuWCxpPWUuc2NyZWVuWSxyKCkpfSksdGhpcy5vbihcIm1vdXNldXBcIixmdW5jdGlvbihlKXtyKCksdGhpcy5jbGVhckludGVydmFsKHQpfSk7dmFyIHMsZT10aGlzLmdldENoaWxkKFwiY29udHJvbEJhclwiKTshZXx8WWV8fEplfHwoZS5vbihcIm1vdXNlZW50ZXJcIixmdW5jdGlvbihlKXt0aGlzLnBsYXllcigpLmNhY2hlXy5pbmFjdGl2aXR5VGltZW91dD10aGlzLnBsYXllcigpLm9wdGlvbnNfLmluYWN0aXZpdHlUaW1lb3V0LHRoaXMucGxheWVyKCkub3B0aW9uc18uaW5hY3Rpdml0eVRpbWVvdXQ9MH0pLGUub24oXCJtb3VzZWxlYXZlXCIsZnVuY3Rpb24oZSl7dGhpcy5wbGF5ZXIoKS5vcHRpb25zXy5pbmFjdGl2aXR5VGltZW91dD10aGlzLnBsYXllcigpLmNhY2hlXy5pbmFjdGl2aXR5VGltZW91dH0pKSx0aGlzLm9uKFwia2V5ZG93blwiLHIpLHRoaXMub24oXCJrZXl1cFwiLHIpLHRoaXMuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtpZih0aGlzLnVzZXJBY3Rpdml0eV8pe3RoaXMudXNlckFjdGl2aXR5Xz0hMSx0aGlzLnVzZXJBY3RpdmUoITApLHRoaXMuY2xlYXJUaW1lb3V0KHMpO3ZhciBlPXRoaXMub3B0aW9uc18uaW5hY3Rpdml0eVRpbWVvdXQ7ZTw9MHx8KHM9dGhpcy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhpcy51c2VyQWN0aXZpdHlffHx0aGlzLnVzZXJBY3RpdmUoITEpfSxlKSl9fSwyNTApfSxlLnBsYXliYWNrUmF0ZT1mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXJldHVybiB0aGlzLnRlY2hfJiZ0aGlzLnRlY2hfLmZlYXR1cmVzUGxheWJhY2tSYXRlP3RoaXMuY2FjaGVfLmxhc3RQbGF5YmFja1JhdGV8fHRoaXMudGVjaEdldF8oXCJwbGF5YmFja1JhdGVcIik6MTt0aGlzLnRlY2hDYWxsXyhcInNldFBsYXliYWNrUmF0ZVwiLGUpfSxlLmRlZmF1bHRQbGF5YmFja1JhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMCE9PWU/dGhpcy50ZWNoQ2FsbF8oXCJzZXREZWZhdWx0UGxheWJhY2tSYXRlXCIsZSk6dGhpcy50ZWNoXyYmdGhpcy50ZWNoXy5mZWF0dXJlc1BsYXliYWNrUmF0ZT90aGlzLnRlY2hHZXRfKFwiZGVmYXVsdFBsYXliYWNrUmF0ZVwiKToxfSxlLmlzQXVkaW89ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4hIXRoaXMuaXNBdWRpb187dGhpcy5pc0F1ZGlvXz0hIWV9LGUuYWRkVGV4dFRyYWNrPWZ1bmN0aW9uKGUsdCxuKXtpZih0aGlzLnRlY2hfKXJldHVybiB0aGlzLnRlY2hfLmFkZFRleHRUcmFjayhlLHQsbil9LGUuYWRkUmVtb3RlVGV4dFRyYWNrPWZ1bmN0aW9uKGUsdCl7aWYodGhpcy50ZWNoXylyZXR1cm4gdGhpcy50ZWNoXy5hZGRSZW1vdGVUZXh0VHJhY2soZSx0KX0sZS5yZW1vdmVSZW1vdGVUZXh0VHJhY2s9ZnVuY3Rpb24oZSl7dm9pZCAwPT09ZSYmKGU9e30pO3ZhciB0PWUudHJhY2s7aWYodHx8KHQ9ZSksdGhpcy50ZWNoXylyZXR1cm4gdGhpcy50ZWNoXy5yZW1vdmVSZW1vdGVUZXh0VHJhY2sodCl9LGUuZ2V0VmlkZW9QbGF5YmFja1F1YWxpdHk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50ZWNoR2V0XyhcImdldFZpZGVvUGxheWJhY2tRdWFsaXR5XCIpfSxlLnZpZGVvV2lkdGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50ZWNoXyYmdGhpcy50ZWNoXy52aWRlb1dpZHRoJiZ0aGlzLnRlY2hfLnZpZGVvV2lkdGgoKXx8MH0sZS52aWRlb0hlaWdodD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRlY2hfJiZ0aGlzLnRlY2hfLnZpZGVvSGVpZ2h0JiZ0aGlzLnRlY2hfLnZpZGVvSGVpZ2h0KCl8fDB9LGUubGFuZ3VhZ2U9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4gdGhpcy5sYW5ndWFnZV87dGhpcy5sYW5ndWFnZV89U3RyaW5nKGUpLnRvTG93ZXJDYXNlKCl9LGUubGFuZ3VhZ2VzPWZ1bmN0aW9uKCl7cmV0dXJuIFJlKGMucHJvdG90eXBlLm9wdGlvbnNfLmxhbmd1YWdlcyx0aGlzLmxhbmd1YWdlc18pfSxlLnRvSlNPTj1mdW5jdGlvbigpe3ZhciBlPVJlKHRoaXMub3B0aW9uc18pLHQ9ZS50cmFja3M7ZS50cmFja3M9W107Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBpPXRbbl07KGk9UmUoaSkpLnBsYXllcj12b2lkIDAsZS50cmFja3Nbbl09aX1yZXR1cm4gZX0sZS5jcmVhdGVNb2RhbD1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7KHQ9dHx8e30pLmNvbnRlbnQ9ZXx8XCJcIjt2YXIgaT1uZXcgTHQodGhpcyx0KTtyZXR1cm4gdGhpcy5hZGRDaGlsZChpKSxpLm9uKFwiZGlzcG9zZVwiLGZ1bmN0aW9uKCl7bi5yZW1vdmVDaGlsZChpKX0pLGkub3BlbigpLGl9LGUudXBkYXRlQ3VycmVudEJyZWFrcG9pbnRfPWZ1bmN0aW9uKCl7aWYodGhpcy5yZXNwb25zaXZlKCkpZm9yKHZhciBlPXRoaXMuY3VycmVudEJyZWFrcG9pbnQoKSx0PXRoaXMuY3VycmVudFdpZHRoKCksbj0wO248RXIubGVuZ3RoO24rKyl7dmFyIGk9RXJbbl07aWYodDw9dGhpcy5icmVha3BvaW50c19baV0pe2lmKGU9PT1pKXJldHVybjtlJiZ0aGlzLnJlbW92ZUNsYXNzKFNyW2VdKSx0aGlzLmFkZENsYXNzKFNyW2ldKSx0aGlzLmJyZWFrcG9pbnRfPWk7YnJlYWt9fX0sZS5yZW1vdmVDdXJyZW50QnJlYWtwb2ludF89ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmN1cnJlbnRCcmVha3BvaW50Q2xhc3MoKTt0aGlzLmJyZWFrcG9pbnRfPVwiXCIsZSYmdGhpcy5yZW1vdmVDbGFzcyhlKX0sZS5icmVha3BvaW50cz1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZXx8KHRoaXMuYnJlYWtwb2ludF89XCJcIix0aGlzLmJyZWFrcG9pbnRzXz1tKHt9LHdyLGUpLHRoaXMudXBkYXRlQ3VycmVudEJyZWFrcG9pbnRfKCkpLG0odGhpcy5icmVha3BvaW50c18pfSxlLnJlc3BvbnNpdmU9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWU/dGhpcy5yZXNwb25zaXZlXzooZT1Cb29sZWFuKGUpKSE9PXRoaXMucmVzcG9uc2l2ZV8/KCh0aGlzLnJlc3BvbnNpdmVfPWUpPyh0aGlzLm9uKFwicGxheWVycmVzaXplXCIsdGhpcy51cGRhdGVDdXJyZW50QnJlYWtwb2ludF8pLHRoaXMudXBkYXRlQ3VycmVudEJyZWFrcG9pbnRfKCkpOih0aGlzLm9mZihcInBsYXllcnJlc2l6ZVwiLHRoaXMudXBkYXRlQ3VycmVudEJyZWFrcG9pbnRfKSx0aGlzLnJlbW92ZUN1cnJlbnRCcmVha3BvaW50XygpKSxlKTp2b2lkIDB9LGUuY3VycmVudEJyZWFrcG9pbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5icmVha3BvaW50X30sZS5jdXJyZW50QnJlYWtwb2ludENsYXNzPWZ1bmN0aW9uKCl7cmV0dXJuIFNyW3RoaXMuYnJlYWtwb2ludF9dfHxcIlwifSxlLmxvYWRNZWRpYT1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7aWYoZSYmXCJvYmplY3RcIj09dHlwZW9mIGUpe3RoaXMucmVzZXQoKSx0aGlzLmNhY2hlXy5tZWRpYT1SZShlKTt2YXIgaT10aGlzLmNhY2hlXy5tZWRpYSxyPWkuYXJ0d29yayxzPWkucG9zdGVyLG89aS5zcmMsYT1pLnRleHRUcmFja3M7IXImJnMmJih0aGlzLmNhY2hlXy5tZWRpYS5hcnR3b3JrPVt7c3JjOnMsdHlwZTpCbihzKX1dKSxvJiZ0aGlzLnNyYyhvKSxzJiZ0aGlzLnBvc3RlcihzKSxBcnJheS5pc0FycmF5KGEpJiZhLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIG4uYWRkUmVtb3RlVGV4dFRyYWNrKGUsITEpfSksdGhpcy5yZWFkeSh0KX19LGUuZ2V0TWVkaWE9ZnVuY3Rpb24oKXtpZih0aGlzLmNhY2hlXy5tZWRpYSlyZXR1cm4gUmUodGhpcy5jYWNoZV8ubWVkaWEpO3ZhciBlPXRoaXMucG9zdGVyKCksdD17c3JjOnRoaXMuY3VycmVudFNvdXJjZXMoKSx0ZXh0VHJhY2tzOkFycmF5LnByb3RvdHlwZS5tYXAuY2FsbCh0aGlzLnJlbW90ZVRleHRUcmFja3MoKSxmdW5jdGlvbihlKXtyZXR1cm57a2luZDplLmtpbmQsbGFiZWw6ZS5sYWJlbCxsYW5ndWFnZTplLmxhbmd1YWdlLHNyYzplLnNyY319KX07cmV0dXJuIGUmJih0LnBvc3Rlcj1lLHQuYXJ0d29yaz1be3NyYzp0LnBvc3Rlcix0eXBlOkJuKHQucG9zdGVyKX1dKSx0fSxjLmdldFRhZ1NldHRpbmdzPWZ1bmN0aW9uKGUpe3ZhciB0PXtzb3VyY2VzOltdLHRyYWNrczpbXX0sbj1EKGUpLGk9bltcImRhdGEtc2V0dXBcIl07aWYoQShlLFwidmpzLWZpbGxcIikmJihuLmZpbGw9ITApLEEoZSxcInZqcy1mbHVpZFwiKSYmKG4uZmx1aWQ9ITApLG51bGwhPT1pKXt2YXIgcj1DdChpfHxcInt9XCIpLHM9clswXSxvPXJbMV07cyYmZy5lcnJvcihzKSxtKG4sbyl9aWYobSh0LG4pLGUuaGFzQ2hpbGROb2RlcygpKWZvcih2YXIgYT1lLmNoaWxkTm9kZXMsbD0wLGM9YS5sZW5ndGg7bDxjO2wrKyl7dmFyIHU9YVtsXSxoPXUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNvdXJjZVwiPT09aD90LnNvdXJjZXMucHVzaChEKHUpKTpcInRyYWNrXCI9PT1oJiZ0LnRyYWNrcy5wdXNoKEQodSkpfXJldHVybiB0fSxlLmZsZXhOb3RTdXBwb3J0ZWRfPWZ1bmN0aW9uKCl7dmFyIGU9ZC5jcmVhdGVFbGVtZW50KFwiaVwiKTtyZXR1cm4hKFwiZmxleEJhc2lzXCJpbiBlLnN0eWxlfHxcIndlYmtpdEZsZXhCYXNpc1wiaW4gZS5zdHlsZXx8XCJtb3pGbGV4QmFzaXNcImluIGUuc3R5bGV8fFwibXNGbGV4QmFzaXNcImluIGUuc3R5bGV8fFwibXNGbGV4T3JkZXJcImluIGUuc3R5bGUpfSxjfShCZSk7U24ubmFtZXMuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1TbltlXTt4ci5wcm90b3R5cGVbdC5nZXR0ZXJOYW1lXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRlY2hfP3RoaXMudGVjaF9bdC5nZXR0ZXJOYW1lXSgpOih0aGlzW3QucHJpdmF0ZU5hbWVdPXRoaXNbdC5wcml2YXRlTmFtZV18fG5ldyB0Lkxpc3RDbGFzcyx0aGlzW3QucHJpdmF0ZU5hbWVdKX19KSx4ci5wbGF5ZXJzPXt9O3ZhciBqcj1oLm5hdmlnYXRvcjt4ci5wcm90b3R5cGUub3B0aW9uc189e3RlY2hPcmRlcjp4bi5kZWZhdWx0VGVjaE9yZGVyXyxodG1sNTp7fSxmbGFzaDp7fSxpbmFjdGl2aXR5VGltZW91dDoyZTMscGxheWJhY2tSYXRlczpbXSxsaXZldWk6ITEsY2hpbGRyZW46W1wibWVkaWFMb2FkZXJcIixcInBvc3RlckltYWdlXCIsXCJ0ZXh0VHJhY2tEaXNwbGF5XCIsXCJsb2FkaW5nU3Bpbm5lclwiLFwiYmlnUGxheUJ1dHRvblwiLFwibGl2ZVRyYWNrZXJcIixcImNvbnRyb2xCYXJcIixcImVycm9yRGlzcGxheVwiLFwidGV4dFRyYWNrU2V0dGluZ3NcIixcInJlc2l6ZU1hbmFnZXJcIl0sbGFuZ3VhZ2U6anImJihqci5sYW5ndWFnZXMmJmpyLmxhbmd1YWdlc1swXXx8anIudXNlckxhbmd1YWdlfHxqci5sYW5ndWFnZSl8fFwiZW5cIixsYW5ndWFnZXM6e30sbm90U3VwcG9ydGVkTWVzc2FnZTpcIk5vIGNvbXBhdGlibGUgc291cmNlIHdhcyBmb3VuZCBmb3IgdGhpcyBtZWRpYS5cIixicmVha3BvaW50czp7fSxyZXNwb25zaXZlOiExfSxbXCJlbmRlZFwiLFwic2Vla2luZ1wiLFwic2Vla2FibGVcIixcIm5ldHdvcmtTdGF0ZVwiLFwicmVhZHlTdGF0ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3hyLnByb3RvdHlwZVtlXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRlY2hHZXRfKGUpfX0pLGtyLmZvckVhY2goZnVuY3Rpb24oZSl7eHIucHJvdG90eXBlW1wiaGFuZGxlVGVjaFwiK0ZlKGUpK1wiX1wiXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRyaWdnZXIoZSl9fSksQmUucmVnaXN0ZXJDb21wb25lbnQoXCJQbGF5ZXJcIix4cik7dmFyIFByPVwicGx1Z2luXCIsQXI9XCJhY3RpdmVQbHVnaW5zX1wiLE1yPXt9LExyPWZ1bmN0aW9uKGUpe3JldHVybiBNci5oYXNPd25Qcm9wZXJ0eShlKX0sTnI9ZnVuY3Rpb24oZSl7cmV0dXJuIExyKGUpP01yW2VdOnZvaWQgMH0sT3I9ZnVuY3Rpb24oZSx0KXtlW0FyXT1lW0FyXXx8e30sZVtBcl1bdF09ITB9LERyPWZ1bmN0aW9uKGUsdCxuKXt2YXIgaT0obj9cImJlZm9yZVwiOlwiXCIpK1wicGx1Z2luc2V0dXBcIjtlLnRyaWdnZXIoaSx0KSxlLnRyaWdnZXIoaStcIjpcIit0Lm5hbWUsdCl9LElyPWZ1bmN0aW9uKHIscyl7cmV0dXJuIHMucHJvdG90eXBlLm5hbWU9cixmdW5jdGlvbigpe0RyKHRoaXMse25hbWU6cixwbHVnaW46cyxpbnN0YW5jZTpudWxsfSwhMCk7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSksbj0wO248ZTtuKyspdFtuXT1hcmd1bWVudHNbbl07dmFyIGk9byhzLFt0aGlzXS5jb25jYXQodCkpO3JldHVybiB0aGlzW3JdPWZ1bmN0aW9uKCl7cmV0dXJuIGl9LERyKHRoaXMsaS5nZXRFdmVudEhhc2goKSksaX19LEZyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gcyhlKXtpZih0aGlzLmNvbnN0cnVjdG9yPT09cyl0aHJvdyBuZXcgRXJyb3IoXCJQbHVnaW4gbXVzdCBiZSBzdWItY2xhc3NlZDsgbm90IGRpcmVjdGx5IGluc3RhbnRpYXRlZC5cIik7dGhpcy5wbGF5ZXI9ZSxPZSh0aGlzKSxkZWxldGUgdGhpcy50cmlnZ2VyLEllKHRoaXMsdGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0U3RhdGUpLE9yKGUsdGhpcy5uYW1lKSx0aGlzLmRpc3Bvc2U9Q2UodGhpcyx0aGlzLmRpc3Bvc2UpLGUub24oXCJkaXNwb3NlXCIsdGhpcy5kaXNwb3NlKX12YXIgZT1zLnByb3RvdHlwZTtyZXR1cm4gZS52ZXJzaW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IuVkVSU0lPTn0sZS5nZXRFdmVudEhhc2g9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPXt9KSxlLm5hbWU9dGhpcy5uYW1lLGUucGx1Z2luPXRoaXMuY29uc3RydWN0b3IsZS5pbnN0YW5jZT10aGlzLGV9LGUudHJpZ2dlcj1mdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10JiYodD17fSkscGUodGhpcy5ldmVudEJ1c0VsXyxlLHRoaXMuZ2V0RXZlbnRIYXNoKHQpKX0sZS5oYW5kbGVTdGF0ZUNoYW5nZWQ9ZnVuY3Rpb24oZSl7fSxlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm5hbWUsdD10aGlzLnBsYXllcjt0aGlzLnRyaWdnZXIoXCJkaXNwb3NlXCIpLHRoaXMub2ZmKCksdC5vZmYoXCJkaXNwb3NlXCIsdGhpcy5kaXNwb3NlKSx0W0FyXVtlXT0hMSx0aGlzLnBsYXllcj10aGlzLnN0YXRlPW51bGwsdFtlXT1JcihlLE1yW2VdKX0scy5pc0Jhc2ljPWZ1bmN0aW9uKGUpe3ZhciB0PVwic3RyaW5nXCI9PXR5cGVvZiBlP05yKGUpOmU7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmIXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YodC5wcm90b3R5cGUpfSxzLnJlZ2lzdGVyUGx1Z2luPWZ1bmN0aW9uKGUsdCl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIHBsdWdpbiBuYW1lLCBcIicrZSsnXCIsIG11c3QgYmUgYSBzdHJpbmcsIHdhcyAnK3R5cGVvZiBlK1wiLlwiKTtpZihMcihlKSlnLndhcm4oJ0EgcGx1Z2luIG5hbWVkIFwiJytlKydcIiBhbHJlYWR5IGV4aXN0cy4gWW91IG1heSB3YW50IHRvIGF2b2lkIHJlLXJlZ2lzdGVyaW5nIHBsdWdpbnMhJyk7ZWxzZSBpZih4ci5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoZSkpdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIHBsdWdpbiBuYW1lLCBcIicrZSsnXCIsIGNhbm5vdCBzaGFyZSBhIG5hbWUgd2l0aCBhbiBleGlzdGluZyBwbGF5ZXIgbWV0aG9kIScpO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIHBsdWdpbiBmb3IgXCInK2UrJ1wiLCBtdXN0IGJlIGEgZnVuY3Rpb24sIHdhcyAnK3R5cGVvZiB0K1wiLlwiKTt2YXIgbixpLHI7cmV0dXJuIE1yW2VdPXQsZSE9PVByJiYocy5pc0Jhc2ljKHQpP3hyLnByb3RvdHlwZVtlXT0obj1lLGk9dCxyPWZ1bmN0aW9uKCl7RHIodGhpcyx7bmFtZTpuLHBsdWdpbjppLGluc3RhbmNlOm51bGx9LCEwKTt2YXIgZT1pLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gT3IodGhpcyxuKSxEcih0aGlzLHtuYW1lOm4scGx1Z2luOmksaW5zdGFuY2U6ZX0pLGV9LE9iamVjdC5rZXlzKGkpLmZvckVhY2goZnVuY3Rpb24oZSl7cltlXT1pW2VdfSkscik6eHIucHJvdG90eXBlW2VdPUlyKGUsdCkpLHR9LHMuZGVyZWdpc3RlclBsdWdpbj1mdW5jdGlvbihlKXtpZihlPT09UHIpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGRlLXJlZ2lzdGVyIGJhc2UgcGx1Z2luLlwiKTtMcihlKSYmKGRlbGV0ZSBNcltlXSxkZWxldGUgeHIucHJvdG90eXBlW2VdKX0scy5nZXRQbHVnaW5zPWZ1bmN0aW9uKGUpe3ZhciBuO3JldHVybiB2b2lkIDA9PT1lJiYoZT1PYmplY3Qua2V5cyhNcikpLGUuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1OcihlKTt0JiYoKG49bnx8e30pW2VdPXQpfSksbn0scy5nZXRQbHVnaW5WZXJzaW9uPWZ1bmN0aW9uKGUpe3ZhciB0PU5yKGUpO3JldHVybiB0JiZ0LlZFUlNJT058fFwiXCJ9LHN9KCk7RnIuZ2V0UGx1Z2luPU5yLEZyLkJBU0VfUExVR0lOX05BTUU9UHIsRnIucmVnaXN0ZXJQbHVnaW4oUHIsRnIpLHhyLnByb3RvdHlwZS51c2luZ1BsdWdpbj1mdW5jdGlvbihlKXtyZXR1cm4hIXRoaXNbQXJdJiYhMD09PXRoaXNbQXJdW2VdfSx4ci5wcm90b3R5cGUuaGFzUGx1Z2luPWZ1bmN0aW9uKGUpe3JldHVybiEhTHIoZSl9O3ZhciBScj1mdW5jdGlvbihlKXtyZXR1cm4gMD09PWUuaW5kZXhPZihcIiNcIik/ZS5zbGljZSgxKTplfTtmdW5jdGlvbiBCcihlLG4sdCl7dmFyIGk9QnIuZ2V0UGxheWVyKGUpO2lmKGkpcmV0dXJuIG4mJmcud2FybignUGxheWVyIFwiJytlKydcIiBpcyBhbHJlYWR5IGluaXRpYWxpc2VkLiBPcHRpb25zIHdpbGwgbm90IGJlIGFwcGxpZWQuJyksdCYmaS5yZWFkeSh0KSxpO3ZhciByPVwic3RyaW5nXCI9PXR5cGVvZiBlP1koXCIjXCIrUnIoZSkpOmU7aWYoIUUocikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBlbGVtZW50IG9yIElEIHN1cHBsaWVkIGlzIG5vdCB2YWxpZC4gKHZpZGVvanMpXCIpO3Iub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyYmci5vd25lckRvY3VtZW50LmJvZHkuY29udGFpbnMocil8fGcud2FybihcIlRoZSBlbGVtZW50IHN1cHBsaWVkIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgRE9NXCIpLG49bnx8e30sQnIuaG9va3MoXCJiZWZvcmVzZXR1cFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PWUocixSZShuKSk7Yih0KSYmIUFycmF5LmlzQXJyYXkodCk/bj1SZShuLHQpOmcuZXJyb3IoXCJwbGVhc2UgcmV0dXJuIGFuIG9iamVjdCBpbiBiZWZvcmVzZXR1cCBob29rc1wiKX0pO3ZhciBzPUJlLmdldENvbXBvbmVudChcIlBsYXllclwiKTtyZXR1cm4gaT1uZXcgcyhyLG4sdCksQnIuaG9va3MoXCJzZXR1cFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlKGkpfSksaX1pZihCci5ob29rc189e30sQnIuaG9va3M9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gQnIuaG9va3NfW2VdPUJyLmhvb2tzX1tlXXx8W10sdCYmKEJyLmhvb2tzX1tlXT1Cci5ob29rc19bZV0uY29uY2F0KHQpKSxCci5ob29rc19bZV19LEJyLmhvb2s9ZnVuY3Rpb24oZSx0KXtCci5ob29rcyhlLHQpfSxCci5ob29rT25jZT1mdW5jdGlvbihuLGUpe0JyLmhvb2tzKG4sW10uY29uY2F0KGUpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24gZSgpe3JldHVybiBCci5yZW1vdmVIb29rKG4sZSksdC5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX19KSl9LEJyLnJlbW92ZUhvb2s9ZnVuY3Rpb24oZSx0KXt2YXIgbj1Cci5ob29rcyhlKS5pbmRleE9mKHQpO3JldHVybiEobjw9LTEpJiYoQnIuaG9va3NfW2VdPUJyLmhvb2tzX1tlXS5zbGljZSgpLEJyLmhvb2tzX1tlXS5zcGxpY2UobiwxKSwhMCl9LCEwIT09aC5WSURFT0pTX05PX0RZTkFNSUNfU1RZTEUmJkMoKSl7dmFyIEhyPVkoXCIudmpzLXN0eWxlcy1kZWZhdWx0c1wiKTtpZighSHIpe0hyPVRlKFwidmpzLXN0eWxlcy1kZWZhdWx0c1wiKTt2YXIgVnI9WShcImhlYWRcIik7VnImJlZyLmluc2VydEJlZm9yZShIcixWci5maXJzdENoaWxkKSxrZShIcixcIlxcbiAgICAgIC52aWRlby1qcyB7XFxuICAgICAgICB3aWR0aDogMzAwcHg7XFxuICAgICAgICBoZWlnaHQ6IDE1MHB4O1xcbiAgICAgIH1cXG5cXG4gICAgICAudmpzLWZsdWlkIHtcXG4gICAgICAgIHBhZGRpbmctdG9wOiA1Ni4yNSVcXG4gICAgICB9XFxuICAgIFwiKX19cmV0dXJuIG1lKDEsQnIpLEJyLlZFUlNJT049cCxCci5vcHRpb25zPXhyLnByb3RvdHlwZS5vcHRpb25zXyxCci5nZXRQbGF5ZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIHhyLnBsYXllcnN9LEJyLmdldFBsYXllcj1mdW5jdGlvbihlKXt2YXIgdCxuPXhyLnBsYXllcnM7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe3ZhciBpPVJyKGUpLHI9bltpXTtpZihyKXJldHVybiByO3Q9WShcIiNcIitpKX1lbHNlIHQ9ZTtpZihFKHQpKXt2YXIgcz10LG89cy5wbGF5ZXIsYT1zLnBsYXllcklkO2lmKG98fG5bYV0pcmV0dXJuIG98fG5bYV19fSxCci5nZXRBbGxQbGF5ZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5rZXlzKHhyLnBsYXllcnMpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4geHIucGxheWVyc1tlXX0pLmZpbHRlcihCb29sZWFuKX0sQnIucGxheWVycz14ci5wbGF5ZXJzLEJyLmdldENvbXBvbmVudD1CZS5nZXRDb21wb25lbnQsQnIucmVnaXN0ZXJDb21wb25lbnQ9ZnVuY3Rpb24oZSx0KXt4bi5pc1RlY2godCkmJmcud2FybihcIlRoZSBcIitlK1wiIHRlY2ggd2FzIHJlZ2lzdGVyZWQgYXMgYSBjb21wb25lbnQuIEl0IHNob3VsZCBpbnN0ZWFkIGJlIHJlZ2lzdGVyZWQgdXNpbmcgdmlkZW9qcy5yZWdpc3RlclRlY2gobmFtZSwgdGVjaClcIiksQmUucmVnaXN0ZXJDb21wb25lbnQuY2FsbChCZSxlLHQpfSxCci5nZXRUZWNoPXhuLmdldFRlY2gsQnIucmVnaXN0ZXJUZWNoPXhuLnJlZ2lzdGVyVGVjaCxCci51c2U9ZnVuY3Rpb24oZSx0KXtqbltlXT1qbltlXXx8W10sam5bZV0ucHVzaCh0KX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KEJyLFwibWlkZGxld2FyZVwiLHt2YWx1ZTp7fSx3cml0ZWFibGU6ITEsZW51bWVyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCci5taWRkbGV3YXJlLFwiVEVSTUlOQVRPUlwiLHt2YWx1ZTpBbix3cml0ZWFibGU6ITEsZW51bWVyYWJsZTohMH0pLEJyLmJyb3dzZXI9Y3QsQnIuVE9VQ0hfRU5BQkxFRD1sdCxCci5leHRlbmQ9ZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT10JiYodD17fSk7dmFyIG49ZnVuY3Rpb24oKXtlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0saT17fTtmb3IodmFyIHIgaW5cIm9iamVjdFwiPT10eXBlb2YgdD8odC5jb25zdHJ1Y3RvciE9PU9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3ImJihuPXQuY29uc3RydWN0b3IpLGk9dCk6XCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKG49dCksZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKGUuc3VwZXJfPXQpfShuLGUpLGkpaS5oYXNPd25Qcm9wZXJ0eShyKSYmKG4ucHJvdG90eXBlW3JdPWlbcl0pO3JldHVybiBufSxCci5tZXJnZU9wdGlvbnM9UmUsQnIuYmluZD1DZSxCci5yZWdpc3RlclBsdWdpbj1Gci5yZWdpc3RlclBsdWdpbixCci5kZXJlZ2lzdGVyUGx1Z2luPUZyLmRlcmVnaXN0ZXJQbHVnaW4sQnIucGx1Z2luPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGcud2FybihcInZpZGVvanMucGx1Z2luKCkgaXMgZGVwcmVjYXRlZDsgdXNlIHZpZGVvanMucmVnaXN0ZXJQbHVnaW4oKSBpbnN0ZWFkXCIpLEZyLnJlZ2lzdGVyUGx1Z2luKGUsdCl9LEJyLmdldFBsdWdpbnM9RnIuZ2V0UGx1Z2lucyxCci5nZXRQbHVnaW49RnIuZ2V0UGx1Z2luLEJyLmdldFBsdWdpblZlcnNpb249RnIuZ2V0UGx1Z2luVmVyc2lvbixCci5hZGRMYW5ndWFnZT1mdW5jdGlvbihlLHQpe3ZhciBuO3JldHVybiBlPShcIlwiK2UpLnRvTG93ZXJDYXNlKCksQnIub3B0aW9ucy5sYW5ndWFnZXM9UmUoQnIub3B0aW9ucy5sYW5ndWFnZXMsKChuPXt9KVtlXT10LG4pKSxCci5vcHRpb25zLmxhbmd1YWdlc1tlXX0sQnIubG9nPWcsQnIuY3JlYXRlTG9nZ2VyPXksQnIuY3JlYXRlVGltZVJhbmdlPUJyLmNyZWF0ZVRpbWVSYW5nZXM9ZHQsQnIuZm9ybWF0VGltZT1uaSxCci5zZXRGb3JtYXRUaW1lPWZ1bmN0aW9uKGUpe3RpPWV9LEJyLnJlc2V0Rm9ybWF0VGltZT1mdW5jdGlvbigpe3RpPWVpfSxCci5wYXJzZVVybD1YdCxCci5pc0Nyb3NzT3JpZ2luPVl0LEJyLkV2ZW50VGFyZ2V0PVNlLEJyLm9uPWhlLEJyLm9uZT1mZSxCci5vZmY9ZGUsQnIudHJpZ2dlcj1wZSxCci54aHI9Zm4sQnIuVGV4dFRyYWNrPW1uLEJyLkF1ZGlvVHJhY2s9Ym4sQnIuVmlkZW9UcmFjaz1UbixbXCJpc0VsXCIsXCJpc1RleHROb2RlXCIsXCJjcmVhdGVFbFwiLFwiaGFzQ2xhc3NcIixcImFkZENsYXNzXCIsXCJyZW1vdmVDbGFzc1wiLFwidG9nZ2xlQ2xhc3NcIixcInNldEF0dHJpYnV0ZXNcIixcImdldEF0dHJpYnV0ZXNcIixcImVtcHR5RWxcIixcImFwcGVuZENvbnRlbnRcIixcImluc2VydENvbnRlbnRcIl0uZm9yRWFjaChmdW5jdGlvbihlKXtCcltlXT1mdW5jdGlvbigpe3JldHVybiBnLndhcm4oXCJ2aWRlb2pzLlwiK2UrXCIoKSBpcyBkZXByZWNhdGVkOyB1c2UgdmlkZW9qcy5kb20uXCIrZStcIigpIGluc3RlYWRcIiksSltlXS5hcHBseShudWxsLGFyZ3VtZW50cyl9fSksQnIuY29tcHV0ZWRTdHlsZT1pLEJyLmRvbT1KLEJyLnVybD1RdCxCcn0pOyJdfQ==