"use strict";

/*!
 * long-press.js
 * Pure JavaScript long-press event
 * https://github.com/john-doherty/long-press
 * @author John Doherty <www.johndoherty.info>
 * @license MIT
 */
!function (t, e) {
  "use strict";
  function n() {
    this.dispatchEvent(new CustomEvent("long-press", { bubbles: !0, cancelable: !0 })), clearTimeout(o), console && console.log && console.log("long-press fired on " + this.outerHTML);
  }var o = null,
      u = "ontouchstart" in t || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0,
      s = u ? "touchstart" : "mousedown",
      i = u ? "touchcancel" : "mouseout",
      a = u ? "touchend" : "mouseup",
      c = u ? "touchmove" : "mousemove";"initCustomEvent" in e.createEvent("CustomEvent") && (t.CustomEvent = function (t, n) {
    n = n || { bubbles: !1, cancelable: !1, detail: void 0 };var o = e.createEvent("CustomEvent");return o.initCustomEvent(t, n.bubbles, n.cancelable, n.detail), o;
  }, t.CustomEvent.prototype = t.Event.prototype), e.addEventListener(s, function (t) {
    var e = t.target,
        u = parseInt(e.getAttribute("data-long-press-delay") || "1500", 10);o = setTimeout(n.bind(e), u);
  }), e.addEventListener(a, function (t) {
    clearTimeout(o);
  }), e.addEventListener(i, function (t) {
    clearTimeout(o);
  }), e.addEventListener(c, function (t) {
    clearTimeout(o);
  });
}(undefined, document);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvbmctcHJlc3MubWluLmpzIl0sIm5hbWVzIjpbInQiLCJlIiwibiIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2xlYXJUaW1lb3V0IiwibyIsImNvbnNvbGUiLCJsb2ciLCJvdXRlckhUTUwiLCJ1IiwibmF2aWdhdG9yIiwiTWF4VG91Y2hQb2ludHMiLCJtc01heFRvdWNoUG9pbnRzIiwicyIsImkiLCJhIiwiYyIsImNyZWF0ZUV2ZW50IiwiZGV0YWlsIiwiaW5pdEN1c3RvbUV2ZW50IiwicHJvdG90eXBlIiwiRXZlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwidGFyZ2V0IiwicGFyc2VJbnQiLCJnZXRBdHRyaWJ1dGUiLCJzZXRUaW1lb3V0IiwiYmluZCIsImRvY3VtZW50Il0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBT0EsQ0FBQyxVQUFTQSxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDO0FBQWEsV0FBU0MsQ0FBVCxHQUFZO0FBQUMsU0FBS0MsYUFBTCxDQUFtQixJQUFJQyxXQUFKLENBQWdCLFlBQWhCLEVBQTZCLEVBQUNDLFNBQVEsQ0FBQyxDQUFWLEVBQVlDLFlBQVcsQ0FBQyxDQUF4QixFQUE3QixDQUFuQixHQUE2RUMsYUFBYUMsQ0FBYixDQUE3RSxFQUE2RkMsV0FBU0EsUUFBUUMsR0FBakIsSUFBc0JELFFBQVFDLEdBQVIsQ0FBWSx5QkFBdUIsS0FBS0MsU0FBeEMsQ0FBbkg7QUFBc0ssT0FBSUgsSUFBRSxJQUFOO0FBQUEsTUFBV0ksSUFBRSxrQkFBaUJaLENBQWpCLElBQW9CYSxVQUFVQyxjQUFWLEdBQXlCLENBQTdDLElBQWdERCxVQUFVRSxnQkFBVixHQUEyQixDQUF4RjtBQUFBLE1BQTBGQyxJQUFFSixJQUFFLFlBQUYsR0FBZSxXQUEzRztBQUFBLE1BQXVISyxJQUFFTCxJQUFFLGFBQUYsR0FBZ0IsVUFBekk7QUFBQSxNQUFvSk0sSUFBRU4sSUFBRSxVQUFGLEdBQWEsU0FBbks7QUFBQSxNQUE2S08sSUFBRVAsSUFBRSxXQUFGLEdBQWMsV0FBN0wsQ0FBeU0scUJBQW9CWCxFQUFFbUIsV0FBRixDQUFjLGFBQWQsQ0FBcEIsS0FBbURwQixFQUFFSSxXQUFGLEdBQWMsVUFBU0osQ0FBVCxFQUFXRSxDQUFYLEVBQWE7QUFBQ0EsUUFBRUEsS0FBRyxFQUFDRyxTQUFRLENBQUMsQ0FBVixFQUFZQyxZQUFXLENBQUMsQ0FBeEIsRUFBMEJlLFFBQU8sS0FBSyxDQUF0QyxFQUFMLENBQThDLElBQUliLElBQUVQLEVBQUVtQixXQUFGLENBQWMsYUFBZCxDQUFOLENBQW1DLE9BQU9aLEVBQUVjLGVBQUYsQ0FBa0J0QixDQUFsQixFQUFvQkUsRUFBRUcsT0FBdEIsRUFBOEJILEVBQUVJLFVBQWhDLEVBQTJDSixFQUFFbUIsTUFBN0MsR0FBcURiLENBQTVEO0FBQThELEdBQTNLLEVBQTRLUixFQUFFSSxXQUFGLENBQWNtQixTQUFkLEdBQXdCdkIsRUFBRXdCLEtBQUYsQ0FBUUQsU0FBL1AsR0FBMFF0QixFQUFFd0IsZ0JBQUYsQ0FBbUJULENBQW5CLEVBQXFCLFVBQVNoQixDQUFULEVBQVc7QUFBQyxRQUFJQyxJQUFFRCxFQUFFMEIsTUFBUjtBQUFBLFFBQWVkLElBQUVlLFNBQVMxQixFQUFFMkIsWUFBRixDQUFlLHVCQUFmLEtBQXlDLE1BQWxELEVBQXlELEVBQXpELENBQWpCLENBQThFcEIsSUFBRXFCLFdBQVczQixFQUFFNEIsSUFBRixDQUFPN0IsQ0FBUCxDQUFYLEVBQXFCVyxDQUFyQixDQUFGO0FBQTBCLEdBQXpJLENBQTFRLEVBQXFaWCxFQUFFd0IsZ0JBQUYsQ0FBbUJQLENBQW5CLEVBQXFCLFVBQVNsQixDQUFULEVBQVc7QUFBQ08saUJBQWFDLENBQWI7QUFBZ0IsR0FBakQsQ0FBclosRUFBd2NQLEVBQUV3QixnQkFBRixDQUFtQlIsQ0FBbkIsRUFBcUIsVUFBU2pCLENBQVQsRUFBVztBQUFDTyxpQkFBYUMsQ0FBYjtBQUFnQixHQUFqRCxDQUF4YyxFQUEyZlAsRUFBRXdCLGdCQUFGLENBQW1CTixDQUFuQixFQUFxQixVQUFTbkIsQ0FBVCxFQUFXO0FBQUNPLGlCQUFhQyxDQUFiO0FBQWdCLEdBQWpELENBQTNmO0FBQThpQixDQUFyOEIsWUFBMjhCdUIsUUFBMzhCLENBQUQiLCJmaWxlIjoibG9uZy1wcmVzcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGxvbmctcHJlc3MuanNcbiAqIFB1cmUgSmF2YVNjcmlwdCBsb25nLXByZXNzIGV2ZW50XG4gKiBodHRwczovL2dpdGh1Yi5jb20vam9obi1kb2hlcnR5L2xvbmctcHJlc3NcbiAqIEBhdXRob3IgSm9obiBEb2hlcnR5IDx3d3cuam9obmRvaGVydHkuaW5mbz5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG4hZnVuY3Rpb24odCxlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKCl7dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImxvbmctcHJlc3NcIix7YnViYmxlczohMCxjYW5jZWxhYmxlOiEwfSkpLGNsZWFyVGltZW91dChvKSxjb25zb2xlJiZjb25zb2xlLmxvZyYmY29uc29sZS5sb2coXCJsb25nLXByZXNzIGZpcmVkIG9uIFwiK3RoaXMub3V0ZXJIVE1MKX12YXIgbz1udWxsLHU9XCJvbnRvdWNoc3RhcnRcImluIHR8fG5hdmlnYXRvci5NYXhUb3VjaFBvaW50cz4wfHxuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cz4wLHM9dT9cInRvdWNoc3RhcnRcIjpcIm1vdXNlZG93blwiLGk9dT9cInRvdWNoY2FuY2VsXCI6XCJtb3VzZW91dFwiLGE9dT9cInRvdWNoZW5kXCI6XCJtb3VzZXVwXCIsYz11P1widG91Y2htb3ZlXCI6XCJtb3VzZW1vdmVcIjtcImluaXRDdXN0b21FdmVudFwiaW4gZS5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpJiYodC5DdXN0b21FdmVudD1mdW5jdGlvbih0LG4pe249bnx8e2J1YmJsZXM6ITEsY2FuY2VsYWJsZTohMSxkZXRhaWw6dm9pZCAwfTt2YXIgbz1lLmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7cmV0dXJuIG8uaW5pdEN1c3RvbUV2ZW50KHQsbi5idWJibGVzLG4uY2FuY2VsYWJsZSxuLmRldGFpbCksb30sdC5DdXN0b21FdmVudC5wcm90b3R5cGU9dC5FdmVudC5wcm90b3R5cGUpLGUuYWRkRXZlbnRMaXN0ZW5lcihzLGZ1bmN0aW9uKHQpe3ZhciBlPXQudGFyZ2V0LHU9cGFyc2VJbnQoZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWxvbmctcHJlc3MtZGVsYXlcIil8fFwiMTUwMFwiLDEwKTtvPXNldFRpbWVvdXQobi5iaW5kKGUpLHUpfSksZS5hZGRFdmVudExpc3RlbmVyKGEsZnVuY3Rpb24odCl7Y2xlYXJUaW1lb3V0KG8pfSksZS5hZGRFdmVudExpc3RlbmVyKGksZnVuY3Rpb24odCl7Y2xlYXJUaW1lb3V0KG8pfSksZS5hZGRFdmVudExpc3RlbmVyKGMsZnVuY3Rpb24odCl7Y2xlYXJUaW1lb3V0KG8pfSl9KHRoaXMsZG9jdW1lbnQpOyJdfQ==