'use strict';

var alreadyCharged = false;

var VideoPicker = function VideoPicker() {

  //I implemented a command pattern, see : https://www.dofactory.com/javascript/command-design-pattern
  return {
    chargeVideo: function chargeVideo() {
      _chargeVideo();
    }
  };
};

var VideoPicker = new VideoPicker();

var _chargeVideo = function _chargeVideo() {
  //We charge all the video only one time
  if (!alreadyCharged) {
    console.log("charging the video");
    var xhr = new XMLHttpRequest();
    xhr.open('GET', 'src/client/js/workshop2/technologyProbe/video/video_picker/videoPreview_view.html', true);
    xhr.onreadystatechange = function () {
      if (this.readyState !== 4) return;
      if (this.status !== 200) return; // or whatever error handling you want
      document.getElementById('videoPickerOverviewModal').innerHTML = this.responseText;

      var elms = document.getElementById('videoPickerOverviewModal').getElementsByTagName("video");
      var span = document.getElementsByClassName("close")[0];

      span.addEventListener("mousedown", function () {
        modalVideo.style.display = "none";
      });
      for (var i = 0; i < elms.length; i++) {
        elms[i].addEventListener("mousedown", function () {
          //console.log(this.getElementsByTagName("source")[0].src);
          console.log(video_current);
          // video_current.src = this.getElementsByTagName("source")[0].src;

          video_current.src([{ type: "video/mp4", src: this.getElementsByTagName("source")[0].src }]);

          var notification_feedback = "Video successfully loaded!";
          notificationFeedback(notification_feedback);
          //modalVideo.style.display = "none";
          //modalVideo.style.visibility = "hidden";
        });
      }
    };
    xhr.send();
    alreadyCharged = true;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZGVvX3BpY2tlci5qcyJdLCJuYW1lcyI6WyJhbHJlYWR5Q2hhcmdlZCIsIlZpZGVvUGlja2VyIiwiY2hhcmdlVmlkZW8iLCJjb25zb2xlIiwibG9nIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJyZXNwb25zZVRleHQiLCJlbG1zIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzcGFuIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJtb2RhbFZpZGVvIiwic3R5bGUiLCJkaXNwbGF5IiwiaSIsImxlbmd0aCIsInZpZGVvX2N1cnJlbnQiLCJzcmMiLCJ0eXBlIiwibm90aWZpY2F0aW9uX2ZlZWRiYWNrIiwibm90aWZpY2F0aW9uRmVlZGJhY2siLCJzZW5kIl0sIm1hcHBpbmdzIjoiOztBQUVBLElBQUlBLGlCQUFpQixLQUFyQjs7QUFHQSxJQUFJQyxjQUFjLFNBQWRBLFdBQWMsR0FBVzs7QUFFM0I7QUFDQSxTQUFPO0FBQ0xDLGlCQUFhLHVCQUFVO0FBQ3RCQTtBQUNBO0FBSEksR0FBUDtBQUtELENBUkQ7O0FBV0EsSUFBSUQsY0FBYyxJQUFJQSxXQUFKLEVBQWxCOztBQUdBLElBQUlDLGVBQWMsU0FBZEEsWUFBYyxHQUFXO0FBQzNCO0FBQ0EsTUFBRyxDQUFDRixjQUFKLEVBQW1CO0FBQ2pCRyxZQUFRQyxHQUFSLENBQVksb0JBQVo7QUFDQSxRQUFJQyxNQUFLLElBQUlDLGNBQUosRUFBVDtBQUNBRCxRQUFJRSxJQUFKLENBQVMsS0FBVCxFQUFnQixtRkFBaEIsRUFBcUcsSUFBckc7QUFDQUYsUUFBSUcsa0JBQUosR0FBd0IsWUFBVztBQUNqQyxVQUFJLEtBQUtDLFVBQUwsS0FBa0IsQ0FBdEIsRUFBeUI7QUFDekIsVUFBSSxLQUFLQyxNQUFMLEtBQWMsR0FBbEIsRUFBdUIsT0FGVSxDQUVGO0FBQy9CQyxlQUFTQyxjQUFULENBQXdCLDBCQUF4QixFQUFvREMsU0FBcEQsR0FBK0QsS0FBS0MsWUFBcEU7O0FBR0EsVUFBSUMsT0FBT0osU0FBU0MsY0FBVCxDQUF3QiwwQkFBeEIsRUFBb0RJLG9CQUFwRCxDQUF5RSxPQUF6RSxDQUFYO0FBQ0EsVUFBSUMsT0FBT04sU0FBU08sc0JBQVQsQ0FBZ0MsT0FBaEMsRUFBeUMsQ0FBekMsQ0FBWDs7QUFFQUQsV0FBS0UsZ0JBQUwsQ0FBdUIsV0FBdkIsRUFBcUMsWUFBVztBQUM5Q0MsbUJBQVdDLEtBQVgsQ0FBaUJDLE9BQWpCLEdBQTJCLE1BQTNCO0FBQ0QsT0FGRDtBQUdBLFdBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJUixLQUFLUyxNQUF6QixFQUFpQ0QsR0FBakMsRUFBc0M7QUFDbENSLGFBQUtRLENBQUwsRUFBUUosZ0JBQVIsQ0FBeUIsV0FBekIsRUFBc0MsWUFBVztBQUMvQztBQUNBaEIsa0JBQVFDLEdBQVIsQ0FBWXFCLGFBQVo7QUFDRDs7QUFFQ0Esd0JBQWNDLEdBQWQsQ0FBa0IsQ0FDaEIsRUFBQ0MsTUFBTSxXQUFQLEVBQW9CRCxLQUFJLEtBQUtWLG9CQUFMLENBQTBCLFFBQTFCLEVBQW9DLENBQXBDLEVBQXVDVSxHQUEvRCxFQURnQixDQUFsQjs7QUFNQSxjQUFJRSx3QkFBd0IsNEJBQTVCO0FBQ0FDLCtCQUFxQkQscUJBQXJCO0FBQ0E7QUFDQTtBQUNILFNBZkM7QUFnQkg7QUFDRixLQTlCRDtBQStCQXZCLFFBQUl5QixJQUFKO0FBQ0E5QixxQkFBaUIsSUFBakI7QUFDRDtBQUVGLENBekNEIiwiZmlsZSI6InZpZGVvX3BpY2tlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG52YXIgYWxyZWFkeUNoYXJnZWQgPSBmYWxzZTtcblxuXG52YXIgVmlkZW9QaWNrZXIgPSBmdW5jdGlvbigpIHtcbiAgXG4gIC8vSSBpbXBsZW1lbnRlZCBhIGNvbW1hbmQgcGF0dGVybiwgc2VlIDogaHR0cHM6Ly93d3cuZG9mYWN0b3J5LmNvbS9qYXZhc2NyaXB0L2NvbW1hbmQtZGVzaWduLXBhdHRlcm5cbiAgcmV0dXJuIHtcbiAgICBjaGFyZ2VWaWRlbzogZnVuY3Rpb24oKXtcbiAgICAgY2hhcmdlVmlkZW8oKTtcbiAgICB9LFxuICB9XG59O1xuXG5cbnZhciBWaWRlb1BpY2tlciA9IG5ldyBWaWRlb1BpY2tlcigpO1xuXG5cbnZhciBjaGFyZ2VWaWRlbyA9IGZ1bmN0aW9uICgpe1xuICAvL1dlIGNoYXJnZSBhbGwgdGhlIHZpZGVvIG9ubHkgb25lIHRpbWVcbiAgaWYoIWFscmVhZHlDaGFyZ2VkKXtcbiAgICBjb25zb2xlLmxvZyhcImNoYXJnaW5nIHRoZSB2aWRlb1wiKTtcbiAgICB2YXIgeGhyPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIub3BlbignR0VUJywgJ3NyYy9jbGllbnQvanMvd29ya3Nob3AyL3RlY2hub2xvZ3lQcm9iZS92aWRlby92aWRlb19waWNrZXIvdmlkZW9QcmV2aWV3X3ZpZXcuaHRtbCcsIHRydWUpO1xuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2U9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSE9PTQpIHJldHVybjtcbiAgICAgIGlmICh0aGlzLnN0YXR1cyE9PTIwMCkgcmV0dXJuOyAvLyBvciB3aGF0ZXZlciBlcnJvciBoYW5kbGluZyB5b3Ugd2FudFxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZGVvUGlja2VyT3ZlcnZpZXdNb2RhbCcpLmlubmVySFRNTD0gdGhpcy5yZXNwb25zZVRleHQ7XG4gIFxuICBcbiAgICAgIHZhciBlbG1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZGVvUGlja2VyT3ZlcnZpZXdNb2RhbCcpLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidmlkZW9cIik7XG4gICAgICB2YXIgc3BhbiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjbG9zZVwiKVswXTtcbiAgXG4gICAgICBzcGFuLmFkZEV2ZW50TGlzdGVuZXIoIFwibW91c2Vkb3duXCIgLCBmdW5jdGlvbigpIHtcbiAgICAgICAgbW9kYWxWaWRlby5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICB9KTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGVsbXNbaV0uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBmdW5jdGlvbiAoKXtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2codGhpcy5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNvdXJjZVwiKVswXS5zcmMpO1xuICAgICAgICAgICAgY29uc29sZS5sb2codmlkZW9fY3VycmVudCk7XG4gICAgICAgICAgIC8vIHZpZGVvX2N1cnJlbnQuc3JjID0gdGhpcy5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNvdXJjZVwiKVswXS5zcmM7XG4gIFxuICAgICAgICAgICAgdmlkZW9fY3VycmVudC5zcmMoW1xuICAgICAgICAgICAgICB7dHlwZTogXCJ2aWRlby9tcDRcIiwgc3JjOnRoaXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzb3VyY2VcIilbMF0uc3JjfVxuICAgICAgICAgICAgIFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIG5vdGlmaWNhdGlvbl9mZWVkYmFjayA9IFwiVmlkZW8gc3VjY2Vzc2Z1bGx5IGxvYWRlZCFcIjtcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbkZlZWRiYWNrKG5vdGlmaWNhdGlvbl9mZWVkYmFjayk7XG4gICAgICAgICAgICAvL21vZGFsVmlkZW8uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgLy9tb2RhbFZpZGVvLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHhoci5zZW5kKCk7XG4gICAgYWxyZWFkeUNoYXJnZWQgPSB0cnVlO1xuICB9XG4gXG59O1xuXG5cblxuIl19