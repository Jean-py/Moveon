'use strict';

var numberOfCard = 0;
var arrayCard = [];
//var arrayCardDeleted = [];
var commands = [];

var CardManager = function CardManager() {
  //I implemented a command pattern, see : https://www.dofactory.com/javascript/command-design-pattern
  return {
    //execute a command
    execute: function execute(command) {
      command.execute();
      //We send the command to the server (the server log it into a file, see ./src/server/ServerLogger)
      logger.sendAndLogCommand(command);
      //and we save the command created
      commands.push(command);
    },
    //Undo a command
    undo: function undo() {
      var command = commands.pop();
      command.undo();
    },
    exportCard: function exportCard() {
      console.log("function export card");
      /*------ Create a set of card from a JSON file -------*/
      var arrayItemUpdated = [];
      var listSegment = document.getElementsByClassName('segment');
      //playCard(arrayItem.iDiv, arrayItem.startP);
      console.log(listSegment);

      for (var i = 0; i < listSegment.length; i++) {
        console.log(listSegment[i].id); //second console output
        triggerMouseEvent(listSegment[i], 'mousedown');
      }
      arrayCard.forEach(function (arrayItem) {
        console.log(arrayItem);
        var item = arrayItem.updateInfo();
        arrayItemUpdated.push(item);
        console.log(item);
      });
      var serializedArr = JSON.stringify(arrayItemUpdated);
      console.log("*****  Serialisation of card complete : " + serializedArr);
      download(serializedArr, 'jsonW2log-' + createUniqueId() + '.json', 'text/plain');

      logger.saveSH(serializedArr);
    }, loadSegmentHistoryFromServer: function loadSegmentHistoryFromServer() {
      //We charge all the video only one time
      var xhr_view = new XMLHttpRequest();
      xhr_view.open('GET', 'src/client/js/workshop2/technologyProbe/card_manager/SHLoaderOverview_view.html', true);
      var view_SH_html = document.getElementById('SHPickerOverviewModal');

      xhr_view.onreadystatechange = function () {
        if (this.readyState !== 4) return;
        if (this.status !== 200) return; // or whatever error handling you want
        view_SH_html.innerHTML = this.responseText;
      };
      xhr_view.send();

      //We charge all the video only one time


      var xhr_allPath = new XMLHttpRequest();
      xhr_allPath.open('GET', 'src/server/log-SH/SH_all_path.txt', true);

      xhr_allPath.onreadystatechange = function () {
        if (this.readyState !== 4) return;
        if (this.status !== 200) return; // or whatever error handling you want


        var lines = this.responseText.split('\n');
        for (var j = 0; j < lines.length - 1; j++) {
          var xhr_SH = new XMLHttpRequest();
          xhr_SH.open('GET', lines[j], true);
          xhr_SH.onreadystatechange = function () {
            console.log(this.responseText);
            //Ici il faut lire les fichier json et crÃ©er un appercu de chaque
          };
          xhr_SH.send();
          var div = document.createElement('div');
          div.className = 'gridSH';
          var split = lines[j].split('/');
          //get only the name
          var nameSH = split[split.length - 1];
          console.log(nameSH);
          div.innerHTML = nameSH;
          document.getElementById('SH_list').appendChild(div);
          div.setAttribute("nameSH", lines[j]);
          div.addEventListener("mousedown", function () {
            console.log(this.getAttribute("nameSH"));
            loadJSONSegmentHistory(this.getAttribute("nameSH"));
          });
        }
      };
      xhr_allPath.send();
    }
  };
};

/*Private function, do not call outside the CardManager*/

function triggerMouseEvent(node, eventType) {
  var clickEvent = document.createEvent('MouseEvents');
  clickEvent.initEvent(eventType, true, true);
  node.dispatchEvent(clickEvent);
}

/**** Functional core of the card manager (create a cart, delete a card and save card) *****/
/**
 * This class manag all the cards created. This is the segment history.
 * @type {HTMLElement | null}
 */
var wrapperCommandAndRange = document.getElementById("wrapperCommandAndRangeid");

function cleanSegmentHistory() {
  console.log("TESTING");
  clearAllTimer();
  arrayCard.forEach(function (e) {
    deleteCardUI(e);
  });
}

function loadJSON() {
  var files = document.getElementById('logFileLoad').files;
  if (!files.length) {
    alert('Please select a file!');
    return;
  }

  var file = files[0];
  var start = 0;
  var stop = file.size - 1;

  var reader = new FileReader();
  var test = 0;
  // If we use onloadend, we need to check the readyState.
  reader.onloadend = function (evt) {
    if (evt.target.readyState == FileReader.DONE) {
      // DONE == 2
      var test = evt.target.result;
      console.log('Read bytes: ', start + 1, ' - ', stop + 1, ' of ', file.size, ' byte file');
      console.log(test);
      var my_JSON_object = JSON.parse(test);

      console.log(my_JSON_object);

      for (var k = 0; k < my_JSON_object.length; k++) {
        addingNewCardsFromJSon(my_JSON_object[k]);
      }
    }
  };
  var blob = file.slice(start, stop + 1);
  reader.readAsBinaryString(blob);
}

//Add a card from a json file
function addingNewCardsFromJSon(cardInfo) {
  if (cardInfo.startP > cardInfo.endP) {
    var transit = cardInfo.startP;
    cardInfo.startP = cardInfo.endP;
    cardInfo.endP = transit;
  }
  if (cardInfo.startP < 0) {
    cardInfo.startP = 0;
  }
  console.log(cardInfo.startP, cardInfo.endP);
  var result = Player.sliderToVideo(cardInfo.startP, cardInfo.endP);
  //console.log(result);
  numberOfCard++;
  if (!cardInfo.deleted) {
    console.log(result.startDuration, result.endDuration, cardInfo.startP, cardInfo.endP, cardInfo);
    var card = Card(result.startDuration, result.endDuration, cardInfo.startP, cardInfo.endP, cardInfo);
    cardManager.execute(new CreateNewCardCommand(card));
    //document.getElementById('divCardBoard').insertBefore(card.iDiv, document.getElementById('divCardBoard').firstChild);
  }
}

/**
 * Adding a card by drag and drop. The card is added in the list of cards
 * Return the card that have been created
 */
function createNewCard(startP, endP) {
  //console.log("TEST / : " + startP + " " + endP);
  if (startP > endP) {
    var transit = startP;
    startP = endP;
    endP = transit;
  }
  var result = Player.sliderToVideo(startP, endP);
  numberOfCard++;
  console.log(result);

  var card = new Card(result.startDuration, result.endDuration, startP, endP);
  cardManager.execute(new CreateNewCardCommand(card));
  return card;
}

function addingNewCard() {
  arrayCard.push(this.card);
  document.getElementById('divCardBoard').insertBefore(this.card.iDiv, document.getElementById('divCardBoard').firstChild);
}

function deleteCard() {
  //Supprime la carte de la liste de carte
  /*for (let i = 0; i < arrayCard.length   ; i++) {
    if(arrayCard[i]  === card){
      var supCard = arrayCard.splice(i,1);
      arrayCardDeleted.push(supCard);
      console.log("deleted card : ");
      console.log(supCard);
      break;
    }
  }*/
  //deleteCardUI(card);
  /*arrayCardDeleted.forEach(function(element) {
    console.log(   element);
  });
  console.log("************************");
  arrayCard.forEach(function(element) {
    console.log(element);
  });*/
  clearAllTimer();
  deleteCardUI(this.card);
  return this.card;
}

function deleteCardUI(card) {
  feedbackOnSliderVideo(false);
  card.iDiv.remove();
  card.deleted = true;
}

function download(content, fileName, contentType) {
  var a = document.createElement("a");

  //a.style.display = "block";
  var file = new Blob([content], {
    type: contentType
  });

  a.href = URL.createObjectURL(file);
  a.download = fileName;
  a.click();
  a.remove();
}

function loadJSONSegmentHistory1() {

  console.log(generateJSONfromvar());

  var generatedJson = generateJSONfromvar();
  var my_JSON_object = JSON.parse(generatedJson);
  console.log(my_JSON_object);
  for (var k = 0; k < my_JSON_object.length; k++) {
    addingNewCardsFromJSon(my_JSON_object[k]);
  }
}

function loadJSONSegmentHistory2() {
  var generatedJson2 = generateJSONfromvar2();
  var my_JSON_object = JSON.parse(generatedJson2);
  console.log(my_JSON_object);
  for (var k = 0; k < my_JSON_object.length; k++) {
    addingNewCardsFromJSon(my_JSON_object[k]);
  }
}

function loadJSONSegmentHistory(SH_path) {

  var xhr_SH = new XMLHttpRequest();
  xhr_SH.open('GET', SH_path, true);

  xhr_SH.onreadystatechange = function () {
    if (this.readyState !== 4) return;
    if (this.status !== 200) return; // or whatever error handling you want
    console.log(this.responseText);
    var generatedJson2 = this.responseText;

    var my_JSON_object = JSON.parse(generatedJson2);
    console.log(my_JSON_object);
    for (var k = 0; k < my_JSON_object.length; k++) {
      addingNewCardsFromJSon(my_JSON_object[k]);
    }
  };
  xhr_SH.send();

  var elms = document.getElementById('SHPickerOverview');
  var span = document.getElementsByClassName("close")[1];

  span.addEventListener("mousedown", function () {
    elms.style.display = "none";
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhcmRNYW5hZ2VyLmpzIl0sIm5hbWVzIjpbIm51bWJlck9mQ2FyZCIsImFycmF5Q2FyZCIsImNvbW1hbmRzIiwiQ2FyZE1hbmFnZXIiLCJleGVjdXRlIiwiY29tbWFuZCIsImxvZ2dlciIsInNlbmRBbmRMb2dDb21tYW5kIiwicHVzaCIsInVuZG8iLCJwb3AiLCJleHBvcnRDYXJkIiwiY29uc29sZSIsImxvZyIsImFycmF5SXRlbVVwZGF0ZWQiLCJsaXN0U2VnbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImkiLCJsZW5ndGgiLCJpZCIsInRyaWdnZXJNb3VzZUV2ZW50IiwiZm9yRWFjaCIsImFycmF5SXRlbSIsIml0ZW0iLCJ1cGRhdGVJbmZvIiwic2VyaWFsaXplZEFyciIsIkpTT04iLCJzdHJpbmdpZnkiLCJkb3dubG9hZCIsImNyZWF0ZVVuaXF1ZUlkIiwic2F2ZVNIIiwibG9hZFNlZ21lbnRIaXN0b3J5RnJvbVNlcnZlciIsInhocl92aWV3IiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwidmlld19TSF9odG1sIiwiZ2V0RWxlbWVudEJ5SWQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwiaW5uZXJIVE1MIiwicmVzcG9uc2VUZXh0Iiwic2VuZCIsInhocl9hbGxQYXRoIiwibGluZXMiLCJzcGxpdCIsImoiLCJ4aHJfU0giLCJkaXYiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwibmFtZVNIIiwiYXBwZW5kQ2hpbGQiLCJzZXRBdHRyaWJ1dGUiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0QXR0cmlidXRlIiwibG9hZEpTT05TZWdtZW50SGlzdG9yeSIsIm5vZGUiLCJldmVudFR5cGUiLCJjbGlja0V2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50Iiwid3JhcHBlckNvbW1hbmRBbmRSYW5nZSIsImNsZWFuU2VnbWVudEhpc3RvcnkiLCJjbGVhckFsbFRpbWVyIiwiZSIsImRlbGV0ZUNhcmRVSSIsImxvYWRKU09OIiwiZmlsZXMiLCJhbGVydCIsImZpbGUiLCJzdGFydCIsInN0b3AiLCJzaXplIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsInRlc3QiLCJvbmxvYWRlbmQiLCJldnQiLCJ0YXJnZXQiLCJET05FIiwicmVzdWx0IiwibXlfSlNPTl9vYmplY3QiLCJwYXJzZSIsImsiLCJhZGRpbmdOZXdDYXJkc0Zyb21KU29uIiwiYmxvYiIsInNsaWNlIiwicmVhZEFzQmluYXJ5U3RyaW5nIiwiY2FyZEluZm8iLCJzdGFydFAiLCJlbmRQIiwidHJhbnNpdCIsIlBsYXllciIsInNsaWRlclRvVmlkZW8iLCJkZWxldGVkIiwic3RhcnREdXJhdGlvbiIsImVuZER1cmF0aW9uIiwiY2FyZCIsIkNhcmQiLCJjYXJkTWFuYWdlciIsIkNyZWF0ZU5ld0NhcmRDb21tYW5kIiwiY3JlYXRlTmV3Q2FyZCIsImFkZGluZ05ld0NhcmQiLCJpbnNlcnRCZWZvcmUiLCJpRGl2IiwiZmlyc3RDaGlsZCIsImRlbGV0ZUNhcmQiLCJmZWVkYmFja09uU2xpZGVyVmlkZW8iLCJyZW1vdmUiLCJjb250ZW50IiwiZmlsZU5hbWUiLCJjb250ZW50VHlwZSIsImEiLCJCbG9iIiwidHlwZSIsImhyZWYiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJjbGljayIsImxvYWRKU09OU2VnbWVudEhpc3RvcnkxIiwiZ2VuZXJhdGVKU09OZnJvbXZhciIsImdlbmVyYXRlZEpzb24iLCJsb2FkSlNPTlNlZ21lbnRIaXN0b3J5MiIsImdlbmVyYXRlZEpzb24yIiwiZ2VuZXJhdGVKU09OZnJvbXZhcjIiLCJTSF9wYXRoIiwiZWxtcyIsInNwYW4iLCJzdHlsZSIsImRpc3BsYXkiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsZUFBZSxDQUFuQjtBQUNBLElBQUlDLFlBQVksRUFBaEI7QUFDQTtBQUNBLElBQUlDLFdBQVcsRUFBZjs7QUFJQSxJQUFJQyxjQUFjLFNBQWRBLFdBQWMsR0FBVztBQUMzQjtB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RUFBeUI7QUFDekIsUUFBSSxLQUFLQyxNQUFMLEtBQWMsR0FBbEIsRUFBdUIsT0FGZSxDQUVQO0FBQy9CNUIsWUFBUUMsR0FBUixDQUFZLEtBQUs2QixZQUFqQjtBQUNBLFFBQUlvRixpQkFBaUIsS0FBS3BGLFlBQTFCOztBQUVBLFFBQUkwQyxpQkFBaUJ6RCxLQUFLMEQsS0FBTCxDQUFXeUMsY0FBWCxDQUFyQjtBQUNBbEgsWUFBUUMsR0FBUixDQUFZdUUsY0FBWjtBQUNBLFNBQUssSUFBSUUsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRixlQUFlakUsTUFBbkMsRUFBMkNtRSxHQUEzQyxFQUFnRDtBQUM5Q0MsNkJBQXVCSCxlQUFlRSxDQUFmLENBQXZCO0FBQ0Q7QUFFRixHQVpEO0FBYUF0QyxTQUFPTCxJQUFQOztBQUdBLE1BQUlzRixPQUFPakgsU0FBU3FCLGNBQVQsQ0FBd0Isa0JBQXhCLENBQVg7QUFDQSxNQUFJNkYsT0FBT2xILFNBQVNDLHNCQUFULENBQWdDLE9BQWhDLEVBQXlDLENBQXpDLENBQVg7O0FBRUFpSCxPQUFLM0UsZ0JBQUwsQ0FBdUIsV0FBdkIsRUFBcUMsWUFBVztBQUM5QzBFLFNBQUtFLEtBQUwsQ0FBV0MsT0FBWCxHQUFxQixNQUFyQjtBQUNELEdBRkQ7QUFJRCIsImZpbGUiOiJjYXJkTWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBudW1iZXJPZkNhcmQgPSAwO1xudmFyIGFycmF5Q2FyZCA9IFtdO1xuLy92YXIgYXJyYXlDYXJkRGVsZXRlZCA9IFtdO1xudmFyIGNvbW1hbmRzID0gW107XG5cblxuXG52YXIgQ2FyZE1hbmFnZXIgPSBmdW5jdGlvbigpIHtcbiAgLy9JIGltcGxlbWVudGVkIGEgY29tbWFuZCBwYXR0ZXJuLCBzZWUgOiBodHRwczovL3d3dy5kb2ZhY3RvcnkuY29tL2phdmFzY3JpcHQvY29tbWFuZC1kZXNpZ24tcGF0dGVyblxuICByZXR1cm4ge1xuICAgIC8vZXhlY3V0ZSBhIGNvbW1hbmRcbiAgICBleGVjdXRlOiBmdW5jdGlvbihjb21tYW5kKSB7XG4gICAgIGNvbW1hbmQuZXhlY3V0ZSgpO1xuICAgICAgLy9XZSBzZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgKHRoZSBzZXJ2ZXIgbG9nIGl0IGludG8gYSBmaWxlLCBzZWUgLi9zcmMvc2VydmVyL1NlcnZlckxvZ2dlcilcbiAgICAgIGxvZ2dlci5zZW5kQW5kTG9nQ29tbWFuZChjb21tYW5kKTtcbiAgICAgIC8vYW5kIHdlIHNhdmUgdGhlIGNvbW1hbmQgY3JlYXRlZFxuICAgICAgY29tbWFuZHMucHVzaChjb21tYW5kKTtcbiAgICB9LFxuICAgIC8vVW5kbyBhIGNvbW1hbmRcbiAgICB1bmRvOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb21tYW5kID0gY29tbWFuZHMucG9wKCk7XG4gICAgICBjb21tYW5kLnVuZG8oKTtcbiAgICB9LFxuICAgIGV4cG9ydENhcmQ6IGZ1bmN0aW9uKCl7XG4gICAgICBjb25zb2xlLmxvZyhcImZ1bmN0aW9uIGV4cG9ydCBjYXJkXCIpO1xuICAgICAgLyotLS0tLS0gQ3JlYXRlIGEgc2V0IG9mIGNhcmQgZnJvbSBhIEpTT04gZmlsZSAtLS0tLS0tKi9cbiAgICAgIHZhciBhcnJheUl0ZW1VcGRhdGVkID0gW107XG4gICAgICB2YXIgbGlzdFNlZ21lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzZWdtZW50Jyk7XG4gICAgICAvL3BsYXlDYXJkKGFycmF5SXRlbS5pRGl2LCBhcnJheUl0ZW0uc3RhcnRQKTtcbiAgICAgIGNvbnNvbGUubG9nKGxpc3RTZWdtZW50KTtcbiAgICAgIFxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0U2VnbWVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zb2xlLmxvZyhsaXN0U2VnbWVudFtpXS5pZCk7IC8vc2Vjb25kIGNvbnNvbGUgb3V0cHV0XG4gICAgICAgIHRyaWdnZXJNb3VzZUV2ZW50KGxpc3RTZWdtZW50W2ldLCdtb3VzZWRvd24nKTtcbiAgICAgIH1cbiAgICAgICAgYXJyYXlDYXJkLmZvckVhY2goZnVuY3Rpb24oYXJyYXlJdGVtKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYXJyYXlJdGVtKTtcbiAgICAgICAgICB2YXIgaXRlbSA9IGFycmF5SXRlbS51cGRhdGVJbmZvKCk7XG4gICAgICAgICAgYXJyYXlJdGVtVXBkYXRlZC5wdXNoKGl0ZW0pO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHNlcmlhbGl6ZWRBcnIgPSBKU09OLnN0cmluZ2lmeShhcnJheUl0ZW1VcGRhdGVkKTtcbiAgICAgICAgY29uc29sZS5sb2coXCIqKioqKiAgU2VyaWFsaXNhdGlvbiBvZiBjYXJkIGNvbXBsZXRlIDogXCIgKyBzZXJpYWxpemVkQXJyKTtcbiAgICAgICAgZG93bmxvYWQoc2VyaWFsaXplZEFyciwgJ2pzb25XMmxvZy0nICsgY3JlYXRlVW5pcXVlSWQoKSArICcuanNvbicsICd0ZXh0L3BsYWluJyk7XG4gICAgICAgIFxuICAgICAgICBsb2dnZXIuc2F2ZVNIKHNlcmlhbGl6ZWRBcnIpO1xuICAgIH0sIGxvYWRTZWdtZW50SGlzdG9yeUZyb21TZXJ2ZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAvL1dlIGNoYXJnZSBhbGwgdGhlIHZpZGVvIG9ubHkgb25lIHRpbWVcbiAgICAgIHZhciB4aHJfdmlldyA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgeGhyX3ZpZXcub3BlbignR0VUJywgJ3NyYy9jbGllbnQvanMvd29ya3Nob3AyL3RlY2hub2xvZ3lQcm9iZS9jYXJkX21hbmFnZXIvU0hMb2FkZXJPdmVydmlld192aWV3Lmh0bWwnLCB0cnVlKTtcbiAgICAgIHZhciB2aWV3X1NIX2h0bWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnU0hQaWNrZXJPdmVydmlld01vZGFsJyk7XG4gICAgXG4gICAgICB4aHJfdmlldy5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUhPT00KSByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLnN0YXR1cyE9PTIwMCkgcmV0dXJuOyAvLyBvciB3aGF0ZXZlciBlcnJvciBoYW5kbGluZyB5b3Ugd2FudFxuICAgICAgICB2aWV3X1NIX2h0bWwuaW5uZXJIVE1MPSB0aGlzLnJlc3BvbnNlVGV4dDtcbiAgICAgIH07XG4gICAgICB4aHJfdmlldy5zZW5kKCk7XG4gICAgXG4gICAgICAvL1dlIGNoYXJnZSBhbGwgdGhlIHZpZGVvIG9ubHkgb25lIHRpbWVcbiAgICAgIFxuICAgICAgXG4gICAgICB2YXIgeGhyX2FsbFBhdGggPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIHhocl9hbGxQYXRoLm9wZW4oJ0dFVCcsICdzcmMvc2VydmVyL2xvZy1TSC9TSF9hbGxfcGF0aC50eHQnLCB0cnVlKTtcbiAgICBcbiAgICAgIHhocl9hbGxQYXRoLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSE9PTQpIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzIT09MjAwKSByZXR1cm47IC8vIG9yIHdoYXRldmVyIGVycm9yIGhhbmRsaW5nIHlvdSB3YW50XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdmFyIGxpbmVzID0gdGhpcy5yZXNwb25zZVRleHQuc3BsaXQoJ1xcbicpO1xuICAgICAgICBmb3IodmFyIGogPSAwOyBqIDwgbGluZXMubGVuZ3RoLTE7IGorKyl7XG4gICAgICAgICAgdmFyIHhocl9TSCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgIHhocl9TSC5vcGVuKCdHRVQnLCBsaW5lc1tqXSwgdHJ1ZSk7XG4gICAgICAgICAgeGhyX1NILm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIC8vSWNpIGlsIGZhdXQgbGlyZSBsZXMgZmljaGllciBqc29uIGV0IGNyw6llciB1biBhcHBlcmN1IGRlIGNoYXF1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgfTtcbiAgICAgICAgICB4aHJfU0guc2VuZCgpO1xuICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICBkaXYuY2xhc3NOYW1lID0gJ2dyaWRTSCc7XG4gICAgICAgICAgdmFyIHNwbGl0ID0gbGluZXNbal0uc3BsaXQoJy8nKTtcbiAgICAgICAgICAvL2dldCBvbmx5IHRoZSBuYW1lXG4gICAgICAgICAgdmFyIG5hbWVTSCA9IHNwbGl0W3NwbGl0Lmxlbmd0aC0xXTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhuYW1lU0gpO1xuICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSBuYW1lU0g7XG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ1NIX2xpc3QnKS5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgICAgIGRpdi5zZXRBdHRyaWJ1dGUoXCJuYW1lU0hcIixsaW5lc1tqXSApO1xuICAgICAgICAgIGRpdi5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5nZXRBdHRyaWJ1dGUoXCJuYW1lU0hcIikpO1xuICAgICAgICAgICAgbG9hZEpTT05TZWdtZW50SGlzdG9yeSh0aGlzLmdldEF0dHJpYnV0ZShcIm5hbWVTSFwiKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB4aHJfYWxsUGF0aC5zZW5kKCk7XG4gICAgfSxcbiAgfVxufTtcblxuXG4vKlByaXZhdGUgZnVuY3Rpb24sIGRvIG5vdCBjYWxsIG91dHNpZGUgdGhlIENhcmRNYW5hZ2VyKi9cblxuXG5mdW5jdGlvbiB0cmlnZ2VyTW91c2VFdmVudCAobm9kZSwgZXZlbnRUeXBlKSB7XG4gIHZhciBjbGlja0V2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQgKCdNb3VzZUV2ZW50cycpO1xuICBjbGlja0V2ZW50LmluaXRFdmVudCAoZXZlbnRUeXBlLCB0cnVlLCB0cnVlKTtcbiAgbm9kZS5kaXNwYXRjaEV2ZW50IChjbGlja0V2ZW50KTtcbn1cblxuLyoqKiogRnVuY3Rpb25hbCBjb3JlIG9mIHRoZSBjYXJkIG1hbmFnZXIgKGNyZWF0ZSBhIGNhcnQsIGRlbGV0ZSBhIGNhcmQgYW5kIHNhdmUgY2FyZCkgKioqKiovXG4vKipcbiAqIFRoaXMgY2xhc3MgbWFuYWcgYWxsIHRoZSBjYXJkcyBjcmVhdGVkLiBUaGlzIGlzIHRoZSBzZWdtZW50IGhpc3RvcnkuXG4gKiBAdHlwZSB7SFRNTEVsZW1lbnQgfCBudWxsfVxuICovXG52YXIgd3JhcHBlckNvbW1hbmRBbmRSYW5nZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwid3JhcHBlckNvbW1hbmRBbmRSYW5nZWlkXCIpO1xuXG5cblxuZnVuY3Rpb24gY2xlYW5TZWdtZW50SGlzdG9yeSgpe1xuICBjb25zb2xlLmxvZyhcIlRFU1RJTkdcIik7XG4gIGNsZWFyQWxsVGltZXIoKTtcbiAgYXJyYXlDYXJkLmZvckVhY2goZnVuY3Rpb24oZSl7XG4gICAgICBkZWxldGVDYXJkVUkoZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBsb2FkSlNPTigpIHtcbiAgdmFyIGZpbGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvZ0ZpbGVMb2FkJykuZmlsZXM7XG4gIGlmICghZmlsZXMubGVuZ3RoKSB7XG4gICAgYWxlcnQoJ1BsZWFzZSBzZWxlY3QgYSBmaWxlIScpO1xuICAgIHJldHVybjtcbiAgfVxuICBcbiAgdmFyIGZpbGUgPSBmaWxlc1swXTtcbiAgdmFyIHN0YXJ0ID0gIDA7XG4gIHZhciBzdG9wID0gZmlsZS5zaXplIC0gMTtcbiAgXG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICB2YXIgdGVzdCA9IDA7XG4gIC8vIElmIHdlIHVzZSBvbmxvYWRlbmQsIHdlIG5lZWQgdG8gY2hlY2sgdGhlIHJlYWR5U3RhdGUuXG4gIHJlYWRlci5vbmxvYWRlbmQgPSBmdW5jdGlvbihldnQpIHtcbiAgICBpZiAoZXZ0LnRhcmdldC5yZWFkeVN0YXRlID09IEZpbGVSZWFkZXIuRE9ORSkgeyAvLyBET05FID09IDJcbiAgICAgIHZhciB0ZXN0ID0gZXZ0LnRhcmdldC5yZXN1bHQ7XG4gICAgICBjb25zb2xlLmxvZygnUmVhZCBieXRlczogJywgc3RhcnQgKyAxLCAnIC0gJywgc3RvcCArIDEsXG4gICAgICAgICAgJyBvZiAnLCBmaWxlLnNpemUsICcgYnl0ZSBmaWxlJyApO1xuICAgICAgY29uc29sZS5sb2codGVzdCk7XG4gICAgICB2YXIgbXlfSlNPTl9vYmplY3QgPSBKU09OLnBhcnNlKHRlc3QpO1xuICBcbiAgICAgIGNvbnNvbGUubG9nKG15X0pTT05fb2JqZWN0KTtcbiAgXG4gICAgICBmb3IgKGxldCBrID0gMDsgayA8IG15X0pTT05fb2JqZWN0Lmxlbmd0aDsgaysrKSB7XG4gICAgICAgIGFkZGluZ05ld0NhcmRzRnJvbUpTb24obXlfSlNPTl9vYmplY3Rba10pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgdmFyIGJsb2IgPSBmaWxlLnNsaWNlKHN0YXJ0LCBzdG9wICsgMSk7XG4gIHJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcoYmxvYik7XG59XG5cbi8vQWRkIGEgY2FyZCBmcm9tIGEganNvbiBmaWxlXG5mdW5jdGlvbiBhZGRpbmdOZXdDYXJkc0Zyb21KU29uKGNhcmRJbmZvKSB7XG4gIGlmIChjYXJkSW5mby5zdGFydFAgPiBjYXJkSW5mby5lbmRQKSB7XG4gICAgbGV0IHRyYW5zaXQgPSBjYXJkSW5mby5zdGFydFA7XG4gICAgY2FyZEluZm8uc3RhcnRQID0gY2FyZEluZm8uZW5kUDtcbiAgICBjYXJkSW5mby5lbmRQID0gdHJhbnNpdDtcbiAgfVxuICBpZiAoY2FyZEluZm8uc3RhcnRQIDwgMCkge1xuICAgIGNhcmRJbmZvLnN0YXJ0UCA9IDA7XG4gIH1cbiAgY29uc29sZS5sb2coY2FyZEluZm8uc3RhcnRQLCBjYXJkSW5mby5lbmRQKTtcbiAgbGV0IHJlc3VsdCA9IFBsYXllci5zbGlkZXJUb1ZpZGVvKGNhcmRJbmZvLnN0YXJ0UCwgY2FyZEluZm8uZW5kUCk7XG4gIC8vY29uc29sZS5sb2cocmVzdWx0KTtcbiAgbnVtYmVyT2ZDYXJkKys7XG4gIGlmICghY2FyZEluZm8uZGVsZXRlZCkge1xuICAgIGNvbnNvbGUubG9nKHJlc3VsdC5zdGFydER1cmF0aW9uLCByZXN1bHQuZW5kRHVyYXRpb24sIGNhcmRJbmZvLnN0YXJ0UCwgY2FyZEluZm8uZW5kUCwgY2FyZEluZm8pO1xuICAgIHZhciBjYXJkID0gQ2FyZChyZXN1bHQuc3RhcnREdXJhdGlvbiwgcmVzdWx0LmVuZER1cmF0aW9uLCBjYXJkSW5mby5zdGFydFAsIGNhcmRJbmZvLmVuZFAsIGNhcmRJbmZvKTtcbiAgICBjYXJkTWFuYWdlci5leGVjdXRlKG5ldyBDcmVhdGVOZXdDYXJkQ29tbWFuZChjYXJkKSk7XG4gICAgLy9kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGl2Q2FyZEJvYXJkJykuaW5zZXJ0QmVmb3JlKGNhcmQuaURpdiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RpdkNhcmRCb2FyZCcpLmZpcnN0Q2hpbGQpO1xuICB9XG59XG5cbi8qKlxuICogQWRkaW5nIGEgY2FyZCBieSBkcmFnIGFuZCBkcm9wLiBUaGUgY2FyZCBpcyBhZGRlZCBpbiB0aGUgbGlzdCBvZiBjYXJkc1xuICogUmV0dXJuIHRoZSBjYXJkIHRoYXQgaGF2ZSBiZWVuIGNyZWF0ZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTmV3Q2FyZChzdGFydFAsIGVuZFApIHtcbiAgLy9jb25zb2xlLmxvZyhcIlRFU1QgLyA6IFwiICsgc3RhcnRQICsgXCIgXCIgKyBlbmRQKTtcbiAgaWYgKHN0YXJ0UCA+IGVuZFApIHtcbiAgICBsZXQgdHJhbnNpdCA9IHN0YXJ0UDtcbiAgICBzdGFydFAgPSBlbmRQO1xuICAgIGVuZFAgPSB0cmFuc2l0O1xuICB9XG4gIGxldCByZXN1bHQgPSBQbGF5ZXIuc2xpZGVyVG9WaWRlbyhzdGFydFAsIGVuZFApO1xuICBudW1iZXJPZkNhcmQrKztcbiAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgXG4gIHZhciBjYXJkID0gbmV3IENhcmQocmVzdWx0LnN0YXJ0RHVyYXRpb24sIHJlc3VsdC5lbmREdXJhdGlvbiwgc3RhcnRQLCBlbmRQKTtcbiAgY2FyZE1hbmFnZXIuZXhlY3V0ZShuZXcgQ3JlYXRlTmV3Q2FyZENvbW1hbmQoY2FyZCkpO1xuICByZXR1cm4gY2FyZDtcbn1cblxuZnVuY3Rpb24gYWRkaW5nTmV3Q2FyZCgpIHtcbiAgYXJyYXlDYXJkLnB1c2godGhpcy5jYXJkKTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RpdkNhcmRCb2FyZCcpLmluc2VydEJlZm9yZSh0aGlzLmNhcmQuaURpdiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RpdkNhcmRCb2FyZCcpLmZpcnN0Q2hpbGQpO1xufVxuXG5mdW5jdGlvbiBkZWxldGVDYXJkKCkge1xuICAvL1N1cHByaW1lIGxhIGNhcnRlIGRlIGxhIGxpc3RlIGRlIGNhcnRlXG4gIC8qZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheUNhcmQubGVuZ3RoICAgOyBpKyspIHtcbiAgICBpZihhcnJheUNhcmRbaV0gID09PSBjYXJkKXtcbiAgICAgIHZhciBzdXBDYXJkID0gYXJyYXlDYXJkLnNwbGljZShpLDEpO1xuICAgICAgYXJyYXlDYXJkRGVsZXRlZC5wdXNoKHN1cENhcmQpO1xuICAgICAgY29uc29sZS5sb2coXCJkZWxldGVkIGNhcmQgOiBcIik7XG4gICAgICBjb25zb2xlLmxvZyhzdXBDYXJkKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSovXG4gIC8vZGVsZXRlQ2FyZFVJKGNhcmQpO1xuICAvKmFycmF5Q2FyZERlbGV0ZWQuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgY29uc29sZS5sb2coICAgZWxlbWVudCk7XG4gIH0pO1xuICBjb25zb2xlLmxvZyhcIioqKioqKioqKioqKioqKioqKioqKioqKlwiKTtcbiAgYXJyYXlDYXJkLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIGNvbnNvbGUubG9nKGVsZW1lbnQpO1xuICB9KTsqL1xuICBjbGVhckFsbFRpbWVyKCk7XG4gIGRlbGV0ZUNhcmRVSSh0aGlzLmNhcmQpO1xuICByZXR1cm4gdGhpcy5jYXJkO1xufVxuXG5mdW5jdGlvbiBkZWxldGVDYXJkVUkoY2FyZCkge1xuICBmZWVkYmFja09uU2xpZGVyVmlkZW8oZmFsc2UpO1xuICBjYXJkLmlEaXYucmVtb3ZlKCk7XG4gIGNhcmQuZGVsZXRlZCA9IHRydWVcbn1cblxuZnVuY3Rpb24gZG93bmxvYWQoY29udGVudCwgZmlsZU5hbWUsIGNvbnRlbnRUeXBlKSB7XG4gIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gIFxuICBcbiAvL2Euc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgdmFyIGZpbGUgPSBuZXcgQmxvYihbY29udGVudF0sIHtcbiAgICB0eXBlOiBjb250ZW50VHlwZVxuICB9KTtcbiAgXG4gIGEuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSk7XG4gIGEuZG93bmxvYWQgPSBmaWxlTmFtZTtcbiAgYS5jbGljaygpO1xuICBhLnJlbW92ZSgpO1xuICBcbiAgXG4gIFxuICBcbn1cblxuXG5cbmZ1bmN0aW9uIGxvYWRKU09OU2VnbWVudEhpc3RvcnkxKCkge1xuICBcbiAgICAgIGNvbnNvbGUubG9nKGdlbmVyYXRlSlNPTmZyb212YXIoKSk7XG4gICAgICBcbiAgICAgIGxldCBnZW5lcmF0ZWRKc29uID0gZ2VuZXJhdGVKU09OZnJvbXZhcigpO1xuICAgICAgdmFyIG15X0pTT05fb2JqZWN0ID0gSlNPTi5wYXJzZShnZW5lcmF0ZWRKc29uKTtcbiAgICAgIGNvbnNvbGUubG9nKG15X0pTT05fb2JqZWN0KTtcbiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgbXlfSlNPTl9vYmplY3QubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgYWRkaW5nTmV3Q2FyZHNGcm9tSlNvbihteV9KU09OX29iamVjdFtrXSk7XG4gICAgfVxuICBcbn1cblxuZnVuY3Rpb24gbG9hZEpTT05TZWdtZW50SGlzdG9yeTIoKSB7XG4gIGxldCBnZW5lcmF0ZWRKc29uMiA9IGdlbmVyYXRlSlNPTmZyb212YXIyKCk7XG4gIHZhciBteV9KU09OX29iamVjdCA9IEpTT04ucGFyc2UoZ2VuZXJhdGVkSnNvbjIpO1xuICBjb25zb2xlLmxvZyhteV9KU09OX29iamVjdCk7XG4gIGZvciAobGV0IGsgPSAwOyBrIDwgbXlfSlNPTl9vYmplY3QubGVuZ3RoOyBrKyspIHtcbiAgICBhZGRpbmdOZXdDYXJkc0Zyb21KU29uKG15X0pTT05fb2JqZWN0W2tdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsb2FkSlNPTlNlZ21lbnRIaXN0b3J5KFNIX3BhdGgpIHtcbiAgXG4gIFxuICB2YXIgeGhyX1NIID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gIHhocl9TSC5vcGVuKCdHRVQnLCBTSF9wYXRoLCB0cnVlKTtcbiAgXG4gIHhocl9TSC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucmVhZHlTdGF0ZSE9PTQpIHJldHVybjtcbiAgICBpZiAodGhpcy5zdGF0dXMhPT0yMDApIHJldHVybjsgLy8gb3Igd2hhdGV2ZXIgZXJyb3IgaGFuZGxpbmcgeW91IHdhbnRcbiAgICBjb25zb2xlLmxvZyh0aGlzLnJlc3BvbnNlVGV4dCk7XG4gICAgbGV0IGdlbmVyYXRlZEpzb24yID0gdGhpcy5yZXNwb25zZVRleHQ7XG4gICAgXG4gICAgdmFyIG15X0pTT05fb2JqZWN0ID0gSlNPTi5wYXJzZShnZW5lcmF0ZWRKc29uMik7XG4gICAgY29uc29sZS5sb2cobXlfSlNPTl9vYmplY3QpO1xuICAgIGZvciAobGV0IGsgPSAwOyBrIDwgbXlfSlNPTl9vYmplY3QubGVuZ3RoOyBrKyspIHtcbiAgICAgIGFkZGluZ05ld0NhcmRzRnJvbUpTb24obXlfSlNPTl9vYmplY3Rba10pO1xuICAgIH1cbiAgIFxuICB9O1xuICB4aHJfU0guc2VuZCgpO1xuICBcbiAgXG4gIHZhciBlbG1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ1NIUGlja2VyT3ZlcnZpZXcnKTtcbiAgdmFyIHNwYW4gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiY2xvc2VcIilbMV07XG4gIFxuICBzcGFuLmFkZEV2ZW50TGlzdGVuZXIoIFwibW91c2Vkb3duXCIgLCBmdW5jdGlvbigpIHtcbiAgICBlbG1zLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgfSk7XG4gIFxufVxuXG4iXX0=