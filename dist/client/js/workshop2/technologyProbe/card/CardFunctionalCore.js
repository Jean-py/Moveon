"use strict";

var commands = [];

var CardFunctionalCore = function CardFunctionalCore() {
  //I implemented a command pattern, see : https://www.dofactory.com/javascript/command-design-pattern
  return {
    //execute a command
    execute: function execute(command) {
      command.execute();
      //We send the command to the server (the server log it into a file, see ./src/server/ServerLogger)
      logger.sendAndLogCommand(command);
      //and we save the command created
      commands.push(command);
    }
  };
};

//Pas de commande pour cette function pour l'instant
function playCard(iDiv, startDurationParam) {
  console.log('play card in card functionalCore ');
  console.log(iDiv);
  //video.currentTime = startDurationParam;
  player.seekTo(startDurationParam);
  segmentFeedback.width = iDiv.style.width;
  segmentFeedback.startPostion = iDiv.style.left;
  //feedbackOnSliderVideo(true);
}

var repetPartOfVideo = function repetPartOfVideo(start, end, numberOfRepetition, speedRate) {
  console.log("function  - repetPartOfVideo", start, end, numberOfRepetition, speedRate);

  //TODO trim de video ce fait avec cette commande
  /*video_current.timeOffset({
    start: this.start, // in seconds
    end: this.end
  });
  */

  isPlayingCard = true;
  // faster speed initially
  video_current.playbackRate(speedRate);
  video_current.currentTime(start);

  var repet = numberOfRepetition;

  //console.log("function  - repetPartOfVideo [play part] l87 videoCommand");
  play();
  video_current.ontimeupdate = function () {

    if (isPlayingCard) {
      if (end > start && repet > 0) {
        if (video_current.currentTime() > end) {
          repet--;
          video_current.currentTime(start);
        }
      } else {
        video_current.ontimeupdate = null;
        feedbackOnSliderVideo(false);
        video_current.playbackRate(1);
      }
    }
  };
};

function modifyCardDescription() {
  this.card.description = this.text;
}
function modifyCardSpeed() {
  this.card.speed = this.speed;
}

function modifyCardNbRepet() {
  this.card.repetitionNumber = this.repetitionNumber;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhcmRGdW5jdGlvbmFsQ29yZS5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsIkNhcmRGdW5jdGlvbmFsQ29yZSIsImV4ZWN1dGUiLCJjb21tYW5kIiwibG9nZ2VyIiwic2VuZEFuZExvZ0NvbW1hbmQiLCJwdXNoIiwicGxheUNhcmQiLCJpRGl2Iiwic3RhcnREdXJhdGlvblBhcmFtIiwiY29uc29sZSIsImxvZyIsInBsYXllciIsInNlZWtUbyIsInNlZ21lbnRGZWVkYmFjayIsIndpZHRoIiwic3R5bGUiLCJzdGFydFBvc3Rpb24iLCJsZWZ0IiwicmVwZXRQYXJ0T2ZWaWRlbyIsInN0YXJ0IiwiZW5kIiwibnVtYmVyT2ZSZXBldGl0aW9uIiwic3BlZWRSYXRlIiwiaXNQbGF5aW5nQ2FyZCIsInZpZGVvX2N1cnJlbnQiLCJwbGF5YmFja1JhdGUiLCJjdXJyZW50VGltZSIsInJlcGV0IiwicGxheSIsIm9udGltZXVwZGF0ZSIsImZlZWRiYWNrT25TbGlkZXJWaWRlbyIsIm1vZGlmeUNhcmREZXNjcmlwdGlvbiIsImNhcmQiLCJkZXNjcmlwdGlvbiIsInRleHQiLCJtb2RpZnlDYXJkU3BlZWQiLCJzcGVlZCIsIm1vZGlmeUNhcmROYlJlcGV0IiwicmVwZXRpdGlvbk51bWJlciJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxXQUFXLEVBQWY7O0FBR0EsSUFBSUMscUJBQXFCLFNBQXJCQSxrQkFBcUIsR0FBVztBQUNsQztBQUNBLFNBQU87QUFDTDtBQUNBQyxhQUFTLGlCQUFTQyxPQUFULEVBQWtCO0FBQ3pCQSxjQUFRRCxPQUFSO0FBQ0E7QUFDQUUsYUFBT0MsaUJBQVAsQ0FBeUJGLE9BQXpCO0FBQ0E7QUFDQUgsZUFBU00sSUFBVCxDQUFjSCxPQUFkO0FBRUQ7QUFUSSxHQUFQO0FBV0QsQ0FiRDs7QUFlQTtBQUNBLFNBQVNJLFFBQVQsQ0FBa0JDLElBQWxCLEVBQXVCQyxrQkFBdkIsRUFBMEM7QUFDeENDLFVBQVFDLEdBQVIsQ0FBWSxtQ0FBWjtBQUNBRCxVQUFRQyxHQUFSLENBQVlILElBQVo7QUFDQztBQUNESSxTQUFPQyxNQUFQLENBQWNKLGtCQUFkO0FBQ0FLLGtCQUFnQkMsS0FBaEIsR0FBd0JQLEtBQUtRLEtBQUwsQ0FBV0QsS0FBbkM7QUFDQUQsa0JBQWdCRyxZQUFoQixHQUErQlQsS0FBS1EsS0FBTCxDQUFXRSxJQUExQztBQUNBO0FBRUQ7O0FBRUQsSUFBSUMsbUJBQW1CLFNBQW5CQSxnQkFBbUIsQ0FBVUMsS0FBVixFQUFnQkMsR0FBaEIsRUFBcUJDLGtCQUFyQixFQUF3Q0MsU0FBeEMsRUFBbUQ7QUFDeEViLFVBQVFDLEdBQVIsQ0FBWSw4QkFBWixFQUE2Q1MsS0FBN0MsRUFBbURDLEdBQW5ELEVBQXdEQyxrQkFBeEQsRUFBMkVDLFNBQTNFOztBQUVBO0FBQ0E7Ozs7OztBQU1BQyxrQkFBZ0IsSUFBaEI7QUFDQTtBQUNBQyxnQkFBY0MsWUFBZCxDQUEyQkgsU0FBM0I7QUFDQUUsZ0JBQWNFLFdBQWQsQ0FBMEJQLEtBQTFCOztBQUVBLE1BQUlRLFFBQVFOLGtCQUFaOztBQUVBO0FBQ0FPO0FBQ0FKLGdCQUFjSyxZQUFkLEdBQTZCLFlBQVc7O0FBRXRDLFFBQUdOLGFBQUgsRUFBaUI7QUFDZixVQUFLSCxNQUFNRCxLQUFQLElBQW1CUSxRQUFRLENBQS9CLEVBQW1DO0FBQ2pDLFlBQUlILGNBQWNFLFdBQWQsS0FBZ0NOLEdBQXBDLEVBQXlDO0FBQ3ZDTztBQUNBSCx3QkFBY0UsV0FBZCxDQUEwQlAsS0FBMUI7QUFDRDtBQUNGLE9BTEQsTUFLTztBQUNMSyxzQkFBY0ssWUFBZCxHQUE2QixJQUE3QjtBQUNBQyw4QkFBc0IsS0FBdEI7QUFDQU4sc0JBQWNDLFlBQWQsQ0FBMkIsQ0FBM0I7QUFDRDtBQUNGO0FBRUYsR0FmRDtBQWdCRCxDQW5DRDs7QUFxQ0EsU0FBU00scUJBQVQsR0FBZ0M7QUFDOUIsT0FBS0MsSUFBTCxDQUFVQyxXQUFWLEdBQXdCLEtBQUtDLElBQTdCO0FBQ0Q7QUFDRCxTQUFTQyxlQUFULEdBQTBCO0FBQ3hCLE9BQUtILElBQUwsQ0FBVUksS0FBVixHQUFrQixLQUFLQSxLQUF2QjtBQUNEOztBQUVELFNBQVNDLGlCQUFULEdBQTRCO0FBQzFCLE9BQUtMLElBQUwsQ0FBVU0sZ0JBQVYsR0FBNkIsS0FBS0EsZ0JBQWxDO0FBQ0QiLCJmaWxlIjoiQ2FyZEZ1bmN0aW9uYWxDb3JlLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbW1hbmRzID0gW107XG5cblxudmFyIENhcmRGdW5jdGlvbmFsQ29yZSA9IGZ1bmN0aW9uKCkge1xuICAvL0kgaW1wbGVtZW50ZWQgYSBjb21tYW5kIHBhdHRlcm4sIHNlZSA6IGh0dHBzOi8vd3d3LmRvZmFjdG9yeS5jb20vamF2YXNjcmlwdC9jb21tYW5kLWRlc2lnbi1wYXR0ZXJuXG4gIHJldHVybiB7XG4gICAgLy9leGVjdXRlIGEgY29tbWFuZFxuICAgIGV4ZWN1dGU6IGZ1bmN0aW9uKGNvbW1hbmQpIHtcbiAgICAgIGNvbW1hbmQuZXhlY3V0ZSgpO1xuICAgICAgLy9XZSBzZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgKHRoZSBzZXJ2ZXIgbG9nIGl0IGludG8gYSBmaWxlLCBzZWUgLi9zcmMvc2VydmVyL1NlcnZlckxvZ2dlcilcbiAgICAgIGxvZ2dlci5zZW5kQW5kTG9nQ29tbWFuZChjb21tYW5kKTtcbiAgICAgIC8vYW5kIHdlIHNhdmUgdGhlIGNvbW1hbmQgY3JlYXRlZFxuICAgICAgY29tbWFuZHMucHVzaChjb21tYW5kKTtcbiAgICAgIFxuICAgIH0sXG4gIH1cbn07XG5cbi8vUGFzIGRlIGNvbW1hbmRlIHBvdXIgY2V0dGUgZnVuY3Rpb24gcG91ciBsJ2luc3RhbnRcbmZ1bmN0aW9uIHBsYXlDYXJkKGlEaXYsc3RhcnREdXJhdGlvblBhcmFtKXtcbiAgY29uc29sZS5sb2coJ3BsYXkgY2FyZCBpbiBjYXJkIGZ1bmN0aW9uYWxDb3JlICcpO1xuICBjb25zb2xlLmxvZyhpRGl2KTtcbiAgIC8vdmlkZW8uY3VycmVudFRpbWUgPSBzdGFydER1cmF0aW9uUGFyYW07XG4gIHBsYXllci5zZWVrVG8oc3RhcnREdXJhdGlvblBhcmFtKTtcbiAgc2VnbWVudEZlZWRiYWNrLndpZHRoID0gaURpdi5zdHlsZS53aWR0aDtcbiAgc2VnbWVudEZlZWRiYWNrLnN0YXJ0UG9zdGlvbiA9IGlEaXYuc3R5bGUubGVmdDtcbiAgLy9mZWVkYmFja09uU2xpZGVyVmlkZW8odHJ1ZSk7XG4gIFxufVxuXG52YXIgcmVwZXRQYXJ0T2ZWaWRlbyA9IGZ1bmN0aW9uIChzdGFydCxlbmQsIG51bWJlck9mUmVwZXRpdGlvbixzcGVlZFJhdGUpIHtcbiAgY29uc29sZS5sb2coXCJmdW5jdGlvbiAgLSByZXBldFBhcnRPZlZpZGVvXCIgLCBzdGFydCxlbmQsIG51bWJlck9mUmVwZXRpdGlvbixzcGVlZFJhdGUpO1xuICBcbiAgLy9UT0RPIHRyaW0gZGUgdmlkZW8gY2UgZmFpdCBhdmVjIGNldHRlIGNvbW1hbmRlXG4gIC8qdmlkZW9fY3VycmVudC50aW1lT2Zmc2V0KHtcbiAgICBzdGFydDogdGhpcy5zdGFydCwgLy8gaW4gc2Vjb25kc1xuICAgIGVuZDogdGhpcy5lbmRcbiAgfSk7XG4gICovXG4gIFxuICBpc1BsYXlpbmdDYXJkID0gdHJ1ZTtcbiAgLy8gZmFzdGVyIHNwZWVkIGluaXRpYWxseVxuICB2aWRlb19jdXJyZW50LnBsYXliYWNrUmF0ZShzcGVlZFJhdGUpO1xuICB2aWRlb19jdXJyZW50LmN1cnJlbnRUaW1lKHN0YXJ0KTtcbiAgXG4gIHZhciByZXBldCA9IG51bWJlck9mUmVwZXRpdGlvbjtcbiAgXG4gIC8vY29uc29sZS5sb2coXCJmdW5jdGlvbiAgLSByZXBldFBhcnRPZlZpZGVvIFtwbGF5IHBhcnRdIGw4NyB2aWRlb0NvbW1hbmRcIik7XG4gIHBsYXkoKTtcbiAgdmlkZW9fY3VycmVudC5vbnRpbWV1cGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICBcbiAgICBpZihpc1BsYXlpbmdDYXJkKXtcbiAgICAgIGlmICgoZW5kID4gc3RhcnQgKSAmJiAgcmVwZXQgPiAwICkge1xuICAgICAgICBpZiAodmlkZW9fY3VycmVudC5jdXJyZW50VGltZSgpICAgPiBlbmQpIHtcbiAgICAgICAgICByZXBldC0tO1xuICAgICAgICAgIHZpZGVvX2N1cnJlbnQuY3VycmVudFRpbWUoc3RhcnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2aWRlb19jdXJyZW50Lm9udGltZXVwZGF0ZSA9IG51bGw7XG4gICAgICAgIGZlZWRiYWNrT25TbGlkZXJWaWRlbyhmYWxzZSk7XG4gICAgICAgIHZpZGVvX2N1cnJlbnQucGxheWJhY2tSYXRlKDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIG1vZGlmeUNhcmREZXNjcmlwdGlvbigpe1xuICB0aGlzLmNhcmQuZGVzY3JpcHRpb24gPSB0aGlzLnRleHQ7XG59XG5mdW5jdGlvbiBtb2RpZnlDYXJkU3BlZWQoKXtcbiAgdGhpcy5jYXJkLnNwZWVkID0gdGhpcy5zcGVlZDtcbn1cblxuZnVuY3Rpb24gbW9kaWZ5Q2FyZE5iUmVwZXQoKXtcbiAgdGhpcy5jYXJkLnJlcGV0aXRpb25OdW1iZXIgPSB0aGlzLnJlcGV0aXRpb25OdW1iZXI7XG59XG5cblxuIl19