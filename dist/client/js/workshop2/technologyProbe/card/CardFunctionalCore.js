'use strict';

var commands = [];

var CardFunctionalCore = function CardFunctionalCore() {
  //I implemented a command pattern, see : https://www.dofactory.com/javascript/command-design-pattern
  return {
    //execute a command
    execute: function execute(command) {

      command.execute();
      //We send the command to the server (the server log it into a file, see ./src/server/ServerLogger)
      logger.sendAndLogCommand(command);
      //and we save the command created
      commands.push(command);
    }
  };
};

//Pas de commande pour cette function pour l'instant
function playCard(iDiv, startDurationParam) {
  console.log('play card in card functionalCore ');
  console.log(iDiv);
  //video.currentTime = startDurationParam;
  Player.seekTo(startDurationParam);
  segmentFeedback.width = iDiv.style.width;
  segmentFeedback.startPostion = iDiv.style.left;
  feedbackOnSliderVideo(true);
}

function modifyCardDescription() {
  //window.getElementById(id_card).
  //description = text;
  this.card.description = text;
}
function modifyCardSpeed() {
  //let nbRepet = selectNbRepet.options[selectNbRepet.selectedIndex].value;
  this.card.speed = speed;
}

function modifyCardNbRepet() {
  //let speedRate = selectSpeed.options[selectSpeed.selectedIndex].value;
  this.card.repetitionNumber = repetitionNumber;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhcmRGdW5jdGlvbmFsQ29yZS5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsIkNhcmRGdW5jdGlvbmFsQ29yZSIsImV4ZWN1dGUiLCJjb21tYW5kIiwibG9nZ2VyIiwic2VuZEFuZExvZ0NvbW1hbmQiLCJwdXNoIiwicGxheUNhcmQiLCJpRGl2Iiwic3RhcnREdXJhdGlvblBhcmFtIiwiY29uc29sZSIsImxvZyIsIlBsYXllciIsInNlZWtUbyIsInNlZ21lbnRGZWVkYmFjayIsIndpZHRoIiwic3R5bGUiLCJzdGFydFBvc3Rpb24iLCJsZWZ0IiwiZmVlZGJhY2tPblNsaWRlclZpZGVvIiwibW9kaWZ5Q2FyZERlc2NyaXB0aW9uIiwiY2FyZCIsImRlc2NyaXB0aW9uIiwidGV4dCIsIm1vZGlmeUNhcmRTcGVlZCIsInNwZWVkIiwibW9kaWZ5Q2FyZE5iUmVwZXQiLCJyZXBldGl0aW9uTnVtYmVyIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFdBQVcsRUFBZjs7QUFHQSxJQUFJQyxxQkFBcUIsU0FBckJBLGtCQUFxQixHQUFXO0FBQ2xDO0FBQ0EsU0FBTztBQUNMO0FBQ0FDLGFBQVMsaUJBQVNDLE9BQVQsRUFBa0I7O0FBRXpCQSxjQUFRRCxPQUFSO0FBQ0E7QUFDQUUsYUFBT0MsaUJBQVAsQ0FBeUJGLE9BQXpCO0FBQ0E7QUFDQUgsZUFBU00sSUFBVCxDQUFjSCxPQUFkO0FBRUQ7QUFWSSxHQUFQO0FBWUQsQ0FkRDs7QUFnQkE7QUFDQSxTQUFTSSxRQUFULENBQWtCQyxJQUFsQixFQUF1QkMsa0JBQXZCLEVBQTBDO0FBQ3hDQyxVQUFRQyxHQUFSLENBQVksbUNBQVo7QUFDQUQsVUFBUUMsR0FBUixDQUFZSCxJQUFaO0FBQ0M7QUFDREksU0FBT0MsTUFBUCxDQUFjSixrQkFBZDtBQUNBSyxrQkFBZ0JDLEtBQWhCLEdBQXdCUCxLQUFLUSxLQUFMLENBQVdELEtBQW5DO0FBQ0FELGtCQUFnQkcsWUFBaEIsR0FBK0JULEtBQUtRLEtBQUwsQ0FBV0UsSUFBMUM7QUFDQUMsd0JBQXNCLElBQXRCO0FBQ0Q7O0FBR0QsU0FBU0MscUJBQVQsR0FBZ0M7QUFDOUI7QUFDQTtBQUNBLE9BQUtDLElBQUwsQ0FBVUMsV0FBVixHQUF3QkMsSUFBeEI7QUFDRDtBQUNELFNBQVNDLGVBQVQsR0FBMEI7QUFDeEI7QUFDQSxPQUFLSCxJQUFMLENBQVVJLEtBQVYsR0FBa0JBLEtBQWxCO0FBQ0Q7O0FBRUQsU0FBU0MsaUJBQVQsR0FBNEI7QUFDMUI7QUFDQSxPQUFLTCxJQUFMLENBQVVNLGdCQUFWLEdBQTZCQSxnQkFBN0I7QUFDRCIsImZpbGUiOiJDYXJkRnVuY3Rpb25hbENvcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29tbWFuZHMgPSBbXTtcblxuXG52YXIgQ2FyZEZ1bmN0aW9uYWxDb3JlID0gZnVuY3Rpb24oKSB7XG4gIC8vSSBpbXBsZW1lbnRlZCBhIGNvbW1hbmQgcGF0dGVybiwgc2VlIDogaHR0cHM6Ly93d3cuZG9mYWN0b3J5LmNvbS9qYXZhc2NyaXB0L2NvbW1hbmQtZGVzaWduLXBhdHRlcm5cbiAgcmV0dXJuIHtcbiAgICAvL2V4ZWN1dGUgYSBjb21tYW5kXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24oY29tbWFuZCkge1xuICAgICAgXG4gICAgICBjb21tYW5kLmV4ZWN1dGUoKTtcbiAgICAgIC8vV2Ugc2VuZCB0aGUgY29tbWFuZCB0byB0aGUgc2VydmVyICh0aGUgc2VydmVyIGxvZyBpdCBpbnRvIGEgZmlsZSwgc2VlIC4vc3JjL3NlcnZlci9TZXJ2ZXJMb2dnZXIpXG4gICAgICBsb2dnZXIuc2VuZEFuZExvZ0NvbW1hbmQoY29tbWFuZCk7XG4gICAgICAvL2FuZCB3ZSBzYXZlIHRoZSBjb21tYW5kIGNyZWF0ZWRcbiAgICAgIGNvbW1hbmRzLnB1c2goY29tbWFuZCk7XG4gICAgICBcbiAgICB9LFxuICB9XG59O1xuXG4vL1BhcyBkZSBjb21tYW5kZSBwb3VyIGNldHRlIGZ1bmN0aW9uIHBvdXIgbCdpbnN0YW50XG5mdW5jdGlvbiBwbGF5Q2FyZChpRGl2LHN0YXJ0RHVyYXRpb25QYXJhbSl7XG4gIGNvbnNvbGUubG9nKCdwbGF5IGNhcmQgaW4gY2FyZCBmdW5jdGlvbmFsQ29yZSAnKTtcbiAgY29uc29sZS5sb2coaURpdik7XG4gICAvL3ZpZGVvLmN1cnJlbnRUaW1lID0gc3RhcnREdXJhdGlvblBhcmFtO1xuICBQbGF5ZXIuc2Vla1RvKHN0YXJ0RHVyYXRpb25QYXJhbSk7XG4gIHNlZ21lbnRGZWVkYmFjay53aWR0aCA9IGlEaXYuc3R5bGUud2lkdGg7XG4gIHNlZ21lbnRGZWVkYmFjay5zdGFydFBvc3Rpb24gPSBpRGl2LnN0eWxlLmxlZnQ7XG4gIGZlZWRiYWNrT25TbGlkZXJWaWRlbyh0cnVlKTtcbn1cblxuXG5mdW5jdGlvbiBtb2RpZnlDYXJkRGVzY3JpcHRpb24oKXtcbiAgLy93aW5kb3cuZ2V0RWxlbWVudEJ5SWQoaWRfY2FyZCkuXG4gIC8vZGVzY3JpcHRpb24gPSB0ZXh0O1xuICB0aGlzLmNhcmQuZGVzY3JpcHRpb24gPSB0ZXh0O1xufVxuZnVuY3Rpb24gbW9kaWZ5Q2FyZFNwZWVkKCl7XG4gIC8vbGV0IG5iUmVwZXQgPSBzZWxlY3ROYlJlcGV0Lm9wdGlvbnNbc2VsZWN0TmJSZXBldC5zZWxlY3RlZEluZGV4XS52YWx1ZTtcbiAgdGhpcy5jYXJkLnNwZWVkID0gc3BlZWQ7XG59XG5cbmZ1bmN0aW9uIG1vZGlmeUNhcmROYlJlcGV0KCl7XG4gIC8vbGV0IHNwZWVkUmF0ZSA9IHNlbGVjdFNwZWVkLm9wdGlvbnNbc2VsZWN0U3BlZWQuc2VsZWN0ZWRJbmRleF0udmFsdWU7XG4gIHRoaXMuY2FyZC5yZXBldGl0aW9uTnVtYmVyID0gcmVwZXRpdGlvbk51bWJlcjtcbn1cblxuXG4iXX0=