"use strict";

// log helper

var socket = null;
var port = 8000;
var socket_name_session = "dev";

var Logger = function Logger() {
  return {
    //Connect to the server
    connect: function connect() {
      connectToServer();
    },
    //Change the user's name (of the socket)
    changeUsernameSocket: function changeUsernameSocket(username) {
      send_username(username);
    },
    //Send a command to the server and the server logs it
    sendAndLogCommand: function sendAndLogCommand(command) {
      log_command(command);
    },
    getSocket_name_session: function getSocket_name_session() {
      console.log("test : " + socket_name_session);
      return _getSocket_name_session();
    }
  };
};

function _getSocket_name_session() {
  return socket_name_session;
}

function connectToServer() {
  socket = io.connect("http://localhost:" + port);
  console.log("changing username socket to dev");
  logger.changeUsernameSocket("dev");
};

function send_username(username) {
  if (socket != null) {
    //console.log("username val : " + username);
    socket_name_session = username;
    socket.emit("socket_username", { username: username });
  }
};

//TODO faire une deep recopies des objets pass√© en paramettre!
function log_command(commandParam) {
  console.log("executing : ");
  console.log(commandParam);
  if (socket != null) {
    var objCopy = null;

    //We have to log an event, if so, it's a circular reference and need to be treated as well
    if (commandParam.e !== undefined) {
      //console.log("OK --- " ) ;
      //console.log(commandParam.e.pageX) ;

      var mouse_event = { mouseEvent: { pageX: commandParam.e.pageX, pageY: commandParam.e.pageY } };

      //const o2 = { y: commandParam.e.pageY};
      objCopy = Object.assign({}, commandParam);
      objCopy = Object.assign(commandParam, mouse_event);
      objCopy.e = undefined;
    } else {
      objCopy = Object.assign({}, commandParam);
    }

    //console.log("*** LOGGER : log_command ***" );
    if (socket_name_session !== null) {
      send_username(socket_name_session);
    }
    objCopy.execute = objCopy.execute.name;
    if (objCopy.undo != null) {
      objCopy.undo = objCopy.undo.name;
    }

    socket.emit("log_command", objCopy);
    return true;
  }
  return false;
};

//Stringify an object, if the object contain a function,
// /!\ it convert the body of the function into text
var stringify = function stringify(obj, prop) {
  var placeholder = '____PLACEHOLDER____';
  var fns = [];
  var json = JSON.stringify(obj, function (key, value) {
    if (typeof value === 'function') {
      fns.push(value);
      return placeholder;
    }
    return value;
  }, 2);
  json = json.replace(new RegExp('"' + placeholder + '"', 'g'), function (_) {
    return fns.shift();
  });
  return json + ';';
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2dlci5qcyJdLCJuYW1lcyI6WyJzb2NrZXQiLCJwb3J0Iiwic29ja2V0X25hbWVfc2Vzc2lvbiIsIkxvZ2dlciIsImNvbm5lY3QiLCJjb25uZWN0VG9TZXJ2ZXIiLCJjaGFuZ2VVc2VybmFtZVNvY2tldCIsInVzZXJuYW1lIiwic2VuZF91c2VybmFtZSIsInNlbmRBbmRMb2dDb21tYW5kIiwiY29tbWFuZCIsImxvZ19jb21tYW5kIiwiZ2V0U29ja2V0X25hbWVfc2Vzc2lvbiIsImNvbnNvbGUiLCJsb2ciLCJpbyIsImxvZ2dlciIsImVtaXQiLCJjb21tYW5kUGFyYW0iLCJvYmpDb3B5IiwiZSIsInVuZGVmaW5lZCIsIm1vdXNlX2V2ZW50IiwibW91c2VFdmVudCIsInBhZ2VYIiwicGFnZVkiLCJPYmplY3QiLCJhc3NpZ24iLCJleGVjdXRlIiwibmFtZSIsInVuZG8iLCJzdHJpbmdpZnkiLCJvYmoiLCJwcm9wIiwicGxhY2Vob2xkZXIiLCJmbnMiLCJqc29uIiwiSlNPTiIsImtleSIsInZhbHVlIiwicHVzaCIsInJlcGxhY2UiLCJSZWdFeHAiLCJfIiwic2hpZnQiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsSUFBSUEsU0FBUyxJQUFiO0FBQ0EsSUFBSUMsT0FBTyxJQUFYO0FBQ0EsSUFBSUMsc0JBQXNCLEtBQTFCOztBQUVBLElBQUlDLFNBQVMsU0FBVEEsTUFBUyxHQUFXO0FBQ3RCLFNBQU87QUFDTDtBQUNBQyxhQUFTLG1CQUFVO0FBQ2pCQztBQUNELEtBSkk7QUFLTDtBQUNBQywwQkFBc0IsOEJBQVNDLFFBQVQsRUFBbUI7QUFDdkNDLG9CQUFjRCxRQUFkO0FBQ0QsS0FSSTtBQVNMO0FBQ0FFLHVCQUFtQiwyQkFBU0MsT0FBVCxFQUFrQjtBQUNuQ0Msa0JBQVlELE9BQVo7QUFDRCxLQVpJO0FBYUxFLDRCQUF3QixrQ0FBWTtBQUNsQ0MsY0FBUUMsR0FBUixDQUFZLFlBQVlaLG1CQUF4QjtBQUNBLGFBQU9VLHlCQUFQO0FBQ0Q7QUFoQkksR0FBUDtBQWtCRCxDQW5CRDs7QUFxQkEsU0FBU0EsdUJBQVQsR0FBaUM7QUFDL0IsU0FBT1YsbUJBQVA7QUFDRDs7QUFRRCxTQUFTRyxlQUFULEdBQTJCO0FBQ3ZCTCxXQUFTZSxHQUFHWCxPQUFILENBQVcsc0JBQW9CSCxJQUEvQixDQUFUO0FBQ0FZLFVBQVFDLEdBQVIsQ0FBWSxpQ0FBWjtBQUNBRSxTQUFPVixvQkFBUCxDQUE0QixLQUE1QjtBQUNIOztBQUlELFNBQVNFLGFBQVQsQ0FBdUJELFFBQXZCLEVBQWlDO0FBQy9CLE1BQUdQLFVBQVUsSUFBYixFQUFrQjtBQUNoQjtBQUNBRSwwQkFBc0JLLFFBQXRCO0FBQ0FQLFdBQU9pQixJQUFQLENBQVksaUJBQVosRUFBK0IsRUFBQ1YsVUFBV0EsUUFBWixFQUEvQjtBQUNEO0FBQ0Y7O0FBRUQ7QUFDQSxTQUFTSSxXQUFULENBQXFCTyxZQUFyQixFQUFrQztBQUNoQ0wsVUFBUUMsR0FBUixDQUFZLGNBQVo7QUFDQUQsVUFBUUMsR0FBUixDQUFZSSxZQUFaO0FBQ0EsTUFBR2xCLFVBQVUsSUFBYixFQUFrQjtBQUNoQixRQUFJbUIsVUFBVSxJQUFkOztBQUVBO0FBQ0EsUUFBSUQsYUFBYUUsQ0FBYixLQUFtQkMsU0FBdkIsRUFBa0M7QUFDaEM7QUFDQTs7QUFFQSxVQUFNQyxjQUFjLEVBQUNDLFlBQWEsRUFBQ0MsT0FBT04sYUFBYUUsQ0FBYixDQUFlSSxLQUF2QixFQUE4QkMsT0FBT1AsYUFBYUUsQ0FBYixDQUFlSyxLQUFwRCxFQUFkLEVBQXBCOztBQUVBO0FBQ0NOLGdCQUFVTyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQlQsWUFBbEIsQ0FBVjtBQUNBQyxnQkFBVU8sT0FBT0MsTUFBUCxDQUFjVCxZQUFkLEVBQTRCSSxXQUE1QixDQUFWO0FBQ0FILGNBQVFDLENBQVIsR0FBWUMsU0FBWjtBQUNGLEtBVkQsTUFVTztBQUNKRixnQkFBVU8sT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JULFlBQWxCLENBQVY7QUFDRjs7QUFJRDtBQUNBLFFBQUdoQix3QkFBd0IsSUFBM0IsRUFBaUM7QUFDL0JNLG9CQUFjTixtQkFBZDtBQUNEO0FBQ0RpQixZQUFRUyxPQUFSLEdBQWtCVCxRQUFRUyxPQUFSLENBQWdCQyxJQUFsQztBQUNBLFFBQUdWLFFBQVFXLElBQVIsSUFBZ0IsSUFBbkIsRUFBd0I7QUFDdEJYLGNBQVFXLElBQVIsR0FBZVgsUUFBUVcsSUFBUixDQUFhRCxJQUE1QjtBQUNEOztBQUVEN0IsV0FBT2lCLElBQVAsQ0FBWSxhQUFaLEVBQTJCRSxPQUEzQjtBQUNBLFdBQU8sSUFBUDtBQUVEO0FBQ0QsU0FBTyxLQUFQO0FBQ0Q7O0FBS0Q7QUFDQTtBQUNBLElBQUlZLFlBQVksU0FBWkEsU0FBWSxDQUFTQyxHQUFULEVBQWNDLElBQWQsRUFBb0I7QUFDbEMsTUFBSUMsY0FBYyxxQkFBbEI7QUFDQSxNQUFJQyxNQUFNLEVBQVY7QUFDQSxNQUFJQyxPQUFPQyxLQUFLTixTQUFMLENBQWVDLEdBQWYsRUFBb0IsVUFBU00sR0FBVCxFQUFjQyxLQUFkLEVBQXFCO0FBQ2xELFFBQUksT0FBT0EsS0FBUCxLQUFpQixVQUFyQixFQUFpQztBQUMvQkosVUFBSUssSUFBSixDQUFTRCxLQUFUO0FBQ0EsYUFBT0wsV0FBUDtBQUNEO0FBQ0QsV0FBT0ssS0FBUDtBQUNELEdBTlUsRUFNUixDQU5RLENBQVg7QUFPQUgsU0FBT0EsS0FBS0ssT0FBTCxDQUFhLElBQUlDLE1BQUosQ0FBVyxNQUFNUixXQUFOLEdBQW9CLEdBQS9CLEVBQW9DLEdBQXBDLENBQWIsRUFBdUQsVUFBU1MsQ0FBVCxFQUFZO0FBQ3hFLFdBQU9SLElBQUlTLEtBQUosRUFBUDtBQUNELEdBRk0sQ0FBUDtBQUdBLFNBQVFSLE9BQU8sR0FBZjtBQUNELENBZEQiLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbG9nIGhlbHBlclxuXG52YXIgc29ja2V0ID0gbnVsbDtcbnZhciBwb3J0ID0gODAwMDtcbnZhciBzb2NrZXRfbmFtZV9zZXNzaW9uID0gXCJkZXZcIjtcblxudmFyIExvZ2dlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIC8vQ29ubmVjdCB0byB0aGUgc2VydmVyXG4gICAgY29ubmVjdDogZnVuY3Rpb24oKXtcbiAgICAgIGNvbm5lY3RUb1NlcnZlcigpO1xuICAgIH0sXG4gICAgLy9DaGFuZ2UgdGhlIHVzZXIncyBuYW1lIChvZiB0aGUgc29ja2V0KVxuICAgIGNoYW5nZVVzZXJuYW1lU29ja2V0OiBmdW5jdGlvbih1c2VybmFtZSkge1xuICAgICAgc2VuZF91c2VybmFtZSh1c2VybmFtZSk7XG4gICAgfSxcbiAgICAvL1NlbmQgYSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgYW5kIHRoZSBzZXJ2ZXIgbG9ncyBpdFxuICAgIHNlbmRBbmRMb2dDb21tYW5kOiBmdW5jdGlvbihjb21tYW5kKSB7XG4gICAgICBsb2dfY29tbWFuZChjb21tYW5kKTtcbiAgICB9LFxuICAgIGdldFNvY2tldF9uYW1lX3Nlc3Npb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwidGVzdCA6IFwiICsgc29ja2V0X25hbWVfc2Vzc2lvbik7XG4gICAgICByZXR1cm4gZ2V0U29ja2V0X25hbWVfc2Vzc2lvbigpO1xuICAgIH0sXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldFNvY2tldF9uYW1lX3Nlc3Npb24oKXtcbiAgcmV0dXJuIHNvY2tldF9uYW1lX3Nlc3Npb247XG59XG5cblxuXG5cblxuXG5cbmZ1bmN0aW9uIGNvbm5lY3RUb1NlcnZlcigpIHtcbiAgICBzb2NrZXQgPSBpby5jb25uZWN0KFwiaHR0cDovL2xvY2FsaG9zdDpcIitwb3J0KTtcbiAgICBjb25zb2xlLmxvZyhcImNoYW5naW5nIHVzZXJuYW1lIHNvY2tldCB0byBkZXZcIik7XG4gICAgbG9nZ2VyLmNoYW5nZVVzZXJuYW1lU29ja2V0KFwiZGV2XCIpO1xufTtcblxuXG5cbmZ1bmN0aW9uIHNlbmRfdXNlcm5hbWUodXNlcm5hbWUpIHtcbiAgaWYoc29ja2V0ICE9IG51bGwpe1xuICAgIC8vY29uc29sZS5sb2coXCJ1c2VybmFtZSB2YWwgOiBcIiArIHVzZXJuYW1lKTtcbiAgICBzb2NrZXRfbmFtZV9zZXNzaW9uID0gdXNlcm5hbWU7XG4gICAgc29ja2V0LmVtaXQoXCJzb2NrZXRfdXNlcm5hbWVcIiwge3VzZXJuYW1lIDogdXNlcm5hbWV9KVxuICB9XG59O1xuXG4vL1RPRE8gZmFpcmUgdW5lIGRlZXAgcmVjb3BpZXMgZGVzIG9iamV0cyBwYXNzw6kgZW4gcGFyYW1ldHRyZSFcbmZ1bmN0aW9uIGxvZ19jb21tYW5kKGNvbW1hbmRQYXJhbSl7XG4gIGNvbnNvbGUubG9nKFwiZXhlY3V0aW5nIDogXCIpO1xuICBjb25zb2xlLmxvZyhjb21tYW5kUGFyYW0pO1xuICBpZihzb2NrZXQgIT0gbnVsbCl7XG4gICAgdmFyIG9iakNvcHkgPSBudWxsO1xuICAgIFxuICAgIC8vV2UgaGF2ZSB0byBsb2cgYW4gZXZlbnQsIGlmIHNvLCBpdCdzIGEgY2lyY3VsYXIgcmVmZXJlbmNlIGFuZCBuZWVkIHRvIGJlIHRyZWF0ZWQgYXMgd2VsbFxuICAgIGlmIChjb21tYW5kUGFyYW0uZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvL2NvbnNvbGUubG9nKFwiT0sgLS0tIFwiICkgO1xuICAgICAgLy9jb25zb2xlLmxvZyhjb21tYW5kUGFyYW0uZS5wYWdlWCkgO1xuICAgICAgXG4gICAgICBjb25zdCBtb3VzZV9ldmVudCA9IHttb3VzZUV2ZW50IDoge3BhZ2VYOiBjb21tYW5kUGFyYW0uZS5wYWdlWCwgcGFnZVk6IGNvbW1hbmRQYXJhbS5lLnBhZ2VZfX07XG4gICAgICBcbiAgICAgIC8vY29uc3QgbzIgPSB7IHk6IGNvbW1hbmRQYXJhbS5lLnBhZ2VZfTtcbiAgICAgICBvYmpDb3B5ID0gT2JqZWN0LmFzc2lnbih7fSwgY29tbWFuZFBhcmFtKTtcbiAgICAgICBvYmpDb3B5ID0gT2JqZWN0LmFzc2lnbihjb21tYW5kUGFyYW0sIG1vdXNlX2V2ZW50KTtcbiAgICAgICBvYmpDb3B5LmUgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICBvYmpDb3B5ID0gT2JqZWN0LmFzc2lnbih7fSwgY29tbWFuZFBhcmFtKTtcbiAgICB9XG4gIFxuICAgIFxuICAgIFxuICAgIC8vY29uc29sZS5sb2coXCIqKiogTE9HR0VSIDogbG9nX2NvbW1hbmQgKioqXCIgKTtcbiAgICBpZihzb2NrZXRfbmFtZV9zZXNzaW9uICE9PSBudWxsICl7XG4gICAgICBzZW5kX3VzZXJuYW1lKHNvY2tldF9uYW1lX3Nlc3Npb24pO1xuICAgIH1cbiAgICBvYmpDb3B5LmV4ZWN1dGUgPSBvYmpDb3B5LmV4ZWN1dGUubmFtZTtcbiAgICBpZihvYmpDb3B5LnVuZG8gIT0gbnVsbCl7XG4gICAgICBvYmpDb3B5LnVuZG8gPSBvYmpDb3B5LnVuZG8ubmFtZTtcbiAgICB9XG5cbiAgICBzb2NrZXQuZW1pdChcImxvZ19jb21tYW5kXCIsIG9iakNvcHkpO1xuICAgIHJldHVybiB0cnVlO1xuICAgIFxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cblxuXG5cbi8vU3RyaW5naWZ5IGFuIG9iamVjdCwgaWYgdGhlIG9iamVjdCBjb250YWluIGEgZnVuY3Rpb24sXG4vLyAvIVxcIGl0IGNvbnZlcnQgdGhlIGJvZHkgb2YgdGhlIGZ1bmN0aW9uIGludG8gdGV4dFxudmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkge1xuICB2YXIgcGxhY2Vob2xkZXIgPSAnX19fX1BMQUNFSE9MREVSX19fXyc7XG4gIHZhciBmbnMgPSBbXTtcbiAgdmFyIGpzb24gPSBKU09OLnN0cmluZ2lmeShvYmosIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmbnMucHVzaCh2YWx1ZSk7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSwgMik7XG4gIGpzb24gPSBqc29uLnJlcGxhY2UobmV3IFJlZ0V4cCgnXCInICsgcGxhY2Vob2xkZXIgKyAnXCInLCAnZycpLCBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGZucy5zaGlmdCgpO1xuICB9KTtcbiAgcmV0dXJuICBqc29uICsgJzsnO1xufTtcblxuXG4iXX0=