'use strict';

// log helper

var socket = null;
var port = 8000;

var Logger = function Logger() {
  return {
    //Connect to the server
    connect: function connect() {
      connectToServer();
    },
    //Change the user's name (of the socket)
    changeUsernameSocket: function changeUsernameSocket(username) {
      send_username(username);
    },
    //Send a command to the server and the server logs it
    sendAndLogCommand: function sendAndLogCommand(command) {
      log_command(command);
    }
  };
};

function connectToServer() {
  socket = io.connect('http://localhost:' + port);
};

function send_username(username) {
  if (socket != null) {
    console.log("username val : " + username);
    socket.emit('change_username', { username: username });
  }
};

function log_command(commandParam) {
  if (socket != null) {
    var objCopy = Object.assign({}, commandParam);
    console.log("*** LOGGER : log_command ***");
    //
    objCopy.execute = objCopy.execute.name;
    objCopy.undo = objCopy.undo.name;
    socket.emit('log_command', objCopy);
    return true;
  }
  return false;
};

//Stringify an object, if the object contain a function,
// /!\ it convert the body of the function into text
var stringify = function stringify(obj, prop) {
  var placeholder = '____PLACEHOLDER____';
  var fns = [];
  var json = JSON.stringify(obj, function (key, value) {
    if (typeof value === 'function') {
      fns.push(value);
      return placeholder;
    }
    return value;
  }, 2);
  json = json.replace(new RegExp('"' + placeholder + '"', 'g'), function (_) {
    return fns.shift();
  });
  return json + ';';
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2dlci5qcyJdLCJuYW1lcyI6WyJzb2NrZXQiLCJwb3J0IiwiTG9nZ2VyIiwiY29ubmVjdCIsImNvbm5lY3RUb1NlcnZlciIsImNoYW5nZVVzZXJuYW1lU29ja2V0IiwidXNlcm5hbWUiLCJzZW5kX3VzZXJuYW1lIiwic2VuZEFuZExvZ0NvbW1hbmQiLCJjb21tYW5kIiwibG9nX2NvbW1hbmQiLCJpbyIsImNvbnNvbGUiLCJsb2ciLCJlbWl0IiwiY29tbWFuZFBhcmFtIiwib2JqQ29weSIsIk9iamVjdCIsImFzc2lnbiIsImV4ZWN1dGUiLCJuYW1lIiwidW5kbyIsInN0cmluZ2lmeSIsIm9iaiIsInByb3AiLCJwbGFjZWhvbGRlciIsImZucyIsImpzb24iLCJKU09OIiwia2V5IiwidmFsdWUiLCJwdXNoIiwicmVwbGFjZSIsIlJlZ0V4cCIsIl8iLCJzaGlmdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQSxJQUFJQSxTQUFTLElBQWI7QUFDQSxJQUFJQyxPQUFPLElBQVg7O0FBTUEsSUFBSUMsU0FBUyxTQUFUQSxNQUFTLEdBQVc7QUFDdEIsU0FBTztBQUNMO0FBQ0FDLGFBQVMsbUJBQVU7QUFDakJDO0FBQ0QsS0FKSTtBQUtMO0FBQ0FDLDBCQUFzQiw4QkFBU0MsUUFBVCxFQUFtQjtBQUN2Q0Msb0JBQWNELFFBQWQ7QUFDRCxLQVJJO0FBU0w7QUFDQUUsdUJBQW1CLDJCQUFTQyxPQUFULEVBQWtCO0FBQ25DQyxrQkFBWUQsT0FBWjtBQUNEO0FBWkksR0FBUDtBQWNELENBZkQ7O0FBeUJBLFNBQVNMLGVBQVQsR0FBMkI7QUFDeEJKLFdBQVNXLEdBQUdSLE9BQUgsQ0FBVyxzQkFBb0JGLElBQS9CLENBQVQ7QUFDRjs7QUFJRCxTQUFTTSxhQUFULENBQXVCRCxRQUF2QixFQUFpQztBQUMvQixNQUFHTixVQUFVLElBQWIsRUFBa0I7QUFDaEJZLFlBQVFDLEdBQVIsQ0FBWSxvQkFBb0JQLFFBQWhDO0FBQ0FOLFdBQU9jLElBQVAsQ0FBWSxpQkFBWixFQUErQixFQUFDUixVQUFXQSxRQUFaLEVBQS9CO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTSSxXQUFULENBQXFCSyxZQUFyQixFQUFrQztBQUNoQyxNQUFHZixVQUFVLElBQWIsRUFBa0I7QUFDaEIsUUFBSWdCLFVBQVVDLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCSCxZQUFsQixDQUFkO0FBQ0FILFlBQVFDLEdBQVIsQ0FBWSw4QkFBWjtBQUNBO0FBQ0FHLFlBQVFHLE9BQVIsR0FBa0JILFFBQVFHLE9BQVIsQ0FBZ0JDLElBQWxDO0FBQ0FKLFlBQVFLLElBQVIsR0FBZUwsUUFBUUssSUFBUixDQUFhRCxJQUE1QjtBQUNBcEIsV0FBT2MsSUFBUCxDQUFZLGFBQVosRUFBMkJFLE9BQTNCO0FBQ0EsV0FBTyxJQUFQO0FBRUQ7QUFDRCxTQUFPLEtBQVA7QUFDRDs7QUFLRDtBQUNBO0FBQ0EsSUFBSU0sWUFBWSxTQUFaQSxTQUFZLENBQVNDLEdBQVQsRUFBY0MsSUFBZCxFQUFvQjtBQUNsQyxNQUFJQyxjQUFjLHFCQUFsQjtBQUNBLE1BQUlDLE1BQU0sRUFBVjtBQUNBLE1BQUlDLE9BQU9DLEtBQUtOLFNBQUwsQ0FBZUMsR0FBZixFQUFvQixVQUFTTSxHQUFULEVBQWNDLEtBQWQsRUFBcUI7QUFDbEQsUUFBSSxPQUFPQSxLQUFQLEtBQWlCLFVBQXJCLEVBQWlDO0FBQy9CSixVQUFJSyxJQUFKLENBQVNELEtBQVQ7QUFDQSxhQUFPTCxXQUFQO0FBQ0Q7QUFDRCxXQUFPSyxLQUFQO0FBQ0QsR0FOVSxFQU1SLENBTlEsQ0FBWDtBQU9BSCxTQUFPQSxLQUFLSyxPQUFMLENBQWEsSUFBSUMsTUFBSixDQUFXLE1BQU1SLFdBQU4sR0FBb0IsR0FBL0IsRUFBb0MsR0FBcEMsQ0FBYixFQUF1RCxVQUFTUyxDQUFULEVBQVk7QUFDeEUsV0FBT1IsSUFBSVMsS0FBSixFQUFQO0FBQ0QsR0FGTSxDQUFQO0FBR0EsU0FBUVIsT0FBTyxHQUFmO0FBQ0QsQ0FkRCIsImZpbGUiOiJsb2dnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsb2cgaGVscGVyXG5cbnZhciBzb2NrZXQgPSBudWxsO1xudmFyIHBvcnQgPSA4MDAwO1xuXG5cblxuXG5cbnZhciBMb2dnZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICAvL0Nvbm5lY3QgdG8gdGhlIHNlcnZlclxuICAgIGNvbm5lY3Q6IGZ1bmN0aW9uKCl7XG4gICAgICBjb25uZWN0VG9TZXJ2ZXIoKTtcbiAgICB9LFxuICAgIC8vQ2hhbmdlIHRoZSB1c2VyJ3MgbmFtZSAob2YgdGhlIHNvY2tldClcbiAgICBjaGFuZ2VVc2VybmFtZVNvY2tldDogZnVuY3Rpb24odXNlcm5hbWUpIHtcbiAgICAgIHNlbmRfdXNlcm5hbWUodXNlcm5hbWUpO1xuICAgIH0sXG4gICAgLy9TZW5kIGEgY29tbWFuZCB0byB0aGUgc2VydmVyIGFuZCB0aGUgc2VydmVyIGxvZ3MgaXRcbiAgICBzZW5kQW5kTG9nQ29tbWFuZDogZnVuY3Rpb24oY29tbWFuZCkge1xuICAgICAgbG9nX2NvbW1hbmQoY29tbWFuZCk7XG4gICAgfSxcbiAgfVxufTtcblxuXG5cblxuXG5cblxuXG5cbmZ1bmN0aW9uIGNvbm5lY3RUb1NlcnZlcigpIHtcbiAgIHNvY2tldCA9IGlvLmNvbm5lY3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6Jytwb3J0KTtcbn07XG5cblxuXG5mdW5jdGlvbiBzZW5kX3VzZXJuYW1lKHVzZXJuYW1lKSB7XG4gIGlmKHNvY2tldCAhPSBudWxsKXtcbiAgICBjb25zb2xlLmxvZyhcInVzZXJuYW1lIHZhbCA6IFwiICsgdXNlcm5hbWUpO1xuICAgIHNvY2tldC5lbWl0KCdjaGFuZ2VfdXNlcm5hbWUnLCB7dXNlcm5hbWUgOiB1c2VybmFtZX0pXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGxvZ19jb21tYW5kKGNvbW1hbmRQYXJhbSl7XG4gIGlmKHNvY2tldCAhPSBudWxsKXtcbiAgICBsZXQgb2JqQ29weSA9IE9iamVjdC5hc3NpZ24oe30sIGNvbW1hbmRQYXJhbSk7XG4gICAgY29uc29sZS5sb2coXCIqKiogTE9HR0VSIDogbG9nX2NvbW1hbmQgKioqXCIgKTtcbiAgICAvL1xuICAgIG9iakNvcHkuZXhlY3V0ZSA9IG9iakNvcHkuZXhlY3V0ZS5uYW1lO1xuICAgIG9iakNvcHkudW5kbyA9IG9iakNvcHkudW5kby5uYW1lO1xuICAgIHNvY2tldC5lbWl0KCdsb2dfY29tbWFuZCcsIG9iakNvcHkpO1xuICAgIHJldHVybiB0cnVlO1xuICAgIFxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cblxuXG5cbi8vU3RyaW5naWZ5IGFuIG9iamVjdCwgaWYgdGhlIG9iamVjdCBjb250YWluIGEgZnVuY3Rpb24sXG4vLyAvIVxcIGl0IGNvbnZlcnQgdGhlIGJvZHkgb2YgdGhlIGZ1bmN0aW9uIGludG8gdGV4dFxudmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkge1xuICB2YXIgcGxhY2Vob2xkZXIgPSAnX19fX1BMQUNFSE9MREVSX19fXyc7XG4gIHZhciBmbnMgPSBbXTtcbiAgdmFyIGpzb24gPSBKU09OLnN0cmluZ2lmeShvYmosIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmbnMucHVzaCh2YWx1ZSk7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSwgMik7XG4gIGpzb24gPSBqc29uLnJlcGxhY2UobmV3IFJlZ0V4cCgnXCInICsgcGxhY2Vob2xkZXIgKyAnXCInLCAnZycpLCBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGZucy5zaGlmdCgpO1xuICB9KTtcbiAgcmV0dXJuICBqc29uICsgJzsnO1xufTtcblxuXG4iXX0=