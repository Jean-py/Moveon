"use strict";

// log helper

var socket = null;
var port = 8000;
var socket_name_session = "dev";

var Logger = function Logger() {
  return {
    //Connect to the server
    connect: function connect() {
      connectToServer();
    },
    //Change the user's name (of the socket)
    changeUsernameSocket: function changeUsernameSocket(username) {
      send_username(username);
    },
    //Send a command to the server and the server logs it
    sendAndLogCommand: function sendAndLogCommand(command) {
      log_command(command);
    },
    getSocket_name_session: function getSocket_name_session() {
      return _getSocket_name_session();
    }
  };
};

function _getSocket_name_session() {
  return socket_name_session;
}

function connectToServer() {
  console.log("testing connect to server...");
  var addr = document.URL;
  //Split the https://xxxx:port#oNote  to xxxx:port
  addr = addr.split('/')[2];
  console.log("connect to : " + addr);
  socket = io.connect(addr);
  console.log("changing username socket to dev");
  logger.changeUsernameSocket("dev");
};

function send_username(username) {
  if (socket != null) {
    //console.log("username val : " + username);
    socket_name_session = username;
    socket.emit("socket_username", { username: username });
  }
};

//TODO faire une deep recopies des objets pass√© en parametre!
function log_command(commandParam) {
  console.log("executing : ");
  console.log(commandParam);
  if (socket != null) {
    var objCopy = null;

    //We have to log an event, if so, it's a circular reference and need to be treated as well
    if (commandParam.e !== undefined) {
      //console.log("OK --- " ) ;
      //console.log(commandParam.e.pageX) ;

      var mouse_event = { mouseEvent: { pageX: commandParam.e.pageX, pageY: commandParam.e.pageY } };

      //const o2 = { y: commandParam.e.pageY};
      objCopy = Object.assign({}, commandParam);
      objCopy = Object.assign(commandParam, mouse_event);
      objCopy.e = undefined;
    } else {
      objCopy = Object.assign({}, commandParam);
    }

    //console.log("*** LOGGER : log_command ***" );
    if (socket_name_session !== null) {
      send_username(socket_name_session);
    }
    objCopy.execute = objCopy.execute.name;
    if (objCopy.undo != null) {
      objCopy.undo = objCopy.undo.name;
    }

    socket.emit("log_command", objCopy);
    return true;
  }
  return false;
};

//Stringify an object, if the object contain a function,
// /!\ it convert the body of the function into text
var stringify = function stringify(obj, prop) {
  var placeholder = '____PLACEHOLDER____';
  var fns = [];
  var json = JSON.stringify(obj, function (key, value) {
    if (typeof value === 'function') {
      fns.push(value);
      return placeholder;
    }
    return value;
  }, 2);
  json = json.replace(new RegExp('"' + placeholder + '"', 'g'), function (_) {
    return fns.shift();
  });
  return json + ';';
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2dlci5qcyJdLCJuYW1lcyI6WyJzb2NrZXQiLCJwb3J0Iiwic29ja2V0X25hbWVfc2Vzc2lvbiIsIkxvZ2dlciIsImNvbm5lY3QiLCJjb25uZWN0VG9TZXJ2ZXIiLCJjaGFuZ2VVc2VybmFtZVNvY2tldCIsInVzZXJuYW1lIiwic2VuZF91c2VybmFtZSIsInNlbmRBbmRMb2dDb21tYW5kIiwiY29tbWFuZCIsImxvZ19jb21tYW5kIiwiZ2V0U29ja2V0X25hbWVfc2Vzc2lvbiIsImNvbnNvbGUiLCJsb2ciLCJhZGRyIiwiZG9jdW1lbnQiLCJVUkwiLCJzcGxpdCIsImlvIiwibG9nZ2VyIiwiZW1pdCIsImNvbW1hbmRQYXJhbSIsIm9iakNvcHkiLCJlIiwidW5kZWZpbmVkIiwibW91c2VfZXZlbnQiLCJtb3VzZUV2ZW50IiwicGFnZVgiLCJwYWdlWSIsIk9iamVjdCIsImFzc2lnbiIsImV4ZWN1dGUiLCJuYW1lIiwidW5kbyIsInN0cmluZ2lmeSIsIm9iaiIsInByb3AiLCJwbGFjZWhvbGRlciIsImZucyIsImpzb24iLCJKU09OIiwia2V5IiwidmFsdWUiLCJwdXNoIiwicmVwbGFjZSIsIlJlZ0V4cCIsIl8iLCJzaGlmdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQSxJQUFJQSxTQUFTLElBQWI7QUFDQSxJQUFJQyxPQUFPLElBQVg7QUFDQSxJQUFJQyxzQkFBc0IsS0FBMUI7O0FBRUEsSUFBSUMsU0FBUyxTQUFUQSxNQUFTLEdBQVc7QUFDdEIsU0FBTztBQUNMO0FBQ0FDLGFBQVMsbUJBQVU7QUFDakJDO0FBQ0QsS0FKSTtBQUtMO0FBQ0FDLDBCQUFzQiw4QkFBU0MsUUFBVCxFQUFtQjtBQUN2Q0Msb0JBQWNELFFBQWQ7QUFDRCxLQVJJO0FBU0w7QUFDQUUsdUJBQW1CLDJCQUFTQyxPQUFULEVBQWtCO0FBQ25DQyxrQkFBWUQsT0FBWjtBQUNELEtBWkk7QUFhTEUsNEJBQXdCLGtDQUFZO0FBQ2xDLGFBQU9BLHlCQUFQO0FBQ0Q7QUFmSSxHQUFQO0FB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ImZpbGUiOiJsb2dnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsb2cgaGVscGVyXG5cbnZhciBzb2NrZXQgPSBudWxsO1xudmFyIHBvcnQgPSA4MDAwO1xudmFyIHNvY2tldF9uYW1lX3Nlc3Npb24gPSBcImRldlwiO1xuXG52YXIgTG9nZ2VyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgLy9Db25uZWN0IHRvIHRoZSBzZXJ2ZXJcbiAgICBjb25uZWN0OiBmdW5jdGlvbigpe1xuICAgICAgY29ubmVjdFRvU2VydmVyKCk7XG4gICAgfSxcbiAgICAvL0NoYW5nZSB0aGUgdXNlcidzIG5hbWUgKG9mIHRoZSBzb2NrZXQpXG4gICAgY2hhbmdlVXNlcm5hbWVTb2NrZXQ6IGZ1bmN0aW9uKHVzZXJuYW1lKSB7XG4gICAgICBzZW5kX3VzZXJuYW1lKHVzZXJuYW1lKTtcbiAgICB9LFxuICAgIC8vU2VuZCBhIGNvbW1hbmQgdG8gdGhlIHNlcnZlciBhbmQgdGhlIHNlcnZlciBsb2dzIGl0XG4gICAgc2VuZEFuZExvZ0NvbW1hbmQ6IGZ1bmN0aW9uKGNvbW1hbmQpIHtcbiAgICAgIGxvZ19jb21tYW5kKGNvbW1hbmQpO1xuICAgIH0sXG4gICAgZ2V0U29ja2V0X25hbWVfc2Vzc2lvbjogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGdldFNvY2tldF9uYW1lX3Nlc3Npb24oKTtcbiAgICB9LFxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRTb2NrZXRfbmFtZV9zZXNzaW9uKCl7XG4gIHJldHVybiBzb2NrZXRfbmFtZV9zZXNzaW9uO1xufVxuXG5cblxuXG5cblxuXG5mdW5jdGlvbiBjb25uZWN0VG9TZXJ2ZXIoKSB7XG4gIGNvbnNvbGUubG9nKFwidGVzdGluZyBjb25uZWN0IHRvIHNlcnZlci4uLlwiKTtcbiAgdmFyIGFkZHIgPSBkb2N1bWVudC5VUkw7XG4gIC8vU3BsaXQgdGhlIGh0dHBzOi8veHh4eDpwb3J0I29Ob3RlICB0byB4eHh4OnBvcnRcbiAgYWRkciA9IGFkZHIuc3BsaXQoJy8nKVsyXTtcbiAgY29uc29sZS5sb2coXCJjb25uZWN0IHRvIDogXCIgKyBhZGRyKTtcbiAgc29ja2V0ID0gaW8uY29ubmVjdChhZGRyKTtcbiAgY29uc29sZS5sb2coXCJjaGFuZ2luZyB1c2VybmFtZSBzb2NrZXQgdG8gZGV2XCIpO1xuICBsb2dnZXIuY2hhbmdlVXNlcm5hbWVTb2NrZXQoXCJkZXZcIik7XG59O1xuXG5cblxuZnVuY3Rpb24gc2VuZF91c2VybmFtZSh1c2VybmFtZSkge1xuICBpZihzb2NrZXQgIT0gbnVsbCl7XG4gICAgLy9jb25zb2xlLmxvZyhcInVzZXJuYW1lIHZhbCA6IFwiICsgdXNlcm5hbWUpO1xuICAgIHNvY2tldF9uYW1lX3Nlc3Npb24gPSB1c2VybmFtZTtcbiAgICBzb2NrZXQuZW1pdChcInNvY2tldF91c2VybmFtZVwiLCB7dXNlcm5hbWUgOiB1c2VybmFtZX0pXG4gIH1cbn07XG5cbi8vVE9ETyBmYWlyZSB1bmUgZGVlcCByZWNvcGllcyBkZXMgb2JqZXRzIHBhc3PDqSBlbiBwYXJhbWV0cmUhXG5mdW5jdGlvbiBsb2dfY29tbWFuZChjb21tYW5kUGFyYW0pe1xuICBjb25zb2xlLmxvZyhcImV4ZWN1dGluZyA6IFwiKTtcbiAgY29uc29sZS5sb2coY29tbWFuZFBhcmFtKTtcbiAgaWYoc29ja2V0ICE9IG51bGwpe1xuICAgIHZhciBvYmpDb3B5ID0gbnVsbDtcbiAgICBcbiAgICAvL1dlIGhhdmUgdG8gbG9nIGFuIGV2ZW50LCBpZiBzbywgaXQncyBhIGNpcmN1bGFyIHJlZmVyZW5jZSBhbmQgbmVlZCB0byBiZSB0cmVhdGVkIGFzIHdlbGxcbiAgICBpZiAoY29tbWFuZFBhcmFtLmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy9jb25zb2xlLmxvZyhcIk9LIC0tLSBcIiApIDtcbiAgICAgIC8vY29uc29sZS5sb2coY29tbWFuZFBhcmFtLmUucGFnZVgpIDtcbiAgICAgIFxuICAgICAgY29uc3QgbW91c2VfZXZlbnQgPSB7bW91c2VFdmVudCA6IHtwYWdlWDogY29tbWFuZFBhcmFtLmUucGFnZVgsIHBhZ2VZOiBjb21tYW5kUGFyYW0uZS5wYWdlWX19O1xuICAgICAgXG4gICAgICAvL2NvbnN0IG8yID0geyB5OiBjb21tYW5kUGFyYW0uZS5wYWdlWX07XG4gICAgICAgb2JqQ29weSA9IE9iamVjdC5hc3NpZ24oe30sIGNvbW1hbmRQYXJhbSk7XG4gICAgICAgb2JqQ29weSA9IE9iamVjdC5hc3NpZ24oY29tbWFuZFBhcmFtLCBtb3VzZV9ldmVudCk7XG4gICAgICAgb2JqQ29weS5lID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAgb2JqQ29weSA9IE9iamVjdC5hc3NpZ24oe30sIGNvbW1hbmRQYXJhbSk7XG4gICAgfVxuICBcbiAgICBcbiAgICBcbiAgICAvL2NvbnNvbGUubG9nKFwiKioqIExPR0dFUiA6IGxvZ19jb21tYW5kICoqKlwiICk7XG4gICAgaWYoc29ja2V0X25hbWVfc2Vzc2lvbiAhPT0gbnVsbCApe1xuICAgICAgc2VuZF91c2VybmFtZShzb2NrZXRfbmFtZV9zZXNzaW9uKTtcbiAgICB9XG4gICAgb2JqQ29weS5leGVjdXRlID0gb2JqQ29weS5leGVjdXRlLm5hbWU7XG4gICAgaWYob2JqQ29weS51bmRvICE9IG51bGwpe1xuICAgICAgb2JqQ29weS51bmRvID0gb2JqQ29weS51bmRvLm5hbWU7XG4gICAgfVxuXG4gICAgc29ja2V0LmVtaXQoXCJsb2dfY29tbWFuZFwiLCBvYmpDb3B5KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgICBcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5cblxuXG4vL1N0cmluZ2lmeSBhbiBvYmplY3QsIGlmIHRoZSBvYmplY3QgY29udGFpbiBhIGZ1bmN0aW9uLFxuLy8gLyFcXCBpdCBjb252ZXJ0IHRoZSBib2R5IG9mIHRoZSBmdW5jdGlvbiBpbnRvIHRleHRcbnZhciBzdHJpbmdpZnkgPSBmdW5jdGlvbihvYmosIHByb3ApIHtcbiAgdmFyIHBsYWNlaG9sZGVyID0gJ19fX19QTEFDRUhPTERFUl9fX18nO1xuICB2YXIgZm5zID0gW107XG4gIHZhciBqc29uID0gSlNPTi5zdHJpbmdpZnkob2JqLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZm5zLnB1c2godmFsdWUpO1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sIDIpO1xuICBqc29uID0ganNvbi5yZXBsYWNlKG5ldyBSZWdFeHAoJ1wiJyArIHBsYWNlaG9sZGVyICsgJ1wiJywgJ2cnKSwgZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBmbnMuc2hpZnQoKTtcbiAgfSk7XG4gIHJldHVybiAganNvbiArICc7Jztcbn07XG5cblxuIl19