"use strict";

// log helper

var socket = null;
var port = 8000;

var Logger = function Logger() {
  return {
    //Connect to the server
    connect: function connect() {
      connectToServer();
    },
    //Change the user's name (of the socket)
    changeUsernameSocket: function changeUsernameSocket(username) {
      send_username(username);
    },
    //Send a command to the server and the server logs it
    sendAndLogCommand: function sendAndLogCommand(command) {
      log_command(command);
    }
  };
};

function connectToServer() {
  socket = io.connect("http://localhost:" + port);
};

function send_username(username) {
  if (socket != null) {
    console.log("username val : " + username);
    socket.emit("change_username", { username: username });
  }
};

function log_command(commandParam) {
  if (socket != null) {
    var objCopy = Object.assign({}, commandParam);
    console.log("*** LOGGER : log_command ***");
    //
    objCopy.execute = objCopy.execute.name;
    objCopy.undo = objCopy.undo.name;
    socket.emit("log_command", objCopy);

    return true;
  }
  return false;
};

//Stringify an object, if the object contain a function,
// /!\ it convert the body of the function into text
var stringify = function stringify(obj, prop) {
  var placeholder = '____PLACEHOLDER____';
  var fns = [];
  var json = JSON.stringify(obj, function (key, value) {
    if (typeof value === 'function') {
      fns.push(value);
      return placeholder;
    }
    return value;
  }, 2);
  json = json.replace(new RegExp('"' + placeholder + '"', 'g'), function (_) {
    return fns.shift();
  });
  return json + ';';
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2dlci5qcyJdLCJuYW1lcyI6WyJzb2NrZXQiLCJwb3J0IiwiTG9nZ2VyIiwiY29ubmVjdCIsImNvbm5lY3RUb1NlcnZlciIsImNoYW5nZVVzZXJuYW1lU29ja2V0IiwidXNlcm5hbWUiLCJzZW5kX3VzZXJuYW1lIiwic2VuZEFuZExvZ0NvbW1hbmQiLCJjb21tYW5kIiwibG9nX2NvbW1hbmQiLCJpbyIsImNvbnNvbGUiLCJsb2ciLCJlbWl0IiwiY29tbWFuZFBhcmFtIiwib2JqQ29weSIsIk9iamVjdCIsImFzc2lnbiIsImV4ZWN1dGUiLCJuYW1lIiwidW5kbyIsInN0cmluZ2lmeSIsIm9iaiIsInByb3AiLCJwbGFjZWhvbGRlciIsImZucyIsImpzb24iLCJKU09OIiwia2V5IiwidmFsdWUiLCJwdXNoIiwicmVwbGFjZSIsIlJlZ0V4cCIsIl8iLCJzaGlmdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQSxJQUFJQSxTQUFTLElBQWI7QUFDQSxJQUFJQyxPQUFPLElBQVg7O0FBR0EsSUFBSUMsU0FBUyxTQUFUQSxNQUFTLEdBQVc7QUFDdEIsU0FBTztBQUNMO0FBQ0FDLGFBQVMsbUJBQVU7QUFDakJDO0FBQ0QsS0FKSTtBQUtMO0FBQ0FDLDBCQUFzQiw4QkFBU0MsUUFBVCxFQUFtQjtBQUN2Q0Msb0JBQWNELFFBQWQ7QUFDRCxLQVJJO0FBU0w7QUFDQUUsdUJBQW1CLDJCQUFTQyxPQUFULEVBQWtCO0FBQ25DQyxrQkFBWUQsT0FBWjtBQUNEO0FBWkksR0FBUDtBQWNELENBZkQ7O0FBeUJBLFNBQVNMLGVBQVQsR0FBMkI7QUFDeEJKLFdBQVNXLEdBQUdSLE9BQUgsQ0FBVyxzQkFBb0JGLElBQS9CLENBQVQ7QUFDRjs7QUFJRCxTQUFTTSxhQUFULENBQXVCRCxRQUF2QixFQUFpQztBQUMvQixNQUFHTixVQUFVLElBQWIsRUFBa0I7QUFDaEJZLFlBQVFDLEdBQVIsQ0FBWSxvQkFBb0JQLFFBQWhDO0FBQ0FOLFdBQU9jLElBQVAsQ0FBWSxpQkFBWixFQUErQixFQUFDUixVQUFXQSxRQUFaLEVBQS9CO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTSSxXQUFULENBQXFCSyxZQUFyQixFQUFrQztBQUNoQyxNQUFHZixVQUFVLElBQWIsRUFBa0I7QUFDaEIsUUFBSWdCLFVBQVVDLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCSCxZQUFsQixDQUFkO0FBQ0FILFlBQVFDLEdBQVIsQ0FBWSw4QkFBWjtBQUNBO0FBQ0FHLFlBQVFHLE9BQVIsR0FBa0JILFFBQVFHLE9BQVIsQ0FBZ0JDLElBQWxDO0FBQ0FKLFlBQVFLLElBQVIsR0FBZUwsUUFBUUssSUFBUixDQUFhRCxJQUE1QjtBQUNBcEIsV0FBT2MsSUFBUCxDQUFZLGFBQVosRUFBMkJFLE9BQTNCOztBQUVBLFdBQU8sSUFBUDtBQUVEO0FBQ0QsU0FBTyxLQUFQO0FBQ0Q7O0FBS0Q7QUFDQTtBQUNBLElBQUlNLFlBQVksU0FBWkEsU0FBWSxDQUFTQyxHQUFULEVBQWNDLElBQWQsRUFBb0I7QUFDbEMsTUFBSUMsY0FBYyxxQkFBbEI7QUFDQSxNQUFJQyxNQUFNLEVBQVY7QUFDQSxNQUFJQyxPQUFPQyxLQUFLTixTQUFMLENBQWVDLEdBQWYsRUFBb0IsVUFBU00sR0FBVCxFQUFjQyxLQUFkLEVBQXFCO0FBQ2xELFFBQUksT0FBT0EsS0FBUCxLQUFpQixVQUFyQixFQUFpQztBQUMvQkosVUFBSUssSUFBSixDQUFTRCxLQUFUO0FBQ0EsYUFBT0wsV0FBUDtBQUNEO0FBQ0QsV0FBT0ssS0FBUDtBQUNELEdBTlUsRUFNUixDQU5RLENBQVg7QUFPQUgsU0FBT0EsS0FBS0ssT0FBTCxDQUFhLElBQUlDLE1BQUosQ0FBVyxNQUFNUixXQUFOLEdBQW9CLEdBQS9CLEVBQW9DLEdBQXBDLENBQWIsRUFBdUQsVUFBU1MsQ0FBVCxFQUFZO0FBQ3hFLFdBQU9SLElBQUlTLEtBQUosRUFBUDtBQUNELEdBRk0sQ0FBUDtBQUdBLFNBQVFSLE9BQU8sR0FBZjtBQUNELENBZEQiLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbG9nIGhlbHBlclxuXG52YXIgc29ja2V0ID0gbnVsbDtcbnZhciBwb3J0ID0gODAwMDtcblxuXG52YXIgTG9nZ2VyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgLy9Db25uZWN0IHRvIHRoZSBzZXJ2ZXJcbiAgICBjb25uZWN0OiBmdW5jdGlvbigpe1xuICAgICAgY29ubmVjdFRvU2VydmVyKCk7XG4gICAgfSxcbiAgICAvL0NoYW5nZSB0aGUgdXNlcidzIG5hbWUgKG9mIHRoZSBzb2NrZXQpXG4gICAgY2hhbmdlVXNlcm5hbWVTb2NrZXQ6IGZ1bmN0aW9uKHVzZXJuYW1lKSB7XG4gICAgICBzZW5kX3VzZXJuYW1lKHVzZXJuYW1lKTtcbiAgICB9LFxuICAgIC8vU2VuZCBhIGNvbW1hbmQgdG8gdGhlIHNlcnZlciBhbmQgdGhlIHNlcnZlciBsb2dzIGl0XG4gICAgc2VuZEFuZExvZ0NvbW1hbmQ6IGZ1bmN0aW9uKGNvbW1hbmQpIHtcbiAgICAgIGxvZ19jb21tYW5kKGNvbW1hbmQpO1xuICAgIH0sXG4gIH1cbn07XG5cblxuXG5cblxuXG5cblxuXG5mdW5jdGlvbiBjb25uZWN0VG9TZXJ2ZXIoKSB7XG4gICBzb2NrZXQgPSBpby5jb25uZWN0KFwiaHR0cDovL2xvY2FsaG9zdDpcIitwb3J0KTtcbn07XG5cblxuXG5mdW5jdGlvbiBzZW5kX3VzZXJuYW1lKHVzZXJuYW1lKSB7XG4gIGlmKHNvY2tldCAhPSBudWxsKXtcbiAgICBjb25zb2xlLmxvZyhcInVzZXJuYW1lIHZhbCA6IFwiICsgdXNlcm5hbWUpO1xuICAgIHNvY2tldC5lbWl0KFwiY2hhbmdlX3VzZXJuYW1lXCIsIHt1c2VybmFtZSA6IHVzZXJuYW1lfSlcbiAgfVxufTtcblxuZnVuY3Rpb24gbG9nX2NvbW1hbmQoY29tbWFuZFBhcmFtKXtcbiAgaWYoc29ja2V0ICE9IG51bGwpe1xuICAgIGxldCBvYmpDb3B5ID0gT2JqZWN0LmFzc2lnbih7fSwgY29tbWFuZFBhcmFtKTtcbiAgICBjb25zb2xlLmxvZyhcIioqKiBMT0dHRVIgOiBsb2dfY29tbWFuZCAqKipcIiApO1xuICAgIC8vXG4gICAgb2JqQ29weS5leGVjdXRlID0gb2JqQ29weS5leGVjdXRlLm5hbWU7XG4gICAgb2JqQ29weS51bmRvID0gb2JqQ29weS51bmRvLm5hbWU7XG4gICAgc29ja2V0LmVtaXQoXCJsb2dfY29tbWFuZFwiLCBvYmpDb3B5KTtcbiAgIFxuICAgIHJldHVybiB0cnVlO1xuICAgIFxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cblxuXG5cbi8vU3RyaW5naWZ5IGFuIG9iamVjdCwgaWYgdGhlIG9iamVjdCBjb250YWluIGEgZnVuY3Rpb24sXG4vLyAvIVxcIGl0IGNvbnZlcnQgdGhlIGJvZHkgb2YgdGhlIGZ1bmN0aW9uIGludG8gdGV4dFxudmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkge1xuICB2YXIgcGxhY2Vob2xkZXIgPSAnX19fX1BMQUNFSE9MREVSX19fXyc7XG4gIHZhciBmbnMgPSBbXTtcbiAgdmFyIGpzb24gPSBKU09OLnN0cmluZ2lmeShvYmosIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmbnMucHVzaCh2YWx1ZSk7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSwgMik7XG4gIGpzb24gPSBqc29uLnJlcGxhY2UobmV3IFJlZ0V4cCgnXCInICsgcGxhY2Vob2xkZXIgKyAnXCInLCAnZycpLCBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGZucy5zaGlmdCgpO1xuICB9KTtcbiAgcmV0dXJuICBqc29uICsgJzsnO1xufTtcblxuXG4iXX0=