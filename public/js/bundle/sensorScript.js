'use strict';

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}

/*import * as lfo  from 'waves-lfo/client';
import * as Myo from 'dist/client/js/myo';
import * as SG from 'ml-savitzky-golay';
import * as config from '../../config/default';*/

var lfo = require('waves-lfo/client');
var Myo = require('./myo');
var SG = require('ml-savitzky-golay');
var config = require('../../config/default');

//Gravity constant
var g = 9.81;

//Constant for window Length used
var EMGWindowLength = 500;
var acceleroWindowLength = 30;
//Modification en direct
var speedRateWindowLength = 10;
var amplitudeWindowLength = 10;
var SGWindowLength = 22;

//Time for the bpfDisplay
var time = 0;
var dt = 0.01;
var timeEMG = 0;
var dtEMG = 0.01;

//Socked to send data to node
var socketSendJerkiness = new lfo.sink.SocketSend({ port: config.socketClientToServer.port });

//Starting myo
Myo.connect('com.stolksdorf.myAwesomeApp');
var myMyo = void 0;

//Creation of graph
var eventInAccelero = new lfo.source.EventIn({
  frameType: 'vector',
  frameSize: 3,
  frameRate: 0.01,
  description: ['acceleroX', 'acceleroY', 'acceleroZ']
});
var eventInSmoothness = new lfo.source.EventIn({
  frameType: 'vector',
  frameSize: 1,
  frameRate: 0.01,
  description: ['smoothX', 'smoothY', 'smoothZ']
});
var eventInGyro = new lfo.source.EventIn({
  frameType: 'vector',
  frameSize: 3,
  frameRate: 0.01,
  description: ['gyroX', 'gyroY', 'gyroZ']
});
var eventInEMG = new lfo.source.EventIn({
  frameType: 'vector',
  frameSize: 8,
  frameRate: 0.01,
  description: ['emg', 'emg', 'emg', 'emg', 'emg', 'emg', 'emg', 'emg']
});
var eventInEMGSliding = new lfo.source.EventIn({
  frameType: 'vector',
  frameSize: 1,
  frameRate: 0.01,
  description: ['emgSliding']
});
var eventInSmoothnessRecorded = new lfo.source.EventIn({
  frameType: 'vector',
  frameSize: 1,
  frameRate: 0.01,
  description: ['smoothX']
});

// initialize and start the different graph used
function initGraph() {
  //eventInAccelero.start();
  //eventInGyro.start();
  //eventInEMGSliding.start();
  //eventInEMG.start();
  eventInSmoothnessRecorded.start();
  eventInSmoothness.start();

  console.log("event in started");
  /*ACCELERO*/
  //eventInAccelero.connect(bpfDisplayAccelero);
  /*JERKINESS RATE*/
  //eventInSmoothness.connect(bpfDisplayJerkiness);
  eventInSmoothness.connect(socketSendJerkiness);
  /*EMG*/
  //eventInEMG.connect(bpfDisplayEMG);
  /*EMGS SLIDING WINDOW*/
  //eventInEMGSliding.connect(bpfDisplayEMGSlinding);
}

/*MYO starting event handler*/
Myo.onError = function () {
  console.log("Couldn't connect to Myo Connect");
};

Myo.on('connected', function () {
  myMyo = this;
  //myMyo.setLockingPolicy("Manual");
  addEvents(myMyo);
});

var addEvents = function addEvents(myo) {

  myMyo.streamEMG(true);
  Myo.on('emg', function (data) {
    //displayEMGWindow(EMGWindowLength,data);
  });

  var bpfDisplayAccelero = new lfo.sink.BpfDisplay({
    canvas: '#canvasBPFAccelero',
    width: 400,
    height: 250,
    duration: 5,
    max: 9,
    min: -9
  });
  var bpfDisplayJerkiness = new lfo.sink.BpfDisplay({
    canvas: '#bpfDisplayJerkiness',
    width: 400,
    height: 250,
    duration: 5,
    max: 1,
    min: -1
  });
  var bpfDisplayEMG = new lfo.sink.BpfDisplay({
    canvas: '#canvasEMG1',
    width: 400,
    height: 250,
    duration: 5,
    max: 128,
    min: -128
  });
  var bpfDisplayEMGSlinding = new lfo.sink.BpfDisplay({
    canvas: '#canvasEMG2',
    width: 400,
    height: 250,
    duration: 5,
    max: 1,
    min: -1
  });

  //Le low pass ne marche pas et je ne sais toujours pas pourquoi. Probleme de config?
  var biquad = new lfo.operator.Biquad({
    type: 'lowpass',
    f0: 50,
    gain: 3,
    q: 12
  });

  var biquad2 = new lfo.operator.Biquad({
    type: 'lowpass',
    f0: 500,
    gain: 3,
    q: 12
  });

  var movingAverage = new lfo.operator.MovingAverage({
    order: 5,
    fill: 0
  });

  //Init the different graph used and choose wich one to display
  initGraph();
  Myo.on('imu', function (data) {
    myMyo.lock();
    displayWindow(data);
  });
};

function displayWindow(data) {
  //displayAcceleroWindowSpeed(acceleroWindowLength,data);
  displaySmoothness(SGWindowLength, data);
  //displayEMGWindow(SGWindowLength,data);
}

/*Method sliding window computation, require less computation than the naive one*/
var ansX = [];
var ansY = [];
var ansZ = [];
var computedSpeedRate = 0;
var sumLastElem = 0;
var sumFirstElem = 0;
function computeSpeedRateAdaptativeWindow(windowLength, newX, newY, newZ) {
  if (ansX.length >= windowLength) {
    var firstElementX = ansX.shift();
    var firstElementY = ansY.shift();
    var firstElementZ = ansZ.shift();
    sumFirstElem = firstElementX + firstElementY + firstElementZ;
  }
  var x = Math.abs(newX / g);
  // let x = (newX/g);
  ansX.push(x);
  var y = Math.abs(newY / g);
  // let y = (newY/g);
  ansY.push(y);
  var z = Math.abs(newZ / g);
  //let z = (newZ/g);
  ansZ.push(z);

  sumLastElem = x + y + z;
  computedSpeedRate = computedSpeedRate - sumFirstElem + sumLastElem;

  return computedSpeedRate;
}

//Algorithm de calcul naif de la vitesse selon une fenetre: retourne le meme resultat que l'algorithme evolué
var ansXNaif = [];
var ansYNaif = [];
var ansZNaif = [];
function computeSpeedRateAdaptativeWindowNaif(windowLength, x, y, z) {
  console.log("The function computeSpeedRateAdaptativeWindowNaif is deprecated, use computeSpeedRateAdaptativeWindow instead.");
  if (ansXNaif.length >= windowLength) {
    ansXNaif.shift();
    ansYNaif.shift();
    ansZNaif.shift();
  }
  ansXNaif.push(x / g);
  ansYNaif.push(y / g);
  ansZNaif.push(z / g);

  var speedRate = 0;
  for (var _i = 0; _i < windowLength; _i++) {
    speedRate += ansXNaif[_i] + ansYNaif[_i] + ansZNaif[_i];
    //speedRate += Math.abs(ansX[i]/g)+ Math.abs(ansY[i]/g) +  Math.abs(ansZ[i]/g);
    // speedRate +=Math.sqrt(Math.pow( Math.abs(ansX[i]/g) ,2)+ Math.pow(  Math.abs(ansY[i]/g),2) + Math.pow( Math.abs(ansZ[i]/g),2));
  }
  return speedRate;
}

function displayAcceleroWindowSpeed(windowLength, data) {
  time += dt;
  var speedRate = computeSpeedRateAdaptativeWindow(windowLength, data.accelerometer.x, data.accelerometer.y, data.accelerometer.z);
  var frameAccelero = {
    time: time,
    data: [data.accelerometer.x * speedRate, data.accelerometer.y * speedRate, data.accelerometer.z * speedRate],
    metadata: true
  };
  eventInAccelero.processFrame(frameAccelero);
}

//For the sliding window of kinestetic awareness replication
var slidingWindow = [];
function displayEMGWindow(windowLength, data) {
  timeEMG += dtEMG;
  //Slinding window of EMG
  if (slidingWindow.length > windowLength) {
    slidingWindow.shift();
  }
  slidingWindow.push(Math.max.apply(Math, _toConsumableArray(data)));
  var maxSliding = Math.max.apply(Math, slidingWindow);
  var frameEMGSliding = {
    time: timeEMG,
    data: slidingWindow[slidingWindow.length - 1] / maxSliding
  };

  var frameEMG = {
    time: timeEMG,
    data: data
  };
  eventInEMGSliding.processFrame(frameEMGSliding);
  eventInEMG.processFrame(frameEMG);
}

//variables for the savitzky-golay filter
var arrayFilteringX = [];
var arrayFilteringY = [];
var arrayFilteringZ = [];
var ansx = [];
var ansy = [];
var ansz = [];
var options = { derivative: 1, windowSize: SGWindowLength - 1 };
var optionsGolayLowPass = { derivative: 0 };
function displaySmoothness(windowLengthSG, data) {
  //Calculing smoothness
  arrayFilteringX.push(data.accelerometer.x);
  arrayFilteringY.push(data.accelerometer.y);
  arrayFilteringZ.push(data.accelerometer.z);

  //taille de la fenetre de calcule de l'algorithme
  if (arrayFilteringZ.length >= windowLengthSG) {
    arrayFilteringX.shift();
    arrayFilteringY.shift();
    arrayFilteringZ.shift();

    //apllication de savitzky-golay filter
    ansx = SG(arrayFilteringX, 1, options);
    ansy = SG(arrayFilteringY, 1, options);
    ansz = SG(arrayFilteringZ, 1, options);

    //normalising data
    var normaliseData = Math.sqrt(Math.pow(ansx[ansx.length - 1], 2) + Math.pow(ansy[ansy.length - 1], 2) + Math.pow(ansz[ansz.length - 1], 2));
    var amplitudeData = computeAmplitudeWindow(amplitudeWindowLength, normaliseData);
    var speedRate = computeSpeedRateAdaptativeWindow(speedRateWindowLength, data.accelerometer.x, data.accelerometer.y, data.accelerometer.z);
    // console.log("speedRate : " + speedRate);

    if (recording) {
      arrayRecorded.push(normaliseData);
      console.log("arrayRecorded : " + arrayRecorded.length);
    }

    var frameSmoothness = {
      time: time,
      data: amplitudeData,
      //data: normaliseData,
      metadata: null
    };
    eventInSmoothness.processFrame(frameSmoothness);
  }
}

//version naive de l'algorithme, le for peut etre remplacé comme dans la fonction: computeSpeedRateAdaptativeWindow
//Moyenne des données du jerk normalisé
var arrayAmplitude = [];
function computeAmplitudeWindow(windowLength, data) {
  var amplitudeRate = 0;
  if (arrayAmplitude.length > windowLength) {
    arrayAmplitude.shift();
  }
  arrayAmplitude.push(data);
  for (var _i2 = 0; _i2 < windowLength; _i2++) {
    amplitudeRate += arrayAmplitude[_i2];
  }
  amplitudeRate /= windowLength;
  // console.log("amplitudeRate : " + amplitudeRate );
  return amplitudeRate;
}

window.setSGWindowLength = function (newValue) {
  //console.log("new value SG : " + newValue);
  SGWindowLength = newValue;
  options = { derivative: 1, windowSize: SGWindowLength - 1 };

  arrayFilteringX = [];
  arrayFilteringY = [];
  arrayFilteringZ = [];
  ansX = [];
  ansY = [];
  ansZ = [];
};

window.setAmplitudeWindowLength = function (newValue) {
  amplitudeWindowLength = newValue;
};

var arrayRecorded = [];
var recording = false;

/*Button function*/
window.startRecord = function () {
  console.log("recording");
  eventInSmoothness.stop();
  StreamOnOff("off");
  arrayRecorded = [];
  recording = true;
};

window.stopRecord = function () {
  eventInSmoothness.start();
  recording = false;
};

var i = 0;
var timer;

window.playRecorded = function () {
  timer = setInterval(playingRecord, 20);
  eventInSmoothnessRecorded.connect(socketSendJerkiness);
  eventInSmoothnessRecorded.start();
  eventInSmoothness.stop();

  function playingRecord() {
    if (i < arrayRecorded.length) {
      var frameSmoothness = {
        time: i,
        data: arrayRecorded[i],
        //data: normaliseData,
        metadata: null
      };
      eventInSmoothnessRecorded.processFrame(frameSmoothness);
    } else {
      clearTimeout(timer);
      eventInSmoothnessRecorded.stop();
      eventInSmoothness.start();
      i = 0;
    }
    i++;
  }
};
window.stopingRecorded = function () {
  clearTimeout(timer);
  eventInSmoothnessRecorded.stop();
  eventInSmoothness.start();
  StreamOnOff("on");

  i = 0;
};

//2000 = on, 1000 = off
var onOff = 1000;
window.StreamOnOff = function (value) {
  if (value === "on") {
    onOff = 1000;
    eventInSmoothness.start();
  } else if (value === "off") {
    onOff = 2000;
    //eventInSmoothness.stop();
  } else {
    if (onOff === 1000) {
      console.log("on : " + onOff);
      eventInSmoothness.start();
      onOff = 2000;
    } else {
      console.log("off  : " + onOff);
      onOff = 1000;
      //eventInSmoothness.stop();
    }
  }

  var frameSmoothnessOnOFF = {
    time: i,
    data: onOff,
    //data: normaliseData,
    metadata: null
  };

  eventInSmoothness.processFrame(frameSmoothnessOnOFF);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,